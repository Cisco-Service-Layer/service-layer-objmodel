// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: sl_global.proto

#include "sl_global.pb.h"
#include "sl_global.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLGlobal_method_names[] = {
  "/service_layer.SLGlobal/SLGlobalInitNotif",
  "/service_layer.SLGlobal/SLGlobalsGet",
};

std::unique_ptr< SLGlobal::Stub> SLGlobal::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SLGlobal::Stub> stub(new SLGlobal::Stub(channel));
  return stub;
}

SLGlobal::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SLGlobalInitNotif_(SLGlobal_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SLGlobalsGet_(SLGlobal_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::service_layer::SLGlobalNotif>* SLGlobal::Stub::SLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request) {
  return new ::grpc::ClientReader< ::service_layer::SLGlobalNotif>(channel_.get(), rpcmethod_SLGlobalInitNotif_, context, request);
}

::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>* SLGlobal::Stub::AsyncSLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>(channel_.get(), cq, rpcmethod_SLGlobalInitNotif_, context, request, tag);
}

::grpc::Status SLGlobal::Stub::SLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::service_layer::SLGlobalsGetMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLGlobalsGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>* SLGlobal::Stub::AsyncSLGlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>(channel_.get(), cq, rpcmethod_SLGlobalsGet_, context, request);
}

SLGlobal::Service::Service() {
  (void)SLGlobal_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      SLGlobal_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< SLGlobal::Service, ::service_layer::SLInitMsg, ::service_layer::SLGlobalNotif>(
          std::mem_fn(&SLGlobal::Service::SLGlobalInitNotif), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLGlobal_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLGlobal::Service, ::service_layer::SLGlobalsGetMsg, ::service_layer::SLGlobalsGetMsgRsp>(
          std::mem_fn(&SLGlobal::Service::SLGlobalsGet), this)));
}

SLGlobal::Service::~Service() {
}

::grpc::Status SLGlobal::Service::SLGlobalInitNotif(::grpc::ServerContext* context, const ::service_layer::SLInitMsg* request, ::grpc::ServerWriter< ::service_layer::SLGlobalNotif>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLGlobal::Service::SLGlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

