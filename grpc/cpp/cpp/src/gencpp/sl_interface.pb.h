// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_interface.proto

#ifndef PROTOBUF_sl_5finterface_2eproto__INCLUDED
#define PROTOBUF_sl_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_sl_5finterface_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSLInterfaceGlobalsRegMsgImpl();
void InitDefaultsSLInterfaceGlobalsRegMsg();
void InitDefaultsSLInterfaceGlobalsRegMsgRspImpl();
void InitDefaultsSLInterfaceGlobalsRegMsgRsp();
void InitDefaultsSLInterfaceGlobalsGetMsgImpl();
void InitDefaultsSLInterfaceGlobalsGetMsg();
void InitDefaultsSLInterfaceGlobalsGetMsgRspImpl();
void InitDefaultsSLInterfaceGlobalsGetMsgRsp();
void InitDefaultsSLInterfaceGlobalsGetStatsMsgRspImpl();
void InitDefaultsSLInterfaceGlobalsGetStatsMsgRsp();
void InitDefaultsSLInterfaceGetMsgImpl();
void InitDefaultsSLInterfaceGetMsg();
void InitDefaultsSLInterfaceInfoMsgImpl();
void InitDefaultsSLInterfaceInfoMsg();
void InitDefaultsSLInterfaceGetMsgRspImpl();
void InitDefaultsSLInterfaceGetMsgRsp();
void InitDefaultsSLInterfaceGetNotifMsgImpl();
void InitDefaultsSLInterfaceGetNotifMsg();
void InitDefaultsSLInterfaceNotifImpl();
void InitDefaultsSLInterfaceNotif();
void InitDefaultsSLInterfaceNotifMsgImpl();
void InitDefaultsSLInterfaceNotifMsg();
void InitDefaultsSLInterfaceNotifMsgResImpl();
void InitDefaultsSLInterfaceNotifMsgRes();
void InitDefaultsSLInterfaceNotifMsgRspImpl();
void InitDefaultsSLInterfaceNotifMsgRsp();
inline void InitDefaults() {
  InitDefaultsSLInterfaceGlobalsRegMsg();
  InitDefaultsSLInterfaceGlobalsRegMsgRsp();
  InitDefaultsSLInterfaceGlobalsGetMsg();
  InitDefaultsSLInterfaceGlobalsGetMsgRsp();
  InitDefaultsSLInterfaceGlobalsGetStatsMsgRsp();
  InitDefaultsSLInterfaceGetMsg();
  InitDefaultsSLInterfaceInfoMsg();
  InitDefaultsSLInterfaceGetMsgRsp();
  InitDefaultsSLInterfaceGetNotifMsg();
  InitDefaultsSLInterfaceNotif();
  InitDefaultsSLInterfaceNotifMsg();
  InitDefaultsSLInterfaceNotifMsgRes();
  InitDefaultsSLInterfaceNotifMsgRsp();
}
}  // namespace protobuf_sl_5finterface_2eproto
namespace service_layer {
class SLInterfaceGetMsg;
class SLInterfaceGetMsgDefaultTypeInternal;
extern SLInterfaceGetMsgDefaultTypeInternal _SLInterfaceGetMsg_default_instance_;
class SLInterfaceGetMsgRsp;
class SLInterfaceGetMsgRspDefaultTypeInternal;
extern SLInterfaceGetMsgRspDefaultTypeInternal _SLInterfaceGetMsgRsp_default_instance_;
class SLInterfaceGetNotifMsg;
class SLInterfaceGetNotifMsgDefaultTypeInternal;
extern SLInterfaceGetNotifMsgDefaultTypeInternal _SLInterfaceGetNotifMsg_default_instance_;
class SLInterfaceGlobalsGetMsg;
class SLInterfaceGlobalsGetMsgDefaultTypeInternal;
extern SLInterfaceGlobalsGetMsgDefaultTypeInternal _SLInterfaceGlobalsGetMsg_default_instance_;
class SLInterfaceGlobalsGetMsgRsp;
class SLInterfaceGlobalsGetMsgRspDefaultTypeInternal;
extern SLInterfaceGlobalsGetMsgRspDefaultTypeInternal _SLInterfaceGlobalsGetMsgRsp_default_instance_;
class SLInterfaceGlobalsGetStatsMsgRsp;
class SLInterfaceGlobalsGetStatsMsgRspDefaultTypeInternal;
extern SLInterfaceGlobalsGetStatsMsgRspDefaultTypeInternal _SLInterfaceGlobalsGetStatsMsgRsp_default_instance_;
class SLInterfaceGlobalsRegMsg;
class SLInterfaceGlobalsRegMsgDefaultTypeInternal;
extern SLInterfaceGlobalsRegMsgDefaultTypeInternal _SLInterfaceGlobalsRegMsg_default_instance_;
class SLInterfaceGlobalsRegMsgRsp;
class SLInterfaceGlobalsRegMsgRspDefaultTypeInternal;
extern SLInterfaceGlobalsRegMsgRspDefaultTypeInternal _SLInterfaceGlobalsRegMsgRsp_default_instance_;
class SLInterfaceInfoMsg;
class SLInterfaceInfoMsgDefaultTypeInternal;
extern SLInterfaceInfoMsgDefaultTypeInternal _SLInterfaceInfoMsg_default_instance_;
class SLInterfaceNotif;
class SLInterfaceNotifDefaultTypeInternal;
extern SLInterfaceNotifDefaultTypeInternal _SLInterfaceNotif_default_instance_;
class SLInterfaceNotifMsg;
class SLInterfaceNotifMsgDefaultTypeInternal;
extern SLInterfaceNotifMsgDefaultTypeInternal _SLInterfaceNotifMsg_default_instance_;
class SLInterfaceNotifMsgRes;
class SLInterfaceNotifMsgResDefaultTypeInternal;
extern SLInterfaceNotifMsgResDefaultTypeInternal _SLInterfaceNotifMsgRes_default_instance_;
class SLInterfaceNotifMsgRsp;
class SLInterfaceNotifMsgRspDefaultTypeInternal;
extern SLInterfaceNotifMsgRspDefaultTypeInternal _SLInterfaceNotifMsgRsp_default_instance_;
}  // namespace service_layer
namespace service_layer {

enum SLInterfaceState {
  SL_IF_STATE_UNKNOWN = 0,
  SL_IF_STATE_DOWN = 1,
  SL_IF_STATE_UP = 2,
  SLInterfaceState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SLInterfaceState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SLInterfaceState_IsValid(int value);
const SLInterfaceState SLInterfaceState_MIN = SL_IF_STATE_UNKNOWN;
const SLInterfaceState SLInterfaceState_MAX = SL_IF_STATE_UP;
const int SLInterfaceState_ARRAYSIZE = SLInterfaceState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SLInterfaceState_descriptor();
inline const ::std::string& SLInterfaceState_Name(SLInterfaceState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SLInterfaceState_descriptor(), value);
}
inline bool SLInterfaceState_Parse(
    const ::std::string& name, SLInterfaceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SLInterfaceState>(
    SLInterfaceState_descriptor(), name, value);
}
enum SLInterfaceNotifType {
  SL_INTERFACE_EVENT_TYPE_RESERVED = 0,
  SL_INTERFACE_EVENT_TYPE_ERROR = 1,
  SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO = 2,
  SLInterfaceNotifType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SLInterfaceNotifType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SLInterfaceNotifType_IsValid(int value);
const SLInterfaceNotifType SLInterfaceNotifType_MIN = SL_INTERFACE_EVENT_TYPE_RESERVED;
const SLInterfaceNotifType SLInterfaceNotifType_MAX = SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO;
const int SLInterfaceNotifType_ARRAYSIZE = SLInterfaceNotifType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SLInterfaceNotifType_descriptor();
inline const ::std::string& SLInterfaceNotifType_Name(SLInterfaceNotifType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SLInterfaceNotifType_descriptor(), value);
}
inline bool SLInterfaceNotifType_Parse(
    const ::std::string& name, SLInterfaceNotifType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SLInterfaceNotifType>(
    SLInterfaceNotifType_descriptor(), name, value);
}
// ===================================================================

class SLInterfaceGlobalsRegMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGlobalsRegMsg) */ {
 public:
  SLInterfaceGlobalsRegMsg();
  virtual ~SLInterfaceGlobalsRegMsg();

  SLInterfaceGlobalsRegMsg(const SLInterfaceGlobalsRegMsg& from);

  inline SLInterfaceGlobalsRegMsg& operator=(const SLInterfaceGlobalsRegMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGlobalsRegMsg(SLInterfaceGlobalsRegMsg&& from) noexcept
    : SLInterfaceGlobalsRegMsg() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGlobalsRegMsg& operator=(SLInterfaceGlobalsRegMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsRegMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGlobalsRegMsg* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGlobalsRegMsg*>(
               &_SLInterfaceGlobalsRegMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SLInterfaceGlobalsRegMsg* other);
  friend void swap(SLInterfaceGlobalsRegMsg& a, SLInterfaceGlobalsRegMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsRegMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGlobalsRegMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGlobalsRegMsg& from);
  void MergeFrom(const SLInterfaceGlobalsRegMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGlobalsRegMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLRegOp Oper = 1;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::service_layer::SLRegOp oper() const;
  void set_oper(::service_layer::SLRegOp value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsRegMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int oper_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGlobalsRegMsgImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsRegMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGlobalsRegMsgRsp) */ {
 public:
  SLInterfaceGlobalsRegMsgRsp();
  virtual ~SLInterfaceGlobalsRegMsgRsp();

  SLInterfaceGlobalsRegMsgRsp(const SLInterfaceGlobalsRegMsgRsp& from);

  inline SLInterfaceGlobalsRegMsgRsp& operator=(const SLInterfaceGlobalsRegMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGlobalsRegMsgRsp(SLInterfaceGlobalsRegMsgRsp&& from) noexcept
    : SLInterfaceGlobalsRegMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGlobalsRegMsgRsp& operator=(SLInterfaceGlobalsRegMsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsRegMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGlobalsRegMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGlobalsRegMsgRsp*>(
               &_SLInterfaceGlobalsRegMsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SLInterfaceGlobalsRegMsgRsp* other);
  friend void swap(SLInterfaceGlobalsRegMsgRsp& a, SLInterfaceGlobalsRegMsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsRegMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGlobalsRegMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGlobalsRegMsgRsp& from);
  void MergeFrom(const SLInterfaceGlobalsRegMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGlobalsRegMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsRegMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGlobalsRegMsgRspImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsGetMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGlobalsGetMsg) */ {
 public:
  SLInterfaceGlobalsGetMsg();
  virtual ~SLInterfaceGlobalsGetMsg();

  SLInterfaceGlobalsGetMsg(const SLInterfaceGlobalsGetMsg& from);

  inline SLInterfaceGlobalsGetMsg& operator=(const SLInterfaceGlobalsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGlobalsGetMsg(SLInterfaceGlobalsGetMsg&& from) noexcept
    : SLInterfaceGlobalsGetMsg() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGlobalsGetMsg& operator=(SLInterfaceGlobalsGetMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGlobalsGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGlobalsGetMsg*>(
               &_SLInterfaceGlobalsGetMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SLInterfaceGlobalsGetMsg* other);
  friend void swap(SLInterfaceGlobalsGetMsg& a, SLInterfaceGlobalsGetMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsGetMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGlobalsGetMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGlobalsGetMsg& from);
  void MergeFrom(const SLInterfaceGlobalsGetMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGlobalsGetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsGetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGlobalsGetMsgImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsGetMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGlobalsGetMsgRsp) */ {
 public:
  SLInterfaceGlobalsGetMsgRsp();
  virtual ~SLInterfaceGlobalsGetMsgRsp();

  SLInterfaceGlobalsGetMsgRsp(const SLInterfaceGlobalsGetMsgRsp& from);

  inline SLInterfaceGlobalsGetMsgRsp& operator=(const SLInterfaceGlobalsGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGlobalsGetMsgRsp(SLInterfaceGlobalsGetMsgRsp&& from) noexcept
    : SLInterfaceGlobalsGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGlobalsGetMsgRsp& operator=(SLInterfaceGlobalsGetMsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGlobalsGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGlobalsGetMsgRsp*>(
               &_SLInterfaceGlobalsGetMsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SLInterfaceGlobalsGetMsgRsp* other);
  friend void swap(SLInterfaceGlobalsGetMsgRsp& a, SLInterfaceGlobalsGetMsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsGetMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGlobalsGetMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGlobalsGetMsgRsp& from);
  void MergeFrom(const SLInterfaceGlobalsGetMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGlobalsGetMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // uint32 MaxInterfacesPerBatch = 2;
  void clear_maxinterfacesperbatch();
  static const int kMaxInterfacesPerBatchFieldNumber = 2;
  ::google::protobuf::uint32 maxinterfacesperbatch() const;
  void set_maxinterfacesperbatch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsGetMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::google::protobuf::uint32 maxinterfacesperbatch_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGlobalsGetMsgRspImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsGetStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGlobalsGetStatsMsgRsp) */ {
 public:
  SLInterfaceGlobalsGetStatsMsgRsp();
  virtual ~SLInterfaceGlobalsGetStatsMsgRsp();

  SLInterfaceGlobalsGetStatsMsgRsp(const SLInterfaceGlobalsGetStatsMsgRsp& from);

  inline SLInterfaceGlobalsGetStatsMsgRsp& operator=(const SLInterfaceGlobalsGetStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGlobalsGetStatsMsgRsp(SLInterfaceGlobalsGetStatsMsgRsp&& from) noexcept
    : SLInterfaceGlobalsGetStatsMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGlobalsGetStatsMsgRsp& operator=(SLInterfaceGlobalsGetStatsMsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsGetStatsMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGlobalsGetStatsMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGlobalsGetStatsMsgRsp*>(
               &_SLInterfaceGlobalsGetStatsMsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SLInterfaceGlobalsGetStatsMsgRsp* other);
  friend void swap(SLInterfaceGlobalsGetStatsMsgRsp& a, SLInterfaceGlobalsGetStatsMsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsGetStatsMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGlobalsGetStatsMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from);
  void MergeFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGlobalsGetStatsMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // uint64 SeqNum = 2;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 2;
  ::google::protobuf::uint64 seqnum() const;
  void set_seqnum(::google::protobuf::uint64 value);

  // uint32 InterfaceNotifCount = 3;
  void clear_interfacenotifcount();
  static const int kInterfaceNotifCountFieldNumber = 3;
  ::google::protobuf::uint32 interfacenotifcount() const;
  void set_interfacenotifcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::google::protobuf::uint64 seqnum_;
  ::google::protobuf::uint32 interfacenotifcount_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGlobalsGetStatsMsgRspImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGetMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGetMsg) */ {
 public:
  SLInterfaceGetMsg();
  virtual ~SLInterfaceGetMsg();

  SLInterfaceGetMsg(const SLInterfaceGetMsg& from);

  inline SLInterfaceGetMsg& operator=(const SLInterfaceGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGetMsg(SLInterfaceGetMsg&& from) noexcept
    : SLInterfaceGetMsg() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGetMsg& operator=(SLInterfaceGetMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGetMsg*>(
               &_SLInterfaceGetMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SLInterfaceGetMsg* other);
  friend void swap(SLInterfaceGetMsg& a, SLInterfaceGetMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGetMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGetMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGetMsg& from);
  void MergeFrom(const SLInterfaceGetMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLInterface Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLInterface& key() const;
  ::service_layer::SLInterface* release_key();
  ::service_layer::SLInterface* mutable_key();
  void set_allocated_key(::service_layer::SLInterface* key);

  // uint32 EntriesCount = 2;
  void clear_entriescount();
  static const int kEntriesCountFieldNumber = 2;
  ::google::protobuf::uint32 entriescount() const;
  void set_entriescount(::google::protobuf::uint32 value);

  // bool GetNext = 3;
  void clear_getnext();
  static const int kGetNextFieldNumber = 3;
  bool getnext() const;
  void set_getnext(bool value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLInterface* key_;
  ::google::protobuf::uint32 entriescount_;
  bool getnext_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGetMsgImpl();
};
// -------------------------------------------------------------------

class SLInterfaceInfoMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceInfoMsg) */ {
 public:
  SLInterfaceInfoMsg();
  virtual ~SLInterfaceInfoMsg();

  SLInterfaceInfoMsg(const SLInterfaceInfoMsg& from);

  inline SLInterfaceInfoMsg& operator=(const SLInterfaceInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceInfoMsg(SLInterfaceInfoMsg&& from) noexcept
    : SLInterfaceInfoMsg() {
    *this = ::std::move(from);
  }

  inline SLInterfaceInfoMsg& operator=(SLInterfaceInfoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceInfoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceInfoMsg* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceInfoMsg*>(
               &_SLInterfaceInfoMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SLInterfaceInfoMsg* other);
  friend void swap(SLInterfaceInfoMsg& a, SLInterfaceInfoMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceInfoMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceInfoMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceInfoMsg& from);
  void MergeFrom(const SLInterfaceInfoMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceInfoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLInterface SLIfInfo = 1;
  bool has_slifinfo() const;
  void clear_slifinfo();
  static const int kSLIfInfoFieldNumber = 1;
  const ::service_layer::SLInterface& slifinfo() const;
  ::service_layer::SLInterface* release_slifinfo();
  ::service_layer::SLInterface* mutable_slifinfo();
  void set_allocated_slifinfo(::service_layer::SLInterface* slifinfo);

  // uint64 SeqNum = 3;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 3;
  ::google::protobuf::uint64 seqnum() const;
  void set_seqnum(::google::protobuf::uint64 value);

  // .service_layer.SLInterfaceState IfState = 2;
  void clear_ifstate();
  static const int kIfStateFieldNumber = 2;
  ::service_layer::SLInterfaceState ifstate() const;
  void set_ifstate(::service_layer::SLInterfaceState value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceInfoMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLInterface* slifinfo_;
  ::google::protobuf::uint64 seqnum_;
  int ifstate_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceInfoMsgImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGetMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGetMsgRsp) */ {
 public:
  SLInterfaceGetMsgRsp();
  virtual ~SLInterfaceGetMsgRsp();

  SLInterfaceGetMsgRsp(const SLInterfaceGetMsgRsp& from);

  inline SLInterfaceGetMsgRsp& operator=(const SLInterfaceGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGetMsgRsp(SLInterfaceGetMsgRsp&& from) noexcept
    : SLInterfaceGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGetMsgRsp& operator=(SLInterfaceGetMsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGetMsgRsp*>(
               &_SLInterfaceGetMsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SLInterfaceGetMsgRsp* other);
  friend void swap(SLInterfaceGetMsgRsp& a, SLInterfaceGetMsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGetMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGetMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGetMsgRsp& from);
  void MergeFrom(const SLInterfaceGetMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGetMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 3;
  const ::service_layer::SLInterfaceInfoMsg& entries(int index) const;
  ::service_layer::SLInterfaceInfoMsg* mutable_entries(int index);
  ::service_layer::SLInterfaceInfoMsg* add_entries();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // bool Eof = 1;
  void clear_eof();
  static const int kEofFieldNumber = 1;
  bool eof() const;
  void set_eof(bool value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGetMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGetMsgRspImpl();
};
// -------------------------------------------------------------------

class SLInterfaceGetNotifMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceGetNotifMsg) */ {
 public:
  SLInterfaceGetNotifMsg();
  virtual ~SLInterfaceGetNotifMsg();

  SLInterfaceGetNotifMsg(const SLInterfaceGetNotifMsg& from);

  inline SLInterfaceGetNotifMsg& operator=(const SLInterfaceGetNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceGetNotifMsg(SLInterfaceGetNotifMsg&& from) noexcept
    : SLInterfaceGetNotifMsg() {
    *this = ::std::move(from);
  }

  inline SLInterfaceGetNotifMsg& operator=(SLInterfaceGetNotifMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGetNotifMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceGetNotifMsg* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceGetNotifMsg*>(
               &_SLInterfaceGetNotifMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SLInterfaceGetNotifMsg* other);
  friend void swap(SLInterfaceGetNotifMsg& a, SLInterfaceGetNotifMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceGetNotifMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceGetNotifMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceGetNotifMsg& from);
  void MergeFrom(const SLInterfaceGetNotifMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceGetNotifMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGetNotifMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceGetNotifMsgImpl();
};
// -------------------------------------------------------------------

class SLInterfaceNotif : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceNotif) */ {
 public:
  SLInterfaceNotif();
  virtual ~SLInterfaceNotif();

  SLInterfaceNotif(const SLInterfaceNotif& from);

  inline SLInterfaceNotif& operator=(const SLInterfaceNotif& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceNotif(SLInterfaceNotif&& from) noexcept
    : SLInterfaceNotif() {
    *this = ::std::move(from);
  }

  inline SLInterfaceNotif& operator=(SLInterfaceNotif&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotif& default_instance();

  enum EventCase {
    kErrStatus = 2,
    kInfo = 3,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceNotif* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceNotif*>(
               &_SLInterfaceNotif_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SLInterfaceNotif* other);
  friend void swap(SLInterfaceNotif& a, SLInterfaceNotif& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceNotif* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceNotif* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceNotif& from);
  void MergeFrom(const SLInterfaceNotif& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceNotif* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLInterfaceNotifType EventType = 1;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  ::service_layer::SLInterfaceNotifType eventtype() const;
  void set_eventtype(::service_layer::SLInterfaceNotifType value);

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // .service_layer.SLInterfaceInfoMsg Info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::service_layer::SLInterfaceInfoMsg& info() const;
  ::service_layer::SLInterfaceInfoMsg* release_info();
  ::service_layer::SLInterfaceInfoMsg* mutable_info();
  void set_allocated_info(::service_layer::SLInterfaceInfoMsg* info);

  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotif)
 private:
  void set_has_errstatus();
  void set_has_info();

  inline bool has_Event() const;
  void clear_Event();
  inline void clear_has_Event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int eventtype_;
  union EventUnion {
    EventUnion() {}
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLInterfaceInfoMsg* info_;
  } Event_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceNotifImpl();
};
// -------------------------------------------------------------------

class SLInterfaceNotifMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceNotifMsg) */ {
 public:
  SLInterfaceNotifMsg();
  virtual ~SLInterfaceNotifMsg();

  SLInterfaceNotifMsg(const SLInterfaceNotifMsg& from);

  inline SLInterfaceNotifMsg& operator=(const SLInterfaceNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceNotifMsg(SLInterfaceNotifMsg&& from) noexcept
    : SLInterfaceNotifMsg() {
    *this = ::std::move(from);
  }

  inline SLInterfaceNotifMsg& operator=(SLInterfaceNotifMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotifMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceNotifMsg* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceNotifMsg*>(
               &_SLInterfaceNotifMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SLInterfaceNotifMsg* other);
  friend void swap(SLInterfaceNotifMsg& a, SLInterfaceNotifMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceNotifMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceNotifMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceNotifMsg& from);
  void MergeFrom(const SLInterfaceNotifMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceNotifMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .service_layer.SLInterface Entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::service_layer::SLInterface& entries(int index) const;
  ::service_layer::SLInterface* mutable_entries(int index);
  ::service_layer::SLInterface* add_entries();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >&
      entries() const;

  // .service_layer.SLNotifOp Oper = 1;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::service_layer::SLNotifOp oper() const;
  void set_oper(::service_layer::SLNotifOp value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotifMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface > entries_;
  int oper_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceNotifMsgImpl();
};
// -------------------------------------------------------------------

class SLInterfaceNotifMsgRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceNotifMsgRes) */ {
 public:
  SLInterfaceNotifMsgRes();
  virtual ~SLInterfaceNotifMsgRes();

  SLInterfaceNotifMsgRes(const SLInterfaceNotifMsgRes& from);

  inline SLInterfaceNotifMsgRes& operator=(const SLInterfaceNotifMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceNotifMsgRes(SLInterfaceNotifMsgRes&& from) noexcept
    : SLInterfaceNotifMsgRes() {
    *this = ::std::move(from);
  }

  inline SLInterfaceNotifMsgRes& operator=(SLInterfaceNotifMsgRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotifMsgRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceNotifMsgRes* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceNotifMsgRes*>(
               &_SLInterfaceNotifMsgRes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SLInterfaceNotifMsgRes* other);
  friend void swap(SLInterfaceNotifMsgRes& a, SLInterfaceNotifMsgRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceNotifMsgRes* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceNotifMsgRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceNotifMsgRes& from);
  void MergeFrom(const SLInterfaceNotifMsgRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceNotifMsgRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // .service_layer.SLInterface Key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::service_layer::SLInterface& key() const;
  ::service_layer::SLInterface* release_key();
  ::service_layer::SLInterface* mutable_key();
  void set_allocated_key(::service_layer::SLInterface* key);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotifMsgRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLInterface* key_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceNotifMsgResImpl();
};
// -------------------------------------------------------------------

class SLInterfaceNotifMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInterfaceNotifMsgRsp) */ {
 public:
  SLInterfaceNotifMsgRsp();
  virtual ~SLInterfaceNotifMsgRsp();

  SLInterfaceNotifMsgRsp(const SLInterfaceNotifMsgRsp& from);

  inline SLInterfaceNotifMsgRsp& operator=(const SLInterfaceNotifMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLInterfaceNotifMsgRsp(SLInterfaceNotifMsgRsp&& from) noexcept
    : SLInterfaceNotifMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLInterfaceNotifMsgRsp& operator=(SLInterfaceNotifMsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotifMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInterfaceNotifMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLInterfaceNotifMsgRsp*>(
               &_SLInterfaceNotifMsgRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SLInterfaceNotifMsgRsp* other);
  friend void swap(SLInterfaceNotifMsgRsp& a, SLInterfaceNotifMsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInterfaceNotifMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLInterfaceNotifMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLInterfaceNotifMsgRsp& from);
  void MergeFrom(const SLInterfaceNotifMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLInterfaceNotifMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::service_layer::SLInterfaceNotifMsgRes& results(int index) const;
  ::service_layer::SLInterfaceNotifMsgRes* mutable_results(int index);
  ::service_layer::SLInterfaceNotifMsgRes* add_results();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  void clear_statussummary();
  static const int kStatusSummaryFieldNumber = 1;
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotifMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable int _cached_size_;
  friend struct ::protobuf_sl_5finterface_2eproto::TableStruct;
  friend void ::protobuf_sl_5finterface_2eproto::InitDefaultsSLInterfaceNotifMsgRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLInterfaceGlobalsRegMsg

// .service_layer.SLRegOp Oper = 1;
inline void SLInterfaceGlobalsRegMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLRegOp SLInterfaceGlobalsRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsRegMsg.Oper)
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
inline void SLInterfaceGlobalsRegMsg::set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsRegMsg.Oper)
}

// -------------------------------------------------------------------

// SLInterfaceGlobalsRegMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceGlobalsRegMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGlobalsRegMsgRsp::errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsRegMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsRegMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  return errstatus_;
}
inline void SLInterfaceGlobalsRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      errstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
}

// -------------------------------------------------------------------

// SLInterfaceGlobalsGetMsg

// -------------------------------------------------------------------

// SLInterfaceGlobalsGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceGlobalsGetMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGlobalsGetMsgRsp::errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  return errstatus_;
}
inline void SLInterfaceGlobalsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      errstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
}

// uint32 MaxInterfacesPerBatch = 2;
inline void SLInterfaceGlobalsGetMsgRsp::clear_maxinterfacesperbatch() {
  maxinterfacesperbatch_ = 0u;
}
inline ::google::protobuf::uint32 SLInterfaceGlobalsGetMsgRsp::maxinterfacesperbatch() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetMsgRsp.MaxInterfacesPerBatch)
  return maxinterfacesperbatch_;
}
inline void SLInterfaceGlobalsGetMsgRsp::set_maxinterfacesperbatch(::google::protobuf::uint32 value) {
  
  maxinterfacesperbatch_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetMsgRsp.MaxInterfacesPerBatch)
}

// -------------------------------------------------------------------

// SLInterfaceGlobalsGetStatsMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceGlobalsGetStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGlobalsGetStatsMsgRsp::errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline void SLInterfaceGlobalsGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      errstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
}

// uint64 SeqNum = 2;
inline void SLInterfaceGlobalsGetStatsMsgRsp::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SLInterfaceGlobalsGetStatsMsgRsp::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.SeqNum)
  return seqnum_;
}
inline void SLInterfaceGlobalsGetStatsMsgRsp::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.SeqNum)
}

// uint32 InterfaceNotifCount = 3;
inline void SLInterfaceGlobalsGetStatsMsgRsp::clear_interfacenotifcount() {
  interfacenotifcount_ = 0u;
}
inline ::google::protobuf::uint32 SLInterfaceGlobalsGetStatsMsgRsp::interfacenotifcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.InterfaceNotifCount)
  return interfacenotifcount_;
}
inline void SLInterfaceGlobalsGetStatsMsgRsp::set_interfacenotifcount(::google::protobuf::uint32 value) {
  
  interfacenotifcount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.InterfaceNotifCount)
}

// -------------------------------------------------------------------

// SLInterfaceGetMsg

// .service_layer.SLInterface Key = 1;
inline bool SLInterfaceGetMsg::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline const ::service_layer::SLInterface& SLInterfaceGetMsg::key() const {
  const ::service_layer::SLInterface* p = key_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.Key)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLInterface*>(
      &::service_layer::_SLInterface_default_instance_);
}
inline ::service_layer::SLInterface* SLInterfaceGetMsg::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceGetMsg.Key)
  
  ::service_layer::SLInterface* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::service_layer::SLInterface* SLInterfaceGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsg.Key)
  return key_;
}
inline void SLInterfaceGetMsg::set_allocated_key(::service_layer::SLInterface* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(key_);
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGetMsg.Key)
}

// uint32 EntriesCount = 2;
inline void SLInterfaceGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::google::protobuf::uint32 SLInterfaceGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.EntriesCount)
  return entriescount_;
}
inline void SLInterfaceGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsg.EntriesCount)
}

// bool GetNext = 3;
inline void SLInterfaceGetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLInterfaceGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.GetNext)
  return getnext_;
}
inline void SLInterfaceGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLInterfaceInfoMsg

// .service_layer.SLInterface SLIfInfo = 1;
inline bool SLInterfaceInfoMsg::has_slifinfo() const {
  return this != internal_default_instance() && slifinfo_ != NULL;
}
inline const ::service_layer::SLInterface& SLInterfaceInfoMsg::slifinfo() const {
  const ::service_layer::SLInterface* p = slifinfo_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLInterface*>(
      &::service_layer::_SLInterface_default_instance_);
}
inline ::service_layer::SLInterface* SLInterfaceInfoMsg::release_slifinfo() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  
  ::service_layer::SLInterface* temp = slifinfo_;
  slifinfo_ = NULL;
  return temp;
}
inline ::service_layer::SLInterface* SLInterfaceInfoMsg::mutable_slifinfo() {
  
  if (slifinfo_ == NULL) {
    slifinfo_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  return slifinfo_;
}
inline void SLInterfaceInfoMsg::set_allocated_slifinfo(::service_layer::SLInterface* slifinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(slifinfo_);
  }
  if (slifinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slifinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slifinfo, submessage_arena);
    }
    
  } else {
    
  }
  slifinfo_ = slifinfo;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceInfoMsg.SLIfInfo)
}

// .service_layer.SLInterfaceState IfState = 2;
inline void SLInterfaceInfoMsg::clear_ifstate() {
  ifstate_ = 0;
}
inline ::service_layer::SLInterfaceState SLInterfaceInfoMsg::ifstate() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.IfState)
  return static_cast< ::service_layer::SLInterfaceState >(ifstate_);
}
inline void SLInterfaceInfoMsg::set_ifstate(::service_layer::SLInterfaceState value) {
  
  ifstate_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceInfoMsg.IfState)
}

// uint64 SeqNum = 3;
inline void SLInterfaceInfoMsg::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SLInterfaceInfoMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.SeqNum)
  return seqnum_;
}
inline void SLInterfaceInfoMsg::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceInfoMsg.SeqNum)
}

// -------------------------------------------------------------------

// SLInterfaceGetMsgRsp

// bool Eof = 1;
inline void SLInterfaceGetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLInterfaceGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.Eof)
  return eof_;
}
inline void SLInterfaceGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLInterfaceGetMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGetMsgRsp::errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceGetMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  return errstatus_;
}
inline void SLInterfaceGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      errstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
inline int SLInterfaceGetMsgRsp::entries_size() const {
  return entries_.size();
}
inline void SLInterfaceGetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline const ::service_layer::SLInterfaceInfoMsg& SLInterfaceGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Get(index);
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >*
SLInterfaceGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceGetMsgRsp.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >&
SLInterfaceGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLInterfaceGetNotifMsg

// -------------------------------------------------------------------

// SLInterfaceNotif

// .service_layer.SLInterfaceNotifType EventType = 1;
inline void SLInterfaceNotif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLInterfaceNotifType SLInterfaceNotif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.EventType)
  return static_cast< ::service_layer::SLInterfaceNotifType >(eventtype_);
}
inline void SLInterfaceNotif::set_eventtype(::service_layer::SLInterfaceNotifType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceNotif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLInterfaceNotif::has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline void SLInterfaceNotif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotif::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceNotif.ErrStatus)
  if (has_errstatus()) {
    clear_has_Event();
      ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::service_layer::SLErrorStatus& SLInterfaceNotif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.ErrStatus)
  return has_errstatus()
      ? *Event_.errstatus_
      : *reinterpret_cast< ::service_layer::SLErrorStatus*>(&::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotif::mutable_errstatus() {
  if (!has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotif.ErrStatus)
  return Event_.errstatus_;
}

// .service_layer.SLInterfaceInfoMsg Info = 3;
inline bool SLInterfaceNotif::has_info() const {
  return Event_case() == kInfo;
}
inline void SLInterfaceNotif::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void SLInterfaceNotif::clear_info() {
  if (has_info()) {
    delete Event_.info_;
    clear_has_Event();
  }
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceNotif::release_info() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceNotif.Info)
  if (has_info()) {
    clear_has_Event();
      ::service_layer::SLInterfaceInfoMsg* temp = Event_.info_;
    Event_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::service_layer::SLInterfaceInfoMsg& SLInterfaceNotif::info() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.Info)
  return has_info()
      ? *Event_.info_
      : *reinterpret_cast< ::service_layer::SLInterfaceInfoMsg*>(&::service_layer::_SLInterfaceInfoMsg_default_instance_);
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceNotif::mutable_info() {
  if (!has_info()) {
    clear_Event();
    set_has_info();
    Event_.info_ = new ::service_layer::SLInterfaceInfoMsg;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotif.Info)
  return Event_.info_;
}

inline bool SLInterfaceNotif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLInterfaceNotif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLInterfaceNotif::EventCase SLInterfaceNotif::Event_case() const {
  return SLInterfaceNotif::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLInterfaceNotifMsg

// .service_layer.SLNotifOp Oper = 1;
inline void SLInterfaceNotifMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLNotifOp SLInterfaceNotifMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsg.Oper)
  return static_cast< ::service_layer::SLNotifOp >(oper_);
}
inline void SLInterfaceNotifMsg::set_oper(::service_layer::SLNotifOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceNotifMsg.Oper)
}

// repeated .service_layer.SLInterface Entries = 2;
inline int SLInterfaceNotifMsg::entries_size() const {
  return entries_.size();
}
inline const ::service_layer::SLInterface& SLInterfaceNotifMsg::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Get(index);
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsg::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Mutable(index);
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsg::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >*
SLInterfaceNotifMsg::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceNotifMsg.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >&
SLInterfaceNotifMsg::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLInterfaceNotifMsgRes

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceNotifMsgRes::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceNotifMsgRes::errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRes::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  return errstatus_;
}
inline void SLInterfaceNotifMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      errstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
}

// .service_layer.SLInterface Key = 2;
inline bool SLInterfaceNotifMsgRes::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline const ::service_layer::SLInterface& SLInterfaceNotifMsgRes::key() const {
  const ::service_layer::SLInterface* p = key_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRes.Key)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLInterface*>(
      &::service_layer::_SLInterface_default_instance_);
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsgRes::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceNotifMsgRes.Key)
  
  ::service_layer::SLInterface* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsgRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRes.Key)
  return key_;
}
inline void SLInterfaceNotifMsgRes::set_allocated_key(::service_layer::SLInterface* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(key_);
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRes.Key)
}

// -------------------------------------------------------------------

// SLInterfaceNotifMsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLInterfaceNotifMsgRsp::has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceNotifMsgRsp::statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  return p != NULL ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRsp::release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  return statussummary_;
}
inline void SLInterfaceNotifMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      statussummary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
}

// repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
inline int SLInterfaceNotifMsgRsp::results_size() const {
  return results_.size();
}
inline void SLInterfaceNotifMsgRsp::clear_results() {
  results_.Clear();
}
inline const ::service_layer::SLInterfaceNotifMsgRes& SLInterfaceNotifMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Get(index);
}
inline ::service_layer::SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Mutable(index);
}
inline ::service_layer::SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >*
SLInterfaceNotifMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceNotifMsgRsp.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >&
SLInterfaceNotifMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::service_layer::SLInterfaceState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLInterfaceState>() {
  return ::service_layer::SLInterfaceState_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLInterfaceNotifType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLInterfaceNotifType>() {
  return ::service_layer::SLInterfaceNotifType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sl_5finterface_2eproto__INCLUDED
