// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_af.proto
// Original file comments:
// @file
// @brief Client RPC proto file for operations on objects in a address family.
// This file defines SL-API service and messages for operations
// on IP routes, MPLS objects and Path Groups objects.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2023, 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
// @defgroup AF
// @brief Service definitions for programming and notifications of AF objects.
//
#ifndef GRPC_sl_5faf_2eproto__INCLUDED
#define GRPC_sl_5faf_2eproto__INCLUDED

#include "sl_af.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLAF
// @ingroup AF
// Combined RPCs and messages for programming and notifications of AF objects.
//
// This API supports programming the device by multiple clients.
//
// If there are multiple clients intending to program the network
// element using this API, the clients initiating a programming or get
// RPC MUST pass a gRPC-context metadata identifying themselves.
// The client application MUST set the gRPC metadata key
// named "iosxr-slapi-clientid" with a numeric string holding a
// number between 0 and 65535.
//
// Each client application MUST use a unique client ID identifying itself
// that is separate from other clients programming the server. If there
// are multiple instances of the client application, then each such
// instance MUST be uniquely idenified.
//
// If "iosxr-slapi-clientid" gRPC metadata is missing, server assumes
// a default client id of 0 for that RPC invocation and associates
// objects programmed by that RPC with the default client id of 0.
//
// The co-ordination of the ClientId amongst these instances is outside
// the scope of this specification.
//
// Clients MUST not change their identity for their lifetime - such as
// RPC disconnects, process restarts or software update.
//
// SL-API stores the objects programmed by clients and preserves them across
// RPC disconnects, client restarts and server gRPC process restarts. As such
// if a client application or instance is no longer needed, the client
// MUST remove all its programming from the server before it is disabled
// or removed.
//
// Objects programmed by this RPC are stored in DBs that are key'ed
// on Client ID, VRF name and object type. Clients must ensure
// that only one programming RPC is operating on the DB. System
// behavior is undefined if simultaneous programming RPC sessions
// end up modifying the same DB.
//
// The route redistribution and notifications are scoped to the RPC
// and as such do not require a client ID.
// @{
//
class SLAF final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLAF";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // RPCs for object programming and access. Supported objects are
    // IP Routes, MPLS Labels, and Path Group objects.
    //
    // A Path Group object created by one client can be referenced by
    // any other object (e.g. IP Route and MPLS label object) created by
    // ANY other client.
    //
    // Only the client that created the object (IP/MPLS and Path Group included) 
    // can manipulate that object.
    //
    //
    // VRF registration operations. By default, The client must register with
    // the corresponding VRF table before programming objects in that table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF table registration: Sends a list of VRF table registration
    //     messages and expects a list of registration responses.
    //     A client Must Register a VRF table BEFORE objects can be
    //     added/modified in the associated VRF table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF table Un-registration: Sends a list of VRF table un-registration
    //     messages and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in these VRF tables. All previously installed objects would be
    //     remove.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF table End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their objects.
    //
    // The VRF table registration operations can be used by the client to
    // synchronize objects with the device. When the client re-registers the
    // VRF table with the server using SL_REGOP_REGISTER, server marks
    // objects in that table as stale.
    // Client then MUST reprogram objects it is interested in.
    // When client sends SL_REGOP_EOF, any objects not reprogrammed
    // are removed from the device.
    //
    // The client MUST perform all operations (VRF registration, objects)
    // from a single execution context.
    //
    // The VRF registration requirement and recovery using mark and
    // sweep can be disabled by configuring
    // "grpc service-layer auto-register" on the device. In presence
    // of this configuration, on client restart or RPC disconnects,
    // the client has the responsibility to reconcile its new state
    // with the state on the device by replaying the difference.
    //
    virtual ::grpc::Status SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::service_layer::SLAFVrfRegMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>> AsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>>(AsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>> PrepareAsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>>(PrepareAsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    // VRF get. Used to retrieve VRF attributes from the server.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>> SLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>>(SLAFVrfRegGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>> AsyncSLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>>(AsyncSLAFVrfRegGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>> PrepareAsyncSLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>>(PrepareAsyncSLAFVrfRegGetRaw(context, request, cq));
    }
    //
    // Route, MPLS label and Path operations.
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the object already exists and is not stale.
    //     First ADD operation on a stale object is treated as implicit update
    //     and the object is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Create or update the object. The RPC implements
    //     replacement semantics, wherein if the object exists, all its
    //     attributes are replaced with values from the new message.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Other attributes if present are ignored.
    //     Delete of a non-existant object is returned as success.
    virtual ::grpc::Status SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::service_layer::SLAFMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>> AsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpRaw(context, request, cq));
    }
    //
    // Stream object operations
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the object.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> SLAFOpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(SLAFOpStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> AsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpStreamRaw(context, cq));
    }
    // Retrieves object attributes.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLAFGetMsgRsp>> SLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLAFGetMsgRsp>>(SLAFGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFGetMsgRsp>> AsyncSLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFGetMsgRsp>>(AsyncSLAFGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFGetMsgRsp>> PrepareAsyncSLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFGetMsgRsp>>(PrepareAsyncSLAFGetRaw(context, request, cq));
    }
    // The route redistribution and next hop tracking RPC.
    //
    //
    // The notification request registrations and corresponding
    // notifications are scoped to the RPC. On a RPC disconnection,
    // the client should re-establish the RPC and re-program
    // the notification requests.
    // The caller MUST keep the RPC up as long as there is
    // interest in the notifications.
    //
    // For route redistribution, this call is used to get a stream
    // of route notifications. It can be used to get "push"
    // notifications for route adds/updates/deletes.
    //
    // For next hop change notifications, this call can be used to get
    // "push" notifications for nexthop adds/updates/deletes.
    //
    // The call takes a stream of per-VRF table notification requests.
    // Each notification request is first responded to with the result
    // of the registration operation itself, followed by any redistributed
    // routes if requested and present, and any next hops if requested and present.
    // From then on, any updates are notified as long as RPC is up.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>> SLAFNotifStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>>(SLAFNotifStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>> AsyncSLAFNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>>(AsyncSLAFNotifStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>> PrepareAsyncSLAFNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>>(PrepareAsyncSLAFNotifStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // RPCs for object programming and access. Supported objects are
      // IP Routes, MPLS Labels, and Path Group objects.
      //
      // A Path Group object created by one client can be referenced by
      // any other object (e.g. IP Route and MPLS label object) created by
      // ANY other client.
      //
      // Only the client that created the object (IP/MPLS and Path Group included) 
      // can manipulate that object.
      //
      //
      // VRF registration operations. By default, The client must register with
      // the corresponding VRF table before programming objects in that table.
      //
      // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
      //     VRF table registration: Sends a list of VRF table registration
      //     messages and expects a list of registration responses.
      //     A client Must Register a VRF table BEFORE objects can be
      //     added/modified in the associated VRF table.
      //
      // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      //     VRF table Un-registration: Sends a list of VRF table un-registration
      //     messages and expects a list of un-registration responses.
      //     This can be used to convey that the client is no longer interested
      //     in these VRF tables. All previously installed objects would be
      //     remove.
      //
      // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
      //     VRF table End Of File message.
      //     After Registration, the client is expected to send an EOF
      //     message to convey the end of replay of the client's known objects.
      //     This is especially useful under certain restart scenarios when the
      //     client and the server are trying to synchronize their objects.
      //
      // The VRF table registration operations can be used by the client to
      // synchronize objects with the device. When the client re-registers the
      // VRF table with the server using SL_REGOP_REGISTER, server marks
      // objects in that table as stale.
      // Client then MUST reprogram objects it is interested in.
      // When client sends SL_REGOP_EOF, any objects not reprogrammed
      // are removed from the device.
      //
      // The client MUST perform all operations (VRF registration, objects)
      // from a single execution context.
      //
      // The VRF registration requirement and recovery using mark and
      // sweep can be disabled by configuring
      // "grpc service-layer auto-register" on the device. In presence
      // of this configuration, on client restart or RPC disconnects,
      // the client has the responsibility to reconcile its new state
      // with the state on the device by replaying the difference.
      //
      virtual void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // VRF get. Used to retrieve VRF attributes from the server.
      virtual void SLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLAFVrfRegGetMsgRsp>* reactor) = 0;
      //
      // Route, MPLS label and Path operations.
      //
      //
      // SLAFMsg.Oper = SL_OBJOP_ADD:
      //     Object add. Fails if the object already exists and is not stale.
      //     First ADD operation on a stale object is treated as implicit update
      //     and the object is no longer considered stale.
      //
      // SLAFMsg.Oper = SL_OBJOP_UPDATE:
      //     Object update. Create or update the object. The RPC implements
      //     replacement semantics, wherein if the object exists, all its
      //     attributes are replaced with values from the new message.
      //
      // SLAFMsg.Oper = SL_OBJOP_DELETE:
      //     Object delete. The object's key is enough to delete the object.
      //     Other attributes if present are ignored.
      //     Delete of a non-existant object is returned as success.
      virtual void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Stream object operations
      //
      //
      // SLAFMsg.Oper = SL_OBJOP_ADD:
      //     Object add. Fails if the objects already exists and is not stale.
      //     First ADD operation on a stale object is allowed and the object
      //     is no longer considered stale.
      //
      // SLAFMsg.Oper = SL_OBJOP_UPDATE:
      //     Object update. Creates or updates the object.
      //
      // SLAFMsg.Oper = SL_OBJOP_DELETE:
      //     Object delete. The object's key is enough to delete the object.
      //     Delete of a non-existant object is returned as success.
      virtual void SLAFOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLAFMsg,::service_layer::SLAFMsgRsp>* reactor) = 0;
      // Retrieves object attributes.
      virtual void SLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLAFGetMsgRsp>* reactor) = 0;
      // The route redistribution and next hop tracking RPC.
      //
      //
      // The notification request registrations and corresponding
      // notifications are scoped to the RPC. On a RPC disconnection,
      // the client should re-establish the RPC and re-program
      // the notification requests.
      // The caller MUST keep the RPC up as long as there is
      // interest in the notifications.
      //
      // For route redistribution, this call is used to get a stream
      // of route notifications. It can be used to get "push"
      // notifications for route adds/updates/deletes.
      //
      // For next hop change notifications, this call can be used to get
      // "push" notifications for nexthop adds/updates/deletes.
      //
      // The call takes a stream of per-VRF table notification requests.
      // Each notification request is first responded to with the result
      // of the registration operation itself, followed by any redistributed
      // routes if requested and present, and any next hops if requested and present.
      // From then on, any updates are notified as long as RPC is up.
      virtual void SLAFNotifStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLAFNotifReq,::service_layer::SLAFNotifMsg>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>* AsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>* PrepareAsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>* SLAFVrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>* AsyncSLAFVrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFVrfRegGetMsgRsp>* PrepareAsyncSLAFVrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>* AsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* SLAFOpStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* AsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::service_layer::SLAFGetMsgRsp>* SLAFGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFGetMsgRsp>* AsyncSLAFGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLAFGetMsgRsp>* PrepareAsyncSLAFGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* SLAFNotifStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* AsyncSLAFNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* PrepareAsyncSLAFNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::service_layer::SLAFVrfRegMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>> AsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>>(AsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>> PrepareAsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>>(PrepareAsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLAFVrfRegGetMsgRsp>> SLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLAFVrfRegGetMsgRsp>>(SLAFVrfRegGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFVrfRegGetMsgRsp>> AsyncSLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFVrfRegGetMsgRsp>>(AsyncSLAFVrfRegGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFVrfRegGetMsgRsp>> PrepareAsyncSLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFVrfRegGetMsgRsp>>(PrepareAsyncSLAFVrfRegGetRaw(context, request, cq));
    }
    ::grpc::Status SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::service_layer::SLAFMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>> AsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> SLAFOpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(SLAFOpStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> AsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLAFGetMsgRsp>> SLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLAFGetMsgRsp>>(SLAFGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFGetMsgRsp>> AsyncSLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFGetMsgRsp>>(AsyncSLAFGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFGetMsgRsp>> PrepareAsyncSLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLAFGetMsgRsp>>(PrepareAsyncSLAFGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>> SLAFNotifStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>>(SLAFNotifStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>> AsyncSLAFNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>>(AsyncSLAFNotifStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>> PrepareAsyncSLAFNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>>(PrepareAsyncSLAFNotifStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLAFVrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLAFVrfRegGetMsgRsp>* reactor) override;
      void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLAFOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLAFMsg,::service_layer::SLAFMsgRsp>* reactor) override;
      void SLAFGet(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLAFGetMsgRsp>* reactor) override;
      void SLAFNotifStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLAFNotifReq,::service_layer::SLAFNotifMsg>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>* AsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>* PrepareAsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::service_layer::SLAFVrfRegGetMsgRsp>* SLAFVrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLAFVrfRegGetMsgRsp>* AsyncSLAFVrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLAFVrfRegGetMsgRsp>* PrepareAsyncSLAFVrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>* AsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* SLAFOpStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* AsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::service_layer::SLAFGetMsgRsp>* SLAFGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLAFGetMsgRsp>* AsyncSLAFGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLAFGetMsgRsp>* PrepareAsyncSLAFGetRaw(::grpc::ClientContext* context, const ::service_layer::SLAFGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* SLAFNotifStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* AsyncSLAFNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* PrepareAsyncSLAFNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFVrfRegOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFVrfRegGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFOpStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFNotifStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // RPCs for object programming and access. Supported objects are
    // IP Routes, MPLS Labels, and Path Group objects.
    //
    // A Path Group object created by one client can be referenced by
    // any other object (e.g. IP Route and MPLS label object) created by
    // ANY other client.
    //
    // Only the client that created the object (IP/MPLS and Path Group included) 
    // can manipulate that object.
    //
    //
    // VRF registration operations. By default, The client must register with
    // the corresponding VRF table before programming objects in that table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF table registration: Sends a list of VRF table registration
    //     messages and expects a list of registration responses.
    //     A client Must Register a VRF table BEFORE objects can be
    //     added/modified in the associated VRF table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF table Un-registration: Sends a list of VRF table un-registration
    //     messages and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in these VRF tables. All previously installed objects would be
    //     remove.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF table End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their objects.
    //
    // The VRF table registration operations can be used by the client to
    // synchronize objects with the device. When the client re-registers the
    // VRF table with the server using SL_REGOP_REGISTER, server marks
    // objects in that table as stale.
    // Client then MUST reprogram objects it is interested in.
    // When client sends SL_REGOP_EOF, any objects not reprogrammed
    // are removed from the device.
    //
    // The client MUST perform all operations (VRF registration, objects)
    // from a single execution context.
    //
    // The VRF registration requirement and recovery using mark and
    // sweep can be disabled by configuring
    // "grpc service-layer auto-register" on the device. In presence
    // of this configuration, on client restart or RPC disconnects,
    // the client has the responsibility to reconcile its new state
    // with the state on the device by replaying the difference.
    //
    virtual ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response);
    // VRF get. Used to retrieve VRF attributes from the server.
    virtual ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* context, const ::service_layer::SLAFVrfRegGetMsg* request, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* writer);
    //
    // Route, MPLS label and Path operations.
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the object already exists and is not stale.
    //     First ADD operation on a stale object is treated as implicit update
    //     and the object is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Create or update the object. The RPC implements
    //     replacement semantics, wherein if the object exists, all its
    //     attributes are replaced with values from the new message.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Other attributes if present are ignored.
    //     Delete of a non-existant object is returned as success.
    virtual ::grpc::Status SLAFOp(::grpc::ServerContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response);
    //
    // Stream object operations
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the object.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    virtual ::grpc::Status SLAFOpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* stream);
    // Retrieves object attributes.
    virtual ::grpc::Status SLAFGet(::grpc::ServerContext* context, const ::service_layer::SLAFGetMsg* request, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* writer);
    // The route redistribution and next hop tracking RPC.
    //
    //
    // The notification request registrations and corresponding
    // notifications are scoped to the RPC. On a RPC disconnection,
    // the client should re-establish the RPC and re-program
    // the notification requests.
    // The caller MUST keep the RPC up as long as there is
    // interest in the notifications.
    //
    // For route redistribution, this call is used to get a stream
    // of route notifications. It can be used to get "push"
    // notifications for route adds/updates/deletes.
    //
    // For next hop change notifications, this call can be used to get
    // "push" notifications for nexthop adds/updates/deletes.
    //
    // The call takes a stream of per-VRF table notification requests.
    // Each notification request is first responded to with the result
    // of the registration operation itself, followed by any redistributed
    // routes if requested and present, and any next hops if requested and present.
    // From then on, any updates are notified as long as RPC is up.
    virtual ::grpc::Status SLAFNotifStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFVrfRegOp(::grpc::ServerContext* context, ::service_layer::SLAFVrfRegMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLAFVrfRegMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFVrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFVrfRegGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLAFVrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFVrfRegGet(::grpc::ServerContext* context, ::service_layer::SLAFVrfRegGetMsg* request, ::grpc::ServerAsyncWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFOp() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOp(::grpc::ServerContext* context, ::service_layer::SLAFMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLAFMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFGet() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SLAFGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFGet(::grpc::ServerContext* context, ::service_layer::SLAFGetMsg* request, ::grpc::ServerAsyncWriter< ::service_layer::SLAFGetMsgRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFNotifStream() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SLAFNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFNotifStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFNotifStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLAFVrfRegOp<WithAsyncMethod_SLAFVrfRegGet<WithAsyncMethod_SLAFOp<WithAsyncMethod_SLAFOpStream<WithAsyncMethod_SLAFGet<WithAsyncMethod_SLAFNotifStream<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response) { return this->SLAFVrfRegOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLAFVrfRegOp(
        ::grpc::MessageAllocator< ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFVrfRegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFVrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFVrfRegGet() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service_layer::SLAFVrfRegGetMsg, ::service_layer::SLAFVrfRegGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLAFVrfRegGetMsg* request) { return this->SLAFVrfRegGet(context, request); }));
    }
    ~WithCallbackMethod_SLAFVrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service_layer::SLAFVrfRegGetMsgRsp>* SLAFVrfRegGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFOp() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response) { return this->SLAFOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLAFOp(
        ::grpc::MessageAllocator< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLAFOpStream(context); }));
    }
    ~WithCallbackMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* SLAFOpStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFGet() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service_layer::SLAFGetMsg, ::service_layer::SLAFGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLAFGetMsg* request) { return this->SLAFGet(context, request); }));
    }
    ~WithCallbackMethod_SLAFGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service_layer::SLAFGetMsgRsp>* SLAFGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFNotifStream() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLAFNotifStream(context); }));
    }
    ~WithCallbackMethod_SLAFNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFNotifStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLAFNotifReq, ::service_layer::SLAFNotifMsg>* SLAFNotifStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SLAFVrfRegOp<WithCallbackMethod_SLAFVrfRegGet<WithCallbackMethod_SLAFOp<WithCallbackMethod_SLAFOpStream<WithCallbackMethod_SLAFGet<WithCallbackMethod_SLAFNotifStream<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFVrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFVrfRegGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLAFVrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFOp() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFGet() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SLAFGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFNotifStream() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SLAFNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFNotifStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFVrfRegOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFVrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFVrfRegGet() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SLAFVrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFVrfRegGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFOp() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFGet() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SLAFGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFNotifStream() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SLAFNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFNotifStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFNotifStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLAFVrfRegOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFVrfRegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFVrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFVrfRegGet() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SLAFVrfRegGet(context, request); }));
    }
    ~WithRawCallbackMethod_SLAFVrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SLAFVrfRegGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFOp() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLAFOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLAFOpStream(context); }));
    }
    ~WithRawCallbackMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLAFOpStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFGet() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SLAFGet(context, request); }));
    }
    ~WithRawCallbackMethod_SLAFGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SLAFGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFNotifStream() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLAFNotifStream(context); }));
    }
    ~WithRawCallbackMethod_SLAFNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFNotifStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFNotifMsg, ::service_layer::SLAFNotifReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLAFNotifStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>* streamer) {
                       return this->StreamedSLAFVrfRegOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLAFVrfRegOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLAFVrfRegMsg,::service_layer::SLAFVrfRegMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLAFOp() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* streamer) {
                       return this->StreamedSLAFOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLAFOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLAFMsg,::service_layer::SLAFMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLAFVrfRegOp<WithStreamedUnaryMethod_SLAFOp<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SLAFVrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SLAFVrfRegGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service_layer::SLAFVrfRegGetMsg, ::service_layer::SLAFVrfRegGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service_layer::SLAFVrfRegGetMsg, ::service_layer::SLAFVrfRegGetMsgRsp>* streamer) {
                       return this->StreamedSLAFVrfRegGet(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SLAFVrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLAFVrfRegGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFVrfRegGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSLAFVrfRegGet(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service_layer::SLAFVrfRegGetMsg,::service_layer::SLAFVrfRegGetMsgRsp>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SLAFGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SLAFGet() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service_layer::SLAFGetMsg, ::service_layer::SLAFGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service_layer::SLAFGetMsg, ::service_layer::SLAFGetMsgRsp>* streamer) {
                       return this->StreamedSLAFGet(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SLAFGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLAFGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLAFGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSLAFGet(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service_layer::SLAFGetMsg,::service_layer::SLAFGetMsgRsp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SLAFVrfRegGet<WithSplitStreamingMethod_SLAFGet<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLAFVrfRegOp<WithSplitStreamingMethod_SLAFVrfRegGet<WithStreamedUnaryMethod_SLAFOp<WithSplitStreamingMethod_SLAFGet<Service > > > > StreamedService;
};
// @addtogroup SLAF
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5faf_2eproto__INCLUDED
