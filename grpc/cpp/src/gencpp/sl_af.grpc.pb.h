// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_af.proto
// Original file comments:
// @file
// @brief Client RPC proto file for operations on objects in a address family.
// This file defines SL-API service and messages for operations
// on IP routes, MPLS objects, Path Groups and Policy Forwarding Entries.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
// @defgroup AF
// @brief Address family service definitions.
//
#ifndef GRPC_sl_5faf_2eproto__INCLUDED
#define GRPC_sl_5faf_2eproto__INCLUDED

#include "sl_af.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLAF
// @ingroup Common
// SL-API messages for a address family.
// Defines SL-API operations service.
// @{
// ;
//
// This API supports programming the device by multiple clients.
//
// If there are multiple clients intending to program the network
// element using this API, the clients initiating a programming or get
// RPC MUST pass a gRPC-context metadata identifying itself.
// The client application MUST set the gRPC metadata key
// named "iosxr-slapi-clientid" with a numeric string holding a
// number between 0 and 65535.
//
// Each client application MUST use a unique client ID identifying itself
// that is seperate from other clients programming the server. If there
// are multiple instances of the client application, then each such
// instance MUST be uniquely idenified.
//
// If "iosxr-slapi-clientid" gRPC metadata is missing, server assumes
// a default client id of 0 for that RPC invocation and associates
// objects programmed by that RPC with the default client id of 0.
//
// The co-ordination of the ClientId amongst these instances is outside
// the scope of this specification.
//
// Clients MUST not change their identity for their lifetime - such as
// RPC disconnects, process restarts or software update.
//
// SL-API stores the objects programmed by clients and preserves them across
// RPC disconnects, client restarts and server gRPC process restarts. As such
// if a client application or instance is no longer needed, the client
// MUST remove all its programming from the server before it is disabled
// or removed.
//
// The route redistribution and notifications are scoped to the RPC
// and as such do not require a client ID.
//
class SLAF final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLAF";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // RPCs for object programming and access. Supported objects are
    // IP Routes, MPLS Labels, and Path Group objects and Policy
    // Forwarding Entries.
    //
    // A Path Group object created by one client can be referenced by
    // any other object (e.g. IP Route and MPLS label object) created by
    // ANY other client.
    //
    // Only the client that created the object (IP/MPLS, Policy Forwarding
    // Entry and Path Group included) can manipulate that object.
    //
    //
    // VRF registration operations. The client MUST register with
    // the corresponding VRF table before programming objects in that table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF table registration: Sends a list of VRF table registration
    //     messages and expects a list of registration responses.
    //     A client Must Register a VRF table BEFORE objects can be
    //     added/modified in the associated VRF table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF table Un-registration: Sends a list of VRF table un-registration
    //     messages and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in these VRF tables. All previously installed objects would be
    //     remove.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF table End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their objects.
    //
    // The VRF table registration operations can be used by the client to
    // synchronize objects with the device. When the client re-registers the
    // VRF table with the server using SL_REGOP_REGISTER, server marks
    // objects in that table as stale.
    // Client then MUST reprogram objects it is interested in.
    // When client sends SL_REGOP_EOF, any objects not reprogrammed
    // are removed from the device. This feature can be turned
    // off by setting SLVrfReg.NoMarking flag to True.
    //
    // The client MUST perform all operations (VRF registration, objects)
    // from a single execution context.
    virtual ::grpc::Status SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::service_layer::SLAFVrfRegMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>> AsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>>(AsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>> PrepareAsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>>(PrepareAsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    //
    // Route, MPLS label and Path operations.
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the objects.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    virtual ::grpc::Status SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::service_layer::SLAFMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>> AsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpRaw(context, request, cq));
    }
    //
    // Stream object operations
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the object.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> SLAFOpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(SLAFOpStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> AsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // RPCs for object programming and access. Supported objects are
      // IP Routes, MPLS Labels, and Path Group objects and Policy
      // Forwarding Entries.
      //
      // A Path Group object created by one client can be referenced by
      // any other object (e.g. IP Route and MPLS label object) created by
      // ANY other client.
      //
      // Only the client that created the object (IP/MPLS, Policy Forwarding
      // Entry and Path Group included) can manipulate that object.
      //
      //
      // VRF registration operations. The client MUST register with
      // the corresponding VRF table before programming objects in that table.
      //
      // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
      //     VRF table registration: Sends a list of VRF table registration
      //     messages and expects a list of registration responses.
      //     A client Must Register a VRF table BEFORE objects can be
      //     added/modified in the associated VRF table.
      //
      // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      //     VRF table Un-registration: Sends a list of VRF table un-registration
      //     messages and expects a list of un-registration responses.
      //     This can be used to convey that the client is no longer interested
      //     in these VRF tables. All previously installed objects would be
      //     remove.
      //
      // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
      //     VRF table End Of File message.
      //     After Registration, the client is expected to send an EOF
      //     message to convey the end of replay of the client's known objects.
      //     This is especially useful under certain restart scenarios when the
      //     client and the server are trying to synchronize their objects.
      //
      // The VRF table registration operations can be used by the client to
      // synchronize objects with the device. When the client re-registers the
      // VRF table with the server using SL_REGOP_REGISTER, server marks
      // objects in that table as stale.
      // Client then MUST reprogram objects it is interested in.
      // When client sends SL_REGOP_EOF, any objects not reprogrammed
      // are removed from the device. This feature can be turned
      // off by setting SLVrfReg.NoMarking flag to True.
      //
      // The client MUST perform all operations (VRF registration, objects)
      // from a single execution context.
      virtual void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Route, MPLS label and Path operations.
      //
      //
      // SLAFMsg.Oper = SL_OBJOP_ADD:
      //     Object add. Fails if the objects already exists and is not stale.
      //     First ADD operation on a stale object is allowed and the object
      //     is no longer considered stale.
      //
      // SLAFMsg.Oper = SL_OBJOP_UPDATE:
      //     Object update. Creates or updates the objects.
      //
      // SLAFMsg.Oper = SL_OBJOP_DELETE:
      //     Object delete. The object's key is enough to delete the object.
      //     Delete of a non-existant object is returned as success.
      virtual void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Stream object operations
      //
      //
      // SLAFMsg.Oper = SL_OBJOP_ADD:
      //     Object add. Fails if the objects already exists and is not stale.
      //     First ADD operation on a stale object is allowed and the object
      //     is no longer considered stale.
      //
      // SLAFMsg.Oper = SL_OBJOP_UPDATE:
      //     Object update. Creates or updates the object.
      //
      // SLAFMsg.Oper = SL_OBJOP_DELETE:
      //     Object delete. The object's key is enough to delete the object.
      //     Delete of a non-existant object is returned as success.
      virtual void SLAFOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLAFMsg,::service_layer::SLAFMsgRsp>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>* AsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFVrfRegMsgRsp>* PrepareAsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>* AsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* SLAFOpStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* AsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::service_layer::SLAFVrfRegMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>> AsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>>(AsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>> PrepareAsyncSLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>>(PrepareAsyncSLAFVrfRegOpRaw(context, request, cq));
    }
    ::grpc::Status SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::service_layer::SLAFMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>> AsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> SLAFOpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(SLAFOpStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> AsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(AsyncSLAFOpStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>> PrepareAsyncSLAFOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>>(PrepareAsyncSLAFOpStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLAFVrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLAFOp(::grpc::ClientContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLAFOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLAFMsg,::service_layer::SLAFMsgRsp>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>* AsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFVrfRegMsgRsp>* PrepareAsyncSLAFVrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFVrfRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>* AsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpRaw(::grpc::ClientContext* context, const ::service_layer::SLAFMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* SLAFOpStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* AsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* PrepareAsyncSLAFOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFVrfRegOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLAFOpStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // RPCs for object programming and access. Supported objects are
    // IP Routes, MPLS Labels, and Path Group objects and Policy
    // Forwarding Entries.
    //
    // A Path Group object created by one client can be referenced by
    // any other object (e.g. IP Route and MPLS label object) created by
    // ANY other client.
    //
    // Only the client that created the object (IP/MPLS, Policy Forwarding
    // Entry and Path Group included) can manipulate that object.
    //
    //
    // VRF registration operations. The client MUST register with
    // the corresponding VRF table before programming objects in that table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF table registration: Sends a list of VRF table registration
    //     messages and expects a list of registration responses.
    //     A client Must Register a VRF table BEFORE objects can be
    //     added/modified in the associated VRF table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF table Un-registration: Sends a list of VRF table un-registration
    //     messages and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in these VRF tables. All previously installed objects would be
    //     remove.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF table End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their objects.
    //
    // The VRF table registration operations can be used by the client to
    // synchronize objects with the device. When the client re-registers the
    // VRF table with the server using SL_REGOP_REGISTER, server marks
    // objects in that table as stale.
    // Client then MUST reprogram objects it is interested in.
    // When client sends SL_REGOP_EOF, any objects not reprogrammed
    // are removed from the device. This feature can be turned
    // off by setting SLVrfReg.NoMarking flag to True.
    //
    // The client MUST perform all operations (VRF registration, objects)
    // from a single execution context.
    virtual ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response);
    //
    // Route, MPLS label and Path operations.
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the objects.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    virtual ::grpc::Status SLAFOp(::grpc::ServerContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response);
    //
    // Stream object operations
    //
    //
    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the object.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    virtual ::grpc::Status SLAFOpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFVrfRegOp(::grpc::ServerContext* context, ::service_layer::SLAFVrfRegMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLAFVrfRegMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFOp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOp(::grpc::ServerContext* context, ::service_layer::SLAFMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLAFMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLAFVrfRegOp<WithAsyncMethod_SLAFOp<WithAsyncMethod_SLAFOpStream<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLAFVrfRegMsg* request, ::service_layer::SLAFVrfRegMsgRsp* response) { return this->SLAFVrfRegOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLAFVrfRegOp(
        ::grpc::MessageAllocator< ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFVrfRegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFOp() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLAFMsg* request, ::service_layer::SLAFMsgRsp* response) { return this->SLAFOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLAFOp(
        ::grpc::MessageAllocator< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLAFOpStream(context); }));
    }
    ~WithCallbackMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* SLAFOpStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SLAFVrfRegOp<WithCallbackMethod_SLAFOp<WithCallbackMethod_SLAFOpStream<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFOp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFVrfRegOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFOp() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLAFOpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLAFVrfRegOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFVrfRegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFOp() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLAFOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLAFOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLAFOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLAFOpStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLAFOpStream(context); }));
    }
    ~WithRawCallbackMethod_SLAFOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLAFOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLAFMsgRsp, ::service_layer::SLAFMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLAFOpStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLAFVrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLAFVrfRegOp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLAFVrfRegMsg, ::service_layer::SLAFVrfRegMsgRsp>* streamer) {
                       return this->StreamedSLAFVrfRegOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLAFVrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLAFVrfRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFVrfRegMsg* /*request*/, ::service_layer::SLAFVrfRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLAFVrfRegOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLAFVrfRegMsg,::service_layer::SLAFVrfRegMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLAFOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLAFOp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLAFMsg, ::service_layer::SLAFMsgRsp>* streamer) {
                       return this->StreamedSLAFOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLAFOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLAFOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLAFMsg* /*request*/, ::service_layer::SLAFMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLAFOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLAFMsg,::service_layer::SLAFMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLAFVrfRegOp<WithStreamedUnaryMethod_SLAFOp<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLAFVrfRegOp<WithStreamedUnaryMethod_SLAFOp<Service > > StreamedService;
};
// @addtogroup SLAF
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5faf_2eproto__INCLUDED
