// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_af.proto

#include "sl_af.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLAFVrfReg::SLAFVrfReg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfreg_(nullptr)
  , table_(0)
{}
struct SLAFVrfRegDefaultTypeInternal {
  constexpr SLAFVrfRegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegDefaultTypeInternal() {}
  union {
    SLAFVrfReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegDefaultTypeInternal _SLAFVrfReg_default_instance_;
constexpr SLAFVrfRegMsg::SLAFVrfRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfregmsgs_()
  , oper_(0)
{}
struct SLAFVrfRegMsgDefaultTypeInternal {
  constexpr SLAFVrfRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegMsgDefaultTypeInternal() {}
  union {
    SLAFVrfRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegMsgDefaultTypeInternal _SLAFVrfRegMsg_default_instance_;
constexpr SLAFVrfRegMsgRes::SLAFVrfRegMsgRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr)
  , table_(0)
{}
struct SLAFVrfRegMsgResDefaultTypeInternal {
  constexpr SLAFVrfRegMsgResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegMsgResDefaultTypeInternal() {}
  union {
    SLAFVrfRegMsgRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegMsgResDefaultTypeInternal _SLAFVrfRegMsgRes_default_instance_;
constexpr SLAFVrfRegMsgRsp::SLAFVrfRegMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr){}
struct SLAFVrfRegMsgRspDefaultTypeInternal {
  constexpr SLAFVrfRegMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegMsgRspDefaultTypeInternal() {}
  union {
    SLAFVrfRegMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegMsgRspDefaultTypeInternal _SLAFVrfRegMsgRsp_default_instance_;
constexpr SLAFVrfRegGetMsg::SLAFVrfRegGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : getall_(false){}
struct SLAFVrfRegGetMsgDefaultTypeInternal {
  constexpr SLAFVrfRegGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegGetMsgDefaultTypeInternal() {}
  union {
    SLAFVrfRegGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegGetMsgDefaultTypeInternal _SLAFVrfRegGetMsg_default_instance_;
constexpr SLAFVrfRegGetMsgRsp::SLAFVrfRegGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , errstatus_(nullptr)
  , clientid_(uint64_t{0u})
  , table_(0)
{}
struct SLAFVrfRegGetMsgRspDefaultTypeInternal {
  constexpr SLAFVrfRegGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegGetMsgRspDefaultTypeInternal() {}
  union {
    SLAFVrfRegGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegGetMsgRspDefaultTypeInternal _SLAFVrfRegGetMsgRsp_default_instance_;
constexpr SLPathGroup_SLPath::SLPathGroup_SLPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr){}
struct SLPathGroup_SLPathDefaultTypeInternal {
  constexpr SLPathGroup_SLPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPathGroup_SLPathDefaultTypeInternal() {}
  union {
    SLPathGroup_SLPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPathGroup_SLPathDefaultTypeInternal _SLPathGroup_SLPath_default_instance_;
constexpr SLPathGroup_SLPathList::SLPathGroup_SLPathList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paths_(){}
struct SLPathGroup_SLPathListDefaultTypeInternal {
  constexpr SLPathGroup_SLPathListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPathGroup_SLPathListDefaultTypeInternal() {}
  union {
    SLPathGroup_SLPathList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPathGroup_SLPathListDefaultTypeInternal _SLPathGroup_SLPathList_default_instance_;
constexpr SLPathGroup::SLPathGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pgflags_()
  , _pgflags_cached_byte_size_(0)
  , pathgroupid_(nullptr)
  , admindistance_(0u)
  , _oneof_case_{}{}
struct SLPathGroupDefaultTypeInternal {
  constexpr SLPathGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPathGroupDefaultTypeInternal() {}
  union {
    SLPathGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPathGroupDefaultTypeInternal _SLPathGroup_default_instance_;
constexpr SLMplsEntryKey::SLMplsEntryKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(0u){}
struct SLMplsEntryKeyDefaultTypeInternal {
  constexpr SLMplsEntryKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLMplsEntryKeyDefaultTypeInternal() {}
  union {
    SLMplsEntryKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLMplsEntryKeyDefaultTypeInternal _SLMplsEntryKey_default_instance_;
constexpr SLMplsEntry::SLMplsEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathlist_()
  , mplsflags_()
  , _mplsflags_cached_byte_size_(0)
  , mplskey_(nullptr)
  , admindistance_(0u){}
struct SLMplsEntryDefaultTypeInternal {
  constexpr SLMplsEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLMplsEntryDefaultTypeInternal() {}
  union {
    SLMplsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLMplsEntryDefaultTypeInternal _SLMplsEntry_default_instance_;
constexpr SLAFIPRoute::SLAFIPRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathlist_()
  , iprouteprefix_(nullptr)
  , routecommon_(nullptr){}
struct SLAFIPRouteDefaultTypeInternal {
  constexpr SLAFIPRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFIPRouteDefaultTypeInternal() {}
  union {
    SLAFIPRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFIPRouteDefaultTypeInternal _SLAFIPRoute_default_instance_;
constexpr SLAFObject::SLAFObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLAFObjectDefaultTypeInternal {
  constexpr SLAFObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFObjectDefaultTypeInternal() {}
  union {
    SLAFObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFObjectDefaultTypeInternal _SLAFObject_default_instance_;
constexpr SLAFOpMsg::SLAFOpMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ackpermits_()
  , _ackpermits_cached_byte_size_(0)
  , afobject_(nullptr)
  , operationid_(uint64_t{0u})
  , acktype_(0)

  , ackcadence_(0)
{}
struct SLAFOpMsgDefaultTypeInternal {
  constexpr SLAFOpMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFOpMsgDefaultTypeInternal() {}
  union {
    SLAFOpMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFOpMsgDefaultTypeInternal _SLAFOpMsg_default_instance_;
constexpr SLAFClientIDList::SLAFClientIDList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientidlist_()
  , _clientidlist_cached_byte_size_(0){}
struct SLAFClientIDListDefaultTypeInternal {
  constexpr SLAFClientIDListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFClientIDListDefaultTypeInternal() {}
  union {
    SLAFClientIDList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFClientIDListDefaultTypeInternal _SLAFClientIDList_default_instance_;
constexpr SLTableTypeList::SLTableTypeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_()
  , _table_cached_byte_size_(0){}
struct SLTableTypeListDefaultTypeInternal {
  constexpr SLTableTypeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLTableTypeListDefaultTypeInternal() {}
  union {
    SLTableTypeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLTableTypeListDefaultTypeInternal _SLTableTypeList_default_instance_;
constexpr SLAFObjectKey::SLAFObjectKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLAFObjectKeyDefaultTypeInternal {
  constexpr SLAFObjectKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFObjectKeyDefaultTypeInternal() {}
  union {
    SLAFObjectKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFObjectKeyDefaultTypeInternal _SLAFObjectKey_default_instance_;
constexpr SLAFGetMatch::SLAFGetMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLAFGetMatchDefaultTypeInternal {
  constexpr SLAFGetMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFGetMatchDefaultTypeInternal() {}
  union {
    SLAFGetMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFGetMatchDefaultTypeInternal _SLAFGetMatch_default_instance_;
constexpr SLAFGetMatchList::SLAFGetMatchList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_(){}
struct SLAFGetMatchListDefaultTypeInternal {
  constexpr SLAFGetMatchListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFGetMatchListDefaultTypeInternal() {}
  union {
    SLAFGetMatchList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFGetMatchListDefaultTypeInternal _SLAFGetMatchList_default_instance_;
constexpr SLAFGetMsg::SLAFGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct SLAFGetMsgDefaultTypeInternal {
  constexpr SLAFGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFGetMsgDefaultTypeInternal() {}
  union {
    SLAFGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFGetMsgDefaultTypeInternal _SLAFGetMsg_default_instance_;
constexpr SLAFGetMsgRspEntry::SLAFGetMsgRspEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : afopmsg_(nullptr)
  , fibstatus_(0)
{}
struct SLAFGetMsgRspEntryDefaultTypeInternal {
  constexpr SLAFGetMsgRspEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFGetMsgRspEntryDefaultTypeInternal() {}
  union {
    SLAFGetMsgRspEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFGetMsgRspEntryDefaultTypeInternal _SLAFGetMsgRspEntry_default_instance_;
constexpr SLAFGetMsgRsp::SLAFGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aflist_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr)
  , clientid_(uint64_t{0u}){}
struct SLAFGetMsgRspDefaultTypeInternal {
  constexpr SLAFGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFGetMsgRspDefaultTypeInternal() {}
  union {
    SLAFGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFGetMsgRspDefaultTypeInternal _SLAFGetMsgRsp_default_instance_;
constexpr SLAFMsg::SLAFMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oplist_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oper_(0)
{}
struct SLAFMsgDefaultTypeInternal {
  constexpr SLAFMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFMsgDefaultTypeInternal() {}
  union {
    SLAFMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFMsgDefaultTypeInternal _SLAFMsg_default_instance_;
constexpr SLAFRes::SLAFRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errorstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , key_(nullptr)
  , operationid_(uint64_t{0u})
  , fibstatus_(0)
{}
struct SLAFResDefaultTypeInternal {
  constexpr SLAFResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFResDefaultTypeInternal() {}
  union {
    SLAFRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFResDefaultTypeInternal _SLAFRes_default_instance_;
constexpr SLAFMsgRsp::SLAFMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLAFMsgRspDefaultTypeInternal {
  constexpr SLAFMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFMsgRspDefaultTypeInternal() {}
  union {
    SLAFMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFMsgRspDefaultTypeInternal _SLAFMsgRsp_default_instance_;
constexpr SLAFRedistRegMsg::SLAFRedistRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srcproto_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srcprototag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_(0)
{}
struct SLAFRedistRegMsgDefaultTypeInternal {
  constexpr SLAFRedistRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFRedistRegMsgDefaultTypeInternal() {}
  union {
    SLAFRedistRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFRedistRegMsgDefaultTypeInternal _SLAFRedistRegMsg_default_instance_;
constexpr SLAFNextHopRegKey_SLNextHopKey::SLAFNextHopRegKey_SLNextHopKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nexthopip_(nullptr)
  , exactmatch_(false)
  , allowdefault_(false)
  , recurse_(false){}
struct SLAFNextHopRegKey_SLNextHopKeyDefaultTypeInternal {
  constexpr SLAFNextHopRegKey_SLNextHopKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNextHopRegKey_SLNextHopKeyDefaultTypeInternal() {}
  union {
    SLAFNextHopRegKey_SLNextHopKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNextHopRegKey_SLNextHopKeyDefaultTypeInternal _SLAFNextHopRegKey_SLNextHopKey_default_instance_;
constexpr SLAFNextHopRegKey::SLAFNextHopRegKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLAFNextHopRegKeyDefaultTypeInternal {
  constexpr SLAFNextHopRegKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNextHopRegKeyDefaultTypeInternal() {}
  union {
    SLAFNextHopRegKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNextHopRegKeyDefaultTypeInternal _SLAFNextHopRegKey_default_instance_;
constexpr SLAFNextHopRegMsg::SLAFNextHopRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nexthopkey_(nullptr){}
struct SLAFNextHopRegMsgDefaultTypeInternal {
  constexpr SLAFNextHopRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNextHopRegMsgDefaultTypeInternal() {}
  union {
    SLAFNextHopRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNextHopRegMsgDefaultTypeInternal _SLAFNextHopRegMsg_default_instance_;
constexpr SLAFNotifRegReq::SLAFNotifRegReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operationid_(uint64_t{0u})
  , _oneof_case_{}{}
struct SLAFNotifRegReqDefaultTypeInternal {
  constexpr SLAFNotifRegReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNotifRegReqDefaultTypeInternal() {}
  union {
    SLAFNotifRegReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNotifRegReqDefaultTypeInternal _SLAFNotifRegReq_default_instance_;
constexpr SLAFNotifReq::SLAFNotifReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifreq_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oper_(0)
{}
struct SLAFNotifReqDefaultTypeInternal {
  constexpr SLAFNotifReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNotifReqDefaultTypeInternal() {}
  union {
    SLAFNotifReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNotifReqDefaultTypeInternal _SLAFNotifReq_default_instance_;
constexpr SLAFNotifRsp::SLAFNotifRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifreq_(nullptr)
  , notifstatus_(nullptr){}
struct SLAFNotifRspDefaultTypeInternal {
  constexpr SLAFNotifRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNotifRspDefaultTypeInternal() {}
  union {
    SLAFNotifRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNotifRspDefaultTypeInternal _SLAFNotifRsp_default_instance_;
constexpr SLNextHop::SLNextHop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paths_()
  , srcproto_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srcprototag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nexthopkey_(nullptr)
  , resolvingprefix_(nullptr)
  , admindistance_(0u)
  , metric_(0u){}
struct SLNextHopDefaultTypeInternal {
  constexpr SLNextHopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLNextHopDefaultTypeInternal() {}
  union {
    SLNextHop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLNextHopDefaultTypeInternal _SLNextHop_default_instance_;
constexpr SLAFNotif_SLRedistMarker::SLAFNotif_SLRedistMarker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_(0)
{}
struct SLAFNotif_SLRedistMarkerDefaultTypeInternal {
  constexpr SLAFNotif_SLRedistMarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNotif_SLRedistMarkerDefaultTypeInternal() {}
  union {
    SLAFNotif_SLRedistMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNotif_SLRedistMarkerDefaultTypeInternal _SLAFNotif_SLRedistMarker_default_instance_;
constexpr SLAFNotif::SLAFNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLAFNotifDefaultTypeInternal {
  constexpr SLAFNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNotifDefaultTypeInternal() {}
  union {
    SLAFNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNotifDefaultTypeInternal _SLAFNotif_default_instance_;
constexpr SLAFNotifMsg::SLAFNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : afnotifs_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLAFNotifMsgDefaultTypeInternal {
  constexpr SLAFNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFNotifMsgDefaultTypeInternal() {}
  union {
    SLAFNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFNotifMsgDefaultTypeInternal _SLAFNotifMsg_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5faf_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sl_5faf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5faf_2eproto = nullptr;

const uint32_t TableStruct_sl_5faf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfReg, table_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfReg, vrfreg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsg, vrfregmsgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsg, getall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsgRsp, clientid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsgRsp, table_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegGetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPath, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPathList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPathList, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, pathgroupid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, admindistance_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, pgflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntryKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntryKey, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, mplskey_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, admindistance_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, pathlist_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, mplsflags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFIPRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFIPRoute, iprouteprefix_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFIPRoute, routecommon_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFIPRoute, pathlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObject, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObject, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObject, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOpMsg, afobject_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOpMsg, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOpMsg, acktype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOpMsg, ackpermits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOpMsg, ackcadence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFClientIDList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFClientIDList, clientidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLTableTypeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLTableTypeList, table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObjectKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObjectKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObjectKey, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMatch, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMatchList, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsg, vrfname_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsg, client_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsg, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRspEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRspEntry, afopmsg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRspEntry, fibstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRsp, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRsp, clientid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFGetMsgRsp, aflist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, oplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, status_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, fibstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, errorstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsgRsp, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRedistRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRedistRegMsg, srcproto_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRedistRegMsg, srcprototag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRedistRegMsg, table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey_SLNextHopKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey_SLNextHopKey, nexthopip_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey_SLNextHopKey, exactmatch_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey_SLNextHopKey, allowdefault_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey_SLNextHopKey, recurse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegKey, nexthopkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNextHopRegMsg, nexthopkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRegReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRegReq, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRegReq, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifReq, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifReq, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifReq, notifreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRsp, notifreq_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifRsp, notifstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, nexthopkey_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, resolvingprefix_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, srcproto_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, srcprototag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, admindistance_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, metric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLNextHop, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotif_SLRedistMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotif_SLRedistMarker, table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotif, Event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifMsg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFNotifMsg, afnotifs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLAFVrfReg)},
  { 8, -1, -1, sizeof(::service_layer::SLAFVrfRegMsg)},
  { 16, -1, -1, sizeof(::service_layer::SLAFVrfRegMsgRes)},
  { 25, -1, -1, sizeof(::service_layer::SLAFVrfRegMsgRsp)},
  { 33, -1, -1, sizeof(::service_layer::SLAFVrfRegGetMsg)},
  { 40, -1, -1, sizeof(::service_layer::SLAFVrfRegGetMsgRsp)},
  { 50, -1, -1, sizeof(::service_layer::SLPathGroup_SLPath)},
  { 57, -1, -1, sizeof(::service_layer::SLPathGroup_SLPathList)},
  { 64, -1, -1, sizeof(::service_layer::SLPathGroup)},
  { 75, -1, -1, sizeof(::service_layer::SLMplsEntryKey)},
  { 82, -1, -1, sizeof(::service_layer::SLMplsEntry)},
  { 92, -1, -1, sizeof(::service_layer::SLAFIPRoute)},
  { 101, -1, -1, sizeof(::service_layer::SLAFObject)},
  { 111, -1, -1, sizeof(::service_layer::SLAFOpMsg)},
  { 122, -1, -1, sizeof(::service_layer::SLAFClientIDList)},
  { 129, -1, -1, sizeof(::service_layer::SLTableTypeList)},
  { 136, -1, -1, sizeof(::service_layer::SLAFObjectKey)},
  { 146, -1, -1, sizeof(::service_layer::SLAFGetMatch)},
  { 156, -1, -1, sizeof(::service_layer::SLAFGetMatchList)},
  { 163, -1, -1, sizeof(::service_layer::SLAFGetMsg)},
  { 176, -1, -1, sizeof(::service_layer::SLAFGetMsgRspEntry)},
  { 184, -1, -1, sizeof(::service_layer::SLAFGetMsgRsp)},
  { 194, -1, -1, sizeof(::service_layer::SLAFMsg)},
  { 203, -1, -1, sizeof(::service_layer::SLAFRes)},
  { 214, -1, -1, sizeof(::service_layer::SLAFMsgRsp)},
  { 222, -1, -1, sizeof(::service_layer::SLAFRedistRegMsg)},
  { 231, -1, -1, sizeof(::service_layer::SLAFNextHopRegKey_SLNextHopKey)},
  { 241, -1, -1, sizeof(::service_layer::SLAFNextHopRegKey)},
  { 249, -1, -1, sizeof(::service_layer::SLAFNextHopRegMsg)},
  { 256, -1, -1, sizeof(::service_layer::SLAFNotifRegReq)},
  { 266, -1, -1, sizeof(::service_layer::SLAFNotifReq)},
  { 275, -1, -1, sizeof(::service_layer::SLAFNotifRsp)},
  { 283, -1, -1, sizeof(::service_layer::SLNextHop)},
  { 296, -1, -1, sizeof(::service_layer::SLAFNotif_SLRedistMarker)},
  { 303, -1, -1, sizeof(::service_layer::SLAFNotif)},
  { 315, -1, -1, sizeof(::service_layer::SLAFNotifMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPathGroup_SLPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPathGroup_SLPathList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPathGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsEntryKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFIPRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFOpMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFClientIDList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLTableTypeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFObjectKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFGetMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFGetMatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFGetMsgRspEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFRedistRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNextHopRegKey_SLNextHopKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNextHopRegKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNextHopRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNotifRegReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNotifReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNotifRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLNextHop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNotif_SLRedistMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFNotifMsg_default_instance_),
};

const char descriptor_table_protodef_sl_5faf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013sl_af.proto\022\rservice_layer\032\025sl_common_"
  "types.proto\032\025sl_route_common.proto\"`\n\nSL"
  "AFVrfReg\022)\n\005Table\030\001 \001(\0162\032.service_layer."
  "SLTableType\022\'\n\006VrfReg\030\002 \001(\0132\027.service_la"
  "yer.SLVrfReg\"d\n\rSLAFVrfRegMsg\022$\n\004Oper\030\001 "
  "\001(\0162\026.service_layer.SLRegOp\022-\n\nVrfRegMsg"
  "s\030\002 \003(\0132\031.service_layer.SLAFVrfReg\"\177\n\020SL"
  "AFVrfRegMsgRes\022/\n\tErrStatus\030\001 \001(\0132\034.serv"
  "ice_layer.SLErrorStatus\022\017\n\007VrfName\030\002 \001(\t"
  "\022)\n\005Table\030\003 \001(\0162\032.service_layer.SLTableT"
  "ype\"y\n\020SLAFVrfRegMsgRsp\0223\n\rStatusSummary"
  "\030\001 \001(\0132\034.service_layer.SLErrorStatus\0220\n\007"
  "Results\030\002 \003(\0132\037.service_layer.SLAFVrfReg"
  "MsgRes\"\"\n\020SLAFVrfRegGetMsg\022\016\n\006GetAll\030\001 \001"
  "(\010\"\255\001\n\023SLAFVrfRegGetMsgRsp\022/\n\tErrStatus\030"
  "\001 \001(\0132\034.service_layer.SLErrorStatus\022\020\n\010C"
  "lientID\030\002 \001(\004\022)\n\005Table\030\003 \001(\0162\032.service_l"
  "ayer.SLTableType\022(\n\007Entries\030\004 \003(\0132\027.serv"
  "ice_layer.SLVrfReg\"\272\002\n\013SLPathGroup\022.\n\013Pa"
  "thGroupId\030\001 \001(\0132\031.service_layer.SLObject"
  "Id\022\025\n\rAdminDistance\030\002 \001(\r\0229\n\010PathList\030\003 "
  "\001(\0132%.service_layer.SLPathGroup.SLPathLi"
  "stH\000\022,\n\007PgFlags\030\004 \003(\0162\033.service_layer.SL"
  "RouteFlags\0322\n\006SLPath\022(\n\004Path\030\001 \001(\0132\032.ser"
  "vice_layer.SLRoutePath\032>\n\nSLPathList\0220\n\005"
  "Paths\030\001 \003(\0132!.service_layer.SLPathGroup."
  "SLPathB\007\n\005entry\"\037\n\016SLMplsEntryKey\022\r\n\005Lab"
  "el\030\001 \001(\r\"\262\001\n\013SLMplsEntry\022.\n\007MplsKey\030\001 \001("
  "\0132\035.service_layer.SLMplsEntryKey\022\025\n\rAdmi"
  "nDistance\030\002 \001(\r\022,\n\010PathList\030\003 \003(\0132\032.serv"
  "ice_layer.SLRoutePath\022.\n\tMplsFlags\030\004 \003(\016"
  "2\033.service_layer.SLRouteFlags\"\243\001\n\013SLAFIP"
  "Route\0223\n\rIPRoutePrefix\030\001 \001(\0132\034.service_l"
  "ayer.SLRoutePrefix\0221\n\013RouteCommon\030\002 \001(\0132"
  "\034.service_layer.SLRouteCommon\022,\n\010PathLis"
  "t\030\003 \003(\0132\032.service_layer.SLRoutePath\"\246\001\n\n"
  "SLAFObject\022-\n\007IPRoute\030\001 \001(\0132\032.service_la"
  "yer.SLAFIPRouteH\000\022/\n\tMplsLabel\030\002 \001(\0132\032.s"
  "ervice_layer.SLMplsEntryH\000\022/\n\tPathGroup\030"
  "\003 \001(\0132\032.service_layer.SLPathGroupH\000B\007\n\005e"
  "ntry\"\342\001\n\tSLAFOpMsg\022+\n\010AFObject\030\001 \001(\0132\031.s"
  "ervice_layer.SLAFObject\022\023\n\013OperationID\030\002"
  " \001(\004\022,\n\007AckType\030\003 \001(\0162\033.service_layer.SL"
  "RspACKType\0221\n\nAckPermits\030\004 \003(\0162\035.service"
  "_layer.SLRspACKPermit\0222\n\nAckCadence\030\005 \001("
  "\0162\036.service_layer.SLRspAckCadence\"(\n\020SLA"
  "FClientIDList\022\024\n\014ClientIDList\030\001 \003(\004\"<\n\017S"
  "LTableTypeList\022)\n\005Table\030\001 \003(\0162\032.service_"
  "layer.SLTableType\"\263\001\n\rSLAFObjectKey\0225\n\rI"
  "PRoutePrefix\030\001 \001(\0132\034.service_layer.SLRou"
  "tePrefixH\000\0222\n\tMplsLabel\030\002 \001(\0132\035.service_"
  "layer.SLMplsEntryKeyH\000\0220\n\013PathGroupId\030\003 "
  "\001(\0132\031.service_layer.SLObjectIdH\000B\005\n\003key\""
  "t\n\014SLAFGetMatch\022+\n\003Key\030\001 \001(\0132\034.service_l"
  "ayer.SLAFObjectKeyH\000\022\030\n\016PathGroupRegex\030\002"
  " \001(\tH\000\022\024\n\nVxlanVniId\030\003 \001(\rH\000B\007\n\005entry\">\n"
  "\020SLAFGetMatchList\022*\n\005Match\030\001 \003(\0132\033.servi"
  "ce_layer.SLAFGetMatch\"\357\001\n\nSLAFGetMsg\022\017\n\007"
  "VrfName\030\001 \001(\t\0227\n\014ClientIDList\030\002 \001(\0132\037.se"
  "rvice_layer.SLAFClientIDListH\000\022\024\n\nAllCli"
  "ents\030\003 \001(\010H\000\0223\n\tTableList\030\004 \001(\0132\036.servic"
  "e_layer.SLTableTypeListH\001\0229\n\016RouteMatchL"
  "ist\030\005 \001(\0132\037.service_layer.SLAFGetMatchLi"
  "stH\001B\010\n\006clientB\007\n\005match\"p\n\022SLAFGetMsgRsp"
  "Entry\022)\n\007AFOpMsg\030\001 \001(\0132\030.service_layer.S"
  "LAFOpMsg\022/\n\tFIBStatus\030\002 \001(\0162\034.service_la"
  "yer.SLAFFibStatus\"\226\001\n\rSLAFGetMsgRsp\022/\n\tE"
  "rrStatus\030\001 \001(\0132\034.service_layer.SLErrorSt"
  "atus\022\017\n\007VrfName\030\002 \001(\t\022\020\n\010ClientID\030\003 \001(\004\022"
  "1\n\006AFList\030\004 \003(\0132!.service_layer.SLAFGetM"
  "sgRspEntry\"m\n\007SLAFMsg\022\'\n\004Oper\030\001 \001(\0162\031.se"
  "rvice_layer.SLObjectOp\022\017\n\007VrfName\030\002 \001(\t\022"
  "(\n\006OpList\030\003 \003(\0132\030.service_layer.SLAFOpMs"
  "g\"\275\001\n\007SLAFRes\022,\n\006Status\030\001 \001(\0132\034.service_"
  "layer.SLErrorStatus\022)\n\003Key\030\002 \001(\0132\034.servi"
  "ce_layer.SLAFObjectKey\022\023\n\013OperationID\030\003 "
  "\001(\004\022/\n\tFIBStatus\030\004 \001(\0162\034.service_layer.S"
  "LAFFibStatus\022\023\n\013ErrorString\030\005 \001(\t\"F\n\nSLA"
  "FMsgRsp\022\017\n\007VrfName\030\001 \001(\t\022\'\n\007Results\030\002 \003("
  "\0132\026.service_layer.SLAFRes\"d\n\020SLAFRedistR"
  "egMsg\022\020\n\010SrcProto\030\001 \001(\t\022\023\n\013SrcProtoTag\030\002"
  " \001(\t\022)\n\005Table\030\003 \001(\0162\032.service_layer.SLTa"
  "bleType\"\337\001\n\021SLAFNextHopRegKey\022@\n\007NextHop"
  "\030\001 \001(\0132-.service_layer.SLAFNextHopRegKey"
  ".SLNextHopKeyH\000\032z\n\014SLNextHopKey\022/\n\tNextH"
  "opIP\030\001 \001(\0132\034.service_layer.SLRoutePrefix"
  "\022\022\n\nExactMatch\030\002 \001(\010\022\024\n\014AllowDefault\030\003 \001"
  "(\010\022\017\n\007Recurse\030\004 \001(\010B\014\n\nnexthopkey\"I\n\021SLA"
  "FNextHopRegMsg\0224\n\nNextHopKey\030\001 \001(\0132 .ser"
  "vice_layer.SLAFNextHopRegKey\"\237\001\n\017SLAFNot"
  "ifRegReq\0224\n\tRedistReq\030\001 \001(\0132\037.service_la"
  "yer.SLAFRedistRegMsgH\000\0226\n\nNextHopReq\030\002 \001"
  "(\0132 .service_layer.SLAFNextHopRegMsgH\000\022\023"
  "\n\013OperationID\030\003 \001(\004B\t\n\007request\"y\n\014SLAFNo"
  "tifReq\022&\n\004Oper\030\001 \001(\0162\030.service_layer.SLN"
  "otifOp\022\017\n\007VrfName\030\002 \001(\t\0220\n\010NotifReq\030\003 \003("
  "\0132\036.service_layer.SLAFNotifRegReq\"s\n\014SLA"
  "FNotifRsp\0220\n\010NotifReq\030\001 \001(\0132\036.service_la"
  "yer.SLAFNotifRegReq\0221\n\013NotifStatus\030\002 \001(\013"
  "2\034.service_layer.SLErrorStatus\"\361\001\n\tSLNex"
  "tHop\0224\n\nNextHopKey\030\001 \001(\0132 .service_layer"
  ".SLAFNextHopRegKey\0225\n\017ResolvingPrefix\030\002 "
  "\001(\0132\034.service_layer.SLRoutePrefix\022\020\n\010Src"
  "Proto\030\003 \001(\t\022\023\n\013SrcProtoTag\030\004 \001(\t\022\025\n\rAdmi"
  "nDistance\030\005 \001(\r\022\016\n\006Metric\030\006 \001(\r\022)\n\005Paths"
  "\030\007 \003(\0132\032.service_layer.SLRoutePath\"\343\002\n\tS"
  "LAFNotif\0222\n\013NotifStatus\030\001 \001(\0132\033.service_"
  "layer.SLAFNotifRspH\000\022>\n\013StartMarker\030\002 \001("
  "\0132\'.service_layer.SLAFNotif.SLRedistMark"
  "erH\000\022<\n\tEndMarker\030\003 \001(\0132\'.service_layer."
  "SLAFNotif.SLRedistMarkerH\000\0221\n\014RedistObje"
  "ct\030\004 \001(\0132\031.service_layer.SLAFObjectH\000\022+\n"
  "\007NextHop\030\005 \001(\0132\030.service_layer.SLNextHop"
  "H\000\032;\n\016SLRedistMarker\022)\n\005Table\030\001 \001(\0162\032.se"
  "rvice_layer.SLTableTypeB\007\n\005Event\"K\n\014SLAF"
  "NotifMsg\022\017\n\007VrfName\030\001 \001(\t\022*\n\010AFNotifs\030\003 "
  "\003(\0132\030.service_layer.SLAFNotif2\310\003\n\004SLAF\022M"
  "\n\014SLAFVrfRegOp\022\034.service_layer.SLAFVrfRe"
  "gMsg\032\037.service_layer.SLAFVrfRegMsgRsp\022V\n"
  "\rSLAFVrfRegGet\022\037.service_layer.SLAFVrfRe"
  "gGetMsg\032\".service_layer.SLAFVrfRegGetMsg"
  "Rsp0\001\022;\n\006SLAFOp\022\026.service_layer.SLAFMsg\032"
  "\031.service_layer.SLAFMsgRsp\022E\n\014SLAFOpStre"
  "am\022\026.service_layer.SLAFMsg\032\031.service_lay"
  "er.SLAFMsgRsp(\0010\001\022D\n\007SLAFGet\022\031.service_l"
  "ayer.SLAFGetMsg\032\034.service_layer.SLAFGetM"
  "sgRsp0\001\022O\n\017SLAFNotifStream\022\033.service_lay"
  "er.SLAFNotifReq\032\033.service_layer.SLAFNoti"
  "fMsg(\0010\001BQZOgithub.com/Cisco-service-lay"
  "er/service-layer-objmodel/grpc/protos;se"
  "rvice_layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5faf_2eproto_deps[2] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
  &::descriptor_table_sl_5froute_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5faf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5faf_2eproto = {
  false, false, 5219, descriptor_table_protodef_sl_5faf_2eproto, "sl_af.proto", 
  &descriptor_table_sl_5faf_2eproto_once, descriptor_table_sl_5faf_2eproto_deps, 2, 36,
  schemas, file_default_instances, TableStruct_sl_5faf_2eproto::offsets,
  file_level_metadata_sl_5faf_2eproto, file_level_enum_descriptors_sl_5faf_2eproto, file_level_service_descriptors_sl_5faf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5faf_2eproto_getter() {
  return &descriptor_table_sl_5faf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5faf_2eproto(&descriptor_table_sl_5faf_2eproto);
namespace service_layer {

// ===================================================================

class SLAFVrfReg::_Internal {
 public:
  static const ::service_layer::SLVrfReg& vrfreg(const SLAFVrfReg* msg);
};

const ::service_layer::SLVrfReg&
SLAFVrfReg::_Internal::vrfreg(const SLAFVrfReg* msg) {
  return *msg->vrfreg_;
}
void SLAFVrfReg::clear_vrfreg() {
  if (GetArenaForAllocation() == nullptr && vrfreg_ != nullptr) {
    delete vrfreg_;
  }
  vrfreg_ = nullptr;
}
SLAFVrfReg::SLAFVrfReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfReg)
}
SLAFVrfReg::SLAFVrfReg(const SLAFVrfReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vrfreg()) {
    vrfreg_ = new ::service_layer::SLVrfReg(*from.vrfreg_);
  } else {
    vrfreg_ = nullptr;
  }
  table_ = from.table_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfReg)
}

inline void SLAFVrfReg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vrfreg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&vrfreg_)) + sizeof(table_));
}

SLAFVrfReg::~SLAFVrfReg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfReg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfReg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vrfreg_;
}

void SLAFVrfReg::ArenaDtor(void* object) {
  SLAFVrfReg* _this = reinterpret_cast< SLAFVrfReg* >(object);
  (void)_this;
}
void SLAFVrfReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfReg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfReg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vrfreg_ != nullptr) {
    delete vrfreg_;
  }
  vrfreg_ = nullptr;
  table_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLTableType Table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLVrfReg VrfReg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfreg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfReg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfReg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLTableType Table = 1;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table(), target);
  }

  // .service_layer.SLVrfReg VrfReg = 2;
  if (this->_internal_has_vrfreg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vrfreg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfReg)
  return target;
}

size_t SLAFVrfReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfReg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLVrfReg VrfReg = 2;
  if (this->_internal_has_vrfreg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrfreg_);
  }

  // .service_layer.SLTableType Table = 1;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfReg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfReg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfReg::GetClassData() const { return &_class_data_; }

void SLAFVrfReg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfReg *>(to)->MergeFrom(
      static_cast<const SLAFVrfReg &>(from));
}


void SLAFVrfReg::MergeFrom(const SLAFVrfReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfReg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vrfreg()) {
    _internal_mutable_vrfreg()->::service_layer::SLVrfReg::MergeFrom(from._internal_vrfreg());
  }
  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfReg::CopyFrom(const SLAFVrfReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfReg::IsInitialized() const {
  return true;
}

void SLAFVrfReg::InternalSwap(SLAFVrfReg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFVrfReg, table_)
      + sizeof(SLAFVrfReg::table_)
      - PROTOBUF_FIELD_OFFSET(SLAFVrfReg, vrfreg_)>(
          reinterpret_cast<char*>(&vrfreg_),
          reinterpret_cast<char*>(&other->vrfreg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfReg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[0]);
}

// ===================================================================

class SLAFVrfRegMsg::_Internal {
 public:
};

SLAFVrfRegMsg::SLAFVrfRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vrfregmsgs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegMsg)
}
SLAFVrfRegMsg::SLAFVrfRegMsg(const SLAFVrfRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vrfregmsgs_(from.vrfregmsgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegMsg)
}

inline void SLAFVrfRegMsg::SharedCtor() {
oper_ = 0;
}

SLAFVrfRegMsg::~SLAFVrfRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLAFVrfRegMsg::ArenaDtor(void* object) {
  SLAFVrfRegMsg* _this = reinterpret_cast< SLAFVrfRegMsg* >(object);
  (void)_this;
}
void SLAFVrfRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfregmsgs_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrfregmsgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vrfregmsgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vrfregmsgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegMsg)
  return target;
}

size_t SLAFVrfRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
  total_size += 1UL * this->_internal_vrfregmsgs_size();
  for (const auto& msg : this->vrfregmsgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegMsg::GetClassData() const { return &_class_data_; }

void SLAFVrfRegMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegMsg *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegMsg &>(from));
}


void SLAFVrfRegMsg::MergeFrom(const SLAFVrfRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vrfregmsgs_.MergeFrom(from.vrfregmsgs_);
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegMsg::CopyFrom(const SLAFVrfRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegMsg::IsInitialized() const {
  return true;
}

void SLAFVrfRegMsg::InternalSwap(SLAFVrfRegMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vrfregmsgs_.InternalSwap(&other->vrfregmsgs_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[1]);
}

// ===================================================================

class SLAFVrfRegMsgRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLAFVrfRegMsgRes* msg);
};

const ::service_layer::SLErrorStatus&
SLAFVrfRegMsgRes::_Internal::errstatus(const SLAFVrfRegMsgRes* msg) {
  return *msg->errstatus_;
}
void SLAFVrfRegMsgRes::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLAFVrfRegMsgRes::SLAFVrfRegMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegMsgRes)
}
SLAFVrfRegMsgRes::SLAFVrfRegMsgRes(const SLAFVrfRegMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  table_ = from.table_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegMsgRes)
}

inline void SLAFVrfRegMsgRes::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(table_));
}

SLAFVrfRegMsgRes::~SLAFVrfRegMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegMsgRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLAFVrfRegMsgRes::ArenaDtor(void* object) {
  SLAFVrfRegMsgRes* _this = reinterpret_cast< SLAFVrfRegMsgRes* >(object);
  (void)_this;
}
void SLAFVrfRegMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegMsgRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  table_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFVrfRegMsgRes.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLTableType Table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegMsgRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegMsgRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFVrfRegMsgRes.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegMsgRes)
  return target;
}

size_t SLAFVrfRegMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegMsgRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegMsgRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegMsgRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegMsgRes::GetClassData() const { return &_class_data_; }

void SLAFVrfRegMsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegMsgRes *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegMsgRes &>(from));
}


void SLAFVrfRegMsgRes::MergeFrom(const SLAFVrfRegMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegMsgRes::CopyFrom(const SLAFVrfRegMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegMsgRes::IsInitialized() const {
  return true;
}

void SLAFVrfRegMsgRes::InternalSwap(SLAFVrfRegMsgRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFVrfRegMsgRes, table_)
      + sizeof(SLAFVrfRegMsgRes::table_)
      - PROTOBUF_FIELD_OFFSET(SLAFVrfRegMsgRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegMsgRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[2]);
}

// ===================================================================

class SLAFVrfRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLAFVrfRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLAFVrfRegMsgRsp::_Internal::statussummary(const SLAFVrfRegMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLAFVrfRegMsgRsp::clear_statussummary() {
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLAFVrfRegMsgRsp::SLAFVrfRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegMsgRsp)
}
SLAFVrfRegMsgRsp::SLAFVrfRegMsgRsp(const SLAFVrfRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegMsgRsp)
}

inline void SLAFVrfRegMsgRsp::SharedCtor() {
statussummary_ = nullptr;
}

SLAFVrfRegMsgRsp::~SLAFVrfRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLAFVrfRegMsgRsp::ArenaDtor(void* object) {
  SLAFVrfRegMsgRsp* _this = reinterpret_cast< SLAFVrfRegMsgRsp* >(object);
  (void)_this;
}
void SLAFVrfRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegMsgRsp)
  return target;
}

size_t SLAFVrfRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegMsgRsp::GetClassData() const { return &_class_data_; }

void SLAFVrfRegMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegMsgRsp *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegMsgRsp &>(from));
}


void SLAFVrfRegMsgRsp::MergeFrom(const SLAFVrfRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegMsgRsp::CopyFrom(const SLAFVrfRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegMsgRsp::IsInitialized() const {
  return true;
}

void SLAFVrfRegMsgRsp::InternalSwap(SLAFVrfRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[3]);
}

// ===================================================================

class SLAFVrfRegGetMsg::_Internal {
 public:
};

SLAFVrfRegGetMsg::SLAFVrfRegGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegGetMsg)
}
SLAFVrfRegGetMsg::SLAFVrfRegGetMsg(const SLAFVrfRegGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  getall_ = from.getall_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegGetMsg)
}

inline void SLAFVrfRegGetMsg::SharedCtor() {
getall_ = false;
}

SLAFVrfRegGetMsg::~SLAFVrfRegGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegGetMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLAFVrfRegGetMsg::ArenaDtor(void* object) {
  SLAFVrfRegGetMsg* _this = reinterpret_cast< SLAFVrfRegGetMsg* >(object);
  (void)_this;
}
void SLAFVrfRegGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegGetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  getall_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool GetAll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          getall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegGetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegGetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool GetAll = 1;
  if (this->_internal_getall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_getall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegGetMsg)
  return target;
}

size_t SLAFVrfRegGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegGetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool GetAll = 1;
  if (this->_internal_getall() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegGetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegGetMsg::GetClassData() const { return &_class_data_; }

void SLAFVrfRegGetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegGetMsg *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegGetMsg &>(from));
}


void SLAFVrfRegGetMsg::MergeFrom(const SLAFVrfRegGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_getall() != 0) {
    _internal_set_getall(from._internal_getall());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegGetMsg::CopyFrom(const SLAFVrfRegGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegGetMsg::IsInitialized() const {
  return true;
}

void SLAFVrfRegGetMsg::InternalSwap(SLAFVrfRegGetMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(getall_, other->getall_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[4]);
}

// ===================================================================

class SLAFVrfRegGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLAFVrfRegGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLAFVrfRegGetMsgRsp::_Internal::errstatus(const SLAFVrfRegGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLAFVrfRegGetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
void SLAFVrfRegGetMsgRsp::clear_entries() {
  entries_.Clear();
}
SLAFVrfRegGetMsgRsp::SLAFVrfRegGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegGetMsgRsp)
}
SLAFVrfRegGetMsgRsp::SLAFVrfRegGetMsgRsp(const SLAFVrfRegGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(table_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegGetMsgRsp)
}

inline void SLAFVrfRegGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(table_));
}

SLAFVrfRegGetMsgRsp::~SLAFVrfRegGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLAFVrfRegGetMsgRsp::ArenaDtor(void* object) {
  SLAFVrfRegGetMsgRsp* _this = reinterpret_cast< SLAFVrfRegGetMsgRsp* >(object);
  (void)_this;
}
void SLAFVrfRegGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&clientid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&clientid_)) + sizeof(table_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ClientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLTableType Table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLVrfReg Entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint64 ClientID = 2;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientid(), target);
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_table(), target);
  }

  // repeated .service_layer.SLVrfReg Entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegGetMsgRsp)
  return target;
}

size_t SLAFVrfRegGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLVrfReg Entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 ClientID = 2;
  if (this->_internal_clientid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_clientid());
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLAFVrfRegGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegGetMsgRsp &>(from));
}


void SLAFVrfRegGetMsgRsp::MergeFrom(const SLAFVrfRegGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegGetMsgRsp::CopyFrom(const SLAFVrfRegGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegGetMsgRsp::IsInitialized() const {
  return true;
}

void SLAFVrfRegGetMsgRsp::InternalSwap(SLAFVrfRegGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFVrfRegGetMsgRsp, table_)
      + sizeof(SLAFVrfRegGetMsgRsp::table_)
      - PROTOBUF_FIELD_OFFSET(SLAFVrfRegGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[5]);
}

// ===================================================================

class SLPathGroup_SLPath::_Internal {
 public:
  static const ::service_layer::SLRoutePath& path(const SLPathGroup_SLPath* msg);
};

const ::service_layer::SLRoutePath&
SLPathGroup_SLPath::_Internal::path(const SLPathGroup_SLPath* msg) {
  return *msg->path_;
}
void SLPathGroup_SLPath::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
SLPathGroup_SLPath::SLPathGroup_SLPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPathGroup.SLPath)
}
SLPathGroup_SLPath::SLPathGroup_SLPath(const SLPathGroup_SLPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::service_layer::SLRoutePath(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPathGroup.SLPath)
}

inline void SLPathGroup_SLPath::SharedCtor() {
path_ = nullptr;
}

SLPathGroup_SLPath::~SLPathGroup_SLPath() {
  // @@protoc_insertion_point(destructor:service_layer.SLPathGroup.SLPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPathGroup_SLPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void SLPathGroup_SLPath::ArenaDtor(void* object) {
  SLPathGroup_SLPath* _this = reinterpret_cast< SLPathGroup_SLPath* >(object);
  (void)_this;
}
void SLPathGroup_SLPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPathGroup_SLPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPathGroup_SLPath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPathGroup.SLPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPathGroup_SLPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRoutePath Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPathGroup_SLPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPathGroup.SLPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRoutePath Path = 1;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPathGroup.SLPath)
  return target;
}

size_t SLPathGroup_SLPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPathGroup.SLPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLRoutePath Path = 1;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPathGroup_SLPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPathGroup_SLPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPathGroup_SLPath::GetClassData() const { return &_class_data_; }

void SLPathGroup_SLPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPathGroup_SLPath *>(to)->MergeFrom(
      static_cast<const SLPathGroup_SLPath &>(from));
}


void SLPathGroup_SLPath::MergeFrom(const SLPathGroup_SLPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPathGroup.SLPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::service_layer::SLRoutePath::MergeFrom(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPathGroup_SLPath::CopyFrom(const SLPathGroup_SLPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPathGroup.SLPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPathGroup_SLPath::IsInitialized() const {
  return true;
}

void SLPathGroup_SLPath::InternalSwap(SLPathGroup_SLPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPathGroup_SLPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[6]);
}

// ===================================================================

class SLPathGroup_SLPathList::_Internal {
 public:
};

SLPathGroup_SLPathList::SLPathGroup_SLPathList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPathGroup.SLPathList)
}
SLPathGroup_SLPathList::SLPathGroup_SLPathList(const SLPathGroup_SLPathList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPathGroup.SLPathList)
}

inline void SLPathGroup_SLPathList::SharedCtor() {
}

SLPathGroup_SLPathList::~SLPathGroup_SLPathList() {
  // @@protoc_insertion_point(destructor:service_layer.SLPathGroup.SLPathList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPathGroup_SLPathList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPathGroup_SLPathList::ArenaDtor(void* object) {
  SLPathGroup_SLPathList* _this = reinterpret_cast< SLPathGroup_SLPathList* >(object);
  (void)_this;
}
void SLPathGroup_SLPathList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPathGroup_SLPathList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPathGroup_SLPathList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPathGroup.SLPathList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPathGroup_SLPathList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLPathGroup.SLPath Paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPathGroup_SLPathList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPathGroup.SLPathList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLPathGroup.SLPath Paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPathGroup.SLPathList)
  return target;
}

size_t SLPathGroup_SLPathList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPathGroup.SLPathList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPathGroup.SLPath Paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPathGroup_SLPathList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPathGroup_SLPathList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPathGroup_SLPathList::GetClassData() const { return &_class_data_; }

void SLPathGroup_SLPathList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPathGroup_SLPathList *>(to)->MergeFrom(
      static_cast<const SLPathGroup_SLPathList &>(from));
}


void SLPathGroup_SLPathList::MergeFrom(const SLPathGroup_SLPathList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPathGroup.SLPathList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPathGroup_SLPathList::CopyFrom(const SLPathGroup_SLPathList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPathGroup.SLPathList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPathGroup_SLPathList::IsInitialized() const {
  return true;
}

void SLPathGroup_SLPathList::InternalSwap(SLPathGroup_SLPathList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPathGroup_SLPathList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[7]);
}

// ===================================================================

class SLPathGroup::_Internal {
 public:
  static const ::service_layer::SLObjectId& pathgroupid(const SLPathGroup* msg);
  static const ::service_layer::SLPathGroup_SLPathList& pathlist(const SLPathGroup* msg);
};

const ::service_layer::SLObjectId&
SLPathGroup::_Internal::pathgroupid(const SLPathGroup* msg) {
  return *msg->pathgroupid_;
}
const ::service_layer::SLPathGroup_SLPathList&
SLPathGroup::_Internal::pathlist(const SLPathGroup* msg) {
  return *msg->entry_.pathlist_;
}
void SLPathGroup::clear_pathgroupid() {
  if (GetArenaForAllocation() == nullptr && pathgroupid_ != nullptr) {
    delete pathgroupid_;
  }
  pathgroupid_ = nullptr;
}
void SLPathGroup::set_allocated_pathlist(::service_layer::SLPathGroup_SLPathList* pathlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (pathlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLPathGroup_SLPathList>::GetOwningArena(pathlist);
    if (message_arena != submessage_arena) {
      pathlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathlist, submessage_arena);
    }
    set_has_pathlist();
    entry_.pathlist_ = pathlist;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPathGroup.PathList)
}
SLPathGroup::SLPathGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pgflags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPathGroup)
}
SLPathGroup::SLPathGroup(const SLPathGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pgflags_(from.pgflags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pathgroupid()) {
    pathgroupid_ = new ::service_layer::SLObjectId(*from.pathgroupid_);
  } else {
    pathgroupid_ = nullptr;
  }
  admindistance_ = from.admindistance_;
  clear_has_entry();
  switch (from.entry_case()) {
    case kPathList: {
      _internal_mutable_pathlist()->::service_layer::SLPathGroup_SLPathList::MergeFrom(from._internal_pathlist());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPathGroup)
}

inline void SLPathGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pathgroupid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&admindistance_) -
    reinterpret_cast<char*>(&pathgroupid_)) + sizeof(admindistance_));
clear_has_entry();
}

SLPathGroup::~SLPathGroup() {
  // @@protoc_insertion_point(destructor:service_layer.SLPathGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPathGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pathgroupid_;
  if (has_entry()) {
    clear_entry();
  }
}

void SLPathGroup::ArenaDtor(void* object) {
  SLPathGroup* _this = reinterpret_cast< SLPathGroup* >(object);
  (void)_this;
}
void SLPathGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPathGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPathGroup::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLPathGroup)
  switch (entry_case()) {
    case kPathList: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.pathlist_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLPathGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPathGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pgflags_.Clear();
  if (GetArenaForAllocation() == nullptr && pathgroupid_ != nullptr) {
    delete pathgroupid_;
  }
  pathgroupid_ = nullptr;
  admindistance_ = 0u;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPathGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLObjectId PathGroupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroupid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AdminDistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPathGroup.SLPathList PathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRouteFlags PgFlags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_pgflags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_pgflags(static_cast<::service_layer::SLRouteFlags>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPathGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPathGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectId PathGroupId = 1;
  if (this->_internal_has_pathgroupid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pathgroupid(this), target, stream);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_admindistance(), target);
  }

  // .service_layer.SLPathGroup.SLPathList PathList = 3;
  if (_internal_has_pathlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pathlist(this), target, stream);
  }

  // repeated .service_layer.SLRouteFlags PgFlags = 4;
  {
    int byte_size = _pgflags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, pgflags_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPathGroup)
  return target;
}

size_t SLPathGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPathGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRouteFlags PgFlags = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_pgflags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_pgflags(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pgflags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .service_layer.SLObjectId PathGroupId = 1;
  if (this->_internal_has_pathgroupid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathgroupid_);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_admindistance());
  }

  switch (entry_case()) {
    // .service_layer.SLPathGroup.SLPathList PathList = 3;
    case kPathList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.pathlist_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPathGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPathGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPathGroup::GetClassData() const { return &_class_data_; }

void SLPathGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPathGroup *>(to)->MergeFrom(
      static_cast<const SLPathGroup &>(from));
}


void SLPathGroup::MergeFrom(const SLPathGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPathGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pgflags_.MergeFrom(from.pgflags_);
  if (from._internal_has_pathgroupid()) {
    _internal_mutable_pathgroupid()->::service_layer::SLObjectId::MergeFrom(from._internal_pathgroupid());
  }
  if (from._internal_admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  switch (from.entry_case()) {
    case kPathList: {
      _internal_mutable_pathlist()->::service_layer::SLPathGroup_SLPathList::MergeFrom(from._internal_pathlist());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPathGroup::CopyFrom(const SLPathGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPathGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPathGroup::IsInitialized() const {
  return true;
}

void SLPathGroup::InternalSwap(SLPathGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pgflags_.InternalSwap(&other->pgflags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPathGroup, admindistance_)
      + sizeof(SLPathGroup::admindistance_)
      - PROTOBUF_FIELD_OFFSET(SLPathGroup, pathgroupid_)>(
          reinterpret_cast<char*>(&pathgroupid_),
          reinterpret_cast<char*>(&other->pathgroupid_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPathGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[8]);
}

// ===================================================================

class SLMplsEntryKey::_Internal {
 public:
};

SLMplsEntryKey::SLMplsEntryKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsEntryKey)
}
SLMplsEntryKey::SLMplsEntryKey(const SLMplsEntryKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_ = from.label_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsEntryKey)
}

inline void SLMplsEntryKey::SharedCtor() {
label_ = 0u;
}

SLMplsEntryKey::~SLMplsEntryKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsEntryKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLMplsEntryKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLMplsEntryKey::ArenaDtor(void* object) {
  SLMplsEntryKey* _this = reinterpret_cast< SLMplsEntryKey* >(object);
  (void)_this;
}
void SLMplsEntryKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsEntryKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLMplsEntryKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsEntryKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsEntryKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLMplsEntryKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsEntryKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Label = 1;
  if (this->_internal_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsEntryKey)
  return target;
}

size_t SLMplsEntryKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsEntryKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Label = 1;
  if (this->_internal_label() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_label());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLMplsEntryKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLMplsEntryKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLMplsEntryKey::GetClassData() const { return &_class_data_; }

void SLMplsEntryKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLMplsEntryKey *>(to)->MergeFrom(
      static_cast<const SLMplsEntryKey &>(from));
}


void SLMplsEntryKey::MergeFrom(const SLMplsEntryKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsEntryKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_label() != 0) {
    _internal_set_label(from._internal_label());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLMplsEntryKey::CopyFrom(const SLMplsEntryKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsEntryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsEntryKey::IsInitialized() const {
  return true;
}

void SLMplsEntryKey::InternalSwap(SLMplsEntryKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsEntryKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[9]);
}

// ===================================================================

class SLMplsEntry::_Internal {
 public:
  static const ::service_layer::SLMplsEntryKey& mplskey(const SLMplsEntry* msg);
};

const ::service_layer::SLMplsEntryKey&
SLMplsEntry::_Internal::mplskey(const SLMplsEntry* msg) {
  return *msg->mplskey_;
}
void SLMplsEntry::clear_pathlist() {
  pathlist_.Clear();
}
SLMplsEntry::SLMplsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pathlist_(arena),
  mplsflags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsEntry)
}
SLMplsEntry::SLMplsEntry(const SLMplsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pathlist_(from.pathlist_),
      mplsflags_(from.mplsflags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mplskey()) {
    mplskey_ = new ::service_layer::SLMplsEntryKey(*from.mplskey_);
  } else {
    mplskey_ = nullptr;
  }
  admindistance_ = from.admindistance_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsEntry)
}

inline void SLMplsEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mplskey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&admindistance_) -
    reinterpret_cast<char*>(&mplskey_)) + sizeof(admindistance_));
}

SLMplsEntry::~SLMplsEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLMplsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mplskey_;
}

void SLMplsEntry::ArenaDtor(void* object) {
  SLMplsEntry* _this = reinterpret_cast< SLMplsEntry* >(object);
  (void)_this;
}
void SLMplsEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLMplsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathlist_.Clear();
  mplsflags_.Clear();
  if (GetArenaForAllocation() == nullptr && mplskey_ != nullptr) {
    delete mplskey_;
  }
  mplskey_ = nullptr;
  admindistance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLMplsEntryKey MplsKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplskey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AdminDistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutePath PathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRouteFlags MplsFlags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_mplsflags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_mplsflags(static_cast<::service_layer::SLRouteFlags>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLMplsEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLMplsEntryKey MplsKey = 1;
  if (this->_internal_has_mplskey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mplskey(this), target, stream);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_admindistance(), target);
  }

  // repeated .service_layer.SLRoutePath PathList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pathlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pathlist(i), target, stream);
  }

  // repeated .service_layer.SLRouteFlags MplsFlags = 4;
  {
    int byte_size = _mplsflags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, mplsflags_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsEntry)
  return target;
}

size_t SLMplsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutePath PathList = 3;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLRouteFlags MplsFlags = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_mplsflags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_mplsflags(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mplsflags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .service_layer.SLMplsEntryKey MplsKey = 1;
  if (this->_internal_has_mplskey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mplskey_);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_admindistance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLMplsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLMplsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLMplsEntry::GetClassData() const { return &_class_data_; }

void SLMplsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLMplsEntry *>(to)->MergeFrom(
      static_cast<const SLMplsEntry &>(from));
}


void SLMplsEntry::MergeFrom(const SLMplsEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pathlist_.MergeFrom(from.pathlist_);
  mplsflags_.MergeFrom(from.mplsflags_);
  if (from._internal_has_mplskey()) {
    _internal_mutable_mplskey()->::service_layer::SLMplsEntryKey::MergeFrom(from._internal_mplskey());
  }
  if (from._internal_admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLMplsEntry::CopyFrom(const SLMplsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsEntry::IsInitialized() const {
  return true;
}

void SLMplsEntry::InternalSwap(SLMplsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pathlist_.InternalSwap(&other->pathlist_);
  mplsflags_.InternalSwap(&other->mplsflags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsEntry, admindistance_)
      + sizeof(SLMplsEntry::admindistance_)
      - PROTOBUF_FIELD_OFFSET(SLMplsEntry, mplskey_)>(
          reinterpret_cast<char*>(&mplskey_),
          reinterpret_cast<char*>(&other->mplskey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[10]);
}

// ===================================================================

class SLAFIPRoute::_Internal {
 public:
  static const ::service_layer::SLRoutePrefix& iprouteprefix(const SLAFIPRoute* msg);
  static const ::service_layer::SLRouteCommon& routecommon(const SLAFIPRoute* msg);
};

const ::service_layer::SLRoutePrefix&
SLAFIPRoute::_Internal::iprouteprefix(const SLAFIPRoute* msg) {
  return *msg->iprouteprefix_;
}
const ::service_layer::SLRouteCommon&
SLAFIPRoute::_Internal::routecommon(const SLAFIPRoute* msg) {
  return *msg->routecommon_;
}
void SLAFIPRoute::clear_iprouteprefix() {
  if (GetArenaForAllocation() == nullptr && iprouteprefix_ != nullptr) {
    delete iprouteprefix_;
  }
  iprouteprefix_ = nullptr;
}
void SLAFIPRoute::clear_routecommon() {
  if (GetArenaForAllocation() == nullptr && routecommon_ != nullptr) {
    delete routecommon_;
  }
  routecommon_ = nullptr;
}
void SLAFIPRoute::clear_pathlist() {
  pathlist_.Clear();
}
SLAFIPRoute::SLAFIPRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pathlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFIPRoute)
}
SLAFIPRoute::SLAFIPRoute(const SLAFIPRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pathlist_(from.pathlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iprouteprefix()) {
    iprouteprefix_ = new ::service_layer::SLRoutePrefix(*from.iprouteprefix_);
  } else {
    iprouteprefix_ = nullptr;
  }
  if (from._internal_has_routecommon()) {
    routecommon_ = new ::service_layer::SLRouteCommon(*from.routecommon_);
  } else {
    routecommon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFIPRoute)
}

inline void SLAFIPRoute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iprouteprefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routecommon_) -
    reinterpret_cast<char*>(&iprouteprefix_)) + sizeof(routecommon_));
}

SLAFIPRoute::~SLAFIPRoute() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFIPRoute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFIPRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete iprouteprefix_;
  if (this != internal_default_instance()) delete routecommon_;
}

void SLAFIPRoute::ArenaDtor(void* object) {
  SLAFIPRoute* _this = reinterpret_cast< SLAFIPRoute* >(object);
  (void)_this;
}
void SLAFIPRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFIPRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFIPRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFIPRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathlist_.Clear();
  if (GetArenaForAllocation() == nullptr && iprouteprefix_ != nullptr) {
    delete iprouteprefix_;
  }
  iprouteprefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && routecommon_ != nullptr) {
    delete routecommon_;
  }
  routecommon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFIPRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRoutePrefix IPRoutePrefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iprouteprefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRouteCommon RouteCommon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routecommon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutePath PathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFIPRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFIPRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRoutePrefix IPRoutePrefix = 1;
  if (this->_internal_has_iprouteprefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iprouteprefix(this), target, stream);
  }

  // .service_layer.SLRouteCommon RouteCommon = 2;
  if (this->_internal_has_routecommon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routecommon(this), target, stream);
  }

  // repeated .service_layer.SLRoutePath PathList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pathlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pathlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFIPRoute)
  return target;
}

size_t SLAFIPRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFIPRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutePath PathList = 3;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLRoutePrefix IPRoutePrefix = 1;
  if (this->_internal_has_iprouteprefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iprouteprefix_);
  }

  // .service_layer.SLRouteCommon RouteCommon = 2;
  if (this->_internal_has_routecommon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routecommon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFIPRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFIPRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFIPRoute::GetClassData() const { return &_class_data_; }

void SLAFIPRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFIPRoute *>(to)->MergeFrom(
      static_cast<const SLAFIPRoute &>(from));
}


void SLAFIPRoute::MergeFrom(const SLAFIPRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFIPRoute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pathlist_.MergeFrom(from.pathlist_);
  if (from._internal_has_iprouteprefix()) {
    _internal_mutable_iprouteprefix()->::service_layer::SLRoutePrefix::MergeFrom(from._internal_iprouteprefix());
  }
  if (from._internal_has_routecommon()) {
    _internal_mutable_routecommon()->::service_layer::SLRouteCommon::MergeFrom(from._internal_routecommon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFIPRoute::CopyFrom(const SLAFIPRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFIPRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFIPRoute::IsInitialized() const {
  return true;
}

void SLAFIPRoute::InternalSwap(SLAFIPRoute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pathlist_.InternalSwap(&other->pathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFIPRoute, routecommon_)
      + sizeof(SLAFIPRoute::routecommon_)
      - PROTOBUF_FIELD_OFFSET(SLAFIPRoute, iprouteprefix_)>(
          reinterpret_cast<char*>(&iprouteprefix_),
          reinterpret_cast<char*>(&other->iprouteprefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFIPRoute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[11]);
}

// ===================================================================

class SLAFObject::_Internal {
 public:
  static const ::service_layer::SLAFIPRoute& iproute(const SLAFObject* msg);
  static const ::service_layer::SLMplsEntry& mplslabel(const SLAFObject* msg);
  static const ::service_layer::SLPathGroup& pathgroup(const SLAFObject* msg);
};

const ::service_layer::SLAFIPRoute&
SLAFObject::_Internal::iproute(const SLAFObject* msg) {
  return *msg->entry_.iproute_;
}
const ::service_layer::SLMplsEntry&
SLAFObject::_Internal::mplslabel(const SLAFObject* msg) {
  return *msg->entry_.mplslabel_;
}
const ::service_layer::SLPathGroup&
SLAFObject::_Internal::pathgroup(const SLAFObject* msg) {
  return *msg->entry_.pathgroup_;
}
void SLAFObject::set_allocated_iproute(::service_layer::SLAFIPRoute* iproute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (iproute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFIPRoute>::GetOwningArena(iproute);
    if (message_arena != submessage_arena) {
      iproute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iproute, submessage_arena);
    }
    set_has_iproute();
    entry_.iproute_ = iproute;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.IPRoute)
}
void SLAFObject::set_allocated_mplslabel(::service_layer::SLMplsEntry* mplslabel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (mplslabel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLMplsEntry>::GetOwningArena(mplslabel);
    if (message_arena != submessage_arena) {
      mplslabel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mplslabel, submessage_arena);
    }
    set_has_mplslabel();
    entry_.mplslabel_ = mplslabel;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.MplsLabel)
}
void SLAFObject::set_allocated_pathgroup(::service_layer::SLPathGroup* pathgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (pathgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLPathGroup>::GetOwningArena(pathgroup);
    if (message_arena != submessage_arena) {
      pathgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathgroup, submessage_arena);
    }
    set_has_pathgroup();
    entry_.pathgroup_ = pathgroup;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.PathGroup)
}
SLAFObject::SLAFObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFObject)
}
SLAFObject::SLAFObject(const SLAFObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kIPRoute: {
      _internal_mutable_iproute()->::service_layer::SLAFIPRoute::MergeFrom(from._internal_iproute());
      break;
    }
    case kMplsLabel: {
      _internal_mutable_mplslabel()->::service_layer::SLMplsEntry::MergeFrom(from._internal_mplslabel());
      break;
    }
    case kPathGroup: {
      _internal_mutable_pathgroup()->::service_layer::SLPathGroup::MergeFrom(from._internal_pathgroup());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFObject)
}

inline void SLAFObject::SharedCtor() {
clear_has_entry();
}

SLAFObject::~SLAFObject() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLAFObject::ArenaDtor(void* object) {
  SLAFObject* _this = reinterpret_cast< SLAFObject* >(object);
  (void)_this;
}
void SLAFObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFObject::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFObject)
  switch (entry_case()) {
    case kIPRoute: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.iproute_;
      }
      break;
    }
    case kMplsLabel: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.mplslabel_;
      }
      break;
    }
    case kPathGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.pathgroup_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLAFObject::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFIPRoute IPRoute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iproute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLMplsEntry MplsLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplslabel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPathGroup PathGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFIPRoute IPRoute = 1;
  if (_internal_has_iproute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iproute(this), target, stream);
  }

  // .service_layer.SLMplsEntry MplsLabel = 2;
  if (_internal_has_mplslabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mplslabel(this), target, stream);
  }

  // .service_layer.SLPathGroup PathGroup = 3;
  if (_internal_has_pathgroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pathgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFObject)
  return target;
}

size_t SLAFObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .service_layer.SLAFIPRoute IPRoute = 1;
    case kIPRoute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.iproute_);
      break;
    }
    // .service_layer.SLMplsEntry MplsLabel = 2;
    case kMplsLabel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.mplslabel_);
      break;
    }
    // .service_layer.SLPathGroup PathGroup = 3;
    case kPathGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.pathgroup_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFObject::GetClassData() const { return &_class_data_; }

void SLAFObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFObject *>(to)->MergeFrom(
      static_cast<const SLAFObject &>(from));
}


void SLAFObject::MergeFrom(const SLAFObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kIPRoute: {
      _internal_mutable_iproute()->::service_layer::SLAFIPRoute::MergeFrom(from._internal_iproute());
      break;
    }
    case kMplsLabel: {
      _internal_mutable_mplslabel()->::service_layer::SLMplsEntry::MergeFrom(from._internal_mplslabel());
      break;
    }
    case kPathGroup: {
      _internal_mutable_pathgroup()->::service_layer::SLPathGroup::MergeFrom(from._internal_pathgroup());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFObject::CopyFrom(const SLAFObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFObject::IsInitialized() const {
  return true;
}

void SLAFObject::InternalSwap(SLAFObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[12]);
}

// ===================================================================

class SLAFOpMsg::_Internal {
 public:
  static const ::service_layer::SLAFObject& afobject(const SLAFOpMsg* msg);
};

const ::service_layer::SLAFObject&
SLAFOpMsg::_Internal::afobject(const SLAFOpMsg* msg) {
  return *msg->afobject_;
}
SLAFOpMsg::SLAFOpMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ackpermits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFOpMsg)
}
SLAFOpMsg::SLAFOpMsg(const SLAFOpMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ackpermits_(from.ackpermits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_afobject()) {
    afobject_ = new ::service_layer::SLAFObject(*from.afobject_);
  } else {
    afobject_ = nullptr;
  }
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ackcadence_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(ackcadence_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFOpMsg)
}

inline void SLAFOpMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ackcadence_) -
    reinterpret_cast<char*>(&afobject_)) + sizeof(ackcadence_));
}

SLAFOpMsg::~SLAFOpMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFOpMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFOpMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete afobject_;
}

void SLAFOpMsg::ArenaDtor(void* object) {
  SLAFOpMsg* _this = reinterpret_cast< SLAFOpMsg* >(object);
  (void)_this;
}
void SLAFOpMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFOpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFOpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFOpMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ackpermits_.Clear();
  if (GetArenaForAllocation() == nullptr && afobject_ != nullptr) {
    delete afobject_;
  }
  afobject_ = nullptr;
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ackcadence_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(ackcadence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFOpMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFObject AFObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_afobject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 OperationID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRspACKType AckType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acktype(static_cast<::service_layer::SLRspACKType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRspACKPermit AckPermits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ackpermits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ackpermits(static_cast<::service_layer::SLRspACKPermit>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRspAckCadence AckCadence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ackcadence(static_cast<::service_layer::SLRspAckCadence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFOpMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFOpMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFObject AFObject = 1;
  if (this->_internal_has_afobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::afobject(this), target, stream);
  }

  // uint64 OperationID = 2;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operationid(), target);
  }

  // .service_layer.SLRspACKType AckType = 3;
  if (this->_internal_acktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_acktype(), target);
  }

  // repeated .service_layer.SLRspACKPermit AckPermits = 4;
  {
    int byte_size = _ackpermits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, ackpermits_, byte_size, target);
    }
  }

  // .service_layer.SLRspAckCadence AckCadence = 5;
  if (this->_internal_ackcadence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ackcadence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFOpMsg)
  return target;
}

size_t SLAFOpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFOpMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRspACKPermit AckPermits = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ackpermits_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ackpermits(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ackpermits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .service_layer.SLAFObject AFObject = 1;
  if (this->_internal_has_afobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *afobject_);
  }

  // uint64 OperationID = 2;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  // .service_layer.SLRspACKType AckType = 3;
  if (this->_internal_acktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_acktype());
  }

  // .service_layer.SLRspAckCadence AckCadence = 5;
  if (this->_internal_ackcadence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ackcadence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFOpMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFOpMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFOpMsg::GetClassData() const { return &_class_data_; }

void SLAFOpMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFOpMsg *>(to)->MergeFrom(
      static_cast<const SLAFOpMsg &>(from));
}


void SLAFOpMsg::MergeFrom(const SLAFOpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFOpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ackpermits_.MergeFrom(from.ackpermits_);
  if (from._internal_has_afobject()) {
    _internal_mutable_afobject()->::service_layer::SLAFObject::MergeFrom(from._internal_afobject());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from._internal_acktype() != 0) {
    _internal_set_acktype(from._internal_acktype());
  }
  if (from._internal_ackcadence() != 0) {
    _internal_set_ackcadence(from._internal_ackcadence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFOpMsg::CopyFrom(const SLAFOpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFOpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFOpMsg::IsInitialized() const {
  return true;
}

void SLAFOpMsg::InternalSwap(SLAFOpMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ackpermits_.InternalSwap(&other->ackpermits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFOpMsg, ackcadence_)
      + sizeof(SLAFOpMsg::ackcadence_)
      - PROTOBUF_FIELD_OFFSET(SLAFOpMsg, afobject_)>(
          reinterpret_cast<char*>(&afobject_),
          reinterpret_cast<char*>(&other->afobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFOpMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[13]);
}

// ===================================================================

class SLAFClientIDList::_Internal {
 public:
};

SLAFClientIDList::SLAFClientIDList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  clientidlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFClientIDList)
}
SLAFClientIDList::SLAFClientIDList(const SLAFClientIDList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clientidlist_(from.clientidlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFClientIDList)
}

inline void SLAFClientIDList::SharedCtor() {
}

SLAFClientIDList::~SLAFClientIDList() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFClientIDList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFClientIDList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLAFClientIDList::ArenaDtor(void* object) {
  SLAFClientIDList* _this = reinterpret_cast< SLAFClientIDList* >(object);
  (void)_this;
}
void SLAFClientIDList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFClientIDList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFClientIDList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFClientIDList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientidlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFClientIDList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 ClientIDList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_clientidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_clientidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFClientIDList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFClientIDList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ClientIDList = 1;
  {
    int byte_size = _clientidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_clientidlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFClientIDList)
  return target;
}

size_t SLAFClientIDList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFClientIDList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ClientIDList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->clientidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _clientidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFClientIDList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFClientIDList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFClientIDList::GetClassData() const { return &_class_data_; }

void SLAFClientIDList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFClientIDList *>(to)->MergeFrom(
      static_cast<const SLAFClientIDList &>(from));
}


void SLAFClientIDList::MergeFrom(const SLAFClientIDList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFClientIDList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  clientidlist_.MergeFrom(from.clientidlist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFClientIDList::CopyFrom(const SLAFClientIDList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFClientIDList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFClientIDList::IsInitialized() const {
  return true;
}

void SLAFClientIDList::InternalSwap(SLAFClientIDList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  clientidlist_.InternalSwap(&other->clientidlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFClientIDList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[14]);
}

// ===================================================================

class SLTableTypeList::_Internal {
 public:
};

SLTableTypeList::SLTableTypeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLTableTypeList)
}
SLTableTypeList::SLTableTypeList(const SLTableTypeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_(from.table_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLTableTypeList)
}

inline void SLTableTypeList::SharedCtor() {
}

SLTableTypeList::~SLTableTypeList() {
  // @@protoc_insertion_point(destructor:service_layer.SLTableTypeList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLTableTypeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLTableTypeList::ArenaDtor(void* object) {
  SLTableTypeList* _this = reinterpret_cast< SLTableTypeList* >(object);
  (void)_this;
}
void SLTableTypeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLTableTypeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLTableTypeList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLTableTypeList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLTableTypeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLTableType Table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_table(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLTableTypeList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLTableTypeList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLTableType Table = 1;
  {
    int byte_size = _table_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, table_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLTableTypeList)
  return target;
}

size_t SLTableTypeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLTableTypeList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLTableType Table = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_table_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_table(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLTableTypeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLTableTypeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLTableTypeList::GetClassData() const { return &_class_data_; }

void SLTableTypeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLTableTypeList *>(to)->MergeFrom(
      static_cast<const SLTableTypeList &>(from));
}


void SLTableTypeList::MergeFrom(const SLTableTypeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLTableTypeList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLTableTypeList::CopyFrom(const SLTableTypeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLTableTypeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLTableTypeList::IsInitialized() const {
  return true;
}

void SLTableTypeList::InternalSwap(SLTableTypeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_.InternalSwap(&other->table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLTableTypeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[15]);
}

// ===================================================================

class SLAFObjectKey::_Internal {
 public:
  static const ::service_layer::SLRoutePrefix& iprouteprefix(const SLAFObjectKey* msg);
  static const ::service_layer::SLMplsEntryKey& mplslabel(const SLAFObjectKey* msg);
  static const ::service_layer::SLObjectId& pathgroupid(const SLAFObjectKey* msg);
};

const ::service_layer::SLRoutePrefix&
SLAFObjectKey::_Internal::iprouteprefix(const SLAFObjectKey* msg) {
  return *msg->key_.iprouteprefix_;
}
const ::service_layer::SLMplsEntryKey&
SLAFObjectKey::_Internal::mplslabel(const SLAFObjectKey* msg) {
  return *msg->key_.mplslabel_;
}
const ::service_layer::SLObjectId&
SLAFObjectKey::_Internal::pathgroupid(const SLAFObjectKey* msg) {
  return *msg->key_.pathgroupid_;
}
void SLAFObjectKey::set_allocated_iprouteprefix(::service_layer::SLRoutePrefix* iprouteprefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (iprouteprefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iprouteprefix));
    if (message_arena != submessage_arena) {
      iprouteprefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iprouteprefix, submessage_arena);
    }
    set_has_iprouteprefix();
    key_.iprouteprefix_ = iprouteprefix;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObjectKey.IPRoutePrefix)
}
void SLAFObjectKey::clear_iprouteprefix() {
  if (_internal_has_iprouteprefix()) {
    if (GetArenaForAllocation() == nullptr) {
      delete key_.iprouteprefix_;
    }
    clear_has_key();
  }
}
void SLAFObjectKey::set_allocated_mplslabel(::service_layer::SLMplsEntryKey* mplslabel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (mplslabel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLMplsEntryKey>::GetOwningArena(mplslabel);
    if (message_arena != submessage_arena) {
      mplslabel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mplslabel, submessage_arena);
    }
    set_has_mplslabel();
    key_.mplslabel_ = mplslabel;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObjectKey.MplsLabel)
}
void SLAFObjectKey::set_allocated_pathgroupid(::service_layer::SLObjectId* pathgroupid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_key();
  if (pathgroupid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pathgroupid));
    if (message_arena != submessage_arena) {
      pathgroupid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathgroupid, submessage_arena);
    }
    set_has_pathgroupid();
    key_.pathgroupid_ = pathgroupid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObjectKey.PathGroupId)
}
void SLAFObjectKey::clear_pathgroupid() {
  if (_internal_has_pathgroupid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete key_.pathgroupid_;
    }
    clear_has_key();
  }
}
SLAFObjectKey::SLAFObjectKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFObjectKey)
}
SLAFObjectKey::SLAFObjectKey(const SLAFObjectKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_key();
  switch (from.key_case()) {
    case kIPRoutePrefix: {
      _internal_mutable_iprouteprefix()->::service_layer::SLRoutePrefix::MergeFrom(from._internal_iprouteprefix());
      break;
    }
    case kMplsLabel: {
      _internal_mutable_mplslabel()->::service_layer::SLMplsEntryKey::MergeFrom(from._internal_mplslabel());
      break;
    }
    case kPathGroupId: {
      _internal_mutable_pathgroupid()->::service_layer::SLObjectId::MergeFrom(from._internal_pathgroupid());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFObjectKey)
}

inline void SLAFObjectKey::SharedCtor() {
clear_has_key();
}

SLAFObjectKey::~SLAFObjectKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFObjectKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFObjectKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_key()) {
    clear_key();
  }
}

void SLAFObjectKey::ArenaDtor(void* object) {
  SLAFObjectKey* _this = reinterpret_cast< SLAFObjectKey* >(object);
  (void)_this;
}
void SLAFObjectKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFObjectKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFObjectKey::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFObjectKey)
  switch (key_case()) {
    case kIPRoutePrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete key_.iprouteprefix_;
      }
      break;
    }
    case kMplsLabel: {
      if (GetArenaForAllocation() == nullptr) {
        delete key_.mplslabel_;
      }
      break;
    }
    case kPathGroupId: {
      if (GetArenaForAllocation() == nullptr) {
        delete key_.pathgroupid_;
      }
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void SLAFObjectKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFObjectKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFObjectKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRoutePrefix IPRoutePrefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iprouteprefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLMplsEntryKey MplsLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplslabel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLObjectId PathGroupId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroupid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFObjectKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFObjectKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRoutePrefix IPRoutePrefix = 1;
  if (_internal_has_iprouteprefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iprouteprefix(this), target, stream);
  }

  // .service_layer.SLMplsEntryKey MplsLabel = 2;
  if (_internal_has_mplslabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mplslabel(this), target, stream);
  }

  // .service_layer.SLObjectId PathGroupId = 3;
  if (_internal_has_pathgroupid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pathgroupid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFObjectKey)
  return target;
}

size_t SLAFObjectKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFObjectKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (key_case()) {
    // .service_layer.SLRoutePrefix IPRoutePrefix = 1;
    case kIPRoutePrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.iprouteprefix_);
      break;
    }
    // .service_layer.SLMplsEntryKey MplsLabel = 2;
    case kMplsLabel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.mplslabel_);
      break;
    }
    // .service_layer.SLObjectId PathGroupId = 3;
    case kPathGroupId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.pathgroupid_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFObjectKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFObjectKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFObjectKey::GetClassData() const { return &_class_data_; }

void SLAFObjectKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFObjectKey *>(to)->MergeFrom(
      static_cast<const SLAFObjectKey &>(from));
}


void SLAFObjectKey::MergeFrom(const SLAFObjectKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFObjectKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.key_case()) {
    case kIPRoutePrefix: {
      _internal_mutable_iprouteprefix()->::service_layer::SLRoutePrefix::MergeFrom(from._internal_iprouteprefix());
      break;
    }
    case kMplsLabel: {
      _internal_mutable_mplslabel()->::service_layer::SLMplsEntryKey::MergeFrom(from._internal_mplslabel());
      break;
    }
    case kPathGroupId: {
      _internal_mutable_pathgroupid()->::service_layer::SLObjectId::MergeFrom(from._internal_pathgroupid());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFObjectKey::CopyFrom(const SLAFObjectKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFObjectKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFObjectKey::IsInitialized() const {
  return true;
}

void SLAFObjectKey::InternalSwap(SLAFObjectKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFObjectKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[16]);
}

// ===================================================================

class SLAFGetMatch::_Internal {
 public:
  static const ::service_layer::SLAFObjectKey& key(const SLAFGetMatch* msg);
};

const ::service_layer::SLAFObjectKey&
SLAFGetMatch::_Internal::key(const SLAFGetMatch* msg) {
  return *msg->entry_.key_;
}
void SLAFGetMatch::set_allocated_key(::service_layer::SLAFObjectKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFObjectKey>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    entry_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFGetMatch.Key)
}
SLAFGetMatch::SLAFGetMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFGetMatch)
}
SLAFGetMatch::SLAFGetMatch(const SLAFGetMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kKey: {
      _internal_mutable_key()->::service_layer::SLAFObjectKey::MergeFrom(from._internal_key());
      break;
    }
    case kPathGroupRegex: {
      _internal_set_pathgroupregex(from._internal_pathgroupregex());
      break;
    }
    case kVxlanVniId: {
      _internal_set_vxlanvniid(from._internal_vxlanvniid());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFGetMatch)
}

inline void SLAFGetMatch::SharedCtor() {
clear_has_entry();
}

SLAFGetMatch::~SLAFGetMatch() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFGetMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFGetMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLAFGetMatch::ArenaDtor(void* object) {
  SLAFGetMatch* _this = reinterpret_cast< SLAFGetMatch* >(object);
  (void)_this;
}
void SLAFGetMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFGetMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFGetMatch::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFGetMatch)
  switch (entry_case()) {
    case kKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.key_;
      }
      break;
    }
    case kPathGroupRegex: {
      entry_.pathgroupregex_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVxlanVniId: {
      // No need to clear
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLAFGetMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFGetMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFGetMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFObjectKey Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PathGroupRegex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pathgroupregex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFGetMatch.PathGroupRegex"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 VxlanVniId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_vxlanvniid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFGetMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFGetMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFObjectKey Key = 1;
  if (_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // string PathGroupRegex = 2;
  if (_internal_has_pathgroupregex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathgroupregex().data(), static_cast<int>(this->_internal_pathgroupregex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFGetMatch.PathGroupRegex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pathgroupregex(), target);
  }

  // uint32 VxlanVniId = 3;
  if (_internal_has_vxlanvniid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vxlanvniid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFGetMatch)
  return target;
}

size_t SLAFGetMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFGetMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .service_layer.SLAFObjectKey Key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.key_);
      break;
    }
    // string PathGroupRegex = 2;
    case kPathGroupRegex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pathgroupregex());
      break;
    }
    // uint32 VxlanVniId = 3;
    case kVxlanVniId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vxlanvniid());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFGetMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFGetMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFGetMatch::GetClassData() const { return &_class_data_; }

void SLAFGetMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFGetMatch *>(to)->MergeFrom(
      static_cast<const SLAFGetMatch &>(from));
}


void SLAFGetMatch::MergeFrom(const SLAFGetMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFGetMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kKey: {
      _internal_mutable_key()->::service_layer::SLAFObjectKey::MergeFrom(from._internal_key());
      break;
    }
    case kPathGroupRegex: {
      _internal_set_pathgroupregex(from._internal_pathgroupregex());
      break;
    }
    case kVxlanVniId: {
      _internal_set_vxlanvniid(from._internal_vxlanvniid());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFGetMatch::CopyFrom(const SLAFGetMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFGetMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFGetMatch::IsInitialized() const {
  return true;
}

void SLAFGetMatch::InternalSwap(SLAFGetMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFGetMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[17]);
}

// ===================================================================

class SLAFGetMatchList::_Internal {
 public:
};

SLAFGetMatchList::SLAFGetMatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFGetMatchList)
}
SLAFGetMatchList::SLAFGetMatchList(const SLAFGetMatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_(from.match_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFGetMatchList)
}

inline void SLAFGetMatchList::SharedCtor() {
}

SLAFGetMatchList::~SLAFGetMatchList() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFGetMatchList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFGetMatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLAFGetMatchList::ArenaDtor(void* object) {
  SLAFGetMatchList* _this = reinterpret_cast< SLAFGetMatchList* >(object);
  (void)_this;
}
void SLAFGetMatchList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFGetMatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFGetMatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFGetMatchList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFGetMatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLAFGetMatch Match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFGetMatchList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFGetMatchList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLAFGetMatch Match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_match(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFGetMatchList)
  return target;
}

size_t SLAFGetMatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFGetMatchList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFGetMatch Match = 1;
  total_size += 1UL * this->_internal_match_size();
  for (const auto& msg : this->match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFGetMatchList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFGetMatchList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFGetMatchList::GetClassData() const { return &_class_data_; }

void SLAFGetMatchList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFGetMatchList *>(to)->MergeFrom(
      static_cast<const SLAFGetMatchList &>(from));
}


void SLAFGetMatchList::MergeFrom(const SLAFGetMatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFGetMatchList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFGetMatchList::CopyFrom(const SLAFGetMatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFGetMatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFGetMatchList::IsInitialized() const {
  return true;
}

void SLAFGetMatchList::InternalSwap(SLAFGetMatchList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_.InternalSwap(&other->match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFGetMatchList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[18]);
}

// ===================================================================

class SLAFGetMsg::_Internal {
 public:
  static const ::service_layer::SLAFClientIDList& clientidlist(const SLAFGetMsg* msg);
  static const ::service_layer::SLTableTypeList& tablelist(const SLAFGetMsg* msg);
  static const ::service_layer::SLAFGetMatchList& routematchlist(const SLAFGetMsg* msg);
};

const ::service_layer::SLAFClientIDList&
SLAFGetMsg::_Internal::clientidlist(const SLAFGetMsg* msg) {
  return *msg->client_.clientidlist_;
}
const ::service_layer::SLTableTypeList&
SLAFGetMsg::_Internal::tablelist(const SLAFGetMsg* msg) {
  return *msg->match_.tablelist_;
}
const ::service_layer::SLAFGetMatchList&
SLAFGetMsg::_Internal::routematchlist(const SLAFGetMsg* msg) {
  return *msg->match_.routematchlist_;
}
void SLAFGetMsg::set_allocated_clientidlist(::service_layer::SLAFClientIDList* clientidlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_client();
  if (clientidlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFClientIDList>::GetOwningArena(clientidlist);
    if (message_arena != submessage_arena) {
      clientidlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientidlist, submessage_arena);
    }
    set_has_clientidlist();
    client_.clientidlist_ = clientidlist;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFGetMsg.ClientIDList)
}
void SLAFGetMsg::set_allocated_tablelist(::service_layer::SLTableTypeList* tablelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (tablelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLTableTypeList>::GetOwningArena(tablelist);
    if (message_arena != submessage_arena) {
      tablelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tablelist, submessage_arena);
    }
    set_has_tablelist();
    match_.tablelist_ = tablelist;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFGetMsg.TableList)
}
void SLAFGetMsg::set_allocated_routematchlist(::service_layer::SLAFGetMatchList* routematchlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (routematchlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFGetMatchList>::GetOwningArena(routematchlist);
    if (message_arena != submessage_arena) {
      routematchlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routematchlist, submessage_arena);
    }
    set_has_routematchlist();
    match_.routematchlist_ = routematchlist;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFGetMsg.RouteMatchList)
}
SLAFGetMsg::SLAFGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFGetMsg)
}
SLAFGetMsg::SLAFGetMsg(const SLAFGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  clear_has_client();
  switch (from.client_case()) {
    case kClientIDList: {
      _internal_mutable_clientidlist()->::service_layer::SLAFClientIDList::MergeFrom(from._internal_clientidlist());
      break;
    }
    case kAllClients: {
      _internal_set_allclients(from._internal_allclients());
      break;
    }
    case CLIENT_NOT_SET: {
      break;
    }
  }
  clear_has_match();
  switch (from.match_case()) {
    case kTableList: {
      _internal_mutable_tablelist()->::service_layer::SLTableTypeList::MergeFrom(from._internal_tablelist());
      break;
    }
    case kRouteMatchList: {
      _internal_mutable_routematchlist()->::service_layer::SLAFGetMatchList::MergeFrom(from._internal_routematchlist());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFGetMsg)
}

inline void SLAFGetMsg::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_client();
clear_has_match();
}

SLAFGetMsg::~SLAFGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFGetMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_client()) {
    clear_client();
  }
  if (has_match()) {
    clear_match();
  }
}

void SLAFGetMsg::ArenaDtor(void* object) {
  SLAFGetMsg* _this = reinterpret_cast< SLAFGetMsg* >(object);
  (void)_this;
}
void SLAFGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFGetMsg::clear_client() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFGetMsg)
  switch (client_case()) {
    case kClientIDList: {
      if (GetArenaForAllocation() == nullptr) {
        delete client_.clientidlist_;
      }
      break;
    }
    case kAllClients: {
      // No need to clear
      break;
    }
    case CLIENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLIENT_NOT_SET;
}

void SLAFGetMsg::clear_match() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFGetMsg)
  switch (match_case()) {
    case kTableList: {
      if (GetArenaForAllocation() == nullptr) {
        delete match_.tablelist_;
      }
      break;
    }
    case kRouteMatchList: {
      if (GetArenaForAllocation() == nullptr) {
        delete match_.routematchlist_;
      }
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MATCH_NOT_SET;
}


void SLAFGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFGetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  clear_client();
  clear_match();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFGetMsg.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFClientIDList ClientIDList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientidlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool AllClients = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_allclients(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLTableTypeList TableList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFGetMatchList RouteMatchList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_routematchlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFGetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFGetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFGetMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // .service_layer.SLAFClientIDList ClientIDList = 2;
  if (_internal_has_clientidlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clientidlist(this), target, stream);
  }

  // bool AllClients = 3;
  if (_internal_has_allclients()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allclients(), target);
  }

  // .service_layer.SLTableTypeList TableList = 4;
  if (_internal_has_tablelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tablelist(this), target, stream);
  }

  // .service_layer.SLAFGetMatchList RouteMatchList = 5;
  if (_internal_has_routematchlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::routematchlist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFGetMsg)
  return target;
}

size_t SLAFGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFGetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  switch (client_case()) {
    // .service_layer.SLAFClientIDList ClientIDList = 2;
    case kClientIDList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_.clientidlist_);
      break;
    }
    // bool AllClients = 3;
    case kAllClients: {
      total_size += 1 + 1;
      break;
    }
    case CLIENT_NOT_SET: {
      break;
    }
  }
  switch (match_case()) {
    // .service_layer.SLTableTypeList TableList = 4;
    case kTableList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_.tablelist_);
      break;
    }
    // .service_layer.SLAFGetMatchList RouteMatchList = 5;
    case kRouteMatchList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_.routematchlist_);
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFGetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFGetMsg::GetClassData() const { return &_class_data_; }

void SLAFGetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFGetMsg *>(to)->MergeFrom(
      static_cast<const SLAFGetMsg &>(from));
}


void SLAFGetMsg::MergeFrom(const SLAFGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  switch (from.client_case()) {
    case kClientIDList: {
      _internal_mutable_clientidlist()->::service_layer::SLAFClientIDList::MergeFrom(from._internal_clientidlist());
      break;
    }
    case kAllClients: {
      _internal_set_allclients(from._internal_allclients());
      break;
    }
    case CLIENT_NOT_SET: {
      break;
    }
  }
  switch (from.match_case()) {
    case kTableList: {
      _internal_mutable_tablelist()->::service_layer::SLTableTypeList::MergeFrom(from._internal_tablelist());
      break;
    }
    case kRouteMatchList: {
      _internal_mutable_routematchlist()->::service_layer::SLAFGetMatchList::MergeFrom(from._internal_routematchlist());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFGetMsg::CopyFrom(const SLAFGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFGetMsg::IsInitialized() const {
  return true;
}

void SLAFGetMsg::InternalSwap(SLAFGetMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  swap(client_, other->client_);
  swap(match_, other->match_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[19]);
}

// ===================================================================

class SLAFGetMsgRspEntry::_Internal {
 public:
  static const ::service_layer::SLAFOpMsg& afopmsg(const SLAFGetMsgRspEntry* msg);
};

const ::service_layer::SLAFOpMsg&
SLAFGetMsgRspEntry::_Internal::afopmsg(const SLAFGetMsgRspEntry* msg) {
  return *msg->afopmsg_;
}
SLAFGetMsgRspEntry::SLAFGetMsgRspEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFGetMsgRspEntry)
}
SLAFGetMsgRspEntry::SLAFGetMsgRspEntry(const SLAFGetMsgRspEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_afopmsg()) {
    afopmsg_ = new ::service_layer::SLAFOpMsg(*from.afopmsg_);
  } else {
    afopmsg_ = nullptr;
  }
  fibstatus_ = from.fibstatus_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFGetMsgRspEntry)
}

inline void SLAFGetMsgRspEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afopmsg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fibstatus_) -
    reinterpret_cast<char*>(&afopmsg_)) + sizeof(fibstatus_));
}

SLAFGetMsgRspEntry::~SLAFGetMsgRspEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFGetMsgRspEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFGetMsgRspEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete afopmsg_;
}

void SLAFGetMsgRspEntry::ArenaDtor(void* object) {
  SLAFGetMsgRspEntry* _this = reinterpret_cast< SLAFGetMsgRspEntry* >(object);
  (void)_this;
}
void SLAFGetMsgRspEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFGetMsgRspEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFGetMsgRspEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFGetMsgRspEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && afopmsg_ != nullptr) {
    delete afopmsg_;
  }
  afopmsg_ = nullptr;
  fibstatus_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFGetMsgRspEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFOpMsg AFOpMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_afopmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFFibStatus FIBStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fibstatus(static_cast<::service_layer::SLAFFibStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFGetMsgRspEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFGetMsgRspEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFOpMsg AFOpMsg = 1;
  if (this->_internal_has_afopmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::afopmsg(this), target, stream);
  }

  // .service_layer.SLAFFibStatus FIBStatus = 2;
  if (this->_internal_fibstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fibstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFGetMsgRspEntry)
  return target;
}

size_t SLAFGetMsgRspEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFGetMsgRspEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLAFOpMsg AFOpMsg = 1;
  if (this->_internal_has_afopmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *afopmsg_);
  }

  // .service_layer.SLAFFibStatus FIBStatus = 2;
  if (this->_internal_fibstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fibstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFGetMsgRspEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFGetMsgRspEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFGetMsgRspEntry::GetClassData() const { return &_class_data_; }

void SLAFGetMsgRspEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFGetMsgRspEntry *>(to)->MergeFrom(
      static_cast<const SLAFGetMsgRspEntry &>(from));
}


void SLAFGetMsgRspEntry::MergeFrom(const SLAFGetMsgRspEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFGetMsgRspEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_afopmsg()) {
    _internal_mutable_afopmsg()->::service_layer::SLAFOpMsg::MergeFrom(from._internal_afopmsg());
  }
  if (from._internal_fibstatus() != 0) {
    _internal_set_fibstatus(from._internal_fibstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFGetMsgRspEntry::CopyFrom(const SLAFGetMsgRspEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFGetMsgRspEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFGetMsgRspEntry::IsInitialized() const {
  return true;
}

void SLAFGetMsgRspEntry::InternalSwap(SLAFGetMsgRspEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFGetMsgRspEntry, fibstatus_)
      + sizeof(SLAFGetMsgRspEntry::fibstatus_)
      - PROTOBUF_FIELD_OFFSET(SLAFGetMsgRspEntry, afopmsg_)>(
          reinterpret_cast<char*>(&afopmsg_),
          reinterpret_cast<char*>(&other->afopmsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFGetMsgRspEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[20]);
}

// ===================================================================

class SLAFGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLAFGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLAFGetMsgRsp::_Internal::errstatus(const SLAFGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLAFGetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLAFGetMsgRsp::SLAFGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  aflist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFGetMsgRsp)
}
SLAFGetMsgRsp::SLAFGetMsgRsp(const SLAFGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aflist_(from.aflist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  clientid_ = from.clientid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFGetMsgRsp)
}

inline void SLAFGetMsgRsp::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(clientid_));
}

SLAFGetMsgRsp::~SLAFGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLAFGetMsgRsp::ArenaDtor(void* object) {
  SLAFGetMsgRsp* _this = reinterpret_cast< SLAFGetMsgRsp* >(object);
  (void)_this;
}
void SLAFGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aflist_.Clear();
  vrfname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  clientid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFGetMsgRsp.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ClientID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFGetMsgRspEntry AFList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aflist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFGetMsgRsp.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // uint64 ClientID = 3;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_clientid(), target);
  }

  // repeated .service_layer.SLAFGetMsgRspEntry AFList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aflist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_aflist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFGetMsgRsp)
  return target;
}

size_t SLAFGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFGetMsgRspEntry AFList = 4;
  total_size += 1UL * this->_internal_aflist_size();
  for (const auto& msg : this->aflist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 ClientID = 3;
  if (this->_internal_clientid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLAFGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLAFGetMsgRsp &>(from));
}


void SLAFGetMsgRsp::MergeFrom(const SLAFGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  aflist_.MergeFrom(from.aflist_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFGetMsgRsp::CopyFrom(const SLAFGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFGetMsgRsp::IsInitialized() const {
  return true;
}

void SLAFGetMsgRsp::InternalSwap(SLAFGetMsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  aflist_.InternalSwap(&other->aflist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFGetMsgRsp, clientid_)
      + sizeof(SLAFGetMsgRsp::clientid_)
      - PROTOBUF_FIELD_OFFSET(SLAFGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[21]);
}

// ===================================================================

class SLAFMsg::_Internal {
 public:
};

SLAFMsg::SLAFMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  oplist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFMsg)
}
SLAFMsg::SLAFMsg(const SLAFMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oplist_(from.oplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFMsg)
}

inline void SLAFMsg::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oper_ = 0;
}

SLAFMsg::~SLAFMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFMsg::ArenaDtor(void* object) {
  SLAFMsg* _this = reinterpret_cast< SLAFMsg* >(object);
  (void)_this;
}
void SLAFMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oplist_.Clear();
  vrfname_.ClearToEmpty();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFMsg.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFOpMsg OpList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLAFOpMsg OpList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_oplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFMsg)
  return target;
}

size_t SLAFMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFOpMsg OpList = 3;
  total_size += 1UL * this->_internal_oplist_size();
  for (const auto& msg : this->oplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFMsg::GetClassData() const { return &_class_data_; }

void SLAFMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFMsg *>(to)->MergeFrom(
      static_cast<const SLAFMsg &>(from));
}


void SLAFMsg::MergeFrom(const SLAFMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  oplist_.MergeFrom(from.oplist_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFMsg::CopyFrom(const SLAFMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFMsg::IsInitialized() const {
  return true;
}

void SLAFMsg::InternalSwap(SLAFMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  oplist_.InternalSwap(&other->oplist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[22]);
}

// ===================================================================

class SLAFRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& status(const SLAFRes* msg);
  static const ::service_layer::SLAFObjectKey& key(const SLAFRes* msg);
};

const ::service_layer::SLErrorStatus&
SLAFRes::_Internal::status(const SLAFRes* msg) {
  return *msg->status_;
}
const ::service_layer::SLAFObjectKey&
SLAFRes::_Internal::key(const SLAFRes* msg) {
  return *msg->key_;
}
void SLAFRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SLAFRes::SLAFRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFRes)
}
SLAFRes::SLAFRes(const SLAFRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errorstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errorstring().empty()) {
    errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorstring(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::service_layer::SLErrorStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLAFObjectKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fibstatus_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(fibstatus_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFRes)
}

inline void SLAFRes::SharedCtor() {
errorstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errorstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fibstatus_) -
    reinterpret_cast<char*>(&status_)) + sizeof(fibstatus_));
}

SLAFRes::~SLAFRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errorstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete key_;
}

void SLAFRes::ArenaDtor(void* object) {
  SLAFRes* _this = reinterpret_cast< SLAFRes* >(object);
  (void)_this;
}
void SLAFRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorstring_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fibstatus_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(fibstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFObjectKey Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 OperationID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFFibStatus FIBStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fibstatus(static_cast<::service_layer::SLAFFibStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string ErrorString = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_errorstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFRes.ErrorString"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus Status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .service_layer.SLAFObjectKey Key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // uint64 OperationID = 3;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_operationid(), target);
  }

  // .service_layer.SLAFFibStatus FIBStatus = 4;
  if (this->_internal_fibstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fibstatus(), target);
  }

  // string ErrorString = 5;
  if (!this->_internal_errorstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errorstring().data(), static_cast<int>(this->_internal_errorstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFRes.ErrorString");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_errorstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFRes)
  return target;
}

size_t SLAFRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ErrorString = 5;
  if (!this->_internal_errorstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errorstring());
  }

  // .service_layer.SLErrorStatus Status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .service_layer.SLAFObjectKey Key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint64 OperationID = 3;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  // .service_layer.SLAFFibStatus FIBStatus = 4;
  if (this->_internal_fibstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fibstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFRes::GetClassData() const { return &_class_data_; }

void SLAFRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFRes *>(to)->MergeFrom(
      static_cast<const SLAFRes &>(from));
}


void SLAFRes::MergeFrom(const SLAFRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errorstring().empty()) {
    _internal_set_errorstring(from._internal_errorstring());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::service_layer::SLErrorStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLAFObjectKey::MergeFrom(from._internal_key());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from._internal_fibstatus() != 0) {
    _internal_set_fibstatus(from._internal_fibstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFRes::CopyFrom(const SLAFRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFRes::IsInitialized() const {
  return true;
}

void SLAFRes::InternalSwap(SLAFRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errorstring_, lhs_arena,
      &other->errorstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFRes, fibstatus_)
      + sizeof(SLAFRes::fibstatus_)
      - PROTOBUF_FIELD_OFFSET(SLAFRes, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[23]);
}

// ===================================================================

class SLAFMsgRsp::_Internal {
 public:
};

SLAFMsgRsp::SLAFMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFMsgRsp)
}
SLAFMsgRsp::SLAFMsgRsp(const SLAFMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFMsgRsp)
}

inline void SLAFMsgRsp::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLAFMsgRsp::~SLAFMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFMsgRsp::ArenaDtor(void* object) {
  SLAFMsgRsp* _this = reinterpret_cast< SLAFMsgRsp* >(object);
  (void)_this;
}
void SLAFMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  vrfname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFMsgRsp.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFMsgRsp.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLAFRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFMsgRsp)
  return target;
}

size_t SLAFMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFMsgRsp::GetClassData() const { return &_class_data_; }

void SLAFMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFMsgRsp *>(to)->MergeFrom(
      static_cast<const SLAFMsgRsp &>(from));
}


void SLAFMsgRsp::MergeFrom(const SLAFMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFMsgRsp::CopyFrom(const SLAFMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFMsgRsp::IsInitialized() const {
  return true;
}

void SLAFMsgRsp::InternalSwap(SLAFMsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[24]);
}

// ===================================================================

class SLAFRedistRegMsg::_Internal {
 public:
};

SLAFRedistRegMsg::SLAFRedistRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFRedistRegMsg)
}
SLAFRedistRegMsg::SLAFRedistRegMsg(const SLAFRedistRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcproto().empty()) {
    srcproto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcproto(), 
      GetArenaForAllocation());
  }
  srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcprototag().empty()) {
    srcprototag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcprototag(), 
      GetArenaForAllocation());
  }
  table_ = from.table_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFRedistRegMsg)
}

inline void SLAFRedistRegMsg::SharedCtor() {
srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_ = 0;
}

SLAFRedistRegMsg::~SLAFRedistRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFRedistRegMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFRedistRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srcproto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcprototag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFRedistRegMsg::ArenaDtor(void* object) {
  SLAFRedistRegMsg* _this = reinterpret_cast< SLAFRedistRegMsg* >(object);
  (void)_this;
}
void SLAFRedistRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFRedistRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFRedistRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFRedistRegMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcproto_.ClearToEmpty();
  srcprototag_.ClearToEmpty();
  table_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFRedistRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SrcProto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_srcproto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFRedistRegMsg.SrcProto"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SrcProtoTag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcprototag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFRedistRegMsg.SrcProtoTag"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLTableType Table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFRedistRegMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFRedistRegMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcProto = 1;
  if (!this->_internal_srcproto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcproto().data(), static_cast<int>(this->_internal_srcproto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFRedistRegMsg.SrcProto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcproto(), target);
  }

  // string SrcProtoTag = 2;
  if (!this->_internal_srcprototag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcprototag().data(), static_cast<int>(this->_internal_srcprototag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFRedistRegMsg.SrcProtoTag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcprototag(), target);
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFRedistRegMsg)
  return target;
}

size_t SLAFRedistRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFRedistRegMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcProto = 1;
  if (!this->_internal_srcproto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcproto());
  }

  // string SrcProtoTag = 2;
  if (!this->_internal_srcprototag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcprototag());
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFRedistRegMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFRedistRegMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFRedistRegMsg::GetClassData() const { return &_class_data_; }

void SLAFRedistRegMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFRedistRegMsg *>(to)->MergeFrom(
      static_cast<const SLAFRedistRegMsg &>(from));
}


void SLAFRedistRegMsg::MergeFrom(const SLAFRedistRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFRedistRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srcproto().empty()) {
    _internal_set_srcproto(from._internal_srcproto());
  }
  if (!from._internal_srcprototag().empty()) {
    _internal_set_srcprototag(from._internal_srcprototag());
  }
  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFRedistRegMsg::CopyFrom(const SLAFRedistRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFRedistRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFRedistRegMsg::IsInitialized() const {
  return true;
}

void SLAFRedistRegMsg::InternalSwap(SLAFRedistRegMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcproto_, lhs_arena,
      &other->srcproto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcprototag_, lhs_arena,
      &other->srcprototag_, rhs_arena
  );
  swap(table_, other->table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFRedistRegMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[25]);
}

// ===================================================================

class SLAFNextHopRegKey_SLNextHopKey::_Internal {
 public:
  static const ::service_layer::SLRoutePrefix& nexthopip(const SLAFNextHopRegKey_SLNextHopKey* msg);
};

const ::service_layer::SLRoutePrefix&
SLAFNextHopRegKey_SLNextHopKey::_Internal::nexthopip(const SLAFNextHopRegKey_SLNextHopKey* msg) {
  return *msg->nexthopip_;
}
void SLAFNextHopRegKey_SLNextHopKey::clear_nexthopip() {
  if (GetArenaForAllocation() == nullptr && nexthopip_ != nullptr) {
    delete nexthopip_;
  }
  nexthopip_ = nullptr;
}
SLAFNextHopRegKey_SLNextHopKey::SLAFNextHopRegKey_SLNextHopKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNextHopRegKey.SLNextHopKey)
}
SLAFNextHopRegKey_SLNextHopKey::SLAFNextHopRegKey_SLNextHopKey(const SLAFNextHopRegKey_SLNextHopKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nexthopip()) {
    nexthopip_ = new ::service_layer::SLRoutePrefix(*from.nexthopip_);
  } else {
    nexthopip_ = nullptr;
  }
  ::memcpy(&exactmatch_, &from.exactmatch_,
    static_cast<size_t>(reinterpret_cast<char*>(&recurse_) -
    reinterpret_cast<char*>(&exactmatch_)) + sizeof(recurse_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNextHopRegKey.SLNextHopKey)
}

inline void SLAFNextHopRegKey_SLNextHopKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nexthopip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recurse_) -
    reinterpret_cast<char*>(&nexthopip_)) + sizeof(recurse_));
}

SLAFNextHopRegKey_SLNextHopKey::~SLAFNextHopRegKey_SLNextHopKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNextHopRegKey_SLNextHopKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nexthopip_;
}

void SLAFNextHopRegKey_SLNextHopKey::ArenaDtor(void* object) {
  SLAFNextHopRegKey_SLNextHopKey* _this = reinterpret_cast< SLAFNextHopRegKey_SLNextHopKey* >(object);
  (void)_this;
}
void SLAFNextHopRegKey_SLNextHopKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNextHopRegKey_SLNextHopKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNextHopRegKey_SLNextHopKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nexthopip_ != nullptr) {
    delete nexthopip_;
  }
  nexthopip_ = nullptr;
  ::memset(&exactmatch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recurse_) -
      reinterpret_cast<char*>(&exactmatch_)) + sizeof(recurse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNextHopRegKey_SLNextHopKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRoutePrefix NextHopIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ExactMatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          exactmatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool AllowDefault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          allowdefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Recurse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          recurse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNextHopRegKey_SLNextHopKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRoutePrefix NextHopIP = 1;
  if (this->_internal_has_nexthopip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nexthopip(this), target, stream);
  }

  // bool ExactMatch = 2;
  if (this->_internal_exactmatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_exactmatch(), target);
  }

  // bool AllowDefault = 3;
  if (this->_internal_allowdefault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allowdefault(), target);
  }

  // bool Recurse = 4;
  if (this->_internal_recurse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_recurse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  return target;
}

size_t SLAFNextHopRegKey_SLNextHopKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLRoutePrefix NextHopIP = 1;
  if (this->_internal_has_nexthopip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopip_);
  }

  // bool ExactMatch = 2;
  if (this->_internal_exactmatch() != 0) {
    total_size += 1 + 1;
  }

  // bool AllowDefault = 3;
  if (this->_internal_allowdefault() != 0) {
    total_size += 1 + 1;
  }

  // bool Recurse = 4;
  if (this->_internal_recurse() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNextHopRegKey_SLNextHopKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNextHopRegKey_SLNextHopKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNextHopRegKey_SLNextHopKey::GetClassData() const { return &_class_data_; }

void SLAFNextHopRegKey_SLNextHopKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNextHopRegKey_SLNextHopKey *>(to)->MergeFrom(
      static_cast<const SLAFNextHopRegKey_SLNextHopKey &>(from));
}


void SLAFNextHopRegKey_SLNextHopKey::MergeFrom(const SLAFNextHopRegKey_SLNextHopKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nexthopip()) {
    _internal_mutable_nexthopip()->::service_layer::SLRoutePrefix::MergeFrom(from._internal_nexthopip());
  }
  if (from._internal_exactmatch() != 0) {
    _internal_set_exactmatch(from._internal_exactmatch());
  }
  if (from._internal_allowdefault() != 0) {
    _internal_set_allowdefault(from._internal_allowdefault());
  }
  if (from._internal_recurse() != 0) {
    _internal_set_recurse(from._internal_recurse());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNextHopRegKey_SLNextHopKey::CopyFrom(const SLAFNextHopRegKey_SLNextHopKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNextHopRegKey.SLNextHopKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNextHopRegKey_SLNextHopKey::IsInitialized() const {
  return true;
}

void SLAFNextHopRegKey_SLNextHopKey::InternalSwap(SLAFNextHopRegKey_SLNextHopKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFNextHopRegKey_SLNextHopKey, recurse_)
      + sizeof(SLAFNextHopRegKey_SLNextHopKey::recurse_)
      - PROTOBUF_FIELD_OFFSET(SLAFNextHopRegKey_SLNextHopKey, nexthopip_)>(
          reinterpret_cast<char*>(&nexthopip_),
          reinterpret_cast<char*>(&other->nexthopip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNextHopRegKey_SLNextHopKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[26]);
}

// ===================================================================

class SLAFNextHopRegKey::_Internal {
 public:
  static const ::service_layer::SLAFNextHopRegKey_SLNextHopKey& nexthop(const SLAFNextHopRegKey* msg);
};

const ::service_layer::SLAFNextHopRegKey_SLNextHopKey&
SLAFNextHopRegKey::_Internal::nexthop(const SLAFNextHopRegKey* msg) {
  return *msg->nexthopkey_.nexthop_;
}
void SLAFNextHopRegKey::set_allocated_nexthop(::service_layer::SLAFNextHopRegKey_SLNextHopKey* nexthop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nexthopkey();
  if (nexthop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFNextHopRegKey_SLNextHopKey>::GetOwningArena(nexthop);
    if (message_arena != submessage_arena) {
      nexthop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthop, submessage_arena);
    }
    set_has_nexthop();
    nexthopkey_.nexthop_ = nexthop;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNextHopRegKey.NextHop)
}
SLAFNextHopRegKey::SLAFNextHopRegKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNextHopRegKey)
}
SLAFNextHopRegKey::SLAFNextHopRegKey(const SLAFNextHopRegKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_nexthopkey();
  switch (from.nexthopkey_case()) {
    case kNextHop: {
      _internal_mutable_nexthop()->::service_layer::SLAFNextHopRegKey_SLNextHopKey::MergeFrom(from._internal_nexthop());
      break;
    }
    case NEXTHOPKEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNextHopRegKey)
}

inline void SLAFNextHopRegKey::SharedCtor() {
clear_has_nexthopkey();
}

SLAFNextHopRegKey::~SLAFNextHopRegKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNextHopRegKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNextHopRegKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_nexthopkey()) {
    clear_nexthopkey();
  }
}

void SLAFNextHopRegKey::ArenaDtor(void* object) {
  SLAFNextHopRegKey* _this = reinterpret_cast< SLAFNextHopRegKey* >(object);
  (void)_this;
}
void SLAFNextHopRegKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNextHopRegKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNextHopRegKey::clear_nexthopkey() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFNextHopRegKey)
  switch (nexthopkey_case()) {
    case kNextHop: {
      if (GetArenaForAllocation() == nullptr) {
        delete nexthopkey_.nexthop_;
      }
      break;
    }
    case NEXTHOPKEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NEXTHOPKEY_NOT_SET;
}


void SLAFNextHopRegKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNextHopRegKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_nexthopkey();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNextHopRegKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFNextHopRegKey.SLNextHopKey NextHop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNextHopRegKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNextHopRegKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFNextHopRegKey.SLNextHopKey NextHop = 1;
  if (_internal_has_nexthop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nexthop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNextHopRegKey)
  return target;
}

size_t SLAFNextHopRegKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNextHopRegKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (nexthopkey_case()) {
    // .service_layer.SLAFNextHopRegKey.SLNextHopKey NextHop = 1;
    case kNextHop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nexthopkey_.nexthop_);
      break;
    }
    case NEXTHOPKEY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNextHopRegKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNextHopRegKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNextHopRegKey::GetClassData() const { return &_class_data_; }

void SLAFNextHopRegKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNextHopRegKey *>(to)->MergeFrom(
      static_cast<const SLAFNextHopRegKey &>(from));
}


void SLAFNextHopRegKey::MergeFrom(const SLAFNextHopRegKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNextHopRegKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.nexthopkey_case()) {
    case kNextHop: {
      _internal_mutable_nexthop()->::service_layer::SLAFNextHopRegKey_SLNextHopKey::MergeFrom(from._internal_nexthop());
      break;
    }
    case NEXTHOPKEY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNextHopRegKey::CopyFrom(const SLAFNextHopRegKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNextHopRegKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNextHopRegKey::IsInitialized() const {
  return true;
}

void SLAFNextHopRegKey::InternalSwap(SLAFNextHopRegKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nexthopkey_, other->nexthopkey_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNextHopRegKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[27]);
}

// ===================================================================

class SLAFNextHopRegMsg::_Internal {
 public:
  static const ::service_layer::SLAFNextHopRegKey& nexthopkey(const SLAFNextHopRegMsg* msg);
};

const ::service_layer::SLAFNextHopRegKey&
SLAFNextHopRegMsg::_Internal::nexthopkey(const SLAFNextHopRegMsg* msg) {
  return *msg->nexthopkey_;
}
SLAFNextHopRegMsg::SLAFNextHopRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNextHopRegMsg)
}
SLAFNextHopRegMsg::SLAFNextHopRegMsg(const SLAFNextHopRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nexthopkey()) {
    nexthopkey_ = new ::service_layer::SLAFNextHopRegKey(*from.nexthopkey_);
  } else {
    nexthopkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNextHopRegMsg)
}

inline void SLAFNextHopRegMsg::SharedCtor() {
nexthopkey_ = nullptr;
}

SLAFNextHopRegMsg::~SLAFNextHopRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNextHopRegMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNextHopRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nexthopkey_;
}

void SLAFNextHopRegMsg::ArenaDtor(void* object) {
  SLAFNextHopRegMsg* _this = reinterpret_cast< SLAFNextHopRegMsg* >(object);
  (void)_this;
}
void SLAFNextHopRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNextHopRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNextHopRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNextHopRegMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nexthopkey_ != nullptr) {
    delete nexthopkey_;
  }
  nexthopkey_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNextHopRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFNextHopRegKey NextHopKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNextHopRegMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNextHopRegMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFNextHopRegKey NextHopKey = 1;
  if (this->_internal_has_nexthopkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nexthopkey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNextHopRegMsg)
  return target;
}

size_t SLAFNextHopRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNextHopRegMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLAFNextHopRegKey NextHopKey = 1;
  if (this->_internal_has_nexthopkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopkey_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNextHopRegMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNextHopRegMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNextHopRegMsg::GetClassData() const { return &_class_data_; }

void SLAFNextHopRegMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNextHopRegMsg *>(to)->MergeFrom(
      static_cast<const SLAFNextHopRegMsg &>(from));
}


void SLAFNextHopRegMsg::MergeFrom(const SLAFNextHopRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNextHopRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nexthopkey()) {
    _internal_mutable_nexthopkey()->::service_layer::SLAFNextHopRegKey::MergeFrom(from._internal_nexthopkey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNextHopRegMsg::CopyFrom(const SLAFNextHopRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNextHopRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNextHopRegMsg::IsInitialized() const {
  return true;
}

void SLAFNextHopRegMsg::InternalSwap(SLAFNextHopRegMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nexthopkey_, other->nexthopkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNextHopRegMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[28]);
}

// ===================================================================

class SLAFNotifRegReq::_Internal {
 public:
  static const ::service_layer::SLAFRedistRegMsg& redistreq(const SLAFNotifRegReq* msg);
  static const ::service_layer::SLAFNextHopRegMsg& nexthopreq(const SLAFNotifRegReq* msg);
};

const ::service_layer::SLAFRedistRegMsg&
SLAFNotifRegReq::_Internal::redistreq(const SLAFNotifRegReq* msg) {
  return *msg->request_.redistreq_;
}
const ::service_layer::SLAFNextHopRegMsg&
SLAFNotifRegReq::_Internal::nexthopreq(const SLAFNotifRegReq* msg) {
  return *msg->request_.nexthopreq_;
}
void SLAFNotifRegReq::set_allocated_redistreq(::service_layer::SLAFRedistRegMsg* redistreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (redistreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFRedistRegMsg>::GetOwningArena(redistreq);
    if (message_arena != submessage_arena) {
      redistreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redistreq, submessage_arena);
    }
    set_has_redistreq();
    request_.redistreq_ = redistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotifRegReq.RedistReq)
}
void SLAFNotifRegReq::set_allocated_nexthopreq(::service_layer::SLAFNextHopRegMsg* nexthopreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (nexthopreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFNextHopRegMsg>::GetOwningArena(nexthopreq);
    if (message_arena != submessage_arena) {
      nexthopreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopreq, submessage_arena);
    }
    set_has_nexthopreq();
    request_.nexthopreq_ = nexthopreq;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotifRegReq.NextHopReq)
}
SLAFNotifRegReq::SLAFNotifRegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNotifRegReq)
}
SLAFNotifRegReq::SLAFNotifRegReq(const SLAFNotifRegReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operationid_ = from.operationid_;
  clear_has_request();
  switch (from.request_case()) {
    case kRedistReq: {
      _internal_mutable_redistreq()->::service_layer::SLAFRedistRegMsg::MergeFrom(from._internal_redistreq());
      break;
    }
    case kNextHopReq: {
      _internal_mutable_nexthopreq()->::service_layer::SLAFNextHopRegMsg::MergeFrom(from._internal_nexthopreq());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNotifRegReq)
}

inline void SLAFNotifRegReq::SharedCtor() {
operationid_ = uint64_t{0u};
clear_has_request();
}

SLAFNotifRegReq::~SLAFNotifRegReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNotifRegReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNotifRegReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void SLAFNotifRegReq::ArenaDtor(void* object) {
  SLAFNotifRegReq* _this = reinterpret_cast< SLAFNotifRegReq* >(object);
  (void)_this;
}
void SLAFNotifRegReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNotifRegReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNotifRegReq::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFNotifRegReq)
  switch (request_case()) {
    case kRedistReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.redistreq_;
      }
      break;
    }
    case kNextHopReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.nexthopreq_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void SLAFNotifRegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNotifRegReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operationid_ = uint64_t{0u};
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNotifRegReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFRedistRegMsg RedistReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_redistreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFNextHopRegMsg NextHopReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 OperationID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNotifRegReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNotifRegReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFRedistRegMsg RedistReq = 1;
  if (_internal_has_redistreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::redistreq(this), target, stream);
  }

  // .service_layer.SLAFNextHopRegMsg NextHopReq = 2;
  if (_internal_has_nexthopreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nexthopreq(this), target, stream);
  }

  // uint64 OperationID = 3;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_operationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNotifRegReq)
  return target;
}

size_t SLAFNotifRegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNotifRegReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 OperationID = 3;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  switch (request_case()) {
    // .service_layer.SLAFRedistRegMsg RedistReq = 1;
    case kRedistReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.redistreq_);
      break;
    }
    // .service_layer.SLAFNextHopRegMsg NextHopReq = 2;
    case kNextHopReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.nexthopreq_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNotifRegReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNotifRegReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNotifRegReq::GetClassData() const { return &_class_data_; }

void SLAFNotifRegReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNotifRegReq *>(to)->MergeFrom(
      static_cast<const SLAFNotifRegReq &>(from));
}


void SLAFNotifRegReq::MergeFrom(const SLAFNotifRegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNotifRegReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  switch (from.request_case()) {
    case kRedistReq: {
      _internal_mutable_redistreq()->::service_layer::SLAFRedistRegMsg::MergeFrom(from._internal_redistreq());
      break;
    }
    case kNextHopReq: {
      _internal_mutable_nexthopreq()->::service_layer::SLAFNextHopRegMsg::MergeFrom(from._internal_nexthopreq());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNotifRegReq::CopyFrom(const SLAFNotifRegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNotifRegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNotifRegReq::IsInitialized() const {
  return true;
}

void SLAFNotifRegReq::InternalSwap(SLAFNotifRegReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(operationid_, other->operationid_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNotifRegReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[29]);
}

// ===================================================================

class SLAFNotifReq::_Internal {
 public:
};

SLAFNotifReq::SLAFNotifReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notifreq_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNotifReq)
}
SLAFNotifReq::SLAFNotifReq(const SLAFNotifReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifreq_(from.notifreq_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNotifReq)
}

inline void SLAFNotifReq::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oper_ = 0;
}

SLAFNotifReq::~SLAFNotifReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNotifReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNotifReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFNotifReq::ArenaDtor(void* object) {
  SLAFNotifReq* _this = reinterpret_cast< SLAFNotifReq* >(object);
  (void)_this;
}
void SLAFNotifReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNotifReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNotifReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNotifReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifreq_.Clear();
  vrfname_.ClearToEmpty();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNotifReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLNotifOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLNotifOp>(val));
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFNotifReq.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFNotifRegReq NotifReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNotifReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNotifReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFNotifReq.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLAFNotifRegReq NotifReq = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifreq_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_notifreq(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNotifReq)
  return target;
}

size_t SLAFNotifReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNotifReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFNotifRegReq NotifReq = 3;
  total_size += 1UL * this->_internal_notifreq_size();
  for (const auto& msg : this->notifreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLNotifOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNotifReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNotifReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNotifReq::GetClassData() const { return &_class_data_; }

void SLAFNotifReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNotifReq *>(to)->MergeFrom(
      static_cast<const SLAFNotifReq &>(from));
}


void SLAFNotifReq::MergeFrom(const SLAFNotifReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNotifReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  notifreq_.MergeFrom(from.notifreq_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNotifReq::CopyFrom(const SLAFNotifReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNotifReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNotifReq::IsInitialized() const {
  return true;
}

void SLAFNotifReq::InternalSwap(SLAFNotifReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notifreq_.InternalSwap(&other->notifreq_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNotifReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[30]);
}

// ===================================================================

class SLAFNotifRsp::_Internal {
 public:
  static const ::service_layer::SLAFNotifRegReq& notifreq(const SLAFNotifRsp* msg);
  static const ::service_layer::SLErrorStatus& notifstatus(const SLAFNotifRsp* msg);
};

const ::service_layer::SLAFNotifRegReq&
SLAFNotifRsp::_Internal::notifreq(const SLAFNotifRsp* msg) {
  return *msg->notifreq_;
}
const ::service_layer::SLErrorStatus&
SLAFNotifRsp::_Internal::notifstatus(const SLAFNotifRsp* msg) {
  return *msg->notifstatus_;
}
void SLAFNotifRsp::clear_notifstatus() {
  if (GetArenaForAllocation() == nullptr && notifstatus_ != nullptr) {
    delete notifstatus_;
  }
  notifstatus_ = nullptr;
}
SLAFNotifRsp::SLAFNotifRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNotifRsp)
}
SLAFNotifRsp::SLAFNotifRsp(const SLAFNotifRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notifreq()) {
    notifreq_ = new ::service_layer::SLAFNotifRegReq(*from.notifreq_);
  } else {
    notifreq_ = nullptr;
  }
  if (from._internal_has_notifstatus()) {
    notifstatus_ = new ::service_layer::SLErrorStatus(*from.notifstatus_);
  } else {
    notifstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNotifRsp)
}

inline void SLAFNotifRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notifreq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notifstatus_) -
    reinterpret_cast<char*>(&notifreq_)) + sizeof(notifstatus_));
}

SLAFNotifRsp::~SLAFNotifRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNotifRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNotifRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete notifreq_;
  if (this != internal_default_instance()) delete notifstatus_;
}

void SLAFNotifRsp::ArenaDtor(void* object) {
  SLAFNotifRsp* _this = reinterpret_cast< SLAFNotifRsp* >(object);
  (void)_this;
}
void SLAFNotifRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNotifRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNotifRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNotifRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && notifreq_ != nullptr) {
    delete notifreq_;
  }
  notifreq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && notifstatus_ != nullptr) {
    delete notifstatus_;
  }
  notifstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNotifRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFNotifRegReq NotifReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus NotifStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNotifRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNotifRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFNotifRegReq NotifReq = 1;
  if (this->_internal_has_notifreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::notifreq(this), target, stream);
  }

  // .service_layer.SLErrorStatus NotifStatus = 2;
  if (this->_internal_has_notifstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::notifstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNotifRsp)
  return target;
}

size_t SLAFNotifRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNotifRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLAFNotifRegReq NotifReq = 1;
  if (this->_internal_has_notifreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notifreq_);
  }

  // .service_layer.SLErrorStatus NotifStatus = 2;
  if (this->_internal_has_notifstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notifstatus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNotifRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNotifRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNotifRsp::GetClassData() const { return &_class_data_; }

void SLAFNotifRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNotifRsp *>(to)->MergeFrom(
      static_cast<const SLAFNotifRsp &>(from));
}


void SLAFNotifRsp::MergeFrom(const SLAFNotifRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNotifRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notifreq()) {
    _internal_mutable_notifreq()->::service_layer::SLAFNotifRegReq::MergeFrom(from._internal_notifreq());
  }
  if (from._internal_has_notifstatus()) {
    _internal_mutable_notifstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_notifstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNotifRsp::CopyFrom(const SLAFNotifRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNotifRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNotifRsp::IsInitialized() const {
  return true;
}

void SLAFNotifRsp::InternalSwap(SLAFNotifRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFNotifRsp, notifstatus_)
      + sizeof(SLAFNotifRsp::notifstatus_)
      - PROTOBUF_FIELD_OFFSET(SLAFNotifRsp, notifreq_)>(
          reinterpret_cast<char*>(&notifreq_),
          reinterpret_cast<char*>(&other->notifreq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNotifRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[31]);
}

// ===================================================================

class SLNextHop::_Internal {
 public:
  static const ::service_layer::SLAFNextHopRegKey& nexthopkey(const SLNextHop* msg);
  static const ::service_layer::SLRoutePrefix& resolvingprefix(const SLNextHop* msg);
};

const ::service_layer::SLAFNextHopRegKey&
SLNextHop::_Internal::nexthopkey(const SLNextHop* msg) {
  return *msg->nexthopkey_;
}
const ::service_layer::SLRoutePrefix&
SLNextHop::_Internal::resolvingprefix(const SLNextHop* msg) {
  return *msg->resolvingprefix_;
}
void SLNextHop::clear_resolvingprefix() {
  if (GetArenaForAllocation() == nullptr && resolvingprefix_ != nullptr) {
    delete resolvingprefix_;
  }
  resolvingprefix_ = nullptr;
}
void SLNextHop::clear_paths() {
  paths_.Clear();
}
SLNextHop::SLNextHop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLNextHop)
}
SLNextHop::SLNextHop(const SLNextHop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcproto().empty()) {
    srcproto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcproto(), 
      GetArenaForAllocation());
  }
  srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcprototag().empty()) {
    srcprototag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcprototag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_nexthopkey()) {
    nexthopkey_ = new ::service_layer::SLAFNextHopRegKey(*from.nexthopkey_);
  } else {
    nexthopkey_ = nullptr;
  }
  if (from._internal_has_resolvingprefix()) {
    resolvingprefix_ = new ::service_layer::SLRoutePrefix(*from.resolvingprefix_);
  } else {
    resolvingprefix_ = nullptr;
  }
  ::memcpy(&admindistance_, &from.admindistance_,
    static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&admindistance_)) + sizeof(metric_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLNextHop)
}

inline void SLNextHop::SharedCtor() {
srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nexthopkey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&nexthopkey_)) + sizeof(metric_));
}

SLNextHop::~SLNextHop() {
  // @@protoc_insertion_point(destructor:service_layer.SLNextHop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLNextHop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srcproto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcprototag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nexthopkey_;
  if (this != internal_default_instance()) delete resolvingprefix_;
}

void SLNextHop::ArenaDtor(void* object) {
  SLNextHop* _this = reinterpret_cast< SLNextHop* >(object);
  (void)_this;
}
void SLNextHop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLNextHop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLNextHop::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLNextHop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  srcproto_.ClearToEmpty();
  srcprototag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && nexthopkey_ != nullptr) {
    delete nexthopkey_;
  }
  nexthopkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resolvingprefix_ != nullptr) {
    delete resolvingprefix_;
  }
  resolvingprefix_ = nullptr;
  ::memset(&admindistance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metric_) -
      reinterpret_cast<char*>(&admindistance_)) + sizeof(metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLNextHop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFNextHopRegKey NextHopKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRoutePrefix ResolvingPrefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolvingprefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SrcProto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srcproto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLNextHop.SrcProto"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SrcProtoTag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_srcprototag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLNextHop.SrcProtoTag"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AdminDistance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Metric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutePath Paths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLNextHop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLNextHop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFNextHopRegKey NextHopKey = 1;
  if (this->_internal_has_nexthopkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nexthopkey(this), target, stream);
  }

  // .service_layer.SLRoutePrefix ResolvingPrefix = 2;
  if (this->_internal_has_resolvingprefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resolvingprefix(this), target, stream);
  }

  // string SrcProto = 3;
  if (!this->_internal_srcproto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcproto().data(), static_cast<int>(this->_internal_srcproto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLNextHop.SrcProto");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_srcproto(), target);
  }

  // string SrcProtoTag = 4;
  if (!this->_internal_srcprototag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcprototag().data(), static_cast<int>(this->_internal_srcprototag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLNextHop.SrcProtoTag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_srcprototag(), target);
  }

  // uint32 AdminDistance = 5;
  if (this->_internal_admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_admindistance(), target);
  }

  // uint32 Metric = 6;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_metric(), target);
  }

  // repeated .service_layer.SLRoutePath Paths = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLNextHop)
  return target;
}

size_t SLNextHop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLNextHop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutePath Paths = 7;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string SrcProto = 3;
  if (!this->_internal_srcproto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcproto());
  }

  // string SrcProtoTag = 4;
  if (!this->_internal_srcprototag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcprototag());
  }

  // .service_layer.SLAFNextHopRegKey NextHopKey = 1;
  if (this->_internal_has_nexthopkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopkey_);
  }

  // .service_layer.SLRoutePrefix ResolvingPrefix = 2;
  if (this->_internal_has_resolvingprefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolvingprefix_);
  }

  // uint32 AdminDistance = 5;
  if (this->_internal_admindistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_admindistance());
  }

  // uint32 Metric = 6;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLNextHop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLNextHop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLNextHop::GetClassData() const { return &_class_data_; }

void SLNextHop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLNextHop *>(to)->MergeFrom(
      static_cast<const SLNextHop &>(from));
}


void SLNextHop::MergeFrom(const SLNextHop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLNextHop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (!from._internal_srcproto().empty()) {
    _internal_set_srcproto(from._internal_srcproto());
  }
  if (!from._internal_srcprototag().empty()) {
    _internal_set_srcprototag(from._internal_srcprototag());
  }
  if (from._internal_has_nexthopkey()) {
    _internal_mutable_nexthopkey()->::service_layer::SLAFNextHopRegKey::MergeFrom(from._internal_nexthopkey());
  }
  if (from._internal_has_resolvingprefix()) {
    _internal_mutable_resolvingprefix()->::service_layer::SLRoutePrefix::MergeFrom(from._internal_resolvingprefix());
  }
  if (from._internal_admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLNextHop::CopyFrom(const SLNextHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLNextHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLNextHop::IsInitialized() const {
  return true;
}

void SLNextHop::InternalSwap(SLNextHop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcproto_, lhs_arena,
      &other->srcproto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcprototag_, lhs_arena,
      &other->srcprototag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLNextHop, metric_)
      + sizeof(SLNextHop::metric_)
      - PROTOBUF_FIELD_OFFSET(SLNextHop, nexthopkey_)>(
          reinterpret_cast<char*>(&nexthopkey_),
          reinterpret_cast<char*>(&other->nexthopkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLNextHop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[32]);
}

// ===================================================================

class SLAFNotif_SLRedistMarker::_Internal {
 public:
};

SLAFNotif_SLRedistMarker::SLAFNotif_SLRedistMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNotif.SLRedistMarker)
}
SLAFNotif_SLRedistMarker::SLAFNotif_SLRedistMarker(const SLAFNotif_SLRedistMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_ = from.table_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNotif.SLRedistMarker)
}

inline void SLAFNotif_SLRedistMarker::SharedCtor() {
table_ = 0;
}

SLAFNotif_SLRedistMarker::~SLAFNotif_SLRedistMarker() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNotif.SLRedistMarker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNotif_SLRedistMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLAFNotif_SLRedistMarker::ArenaDtor(void* object) {
  SLAFNotif_SLRedistMarker* _this = reinterpret_cast< SLAFNotif_SLRedistMarker* >(object);
  (void)_this;
}
void SLAFNotif_SLRedistMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNotif_SLRedistMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNotif_SLRedistMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNotif.SLRedistMarker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNotif_SLRedistMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLTableType Table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNotif_SLRedistMarker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNotif.SLRedistMarker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLTableType Table = 1;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNotif.SLRedistMarker)
  return target;
}

size_t SLAFNotif_SLRedistMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNotif.SLRedistMarker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLTableType Table = 1;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNotif_SLRedistMarker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNotif_SLRedistMarker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNotif_SLRedistMarker::GetClassData() const { return &_class_data_; }

void SLAFNotif_SLRedistMarker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNotif_SLRedistMarker *>(to)->MergeFrom(
      static_cast<const SLAFNotif_SLRedistMarker &>(from));
}


void SLAFNotif_SLRedistMarker::MergeFrom(const SLAFNotif_SLRedistMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNotif.SLRedistMarker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNotif_SLRedistMarker::CopyFrom(const SLAFNotif_SLRedistMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNotif.SLRedistMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNotif_SLRedistMarker::IsInitialized() const {
  return true;
}

void SLAFNotif_SLRedistMarker::InternalSwap(SLAFNotif_SLRedistMarker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(table_, other->table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNotif_SLRedistMarker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[33]);
}

// ===================================================================

class SLAFNotif::_Internal {
 public:
  static const ::service_layer::SLAFNotifRsp& notifstatus(const SLAFNotif* msg);
  static const ::service_layer::SLAFNotif_SLRedistMarker& startmarker(const SLAFNotif* msg);
  static const ::service_layer::SLAFNotif_SLRedistMarker& endmarker(const SLAFNotif* msg);
  static const ::service_layer::SLAFObject& redistobject(const SLAFNotif* msg);
  static const ::service_layer::SLNextHop& nexthop(const SLAFNotif* msg);
};

const ::service_layer::SLAFNotifRsp&
SLAFNotif::_Internal::notifstatus(const SLAFNotif* msg) {
  return *msg->Event_.notifstatus_;
}
const ::service_layer::SLAFNotif_SLRedistMarker&
SLAFNotif::_Internal::startmarker(const SLAFNotif* msg) {
  return *msg->Event_.startmarker_;
}
const ::service_layer::SLAFNotif_SLRedistMarker&
SLAFNotif::_Internal::endmarker(const SLAFNotif* msg) {
  return *msg->Event_.endmarker_;
}
const ::service_layer::SLAFObject&
SLAFNotif::_Internal::redistobject(const SLAFNotif* msg) {
  return *msg->Event_.redistobject_;
}
const ::service_layer::SLNextHop&
SLAFNotif::_Internal::nexthop(const SLAFNotif* msg) {
  return *msg->Event_.nexthop_;
}
void SLAFNotif::set_allocated_notifstatus(::service_layer::SLAFNotifRsp* notifstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (notifstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFNotifRsp>::GetOwningArena(notifstatus);
    if (message_arena != submessage_arena) {
      notifstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notifstatus, submessage_arena);
    }
    set_has_notifstatus();
    Event_.notifstatus_ = notifstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotif.NotifStatus)
}
void SLAFNotif::set_allocated_startmarker(::service_layer::SLAFNotif_SLRedistMarker* startmarker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (startmarker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFNotif_SLRedistMarker>::GetOwningArena(startmarker);
    if (message_arena != submessage_arena) {
      startmarker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startmarker, submessage_arena);
    }
    set_has_startmarker();
    Event_.startmarker_ = startmarker;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotif.StartMarker)
}
void SLAFNotif::set_allocated_endmarker(::service_layer::SLAFNotif_SLRedistMarker* endmarker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (endmarker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFNotif_SLRedistMarker>::GetOwningArena(endmarker);
    if (message_arena != submessage_arena) {
      endmarker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endmarker, submessage_arena);
    }
    set_has_endmarker();
    Event_.endmarker_ = endmarker;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotif.EndMarker)
}
void SLAFNotif::set_allocated_redistobject(::service_layer::SLAFObject* redistobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (redistobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLAFObject>::GetOwningArena(redistobject);
    if (message_arena != submessage_arena) {
      redistobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redistobject, submessage_arena);
    }
    set_has_redistobject();
    Event_.redistobject_ = redistobject;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotif.RedistObject)
}
void SLAFNotif::set_allocated_nexthop(::service_layer::SLNextHop* nexthop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (nexthop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLNextHop>::GetOwningArena(nexthop);
    if (message_arena != submessage_arena) {
      nexthop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthop, submessage_arena);
    }
    set_has_nexthop();
    Event_.nexthop_ = nexthop;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFNotif.NextHop)
}
SLAFNotif::SLAFNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNotif)
}
SLAFNotif::SLAFNotif(const SLAFNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Event();
  switch (from.Event_case()) {
    case kNotifStatus: {
      _internal_mutable_notifstatus()->::service_layer::SLAFNotifRsp::MergeFrom(from._internal_notifstatus());
      break;
    }
    case kStartMarker: {
      _internal_mutable_startmarker()->::service_layer::SLAFNotif_SLRedistMarker::MergeFrom(from._internal_startmarker());
      break;
    }
    case kEndMarker: {
      _internal_mutable_endmarker()->::service_layer::SLAFNotif_SLRedistMarker::MergeFrom(from._internal_endmarker());
      break;
    }
    case kRedistObject: {
      _internal_mutable_redistobject()->::service_layer::SLAFObject::MergeFrom(from._internal_redistobject());
      break;
    }
    case kNextHop: {
      _internal_mutable_nexthop()->::service_layer::SLNextHop::MergeFrom(from._internal_nexthop());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNotif)
}

inline void SLAFNotif::SharedCtor() {
clear_has_Event();
}

SLAFNotif::~SLAFNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNotif)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLAFNotif::ArenaDtor(void* object) {
  SLAFNotif* _this = reinterpret_cast< SLAFNotif* >(object);
  (void)_this;
}
void SLAFNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNotif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFNotif)
  switch (Event_case()) {
    case kNotifStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.notifstatus_;
      }
      break;
    }
    case kStartMarker: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.startmarker_;
      }
      break;
    }
    case kEndMarker: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.endmarker_;
      }
      break;
    }
    case kRedistObject: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.redistobject_;
      }
      break;
    }
    case kNextHop: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.nexthop_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLAFNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNotif)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFNotifRsp NotifStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFNotif.SLRedistMarker StartMarker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_startmarker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFNotif.SLRedistMarker EndMarker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_endmarker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFObject RedistObject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_redistobject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLNextHop NextHop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNotif::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNotif)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFNotifRsp NotifStatus = 1;
  if (_internal_has_notifstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::notifstatus(this), target, stream);
  }

  // .service_layer.SLAFNotif.SLRedistMarker StartMarker = 2;
  if (_internal_has_startmarker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::startmarker(this), target, stream);
  }

  // .service_layer.SLAFNotif.SLRedistMarker EndMarker = 3;
  if (_internal_has_endmarker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::endmarker(this), target, stream);
  }

  // .service_layer.SLAFObject RedistObject = 4;
  if (_internal_has_redistobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::redistobject(this), target, stream);
  }

  // .service_layer.SLNextHop NextHop = 5;
  if (_internal_has_nexthop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nexthop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNotif)
  return target;
}

size_t SLAFNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNotif)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Event_case()) {
    // .service_layer.SLAFNotifRsp NotifStatus = 1;
    case kNotifStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.notifstatus_);
      break;
    }
    // .service_layer.SLAFNotif.SLRedistMarker StartMarker = 2;
    case kStartMarker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.startmarker_);
      break;
    }
    // .service_layer.SLAFNotif.SLRedistMarker EndMarker = 3;
    case kEndMarker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.endmarker_);
      break;
    }
    // .service_layer.SLAFObject RedistObject = 4;
    case kRedistObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.redistobject_);
      break;
    }
    // .service_layer.SLNextHop NextHop = 5;
    case kNextHop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.nexthop_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNotif::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNotif::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNotif::GetClassData() const { return &_class_data_; }

void SLAFNotif::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNotif *>(to)->MergeFrom(
      static_cast<const SLAFNotif &>(from));
}


void SLAFNotif::MergeFrom(const SLAFNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNotif)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Event_case()) {
    case kNotifStatus: {
      _internal_mutable_notifstatus()->::service_layer::SLAFNotifRsp::MergeFrom(from._internal_notifstatus());
      break;
    }
    case kStartMarker: {
      _internal_mutable_startmarker()->::service_layer::SLAFNotif_SLRedistMarker::MergeFrom(from._internal_startmarker());
      break;
    }
    case kEndMarker: {
      _internal_mutable_endmarker()->::service_layer::SLAFNotif_SLRedistMarker::MergeFrom(from._internal_endmarker());
      break;
    }
    case kRedistObject: {
      _internal_mutable_redistobject()->::service_layer::SLAFObject::MergeFrom(from._internal_redistobject());
      break;
    }
    case kNextHop: {
      _internal_mutable_nexthop()->::service_layer::SLNextHop::MergeFrom(from._internal_nexthop());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNotif::CopyFrom(const SLAFNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNotif::IsInitialized() const {
  return true;
}

void SLAFNotif::InternalSwap(SLAFNotif* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNotif::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[34]);
}

// ===================================================================

class SLAFNotifMsg::_Internal {
 public:
};

SLAFNotifMsg::SLAFNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  afnotifs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFNotifMsg)
}
SLAFNotifMsg::SLAFNotifMsg(const SLAFNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      afnotifs_(from.afnotifs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFNotifMsg)
}

inline void SLAFNotifMsg::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLAFNotifMsg::~SLAFNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFNotifMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFNotifMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFNotifMsg::ArenaDtor(void* object) {
  SLAFNotifMsg* _this = reinterpret_cast< SLAFNotifMsg* >(object);
  (void)_this;
}
void SLAFNotifMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFNotifMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFNotifMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFNotifMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  afnotifs_.Clear();
  vrfname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFNotifMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFNotifMsg.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFNotif AFNotifs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afnotifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFNotifMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFNotifMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFNotifMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLAFNotif AFNotifs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afnotifs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_afnotifs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFNotifMsg)
  return target;
}

size_t SLAFNotifMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFNotifMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFNotif AFNotifs = 3;
  total_size += 1UL * this->_internal_afnotifs_size();
  for (const auto& msg : this->afnotifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFNotifMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFNotifMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFNotifMsg::GetClassData() const { return &_class_data_; }

void SLAFNotifMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFNotifMsg *>(to)->MergeFrom(
      static_cast<const SLAFNotifMsg &>(from));
}


void SLAFNotifMsg::MergeFrom(const SLAFNotifMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  afnotifs_.MergeFrom(from.afnotifs_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFNotifMsg::CopyFrom(const SLAFNotifMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFNotifMsg::IsInitialized() const {
  return true;
}

void SLAFNotifMsg::InternalSwap(SLAFNotifMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  afnotifs_.InternalSwap(&other->afnotifs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFNotifMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfReg* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfReg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPathGroup_SLPath* Arena::CreateMaybeMessage< ::service_layer::SLPathGroup_SLPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPathGroup_SLPath >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPathGroup_SLPathList* Arena::CreateMaybeMessage< ::service_layer::SLPathGroup_SLPathList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPathGroup_SLPathList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPathGroup* Arena::CreateMaybeMessage< ::service_layer::SLPathGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPathGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsEntryKey* Arena::CreateMaybeMessage< ::service_layer::SLMplsEntryKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsEntryKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsEntry* Arena::CreateMaybeMessage< ::service_layer::SLMplsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFIPRoute* Arena::CreateMaybeMessage< ::service_layer::SLAFIPRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFIPRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFObject* Arena::CreateMaybeMessage< ::service_layer::SLAFObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFObject >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFOpMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFOpMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFOpMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFClientIDList* Arena::CreateMaybeMessage< ::service_layer::SLAFClientIDList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFClientIDList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLTableTypeList* Arena::CreateMaybeMessage< ::service_layer::SLTableTypeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLTableTypeList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFObjectKey* Arena::CreateMaybeMessage< ::service_layer::SLAFObjectKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFObjectKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFGetMatch* Arena::CreateMaybeMessage< ::service_layer::SLAFGetMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFGetMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFGetMatchList* Arena::CreateMaybeMessage< ::service_layer::SLAFGetMatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFGetMatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFGetMsgRspEntry* Arena::CreateMaybeMessage< ::service_layer::SLAFGetMsgRspEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFGetMsgRspEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFRes* Arena::CreateMaybeMessage< ::service_layer::SLAFRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFRedistRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFRedistRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFRedistRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNextHopRegKey_SLNextHopKey* Arena::CreateMaybeMessage< ::service_layer::SLAFNextHopRegKey_SLNextHopKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNextHopRegKey_SLNextHopKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNextHopRegKey* Arena::CreateMaybeMessage< ::service_layer::SLAFNextHopRegKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNextHopRegKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNextHopRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFNextHopRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNextHopRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNotifRegReq* Arena::CreateMaybeMessage< ::service_layer::SLAFNotifRegReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNotifRegReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNotifReq* Arena::CreateMaybeMessage< ::service_layer::SLAFNotifReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNotifReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNotifRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFNotifRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNotifRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLNextHop* Arena::CreateMaybeMessage< ::service_layer::SLNextHop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLNextHop >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNotif_SLRedistMarker* Arena::CreateMaybeMessage< ::service_layer::SLAFNotif_SLRedistMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNotif_SLRedistMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNotif* Arena::CreateMaybeMessage< ::service_layer::SLAFNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFNotifMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
