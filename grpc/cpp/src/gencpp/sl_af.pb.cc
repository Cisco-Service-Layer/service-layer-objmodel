// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_af.proto

#include "sl_af.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLAFVrfReg::SLAFVrfReg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfreg_(nullptr)
  , table_(0)
{}
struct SLAFVrfRegDefaultTypeInternal {
  constexpr SLAFVrfRegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegDefaultTypeInternal() {}
  union {
    SLAFVrfReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegDefaultTypeInternal _SLAFVrfReg_default_instance_;
constexpr SLAFVrfRegMsg::SLAFVrfRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfregmsgs_()
  , oper_(0)
{}
struct SLAFVrfRegMsgDefaultTypeInternal {
  constexpr SLAFVrfRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegMsgDefaultTypeInternal() {}
  union {
    SLAFVrfRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegMsgDefaultTypeInternal _SLAFVrfRegMsg_default_instance_;
constexpr SLAFVrfRegMsgRes::SLAFVrfRegMsgRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr)
  , table_(0)
{}
struct SLAFVrfRegMsgResDefaultTypeInternal {
  constexpr SLAFVrfRegMsgResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegMsgResDefaultTypeInternal() {}
  union {
    SLAFVrfRegMsgRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegMsgResDefaultTypeInternal _SLAFVrfRegMsgRes_default_instance_;
constexpr SLAFVrfRegMsgRsp::SLAFVrfRegMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr){}
struct SLAFVrfRegMsgRspDefaultTypeInternal {
  constexpr SLAFVrfRegMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFVrfRegMsgRspDefaultTypeInternal() {}
  union {
    SLAFVrfRegMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFVrfRegMsgRspDefaultTypeInternal _SLAFVrfRegMsgRsp_default_instance_;
constexpr SLPathGroup_SLPath::SLPathGroup_SLPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr){}
struct SLPathGroup_SLPathDefaultTypeInternal {
  constexpr SLPathGroup_SLPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPathGroup_SLPathDefaultTypeInternal() {}
  union {
    SLPathGroup_SLPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPathGroup_SLPathDefaultTypeInternal _SLPathGroup_SLPath_default_instance_;
constexpr SLPathGroup_SLPathList::SLPathGroup_SLPathList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paths_(){}
struct SLPathGroup_SLPathListDefaultTypeInternal {
  constexpr SLPathGroup_SLPathListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPathGroup_SLPathListDefaultTypeInternal() {}
  union {
    SLPathGroup_SLPathList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPathGroup_SLPathListDefaultTypeInternal _SLPathGroup_SLPathList_default_instance_;
constexpr SLPathGroup::SLPathGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathgroupid_(nullptr)
  , admindistance_(0u)
  , flags_(0u)
  , _oneof_case_{}{}
struct SLPathGroupDefaultTypeInternal {
  constexpr SLPathGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPathGroupDefaultTypeInternal() {}
  union {
    SLPathGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPathGroupDefaultTypeInternal _SLPathGroup_default_instance_;
constexpr SLMplsEntry::SLMplsEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathlist_()
  , locallabel_(0u)
  , admindistance_(0u)
  , flags_(0u)
  , _oneof_case_{}{}
struct SLMplsEntryDefaultTypeInternal {
  constexpr SLMplsEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLMplsEntryDefaultTypeInternal() {}
  union {
    SLMplsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLMplsEntryDefaultTypeInternal _SLMplsEntry_default_instance_;
constexpr SLAFObject::SLAFObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLAFObjectDefaultTypeInternal {
  constexpr SLAFObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFObjectDefaultTypeInternal() {}
  union {
    SLAFObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFObjectDefaultTypeInternal _SLAFObject_default_instance_;
constexpr SLAFOp::SLAFOp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : afobject_(nullptr)
  , operationid_(uint64_t{0u}){}
struct SLAFOpDefaultTypeInternal {
  constexpr SLAFOpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFOpDefaultTypeInternal() {}
  union {
    SLAFOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFOpDefaultTypeInternal _SLAFOp_default_instance_;
constexpr SLAFMsg::SLAFMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oplist_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oper_(0)

  , acktype_(0)
{}
struct SLAFMsgDefaultTypeInternal {
  constexpr SLAFMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFMsgDefaultTypeInternal() {}
  union {
    SLAFMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFMsgDefaultTypeInternal _SLAFMsg_default_instance_;
constexpr SLAFRes::SLAFRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , operation_(nullptr){}
struct SLAFResDefaultTypeInternal {
  constexpr SLAFResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFResDefaultTypeInternal() {}
  union {
    SLAFRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFResDefaultTypeInternal _SLAFRes_default_instance_;
constexpr SLAFMsgRsp::SLAFMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLAFMsgRspDefaultTypeInternal {
  constexpr SLAFMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLAFMsgRspDefaultTypeInternal() {}
  union {
    SLAFMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLAFMsgRspDefaultTypeInternal _SLAFMsgRsp_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5faf_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sl_5faf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5faf_2eproto = nullptr;

const uint32_t TableStruct_sl_5faf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfReg, table_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfReg, vrfreg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsg, vrfregmsgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRes, table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFVrfRegMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPath, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPathList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup_SLPathList, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, pathgroupid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, admindistance_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPathGroup, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, locallabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, admindistance_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, pathlist_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsEntry, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObject, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObject, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFObject, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOp, afobject_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFOp, operationid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, acktype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsg, oplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFRes, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsgRsp, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLAFMsgRsp, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLAFVrfReg)},
  { 8, -1, -1, sizeof(::service_layer::SLAFVrfRegMsg)},
  { 16, -1, -1, sizeof(::service_layer::SLAFVrfRegMsgRes)},
  { 25, -1, -1, sizeof(::service_layer::SLAFVrfRegMsgRsp)},
  { 33, -1, -1, sizeof(::service_layer::SLPathGroup_SLPath)},
  { 40, -1, -1, sizeof(::service_layer::SLPathGroup_SLPathList)},
  { 47, -1, -1, sizeof(::service_layer::SLPathGroup)},
  { 58, -1, -1, sizeof(::service_layer::SLMplsEntry)},
  { 70, -1, -1, sizeof(::service_layer::SLAFObject)},
  { 81, -1, -1, sizeof(::service_layer::SLAFOp)},
  { 89, -1, -1, sizeof(::service_layer::SLAFMsg)},
  { 99, -1, -1, sizeof(::service_layer::SLAFRes)},
  { 107, -1, -1, sizeof(::service_layer::SLAFMsgRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFVrfRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPathGroup_SLPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPathGroup_SLPathList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPathGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLAFMsgRsp_default_instance_),
};

const char descriptor_table_protodef_sl_5faf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013sl_af.proto\022\rservice_layer\032\025sl_common_"
  "types.proto\032\025sl_route_common.proto\032\023sl_r"
  "oute_ipv4.proto\032\023sl_route_ipv6.proto\"`\n\n"
  "SLAFVrfReg\022)\n\005Table\030\001 \001(\0162\032.service_laye"
  "r.SLTableType\022\'\n\006VrfReg\030\002 \001(\0132\027.service_"
  "layer.SLVrfReg\"d\n\rSLAFVrfRegMsg\022$\n\004Oper\030"
  "\001 \001(\0162\026.service_layer.SLRegOp\022-\n\nVrfRegM"
  "sgs\030\002 \003(\0132\031.service_layer.SLAFVrfReg\"\177\n\020"
  "SLAFVrfRegMsgRes\022/\n\tErrStatus\030\001 \001(\0132\034.se"
  "rvice_layer.SLErrorStatus\022\017\n\007VrfName\030\002 \001"
  "(\t\022)\n\005Table\030\003 \001(\0162\032.service_layer.SLTabl"
  "eType\"y\n\020SLAFVrfRegMsgRsp\0223\n\rStatusSumma"
  "ry\030\001 \001(\0132\034.service_layer.SLErrorStatus\0220"
  "\n\007Results\030\002 \003(\0132\037.service_layer.SLAFVrfR"
  "egMsgRes\"\233\002\n\013SLPathGroup\022.\n\013PathGroupId\030"
  "\001 \001(\0132\031.service_layer.SLObjectId\022\025\n\rAdmi"
  "nDistance\030\002 \001(\r\0229\n\010PathList\030\003 \001(\0132%.serv"
  "ice_layer.SLPathGroup.SLPathListH\000\022\r\n\005Fl"
  "ags\030\004 \001(\r\0322\n\006SLPath\022(\n\004Path\030\001 \001(\0132\032.serv"
  "ice_layer.SLRoutePath\032>\n\nSLPathList\0220\n\005P"
  "aths\030\001 \003(\0132!.service_layer.SLPathGroup.S"
  "LPathB\007\n\005entry\"\270\001\n\013SLMplsEntry\022\022\n\nLocalL"
  "abel\030\001 \001(\r\022\025\n\rAdminDistance\030\002 \001(\r\022,\n\010Pat"
  "hList\030\003 \003(\0132\032.service_layer.SLRoutePath\022"
  "8\n\014PathGroupKey\030\004 \001(\0132 .service_layer.SL"
  "PathGroupRefKeyH\000\022\r\n\005Flags\030\005 \001(\rB\007\n\005entr"
  "y\"\325\001\n\nSLAFObject\022-\n\tIPv4Route\030\001 \001(\0132\030.se"
  "rvice_layer.SLRoutev4H\000\022-\n\tIPv6Route\030\002 \001"
  "(\0132\030.service_layer.SLRoutev6H\000\022/\n\tMplsLa"
  "bel\030\003 \001(\0132\032.service_layer.SLMplsEntryH\000\022"
  "/\n\tPathGroup\030\004 \001(\0132\032.service_layer.SLPat"
  "hGroupH\000B\007\n\005entry\"J\n\006SLAFOp\022+\n\010AFObject\030"
  "\001 \001(\0132\031.service_layer.SLAFObject\022\023\n\013Oper"
  "ationID\030\002 \001(\004\"\230\001\n\007SLAFMsg\022\'\n\004Oper\030\001 \001(\0162"
  "\031.service_layer.SLObjectOp\022\017\n\007VrfName\030\002 "
  "\001(\t\022,\n\007AckType\030\003 \001(\0162\033.service_layer.SLR"
  "spACKType\022%\n\006OpList\030\004 \003(\0132\025.service_laye"
  "r.SLAFOp\"d\n\007SLAFRes\022/\n\tErrStatus\030\001 \001(\0132\034"
  ".service_layer.SLErrorStatus\022(\n\tOperatio"
  "n\030\002 \001(\0132\025.service_layer.SLAFOp\"F\n\nSLAFMs"
  "gRsp\022\017\n\007VrfName\030\001 \001(\t\022\'\n\007Results\030\002 \003(\0132\026"
  ".service_layer.SLAFRes2\331\001\n\004SLAF\022M\n\014SLAFV"
  "rfRegOp\022\034.service_layer.SLAFVrfRegMsg\032\037."
  "service_layer.SLAFVrfRegMsgRsp\022;\n\006SLAFOp"
  "\022\026.service_layer.SLAFMsg\032\031.service_layer"
  ".SLAFMsgRsp\022E\n\014SLAFOpStream\022\026.service_la"
  "yer.SLAFMsg\032\031.service_layer.SLAFMsgRsp(\001"
  "0\001BQZOgithub.com/Cisco-service-layer/ser"
  "vice-layer-objmodel/grpc/protos;service_"
  "layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5faf_2eproto_deps[4] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
  &::descriptor_table_sl_5froute_5fcommon_2eproto,
  &::descriptor_table_sl_5froute_5fipv4_2eproto,
  &::descriptor_table_sl_5froute_5fipv6_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5faf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5faf_2eproto = {
  false, false, 1973, descriptor_table_protodef_sl_5faf_2eproto, "sl_af.proto", 
  &descriptor_table_sl_5faf_2eproto_once, descriptor_table_sl_5faf_2eproto_deps, 4, 13,
  schemas, file_default_instances, TableStruct_sl_5faf_2eproto::offsets,
  file_level_metadata_sl_5faf_2eproto, file_level_enum_descriptors_sl_5faf_2eproto, file_level_service_descriptors_sl_5faf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5faf_2eproto_getter() {
  return &descriptor_table_sl_5faf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5faf_2eproto(&descriptor_table_sl_5faf_2eproto);
namespace service_layer {

// ===================================================================

class SLAFVrfReg::_Internal {
 public:
  static const ::service_layer::SLVrfReg& vrfreg(const SLAFVrfReg* msg);
};

const ::service_layer::SLVrfReg&
SLAFVrfReg::_Internal::vrfreg(const SLAFVrfReg* msg) {
  return *msg->vrfreg_;
}
void SLAFVrfReg::clear_vrfreg() {
  if (GetArenaForAllocation() == nullptr && vrfreg_ != nullptr) {
    delete vrfreg_;
  }
  vrfreg_ = nullptr;
}
SLAFVrfReg::SLAFVrfReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfReg)
}
SLAFVrfReg::SLAFVrfReg(const SLAFVrfReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vrfreg()) {
    vrfreg_ = new ::service_layer::SLVrfReg(*from.vrfreg_);
  } else {
    vrfreg_ = nullptr;
  }
  table_ = from.table_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfReg)
}

inline void SLAFVrfReg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vrfreg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&vrfreg_)) + sizeof(table_));
}

SLAFVrfReg::~SLAFVrfReg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfReg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfReg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vrfreg_;
}

void SLAFVrfReg::ArenaDtor(void* object) {
  SLAFVrfReg* _this = reinterpret_cast< SLAFVrfReg* >(object);
  (void)_this;
}
void SLAFVrfReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfReg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfReg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vrfreg_ != nullptr) {
    delete vrfreg_;
  }
  vrfreg_ = nullptr;
  table_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLTableType Table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLVrfReg VrfReg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfreg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfReg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfReg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLTableType Table = 1;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table(), target);
  }

  // .service_layer.SLVrfReg VrfReg = 2;
  if (this->_internal_has_vrfreg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vrfreg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfReg)
  return target;
}

size_t SLAFVrfReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfReg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLVrfReg VrfReg = 2;
  if (this->_internal_has_vrfreg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrfreg_);
  }

  // .service_layer.SLTableType Table = 1;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfReg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfReg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfReg::GetClassData() const { return &_class_data_; }

void SLAFVrfReg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfReg *>(to)->MergeFrom(
      static_cast<const SLAFVrfReg &>(from));
}


void SLAFVrfReg::MergeFrom(const SLAFVrfReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfReg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vrfreg()) {
    _internal_mutable_vrfreg()->::service_layer::SLVrfReg::MergeFrom(from._internal_vrfreg());
  }
  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfReg::CopyFrom(const SLAFVrfReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfReg::IsInitialized() const {
  return true;
}

void SLAFVrfReg::InternalSwap(SLAFVrfReg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFVrfReg, table_)
      + sizeof(SLAFVrfReg::table_)
      - PROTOBUF_FIELD_OFFSET(SLAFVrfReg, vrfreg_)>(
          reinterpret_cast<char*>(&vrfreg_),
          reinterpret_cast<char*>(&other->vrfreg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfReg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[0]);
}

// ===================================================================

class SLAFVrfRegMsg::_Internal {
 public:
};

SLAFVrfRegMsg::SLAFVrfRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vrfregmsgs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegMsg)
}
SLAFVrfRegMsg::SLAFVrfRegMsg(const SLAFVrfRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vrfregmsgs_(from.vrfregmsgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegMsg)
}

inline void SLAFVrfRegMsg::SharedCtor() {
oper_ = 0;
}

SLAFVrfRegMsg::~SLAFVrfRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLAFVrfRegMsg::ArenaDtor(void* object) {
  SLAFVrfRegMsg* _this = reinterpret_cast< SLAFVrfRegMsg* >(object);
  (void)_this;
}
void SLAFVrfRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfregmsgs_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrfregmsgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vrfregmsgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vrfregmsgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegMsg)
  return target;
}

size_t SLAFVrfRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
  total_size += 1UL * this->_internal_vrfregmsgs_size();
  for (const auto& msg : this->vrfregmsgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegMsg::GetClassData() const { return &_class_data_; }

void SLAFVrfRegMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegMsg *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegMsg &>(from));
}


void SLAFVrfRegMsg::MergeFrom(const SLAFVrfRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vrfregmsgs_.MergeFrom(from.vrfregmsgs_);
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegMsg::CopyFrom(const SLAFVrfRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegMsg::IsInitialized() const {
  return true;
}

void SLAFVrfRegMsg::InternalSwap(SLAFVrfRegMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vrfregmsgs_.InternalSwap(&other->vrfregmsgs_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[1]);
}

// ===================================================================

class SLAFVrfRegMsgRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLAFVrfRegMsgRes* msg);
};

const ::service_layer::SLErrorStatus&
SLAFVrfRegMsgRes::_Internal::errstatus(const SLAFVrfRegMsgRes* msg) {
  return *msg->errstatus_;
}
void SLAFVrfRegMsgRes::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLAFVrfRegMsgRes::SLAFVrfRegMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegMsgRes)
}
SLAFVrfRegMsgRes::SLAFVrfRegMsgRes(const SLAFVrfRegMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  table_ = from.table_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegMsgRes)
}

inline void SLAFVrfRegMsgRes::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(table_));
}

SLAFVrfRegMsgRes::~SLAFVrfRegMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegMsgRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLAFVrfRegMsgRes::ArenaDtor(void* object) {
  SLAFVrfRegMsgRes* _this = reinterpret_cast< SLAFVrfRegMsgRes* >(object);
  (void)_this;
}
void SLAFVrfRegMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegMsgRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  table_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFVrfRegMsgRes.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLTableType Table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::service_layer::SLTableType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegMsgRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegMsgRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFVrfRegMsgRes.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegMsgRes)
  return target;
}

size_t SLAFVrfRegMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegMsgRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLTableType Table = 3;
  if (this->_internal_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegMsgRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegMsgRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegMsgRes::GetClassData() const { return &_class_data_; }

void SLAFVrfRegMsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegMsgRes *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegMsgRes &>(from));
}


void SLAFVrfRegMsgRes::MergeFrom(const SLAFVrfRegMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_table() != 0) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegMsgRes::CopyFrom(const SLAFVrfRegMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegMsgRes::IsInitialized() const {
  return true;
}

void SLAFVrfRegMsgRes::InternalSwap(SLAFVrfRegMsgRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFVrfRegMsgRes, table_)
      + sizeof(SLAFVrfRegMsgRes::table_)
      - PROTOBUF_FIELD_OFFSET(SLAFVrfRegMsgRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegMsgRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[2]);
}

// ===================================================================

class SLAFVrfRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLAFVrfRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLAFVrfRegMsgRsp::_Internal::statussummary(const SLAFVrfRegMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLAFVrfRegMsgRsp::clear_statussummary() {
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLAFVrfRegMsgRsp::SLAFVrfRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFVrfRegMsgRsp)
}
SLAFVrfRegMsgRsp::SLAFVrfRegMsgRsp(const SLAFVrfRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFVrfRegMsgRsp)
}

inline void SLAFVrfRegMsgRsp::SharedCtor() {
statussummary_ = nullptr;
}

SLAFVrfRegMsgRsp::~SLAFVrfRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFVrfRegMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFVrfRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLAFVrfRegMsgRsp::ArenaDtor(void* object) {
  SLAFVrfRegMsgRsp* _this = reinterpret_cast< SLAFVrfRegMsgRsp* >(object);
  (void)_this;
}
void SLAFVrfRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFVrfRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFVrfRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFVrfRegMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFVrfRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFVrfRegMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFVrfRegMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFVrfRegMsgRsp)
  return target;
}

size_t SLAFVrfRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFVrfRegMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFVrfRegMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFVrfRegMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFVrfRegMsgRsp::GetClassData() const { return &_class_data_; }

void SLAFVrfRegMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFVrfRegMsgRsp *>(to)->MergeFrom(
      static_cast<const SLAFVrfRegMsgRsp &>(from));
}


void SLAFVrfRegMsgRsp::MergeFrom(const SLAFVrfRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFVrfRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFVrfRegMsgRsp::CopyFrom(const SLAFVrfRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFVrfRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFVrfRegMsgRsp::IsInitialized() const {
  return true;
}

void SLAFVrfRegMsgRsp::InternalSwap(SLAFVrfRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFVrfRegMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[3]);
}

// ===================================================================

class SLPathGroup_SLPath::_Internal {
 public:
  static const ::service_layer::SLRoutePath& path(const SLPathGroup_SLPath* msg);
};

const ::service_layer::SLRoutePath&
SLPathGroup_SLPath::_Internal::path(const SLPathGroup_SLPath* msg) {
  return *msg->path_;
}
void SLPathGroup_SLPath::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
SLPathGroup_SLPath::SLPathGroup_SLPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPathGroup.SLPath)
}
SLPathGroup_SLPath::SLPathGroup_SLPath(const SLPathGroup_SLPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::service_layer::SLRoutePath(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPathGroup.SLPath)
}

inline void SLPathGroup_SLPath::SharedCtor() {
path_ = nullptr;
}

SLPathGroup_SLPath::~SLPathGroup_SLPath() {
  // @@protoc_insertion_point(destructor:service_layer.SLPathGroup.SLPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPathGroup_SLPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void SLPathGroup_SLPath::ArenaDtor(void* object) {
  SLPathGroup_SLPath* _this = reinterpret_cast< SLPathGroup_SLPath* >(object);
  (void)_this;
}
void SLPathGroup_SLPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPathGroup_SLPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPathGroup_SLPath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPathGroup.SLPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPathGroup_SLPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRoutePath Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPathGroup_SLPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPathGroup.SLPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRoutePath Path = 1;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPathGroup.SLPath)
  return target;
}

size_t SLPathGroup_SLPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPathGroup.SLPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLRoutePath Path = 1;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPathGroup_SLPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPathGroup_SLPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPathGroup_SLPath::GetClassData() const { return &_class_data_; }

void SLPathGroup_SLPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPathGroup_SLPath *>(to)->MergeFrom(
      static_cast<const SLPathGroup_SLPath &>(from));
}


void SLPathGroup_SLPath::MergeFrom(const SLPathGroup_SLPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPathGroup.SLPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::service_layer::SLRoutePath::MergeFrom(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPathGroup_SLPath::CopyFrom(const SLPathGroup_SLPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPathGroup.SLPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPathGroup_SLPath::IsInitialized() const {
  return true;
}

void SLPathGroup_SLPath::InternalSwap(SLPathGroup_SLPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPathGroup_SLPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[4]);
}

// ===================================================================

class SLPathGroup_SLPathList::_Internal {
 public:
};

SLPathGroup_SLPathList::SLPathGroup_SLPathList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPathGroup.SLPathList)
}
SLPathGroup_SLPathList::SLPathGroup_SLPathList(const SLPathGroup_SLPathList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPathGroup.SLPathList)
}

inline void SLPathGroup_SLPathList::SharedCtor() {
}

SLPathGroup_SLPathList::~SLPathGroup_SLPathList() {
  // @@protoc_insertion_point(destructor:service_layer.SLPathGroup.SLPathList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPathGroup_SLPathList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPathGroup_SLPathList::ArenaDtor(void* object) {
  SLPathGroup_SLPathList* _this = reinterpret_cast< SLPathGroup_SLPathList* >(object);
  (void)_this;
}
void SLPathGroup_SLPathList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPathGroup_SLPathList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPathGroup_SLPathList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPathGroup.SLPathList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPathGroup_SLPathList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLPathGroup.SLPath Paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPathGroup_SLPathList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPathGroup.SLPathList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLPathGroup.SLPath Paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPathGroup.SLPathList)
  return target;
}

size_t SLPathGroup_SLPathList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPathGroup.SLPathList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPathGroup.SLPath Paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPathGroup_SLPathList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPathGroup_SLPathList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPathGroup_SLPathList::GetClassData() const { return &_class_data_; }

void SLPathGroup_SLPathList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPathGroup_SLPathList *>(to)->MergeFrom(
      static_cast<const SLPathGroup_SLPathList &>(from));
}


void SLPathGroup_SLPathList::MergeFrom(const SLPathGroup_SLPathList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPathGroup.SLPathList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPathGroup_SLPathList::CopyFrom(const SLPathGroup_SLPathList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPathGroup.SLPathList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPathGroup_SLPathList::IsInitialized() const {
  return true;
}

void SLPathGroup_SLPathList::InternalSwap(SLPathGroup_SLPathList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPathGroup_SLPathList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[5]);
}

// ===================================================================

class SLPathGroup::_Internal {
 public:
  static const ::service_layer::SLObjectId& pathgroupid(const SLPathGroup* msg);
  static const ::service_layer::SLPathGroup_SLPathList& pathlist(const SLPathGroup* msg);
};

const ::service_layer::SLObjectId&
SLPathGroup::_Internal::pathgroupid(const SLPathGroup* msg) {
  return *msg->pathgroupid_;
}
const ::service_layer::SLPathGroup_SLPathList&
SLPathGroup::_Internal::pathlist(const SLPathGroup* msg) {
  return *msg->entry_.pathlist_;
}
void SLPathGroup::clear_pathgroupid() {
  if (GetArenaForAllocation() == nullptr && pathgroupid_ != nullptr) {
    delete pathgroupid_;
  }
  pathgroupid_ = nullptr;
}
void SLPathGroup::set_allocated_pathlist(::service_layer::SLPathGroup_SLPathList* pathlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (pathlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLPathGroup_SLPathList>::GetOwningArena(pathlist);
    if (message_arena != submessage_arena) {
      pathlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathlist, submessage_arena);
    }
    set_has_pathlist();
    entry_.pathlist_ = pathlist;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPathGroup.PathList)
}
SLPathGroup::SLPathGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPathGroup)
}
SLPathGroup::SLPathGroup(const SLPathGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pathgroupid()) {
    pathgroupid_ = new ::service_layer::SLObjectId(*from.pathgroupid_);
  } else {
    pathgroupid_ = nullptr;
  }
  ::memcpy(&admindistance_, &from.admindistance_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&admindistance_)) + sizeof(flags_));
  clear_has_entry();
  switch (from.entry_case()) {
    case kPathList: {
      _internal_mutable_pathlist()->::service_layer::SLPathGroup_SLPathList::MergeFrom(from._internal_pathlist());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPathGroup)
}

inline void SLPathGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pathgroupid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&pathgroupid_)) + sizeof(flags_));
clear_has_entry();
}

SLPathGroup::~SLPathGroup() {
  // @@protoc_insertion_point(destructor:service_layer.SLPathGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPathGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pathgroupid_;
  if (has_entry()) {
    clear_entry();
  }
}

void SLPathGroup::ArenaDtor(void* object) {
  SLPathGroup* _this = reinterpret_cast< SLPathGroup* >(object);
  (void)_this;
}
void SLPathGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPathGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPathGroup::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLPathGroup)
  switch (entry_case()) {
    case kPathList: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.pathlist_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLPathGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPathGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pathgroupid_ != nullptr) {
    delete pathgroupid_;
  }
  pathgroupid_ = nullptr;
  ::memset(&admindistance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&admindistance_)) + sizeof(flags_));
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPathGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLObjectId PathGroupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroupid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AdminDistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPathGroup.SLPathList PathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPathGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPathGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectId PathGroupId = 1;
  if (this->_internal_has_pathgroupid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pathgroupid(this), target, stream);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_admindistance(), target);
  }

  // .service_layer.SLPathGroup.SLPathList PathList = 3;
  if (_internal_has_pathlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pathlist(this), target, stream);
  }

  // uint32 Flags = 4;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPathGroup)
  return target;
}

size_t SLPathGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPathGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLObjectId PathGroupId = 1;
  if (this->_internal_has_pathgroupid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathgroupid_);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_admindistance());
  }

  // uint32 Flags = 4;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  switch (entry_case()) {
    // .service_layer.SLPathGroup.SLPathList PathList = 3;
    case kPathList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.pathlist_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPathGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPathGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPathGroup::GetClassData() const { return &_class_data_; }

void SLPathGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPathGroup *>(to)->MergeFrom(
      static_cast<const SLPathGroup &>(from));
}


void SLPathGroup::MergeFrom(const SLPathGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPathGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pathgroupid()) {
    _internal_mutable_pathgroupid()->::service_layer::SLObjectId::MergeFrom(from._internal_pathgroupid());
  }
  if (from._internal_admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  switch (from.entry_case()) {
    case kPathList: {
      _internal_mutable_pathlist()->::service_layer::SLPathGroup_SLPathList::MergeFrom(from._internal_pathlist());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPathGroup::CopyFrom(const SLPathGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPathGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPathGroup::IsInitialized() const {
  return true;
}

void SLPathGroup::InternalSwap(SLPathGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPathGroup, flags_)
      + sizeof(SLPathGroup::flags_)
      - PROTOBUF_FIELD_OFFSET(SLPathGroup, pathgroupid_)>(
          reinterpret_cast<char*>(&pathgroupid_),
          reinterpret_cast<char*>(&other->pathgroupid_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPathGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[6]);
}

// ===================================================================

class SLMplsEntry::_Internal {
 public:
  static const ::service_layer::SLPathGroupRefKey& pathgroupkey(const SLMplsEntry* msg);
};

const ::service_layer::SLPathGroupRefKey&
SLMplsEntry::_Internal::pathgroupkey(const SLMplsEntry* msg) {
  return *msg->entry_.pathgroupkey_;
}
void SLMplsEntry::clear_pathlist() {
  pathlist_.Clear();
}
void SLMplsEntry::set_allocated_pathgroupkey(::service_layer::SLPathGroupRefKey* pathgroupkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (pathgroupkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pathgroupkey));
    if (message_arena != submessage_arena) {
      pathgroupkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathgroupkey, submessage_arena);
    }
    set_has_pathgroupkey();
    entry_.pathgroupkey_ = pathgroupkey;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsEntry.PathGroupKey)
}
void SLMplsEntry::clear_pathgroupkey() {
  if (_internal_has_pathgroupkey()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.pathgroupkey_;
    }
    clear_has_entry();
  }
}
SLMplsEntry::SLMplsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pathlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsEntry)
}
SLMplsEntry::SLMplsEntry(const SLMplsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pathlist_(from.pathlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&locallabel_, &from.locallabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&locallabel_)) + sizeof(flags_));
  clear_has_entry();
  switch (from.entry_case()) {
    case kPathGroupKey: {
      _internal_mutable_pathgroupkey()->::service_layer::SLPathGroupRefKey::MergeFrom(from._internal_pathgroupkey());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsEntry)
}

inline void SLMplsEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locallabel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&locallabel_)) + sizeof(flags_));
clear_has_entry();
}

SLMplsEntry::~SLMplsEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLMplsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLMplsEntry::ArenaDtor(void* object) {
  SLMplsEntry* _this = reinterpret_cast< SLMplsEntry* >(object);
  (void)_this;
}
void SLMplsEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLMplsEntry::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLMplsEntry)
  switch (entry_case()) {
    case kPathGroupKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.pathgroupkey_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLMplsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathlist_.Clear();
  ::memset(&locallabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&locallabel_)) + sizeof(flags_));
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocalLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          locallabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AdminDistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutePath PathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPathGroupRefKey PathGroupKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroupkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLMplsEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocalLabel = 1;
  if (this->_internal_locallabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_locallabel(), target);
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_admindistance(), target);
  }

  // repeated .service_layer.SLRoutePath PathList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pathlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pathlist(i), target, stream);
  }

  // .service_layer.SLPathGroupRefKey PathGroupKey = 4;
  if (_internal_has_pathgroupkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pathgroupkey(this), target, stream);
  }

  // uint32 Flags = 5;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsEntry)
  return target;
}

size_t SLMplsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutePath PathList = 3;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 LocalLabel = 1;
  if (this->_internal_locallabel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_locallabel());
  }

  // uint32 AdminDistance = 2;
  if (this->_internal_admindistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_admindistance());
  }

  // uint32 Flags = 5;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  switch (entry_case()) {
    // .service_layer.SLPathGroupRefKey PathGroupKey = 4;
    case kPathGroupKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.pathgroupkey_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLMplsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLMplsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLMplsEntry::GetClassData() const { return &_class_data_; }

void SLMplsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLMplsEntry *>(to)->MergeFrom(
      static_cast<const SLMplsEntry &>(from));
}


void SLMplsEntry::MergeFrom(const SLMplsEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pathlist_.MergeFrom(from.pathlist_);
  if (from._internal_locallabel() != 0) {
    _internal_set_locallabel(from._internal_locallabel());
  }
  if (from._internal_admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  switch (from.entry_case()) {
    case kPathGroupKey: {
      _internal_mutable_pathgroupkey()->::service_layer::SLPathGroupRefKey::MergeFrom(from._internal_pathgroupkey());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLMplsEntry::CopyFrom(const SLMplsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsEntry::IsInitialized() const {
  return true;
}

void SLMplsEntry::InternalSwap(SLMplsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pathlist_.InternalSwap(&other->pathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsEntry, flags_)
      + sizeof(SLMplsEntry::flags_)
      - PROTOBUF_FIELD_OFFSET(SLMplsEntry, locallabel_)>(
          reinterpret_cast<char*>(&locallabel_),
          reinterpret_cast<char*>(&other->locallabel_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[7]);
}

// ===================================================================

class SLAFObject::_Internal {
 public:
  static const ::service_layer::SLRoutev4& ipv4route(const SLAFObject* msg);
  static const ::service_layer::SLRoutev6& ipv6route(const SLAFObject* msg);
  static const ::service_layer::SLMplsEntry& mplslabel(const SLAFObject* msg);
  static const ::service_layer::SLPathGroup& pathgroup(const SLAFObject* msg);
};

const ::service_layer::SLRoutev4&
SLAFObject::_Internal::ipv4route(const SLAFObject* msg) {
  return *msg->entry_.ipv4route_;
}
const ::service_layer::SLRoutev6&
SLAFObject::_Internal::ipv6route(const SLAFObject* msg) {
  return *msg->entry_.ipv6route_;
}
const ::service_layer::SLMplsEntry&
SLAFObject::_Internal::mplslabel(const SLAFObject* msg) {
  return *msg->entry_.mplslabel_;
}
const ::service_layer::SLPathGroup&
SLAFObject::_Internal::pathgroup(const SLAFObject* msg) {
  return *msg->entry_.pathgroup_;
}
void SLAFObject::set_allocated_ipv4route(::service_layer::SLRoutev4* ipv4route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (ipv4route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv4route));
    if (message_arena != submessage_arena) {
      ipv4route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv4route, submessage_arena);
    }
    set_has_ipv4route();
    entry_.ipv4route_ = ipv4route;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.IPv4Route)
}
void SLAFObject::clear_ipv4route() {
  if (_internal_has_ipv4route()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.ipv4route_;
    }
    clear_has_entry();
  }
}
void SLAFObject::set_allocated_ipv6route(::service_layer::SLRoutev6* ipv6route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (ipv6route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6route));
    if (message_arena != submessage_arena) {
      ipv6route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv6route, submessage_arena);
    }
    set_has_ipv6route();
    entry_.ipv6route_ = ipv6route;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.IPv6Route)
}
void SLAFObject::clear_ipv6route() {
  if (_internal_has_ipv6route()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.ipv6route_;
    }
    clear_has_entry();
  }
}
void SLAFObject::set_allocated_mplslabel(::service_layer::SLMplsEntry* mplslabel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (mplslabel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLMplsEntry>::GetOwningArena(mplslabel);
    if (message_arena != submessage_arena) {
      mplslabel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mplslabel, submessage_arena);
    }
    set_has_mplslabel();
    entry_.mplslabel_ = mplslabel;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.MplsLabel)
}
void SLAFObject::set_allocated_pathgroup(::service_layer::SLPathGroup* pathgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (pathgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLPathGroup>::GetOwningArena(pathgroup);
    if (message_arena != submessage_arena) {
      pathgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathgroup, submessage_arena);
    }
    set_has_pathgroup();
    entry_.pathgroup_ = pathgroup;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFObject.PathGroup)
}
SLAFObject::SLAFObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFObject)
}
SLAFObject::SLAFObject(const SLAFObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kIPv4Route: {
      _internal_mutable_ipv4route()->::service_layer::SLRoutev4::MergeFrom(from._internal_ipv4route());
      break;
    }
    case kIPv6Route: {
      _internal_mutable_ipv6route()->::service_layer::SLRoutev6::MergeFrom(from._internal_ipv6route());
      break;
    }
    case kMplsLabel: {
      _internal_mutable_mplslabel()->::service_layer::SLMplsEntry::MergeFrom(from._internal_mplslabel());
      break;
    }
    case kPathGroup: {
      _internal_mutable_pathgroup()->::service_layer::SLPathGroup::MergeFrom(from._internal_pathgroup());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFObject)
}

inline void SLAFObject::SharedCtor() {
clear_has_entry();
}

SLAFObject::~SLAFObject() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLAFObject::ArenaDtor(void* object) {
  SLAFObject* _this = reinterpret_cast< SLAFObject* >(object);
  (void)_this;
}
void SLAFObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFObject::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLAFObject)
  switch (entry_case()) {
    case kIPv4Route: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.ipv4route_;
      }
      break;
    }
    case kIPv6Route: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.ipv6route_;
      }
      break;
    }
    case kMplsLabel: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.mplslabel_;
      }
      break;
    }
    case kPathGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.pathgroup_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLAFObject::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRoutev4 IPv4Route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv4route(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRoutev6 IPv6Route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv6route(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLMplsEntry MplsLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplslabel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPathGroup PathGroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRoutev4 IPv4Route = 1;
  if (_internal_has_ipv4route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ipv4route(this), target, stream);
  }

  // .service_layer.SLRoutev6 IPv6Route = 2;
  if (_internal_has_ipv6route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipv6route(this), target, stream);
  }

  // .service_layer.SLMplsEntry MplsLabel = 3;
  if (_internal_has_mplslabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mplslabel(this), target, stream);
  }

  // .service_layer.SLPathGroup PathGroup = 4;
  if (_internal_has_pathgroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pathgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFObject)
  return target;
}

size_t SLAFObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .service_layer.SLRoutev4 IPv4Route = 1;
    case kIPv4Route: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.ipv4route_);
      break;
    }
    // .service_layer.SLRoutev6 IPv6Route = 2;
    case kIPv6Route: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.ipv6route_);
      break;
    }
    // .service_layer.SLMplsEntry MplsLabel = 3;
    case kMplsLabel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.mplslabel_);
      break;
    }
    // .service_layer.SLPathGroup PathGroup = 4;
    case kPathGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.pathgroup_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFObject::GetClassData() const { return &_class_data_; }

void SLAFObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFObject *>(to)->MergeFrom(
      static_cast<const SLAFObject &>(from));
}


void SLAFObject::MergeFrom(const SLAFObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kIPv4Route: {
      _internal_mutable_ipv4route()->::service_layer::SLRoutev4::MergeFrom(from._internal_ipv4route());
      break;
    }
    case kIPv6Route: {
      _internal_mutable_ipv6route()->::service_layer::SLRoutev6::MergeFrom(from._internal_ipv6route());
      break;
    }
    case kMplsLabel: {
      _internal_mutable_mplslabel()->::service_layer::SLMplsEntry::MergeFrom(from._internal_mplslabel());
      break;
    }
    case kPathGroup: {
      _internal_mutable_pathgroup()->::service_layer::SLPathGroup::MergeFrom(from._internal_pathgroup());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFObject::CopyFrom(const SLAFObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFObject::IsInitialized() const {
  return true;
}

void SLAFObject::InternalSwap(SLAFObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[8]);
}

// ===================================================================

class SLAFOp::_Internal {
 public:
  static const ::service_layer::SLAFObject& afobject(const SLAFOp* msg);
};

const ::service_layer::SLAFObject&
SLAFOp::_Internal::afobject(const SLAFOp* msg) {
  return *msg->afobject_;
}
SLAFOp::SLAFOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFOp)
}
SLAFOp::SLAFOp(const SLAFOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_afobject()) {
    afobject_ = new ::service_layer::SLAFObject(*from.afobject_);
  } else {
    afobject_ = nullptr;
  }
  operationid_ = from.operationid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFOp)
}

inline void SLAFOp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operationid_) -
    reinterpret_cast<char*>(&afobject_)) + sizeof(operationid_));
}

SLAFOp::~SLAFOp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFOp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete afobject_;
}

void SLAFOp::ArenaDtor(void* object) {
  SLAFOp* _this = reinterpret_cast< SLAFOp* >(object);
  (void)_this;
}
void SLAFOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFOp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && afobject_ != nullptr) {
    delete afobject_;
  }
  afobject_ = nullptr;
  operationid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLAFObject AFObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_afobject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 OperationID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLAFObject AFObject = 1;
  if (this->_internal_has_afobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::afobject(this), target, stream);
  }

  // uint64 OperationID = 2;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFOp)
  return target;
}

size_t SLAFOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLAFObject AFObject = 1;
  if (this->_internal_has_afobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *afobject_);
  }

  // uint64 OperationID = 2;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFOp::GetClassData() const { return &_class_data_; }

void SLAFOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFOp *>(to)->MergeFrom(
      static_cast<const SLAFOp &>(from));
}


void SLAFOp::MergeFrom(const SLAFOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFOp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_afobject()) {
    _internal_mutable_afobject()->::service_layer::SLAFObject::MergeFrom(from._internal_afobject());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFOp::CopyFrom(const SLAFOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFOp::IsInitialized() const {
  return true;
}

void SLAFOp::InternalSwap(SLAFOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFOp, operationid_)
      + sizeof(SLAFOp::operationid_)
      - PROTOBUF_FIELD_OFFSET(SLAFOp, afobject_)>(
          reinterpret_cast<char*>(&afobject_),
          reinterpret_cast<char*>(&other->afobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFOp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[9]);
}

// ===================================================================

class SLAFMsg::_Internal {
 public:
};

SLAFMsg::SLAFMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  oplist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFMsg)
}
SLAFMsg::SLAFMsg(const SLAFMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oplist_(from.oplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&oper_, &from.oper_,
    static_cast<size_t>(reinterpret_cast<char*>(&acktype_) -
    reinterpret_cast<char*>(&oper_)) + sizeof(acktype_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFMsg)
}

inline void SLAFMsg::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acktype_) -
    reinterpret_cast<char*>(&oper_)) + sizeof(acktype_));
}

SLAFMsg::~SLAFMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFMsg::ArenaDtor(void* object) {
  SLAFMsg* _this = reinterpret_cast< SLAFMsg* >(object);
  (void)_this;
}
void SLAFMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oplist_.Clear();
  vrfname_.ClearToEmpty();
  ::memset(&oper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acktype_) -
      reinterpret_cast<char*>(&oper_)) + sizeof(acktype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFMsg.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRspACKType AckType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acktype(static_cast<::service_layer::SLRspACKType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFOp OpList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // .service_layer.SLRspACKType AckType = 3;
  if (this->_internal_acktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_acktype(), target);
  }

  // repeated .service_layer.SLAFOp OpList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_oplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFMsg)
  return target;
}

size_t SLAFMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFOp OpList = 4;
  total_size += 1UL * this->_internal_oplist_size();
  for (const auto& msg : this->oplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  // .service_layer.SLRspACKType AckType = 3;
  if (this->_internal_acktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_acktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFMsg::GetClassData() const { return &_class_data_; }

void SLAFMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFMsg *>(to)->MergeFrom(
      static_cast<const SLAFMsg &>(from));
}


void SLAFMsg::MergeFrom(const SLAFMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  oplist_.MergeFrom(from.oplist_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  if (from._internal_acktype() != 0) {
    _internal_set_acktype(from._internal_acktype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFMsg::CopyFrom(const SLAFMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFMsg::IsInitialized() const {
  return true;
}

void SLAFMsg::InternalSwap(SLAFMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  oplist_.InternalSwap(&other->oplist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFMsg, acktype_)
      + sizeof(SLAFMsg::acktype_)
      - PROTOBUF_FIELD_OFFSET(SLAFMsg, oper_)>(
          reinterpret_cast<char*>(&oper_),
          reinterpret_cast<char*>(&other->oper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[10]);
}

// ===================================================================

class SLAFRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLAFRes* msg);
  static const ::service_layer::SLAFOp& operation(const SLAFRes* msg);
};

const ::service_layer::SLErrorStatus&
SLAFRes::_Internal::errstatus(const SLAFRes* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLAFOp&
SLAFRes::_Internal::operation(const SLAFRes* msg) {
  return *msg->operation_;
}
void SLAFRes::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLAFRes::SLAFRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFRes)
}
SLAFRes::SLAFRes(const SLAFRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_operation()) {
    operation_ = new ::service_layer::SLAFOp(*from.operation_);
  } else {
    operation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFRes)
}

inline void SLAFRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(operation_));
}

SLAFRes::~SLAFRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete operation_;
}

void SLAFRes::ArenaDtor(void* object) {
  SLAFRes* _this = reinterpret_cast< SLAFRes* >(object);
  (void)_this;
}
void SLAFRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLAFOp Operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLAFOp Operation = 2;
  if (this->_internal_has_operation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::operation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFRes)
  return target;
}

size_t SLAFRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLAFOp Operation = 2;
  if (this->_internal_has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFRes::GetClassData() const { return &_class_data_; }

void SLAFRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFRes *>(to)->MergeFrom(
      static_cast<const SLAFRes &>(from));
}


void SLAFRes::MergeFrom(const SLAFRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_has_operation()) {
    _internal_mutable_operation()->::service_layer::SLAFOp::MergeFrom(from._internal_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFRes::CopyFrom(const SLAFRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFRes::IsInitialized() const {
  return true;
}

void SLAFRes::InternalSwap(SLAFRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLAFRes, operation_)
      + sizeof(SLAFRes::operation_)
      - PROTOBUF_FIELD_OFFSET(SLAFRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[11]);
}

// ===================================================================

class SLAFMsgRsp::_Internal {
 public:
};

SLAFMsgRsp::SLAFMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLAFMsgRsp)
}
SLAFMsgRsp::SLAFMsgRsp(const SLAFMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLAFMsgRsp)
}

inline void SLAFMsgRsp::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLAFMsgRsp::~SLAFMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLAFMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLAFMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLAFMsgRsp::ArenaDtor(void* object) {
  SLAFMsgRsp* _this = reinterpret_cast< SLAFMsgRsp* >(object);
  (void)_this;
}
void SLAFMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLAFMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLAFMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLAFMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  vrfname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLAFMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLAFMsgRsp.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLAFRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLAFMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLAFMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLAFMsgRsp.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLAFRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLAFMsgRsp)
  return target;
}

size_t SLAFMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLAFMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLAFRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLAFMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLAFMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLAFMsgRsp::GetClassData() const { return &_class_data_; }

void SLAFMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLAFMsgRsp *>(to)->MergeFrom(
      static_cast<const SLAFMsgRsp &>(from));
}


void SLAFMsgRsp::MergeFrom(const SLAFMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLAFMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLAFMsgRsp::CopyFrom(const SLAFMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLAFMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLAFMsgRsp::IsInitialized() const {
  return true;
}

void SLAFMsgRsp::InternalSwap(SLAFMsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLAFMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5faf_2eproto_getter, &descriptor_table_sl_5faf_2eproto_once,
      file_level_metadata_sl_5faf_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfReg* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfReg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFVrfRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFVrfRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFVrfRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPathGroup_SLPath* Arena::CreateMaybeMessage< ::service_layer::SLPathGroup_SLPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPathGroup_SLPath >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPathGroup_SLPathList* Arena::CreateMaybeMessage< ::service_layer::SLPathGroup_SLPathList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPathGroup_SLPathList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPathGroup* Arena::CreateMaybeMessage< ::service_layer::SLPathGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPathGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsEntry* Arena::CreateMaybeMessage< ::service_layer::SLMplsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFObject* Arena::CreateMaybeMessage< ::service_layer::SLAFObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFObject >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFOp* Arena::CreateMaybeMessage< ::service_layer::SLAFOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFOp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFMsg* Arena::CreateMaybeMessage< ::service_layer::SLAFMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFRes* Arena::CreateMaybeMessage< ::service_layer::SLAFRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLAFMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLAFMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLAFMsgRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
