// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_af.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5faf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5faf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_mpls.pb.h"
#include "sl_route_common.pb.h"
#include "sl_route_ipv4.pb.h"
#include "sl_route_ipv6.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5faf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5faf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5faf_2eproto;
namespace service_layer {
class SLAFVrfReg;
struct SLAFVrfRegDefaultTypeInternal;
extern SLAFVrfRegDefaultTypeInternal _SLAFVrfReg_default_instance_;
class SLAFVrfRegMsg;
struct SLAFVrfRegMsgDefaultTypeInternal;
extern SLAFVrfRegMsgDefaultTypeInternal _SLAFVrfRegMsg_default_instance_;
class SLAFVrfRegMsgRes;
struct SLAFVrfRegMsgResDefaultTypeInternal;
extern SLAFVrfRegMsgResDefaultTypeInternal _SLAFVrfRegMsgRes_default_instance_;
class SLAFVrfRegMsgRsp;
struct SLAFVrfRegMsgRspDefaultTypeInternal;
extern SLAFVrfRegMsgRspDefaultTypeInternal _SLAFVrfRegMsgRsp_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLAFVrfReg* Arena::CreateMaybeMessage<::service_layer::SLAFVrfReg>(Arena*);
template<> ::service_layer::SLAFVrfRegMsg* Arena::CreateMaybeMessage<::service_layer::SLAFVrfRegMsg>(Arena*);
template<> ::service_layer::SLAFVrfRegMsgRes* Arena::CreateMaybeMessage<::service_layer::SLAFVrfRegMsgRes>(Arena*);
template<> ::service_layer::SLAFVrfRegMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLAFVrfRegMsgRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

// ===================================================================

class SLAFVrfReg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLAFVrfReg) */ {
 public:
  inline SLAFVrfReg() : SLAFVrfReg(nullptr) {}
  ~SLAFVrfReg() override;
  explicit constexpr SLAFVrfReg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLAFVrfReg(const SLAFVrfReg& from);
  SLAFVrfReg(SLAFVrfReg&& from) noexcept
    : SLAFVrfReg() {
    *this = ::std::move(from);
  }

  inline SLAFVrfReg& operator=(const SLAFVrfReg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLAFVrfReg& operator=(SLAFVrfReg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLAFVrfReg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLAFVrfReg* internal_default_instance() {
    return reinterpret_cast<const SLAFVrfReg*>(
               &_SLAFVrfReg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLAFVrfReg& a, SLAFVrfReg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLAFVrfReg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLAFVrfReg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLAFVrfReg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLAFVrfReg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLAFVrfReg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLAFVrfReg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLAFVrfReg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLAFVrfReg";
  }
  protected:
  explicit SLAFVrfReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfRegFieldNumber = 2,
    kTableFieldNumber = 1,
  };
  // .service_layer.SLVrfReg VrfReg = 2;
  bool has_vrfreg() const;
  private:
  bool _internal_has_vrfreg() const;
  public:
  void clear_vrfreg();
  const ::service_layer::SLVrfReg& vrfreg() const;
  PROTOBUF_NODISCARD ::service_layer::SLVrfReg* release_vrfreg();
  ::service_layer::SLVrfReg* mutable_vrfreg();
  void set_allocated_vrfreg(::service_layer::SLVrfReg* vrfreg);
  private:
  const ::service_layer::SLVrfReg& _internal_vrfreg() const;
  ::service_layer::SLVrfReg* _internal_mutable_vrfreg();
  public:
  void unsafe_arena_set_allocated_vrfreg(
      ::service_layer::SLVrfReg* vrfreg);
  ::service_layer::SLVrfReg* unsafe_arena_release_vrfreg();

  // .service_layer.SLTableType Table = 1;
  void clear_table();
  ::service_layer::SLTableType table() const;
  void set_table(::service_layer::SLTableType value);
  private:
  ::service_layer::SLTableType _internal_table() const;
  void _internal_set_table(::service_layer::SLTableType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLAFVrfReg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLVrfReg* vrfreg_;
  int table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5faf_2eproto;
};
// -------------------------------------------------------------------

class SLAFVrfRegMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLAFVrfRegMsg) */ {
 public:
  inline SLAFVrfRegMsg() : SLAFVrfRegMsg(nullptr) {}
  ~SLAFVrfRegMsg() override;
  explicit constexpr SLAFVrfRegMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLAFVrfRegMsg(const SLAFVrfRegMsg& from);
  SLAFVrfRegMsg(SLAFVrfRegMsg&& from) noexcept
    : SLAFVrfRegMsg() {
    *this = ::std::move(from);
  }

  inline SLAFVrfRegMsg& operator=(const SLAFVrfRegMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLAFVrfRegMsg& operator=(SLAFVrfRegMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLAFVrfRegMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLAFVrfRegMsg* internal_default_instance() {
    return reinterpret_cast<const SLAFVrfRegMsg*>(
               &_SLAFVrfRegMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLAFVrfRegMsg& a, SLAFVrfRegMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLAFVrfRegMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLAFVrfRegMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLAFVrfRegMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLAFVrfRegMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLAFVrfRegMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLAFVrfRegMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLAFVrfRegMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLAFVrfRegMsg";
  }
  protected:
  explicit SLAFVrfRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfRegMsgsFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
  int vrfregmsgs_size() const;
  private:
  int _internal_vrfregmsgs_size() const;
  public:
  void clear_vrfregmsgs();
  ::service_layer::SLAFVrfReg* mutable_vrfregmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfReg >*
      mutable_vrfregmsgs();
  private:
  const ::service_layer::SLAFVrfReg& _internal_vrfregmsgs(int index) const;
  ::service_layer::SLAFVrfReg* _internal_add_vrfregmsgs();
  public:
  const ::service_layer::SLAFVrfReg& vrfregmsgs(int index) const;
  ::service_layer::SLAFVrfReg* add_vrfregmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfReg >&
      vrfregmsgs() const;

  // .service_layer.SLRegOp Oper = 1;
  void clear_oper();
  ::service_layer::SLRegOp oper() const;
  void set_oper(::service_layer::SLRegOp value);
  private:
  ::service_layer::SLRegOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLRegOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLAFVrfRegMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfReg > vrfregmsgs_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5faf_2eproto;
};
// -------------------------------------------------------------------

class SLAFVrfRegMsgRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLAFVrfRegMsgRes) */ {
 public:
  inline SLAFVrfRegMsgRes() : SLAFVrfRegMsgRes(nullptr) {}
  ~SLAFVrfRegMsgRes() override;
  explicit constexpr SLAFVrfRegMsgRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLAFVrfRegMsgRes(const SLAFVrfRegMsgRes& from);
  SLAFVrfRegMsgRes(SLAFVrfRegMsgRes&& from) noexcept
    : SLAFVrfRegMsgRes() {
    *this = ::std::move(from);
  }

  inline SLAFVrfRegMsgRes& operator=(const SLAFVrfRegMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLAFVrfRegMsgRes& operator=(SLAFVrfRegMsgRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLAFVrfRegMsgRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLAFVrfRegMsgRes* internal_default_instance() {
    return reinterpret_cast<const SLAFVrfRegMsgRes*>(
               &_SLAFVrfRegMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLAFVrfRegMsgRes& a, SLAFVrfRegMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLAFVrfRegMsgRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLAFVrfRegMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLAFVrfRegMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLAFVrfRegMsgRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLAFVrfRegMsgRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLAFVrfRegMsgRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLAFVrfRegMsgRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLAFVrfRegMsgRes";
  }
  protected:
  explicit SLAFVrfRegMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kErrStatusFieldNumber = 1,
    kTableFieldNumber = 3,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrfname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrfname();
  PROTOBUF_NODISCARD std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLTableType Table = 3;
  void clear_table();
  ::service_layer::SLTableType table() const;
  void set_table(::service_layer::SLTableType value);
  private:
  ::service_layer::SLTableType _internal_table() const;
  void _internal_set_table(::service_layer::SLTableType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLAFVrfRegMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* errstatus_;
  int table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5faf_2eproto;
};
// -------------------------------------------------------------------

class SLAFVrfRegMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLAFVrfRegMsgRsp) */ {
 public:
  inline SLAFVrfRegMsgRsp() : SLAFVrfRegMsgRsp(nullptr) {}
  ~SLAFVrfRegMsgRsp() override;
  explicit constexpr SLAFVrfRegMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLAFVrfRegMsgRsp(const SLAFVrfRegMsgRsp& from);
  SLAFVrfRegMsgRsp(SLAFVrfRegMsgRsp&& from) noexcept
    : SLAFVrfRegMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLAFVrfRegMsgRsp& operator=(const SLAFVrfRegMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLAFVrfRegMsgRsp& operator=(SLAFVrfRegMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLAFVrfRegMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLAFVrfRegMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLAFVrfRegMsgRsp*>(
               &_SLAFVrfRegMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLAFVrfRegMsgRsp& a, SLAFVrfRegMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLAFVrfRegMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLAFVrfRegMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLAFVrfRegMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLAFVrfRegMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLAFVrfRegMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLAFVrfRegMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLAFVrfRegMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLAFVrfRegMsgRsp";
  }
  protected:
  explicit SLAFVrfRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusSummaryFieldNumber = 1,
  };
  // repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLAFVrfRegMsgRes* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfRegMsgRes >*
      mutable_results();
  private:
  const ::service_layer::SLAFVrfRegMsgRes& _internal_results(int index) const;
  ::service_layer::SLAFVrfRegMsgRes* _internal_add_results();
  public:
  const ::service_layer::SLAFVrfRegMsgRes& results(int index) const;
  ::service_layer::SLAFVrfRegMsgRes* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfRegMsgRes >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // @@protoc_insertion_point(class_scope:service_layer.SLAFVrfRegMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfRegMsgRes > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5faf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLAFVrfReg

// .service_layer.SLTableType Table = 1;
inline void SLAFVrfReg::clear_table() {
  table_ = 0;
}
inline ::service_layer::SLTableType SLAFVrfReg::_internal_table() const {
  return static_cast< ::service_layer::SLTableType >(table_);
}
inline ::service_layer::SLTableType SLAFVrfReg::table() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfReg.Table)
  return _internal_table();
}
inline void SLAFVrfReg::_internal_set_table(::service_layer::SLTableType value) {
  
  table_ = value;
}
inline void SLAFVrfReg::set_table(::service_layer::SLTableType value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:service_layer.SLAFVrfReg.Table)
}

// .service_layer.SLVrfReg VrfReg = 2;
inline bool SLAFVrfReg::_internal_has_vrfreg() const {
  return this != internal_default_instance() && vrfreg_ != nullptr;
}
inline bool SLAFVrfReg::has_vrfreg() const {
  return _internal_has_vrfreg();
}
inline const ::service_layer::SLVrfReg& SLAFVrfReg::_internal_vrfreg() const {
  const ::service_layer::SLVrfReg* p = vrfreg_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLVrfReg&>(
      ::service_layer::_SLVrfReg_default_instance_);
}
inline const ::service_layer::SLVrfReg& SLAFVrfReg::vrfreg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfReg.VrfReg)
  return _internal_vrfreg();
}
inline void SLAFVrfReg::unsafe_arena_set_allocated_vrfreg(
    ::service_layer::SLVrfReg* vrfreg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrfreg_);
  }
  vrfreg_ = vrfreg;
  if (vrfreg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLAFVrfReg.VrfReg)
}
inline ::service_layer::SLVrfReg* SLAFVrfReg::release_vrfreg() {
  
  ::service_layer::SLVrfReg* temp = vrfreg_;
  vrfreg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLVrfReg* SLAFVrfReg::unsafe_arena_release_vrfreg() {
  // @@protoc_insertion_point(field_release:service_layer.SLAFVrfReg.VrfReg)
  
  ::service_layer::SLVrfReg* temp = vrfreg_;
  vrfreg_ = nullptr;
  return temp;
}
inline ::service_layer::SLVrfReg* SLAFVrfReg::_internal_mutable_vrfreg() {
  
  if (vrfreg_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLVrfReg>(GetArenaForAllocation());
    vrfreg_ = p;
  }
  return vrfreg_;
}
inline ::service_layer::SLVrfReg* SLAFVrfReg::mutable_vrfreg() {
  ::service_layer::SLVrfReg* _msg = _internal_mutable_vrfreg();
  // @@protoc_insertion_point(field_mutable:service_layer.SLAFVrfReg.VrfReg)
  return _msg;
}
inline void SLAFVrfReg::set_allocated_vrfreg(::service_layer::SLVrfReg* vrfreg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrfreg_);
  }
  if (vrfreg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrfreg));
    if (message_arena != submessage_arena) {
      vrfreg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfreg, submessage_arena);
    }
    
  } else {
    
  }
  vrfreg_ = vrfreg;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFVrfReg.VrfReg)
}

// -------------------------------------------------------------------

// SLAFVrfRegMsg

// .service_layer.SLRegOp Oper = 1;
inline void SLAFVrfRegMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLRegOp SLAFVrfRegMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
inline ::service_layer::SLRegOp SLAFVrfRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsg.Oper)
  return _internal_oper();
}
inline void SLAFVrfRegMsg::_internal_set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
}
inline void SLAFVrfRegMsg::set_oper(::service_layer::SLRegOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLAFVrfRegMsg.Oper)
}

// repeated .service_layer.SLAFVrfReg VrfRegMsgs = 2;
inline int SLAFVrfRegMsg::_internal_vrfregmsgs_size() const {
  return vrfregmsgs_.size();
}
inline int SLAFVrfRegMsg::vrfregmsgs_size() const {
  return _internal_vrfregmsgs_size();
}
inline void SLAFVrfRegMsg::clear_vrfregmsgs() {
  vrfregmsgs_.Clear();
}
inline ::service_layer::SLAFVrfReg* SLAFVrfRegMsg::mutable_vrfregmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLAFVrfRegMsg.VrfRegMsgs)
  return vrfregmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfReg >*
SLAFVrfRegMsg::mutable_vrfregmsgs() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLAFVrfRegMsg.VrfRegMsgs)
  return &vrfregmsgs_;
}
inline const ::service_layer::SLAFVrfReg& SLAFVrfRegMsg::_internal_vrfregmsgs(int index) const {
  return vrfregmsgs_.Get(index);
}
inline const ::service_layer::SLAFVrfReg& SLAFVrfRegMsg::vrfregmsgs(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsg.VrfRegMsgs)
  return _internal_vrfregmsgs(index);
}
inline ::service_layer::SLAFVrfReg* SLAFVrfRegMsg::_internal_add_vrfregmsgs() {
  return vrfregmsgs_.Add();
}
inline ::service_layer::SLAFVrfReg* SLAFVrfRegMsg::add_vrfregmsgs() {
  ::service_layer::SLAFVrfReg* _add = _internal_add_vrfregmsgs();
  // @@protoc_insertion_point(field_add:service_layer.SLAFVrfRegMsg.VrfRegMsgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfReg >&
SLAFVrfRegMsg::vrfregmsgs() const {
  // @@protoc_insertion_point(field_list:service_layer.SLAFVrfRegMsg.VrfRegMsgs)
  return vrfregmsgs_;
}

// -------------------------------------------------------------------

// SLAFVrfRegMsgRes

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLAFVrfRegMsgRes::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLAFVrfRegMsgRes::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLAFVrfRegMsgRes::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLAFVrfRegMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsgRes.ErrStatus)
  return _internal_errstatus();
}
inline void SLAFVrfRegMsgRes::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLAFVrfRegMsgRes.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRes::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRes::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLAFVrfRegMsgRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRes::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRes::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLAFVrfRegMsgRes.ErrStatus)
  return _msg;
}
inline void SLAFVrfRegMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFVrfRegMsgRes.ErrStatus)
}

// string VrfName = 2;
inline void SLAFVrfRegMsgRes::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLAFVrfRegMsgRes::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsgRes.VrfName)
  return _internal_vrfname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLAFVrfRegMsgRes::set_vrfname(ArgT0&& arg0, ArgT... args) {
 
 vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLAFVrfRegMsgRes.VrfName)
}
inline std::string* SLAFVrfRegMsgRes::mutable_vrfname() {
  std::string* _s = _internal_mutable_vrfname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLAFVrfRegMsgRes.VrfName)
  return _s;
}
inline const std::string& SLAFVrfRegMsgRes::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLAFVrfRegMsgRes::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLAFVrfRegMsgRes::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLAFVrfRegMsgRes::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLAFVrfRegMsgRes.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLAFVrfRegMsgRes::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vrfname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFVrfRegMsgRes.VrfName)
}

// .service_layer.SLTableType Table = 3;
inline void SLAFVrfRegMsgRes::clear_table() {
  table_ = 0;
}
inline ::service_layer::SLTableType SLAFVrfRegMsgRes::_internal_table() const {
  return static_cast< ::service_layer::SLTableType >(table_);
}
inline ::service_layer::SLTableType SLAFVrfRegMsgRes::table() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsgRes.Table)
  return _internal_table();
}
inline void SLAFVrfRegMsgRes::_internal_set_table(::service_layer::SLTableType value) {
  
  table_ = value;
}
inline void SLAFVrfRegMsgRes::set_table(::service_layer::SLTableType value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:service_layer.SLAFVrfRegMsgRes.Table)
}

// -------------------------------------------------------------------

// SLAFVrfRegMsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLAFVrfRegMsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLAFVrfRegMsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLAFVrfRegMsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLAFVrfRegMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLAFVrfRegMsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLAFVrfRegMsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLAFVrfRegMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLAFVrfRegMsgRsp::mutable_statussummary() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_statussummary();
  // @@protoc_insertion_point(field_mutable:service_layer.SLAFVrfRegMsgRsp.StatusSummary)
  return _msg;
}
inline void SLAFVrfRegMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary));
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLAFVrfRegMsgRsp.StatusSummary)
}

// repeated .service_layer.SLAFVrfRegMsgRes Results = 2;
inline int SLAFVrfRegMsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLAFVrfRegMsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLAFVrfRegMsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLAFVrfRegMsgRes* SLAFVrfRegMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLAFVrfRegMsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfRegMsgRes >*
SLAFVrfRegMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLAFVrfRegMsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLAFVrfRegMsgRes& SLAFVrfRegMsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLAFVrfRegMsgRes& SLAFVrfRegMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLAFVrfRegMsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLAFVrfRegMsgRes* SLAFVrfRegMsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLAFVrfRegMsgRes* SLAFVrfRegMsgRsp::add_results() {
  ::service_layer::SLAFVrfRegMsgRes* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:service_layer.SLAFVrfRegMsgRsp.Results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLAFVrfRegMsgRes >&
SLAFVrfRegMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLAFVrfRegMsgRsp.Results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5faf_2eproto
