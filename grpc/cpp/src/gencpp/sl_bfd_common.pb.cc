// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_common.proto

#include "sl_bfd_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLBfdRegMsg::SLBfdRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oper_(0)
{}
struct SLBfdRegMsgDefaultTypeInternal {
  constexpr SLBfdRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdRegMsgDefaultTypeInternal() {}
  union {
    SLBfdRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdRegMsgDefaultTypeInternal _SLBfdRegMsg_default_instance_;
constexpr SLBfdRegMsgRsp::SLBfdRegMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr){}
struct SLBfdRegMsgRspDefaultTypeInternal {
  constexpr SLBfdRegMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdRegMsgRspDefaultTypeInternal() {}
  union {
    SLBfdRegMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdRegMsgRspDefaultTypeInternal _SLBfdRegMsgRsp_default_instance_;
constexpr SLBfdGetMsg::SLBfdGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLBfdGetMsgDefaultTypeInternal {
  constexpr SLBfdGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdGetMsgDefaultTypeInternal() {}
  union {
    SLBfdGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdGetMsgDefaultTypeInternal _SLBfdGetMsg_default_instance_;
constexpr SLBfdGetMsgRsp::SLBfdGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , maxbfdsessioncfgperslbfdmsg_(0u)
  , minbfdtxintervalsinglehop_(0u)
  , minbfdtxintervalmultihop_(0u)
  , minbfddetectmultipliersinglehop_(0u)
  , minbfddetectmultipliermultihop_(0u){}
struct SLBfdGetMsgRspDefaultTypeInternal {
  constexpr SLBfdGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdGetMsgRspDefaultTypeInternal() {}
  union {
    SLBfdGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdGetMsgRspDefaultTypeInternal _SLBfdGetMsgRsp_default_instance_;
constexpr SLBfdGetStatsMsgRsp::SLBfdGetStatsMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , seqnum_(uint64_t{0u})
  , bfdcount_(0u){}
struct SLBfdGetStatsMsgRspDefaultTypeInternal {
  constexpr SLBfdGetStatsMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdGetStatsMsgRspDefaultTypeInternal() {}
  union {
    SLBfdGetStatsMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdGetStatsMsgRspDefaultTypeInternal _SLBfdGetStatsMsgRsp_default_instance_;
constexpr SLBfdGetNotifMsg::SLBfdGetNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLBfdGetNotifMsgDefaultTypeInternal {
  constexpr SLBfdGetNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdGetNotifMsgDefaultTypeInternal() {}
  union {
    SLBfdGetNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdGetNotifMsgDefaultTypeInternal _SLBfdGetNotifMsg_default_instance_;
constexpr SLBfdConfigCommon::SLBfdConfigCommon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desiredtxintusec_(0u)
  , detectmultiplier_(0u){}
struct SLBfdConfigCommonDefaultTypeInternal {
  constexpr SLBfdConfigCommonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdConfigCommonDefaultTypeInternal() {}
  union {
    SLBfdConfigCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdConfigCommonDefaultTypeInternal _SLBfdConfigCommon_default_instance_;
constexpr SLBfdCommonState::SLBfdCommonState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seqnum_(uint64_t{0u})
  , status_(0)

  , diag_(0)
{}
struct SLBfdCommonStateDefaultTypeInternal {
  constexpr SLBfdCommonStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdCommonStateDefaultTypeInternal() {}
  union {
    SLBfdCommonState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdCommonStateDefaultTypeInternal _SLBfdCommonState_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fbfd_5fcommon_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fbfd_5fcommon_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fbfd_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_sl_5fbfd_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdRegMsg, oper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdRegMsgRsp, errstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, maxbfdsessioncfgperslbfdmsg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, minbfdtxintervalsinglehop_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, minbfdtxintervalmultihop_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, minbfddetectmultipliersinglehop_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetMsgRsp, minbfddetectmultipliermultihop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetStatsMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetStatsMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetStatsMsgRsp, seqnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetStatsMsgRsp, bfdcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdGetNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdConfigCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdConfigCommon, desiredtxintusec_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdConfigCommon, detectmultiplier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdCommonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdCommonState, seqnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdCommonState, status_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdCommonState, diag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLBfdRegMsg)},
  { 7, -1, -1, sizeof(::service_layer::SLBfdRegMsgRsp)},
  { 14, -1, -1, sizeof(::service_layer::SLBfdGetMsg)},
  { 20, -1, -1, sizeof(::service_layer::SLBfdGetMsgRsp)},
  { 32, -1, -1, sizeof(::service_layer::SLBfdGetStatsMsgRsp)},
  { 41, -1, -1, sizeof(::service_layer::SLBfdGetNotifMsg)},
  { 47, -1, -1, sizeof(::service_layer::SLBfdConfigCommon)},
  { 55, -1, -1, sizeof(::service_layer::SLBfdCommonState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdGetStatsMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdGetNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdConfigCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdCommonState_default_instance_),
};

const char descriptor_table_protodef_sl_5fbfd_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023sl_bfd_common.proto\022\rservice_layer\032\025sl"
  "_common_types.proto\"3\n\013SLBfdRegMsg\022$\n\004Op"
  "er\030\001 \001(\0162\026.service_layer.SLRegOp\"A\n\016SLBf"
  "dRegMsgRsp\022/\n\tErrStatus\030\001 \001(\0132\034.service_"
  "layer.SLErrorStatus\"\r\n\013SLBfdGetMsg\"\374\001\n\016S"
  "LBfdGetMsgRsp\022/\n\tErrStatus\030\001 \001(\0132\034.servi"
  "ce_layer.SLErrorStatus\022#\n\033MaxBfdSessionC"
  "fgPerSLBfdMsg\030\002 \001(\r\022!\n\031MinBfdTxIntervalS"
  "ingleHop\030\003 \001(\r\022 \n\030MinBfdTxIntervalMultiH"
  "op\030\004 \001(\r\022\'\n\037MinBfdDetectMultiplierSingle"
  "Hop\030\005 \001(\r\022&\n\036MinBfdDetectMultiplierMulti"
  "Hop\030\006 \001(\r\"h\n\023SLBfdGetStatsMsgRsp\022/\n\tErrS"
  "tatus\030\001 \001(\0132\034.service_layer.SLErrorStatu"
  "s\022\016\n\006SeqNum\030\002 \001(\004\022\020\n\010BfdCount\030\003 \001(\r\"\022\n\020S"
  "LBfdGetNotifMsg\"G\n\021SLBfdConfigCommon\022\030\n\020"
  "DesiredTxIntUsec\030\001 \001(\r\022\030\n\020DetectMultipli"
  "er\030\002 \001(\r\"\323\004\n\020SLBfdCommonState\022\016\n\006SeqNum\030"
  "\001 \001(\004\022>\n\006Status\030\002 \001(\0162..service_layer.SL"
  "BfdCommonState.SLBfdStateEnum\022@\n\004Diag\030\003 "
  "\001(\01622.service_layer.SLBfdCommonState.SLB"
  "fdDiagStateEnum\"\200\001\n\016SLBfdStateEnum\022 \n\034SL"
  "_BFD_SESSION_STATE_UNKNOWN\020\000\022\025\n\021SL_BFD_S"
  "ESSION_UP\020\001\022\027\n\023SL_BFD_SESSION_DOWN\020\002\022\034\n\030"
  "SL_BFD_NEIGHBOR_UNCONFIG\020\003\"\251\002\n\022SLBfdDiag"
  "StateEnum\022\024\n\020SL_BFD_DIAG_NONE\020\000\022\036\n\032SL_BF"
  "D_DIAG_DETECT_EXPIRED\020\001\022\030\n\024SL_BFD_DIAG_N"
  "BR_DOWN\020\002\022\031\n\025SL_BFD_DIAG_PATH_DOWN\020\003\022\"\n\036"
  "SL_BFD_DIAG_FWDING_PLANE_RESET\020\004\022\032\n\026SL_B"
  "FD_DIAG_ADMIN_DOWN\020\005\022\"\n\036SL_BFD_DIAG_REV_"
  "CONC_PATH_DOWN\020\006\022$\n SL_BFD_DIAG_ECHO_FUN"
  "CTION_FAILED\020\007\022\036\n\032SL_BFD_DIAG_CONC_PATH_"
  "DOWN\020\010*M\n\tSLBfdType\022\023\n\017SL_BFD_RESERVED\020\000"
  "\022\025\n\021SL_BFD_SINGLE_HOP\020\001\022\024\n\020SL_BFD_MULTI_"
  "HOP\020\002*r\n\016SLBfdNotifType\022\036\n\032SL_BFD_EVENT_"
  "TYPE_RESERVED\020\000\022\033\n\027SL_BFD_EVENT_TYPE_ERR"
  "OR\020\001\022#\n\037SL_BFD_EVENT_TYPE_SESSION_STATE\020"
  "\002BCZAgithub.com/Cisco-service-layer/serv"
  "ice-layer-objmodel/grpc/protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fbfd_5fcommon_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fbfd_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbfd_5fcommon_2eproto = {
  false, false, 1518, descriptor_table_protodef_sl_5fbfd_5fcommon_2eproto, "sl_bfd_common.proto", 
  &descriptor_table_sl_5fbfd_5fcommon_2eproto_once, descriptor_table_sl_5fbfd_5fcommon_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_sl_5fbfd_5fcommon_2eproto::offsets,
  file_level_metadata_sl_5fbfd_5fcommon_2eproto, file_level_enum_descriptors_sl_5fbfd_5fcommon_2eproto, file_level_service_descriptors_sl_5fbfd_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fbfd_5fcommon_2eproto_getter() {
  return &descriptor_table_sl_5fbfd_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fbfd_5fcommon_2eproto(&descriptor_table_sl_5fbfd_5fcommon_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdCommonState_SLBfdStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbfd_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fbfd_5fcommon_2eproto[0];
}
bool SLBfdCommonState_SLBfdStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_SESSION_STATE_UNKNOWN;
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_SESSION_UP;
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_SESSION_DOWN;
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_NEIGHBOR_UNCONFIG;
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SLBfdStateEnum_MIN;
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SLBfdStateEnum_MAX;
constexpr int SLBfdCommonState::SLBfdStateEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdCommonState_SLBfdDiagStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbfd_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fbfd_5fcommon_2eproto[1];
}
bool SLBfdCommonState_SLBfdDiagStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_NONE;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_DETECT_EXPIRED;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_NBR_DOWN;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_PATH_DOWN;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_FWDING_PLANE_RESET;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_ADMIN_DOWN;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_REV_CONC_PATH_DOWN;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_ECHO_FUNCTION_FAILED;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_CONC_PATH_DOWN;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SLBfdDiagStateEnum_MIN;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SLBfdDiagStateEnum_MAX;
constexpr int SLBfdCommonState::SLBfdDiagStateEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbfd_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fbfd_5fcommon_2eproto[2];
}
bool SLBfdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdNotifType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbfd_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fbfd_5fcommon_2eproto[3];
}
bool SLBfdNotifType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLBfdRegMsg::_Internal {
 public:
};

SLBfdRegMsg::SLBfdRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdRegMsg)
}
SLBfdRegMsg::SLBfdRegMsg(const SLBfdRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdRegMsg)
}

inline void SLBfdRegMsg::SharedCtor() {
oper_ = 0;
}

SLBfdRegMsg::~SLBfdRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdRegMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBfdRegMsg::ArenaDtor(void* object) {
  SLBfdRegMsg* _this = reinterpret_cast< SLBfdRegMsg* >(object);
  (void)_this;
}
void SLBfdRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdRegMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdRegMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdRegMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdRegMsg)
  return target;
}

size_t SLBfdRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdRegMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdRegMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdRegMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdRegMsg::GetClassData() const { return &_class_data_; }

void SLBfdRegMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdRegMsg *>(to)->MergeFrom(
      static_cast<const SLBfdRegMsg &>(from));
}


void SLBfdRegMsg::MergeFrom(const SLBfdRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdRegMsg::CopyFrom(const SLBfdRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdRegMsg::IsInitialized() const {
  return true;
}

void SLBfdRegMsg::InternalSwap(SLBfdRegMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdRegMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[0]);
}

// ===================================================================

class SLBfdRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdRegMsgRsp::_Internal::errstatus(const SLBfdRegMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLBfdRegMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdRegMsgRsp::SLBfdRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdRegMsgRsp)
}
SLBfdRegMsgRsp::SLBfdRegMsgRsp(const SLBfdRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdRegMsgRsp)
}

inline void SLBfdRegMsgRsp::SharedCtor() {
errstatus_ = nullptr;
}

SLBfdRegMsgRsp::~SLBfdRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdRegMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLBfdRegMsgRsp::ArenaDtor(void* object) {
  SLBfdRegMsgRsp* _this = reinterpret_cast< SLBfdRegMsgRsp* >(object);
  (void)_this;
}
void SLBfdRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdRegMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdRegMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdRegMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdRegMsgRsp)
  return target;
}

size_t SLBfdRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdRegMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdRegMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdRegMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdRegMsgRsp::GetClassData() const { return &_class_data_; }

void SLBfdRegMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdRegMsgRsp *>(to)->MergeFrom(
      static_cast<const SLBfdRegMsgRsp &>(from));
}


void SLBfdRegMsgRsp::MergeFrom(const SLBfdRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdRegMsgRsp::CopyFrom(const SLBfdRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdRegMsgRsp::IsInitialized() const {
  return true;
}

void SLBfdRegMsgRsp::InternalSwap(SLBfdRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(errstatus_, other->errstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdRegMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[1]);
}

// ===================================================================

class SLBfdGetMsg::_Internal {
 public:
};

SLBfdGetMsg::SLBfdGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdGetMsg)
}
SLBfdGetMsg::SLBfdGetMsg(const SLBfdGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdGetMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLBfdGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[2]);
}

// ===================================================================

class SLBfdGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdGetMsgRsp::_Internal::errstatus(const SLBfdGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLBfdGetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdGetMsgRsp::SLBfdGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdGetMsgRsp)
}
SLBfdGetMsgRsp::SLBfdGetMsgRsp(const SLBfdGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&maxbfdsessioncfgperslbfdmsg_, &from.maxbfdsessioncfgperslbfdmsg_,
    static_cast<size_t>(reinterpret_cast<char*>(&minbfddetectmultipliermultihop_) -
    reinterpret_cast<char*>(&maxbfdsessioncfgperslbfdmsg_)) + sizeof(minbfddetectmultipliermultihop_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetMsgRsp)
}

inline void SLBfdGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minbfddetectmultipliermultihop_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(minbfddetectmultipliermultihop_));
}

SLBfdGetMsgRsp::~SLBfdGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLBfdGetMsgRsp::ArenaDtor(void* object) {
  SLBfdGetMsgRsp* _this = reinterpret_cast< SLBfdGetMsgRsp* >(object);
  (void)_this;
}
void SLBfdGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&maxbfdsessioncfgperslbfdmsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minbfddetectmultipliermultihop_) -
      reinterpret_cast<char*>(&maxbfdsessioncfgperslbfdmsg_)) + sizeof(minbfddetectmultipliermultihop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maxbfdsessioncfgperslbfdmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MinBfdTxIntervalSingleHop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          minbfdtxintervalsinglehop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MinBfdTxIntervalMultiHop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          minbfdtxintervalmultihop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MinBfdDetectMultiplierSingleHop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          minbfddetectmultipliersinglehop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MinBfdDetectMultiplierMultiHop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          minbfddetectmultipliermultihop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
  if (this->_internal_maxbfdsessioncfgperslbfdmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxbfdsessioncfgperslbfdmsg(), target);
  }

  // uint32 MinBfdTxIntervalSingleHop = 3;
  if (this->_internal_minbfdtxintervalsinglehop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minbfdtxintervalsinglehop(), target);
  }

  // uint32 MinBfdTxIntervalMultiHop = 4;
  if (this->_internal_minbfdtxintervalmultihop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minbfdtxintervalmultihop(), target);
  }

  // uint32 MinBfdDetectMultiplierSingleHop = 5;
  if (this->_internal_minbfddetectmultipliersinglehop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_minbfddetectmultipliersinglehop(), target);
  }

  // uint32 MinBfdDetectMultiplierMultiHop = 6;
  if (this->_internal_minbfddetectmultipliermultihop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_minbfddetectmultipliermultihop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdGetMsgRsp)
  return target;
}

size_t SLBfdGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
  if (this->_internal_maxbfdsessioncfgperslbfdmsg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxbfdsessioncfgperslbfdmsg());
  }

  // uint32 MinBfdTxIntervalSingleHop = 3;
  if (this->_internal_minbfdtxintervalsinglehop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minbfdtxintervalsinglehop());
  }

  // uint32 MinBfdTxIntervalMultiHop = 4;
  if (this->_internal_minbfdtxintervalmultihop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minbfdtxintervalmultihop());
  }

  // uint32 MinBfdDetectMultiplierSingleHop = 5;
  if (this->_internal_minbfddetectmultipliersinglehop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minbfddetectmultipliersinglehop());
  }

  // uint32 MinBfdDetectMultiplierMultiHop = 6;
  if (this->_internal_minbfddetectmultipliermultihop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minbfddetectmultipliermultihop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLBfdGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLBfdGetMsgRsp &>(from));
}


void SLBfdGetMsgRsp::MergeFrom(const SLBfdGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_maxbfdsessioncfgperslbfdmsg() != 0) {
    _internal_set_maxbfdsessioncfgperslbfdmsg(from._internal_maxbfdsessioncfgperslbfdmsg());
  }
  if (from._internal_minbfdtxintervalsinglehop() != 0) {
    _internal_set_minbfdtxintervalsinglehop(from._internal_minbfdtxintervalsinglehop());
  }
  if (from._internal_minbfdtxintervalmultihop() != 0) {
    _internal_set_minbfdtxintervalmultihop(from._internal_minbfdtxintervalmultihop());
  }
  if (from._internal_minbfddetectmultipliersinglehop() != 0) {
    _internal_set_minbfddetectmultipliersinglehop(from._internal_minbfddetectmultipliersinglehop());
  }
  if (from._internal_minbfddetectmultipliermultihop() != 0) {
    _internal_set_minbfddetectmultipliermultihop(from._internal_minbfddetectmultipliermultihop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdGetMsgRsp::CopyFrom(const SLBfdGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdGetMsgRsp::IsInitialized() const {
  return true;
}

void SLBfdGetMsgRsp::InternalSwap(SLBfdGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdGetMsgRsp, minbfddetectmultipliermultihop_)
      + sizeof(SLBfdGetMsgRsp::minbfddetectmultipliermultihop_)
      - PROTOBUF_FIELD_OFFSET(SLBfdGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[3]);
}

// ===================================================================

class SLBfdGetStatsMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdGetStatsMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdGetStatsMsgRsp::_Internal::errstatus(const SLBfdGetStatsMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLBfdGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdGetStatsMsgRsp::SLBfdGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdGetStatsMsgRsp)
}
SLBfdGetStatsMsgRsp::SLBfdGetStatsMsgRsp(const SLBfdGetStatsMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&bfdcount_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(bfdcount_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetStatsMsgRsp)
}

inline void SLBfdGetStatsMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bfdcount_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(bfdcount_));
}

SLBfdGetStatsMsgRsp::~SLBfdGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdGetStatsMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdGetStatsMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLBfdGetStatsMsgRsp::ArenaDtor(void* object) {
  SLBfdGetStatsMsgRsp* _this = reinterpret_cast< SLBfdGetStatsMsgRsp* >(object);
  (void)_this;
}
void SLBfdGetStatsMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdGetStatsMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdGetStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdGetStatsMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bfdcount_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(bfdcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdGetStatsMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 SeqNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BfdCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bfdcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdGetStatsMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdGetStatsMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint64 SeqNum = 2;
  if (this->_internal_seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seqnum(), target);
  }

  // uint32 BfdCount = 3;
  if (this->_internal_bfdcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bfdcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdGetStatsMsgRsp)
  return target;
}

size_t SLBfdGetStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdGetStatsMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 SeqNum = 2;
  if (this->_internal_seqnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seqnum());
  }

  // uint32 BfdCount = 3;
  if (this->_internal_bfdcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bfdcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdGetStatsMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdGetStatsMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdGetStatsMsgRsp::GetClassData() const { return &_class_data_; }

void SLBfdGetStatsMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdGetStatsMsgRsp *>(to)->MergeFrom(
      static_cast<const SLBfdGetStatsMsgRsp &>(from));
}


void SLBfdGetStatsMsgRsp::MergeFrom(const SLBfdGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_bfdcount() != 0) {
    _internal_set_bfdcount(from._internal_bfdcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdGetStatsMsgRsp::CopyFrom(const SLBfdGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdGetStatsMsgRsp::IsInitialized() const {
  return true;
}

void SLBfdGetStatsMsgRsp::InternalSwap(SLBfdGetStatsMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdGetStatsMsgRsp, bfdcount_)
      + sizeof(SLBfdGetStatsMsgRsp::bfdcount_)
      - PROTOBUF_FIELD_OFFSET(SLBfdGetStatsMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdGetStatsMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[4]);
}

// ===================================================================

class SLBfdGetNotifMsg::_Internal {
 public:
};

SLBfdGetNotifMsg::SLBfdGetNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdGetNotifMsg)
}
SLBfdGetNotifMsg::SLBfdGetNotifMsg(const SLBfdGetNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetNotifMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdGetNotifMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdGetNotifMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLBfdGetNotifMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[5]);
}

// ===================================================================

class SLBfdConfigCommon::_Internal {
 public:
};

SLBfdConfigCommon::SLBfdConfigCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdConfigCommon)
}
SLBfdConfigCommon::SLBfdConfigCommon(const SLBfdConfigCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&desiredtxintusec_, &from.desiredtxintusec_,
    static_cast<size_t>(reinterpret_cast<char*>(&detectmultiplier_) -
    reinterpret_cast<char*>(&desiredtxintusec_)) + sizeof(detectmultiplier_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdConfigCommon)
}

inline void SLBfdConfigCommon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desiredtxintusec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detectmultiplier_) -
    reinterpret_cast<char*>(&desiredtxintusec_)) + sizeof(detectmultiplier_));
}

SLBfdConfigCommon::~SLBfdConfigCommon() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdConfigCommon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdConfigCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBfdConfigCommon::ArenaDtor(void* object) {
  SLBfdConfigCommon* _this = reinterpret_cast< SLBfdConfigCommon* >(object);
  (void)_this;
}
void SLBfdConfigCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdConfigCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdConfigCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdConfigCommon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&desiredtxintusec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detectmultiplier_) -
      reinterpret_cast<char*>(&desiredtxintusec_)) + sizeof(detectmultiplier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdConfigCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 DesiredTxIntUsec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          desiredtxintusec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DetectMultiplier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          detectmultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdConfigCommon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdConfigCommon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 DesiredTxIntUsec = 1;
  if (this->_internal_desiredtxintusec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_desiredtxintusec(), target);
  }

  // uint32 DetectMultiplier = 2;
  if (this->_internal_detectmultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_detectmultiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdConfigCommon)
  return target;
}

size_t SLBfdConfigCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdConfigCommon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 DesiredTxIntUsec = 1;
  if (this->_internal_desiredtxintusec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_desiredtxintusec());
  }

  // uint32 DetectMultiplier = 2;
  if (this->_internal_detectmultiplier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_detectmultiplier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdConfigCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdConfigCommon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdConfigCommon::GetClassData() const { return &_class_data_; }

void SLBfdConfigCommon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdConfigCommon *>(to)->MergeFrom(
      static_cast<const SLBfdConfigCommon &>(from));
}


void SLBfdConfigCommon::MergeFrom(const SLBfdConfigCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdConfigCommon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_desiredtxintusec() != 0) {
    _internal_set_desiredtxintusec(from._internal_desiredtxintusec());
  }
  if (from._internal_detectmultiplier() != 0) {
    _internal_set_detectmultiplier(from._internal_detectmultiplier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdConfigCommon::CopyFrom(const SLBfdConfigCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdConfigCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdConfigCommon::IsInitialized() const {
  return true;
}

void SLBfdConfigCommon::InternalSwap(SLBfdConfigCommon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdConfigCommon, detectmultiplier_)
      + sizeof(SLBfdConfigCommon::detectmultiplier_)
      - PROTOBUF_FIELD_OFFSET(SLBfdConfigCommon, desiredtxintusec_)>(
          reinterpret_cast<char*>(&desiredtxintusec_),
          reinterpret_cast<char*>(&other->desiredtxintusec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdConfigCommon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[6]);
}

// ===================================================================

class SLBfdCommonState::_Internal {
 public:
};

SLBfdCommonState::SLBfdCommonState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdCommonState)
}
SLBfdCommonState::SLBfdCommonState(const SLBfdCommonState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&diag_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(diag_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdCommonState)
}

inline void SLBfdCommonState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diag_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(diag_));
}

SLBfdCommonState::~SLBfdCommonState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdCommonState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdCommonState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBfdCommonState::ArenaDtor(void* object) {
  SLBfdCommonState* _this = reinterpret_cast< SLBfdCommonState* >(object);
  (void)_this;
}
void SLBfdCommonState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdCommonState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdCommonState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdCommonState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diag_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(diag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdCommonState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 SeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::service_layer::SLBfdCommonState_SLBfdStateEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diag(static_cast<::service_layer::SLBfdCommonState_SLBfdDiagStateEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdCommonState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdCommonState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 SeqNum = 1;
  if (this->_internal_seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
  if (this->_internal_diag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_diag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdCommonState)
  return target;
}

size_t SLBfdCommonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdCommonState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 SeqNum = 1;
  if (this->_internal_seqnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seqnum());
  }

  // .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
  if (this->_internal_diag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdCommonState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdCommonState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdCommonState::GetClassData() const { return &_class_data_; }

void SLBfdCommonState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdCommonState *>(to)->MergeFrom(
      static_cast<const SLBfdCommonState &>(from));
}


void SLBfdCommonState::MergeFrom(const SLBfdCommonState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdCommonState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_diag() != 0) {
    _internal_set_diag(from._internal_diag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdCommonState::CopyFrom(const SLBfdCommonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdCommonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdCommonState::IsInitialized() const {
  return true;
}

void SLBfdCommonState::InternalSwap(SLBfdCommonState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdCommonState, diag_)
      + sizeof(SLBfdCommonState::diag_)
      - PROTOBUF_FIELD_OFFSET(SLBfdCommonState, seqnum_)>(
          reinterpret_cast<char*>(&seqnum_),
          reinterpret_cast<char*>(&other->seqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdCommonState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fcommon_2eproto_getter, &descriptor_table_sl_5fbfd_5fcommon_2eproto_once,
      file_level_metadata_sl_5fbfd_5fcommon_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLBfdRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLBfdGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdGetStatsMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdGetStatsMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdGetStatsMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdGetNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLBfdGetNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdGetNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdConfigCommon* Arena::CreateMaybeMessage< ::service_layer::SLBfdConfigCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdConfigCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdCommonState* Arena::CreateMaybeMessage< ::service_layer::SLBfdCommonState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdCommonState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
