// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sl_bfd_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_layer {

namespace {

const ::google::protobuf::Descriptor* SLBfdRegMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdRegMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdRegMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdRegMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdGetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdGetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdGetMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdGetMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdGetStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdGetStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdGetNotifMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdGetNotifMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdConfigCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdConfigCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLBfdCommonState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLBfdCommonState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SLBfdCommonState_SLBfdStateEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SLBfdCommonState_SLBfdDiagStateEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SLBfdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SLBfdNotifType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sl_5fbfd_5fcommon_2eproto() {
  protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sl_bfd_common.proto");
  GOOGLE_CHECK(file != NULL);
  SLBfdRegMsg_descriptor_ = file->message_type(0);
  static const int SLBfdRegMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdRegMsg, oper_),
  };
  SLBfdRegMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdRegMsg_descriptor_,
      SLBfdRegMsg::default_instance_,
      SLBfdRegMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdRegMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdRegMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdRegMsg, _is_default_instance_));
  SLBfdRegMsgRsp_descriptor_ = file->message_type(1);
  static const int SLBfdRegMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdRegMsgRsp, errstatus_),
  };
  SLBfdRegMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdRegMsgRsp_descriptor_,
      SLBfdRegMsgRsp::default_instance_,
      SLBfdRegMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdRegMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdRegMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdRegMsgRsp, _is_default_instance_));
  SLBfdGetMsg_descriptor_ = file->message_type(2);
  static const int SLBfdGetMsg_offsets_[1] = {
  };
  SLBfdGetMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdGetMsg_descriptor_,
      SLBfdGetMsg::default_instance_,
      SLBfdGetMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdGetMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsg, _is_default_instance_));
  SLBfdGetMsgRsp_descriptor_ = file->message_type(3);
  static const int SLBfdGetMsgRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, maxbfdsessioncfgperslbfdmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, minbfdtxintervalsinglehop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, minbfdtxintervalmultihop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, minbfddetectmultipliersinglehop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, minbfddetectmultipliermultihop_),
  };
  SLBfdGetMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdGetMsgRsp_descriptor_,
      SLBfdGetMsgRsp::default_instance_,
      SLBfdGetMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdGetMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetMsgRsp, _is_default_instance_));
  SLBfdGetStatsMsgRsp_descriptor_ = file->message_type(4);
  static const int SLBfdGetStatsMsgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetStatsMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetStatsMsgRsp, seqnum_),
  };
  SLBfdGetStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdGetStatsMsgRsp_descriptor_,
      SLBfdGetStatsMsgRsp::default_instance_,
      SLBfdGetStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdGetStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetStatsMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetStatsMsgRsp, _is_default_instance_));
  SLBfdGetNotifMsg_descriptor_ = file->message_type(5);
  static const int SLBfdGetNotifMsg_offsets_[1] = {
  };
  SLBfdGetNotifMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdGetNotifMsg_descriptor_,
      SLBfdGetNotifMsg::default_instance_,
      SLBfdGetNotifMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdGetNotifMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetNotifMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdGetNotifMsg, _is_default_instance_));
  SLBfdConfigCommon_descriptor_ = file->message_type(6);
  static const int SLBfdConfigCommon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdConfigCommon, desiredtxintusec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdConfigCommon, detectmultiplier_),
  };
  SLBfdConfigCommon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdConfigCommon_descriptor_,
      SLBfdConfigCommon::default_instance_,
      SLBfdConfigCommon_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdConfigCommon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdConfigCommon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdConfigCommon, _is_default_instance_));
  SLBfdCommonState_descriptor_ = file->message_type(7);
  static const int SLBfdCommonState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdCommonState, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdCommonState, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdCommonState, diag_),
  };
  SLBfdCommonState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLBfdCommonState_descriptor_,
      SLBfdCommonState::default_instance_,
      SLBfdCommonState_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLBfdCommonState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdCommonState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLBfdCommonState, _is_default_instance_));
  SLBfdCommonState_SLBfdStateEnum_descriptor_ = SLBfdCommonState_descriptor_->enum_type(0);
  SLBfdCommonState_SLBfdDiagStateEnum_descriptor_ = SLBfdCommonState_descriptor_->enum_type(1);
  SLBfdType_descriptor_ = file->enum_type(0);
  SLBfdNotifType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sl_5fbfd_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdRegMsg_descriptor_, &SLBfdRegMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdRegMsgRsp_descriptor_, &SLBfdRegMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdGetMsg_descriptor_, &SLBfdGetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdGetMsgRsp_descriptor_, &SLBfdGetMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdGetStatsMsgRsp_descriptor_, &SLBfdGetStatsMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdGetNotifMsg_descriptor_, &SLBfdGetNotifMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdConfigCommon_descriptor_, &SLBfdConfigCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLBfdCommonState_descriptor_, &SLBfdCommonState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sl_5fbfd_5fcommon_2eproto() {
  delete SLBfdRegMsg::default_instance_;
  delete SLBfdRegMsg_reflection_;
  delete SLBfdRegMsgRsp::default_instance_;
  delete SLBfdRegMsgRsp_reflection_;
  delete SLBfdGetMsg::default_instance_;
  delete SLBfdGetMsg_reflection_;
  delete SLBfdGetMsgRsp::default_instance_;
  delete SLBfdGetMsgRsp_reflection_;
  delete SLBfdGetStatsMsgRsp::default_instance_;
  delete SLBfdGetStatsMsgRsp_reflection_;
  delete SLBfdGetNotifMsg::default_instance_;
  delete SLBfdGetNotifMsg_reflection_;
  delete SLBfdConfigCommon::default_instance_;
  delete SLBfdConfigCommon_reflection_;
  delete SLBfdCommonState::default_instance_;
  delete SLBfdCommonState_reflection_;
}

void protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_layer::protobuf_AddDesc_sl_5fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sl_bfd_common.proto\022\rservice_layer\032\025sl"
    "_common_types.proto\"3\n\013SLBfdRegMsg\022$\n\004Op"
    "er\030\001 \001(\0162\026.service_layer.SLRegOp\"A\n\016SLBf"
    "dRegMsgRsp\022/\n\tErrStatus\030\001 \001(\0132\034.service_"
    "layer.SLErrorStatus\"\r\n\013SLBfdGetMsg\"\374\001\n\016S"
    "LBfdGetMsgRsp\022/\n\tErrStatus\030\001 \001(\0132\034.servi"
    "ce_layer.SLErrorStatus\022#\n\033MaxBfdSessionC"
    "fgPerSLBfdMsg\030\002 \001(\r\022!\n\031MinBfdTxIntervalS"
    "ingleHop\030\003 \001(\r\022 \n\030MinBfdTxIntervalMultiH"
    "op\030\004 \001(\r\022\'\n\037MinBfdDetectMultiplierSingle"
    "Hop\030\005 \001(\r\022&\n\036MinBfdDetectMultiplierMulti"
    "Hop\030\006 \001(\r\"V\n\023SLBfdGetStatsMsgRsp\022/\n\tErrS"
    "tatus\030\001 \001(\0132\034.service_layer.SLErrorStatu"
    "s\022\016\n\006SeqNum\030\002 \001(\004\"\022\n\020SLBfdGetNotifMsg\"G\n"
    "\021SLBfdConfigCommon\022\030\n\020DesiredTxIntUsec\030\001"
    " \001(\r\022\030\n\020DetectMultiplier\030\002 \001(\r\"\323\004\n\020SLBfd"
    "CommonState\022\016\n\006SeqNum\030\001 \001(\004\022>\n\006Status\030\002 "
    "\001(\0162..service_layer.SLBfdCommonState.SLB"
    "fdStateEnum\022@\n\004Diag\030\003 \001(\01622.service_laye"
    "r.SLBfdCommonState.SLBfdDiagStateEnum\"\200\001"
    "\n\016SLBfdStateEnum\022 \n\034SL_BFD_SESSION_STATE"
    "_UNKNOWN\020\000\022\025\n\021SL_BFD_SESSION_UP\020\001\022\027\n\023SL_"
    "BFD_SESSION_DOWN\020\002\022\034\n\030SL_BFD_NEIGHBOR_UN"
    "CONFIG\020\003\"\251\002\n\022SLBfdDiagStateEnum\022\024\n\020SL_BF"
    "D_DIAG_NONE\020\000\022\036\n\032SL_BFD_DIAG_DETECT_EXPI"
    "RED\020\001\022\030\n\024SL_BFD_DIAG_NBR_DOWN\020\002\022\031\n\025SL_BF"
    "D_DIAG_PATH_DOWN\020\003\022\"\n\036SL_BFD_DIAG_FWDING"
    "_PLANE_RESET\020\004\022\032\n\026SL_BFD_DIAG_ADMIN_DOWN"
    "\020\005\022\"\n\036SL_BFD_DIAG_REV_CONC_PATH_DOWN\020\006\022$"
    "\n SL_BFD_DIAG_ECHO_FUNCTION_FAILED\020\007\022\036\n\032"
    "SL_BFD_DIAG_CONC_PATH_DOWN\020\010*M\n\tSLBfdTyp"
    "e\022\023\n\017SL_BFD_RESERVED\020\000\022\025\n\021SL_BFD_SINGLE_"
    "HOP\020\001\022\024\n\020SL_BFD_MULTI_HOP\020\002*r\n\016SLBfdNoti"
    "fType\022\036\n\032SL_BFD_EVENT_TYPE_RESERVED\020\000\022\033\n"
    "\027SL_BFD_EVENT_TYPE_ERROR\020\001\022#\n\037SL_BFD_EVE"
    "NT_TYPE_SESSION_STATE\020\002b\006proto3", 1431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl_bfd_common.proto", &protobuf_RegisterTypes);
  SLBfdRegMsg::default_instance_ = new SLBfdRegMsg();
  SLBfdRegMsgRsp::default_instance_ = new SLBfdRegMsgRsp();
  SLBfdGetMsg::default_instance_ = new SLBfdGetMsg();
  SLBfdGetMsgRsp::default_instance_ = new SLBfdGetMsgRsp();
  SLBfdGetStatsMsgRsp::default_instance_ = new SLBfdGetStatsMsgRsp();
  SLBfdGetNotifMsg::default_instance_ = new SLBfdGetNotifMsg();
  SLBfdConfigCommon::default_instance_ = new SLBfdConfigCommon();
  SLBfdCommonState::default_instance_ = new SLBfdCommonState();
  SLBfdRegMsg::default_instance_->InitAsDefaultInstance();
  SLBfdRegMsgRsp::default_instance_->InitAsDefaultInstance();
  SLBfdGetMsg::default_instance_->InitAsDefaultInstance();
  SLBfdGetMsgRsp::default_instance_->InitAsDefaultInstance();
  SLBfdGetStatsMsgRsp::default_instance_->InitAsDefaultInstance();
  SLBfdGetNotifMsg::default_instance_->InitAsDefaultInstance();
  SLBfdConfigCommon::default_instance_->InitAsDefaultInstance();
  SLBfdCommonState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sl_5fbfd_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sl_5fbfd_5fcommon_2eproto {
  StaticDescriptorInitializer_sl_5fbfd_5fcommon_2eproto() {
    protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  }
} static_descriptor_initializer_sl_5fbfd_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* SLBfdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdType_descriptor_;
}
bool SLBfdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLBfdNotifType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdNotifType_descriptor_;
}
bool SLBfdNotifType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBfdRegMsg::kOperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdRegMsg::SLBfdRegMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdRegMsg)
}

void SLBfdRegMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLBfdRegMsg::SLBfdRegMsg(const SLBfdRegMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdRegMsg)
}

void SLBfdRegMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oper_ = 0;
}

SLBfdRegMsg::~SLBfdRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdRegMsg)
  SharedDtor();
}

void SLBfdRegMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLBfdRegMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdRegMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdRegMsg_descriptor_;
}

const SLBfdRegMsg& SLBfdRegMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdRegMsg* SLBfdRegMsg::default_instance_ = NULL;

SLBfdRegMsg* SLBfdRegMsg::New(::google::protobuf::Arena* arena) const {
  SLBfdRegMsg* n = new SLBfdRegMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdRegMsg::Clear() {
  oper_ = 0;
}

bool SLBfdRegMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdRegMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLRegOp Oper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLRegOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdRegMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdRegMsg)
  return false;
#undef DO_
}

void SLBfdRegMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdRegMsg)
  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdRegMsg)
}

::google::protobuf::uint8* SLBfdRegMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdRegMsg)
  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdRegMsg)
  return target;
}

int SLBfdRegMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdRegMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdRegMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdRegMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdRegMsg::MergeFrom(const SLBfdRegMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLBfdRegMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdRegMsg::CopyFrom(const SLBfdRegMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdRegMsg::IsInitialized() const {

  return true;
}

void SLBfdRegMsg::Swap(SLBfdRegMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdRegMsg::InternalSwap(SLBfdRegMsg* other) {
  std::swap(oper_, other->oper_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdRegMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdRegMsg_descriptor_;
  metadata.reflection = SLBfdRegMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdRegMsg

// optional .service_layer.SLRegOp Oper = 1;
void SLBfdRegMsg::clear_oper() {
  oper_ = 0;
}
 ::service_layer::SLRegOp SLBfdRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdRegMsg.Oper)
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
 void SLBfdRegMsg::set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdRegMsg.Oper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBfdRegMsgRsp::kErrStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdRegMsgRsp::SLBfdRegMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdRegMsgRsp)
}

void SLBfdRegMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLBfdRegMsgRsp::SLBfdRegMsgRsp(const SLBfdRegMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdRegMsgRsp)
}

void SLBfdRegMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
}

SLBfdRegMsgRsp::~SLBfdRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdRegMsgRsp)
  SharedDtor();
}

void SLBfdRegMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLBfdRegMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdRegMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdRegMsgRsp_descriptor_;
}

const SLBfdRegMsgRsp& SLBfdRegMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdRegMsgRsp* SLBfdRegMsgRsp::default_instance_ = NULL;

SLBfdRegMsgRsp* SLBfdRegMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLBfdRegMsgRsp* n = new SLBfdRegMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdRegMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}

bool SLBfdRegMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdRegMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdRegMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdRegMsgRsp)
  return false;
#undef DO_
}

void SLBfdRegMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdRegMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdRegMsgRsp)
}

::google::protobuf::uint8* SLBfdRegMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdRegMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdRegMsgRsp)
  return target;
}

int SLBfdRegMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdRegMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdRegMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdRegMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdRegMsgRsp::MergeFrom(const SLBfdRegMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLBfdRegMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdRegMsgRsp::CopyFrom(const SLBfdRegMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdRegMsgRsp::IsInitialized() const {

  return true;
}

void SLBfdRegMsgRsp::Swap(SLBfdRegMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdRegMsgRsp::InternalSwap(SLBfdRegMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdRegMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdRegMsgRsp_descriptor_;
  metadata.reflection = SLBfdRegMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdRegMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLBfdRegMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLBfdRegMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLBfdRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdRegMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLBfdRegMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdRegMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLBfdRegMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLBfdRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdRegMsgRsp.ErrStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdGetMsg::SLBfdGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdGetMsg)
}

void SLBfdGetMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLBfdGetMsg::SLBfdGetMsg(const SLBfdGetMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetMsg)
}

void SLBfdGetMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SLBfdGetMsg::~SLBfdGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdGetMsg)
  SharedDtor();
}

void SLBfdGetMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLBfdGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdGetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdGetMsg_descriptor_;
}

const SLBfdGetMsg& SLBfdGetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdGetMsg* SLBfdGetMsg::default_instance_ = NULL;

SLBfdGetMsg* SLBfdGetMsg::New(::google::protobuf::Arena* arena) const {
  SLBfdGetMsg* n = new SLBfdGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdGetMsg::Clear() {
}

bool SLBfdGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdGetMsg)
  return false;
#undef DO_
}

void SLBfdGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdGetMsg)
  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdGetMsg)
}

::google::protobuf::uint8* SLBfdGetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdGetMsg)
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdGetMsg)
  return target;
}

int SLBfdGetMsg::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdGetMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdGetMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdGetMsg::MergeFrom(const SLBfdGetMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SLBfdGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdGetMsg::CopyFrom(const SLBfdGetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdGetMsg::IsInitialized() const {

  return true;
}

void SLBfdGetMsg::Swap(SLBfdGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdGetMsg::InternalSwap(SLBfdGetMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdGetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdGetMsg_descriptor_;
  metadata.reflection = SLBfdGetMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdGetMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBfdGetMsgRsp::kErrStatusFieldNumber;
const int SLBfdGetMsgRsp::kMaxBfdSessionCfgPerSLBfdMsgFieldNumber;
const int SLBfdGetMsgRsp::kMinBfdTxIntervalSingleHopFieldNumber;
const int SLBfdGetMsgRsp::kMinBfdTxIntervalMultiHopFieldNumber;
const int SLBfdGetMsgRsp::kMinBfdDetectMultiplierSingleHopFieldNumber;
const int SLBfdGetMsgRsp::kMinBfdDetectMultiplierMultiHopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdGetMsgRsp::SLBfdGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdGetMsgRsp)
}

void SLBfdGetMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLBfdGetMsgRsp::SLBfdGetMsgRsp(const SLBfdGetMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetMsgRsp)
}

void SLBfdGetMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  maxbfdsessioncfgperslbfdmsg_ = 0u;
  minbfdtxintervalsinglehop_ = 0u;
  minbfdtxintervalmultihop_ = 0u;
  minbfddetectmultipliersinglehop_ = 0u;
  minbfddetectmultipliermultihop_ = 0u;
}

SLBfdGetMsgRsp::~SLBfdGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdGetMsgRsp)
  SharedDtor();
}

void SLBfdGetMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLBfdGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdGetMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdGetMsgRsp_descriptor_;
}

const SLBfdGetMsgRsp& SLBfdGetMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdGetMsgRsp* SLBfdGetMsgRsp::default_instance_ = NULL;

SLBfdGetMsgRsp* SLBfdGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLBfdGetMsgRsp* n = new SLBfdGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdGetMsgRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLBfdGetMsgRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(maxbfdsessioncfgperslbfdmsg_, minbfddetectmultipliermultihop_);
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLBfdGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxBfdSessionCfgPerSLBfdMsg;
        break;
      }

      // optional uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxBfdSessionCfgPerSLBfdMsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbfdsessioncfgperslbfdmsg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MinBfdTxIntervalSingleHop;
        break;
      }

      // optional uint32 MinBfdTxIntervalSingleHop = 3;
      case 3: {
        if (tag == 24) {
         parse_MinBfdTxIntervalSingleHop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minbfdtxintervalsinglehop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MinBfdTxIntervalMultiHop;
        break;
      }

      // optional uint32 MinBfdTxIntervalMultiHop = 4;
      case 4: {
        if (tag == 32) {
         parse_MinBfdTxIntervalMultiHop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minbfdtxintervalmultihop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MinBfdDetectMultiplierSingleHop;
        break;
      }

      // optional uint32 MinBfdDetectMultiplierSingleHop = 5;
      case 5: {
        if (tag == 40) {
         parse_MinBfdDetectMultiplierSingleHop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minbfddetectmultipliersinglehop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MinBfdDetectMultiplierMultiHop;
        break;
      }

      // optional uint32 MinBfdDetectMultiplierMultiHop = 6;
      case 6: {
        if (tag == 48) {
         parse_MinBfdDetectMultiplierMultiHop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minbfddetectmultipliermultihop_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdGetMsgRsp)
  return false;
#undef DO_
}

void SLBfdGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdGetMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
  if (this->maxbfdsessioncfgperslbfdmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxbfdsessioncfgperslbfdmsg(), output);
  }

  // optional uint32 MinBfdTxIntervalSingleHop = 3;
  if (this->minbfdtxintervalsinglehop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minbfdtxintervalsinglehop(), output);
  }

  // optional uint32 MinBfdTxIntervalMultiHop = 4;
  if (this->minbfdtxintervalmultihop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minbfdtxintervalmultihop(), output);
  }

  // optional uint32 MinBfdDetectMultiplierSingleHop = 5;
  if (this->minbfddetectmultipliersinglehop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minbfddetectmultipliersinglehop(), output);
  }

  // optional uint32 MinBfdDetectMultiplierMultiHop = 6;
  if (this->minbfddetectmultipliermultihop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->minbfddetectmultipliermultihop(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdGetMsgRsp)
}

::google::protobuf::uint8* SLBfdGetMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdGetMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
  if (this->maxbfdsessioncfgperslbfdmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxbfdsessioncfgperslbfdmsg(), target);
  }

  // optional uint32 MinBfdTxIntervalSingleHop = 3;
  if (this->minbfdtxintervalsinglehop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minbfdtxintervalsinglehop(), target);
  }

  // optional uint32 MinBfdTxIntervalMultiHop = 4;
  if (this->minbfdtxintervalmultihop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minbfdtxintervalmultihop(), target);
  }

  // optional uint32 MinBfdDetectMultiplierSingleHop = 5;
  if (this->minbfddetectmultipliersinglehop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minbfddetectmultipliersinglehop(), target);
  }

  // optional uint32 MinBfdDetectMultiplierMultiHop = 6;
  if (this->minbfddetectmultipliermultihop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->minbfddetectmultipliermultihop(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdGetMsgRsp)
  return target;
}

int SLBfdGetMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
  if (this->maxbfdsessioncfgperslbfdmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxbfdsessioncfgperslbfdmsg());
  }

  // optional uint32 MinBfdTxIntervalSingleHop = 3;
  if (this->minbfdtxintervalsinglehop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minbfdtxintervalsinglehop());
  }

  // optional uint32 MinBfdTxIntervalMultiHop = 4;
  if (this->minbfdtxintervalmultihop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minbfdtxintervalmultihop());
  }

  // optional uint32 MinBfdDetectMultiplierSingleHop = 5;
  if (this->minbfddetectmultipliersinglehop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minbfddetectmultipliersinglehop());
  }

  // optional uint32 MinBfdDetectMultiplierMultiHop = 6;
  if (this->minbfddetectmultipliermultihop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minbfddetectmultipliermultihop());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdGetMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdGetMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdGetMsgRsp::MergeFrom(const SLBfdGetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.maxbfdsessioncfgperslbfdmsg() != 0) {
    set_maxbfdsessioncfgperslbfdmsg(from.maxbfdsessioncfgperslbfdmsg());
  }
  if (from.minbfdtxintervalsinglehop() != 0) {
    set_minbfdtxintervalsinglehop(from.minbfdtxintervalsinglehop());
  }
  if (from.minbfdtxintervalmultihop() != 0) {
    set_minbfdtxintervalmultihop(from.minbfdtxintervalmultihop());
  }
  if (from.minbfddetectmultipliersinglehop() != 0) {
    set_minbfddetectmultipliersinglehop(from.minbfddetectmultipliersinglehop());
  }
  if (from.minbfddetectmultipliermultihop() != 0) {
    set_minbfddetectmultipliermultihop(from.minbfddetectmultipliermultihop());
  }
}

void SLBfdGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdGetMsgRsp::CopyFrom(const SLBfdGetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdGetMsgRsp::IsInitialized() const {

  return true;
}

void SLBfdGetMsgRsp::Swap(SLBfdGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdGetMsgRsp::InternalSwap(SLBfdGetMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(maxbfdsessioncfgperslbfdmsg_, other->maxbfdsessioncfgperslbfdmsg_);
  std::swap(minbfdtxintervalsinglehop_, other->minbfdtxintervalsinglehop_);
  std::swap(minbfdtxintervalmultihop_, other->minbfdtxintervalmultihop_);
  std::swap(minbfddetectmultipliersinglehop_, other->minbfddetectmultipliersinglehop_);
  std::swap(minbfddetectmultipliermultihop_, other->minbfddetectmultipliermultihop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdGetMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdGetMsgRsp_descriptor_;
  metadata.reflection = SLBfdGetMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdGetMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLBfdGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLBfdGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLBfdGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLBfdGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLBfdGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLBfdGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdGetMsgRsp.ErrStatus)
}

// optional uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
void SLBfdGetMsgRsp::clear_maxbfdsessioncfgperslbfdmsg() {
  maxbfdsessioncfgperslbfdmsg_ = 0u;
}
 ::google::protobuf::uint32 SLBfdGetMsgRsp::maxbfdsessioncfgperslbfdmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MaxBfdSessionCfgPerSLBfdMsg)
  return maxbfdsessioncfgperslbfdmsg_;
}
 void SLBfdGetMsgRsp::set_maxbfdsessioncfgperslbfdmsg(::google::protobuf::uint32 value) {
  
  maxbfdsessioncfgperslbfdmsg_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MaxBfdSessionCfgPerSLBfdMsg)
}

// optional uint32 MinBfdTxIntervalSingleHop = 3;
void SLBfdGetMsgRsp::clear_minbfdtxintervalsinglehop() {
  minbfdtxintervalsinglehop_ = 0u;
}
 ::google::protobuf::uint32 SLBfdGetMsgRsp::minbfdtxintervalsinglehop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalSingleHop)
  return minbfdtxintervalsinglehop_;
}
 void SLBfdGetMsgRsp::set_minbfdtxintervalsinglehop(::google::protobuf::uint32 value) {
  
  minbfdtxintervalsinglehop_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalSingleHop)
}

// optional uint32 MinBfdTxIntervalMultiHop = 4;
void SLBfdGetMsgRsp::clear_minbfdtxintervalmultihop() {
  minbfdtxintervalmultihop_ = 0u;
}
 ::google::protobuf::uint32 SLBfdGetMsgRsp::minbfdtxintervalmultihop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalMultiHop)
  return minbfdtxintervalmultihop_;
}
 void SLBfdGetMsgRsp::set_minbfdtxintervalmultihop(::google::protobuf::uint32 value) {
  
  minbfdtxintervalmultihop_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalMultiHop)
}

// optional uint32 MinBfdDetectMultiplierSingleHop = 5;
void SLBfdGetMsgRsp::clear_minbfddetectmultipliersinglehop() {
  minbfddetectmultipliersinglehop_ = 0u;
}
 ::google::protobuf::uint32 SLBfdGetMsgRsp::minbfddetectmultipliersinglehop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierSingleHop)
  return minbfddetectmultipliersinglehop_;
}
 void SLBfdGetMsgRsp::set_minbfddetectmultipliersinglehop(::google::protobuf::uint32 value) {
  
  minbfddetectmultipliersinglehop_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierSingleHop)
}

// optional uint32 MinBfdDetectMultiplierMultiHop = 6;
void SLBfdGetMsgRsp::clear_minbfddetectmultipliermultihop() {
  minbfddetectmultipliermultihop_ = 0u;
}
 ::google::protobuf::uint32 SLBfdGetMsgRsp::minbfddetectmultipliermultihop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierMultiHop)
  return minbfddetectmultipliermultihop_;
}
 void SLBfdGetMsgRsp::set_minbfddetectmultipliermultihop(::google::protobuf::uint32 value) {
  
  minbfddetectmultipliermultihop_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierMultiHop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBfdGetStatsMsgRsp::kErrStatusFieldNumber;
const int SLBfdGetStatsMsgRsp::kSeqNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdGetStatsMsgRsp::SLBfdGetStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdGetStatsMsgRsp)
}

void SLBfdGetStatsMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLBfdGetStatsMsgRsp::SLBfdGetStatsMsgRsp(const SLBfdGetStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetStatsMsgRsp)
}

void SLBfdGetStatsMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  seqnum_ = GOOGLE_ULONGLONG(0);
}

SLBfdGetStatsMsgRsp::~SLBfdGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdGetStatsMsgRsp)
  SharedDtor();
}

void SLBfdGetStatsMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLBfdGetStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdGetStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdGetStatsMsgRsp_descriptor_;
}

const SLBfdGetStatsMsgRsp& SLBfdGetStatsMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdGetStatsMsgRsp* SLBfdGetStatsMsgRsp::default_instance_ = NULL;

SLBfdGetStatsMsgRsp* SLBfdGetStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLBfdGetStatsMsgRsp* n = new SLBfdGetStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdGetStatsMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  seqnum_ = GOOGLE_ULONGLONG(0);
}

bool SLBfdGetStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdGetStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SeqNum;
        break;
      }

      // optional uint64 SeqNum = 2;
      case 2: {
        if (tag == 16) {
         parse_SeqNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seqnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdGetStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdGetStatsMsgRsp)
  return false;
#undef DO_
}

void SLBfdGetStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdGetStatsMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seqnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdGetStatsMsgRsp)
}

::google::protobuf::uint8* SLBfdGetStatsMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdGetStatsMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seqnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdGetStatsMsgRsp)
  return target;
}

int SLBfdGetStatsMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seqnum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdGetStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdGetStatsMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdGetStatsMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdGetStatsMsgRsp::MergeFrom(const SLBfdGetStatsMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.seqnum() != 0) {
    set_seqnum(from.seqnum());
  }
}

void SLBfdGetStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdGetStatsMsgRsp::CopyFrom(const SLBfdGetStatsMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdGetStatsMsgRsp::IsInitialized() const {

  return true;
}

void SLBfdGetStatsMsgRsp::Swap(SLBfdGetStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdGetStatsMsgRsp::InternalSwap(SLBfdGetStatsMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(seqnum_, other->seqnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdGetStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdGetStatsMsgRsp_descriptor_;
  metadata.reflection = SLBfdGetStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdGetStatsMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLBfdGetStatsMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLBfdGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLBfdGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLBfdGetStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLBfdGetStatsMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLBfdGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
}

// optional uint64 SeqNum = 2;
void SLBfdGetStatsMsgRsp::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLBfdGetStatsMsgRsp::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetStatsMsgRsp.SeqNum)
  return seqnum_;
}
 void SLBfdGetStatsMsgRsp::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetStatsMsgRsp.SeqNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdGetNotifMsg::SLBfdGetNotifMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdGetNotifMsg)
}

void SLBfdGetNotifMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLBfdGetNotifMsg::SLBfdGetNotifMsg(const SLBfdGetNotifMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdGetNotifMsg)
}

void SLBfdGetNotifMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SLBfdGetNotifMsg::~SLBfdGetNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdGetNotifMsg)
  SharedDtor();
}

void SLBfdGetNotifMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLBfdGetNotifMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdGetNotifMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdGetNotifMsg_descriptor_;
}

const SLBfdGetNotifMsg& SLBfdGetNotifMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdGetNotifMsg* SLBfdGetNotifMsg::default_instance_ = NULL;

SLBfdGetNotifMsg* SLBfdGetNotifMsg::New(::google::protobuf::Arena* arena) const {
  SLBfdGetNotifMsg* n = new SLBfdGetNotifMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdGetNotifMsg::Clear() {
}

bool SLBfdGetNotifMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdGetNotifMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdGetNotifMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdGetNotifMsg)
  return false;
#undef DO_
}

void SLBfdGetNotifMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdGetNotifMsg)
  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdGetNotifMsg)
}

::google::protobuf::uint8* SLBfdGetNotifMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdGetNotifMsg)
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdGetNotifMsg)
  return target;
}

int SLBfdGetNotifMsg::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdGetNotifMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdGetNotifMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdGetNotifMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdGetNotifMsg::MergeFrom(const SLBfdGetNotifMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SLBfdGetNotifMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdGetNotifMsg::CopyFrom(const SLBfdGetNotifMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdGetNotifMsg::IsInitialized() const {

  return true;
}

void SLBfdGetNotifMsg::Swap(SLBfdGetNotifMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdGetNotifMsg::InternalSwap(SLBfdGetNotifMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdGetNotifMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdGetNotifMsg_descriptor_;
  metadata.reflection = SLBfdGetNotifMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdGetNotifMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBfdConfigCommon::kDesiredTxIntUsecFieldNumber;
const int SLBfdConfigCommon::kDetectMultiplierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdConfigCommon::SLBfdConfigCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdConfigCommon)
}

void SLBfdConfigCommon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLBfdConfigCommon::SLBfdConfigCommon(const SLBfdConfigCommon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdConfigCommon)
}

void SLBfdConfigCommon::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  desiredtxintusec_ = 0u;
  detectmultiplier_ = 0u;
}

SLBfdConfigCommon::~SLBfdConfigCommon() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdConfigCommon)
  SharedDtor();
}

void SLBfdConfigCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLBfdConfigCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdConfigCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdConfigCommon_descriptor_;
}

const SLBfdConfigCommon& SLBfdConfigCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdConfigCommon* SLBfdConfigCommon::default_instance_ = NULL;

SLBfdConfigCommon* SLBfdConfigCommon::New(::google::protobuf::Arena* arena) const {
  SLBfdConfigCommon* n = new SLBfdConfigCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdConfigCommon::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLBfdConfigCommon*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(desiredtxintusec_, detectmultiplier_);

#undef ZR_HELPER_
#undef ZR_

}

bool SLBfdConfigCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdConfigCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DesiredTxIntUsec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desiredtxintusec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DetectMultiplier;
        break;
      }

      // optional uint32 DetectMultiplier = 2;
      case 2: {
        if (tag == 16) {
         parse_DetectMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detectmultiplier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdConfigCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdConfigCommon)
  return false;
#undef DO_
}

void SLBfdConfigCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdConfigCommon)
  // optional uint32 DesiredTxIntUsec = 1;
  if (this->desiredtxintusec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->desiredtxintusec(), output);
  }

  // optional uint32 DetectMultiplier = 2;
  if (this->detectmultiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->detectmultiplier(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdConfigCommon)
}

::google::protobuf::uint8* SLBfdConfigCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdConfigCommon)
  // optional uint32 DesiredTxIntUsec = 1;
  if (this->desiredtxintusec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->desiredtxintusec(), target);
  }

  // optional uint32 DetectMultiplier = 2;
  if (this->detectmultiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->detectmultiplier(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdConfigCommon)
  return target;
}

int SLBfdConfigCommon::ByteSize() const {
  int total_size = 0;

  // optional uint32 DesiredTxIntUsec = 1;
  if (this->desiredtxintusec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->desiredtxintusec());
  }

  // optional uint32 DetectMultiplier = 2;
  if (this->detectmultiplier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detectmultiplier());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdConfigCommon::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdConfigCommon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdConfigCommon>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdConfigCommon::MergeFrom(const SLBfdConfigCommon& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.desiredtxintusec() != 0) {
    set_desiredtxintusec(from.desiredtxintusec());
  }
  if (from.detectmultiplier() != 0) {
    set_detectmultiplier(from.detectmultiplier());
  }
}

void SLBfdConfigCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdConfigCommon::CopyFrom(const SLBfdConfigCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdConfigCommon::IsInitialized() const {

  return true;
}

void SLBfdConfigCommon::Swap(SLBfdConfigCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdConfigCommon::InternalSwap(SLBfdConfigCommon* other) {
  std::swap(desiredtxintusec_, other->desiredtxintusec_);
  std::swap(detectmultiplier_, other->detectmultiplier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdConfigCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdConfigCommon_descriptor_;
  metadata.reflection = SLBfdConfigCommon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdConfigCommon

// optional uint32 DesiredTxIntUsec = 1;
void SLBfdConfigCommon::clear_desiredtxintusec() {
  desiredtxintusec_ = 0u;
}
 ::google::protobuf::uint32 SLBfdConfigCommon::desiredtxintusec() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdConfigCommon.DesiredTxIntUsec)
  return desiredtxintusec_;
}
 void SLBfdConfigCommon::set_desiredtxintusec(::google::protobuf::uint32 value) {
  
  desiredtxintusec_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdConfigCommon.DesiredTxIntUsec)
}

// optional uint32 DetectMultiplier = 2;
void SLBfdConfigCommon::clear_detectmultiplier() {
  detectmultiplier_ = 0u;
}
 ::google::protobuf::uint32 SLBfdConfigCommon::detectmultiplier() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdConfigCommon.DetectMultiplier)
  return detectmultiplier_;
}
 void SLBfdConfigCommon::set_detectmultiplier(::google::protobuf::uint32 value) {
  
  detectmultiplier_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdConfigCommon.DetectMultiplier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SLBfdCommonState_SLBfdStateEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdCommonState_SLBfdStateEnum_descriptor_;
}
bool SLBfdCommonState_SLBfdStateEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_SESSION_STATE_UNKNOWN;
const SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_SESSION_UP;
const SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_SESSION_DOWN;
const SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SL_BFD_NEIGHBOR_UNCONFIG;
const SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SLBfdStateEnum_MIN;
const SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::SLBfdStateEnum_MAX;
const int SLBfdCommonState::SLBfdStateEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SLBfdCommonState_SLBfdDiagStateEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdCommonState_SLBfdDiagStateEnum_descriptor_;
}
bool SLBfdCommonState_SLBfdDiagStateEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_NONE;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_DETECT_EXPIRED;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_NBR_DOWN;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_PATH_DOWN;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_FWDING_PLANE_RESET;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_ADMIN_DOWN;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_REV_CONC_PATH_DOWN;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_ECHO_FUNCTION_FAILED;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SL_BFD_DIAG_CONC_PATH_DOWN;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SLBfdDiagStateEnum_MIN;
const SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::SLBfdDiagStateEnum_MAX;
const int SLBfdCommonState::SLBfdDiagStateEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLBfdCommonState::kSeqNumFieldNumber;
const int SLBfdCommonState::kStatusFieldNumber;
const int SLBfdCommonState::kDiagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLBfdCommonState::SLBfdCommonState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLBfdCommonState)
}

void SLBfdCommonState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLBfdCommonState::SLBfdCommonState(const SLBfdCommonState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdCommonState)
}

void SLBfdCommonState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  seqnum_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  diag_ = 0;
}

SLBfdCommonState::~SLBfdCommonState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdCommonState)
  SharedDtor();
}

void SLBfdCommonState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLBfdCommonState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLBfdCommonState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLBfdCommonState_descriptor_;
}

const SLBfdCommonState& SLBfdCommonState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fbfd_5fcommon_2eproto();
  return *default_instance_;
}

SLBfdCommonState* SLBfdCommonState::default_instance_ = NULL;

SLBfdCommonState* SLBfdCommonState::New(::google::protobuf::Arena* arena) const {
  SLBfdCommonState* n = new SLBfdCommonState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLBfdCommonState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLBfdCommonState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seqnum_, diag_);

#undef ZR_HELPER_
#undef ZR_

}

bool SLBfdCommonState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLBfdCommonState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SeqNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seqnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::service_layer::SLBfdCommonState_SLBfdStateEnum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Diag;
        break;
      }

      // optional .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
      case 3: {
        if (tag == 24) {
         parse_Diag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_diag(static_cast< ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLBfdCommonState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLBfdCommonState)
  return false;
#undef DO_
}

void SLBfdCommonState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLBfdCommonState)
  // optional uint64 SeqNum = 1;
  if (this->seqnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seqnum(), output);
  }

  // optional .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
  if (this->diag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->diag(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLBfdCommonState)
}

::google::protobuf::uint8* SLBfdCommonState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdCommonState)
  // optional uint64 SeqNum = 1;
  if (this->seqnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seqnum(), target);
  }

  // optional .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
  if (this->diag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->diag(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdCommonState)
  return target;
}

int SLBfdCommonState::ByteSize() const {
  int total_size = 0;

  // optional uint64 SeqNum = 1;
  if (this->seqnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seqnum());
  }

  // optional .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
  if (this->diag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->diag());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLBfdCommonState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLBfdCommonState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLBfdCommonState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLBfdCommonState::MergeFrom(const SLBfdCommonState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.seqnum() != 0) {
    set_seqnum(from.seqnum());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.diag() != 0) {
    set_diag(from.diag());
  }
}

void SLBfdCommonState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdCommonState::CopyFrom(const SLBfdCommonState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdCommonState::IsInitialized() const {

  return true;
}

void SLBfdCommonState::Swap(SLBfdCommonState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLBfdCommonState::InternalSwap(SLBfdCommonState* other) {
  std::swap(seqnum_, other->seqnum_);
  std::swap(status_, other->status_);
  std::swap(diag_, other->diag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLBfdCommonState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLBfdCommonState_descriptor_;
  metadata.reflection = SLBfdCommonState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdCommonState

// optional uint64 SeqNum = 1;
void SLBfdCommonState::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLBfdCommonState::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdCommonState.SeqNum)
  return seqnum_;
}
 void SLBfdCommonState::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdCommonState.SeqNum)
}

// optional .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
void SLBfdCommonState::clear_status() {
  status_ = 0;
}
 ::service_layer::SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdCommonState.Status)
  return static_cast< ::service_layer::SLBfdCommonState_SLBfdStateEnum >(status_);
}
 void SLBfdCommonState::set_status(::service_layer::SLBfdCommonState_SLBfdStateEnum value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdCommonState.Status)
}

// optional .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
void SLBfdCommonState::clear_diag() {
  diag_ = 0;
}
 ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::diag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdCommonState.Diag)
  return static_cast< ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum >(diag_);
}
 void SLBfdCommonState::set_diag(::service_layer::SLBfdCommonState_SLBfdDiagStateEnum value) {
  
  diag_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdCommonState.Diag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)
