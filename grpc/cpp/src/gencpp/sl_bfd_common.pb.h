// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fbfd_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fbfd_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbfd_5fcommon_2eproto;
namespace service_layer {
class SLBfdCommonState;
struct SLBfdCommonStateDefaultTypeInternal;
extern SLBfdCommonStateDefaultTypeInternal _SLBfdCommonState_default_instance_;
class SLBfdConfigCommon;
struct SLBfdConfigCommonDefaultTypeInternal;
extern SLBfdConfigCommonDefaultTypeInternal _SLBfdConfigCommon_default_instance_;
class SLBfdGetMsg;
struct SLBfdGetMsgDefaultTypeInternal;
extern SLBfdGetMsgDefaultTypeInternal _SLBfdGetMsg_default_instance_;
class SLBfdGetMsgRsp;
struct SLBfdGetMsgRspDefaultTypeInternal;
extern SLBfdGetMsgRspDefaultTypeInternal _SLBfdGetMsgRsp_default_instance_;
class SLBfdGetNotifMsg;
struct SLBfdGetNotifMsgDefaultTypeInternal;
extern SLBfdGetNotifMsgDefaultTypeInternal _SLBfdGetNotifMsg_default_instance_;
class SLBfdGetStatsMsgRsp;
struct SLBfdGetStatsMsgRspDefaultTypeInternal;
extern SLBfdGetStatsMsgRspDefaultTypeInternal _SLBfdGetStatsMsgRsp_default_instance_;
class SLBfdRegMsg;
struct SLBfdRegMsgDefaultTypeInternal;
extern SLBfdRegMsgDefaultTypeInternal _SLBfdRegMsg_default_instance_;
class SLBfdRegMsgRsp;
struct SLBfdRegMsgRspDefaultTypeInternal;
extern SLBfdRegMsgRspDefaultTypeInternal _SLBfdRegMsgRsp_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLBfdCommonState* Arena::CreateMaybeMessage<::service_layer::SLBfdCommonState>(Arena*);
template<> ::service_layer::SLBfdConfigCommon* Arena::CreateMaybeMessage<::service_layer::SLBfdConfigCommon>(Arena*);
template<> ::service_layer::SLBfdGetMsg* Arena::CreateMaybeMessage<::service_layer::SLBfdGetMsg>(Arena*);
template<> ::service_layer::SLBfdGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdGetMsgRsp>(Arena*);
template<> ::service_layer::SLBfdGetNotifMsg* Arena::CreateMaybeMessage<::service_layer::SLBfdGetNotifMsg>(Arena*);
template<> ::service_layer::SLBfdGetStatsMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdGetStatsMsgRsp>(Arena*);
template<> ::service_layer::SLBfdRegMsg* Arena::CreateMaybeMessage<::service_layer::SLBfdRegMsg>(Arena*);
template<> ::service_layer::SLBfdRegMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdRegMsgRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLBfdCommonState_SLBfdStateEnum : int {
  SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_STATE_UNKNOWN = 0,
  SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_UP = 1,
  SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_DOWN = 2,
  SLBfdCommonState_SLBfdStateEnum_SL_BFD_NEIGHBOR_UNCONFIG = 3,
  SLBfdCommonState_SLBfdStateEnum_SLBfdCommonState_SLBfdStateEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBfdCommonState_SLBfdStateEnum_SLBfdCommonState_SLBfdStateEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBfdCommonState_SLBfdStateEnum_IsValid(int value);
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_MIN = SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_STATE_UNKNOWN;
constexpr SLBfdCommonState_SLBfdStateEnum SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_MAX = SLBfdCommonState_SLBfdStateEnum_SL_BFD_NEIGHBOR_UNCONFIG;
constexpr int SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_ARRAYSIZE = SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdCommonState_SLBfdStateEnum_descriptor();
template<typename T>
inline const std::string& SLBfdCommonState_SLBfdStateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBfdCommonState_SLBfdStateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBfdCommonState_SLBfdStateEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBfdCommonState_SLBfdStateEnum_descriptor(), enum_t_value);
}
inline bool SLBfdCommonState_SLBfdStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBfdCommonState_SLBfdStateEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBfdCommonState_SLBfdStateEnum>(
    SLBfdCommonState_SLBfdStateEnum_descriptor(), name, value);
}
enum SLBfdCommonState_SLBfdDiagStateEnum : int {
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_NONE = 0,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_DETECT_EXPIRED = 1,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_NBR_DOWN = 2,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_PATH_DOWN = 3,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_FWDING_PLANE_RESET = 4,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_ADMIN_DOWN = 5,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_REV_CONC_PATH_DOWN = 6,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_ECHO_FUNCTION_FAILED = 7,
  SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_CONC_PATH_DOWN = 8,
  SLBfdCommonState_SLBfdDiagStateEnum_SLBfdCommonState_SLBfdDiagStateEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBfdCommonState_SLBfdDiagStateEnum_SLBfdCommonState_SLBfdDiagStateEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBfdCommonState_SLBfdDiagStateEnum_IsValid(int value);
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_MIN = SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_NONE;
constexpr SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_MAX = SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_CONC_PATH_DOWN;
constexpr int SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_ARRAYSIZE = SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdCommonState_SLBfdDiagStateEnum_descriptor();
template<typename T>
inline const std::string& SLBfdCommonState_SLBfdDiagStateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBfdCommonState_SLBfdDiagStateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBfdCommonState_SLBfdDiagStateEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBfdCommonState_SLBfdDiagStateEnum_descriptor(), enum_t_value);
}
inline bool SLBfdCommonState_SLBfdDiagStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBfdCommonState_SLBfdDiagStateEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBfdCommonState_SLBfdDiagStateEnum>(
    SLBfdCommonState_SLBfdDiagStateEnum_descriptor(), name, value);
}
enum SLBfdType : int {
  SL_BFD_RESERVED = 0,
  SL_BFD_SINGLE_HOP = 1,
  SL_BFD_MULTI_HOP = 2,
  SLBfdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBfdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBfdType_IsValid(int value);
constexpr SLBfdType SLBfdType_MIN = SL_BFD_RESERVED;
constexpr SLBfdType SLBfdType_MAX = SL_BFD_MULTI_HOP;
constexpr int SLBfdType_ARRAYSIZE = SLBfdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdType_descriptor();
template<typename T>
inline const std::string& SLBfdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBfdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBfdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBfdType_descriptor(), enum_t_value);
}
inline bool SLBfdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBfdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBfdType>(
    SLBfdType_descriptor(), name, value);
}
enum SLBfdNotifType : int {
  SL_BFD_EVENT_TYPE_RESERVED = 0,
  SL_BFD_EVENT_TYPE_ERROR = 1,
  SL_BFD_EVENT_TYPE_SESSION_STATE = 2,
  SLBfdNotifType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBfdNotifType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBfdNotifType_IsValid(int value);
constexpr SLBfdNotifType SLBfdNotifType_MIN = SL_BFD_EVENT_TYPE_RESERVED;
constexpr SLBfdNotifType SLBfdNotifType_MAX = SL_BFD_EVENT_TYPE_SESSION_STATE;
constexpr int SLBfdNotifType_ARRAYSIZE = SLBfdNotifType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBfdNotifType_descriptor();
template<typename T>
inline const std::string& SLBfdNotifType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBfdNotifType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBfdNotifType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBfdNotifType_descriptor(), enum_t_value);
}
inline bool SLBfdNotifType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBfdNotifType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBfdNotifType>(
    SLBfdNotifType_descriptor(), name, value);
}
// ===================================================================

class SLBfdRegMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdRegMsg) */ {
 public:
  inline SLBfdRegMsg() : SLBfdRegMsg(nullptr) {}
  ~SLBfdRegMsg() override;
  explicit constexpr SLBfdRegMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdRegMsg(const SLBfdRegMsg& from);
  SLBfdRegMsg(SLBfdRegMsg&& from) noexcept
    : SLBfdRegMsg() {
    *this = ::std::move(from);
  }

  inline SLBfdRegMsg& operator=(const SLBfdRegMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdRegMsg& operator=(SLBfdRegMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdRegMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdRegMsg* internal_default_instance() {
    return reinterpret_cast<const SLBfdRegMsg*>(
               &_SLBfdRegMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLBfdRegMsg& a, SLBfdRegMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdRegMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdRegMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdRegMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdRegMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdRegMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdRegMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdRegMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdRegMsg";
  }
  protected:
  explicit SLBfdRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperFieldNumber = 1,
  };
  // .service_layer.SLRegOp Oper = 1;
  void clear_oper();
  ::service_layer::SLRegOp oper() const;
  void set_oper(::service_layer::SLRegOp value);
  private:
  ::service_layer::SLRegOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLRegOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdRegMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdRegMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdRegMsgRsp) */ {
 public:
  inline SLBfdRegMsgRsp() : SLBfdRegMsgRsp(nullptr) {}
  ~SLBfdRegMsgRsp() override;
  explicit constexpr SLBfdRegMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdRegMsgRsp(const SLBfdRegMsgRsp& from);
  SLBfdRegMsgRsp(SLBfdRegMsgRsp&& from) noexcept
    : SLBfdRegMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdRegMsgRsp& operator=(const SLBfdRegMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdRegMsgRsp& operator=(SLBfdRegMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdRegMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdRegMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdRegMsgRsp*>(
               &_SLBfdRegMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLBfdRegMsgRsp& a, SLBfdRegMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdRegMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdRegMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdRegMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdRegMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdRegMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdRegMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdRegMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdRegMsgRsp";
  }
  protected:
  explicit SLBfdRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdRegMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdGetMsg final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLBfdGetMsg) */ {
 public:
  inline SLBfdGetMsg() : SLBfdGetMsg(nullptr) {}
  explicit constexpr SLBfdGetMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdGetMsg(const SLBfdGetMsg& from);
  SLBfdGetMsg(SLBfdGetMsg&& from) noexcept
    : SLBfdGetMsg() {
    *this = ::std::move(from);
  }

  inline SLBfdGetMsg& operator=(const SLBfdGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdGetMsg& operator=(SLBfdGetMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdGetMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLBfdGetMsg*>(
               &_SLBfdGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLBfdGetMsg& a, SLBfdGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdGetMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdGetMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLBfdGetMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLBfdGetMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdGetMsg";
  }
  protected:
  explicit SLBfdGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdGetMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdGetMsgRsp) */ {
 public:
  inline SLBfdGetMsgRsp() : SLBfdGetMsgRsp(nullptr) {}
  ~SLBfdGetMsgRsp() override;
  explicit constexpr SLBfdGetMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdGetMsgRsp(const SLBfdGetMsgRsp& from);
  SLBfdGetMsgRsp(SLBfdGetMsgRsp&& from) noexcept
    : SLBfdGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdGetMsgRsp& operator=(const SLBfdGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdGetMsgRsp& operator=(SLBfdGetMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdGetMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdGetMsgRsp*>(
               &_SLBfdGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLBfdGetMsgRsp& a, SLBfdGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdGetMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdGetMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdGetMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdGetMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdGetMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdGetMsgRsp";
  }
  protected:
  explicit SLBfdGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kMaxBfdSessionCfgPerSLBfdMsgFieldNumber = 2,
    kMinBfdTxIntervalSingleHopFieldNumber = 3,
    kMinBfdTxIntervalMultiHopFieldNumber = 4,
    kMinBfdDetectMultiplierSingleHopFieldNumber = 5,
    kMinBfdDetectMultiplierMultiHopFieldNumber = 6,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
  void clear_maxbfdsessioncfgperslbfdmsg();
  uint32_t maxbfdsessioncfgperslbfdmsg() const;
  void set_maxbfdsessioncfgperslbfdmsg(uint32_t value);
  private:
  uint32_t _internal_maxbfdsessioncfgperslbfdmsg() const;
  void _internal_set_maxbfdsessioncfgperslbfdmsg(uint32_t value);
  public:

  // uint32 MinBfdTxIntervalSingleHop = 3;
  void clear_minbfdtxintervalsinglehop();
  uint32_t minbfdtxintervalsinglehop() const;
  void set_minbfdtxintervalsinglehop(uint32_t value);
  private:
  uint32_t _internal_minbfdtxintervalsinglehop() const;
  void _internal_set_minbfdtxintervalsinglehop(uint32_t value);
  public:

  // uint32 MinBfdTxIntervalMultiHop = 4;
  void clear_minbfdtxintervalmultihop();
  uint32_t minbfdtxintervalmultihop() const;
  void set_minbfdtxintervalmultihop(uint32_t value);
  private:
  uint32_t _internal_minbfdtxintervalmultihop() const;
  void _internal_set_minbfdtxintervalmultihop(uint32_t value);
  public:

  // uint32 MinBfdDetectMultiplierSingleHop = 5;
  void clear_minbfddetectmultipliersinglehop();
  uint32_t minbfddetectmultipliersinglehop() const;
  void set_minbfddetectmultipliersinglehop(uint32_t value);
  private:
  uint32_t _internal_minbfddetectmultipliersinglehop() const;
  void _internal_set_minbfddetectmultipliersinglehop(uint32_t value);
  public:

  // uint32 MinBfdDetectMultiplierMultiHop = 6;
  void clear_minbfddetectmultipliermultihop();
  uint32_t minbfddetectmultipliermultihop() const;
  void set_minbfddetectmultipliermultihop(uint32_t value);
  private:
  uint32_t _internal_minbfddetectmultipliermultihop() const;
  void _internal_set_minbfddetectmultipliermultihop(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  uint32_t maxbfdsessioncfgperslbfdmsg_;
  uint32_t minbfdtxintervalsinglehop_;
  uint32_t minbfdtxintervalmultihop_;
  uint32_t minbfddetectmultipliersinglehop_;
  uint32_t minbfddetectmultipliermultihop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdGetStatsMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdGetStatsMsgRsp) */ {
 public:
  inline SLBfdGetStatsMsgRsp() : SLBfdGetStatsMsgRsp(nullptr) {}
  ~SLBfdGetStatsMsgRsp() override;
  explicit constexpr SLBfdGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdGetStatsMsgRsp(const SLBfdGetStatsMsgRsp& from);
  SLBfdGetStatsMsgRsp(SLBfdGetStatsMsgRsp&& from) noexcept
    : SLBfdGetStatsMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdGetStatsMsgRsp& operator=(const SLBfdGetStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdGetStatsMsgRsp& operator=(SLBfdGetStatsMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdGetStatsMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdGetStatsMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdGetStatsMsgRsp*>(
               &_SLBfdGetStatsMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLBfdGetStatsMsgRsp& a, SLBfdGetStatsMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdGetStatsMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdGetStatsMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdGetStatsMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdGetStatsMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdGetStatsMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdGetStatsMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdGetStatsMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdGetStatsMsgRsp";
  }
  protected:
  explicit SLBfdGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kSeqNumFieldNumber = 2,
    kBfdCountFieldNumber = 3,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint64 SeqNum = 2;
  void clear_seqnum();
  uint64_t seqnum() const;
  void set_seqnum(uint64_t value);
  private:
  uint64_t _internal_seqnum() const;
  void _internal_set_seqnum(uint64_t value);
  public:

  // uint32 BfdCount = 3;
  void clear_bfdcount();
  uint32_t bfdcount() const;
  void set_bfdcount(uint32_t value);
  private:
  uint32_t _internal_bfdcount() const;
  void _internal_set_bfdcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdGetStatsMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  uint64_t seqnum_;
  uint32_t bfdcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdGetNotifMsg final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLBfdGetNotifMsg) */ {
 public:
  inline SLBfdGetNotifMsg() : SLBfdGetNotifMsg(nullptr) {}
  explicit constexpr SLBfdGetNotifMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdGetNotifMsg(const SLBfdGetNotifMsg& from);
  SLBfdGetNotifMsg(SLBfdGetNotifMsg&& from) noexcept
    : SLBfdGetNotifMsg() {
    *this = ::std::move(from);
  }

  inline SLBfdGetNotifMsg& operator=(const SLBfdGetNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdGetNotifMsg& operator=(SLBfdGetNotifMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdGetNotifMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdGetNotifMsg* internal_default_instance() {
    return reinterpret_cast<const SLBfdGetNotifMsg*>(
               &_SLBfdGetNotifMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLBfdGetNotifMsg& a, SLBfdGetNotifMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdGetNotifMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdGetNotifMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdGetNotifMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdGetNotifMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLBfdGetNotifMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLBfdGetNotifMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdGetNotifMsg";
  }
  protected:
  explicit SLBfdGetNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdGetNotifMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdConfigCommon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdConfigCommon) */ {
 public:
  inline SLBfdConfigCommon() : SLBfdConfigCommon(nullptr) {}
  ~SLBfdConfigCommon() override;
  explicit constexpr SLBfdConfigCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdConfigCommon(const SLBfdConfigCommon& from);
  SLBfdConfigCommon(SLBfdConfigCommon&& from) noexcept
    : SLBfdConfigCommon() {
    *this = ::std::move(from);
  }

  inline SLBfdConfigCommon& operator=(const SLBfdConfigCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdConfigCommon& operator=(SLBfdConfigCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdConfigCommon& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdConfigCommon* internal_default_instance() {
    return reinterpret_cast<const SLBfdConfigCommon*>(
               &_SLBfdConfigCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLBfdConfigCommon& a, SLBfdConfigCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdConfigCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdConfigCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdConfigCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdConfigCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdConfigCommon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdConfigCommon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdConfigCommon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdConfigCommon";
  }
  protected:
  explicit SLBfdConfigCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesiredTxIntUsecFieldNumber = 1,
    kDetectMultiplierFieldNumber = 2,
  };
  // uint32 DesiredTxIntUsec = 1;
  void clear_desiredtxintusec();
  uint32_t desiredtxintusec() const;
  void set_desiredtxintusec(uint32_t value);
  private:
  uint32_t _internal_desiredtxintusec() const;
  void _internal_set_desiredtxintusec(uint32_t value);
  public:

  // uint32 DetectMultiplier = 2;
  void clear_detectmultiplier();
  uint32_t detectmultiplier() const;
  void set_detectmultiplier(uint32_t value);
  private:
  uint32_t _internal_detectmultiplier() const;
  void _internal_set_detectmultiplier(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdConfigCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t desiredtxintusec_;
  uint32_t detectmultiplier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLBfdCommonState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdCommonState) */ {
 public:
  inline SLBfdCommonState() : SLBfdCommonState(nullptr) {}
  ~SLBfdCommonState() override;
  explicit constexpr SLBfdCommonState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdCommonState(const SLBfdCommonState& from);
  SLBfdCommonState(SLBfdCommonState&& from) noexcept
    : SLBfdCommonState() {
    *this = ::std::move(from);
  }

  inline SLBfdCommonState& operator=(const SLBfdCommonState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdCommonState& operator=(SLBfdCommonState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdCommonState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdCommonState* internal_default_instance() {
    return reinterpret_cast<const SLBfdCommonState*>(
               &_SLBfdCommonState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLBfdCommonState& a, SLBfdCommonState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdCommonState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdCommonState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBfdCommonState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBfdCommonState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdCommonState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdCommonState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdCommonState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdCommonState";
  }
  protected:
  explicit SLBfdCommonState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLBfdCommonState_SLBfdStateEnum SLBfdStateEnum;
  static constexpr SLBfdStateEnum SL_BFD_SESSION_STATE_UNKNOWN =
    SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_STATE_UNKNOWN;
  static constexpr SLBfdStateEnum SL_BFD_SESSION_UP =
    SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_UP;
  static constexpr SLBfdStateEnum SL_BFD_SESSION_DOWN =
    SLBfdCommonState_SLBfdStateEnum_SL_BFD_SESSION_DOWN;
  static constexpr SLBfdStateEnum SL_BFD_NEIGHBOR_UNCONFIG =
    SLBfdCommonState_SLBfdStateEnum_SL_BFD_NEIGHBOR_UNCONFIG;
  static inline bool SLBfdStateEnum_IsValid(int value) {
    return SLBfdCommonState_SLBfdStateEnum_IsValid(value);
  }
  static constexpr SLBfdStateEnum SLBfdStateEnum_MIN =
    SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_MIN;
  static constexpr SLBfdStateEnum SLBfdStateEnum_MAX =
    SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_MAX;
  static constexpr int SLBfdStateEnum_ARRAYSIZE =
    SLBfdCommonState_SLBfdStateEnum_SLBfdStateEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SLBfdStateEnum_descriptor() {
    return SLBfdCommonState_SLBfdStateEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& SLBfdStateEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SLBfdStateEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SLBfdStateEnum_Name.");
    return SLBfdCommonState_SLBfdStateEnum_Name(enum_t_value);
  }
  static inline bool SLBfdStateEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SLBfdStateEnum* value) {
    return SLBfdCommonState_SLBfdStateEnum_Parse(name, value);
  }

  typedef SLBfdCommonState_SLBfdDiagStateEnum SLBfdDiagStateEnum;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_NONE =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_NONE;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_DETECT_EXPIRED =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_DETECT_EXPIRED;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_NBR_DOWN =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_NBR_DOWN;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_PATH_DOWN =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_PATH_DOWN;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_FWDING_PLANE_RESET =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_FWDING_PLANE_RESET;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_ADMIN_DOWN =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_ADMIN_DOWN;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_REV_CONC_PATH_DOWN =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_REV_CONC_PATH_DOWN;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_ECHO_FUNCTION_FAILED =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_ECHO_FUNCTION_FAILED;
  static constexpr SLBfdDiagStateEnum SL_BFD_DIAG_CONC_PATH_DOWN =
    SLBfdCommonState_SLBfdDiagStateEnum_SL_BFD_DIAG_CONC_PATH_DOWN;
  static inline bool SLBfdDiagStateEnum_IsValid(int value) {
    return SLBfdCommonState_SLBfdDiagStateEnum_IsValid(value);
  }
  static constexpr SLBfdDiagStateEnum SLBfdDiagStateEnum_MIN =
    SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_MIN;
  static constexpr SLBfdDiagStateEnum SLBfdDiagStateEnum_MAX =
    SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_MAX;
  static constexpr int SLBfdDiagStateEnum_ARRAYSIZE =
    SLBfdCommonState_SLBfdDiagStateEnum_SLBfdDiagStateEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SLBfdDiagStateEnum_descriptor() {
    return SLBfdCommonState_SLBfdDiagStateEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& SLBfdDiagStateEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SLBfdDiagStateEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SLBfdDiagStateEnum_Name.");
    return SLBfdCommonState_SLBfdDiagStateEnum_Name(enum_t_value);
  }
  static inline bool SLBfdDiagStateEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SLBfdDiagStateEnum* value) {
    return SLBfdCommonState_SLBfdDiagStateEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSeqNumFieldNumber = 1,
    kStatusFieldNumber = 2,
    kDiagFieldNumber = 3,
  };
  // uint64 SeqNum = 1;
  void clear_seqnum();
  uint64_t seqnum() const;
  void set_seqnum(uint64_t value);
  private:
  uint64_t _internal_seqnum() const;
  void _internal_set_seqnum(uint64_t value);
  public:

  // .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
  void clear_status();
  ::service_layer::SLBfdCommonState_SLBfdStateEnum status() const;
  void set_status(::service_layer::SLBfdCommonState_SLBfdStateEnum value);
  private:
  ::service_layer::SLBfdCommonState_SLBfdStateEnum _internal_status() const;
  void _internal_set_status(::service_layer::SLBfdCommonState_SLBfdStateEnum value);
  public:

  // .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
  void clear_diag();
  ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum diag() const;
  void set_diag(::service_layer::SLBfdCommonState_SLBfdDiagStateEnum value);
  private:
  ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum _internal_diag() const;
  void _internal_set_diag(::service_layer::SLBfdCommonState_SLBfdDiagStateEnum value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdCommonState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t seqnum_;
  int status_;
  int diag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLBfdRegMsg

// .service_layer.SLRegOp Oper = 1;
inline void SLBfdRegMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLRegOp SLBfdRegMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
inline ::service_layer::SLRegOp SLBfdRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdRegMsg.Oper)
  return _internal_oper();
}
inline void SLBfdRegMsg::_internal_set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
}
inline void SLBfdRegMsg::set_oper(::service_layer::SLRegOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdRegMsg.Oper)
}

// -------------------------------------------------------------------

// SLBfdRegMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdRegMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdRegMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdRegMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdRegMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdRegMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdRegMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdRegMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdRegMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdRegMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdRegMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdRegMsgRsp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdRegMsgRsp.ErrStatus)
  return _msg;
}
inline void SLBfdRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdRegMsgRsp.ErrStatus)
}

// -------------------------------------------------------------------

// SLBfdGetMsg

// -------------------------------------------------------------------

// SLBfdGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdGetMsgRsp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdGetMsgRsp.ErrStatus)
  return _msg;
}
inline void SLBfdGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdGetMsgRsp.ErrStatus)
}

// uint32 MaxBfdSessionCfgPerSLBfdMsg = 2;
inline void SLBfdGetMsgRsp::clear_maxbfdsessioncfgperslbfdmsg() {
  maxbfdsessioncfgperslbfdmsg_ = 0u;
}
inline uint32_t SLBfdGetMsgRsp::_internal_maxbfdsessioncfgperslbfdmsg() const {
  return maxbfdsessioncfgperslbfdmsg_;
}
inline uint32_t SLBfdGetMsgRsp::maxbfdsessioncfgperslbfdmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MaxBfdSessionCfgPerSLBfdMsg)
  return _internal_maxbfdsessioncfgperslbfdmsg();
}
inline void SLBfdGetMsgRsp::_internal_set_maxbfdsessioncfgperslbfdmsg(uint32_t value) {
  
  maxbfdsessioncfgperslbfdmsg_ = value;
}
inline void SLBfdGetMsgRsp::set_maxbfdsessioncfgperslbfdmsg(uint32_t value) {
  _internal_set_maxbfdsessioncfgperslbfdmsg(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MaxBfdSessionCfgPerSLBfdMsg)
}

// uint32 MinBfdTxIntervalSingleHop = 3;
inline void SLBfdGetMsgRsp::clear_minbfdtxintervalsinglehop() {
  minbfdtxintervalsinglehop_ = 0u;
}
inline uint32_t SLBfdGetMsgRsp::_internal_minbfdtxintervalsinglehop() const {
  return minbfdtxintervalsinglehop_;
}
inline uint32_t SLBfdGetMsgRsp::minbfdtxintervalsinglehop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalSingleHop)
  return _internal_minbfdtxintervalsinglehop();
}
inline void SLBfdGetMsgRsp::_internal_set_minbfdtxintervalsinglehop(uint32_t value) {
  
  minbfdtxintervalsinglehop_ = value;
}
inline void SLBfdGetMsgRsp::set_minbfdtxintervalsinglehop(uint32_t value) {
  _internal_set_minbfdtxintervalsinglehop(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalSingleHop)
}

// uint32 MinBfdTxIntervalMultiHop = 4;
inline void SLBfdGetMsgRsp::clear_minbfdtxintervalmultihop() {
  minbfdtxintervalmultihop_ = 0u;
}
inline uint32_t SLBfdGetMsgRsp::_internal_minbfdtxintervalmultihop() const {
  return minbfdtxintervalmultihop_;
}
inline uint32_t SLBfdGetMsgRsp::minbfdtxintervalmultihop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalMultiHop)
  return _internal_minbfdtxintervalmultihop();
}
inline void SLBfdGetMsgRsp::_internal_set_minbfdtxintervalmultihop(uint32_t value) {
  
  minbfdtxintervalmultihop_ = value;
}
inline void SLBfdGetMsgRsp::set_minbfdtxintervalmultihop(uint32_t value) {
  _internal_set_minbfdtxintervalmultihop(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdTxIntervalMultiHop)
}

// uint32 MinBfdDetectMultiplierSingleHop = 5;
inline void SLBfdGetMsgRsp::clear_minbfddetectmultipliersinglehop() {
  minbfddetectmultipliersinglehop_ = 0u;
}
inline uint32_t SLBfdGetMsgRsp::_internal_minbfddetectmultipliersinglehop() const {
  return minbfddetectmultipliersinglehop_;
}
inline uint32_t SLBfdGetMsgRsp::minbfddetectmultipliersinglehop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierSingleHop)
  return _internal_minbfddetectmultipliersinglehop();
}
inline void SLBfdGetMsgRsp::_internal_set_minbfddetectmultipliersinglehop(uint32_t value) {
  
  minbfddetectmultipliersinglehop_ = value;
}
inline void SLBfdGetMsgRsp::set_minbfddetectmultipliersinglehop(uint32_t value) {
  _internal_set_minbfddetectmultipliersinglehop(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierSingleHop)
}

// uint32 MinBfdDetectMultiplierMultiHop = 6;
inline void SLBfdGetMsgRsp::clear_minbfddetectmultipliermultihop() {
  minbfddetectmultipliermultihop_ = 0u;
}
inline uint32_t SLBfdGetMsgRsp::_internal_minbfddetectmultipliermultihop() const {
  return minbfddetectmultipliermultihop_;
}
inline uint32_t SLBfdGetMsgRsp::minbfddetectmultipliermultihop() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierMultiHop)
  return _internal_minbfddetectmultipliermultihop();
}
inline void SLBfdGetMsgRsp::_internal_set_minbfddetectmultipliermultihop(uint32_t value) {
  
  minbfddetectmultipliermultihop_ = value;
}
inline void SLBfdGetMsgRsp::set_minbfddetectmultipliermultihop(uint32_t value) {
  _internal_set_minbfddetectmultipliermultihop(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetMsgRsp.MinBfdDetectMultiplierMultiHop)
}

// -------------------------------------------------------------------

// SLBfdGetStatsMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdGetStatsMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdGetStatsMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdGetStatsMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdGetStatsMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdGetStatsMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdGetStatsMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdGetStatsMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdGetStatsMsgRsp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
  return _msg;
}
inline void SLBfdGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdGetStatsMsgRsp.ErrStatus)
}

// uint64 SeqNum = 2;
inline void SLBfdGetStatsMsgRsp::clear_seqnum() {
  seqnum_ = uint64_t{0u};
}
inline uint64_t SLBfdGetStatsMsgRsp::_internal_seqnum() const {
  return seqnum_;
}
inline uint64_t SLBfdGetStatsMsgRsp::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetStatsMsgRsp.SeqNum)
  return _internal_seqnum();
}
inline void SLBfdGetStatsMsgRsp::_internal_set_seqnum(uint64_t value) {
  
  seqnum_ = value;
}
inline void SLBfdGetStatsMsgRsp::set_seqnum(uint64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetStatsMsgRsp.SeqNum)
}

// uint32 BfdCount = 3;
inline void SLBfdGetStatsMsgRsp::clear_bfdcount() {
  bfdcount_ = 0u;
}
inline uint32_t SLBfdGetStatsMsgRsp::_internal_bfdcount() const {
  return bfdcount_;
}
inline uint32_t SLBfdGetStatsMsgRsp::bfdcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdGetStatsMsgRsp.BfdCount)
  return _internal_bfdcount();
}
inline void SLBfdGetStatsMsgRsp::_internal_set_bfdcount(uint32_t value) {
  
  bfdcount_ = value;
}
inline void SLBfdGetStatsMsgRsp::set_bfdcount(uint32_t value) {
  _internal_set_bfdcount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdGetStatsMsgRsp.BfdCount)
}

// -------------------------------------------------------------------

// SLBfdGetNotifMsg

// -------------------------------------------------------------------

// SLBfdConfigCommon

// uint32 DesiredTxIntUsec = 1;
inline void SLBfdConfigCommon::clear_desiredtxintusec() {
  desiredtxintusec_ = 0u;
}
inline uint32_t SLBfdConfigCommon::_internal_desiredtxintusec() const {
  return desiredtxintusec_;
}
inline uint32_t SLBfdConfigCommon::desiredtxintusec() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdConfigCommon.DesiredTxIntUsec)
  return _internal_desiredtxintusec();
}
inline void SLBfdConfigCommon::_internal_set_desiredtxintusec(uint32_t value) {
  
  desiredtxintusec_ = value;
}
inline void SLBfdConfigCommon::set_desiredtxintusec(uint32_t value) {
  _internal_set_desiredtxintusec(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdConfigCommon.DesiredTxIntUsec)
}

// uint32 DetectMultiplier = 2;
inline void SLBfdConfigCommon::clear_detectmultiplier() {
  detectmultiplier_ = 0u;
}
inline uint32_t SLBfdConfigCommon::_internal_detectmultiplier() const {
  return detectmultiplier_;
}
inline uint32_t SLBfdConfigCommon::detectmultiplier() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdConfigCommon.DetectMultiplier)
  return _internal_detectmultiplier();
}
inline void SLBfdConfigCommon::_internal_set_detectmultiplier(uint32_t value) {
  
  detectmultiplier_ = value;
}
inline void SLBfdConfigCommon::set_detectmultiplier(uint32_t value) {
  _internal_set_detectmultiplier(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdConfigCommon.DetectMultiplier)
}

// -------------------------------------------------------------------

// SLBfdCommonState

// uint64 SeqNum = 1;
inline void SLBfdCommonState::clear_seqnum() {
  seqnum_ = uint64_t{0u};
}
inline uint64_t SLBfdCommonState::_internal_seqnum() const {
  return seqnum_;
}
inline uint64_t SLBfdCommonState::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdCommonState.SeqNum)
  return _internal_seqnum();
}
inline void SLBfdCommonState::_internal_set_seqnum(uint64_t value) {
  
  seqnum_ = value;
}
inline void SLBfdCommonState::set_seqnum(uint64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdCommonState.SeqNum)
}

// .service_layer.SLBfdCommonState.SLBfdStateEnum Status = 2;
inline void SLBfdCommonState::clear_status() {
  status_ = 0;
}
inline ::service_layer::SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::_internal_status() const {
  return static_cast< ::service_layer::SLBfdCommonState_SLBfdStateEnum >(status_);
}
inline ::service_layer::SLBfdCommonState_SLBfdStateEnum SLBfdCommonState::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdCommonState.Status)
  return _internal_status();
}
inline void SLBfdCommonState::_internal_set_status(::service_layer::SLBfdCommonState_SLBfdStateEnum value) {
  
  status_ = value;
}
inline void SLBfdCommonState::set_status(::service_layer::SLBfdCommonState_SLBfdStateEnum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdCommonState.Status)
}

// .service_layer.SLBfdCommonState.SLBfdDiagStateEnum Diag = 3;
inline void SLBfdCommonState::clear_diag() {
  diag_ = 0;
}
inline ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::_internal_diag() const {
  return static_cast< ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum >(diag_);
}
inline ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum SLBfdCommonState::diag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdCommonState.Diag)
  return _internal_diag();
}
inline void SLBfdCommonState::_internal_set_diag(::service_layer::SLBfdCommonState_SLBfdDiagStateEnum value) {
  
  diag_ = value;
}
inline void SLBfdCommonState::set_diag(::service_layer::SLBfdCommonState_SLBfdDiagStateEnum value) {
  _internal_set_diag(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdCommonState.Diag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLBfdCommonState_SLBfdStateEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBfdCommonState_SLBfdStateEnum>() {
  return ::service_layer::SLBfdCommonState_SLBfdStateEnum_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum>() {
  return ::service_layer::SLBfdCommonState_SLBfdDiagStateEnum_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBfdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBfdType>() {
  return ::service_layer::SLBfdType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBfdNotifType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBfdNotifType>() {
  return ::service_layer::SLBfdNotifType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fcommon_2eproto
