// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_bfd_ipv4.proto
// Original file comments:
// @file 
// @brief Client RPC proto file for BFD RPCs. 
// Declares calls for adding, deleting, updating, and getting the BFD
// sessions. 
// 
// ----------------------------------------------------------------
//  Copyright (c) 2016, 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_sl_5fbfd_5fipv4_2eproto__INCLUDED
#define GRPC_sl_5fbfd_5fipv4_2eproto__INCLUDED

#include "sl_bfd_ipv4.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLBfdIPv4Oper
// @ingroup BFD
// Used for IPv4 BFD registrations, and BFD session operations and notifications.
// Defines the RPC for adding, deleting, updating, and retrieving BFD sessions.
// @{
class SLBfdv4Oper final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLBfdv4Oper";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
    //     Global BFD registration.
    //     A client Must Register BEFORE BFD sessions can be added/modified.
    //
    // SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     Global BFD un-registration.
    //     This call is used to end all BFD notifications and unregister any
    //     interest in BFD session configuration.
    //     This call cleans up all BFD sessions previously requested.
    //
    // SLBfdRegMsg.Oper = SL_REGOP_EOF:
    //     BFD End Of File.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their BFD sessions.
    virtual ::grpc::Status SLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::service_layer::SLBfdRegMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdRegMsgRsp>> AsyncSLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdRegMsgRsp>>(AsyncSLBfdv4RegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdRegMsgRsp>> PrepareAsyncSLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdRegMsgRsp>>(PrepareAsyncSLBfdv4RegOpRaw(context, request, cq));
    }
    // Used to retrieve global BFD info from the server.
    virtual ::grpc::Status SLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::service_layer::SLBfdGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetMsgRsp>> AsyncSLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetMsgRsp>>(AsyncSLBfdv4GetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetMsgRsp>> PrepareAsyncSLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetMsgRsp>>(PrepareAsyncSLBfdv4GetRaw(context, request, cq));
    }
    // Used to retrieve global BFD stats from the server.
    virtual ::grpc::Status SLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::service_layer::SLBfdGetStatsMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetStatsMsgRsp>> AsyncSLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetStatsMsgRsp>>(AsyncSLBfdv4GetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetStatsMsgRsp>> PrepareAsyncSLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetStatsMsgRsp>>(PrepareAsyncSLBfdv4GetStatsRaw(context, request, cq));
    }
    //
    // BFD notifications
    //
    //
    // This call is used to get a stream of session state notifications.
    // The caller must maintain the GRPC channel as long as
    // there is interest in BFD session notifications. Only sessions that were
    // created through this API will be notified to caller.
    // This call can be used to get "push" notifications for session states.
    // It is advised that the caller register for notifications before any
    // sessions are created to avoid any loss of notifications.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLBfdv4Notif>> SLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLBfdv4Notif>>(SLBfdv4GetNotifStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBfdv4Notif>> AsyncSLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBfdv4Notif>>(AsyncSLBfdv4GetNotifStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBfdv4Notif>> PrepareAsyncSLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBfdv4Notif>>(PrepareAsyncSLBfdv4GetNotifStreamRaw(context, request, cq));
    }
    //
    // BFD session operations
    //
    //
    // SLBfdv4Msg.Oper = SL_OBJOP_ADD:
    //     Add one or multiple BFD sessions.
    //
    // SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
    //     Update one or multiple BFD sessions.
    //
    // SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
    //     Delete one or multiple BFD sessions.
    virtual ::grpc::Status SLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::service_layer::SLBfdv4MsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4MsgRsp>> AsyncSLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4MsgRsp>>(AsyncSLBfdv4SessionOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4MsgRsp>> PrepareAsyncSLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4MsgRsp>>(PrepareAsyncSLBfdv4SessionOpRaw(context, request, cq));
    }
    // Retrieve BFD session attributes and state.
    // This call can be used to "poll" the current state of a session.
    virtual ::grpc::Status SLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::service_layer::SLBfdv4GetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4GetMsgRsp>> AsyncSLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4GetMsgRsp>>(AsyncSLBfdv4SessionGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4GetMsgRsp>> PrepareAsyncSLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4GetMsgRsp>>(PrepareAsyncSLBfdv4SessionGetRaw(context, request, cq));
    }
    // @}
    class async_interface {
     public:
      virtual ~async_interface() {}
      // SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      //     Global BFD registration.
      //     A client Must Register BEFORE BFD sessions can be added/modified.
      //
      // SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      //     Global BFD un-registration.
      //     This call is used to end all BFD notifications and unregister any
      //     interest in BFD session configuration.
      //     This call cleans up all BFD sessions previously requested.
      //
      // SLBfdRegMsg.Oper = SL_REGOP_EOF:
      //     BFD End Of File.
      //     After Registration, the client is expected to send an EOF
      //     message to convey the end of replay of the client's known objects.
      //     This is especially useful under certain restart scenarios when the
      //     client and the server are trying to synchronize their BFD sessions.
      virtual void SLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg* request, ::service_layer::SLBfdRegMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg* request, ::service_layer::SLBfdRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Used to retrieve global BFD info from the server.
      virtual void SLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Used to retrieve global BFD stats from the server.
      virtual void SLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetStatsMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetStatsMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // BFD notifications
      //
      //
      // This call is used to get a stream of session state notifications.
      // The caller must maintain the GRPC channel as long as
      // there is interest in BFD session notifications. Only sessions that were
      // created through this API will be notified to caller.
      // This call can be used to get "push" notifications for session states.
      // It is advised that the caller register for notifications before any
      // sessions are created to avoid any loss of notifications.
      virtual void SLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLBfdv4Notif>* reactor) = 0;
      //
      // BFD session operations
      //
      //
      // SLBfdv4Msg.Oper = SL_OBJOP_ADD:
      //     Add one or multiple BFD sessions.
      //
      // SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
      //     Update one or multiple BFD sessions.
      //
      // SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
      //     Delete one or multiple BFD sessions.
      virtual void SLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg* request, ::service_layer::SLBfdv4MsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg* request, ::service_layer::SLBfdv4MsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve BFD session attributes and state.
      // This call can be used to "poll" the current state of a session.
      virtual void SLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg* request, ::service_layer::SLBfdv4GetMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg* request, ::service_layer::SLBfdv4GetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdRegMsgRsp>* AsyncSLBfdv4RegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdRegMsgRsp>* PrepareAsyncSLBfdv4RegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetMsgRsp>* AsyncSLBfdv4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetMsgRsp>* PrepareAsyncSLBfdv4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetStatsMsgRsp>* AsyncSLBfdv4GetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdGetStatsMsgRsp>* PrepareAsyncSLBfdv4GetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::service_layer::SLBfdv4Notif>* SLBfdv4GetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBfdv4Notif>* AsyncSLBfdv4GetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBfdv4Notif>* PrepareAsyncSLBfdv4GetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4MsgRsp>* AsyncSLBfdv4SessionOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4MsgRsp>* PrepareAsyncSLBfdv4SessionOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4GetMsgRsp>* AsyncSLBfdv4SessionGetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLBfdv4GetMsgRsp>* PrepareAsyncSLBfdv4SessionGetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::service_layer::SLBfdRegMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdRegMsgRsp>> AsyncSLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdRegMsgRsp>>(AsyncSLBfdv4RegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdRegMsgRsp>> PrepareAsyncSLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdRegMsgRsp>>(PrepareAsyncSLBfdv4RegOpRaw(context, request, cq));
    }
    ::grpc::Status SLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::service_layer::SLBfdGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetMsgRsp>> AsyncSLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetMsgRsp>>(AsyncSLBfdv4GetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetMsgRsp>> PrepareAsyncSLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetMsgRsp>>(PrepareAsyncSLBfdv4GetRaw(context, request, cq));
    }
    ::grpc::Status SLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::service_layer::SLBfdGetStatsMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetStatsMsgRsp>> AsyncSLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetStatsMsgRsp>>(AsyncSLBfdv4GetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetStatsMsgRsp>> PrepareAsyncSLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetStatsMsgRsp>>(PrepareAsyncSLBfdv4GetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLBfdv4Notif>> SLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLBfdv4Notif>>(SLBfdv4GetNotifStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBfdv4Notif>> AsyncSLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBfdv4Notif>>(AsyncSLBfdv4GetNotifStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBfdv4Notif>> PrepareAsyncSLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBfdv4Notif>>(PrepareAsyncSLBfdv4GetNotifStreamRaw(context, request, cq));
    }
    ::grpc::Status SLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::service_layer::SLBfdv4MsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4MsgRsp>> AsyncSLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4MsgRsp>>(AsyncSLBfdv4SessionOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4MsgRsp>> PrepareAsyncSLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4MsgRsp>>(PrepareAsyncSLBfdv4SessionOpRaw(context, request, cq));
    }
    ::grpc::Status SLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::service_layer::SLBfdv4GetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4GetMsgRsp>> AsyncSLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4GetMsgRsp>>(AsyncSLBfdv4SessionGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4GetMsgRsp>> PrepareAsyncSLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4GetMsgRsp>>(PrepareAsyncSLBfdv4SessionGetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg* request, ::service_layer::SLBfdRegMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLBfdv4RegOp(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg* request, ::service_layer::SLBfdRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLBfdv4Get(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetStatsMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLBfdv4GetStats(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetStatsMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLBfdv4GetNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLBfdv4Notif>* reactor) override;
      void SLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg* request, ::service_layer::SLBfdv4MsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLBfdv4SessionOp(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg* request, ::service_layer::SLBfdv4MsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg* request, ::service_layer::SLBfdv4GetMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLBfdv4SessionGet(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg* request, ::service_layer::SLBfdv4GetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdRegMsgRsp>* AsyncSLBfdv4RegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdRegMsgRsp>* PrepareAsyncSLBfdv4RegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetMsgRsp>* AsyncSLBfdv4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetMsgRsp>* PrepareAsyncSLBfdv4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetStatsMsgRsp>* AsyncSLBfdv4GetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdGetStatsMsgRsp>* PrepareAsyncSLBfdv4GetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::service_layer::SLBfdv4Notif>* SLBfdv4GetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLBfdv4Notif>* AsyncSLBfdv4GetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLBfdv4Notif>* PrepareAsyncSLBfdv4GetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdGetNotifMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4MsgRsp>* AsyncSLBfdv4SessionOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4MsgRsp>* PrepareAsyncSLBfdv4SessionOpRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4GetMsgRsp>* AsyncSLBfdv4SessionGetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLBfdv4GetMsgRsp>* PrepareAsyncSLBfdv4SessionGetRaw(::grpc::ClientContext* context, const ::service_layer::SLBfdv4GetMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLBfdv4RegOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLBfdv4Get_;
    const ::grpc::internal::RpcMethod rpcmethod_SLBfdv4GetStats_;
    const ::grpc::internal::RpcMethod rpcmethod_SLBfdv4GetNotifStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SLBfdv4SessionOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLBfdv4SessionGet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
    //     Global BFD registration.
    //     A client Must Register BEFORE BFD sessions can be added/modified.
    //
    // SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     Global BFD un-registration.
    //     This call is used to end all BFD notifications and unregister any
    //     interest in BFD session configuration.
    //     This call cleans up all BFD sessions previously requested.
    //
    // SLBfdRegMsg.Oper = SL_REGOP_EOF:
    //     BFD End Of File.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their BFD sessions.
    virtual ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* context, const ::service_layer::SLBfdRegMsg* request, ::service_layer::SLBfdRegMsgRsp* response);
    // Used to retrieve global BFD info from the server.
    virtual ::grpc::Status SLBfdv4Get(::grpc::ServerContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetMsgRsp* response);
    // Used to retrieve global BFD stats from the server.
    virtual ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetStatsMsgRsp* response);
    //
    // BFD notifications
    //
    //
    // This call is used to get a stream of session state notifications.
    // The caller must maintain the GRPC channel as long as
    // there is interest in BFD session notifications. Only sessions that were
    // created through this API will be notified to caller.
    // This call can be used to get "push" notifications for session states.
    // It is advised that the caller register for notifications before any
    // sessions are created to avoid any loss of notifications.
    virtual ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* context, const ::service_layer::SLBfdGetNotifMsg* request, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* writer);
    //
    // BFD session operations
    //
    //
    // SLBfdv4Msg.Oper = SL_OBJOP_ADD:
    //     Add one or multiple BFD sessions.
    //
    // SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
    //     Update one or multiple BFD sessions.
    //
    // SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
    //     Delete one or multiple BFD sessions.
    virtual ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* context, const ::service_layer::SLBfdv4Msg* request, ::service_layer::SLBfdv4MsgRsp* response);
    // Retrieve BFD session attributes and state.
    // This call can be used to "poll" the current state of a session.
    virtual ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* context, const ::service_layer::SLBfdv4GetMsg* request, ::service_layer::SLBfdv4GetMsgRsp* response);
    // @}
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBfdv4RegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBfdv4RegOp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLBfdv4RegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4RegOp(::grpc::ServerContext* context, ::service_layer::SLBfdRegMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLBfdRegMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBfdv4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBfdv4Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLBfdv4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4Get(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4Get(::grpc::ServerContext* context, ::service_layer::SLBfdGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLBfdGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBfdv4GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBfdv4GetStats() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SLBfdv4GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4GetStats(::grpc::ServerContext* context, ::service_layer::SLBfdGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLBfdGetStatsMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBfdv4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBfdv4GetNotifStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SLBfdv4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4GetNotifStream(::grpc::ServerContext* context, ::service_layer::SLBfdGetNotifMsg* request, ::grpc::ServerAsyncWriter< ::service_layer::SLBfdv4Notif>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBfdv4SessionOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBfdv4SessionOp() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SLBfdv4SessionOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4SessionOp(::grpc::ServerContext* context, ::service_layer::SLBfdv4Msg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLBfdv4MsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBfdv4SessionGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBfdv4SessionGet() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SLBfdv4SessionGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4SessionGet(::grpc::ServerContext* context, ::service_layer::SLBfdv4GetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLBfdv4GetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLBfdv4RegOp<WithAsyncMethod_SLBfdv4Get<WithAsyncMethod_SLBfdv4GetStats<WithAsyncMethod_SLBfdv4GetNotifStream<WithAsyncMethod_SLBfdv4SessionOp<WithAsyncMethod_SLBfdv4SessionGet<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLBfdv4RegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBfdv4RegOp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdRegMsg, ::service_layer::SLBfdRegMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBfdRegMsg* request, ::service_layer::SLBfdRegMsgRsp* response) { return this->SLBfdv4RegOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLBfdv4RegOp(
        ::grpc::MessageAllocator< ::service_layer::SLBfdRegMsg, ::service_layer::SLBfdRegMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdRegMsg, ::service_layer::SLBfdRegMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLBfdv4RegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4RegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLBfdv4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBfdv4Get() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetMsgRsp* response) { return this->SLBfdv4Get(context, request, response); }));}
    void SetMessageAllocatorFor_SLBfdv4Get(
        ::grpc::MessageAllocator< ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLBfdv4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4Get(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4Get(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLBfdv4GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBfdv4GetStats() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetStatsMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBfdGetMsg* request, ::service_layer::SLBfdGetStatsMsgRsp* response) { return this->SLBfdv4GetStats(context, request, response); }));}
    void SetMessageAllocatorFor_SLBfdv4GetStats(
        ::grpc::MessageAllocator< ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetStatsMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetStatsMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLBfdv4GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLBfdv4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBfdv4GetNotifStream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service_layer::SLBfdGetNotifMsg, ::service_layer::SLBfdv4Notif>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBfdGetNotifMsg* request) { return this->SLBfdv4GetNotifStream(context, request); }));
    }
    ~WithCallbackMethod_SLBfdv4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service_layer::SLBfdv4Notif>* SLBfdv4GetNotifStream(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLBfdv4SessionOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBfdv4SessionOp() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdv4Msg, ::service_layer::SLBfdv4MsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBfdv4Msg* request, ::service_layer::SLBfdv4MsgRsp* response) { return this->SLBfdv4SessionOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLBfdv4SessionOp(
        ::grpc::MessageAllocator< ::service_layer::SLBfdv4Msg, ::service_layer::SLBfdv4MsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdv4Msg, ::service_layer::SLBfdv4MsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLBfdv4SessionOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4SessionOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLBfdv4SessionGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBfdv4SessionGet() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdv4GetMsg, ::service_layer::SLBfdv4GetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBfdv4GetMsg* request, ::service_layer::SLBfdv4GetMsgRsp* response) { return this->SLBfdv4SessionGet(context, request, response); }));}
    void SetMessageAllocatorFor_SLBfdv4SessionGet(
        ::grpc::MessageAllocator< ::service_layer::SLBfdv4GetMsg, ::service_layer::SLBfdv4GetMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLBfdv4GetMsg, ::service_layer::SLBfdv4GetMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLBfdv4SessionGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4SessionGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SLBfdv4RegOp<WithCallbackMethod_SLBfdv4Get<WithCallbackMethod_SLBfdv4GetStats<WithCallbackMethod_SLBfdv4GetNotifStream<WithCallbackMethod_SLBfdv4SessionOp<WithCallbackMethod_SLBfdv4SessionGet<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLBfdv4RegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBfdv4RegOp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLBfdv4RegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLBfdv4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBfdv4Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLBfdv4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4Get(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLBfdv4GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBfdv4GetStats() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SLBfdv4GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLBfdv4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBfdv4GetNotifStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SLBfdv4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLBfdv4SessionOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBfdv4SessionOp() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SLBfdv4SessionOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLBfdv4SessionGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBfdv4SessionGet() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SLBfdv4SessionGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBfdv4RegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBfdv4RegOp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLBfdv4RegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4RegOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBfdv4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBfdv4Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SLBfdv4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4Get(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4Get(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBfdv4GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBfdv4GetStats() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SLBfdv4GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4GetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBfdv4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBfdv4GetNotifStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SLBfdv4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4GetNotifStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBfdv4SessionOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBfdv4SessionOp() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SLBfdv4SessionOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4SessionOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBfdv4SessionGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBfdv4SessionGet() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SLBfdv4SessionGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBfdv4SessionGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBfdv4RegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBfdv4RegOp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLBfdv4RegOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLBfdv4RegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4RegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBfdv4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBfdv4Get() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLBfdv4Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLBfdv4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4Get(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBfdv4GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBfdv4GetStats() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLBfdv4GetStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLBfdv4GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBfdv4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBfdv4GetNotifStream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SLBfdv4GetNotifStream(context, request); }));
    }
    ~WithRawCallbackMethod_SLBfdv4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SLBfdv4GetNotifStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBfdv4SessionOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBfdv4SessionOp() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLBfdv4SessionOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLBfdv4SessionOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4SessionOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBfdv4SessionGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBfdv4SessionGet() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLBfdv4SessionGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLBfdv4SessionGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLBfdv4SessionGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLBfdv4RegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLBfdv4RegOp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLBfdRegMsg, ::service_layer::SLBfdRegMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLBfdRegMsg, ::service_layer::SLBfdRegMsgRsp>* streamer) {
                       return this->StreamedSLBfdv4RegOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLBfdv4RegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBfdv4RegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdRegMsg* /*request*/, ::service_layer::SLBfdRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLBfdv4RegOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLBfdRegMsg,::service_layer::SLBfdRegMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLBfdv4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLBfdv4Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetMsgRsp>* streamer) {
                       return this->StreamedSLBfdv4Get(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLBfdv4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBfdv4Get(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLBfdv4Get(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLBfdGetMsg,::service_layer::SLBfdGetMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLBfdv4GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLBfdv4GetStats() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetStatsMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLBfdGetMsg, ::service_layer::SLBfdGetStatsMsgRsp>* streamer) {
                       return this->StreamedSLBfdv4GetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLBfdv4GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBfdv4GetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetMsg* /*request*/, ::service_layer::SLBfdGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLBfdv4GetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLBfdGetMsg,::service_layer::SLBfdGetStatsMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLBfdv4SessionOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLBfdv4SessionOp() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLBfdv4Msg, ::service_layer::SLBfdv4MsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLBfdv4Msg, ::service_layer::SLBfdv4MsgRsp>* streamer) {
                       return this->StreamedSLBfdv4SessionOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLBfdv4SessionOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBfdv4SessionOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4Msg* /*request*/, ::service_layer::SLBfdv4MsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLBfdv4SessionOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLBfdv4Msg,::service_layer::SLBfdv4MsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLBfdv4SessionGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLBfdv4SessionGet() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLBfdv4GetMsg, ::service_layer::SLBfdv4GetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLBfdv4GetMsg, ::service_layer::SLBfdv4GetMsgRsp>* streamer) {
                       return this->StreamedSLBfdv4SessionGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLBfdv4SessionGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBfdv4SessionGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdv4GetMsg* /*request*/, ::service_layer::SLBfdv4GetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLBfdv4SessionGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLBfdv4GetMsg,::service_layer::SLBfdv4GetMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLBfdv4RegOp<WithStreamedUnaryMethod_SLBfdv4Get<WithStreamedUnaryMethod_SLBfdv4GetStats<WithStreamedUnaryMethod_SLBfdv4SessionOp<WithStreamedUnaryMethod_SLBfdv4SessionGet<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SLBfdv4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SLBfdv4GetNotifStream() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service_layer::SLBfdGetNotifMsg, ::service_layer::SLBfdv4Notif>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service_layer::SLBfdGetNotifMsg, ::service_layer::SLBfdv4Notif>* streamer) {
                       return this->StreamedSLBfdv4GetNotifStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SLBfdv4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBfdv4GetNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBfdGetNotifMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBfdv4Notif>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSLBfdv4GetNotifStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service_layer::SLBfdGetNotifMsg,::service_layer::SLBfdv4Notif>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SLBfdv4GetNotifStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLBfdv4RegOp<WithStreamedUnaryMethod_SLBfdv4Get<WithStreamedUnaryMethod_SLBfdv4GetStats<WithSplitStreamingMethod_SLBfdv4GetNotifStream<WithStreamedUnaryMethod_SLBfdv4SessionOp<WithStreamedUnaryMethod_SLBfdv4SessionGet<Service > > > > > > StreamedService;
};
// @addtogroup SLBfdIPv4Oper
// @{
// ;
// BFD Registration Operations.
//

}  // namespace service_layer


#endif  // GRPC_sl_5fbfd_5fipv4_2eproto__INCLUDED
