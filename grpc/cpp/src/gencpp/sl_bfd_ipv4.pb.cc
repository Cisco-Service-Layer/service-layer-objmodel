// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_ipv4.proto

#include "sl_bfd_ipv4.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLBfdv4Key::SLBfdv4Key(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interface_(nullptr)
  , type_(0)

  , nbraddr_(0u)
  , sourceaddr_(0u){}
struct SLBfdv4KeyDefaultTypeInternal {
  constexpr SLBfdv4KeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4KeyDefaultTypeInternal() {}
  union {
    SLBfdv4Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4KeyDefaultTypeInternal _SLBfdv4Key_default_instance_;
constexpr SLBfdv4SessionCfg::SLBfdv4SessionCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , config_(nullptr){}
struct SLBfdv4SessionCfgDefaultTypeInternal {
  constexpr SLBfdv4SessionCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4SessionCfgDefaultTypeInternal() {}
  union {
    SLBfdv4SessionCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4SessionCfgDefaultTypeInternal _SLBfdv4SessionCfg_default_instance_;
constexpr SLBfdv4Msg::SLBfdv4Msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessions_()
  , oper_(0)
{}
struct SLBfdv4MsgDefaultTypeInternal {
  constexpr SLBfdv4MsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4MsgDefaultTypeInternal() {}
  union {
    SLBfdv4Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4MsgDefaultTypeInternal _SLBfdv4Msg_default_instance_;
constexpr SLBfdv4Res::SLBfdv4Res(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , key_(nullptr){}
struct SLBfdv4ResDefaultTypeInternal {
  constexpr SLBfdv4ResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4ResDefaultTypeInternal() {}
  union {
    SLBfdv4Res _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4ResDefaultTypeInternal _SLBfdv4Res_default_instance_;
constexpr SLBfdv4MsgRsp::SLBfdv4MsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr){}
struct SLBfdv4MsgRspDefaultTypeInternal {
  constexpr SLBfdv4MsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4MsgRspDefaultTypeInternal() {}
  union {
    SLBfdv4MsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4MsgRspDefaultTypeInternal _SLBfdv4MsgRsp_default_instance_;
constexpr SLBfdv4GetMsg::SLBfdv4GetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , seqnum_(PROTOBUF_ULONGLONG(0))
  , entriescount_(0u)
  , getnext_(false){}
struct SLBfdv4GetMsgDefaultTypeInternal {
  constexpr SLBfdv4GetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4GetMsgDefaultTypeInternal() {}
  union {
    SLBfdv4GetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4GetMsgDefaultTypeInternal _SLBfdv4GetMsg_default_instance_;
constexpr SLBfdv4SessionCfgState::SLBfdv4SessionCfgState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , config_(nullptr)
  , state_(nullptr){}
struct SLBfdv4SessionCfgStateDefaultTypeInternal {
  constexpr SLBfdv4SessionCfgStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4SessionCfgStateDefaultTypeInternal() {}
  union {
    SLBfdv4SessionCfgState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4SessionCfgStateDefaultTypeInternal _SLBfdv4SessionCfgState_default_instance_;
constexpr SLBfdv4GetMsgRsp::SLBfdv4GetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , errstatus_(nullptr)
  , eof_(false){}
struct SLBfdv4GetMsgRspDefaultTypeInternal {
  constexpr SLBfdv4GetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4GetMsgRspDefaultTypeInternal() {}
  union {
    SLBfdv4GetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4GetMsgRspDefaultTypeInternal _SLBfdv4GetMsgRsp_default_instance_;
constexpr SLBfdv4SessionState::SLBfdv4SessionState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , state_(nullptr){}
struct SLBfdv4SessionStateDefaultTypeInternal {
  constexpr SLBfdv4SessionStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4SessionStateDefaultTypeInternal() {}
  union {
    SLBfdv4SessionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4SessionStateDefaultTypeInternal _SLBfdv4SessionState_default_instance_;
constexpr SLBfdv4Notif::SLBfdv4Notif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventtype_(0)

  , _oneof_case_{}{}
struct SLBfdv4NotifDefaultTypeInternal {
  constexpr SLBfdv4NotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv4NotifDefaultTypeInternal() {}
  union {
    SLBfdv4Notif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv4NotifDefaultTypeInternal _SLBfdv4Notif_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fbfd_5fipv4_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sl_5fbfd_5fipv4_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fbfd_5fipv4_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sl_5fbfd_5fipv4_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Key, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Key, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Key, nbraddr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Key, interface_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Key, sourceaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfg, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Msg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Msg, sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Res, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Res, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4MsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4MsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4MsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsg, seqnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfgState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfgState, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfgState, config_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionCfgState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4GetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionState, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4SessionState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Notif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Notif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Notif, eventtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv4Notif, Event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service_layer::SLBfdv4Key)},
  { 10, -1, sizeof(::service_layer::SLBfdv4SessionCfg)},
  { 17, -1, sizeof(::service_layer::SLBfdv4Msg)},
  { 24, -1, sizeof(::service_layer::SLBfdv4Res)},
  { 31, -1, sizeof(::service_layer::SLBfdv4MsgRsp)},
  { 38, -1, sizeof(::service_layer::SLBfdv4GetMsg)},
  { 47, -1, sizeof(::service_layer::SLBfdv4SessionCfgState)},
  { 55, -1, sizeof(::service_layer::SLBfdv4GetMsgRsp)},
  { 63, -1, sizeof(::service_layer::SLBfdv4SessionState)},
  { 70, -1, sizeof(::service_layer::SLBfdv4Notif)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4SessionCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4Msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4Res_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4MsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4GetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4SessionCfgState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4GetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4SessionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv4Notif_default_instance_),
};

const char descriptor_table_protodef_sl_5fbfd_5fipv4_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sl_bfd_ipv4.proto\022\rservice_layer\032\025sl_c"
  "ommon_types.proto\032\023sl_bfd_common.proto\"\231"
  "\001\n\nSLBfdv4Key\022&\n\004Type\030\001 \001(\0162\030.service_la"
  "yer.SLBfdType\022\017\n\007VrfName\030\002 \001(\t\022\017\n\007NbrAdd"
  "r\030\003 \001(\r\022-\n\tInterface\030\004 \001(\0132\032.service_lay"
  "er.SLInterface\022\022\n\nSourceAddr\030\005 \001(\r\"m\n\021SL"
  "Bfdv4SessionCfg\022&\n\003Key\030\001 \001(\0132\031.service_l"
  "ayer.SLBfdv4Key\0220\n\006Config\030\002 \001(\0132 .servic"
  "e_layer.SLBfdConfigCommon\"i\n\nSLBfdv4Msg\022"
  "\'\n\004Oper\030\001 \001(\0162\031.service_layer.SLObjectOp"
  "\0222\n\010Sessions\030\002 \003(\0132 .service_layer.SLBfd"
  "v4SessionCfg\"e\n\nSLBfdv4Res\022/\n\tErrStatus\030"
  "\001 \001(\0132\034.service_layer.SLErrorStatus\022&\n\003K"
  "ey\030\002 \001(\0132\031.service_layer.SLBfdv4Key\"p\n\rS"
  "LBfdv4MsgRsp\0223\n\rStatusSummary\030\001 \001(\0132\034.se"
  "rvice_layer.SLErrorStatus\022*\n\007Results\030\002 \003"
  "(\0132\031.service_layer.SLBfdv4Res\"n\n\rSLBfdv4"
  "GetMsg\022&\n\003Key\030\001 \001(\0132\031.service_layer.SLBf"
  "dv4Key\022\016\n\006SeqNum\030\002 \001(\004\022\024\n\014EntriesCount\030\003"
  " \001(\r\022\017\n\007GetNext\030\004 \001(\010\"\242\001\n\026SLBfdv4Session"
  "CfgState\022&\n\003Key\030\001 \001(\0132\031.service_layer.SL"
  "Bfdv4Key\0220\n\006Config\030\002 \001(\0132 .service_layer"
  ".SLBfdConfigCommon\022.\n\005State\030\003 \001(\0132\037.serv"
  "ice_layer.SLBfdCommonState\"\210\001\n\020SLBfdv4Ge"
  "tMsgRsp\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001(\0132"
  "\034.service_layer.SLErrorStatus\0226\n\007Entries"
  "\030\003 \003(\0132%.service_layer.SLBfdv4SessionCfg"
  "State\"m\n\023SLBfdv4SessionState\022&\n\003Key\030\001 \001("
  "\0132\031.service_layer.SLBfdv4Key\022.\n\005State\030\002 "
  "\001(\0132\037.service_layer.SLBfdCommonState\"\263\001\n"
  "\014SLBfdv4Notif\0220\n\tEventType\030\001 \001(\0162\035.servi"
  "ce_layer.SLBfdNotifType\0221\n\tErrStatus\030\002 \001"
  "(\0132\034.service_layer.SLErrorStatusH\000\0225\n\007Se"
  "ssion\030\003 \001(\0132\".service_layer.SLBfdv4Sessi"
  "onStateH\000B\007\n\005Event2\356\003\n\013SLBfdv4Oper\022I\n\014SL"
  "Bfdv4RegOp\022\032.service_layer.SLBfdRegMsg\032\035"
  ".service_layer.SLBfdRegMsgRsp\022G\n\nSLBfdv4"
  "Get\022\032.service_layer.SLBfdGetMsg\032\035.servic"
  "e_layer.SLBfdGetMsgRsp\022Q\n\017SLBfdv4GetStat"
  "s\022\032.service_layer.SLBfdGetMsg\032\".service_"
  "layer.SLBfdGetStatsMsgRsp\022W\n\025SLBfdv4GetN"
  "otifStream\022\037.service_layer.SLBfdGetNotif"
  "Msg\032\033.service_layer.SLBfdv4Notif0\001\022K\n\020SL"
  "Bfdv4SessionOp\022\031.service_layer.SLBfdv4Ms"
  "g\032\034.service_layer.SLBfdv4MsgRsp\022R\n\021SLBfd"
  "v4SessionGet\022\034.service_layer.SLBfdv4GetM"
  "sg\032\037.service_layer.SLBfdv4GetMsgRspBCZAg"
  "ithub.com/Cisco-service-layer/service-la"
  "yer-objmodel/grpc/protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fbfd_5fipv4_2eproto_deps[2] = {
  &::descriptor_table_sl_5fbfd_5fcommon_2eproto,
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fbfd_5fipv4_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbfd_5fipv4_2eproto = {
  false, false, 1952, descriptor_table_protodef_sl_5fbfd_5fipv4_2eproto, "sl_bfd_ipv4.proto", 
  &descriptor_table_sl_5fbfd_5fipv4_2eproto_once, descriptor_table_sl_5fbfd_5fipv4_2eproto_deps, 2, 10,
  schemas, file_default_instances, TableStruct_sl_5fbfd_5fipv4_2eproto::offsets,
  file_level_metadata_sl_5fbfd_5fipv4_2eproto, file_level_enum_descriptors_sl_5fbfd_5fipv4_2eproto, file_level_service_descriptors_sl_5fbfd_5fipv4_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_sl_5fbfd_5fipv4_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbfd_5fipv4_2eproto);
  return descriptor_table_sl_5fbfd_5fipv4_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fbfd_5fipv4_2eproto(&descriptor_table_sl_5fbfd_5fipv4_2eproto);
namespace service_layer {

// ===================================================================

class SLBfdv4Key::_Internal {
 public:
  static const ::service_layer::SLInterface& interface(const SLBfdv4Key* msg);
};

const ::service_layer::SLInterface&
SLBfdv4Key::_Internal::interface(const SLBfdv4Key* msg) {
  return *msg->interface_;
}
void SLBfdv4Key::clear_interface() {
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
SLBfdv4Key::SLBfdv4Key(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4Key)
}
SLBfdv4Key::SLBfdv4Key(const SLBfdv4Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArena());
  }
  if (from._internal_has_interface()) {
    interface_ = new ::service_layer::SLInterface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceaddr_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sourceaddr_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4Key)
}

void SLBfdv4Key::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sourceaddr_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(sourceaddr_));
}

SLBfdv4Key::~SLBfdv4Key() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4Key)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4Key::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interface_;
}

void SLBfdv4Key::ArenaDtor(void* object) {
  SLBfdv4Key* _this = reinterpret_cast< SLBfdv4Key* >(object);
  (void)_this;
}
void SLBfdv4Key::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4Key::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceaddr_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sourceaddr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLBfdType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLBfdType>(val));
        } else goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBfdv4Key.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 NbrAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nbraddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLInterface Interface = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SourceAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sourceaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4Key::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdType Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string VrfName = 2;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBfdv4Key.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // uint32 NbrAddr = 3;
  if (this->nbraddr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nbraddr(), target);
  }

  // .service_layer.SLInterface Interface = 4;
  if (this->has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::interface(this), target, stream);
  }

  // uint32 SourceAddr = 5;
  if (this->sourceaddr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sourceaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4Key)
  return target;
}

size_t SLBfdv4Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4Key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLInterface Interface = 4;
  if (this->has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  // .service_layer.SLBfdType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 NbrAddr = 3;
  if (this->nbraddr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nbraddr());
  }

  // uint32 SourceAddr = 5;
  if (this->sourceaddr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sourceaddr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4Key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4Key)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4Key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4Key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4Key)
    MergeFrom(*source);
  }
}

void SLBfdv4Key::MergeFrom(const SLBfdv4Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.has_interface()) {
    _internal_mutable_interface()->::service_layer::SLInterface::MergeFrom(from._internal_interface());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.nbraddr() != 0) {
    _internal_set_nbraddr(from._internal_nbraddr());
  }
  if (from.sourceaddr() != 0) {
    _internal_set_sourceaddr(from._internal_sourceaddr());
  }
}

void SLBfdv4Key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4Key::CopyFrom(const SLBfdv4Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4Key::IsInitialized() const {
  return true;
}

void SLBfdv4Key::InternalSwap(SLBfdv4Key* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4Key, sourceaddr_)
      + sizeof(SLBfdv4Key::sourceaddr_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4Key, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4Key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4SessionCfg::_Internal {
 public:
  static const ::service_layer::SLBfdv4Key& key(const SLBfdv4SessionCfg* msg);
  static const ::service_layer::SLBfdConfigCommon& config(const SLBfdv4SessionCfg* msg);
};

const ::service_layer::SLBfdv4Key&
SLBfdv4SessionCfg::_Internal::key(const SLBfdv4SessionCfg* msg) {
  return *msg->key_;
}
const ::service_layer::SLBfdConfigCommon&
SLBfdv4SessionCfg::_Internal::config(const SLBfdv4SessionCfg* msg) {
  return *msg->config_;
}
void SLBfdv4SessionCfg::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
SLBfdv4SessionCfg::SLBfdv4SessionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4SessionCfg)
}
SLBfdv4SessionCfg::SLBfdv4SessionCfg(const SLBfdv4SessionCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv4Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::service_layer::SLBfdConfigCommon(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4SessionCfg)
}

void SLBfdv4SessionCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&key_)) + sizeof(config_));
}

SLBfdv4SessionCfg::~SLBfdv4SessionCfg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4SessionCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4SessionCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete config_;
}

void SLBfdv4SessionCfg::ArenaDtor(void* object) {
  SLBfdv4SessionCfg* _this = reinterpret_cast< SLBfdv4SessionCfg* >(object);
  (void)_this;
}
void SLBfdv4SessionCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4SessionCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4SessionCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4SessionCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4SessionCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLBfdv4Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLBfdConfigCommon Config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4SessionCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4SessionCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4SessionCfg)
  return target;
}

size_t SLBfdv4SessionCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4SessionCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4SessionCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4SessionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4SessionCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4SessionCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4SessionCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4SessionCfg)
    MergeFrom(*source);
  }
}

void SLBfdv4SessionCfg::MergeFrom(const SLBfdv4SessionCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4SessionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv4Key::MergeFrom(from._internal_key());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::service_layer::SLBfdConfigCommon::MergeFrom(from._internal_config());
  }
}

void SLBfdv4SessionCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4SessionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4SessionCfg::CopyFrom(const SLBfdv4SessionCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4SessionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4SessionCfg::IsInitialized() const {
  return true;
}

void SLBfdv4SessionCfg::InternalSwap(SLBfdv4SessionCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4SessionCfg, config_)
      + sizeof(SLBfdv4SessionCfg::config_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4SessionCfg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4SessionCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4Msg::_Internal {
 public:
};

SLBfdv4Msg::SLBfdv4Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sessions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4Msg)
}
SLBfdv4Msg::SLBfdv4Msg(const SLBfdv4Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4Msg)
}

void SLBfdv4Msg::SharedCtor() {
oper_ = 0;
}

SLBfdv4Msg::~SLBfdv4Msg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4Msg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLBfdv4Msg::ArenaDtor(void* object) {
  SLBfdv4Msg* _this = reinterpret_cast< SLBfdv4Msg* >(object);
  (void)_this;
}
void SLBfdv4Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4Msg)
  return target;
}

size_t SLBfdv4Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4Msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4Msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4Msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4Msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4Msg)
    MergeFrom(*source);
  }
}

void SLBfdv4Msg::MergeFrom(const SLBfdv4Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLBfdv4Msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4Msg::CopyFrom(const SLBfdv4Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4Msg::IsInitialized() const {
  return true;
}

void SLBfdv4Msg::InternalSwap(SLBfdv4Msg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sessions_.InternalSwap(&other->sessions_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4Msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4Res::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdv4Res* msg);
  static const ::service_layer::SLBfdv4Key& key(const SLBfdv4Res* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv4Res::_Internal::errstatus(const SLBfdv4Res* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLBfdv4Key&
SLBfdv4Res::_Internal::key(const SLBfdv4Res* msg) {
  return *msg->key_;
}
void SLBfdv4Res::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdv4Res::SLBfdv4Res(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4Res)
}
SLBfdv4Res::SLBfdv4Res(const SLBfdv4Res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv4Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4Res)
}

void SLBfdv4Res::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(key_));
}

SLBfdv4Res::~SLBfdv4Res() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4Res)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4Res::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete key_;
}

void SLBfdv4Res::ArenaDtor(void* object) {
  SLBfdv4Res* _this = reinterpret_cast< SLBfdv4Res* >(object);
  (void)_this;
}
void SLBfdv4Res::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4Res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4Res::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4Res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLBfdv4Key Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4Res::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBfdv4Key Key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4Res)
  return target;
}

size_t SLBfdv4Res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4Res)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLBfdv4Key Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4Res::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4Res)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4Res* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4Res>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4Res)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4Res)
    MergeFrom(*source);
  }
}

void SLBfdv4Res::MergeFrom(const SLBfdv4Res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4Res)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv4Key::MergeFrom(from._internal_key());
  }
}

void SLBfdv4Res::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4Res::CopyFrom(const SLBfdv4Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4Res::IsInitialized() const {
  return true;
}

void SLBfdv4Res::InternalSwap(SLBfdv4Res* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4Res, key_)
      + sizeof(SLBfdv4Res::key_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4Res, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4Res::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4MsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLBfdv4MsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv4MsgRsp::_Internal::statussummary(const SLBfdv4MsgRsp* msg) {
  return *msg->statussummary_;
}
void SLBfdv4MsgRsp::clear_statussummary() {
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLBfdv4MsgRsp::SLBfdv4MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4MsgRsp)
}
SLBfdv4MsgRsp::SLBfdv4MsgRsp(const SLBfdv4MsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4MsgRsp)
}

void SLBfdv4MsgRsp::SharedCtor() {
statussummary_ = nullptr;
}

SLBfdv4MsgRsp::~SLBfdv4MsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4MsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4MsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLBfdv4MsgRsp::ArenaDtor(void* object) {
  SLBfdv4MsgRsp* _this = reinterpret_cast< SLBfdv4MsgRsp* >(object);
  (void)_this;
}
void SLBfdv4MsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4MsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4MsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4MsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4MsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLBfdv4Res Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4MsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4MsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLBfdv4Res Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4MsgRsp)
  return target;
}

size_t SLBfdv4MsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4MsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBfdv4Res Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4MsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4MsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4MsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4MsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4MsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4MsgRsp)
    MergeFrom(*source);
  }
}

void SLBfdv4MsgRsp::MergeFrom(const SLBfdv4MsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4MsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
}

void SLBfdv4MsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4MsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4MsgRsp::CopyFrom(const SLBfdv4MsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4MsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4MsgRsp::IsInitialized() const {
  return true;
}

void SLBfdv4MsgRsp::InternalSwap(SLBfdv4MsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4MsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4GetMsg::_Internal {
 public:
  static const ::service_layer::SLBfdv4Key& key(const SLBfdv4GetMsg* msg);
};

const ::service_layer::SLBfdv4Key&
SLBfdv4GetMsg::_Internal::key(const SLBfdv4GetMsg* msg) {
  return *msg->key_;
}
SLBfdv4GetMsg::SLBfdv4GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4GetMsg)
}
SLBfdv4GetMsg::SLBfdv4GetMsg(const SLBfdv4GetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv4Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4GetMsg)
}

void SLBfdv4GetMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&key_)) + sizeof(getnext_));
}

SLBfdv4GetMsg::~SLBfdv4GetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4GetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4GetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLBfdv4GetMsg::ArenaDtor(void* object) {
  SLBfdv4GetMsg* _this = reinterpret_cast< SLBfdv4GetMsg* >(object);
  (void)_this;
}
void SLBfdv4GetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4GetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4GetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4GetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4GetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLBfdv4Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SeqNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EntriesCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GetNext = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4GetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4GetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seqnum(), target);
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entriescount(), target);
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4GetMsg)
  return target;
}

size_t SLBfdv4GetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4GetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seqnum());
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entriescount());
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4GetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4GetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4GetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4GetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4GetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4GetMsg)
    MergeFrom(*source);
  }
}

void SLBfdv4GetMsg::MergeFrom(const SLBfdv4GetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4GetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv4Key::MergeFrom(from._internal_key());
  }
  if (from.seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from.entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from.getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
}

void SLBfdv4GetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4GetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4GetMsg::CopyFrom(const SLBfdv4GetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4GetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4GetMsg::IsInitialized() const {
  return true;
}

void SLBfdv4GetMsg::InternalSwap(SLBfdv4GetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4GetMsg, getnext_)
      + sizeof(SLBfdv4GetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4GetMsg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4GetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4SessionCfgState::_Internal {
 public:
  static const ::service_layer::SLBfdv4Key& key(const SLBfdv4SessionCfgState* msg);
  static const ::service_layer::SLBfdConfigCommon& config(const SLBfdv4SessionCfgState* msg);
  static const ::service_layer::SLBfdCommonState& state(const SLBfdv4SessionCfgState* msg);
};

const ::service_layer::SLBfdv4Key&
SLBfdv4SessionCfgState::_Internal::key(const SLBfdv4SessionCfgState* msg) {
  return *msg->key_;
}
const ::service_layer::SLBfdConfigCommon&
SLBfdv4SessionCfgState::_Internal::config(const SLBfdv4SessionCfgState* msg) {
  return *msg->config_;
}
const ::service_layer::SLBfdCommonState&
SLBfdv4SessionCfgState::_Internal::state(const SLBfdv4SessionCfgState* msg) {
  return *msg->state_;
}
void SLBfdv4SessionCfgState::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
void SLBfdv4SessionCfgState::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
SLBfdv4SessionCfgState::SLBfdv4SessionCfgState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4SessionCfgState)
}
SLBfdv4SessionCfgState::SLBfdv4SessionCfgState(const SLBfdv4SessionCfgState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv4Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::service_layer::SLBfdConfigCommon(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::service_layer::SLBfdCommonState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4SessionCfgState)
}

void SLBfdv4SessionCfgState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&key_)) + sizeof(state_));
}

SLBfdv4SessionCfgState::~SLBfdv4SessionCfgState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4SessionCfgState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4SessionCfgState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void SLBfdv4SessionCfgState::ArenaDtor(void* object) {
  SLBfdv4SessionCfgState* _this = reinterpret_cast< SLBfdv4SessionCfgState* >(object);
  (void)_this;
}
void SLBfdv4SessionCfgState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4SessionCfgState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4SessionCfgState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4SessionCfgState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4SessionCfgState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLBfdv4Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLBfdConfigCommon Config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLBfdCommonState State = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4SessionCfgState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4SessionCfgState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .service_layer.SLBfdCommonState State = 3;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4SessionCfgState)
  return target;
}

size_t SLBfdv4SessionCfgState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4SessionCfgState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .service_layer.SLBfdCommonState State = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4SessionCfgState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4SessionCfgState)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4SessionCfgState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4SessionCfgState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4SessionCfgState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4SessionCfgState)
    MergeFrom(*source);
  }
}

void SLBfdv4SessionCfgState::MergeFrom(const SLBfdv4SessionCfgState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4SessionCfgState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv4Key::MergeFrom(from._internal_key());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::service_layer::SLBfdConfigCommon::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::service_layer::SLBfdCommonState::MergeFrom(from._internal_state());
  }
}

void SLBfdv4SessionCfgState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4SessionCfgState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4SessionCfgState::CopyFrom(const SLBfdv4SessionCfgState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4SessionCfgState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4SessionCfgState::IsInitialized() const {
  return true;
}

void SLBfdv4SessionCfgState::InternalSwap(SLBfdv4SessionCfgState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4SessionCfgState, state_)
      + sizeof(SLBfdv4SessionCfgState::state_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4SessionCfgState, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4SessionCfgState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4GetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdv4GetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv4GetMsgRsp::_Internal::errstatus(const SLBfdv4GetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLBfdv4GetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdv4GetMsgRsp::SLBfdv4GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4GetMsgRsp)
}
SLBfdv4GetMsgRsp::SLBfdv4GetMsgRsp(const SLBfdv4GetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4GetMsgRsp)
}

void SLBfdv4GetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLBfdv4GetMsgRsp::~SLBfdv4GetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4GetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4GetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLBfdv4GetMsgRsp::ArenaDtor(void* object) {
  SLBfdv4GetMsgRsp* _this = reinterpret_cast< SLBfdv4GetMsgRsp* >(object);
  (void)_this;
}
void SLBfdv4GetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4GetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4GetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4GetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4GetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Eof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4GetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4GetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Eof = 1;
  if (this->eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4GetMsgRsp)
  return target;
}

size_t SLBfdv4GetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4GetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4GetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4GetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4GetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4GetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4GetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4GetMsgRsp)
    MergeFrom(*source);
  }
}

void SLBfdv4GetMsgRsp::MergeFrom(const SLBfdv4GetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4GetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
}

void SLBfdv4GetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4GetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4GetMsgRsp::CopyFrom(const SLBfdv4GetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4GetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4GetMsgRsp::IsInitialized() const {
  return true;
}

void SLBfdv4GetMsgRsp::InternalSwap(SLBfdv4GetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4GetMsgRsp, eof_)
      + sizeof(SLBfdv4GetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4GetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4GetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4SessionState::_Internal {
 public:
  static const ::service_layer::SLBfdv4Key& key(const SLBfdv4SessionState* msg);
  static const ::service_layer::SLBfdCommonState& state(const SLBfdv4SessionState* msg);
};

const ::service_layer::SLBfdv4Key&
SLBfdv4SessionState::_Internal::key(const SLBfdv4SessionState* msg) {
  return *msg->key_;
}
const ::service_layer::SLBfdCommonState&
SLBfdv4SessionState::_Internal::state(const SLBfdv4SessionState* msg) {
  return *msg->state_;
}
void SLBfdv4SessionState::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
SLBfdv4SessionState::SLBfdv4SessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4SessionState)
}
SLBfdv4SessionState::SLBfdv4SessionState(const SLBfdv4SessionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv4Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::service_layer::SLBfdCommonState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4SessionState)
}

void SLBfdv4SessionState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&key_)) + sizeof(state_));
}

SLBfdv4SessionState::~SLBfdv4SessionState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4SessionState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4SessionState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete state_;
}

void SLBfdv4SessionState::ArenaDtor(void* object) {
  SLBfdv4SessionState* _this = reinterpret_cast< SLBfdv4SessionState* >(object);
  (void)_this;
}
void SLBfdv4SessionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4SessionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4SessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4SessionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4SessionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLBfdv4Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLBfdCommonState State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4SessionState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4SessionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLBfdCommonState State = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4SessionState)
  return target;
}

size_t SLBfdv4SessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4SessionState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv4Key Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLBfdCommonState State = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4SessionState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4SessionState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4SessionState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4SessionState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4SessionState)
    MergeFrom(*source);
  }
}

void SLBfdv4SessionState::MergeFrom(const SLBfdv4SessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv4Key::MergeFrom(from._internal_key());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::service_layer::SLBfdCommonState::MergeFrom(from._internal_state());
  }
}

void SLBfdv4SessionState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4SessionState::CopyFrom(const SLBfdv4SessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4SessionState::IsInitialized() const {
  return true;
}

void SLBfdv4SessionState::InternalSwap(SLBfdv4SessionState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv4SessionState, state_)
      + sizeof(SLBfdv4SessionState::state_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv4SessionState, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4SessionState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLBfdv4Notif::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdv4Notif* msg);
  static const ::service_layer::SLBfdv4SessionState& session(const SLBfdv4Notif* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv4Notif::_Internal::errstatus(const SLBfdv4Notif* msg) {
  return *msg->Event_.errstatus_;
}
const ::service_layer::SLBfdv4SessionState&
SLBfdv4Notif::_Internal::session(const SLBfdv4Notif* msg) {
  return *msg->Event_.session_;
}
void SLBfdv4Notif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Notif.ErrStatus)
}
void SLBfdv4Notif::clear_errstatus() {
  if (_internal_has_errstatus()) {
    if (GetArena() == nullptr) {
      delete Event_.errstatus_;
    }
    clear_has_Event();
  }
}
void SLBfdv4Notif::set_allocated_session(::service_layer::SLBfdv4SessionState* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    Event_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Notif.Session)
}
SLBfdv4Notif::SLBfdv4Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv4Notif)
}
SLBfdv4Notif::SLBfdv4Notif(const SLBfdv4Notif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventtype_ = from.eventtype_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::service_layer::SLBfdv4SessionState::MergeFrom(from._internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv4Notif)
}

void SLBfdv4Notif::SharedCtor() {
eventtype_ = 0;
clear_has_Event();
}

SLBfdv4Notif::~SLBfdv4Notif() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv4Notif)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLBfdv4Notif::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLBfdv4Notif::ArenaDtor(void* object) {
  SLBfdv4Notif* _this = reinterpret_cast< SLBfdv4Notif* >(object);
  (void)_this;
}
void SLBfdv4Notif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv4Notif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv4Notif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBfdv4Notif)
  switch (Event_case()) {
    case kErrStatus: {
      if (GetArena() == nullptr) {
        delete Event_.errstatus_;
      }
      break;
    }
    case kSession: {
      if (GetArena() == nullptr) {
        delete Event_.session_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLBfdv4Notif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv4Notif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventtype_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv4Notif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLBfdNotifType EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::service_layer::SLBfdNotifType>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLBfdv4SessionState Session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLBfdv4Notif::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv4Notif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdNotifType EventType = 1;
  if (this->eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventtype(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBfdv4SessionState Session = 3;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv4Notif)
  return target;
}

size_t SLBfdv4Notif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv4Notif)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdNotifType EventType = 1;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  switch (Event_case()) {
    // .service_layer.SLErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.errstatus_);
      break;
    }
    // .service_layer.SLBfdv4SessionState Session = 3;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.session_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLBfdv4Notif::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLBfdv4Notif)
  GOOGLE_DCHECK_NE(&from, this);
  const SLBfdv4Notif* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLBfdv4Notif>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLBfdv4Notif)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLBfdv4Notif)
    MergeFrom(*source);
  }
}

void SLBfdv4Notif::MergeFrom(const SLBfdv4Notif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv4Notif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::service_layer::SLBfdv4SessionState::MergeFrom(from._internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void SLBfdv4Notif::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLBfdv4Notif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLBfdv4Notif::CopyFrom(const SLBfdv4Notif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv4Notif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv4Notif::IsInitialized() const {
  return true;
}

void SLBfdv4Notif::InternalSwap(SLBfdv4Notif* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(eventtype_, other->eventtype_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv4Notif::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4Key* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4Key >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4SessionCfg* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4SessionCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4SessionCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4Msg* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4Res* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4Res >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4Res >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4MsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4MsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4MsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4GetMsg* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4GetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4GetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4SessionCfgState* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4SessionCfgState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4SessionCfgState >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4GetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4GetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4GetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4SessionState* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4SessionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4SessionState >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv4Notif* Arena::CreateMaybeMessage< ::service_layer::SLBfdv4Notif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv4Notif >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
