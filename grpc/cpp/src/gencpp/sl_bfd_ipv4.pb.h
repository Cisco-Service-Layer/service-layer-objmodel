// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_ipv4.proto

#ifndef PROTOBUF_sl_5fbfd_5fipv4_2eproto__INCLUDED
#define PROTOBUF_sl_5fbfd_5fipv4_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_bfd_common.pb.h"
// @@protoc_insertion_point(includes)
namespace service_layer {
class SLBfdCommonState;
class SLBfdCommonStateDefaultTypeInternal;
extern SLBfdCommonStateDefaultTypeInternal _SLBfdCommonState_default_instance_;
class SLBfdConfigCommon;
class SLBfdConfigCommonDefaultTypeInternal;
extern SLBfdConfigCommonDefaultTypeInternal _SLBfdConfigCommon_default_instance_;
class SLBfdGetMsg;
class SLBfdGetMsgDefaultTypeInternal;
extern SLBfdGetMsgDefaultTypeInternal _SLBfdGetMsg_default_instance_;
class SLBfdGetMsgRsp;
class SLBfdGetMsgRspDefaultTypeInternal;
extern SLBfdGetMsgRspDefaultTypeInternal _SLBfdGetMsgRsp_default_instance_;
class SLBfdGetNotifMsg;
class SLBfdGetNotifMsgDefaultTypeInternal;
extern SLBfdGetNotifMsgDefaultTypeInternal _SLBfdGetNotifMsg_default_instance_;
class SLBfdGetStatsMsgRsp;
class SLBfdGetStatsMsgRspDefaultTypeInternal;
extern SLBfdGetStatsMsgRspDefaultTypeInternal _SLBfdGetStatsMsgRsp_default_instance_;
class SLBfdRegMsg;
class SLBfdRegMsgDefaultTypeInternal;
extern SLBfdRegMsgDefaultTypeInternal _SLBfdRegMsg_default_instance_;
class SLBfdRegMsgRsp;
class SLBfdRegMsgRspDefaultTypeInternal;
extern SLBfdRegMsgRspDefaultTypeInternal _SLBfdRegMsgRsp_default_instance_;
class SLBfdv4GetMsg;
class SLBfdv4GetMsgDefaultTypeInternal;
extern SLBfdv4GetMsgDefaultTypeInternal _SLBfdv4GetMsg_default_instance_;
class SLBfdv4GetMsgRsp;
class SLBfdv4GetMsgRspDefaultTypeInternal;
extern SLBfdv4GetMsgRspDefaultTypeInternal _SLBfdv4GetMsgRsp_default_instance_;
class SLBfdv4Key;
class SLBfdv4KeyDefaultTypeInternal;
extern SLBfdv4KeyDefaultTypeInternal _SLBfdv4Key_default_instance_;
class SLBfdv4Msg;
class SLBfdv4MsgDefaultTypeInternal;
extern SLBfdv4MsgDefaultTypeInternal _SLBfdv4Msg_default_instance_;
class SLBfdv4MsgRsp;
class SLBfdv4MsgRspDefaultTypeInternal;
extern SLBfdv4MsgRspDefaultTypeInternal _SLBfdv4MsgRsp_default_instance_;
class SLBfdv4Notif;
class SLBfdv4NotifDefaultTypeInternal;
extern SLBfdv4NotifDefaultTypeInternal _SLBfdv4Notif_default_instance_;
class SLBfdv4Res;
class SLBfdv4ResDefaultTypeInternal;
extern SLBfdv4ResDefaultTypeInternal _SLBfdv4Res_default_instance_;
class SLBfdv4SessionCfg;
class SLBfdv4SessionCfgDefaultTypeInternal;
extern SLBfdv4SessionCfgDefaultTypeInternal _SLBfdv4SessionCfg_default_instance_;
class SLBfdv4SessionCfgState;
class SLBfdv4SessionCfgStateDefaultTypeInternal;
extern SLBfdv4SessionCfgStateDefaultTypeInternal _SLBfdv4SessionCfgState_default_instance_;
class SLBfdv4SessionState;
class SLBfdv4SessionStateDefaultTypeInternal;
extern SLBfdv4SessionStateDefaultTypeInternal _SLBfdv4SessionState_default_instance_;
class SLErrorStatus;
class SLErrorStatusDefaultTypeInternal;
extern SLErrorStatusDefaultTypeInternal _SLErrorStatus_default_instance_;
class SLInterface;
class SLInterfaceDefaultTypeInternal;
extern SLInterfaceDefaultTypeInternal _SLInterface_default_instance_;
class SLIpAddress;
class SLIpAddressDefaultTypeInternal;
extern SLIpAddressDefaultTypeInternal _SLIpAddress_default_instance_;
}  // namespace service_layer

namespace service_layer {

namespace protobuf_sl_5fbfd_5fipv4_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sl_5fbfd_5fipv4_2eproto

// ===================================================================

class SLBfdv4Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Key) */ {
 public:
  SLBfdv4Key();
  virtual ~SLBfdv4Key();

  SLBfdv4Key(const SLBfdv4Key& from);

  inline SLBfdv4Key& operator=(const SLBfdv4Key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4Key& default_instance();

  static inline const SLBfdv4Key* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Key*>(
               &_SLBfdv4Key_default_instance_);
  }

  void Swap(SLBfdv4Key* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4Key* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4Key* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4Key& from);
  void MergeFrom(const SLBfdv4Key& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string VrfName = 2;
  void clear_vrfname();
  static const int kVrfNameFieldNumber = 2;
  const ::std::string& vrfname() const;
  void set_vrfname(const ::std::string& value);
  #if LANG_CXX11
  void set_vrfname(::std::string&& value);
  #endif
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  ::std::string* mutable_vrfname();
  ::std::string* release_vrfname();
  void set_allocated_vrfname(::std::string* vrfname);

  // .service_layer.SLInterface Interface = 4;
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 4;
  const ::service_layer::SLInterface& interface() const;
  ::service_layer::SLInterface* mutable_interface();
  ::service_layer::SLInterface* release_interface();
  void set_allocated_interface(::service_layer::SLInterface* interface);

  // .service_layer.SLBfdType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::service_layer::SLBfdType type() const;
  void set_type(::service_layer::SLBfdType value);

  // uint32 NbrAddr = 3;
  void clear_nbraddr();
  static const int kNbrAddrFieldNumber = 3;
  ::google::protobuf::uint32 nbraddr() const;
  void set_nbraddr(::google::protobuf::uint32 value);

  // uint32 SourceAddr = 5;
  void clear_sourceaddr();
  static const int kSourceAddrFieldNumber = 5;
  ::google::protobuf::uint32 sourceaddr() const;
  void set_sourceaddr(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLInterface* interface_;
  int type_;
  ::google::protobuf::uint32 nbraddr_;
  ::google::protobuf::uint32 sourceaddr_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4SessionCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4SessionCfg) */ {
 public:
  SLBfdv4SessionCfg();
  virtual ~SLBfdv4SessionCfg();

  SLBfdv4SessionCfg(const SLBfdv4SessionCfg& from);

  inline SLBfdv4SessionCfg& operator=(const SLBfdv4SessionCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4SessionCfg& default_instance();

  static inline const SLBfdv4SessionCfg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4SessionCfg*>(
               &_SLBfdv4SessionCfg_default_instance_);
  }

  void Swap(SLBfdv4SessionCfg* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4SessionCfg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4SessionCfg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4SessionCfg& from);
  void MergeFrom(const SLBfdv4SessionCfg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4SessionCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv4Key& key() const;
  ::service_layer::SLBfdv4Key* mutable_key();
  ::service_layer::SLBfdv4Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);

  // .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::service_layer::SLBfdConfigCommon& config() const;
  ::service_layer::SLBfdConfigCommon* mutable_config();
  ::service_layer::SLBfdConfigCommon* release_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4SessionCfg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLBfdv4Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Msg) */ {
 public:
  SLBfdv4Msg();
  virtual ~SLBfdv4Msg();

  SLBfdv4Msg(const SLBfdv4Msg& from);

  inline SLBfdv4Msg& operator=(const SLBfdv4Msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4Msg& default_instance();

  static inline const SLBfdv4Msg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Msg*>(
               &_SLBfdv4Msg_default_instance_);
  }

  void Swap(SLBfdv4Msg* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4Msg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4Msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4Msg& from);
  void MergeFrom(const SLBfdv4Msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  const ::service_layer::SLBfdv4SessionCfg& sessions(int index) const;
  ::service_layer::SLBfdv4SessionCfg* mutable_sessions(int index);
  ::service_layer::SLBfdv4SessionCfg* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >&
      sessions() const;

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg > sessions_;
  int oper_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4Res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Res) */ {
 public:
  SLBfdv4Res();
  virtual ~SLBfdv4Res();

  SLBfdv4Res(const SLBfdv4Res& from);

  inline SLBfdv4Res& operator=(const SLBfdv4Res& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4Res& default_instance();

  static inline const SLBfdv4Res* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Res*>(
               &_SLBfdv4Res_default_instance_);
  }

  void Swap(SLBfdv4Res* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4Res* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4Res* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4Res& from);
  void MergeFrom(const SLBfdv4Res& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4Res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // .service_layer.SLBfdv4Key Key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::service_layer::SLBfdv4Key& key() const;
  ::service_layer::SLBfdv4Key* mutable_key();
  ::service_layer::SLBfdv4Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLBfdv4Key* key_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4MsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4MsgRsp) */ {
 public:
  SLBfdv4MsgRsp();
  virtual ~SLBfdv4MsgRsp();

  SLBfdv4MsgRsp(const SLBfdv4MsgRsp& from);

  inline SLBfdv4MsgRsp& operator=(const SLBfdv4MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4MsgRsp& default_instance();

  static inline const SLBfdv4MsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4MsgRsp*>(
               &_SLBfdv4MsgRsp_default_instance_);
  }

  void Swap(SLBfdv4MsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4MsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4MsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4MsgRsp& from);
  void MergeFrom(const SLBfdv4MsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4MsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .service_layer.SLBfdv4Res Results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::service_layer::SLBfdv4Res& results(int index) const;
  ::service_layer::SLBfdv4Res* mutable_results(int index);
  ::service_layer::SLBfdv4Res* add_results();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4Res >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4Res >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  void clear_statussummary();
  static const int kStatusSummaryFieldNumber = 1;
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* mutable_statussummary();
  ::service_layer::SLErrorStatus* release_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4MsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4Res > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4GetMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4GetMsg) */ {
 public:
  SLBfdv4GetMsg();
  virtual ~SLBfdv4GetMsg();

  SLBfdv4GetMsg(const SLBfdv4GetMsg& from);

  inline SLBfdv4GetMsg& operator=(const SLBfdv4GetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4GetMsg& default_instance();

  static inline const SLBfdv4GetMsg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4GetMsg*>(
               &_SLBfdv4GetMsg_default_instance_);
  }

  void Swap(SLBfdv4GetMsg* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4GetMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4GetMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4GetMsg& from);
  void MergeFrom(const SLBfdv4GetMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4GetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv4Key& key() const;
  ::service_layer::SLBfdv4Key* mutable_key();
  ::service_layer::SLBfdv4Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);

  // uint64 SeqNum = 2;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 2;
  ::google::protobuf::uint64 seqnum() const;
  void set_seqnum(::google::protobuf::uint64 value);

  // uint32 EntriesCount = 3;
  void clear_entriescount();
  static const int kEntriesCountFieldNumber = 3;
  ::google::protobuf::uint32 entriescount() const;
  void set_entriescount(::google::protobuf::uint32 value);

  // bool GetNext = 4;
  void clear_getnext();
  static const int kGetNextFieldNumber = 4;
  bool getnext() const;
  void set_getnext(bool value);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4GetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLBfdv4Key* key_;
  ::google::protobuf::uint64 seqnum_;
  ::google::protobuf::uint32 entriescount_;
  bool getnext_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4SessionCfgState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4SessionCfgState) */ {
 public:
  SLBfdv4SessionCfgState();
  virtual ~SLBfdv4SessionCfgState();

  SLBfdv4SessionCfgState(const SLBfdv4SessionCfgState& from);

  inline SLBfdv4SessionCfgState& operator=(const SLBfdv4SessionCfgState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4SessionCfgState& default_instance();

  static inline const SLBfdv4SessionCfgState* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4SessionCfgState*>(
               &_SLBfdv4SessionCfgState_default_instance_);
  }

  void Swap(SLBfdv4SessionCfgState* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4SessionCfgState* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4SessionCfgState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4SessionCfgState& from);
  void MergeFrom(const SLBfdv4SessionCfgState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4SessionCfgState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv4Key& key() const;
  ::service_layer::SLBfdv4Key* mutable_key();
  ::service_layer::SLBfdv4Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);

  // .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::service_layer::SLBfdConfigCommon& config() const;
  ::service_layer::SLBfdConfigCommon* mutable_config();
  ::service_layer::SLBfdConfigCommon* release_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);

  // .service_layer.SLBfdCommonState State = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::service_layer::SLBfdCommonState& state() const;
  ::service_layer::SLBfdCommonState* mutable_state();
  ::service_layer::SLBfdCommonState* release_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4SessionCfgState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLBfdv4Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  ::service_layer::SLBfdCommonState* state_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4GetMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4GetMsgRsp) */ {
 public:
  SLBfdv4GetMsgRsp();
  virtual ~SLBfdv4GetMsgRsp();

  SLBfdv4GetMsgRsp(const SLBfdv4GetMsgRsp& from);

  inline SLBfdv4GetMsgRsp& operator=(const SLBfdv4GetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4GetMsgRsp& default_instance();

  static inline const SLBfdv4GetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4GetMsgRsp*>(
               &_SLBfdv4GetMsgRsp_default_instance_);
  }

  void Swap(SLBfdv4GetMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4GetMsgRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4GetMsgRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4GetMsgRsp& from);
  void MergeFrom(const SLBfdv4GetMsgRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4GetMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 3;
  const ::service_layer::SLBfdv4SessionCfgState& entries(int index) const;
  ::service_layer::SLBfdv4SessionCfgState* mutable_entries(int index);
  ::service_layer::SLBfdv4SessionCfgState* add_entries();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // bool Eof = 1;
  void clear_eof();
  static const int kEofFieldNumber = 1;
  bool eof() const;
  void set_eof(bool value);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4GetMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4SessionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4SessionState) */ {
 public:
  SLBfdv4SessionState();
  virtual ~SLBfdv4SessionState();

  SLBfdv4SessionState(const SLBfdv4SessionState& from);

  inline SLBfdv4SessionState& operator=(const SLBfdv4SessionState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4SessionState& default_instance();

  static inline const SLBfdv4SessionState* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4SessionState*>(
               &_SLBfdv4SessionState_default_instance_);
  }

  void Swap(SLBfdv4SessionState* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4SessionState* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4SessionState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4SessionState& from);
  void MergeFrom(const SLBfdv4SessionState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4SessionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv4Key& key() const;
  ::service_layer::SLBfdv4Key* mutable_key();
  ::service_layer::SLBfdv4Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);

  // .service_layer.SLBfdCommonState State = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::service_layer::SLBfdCommonState& state() const;
  ::service_layer::SLBfdCommonState* mutable_state();
  ::service_layer::SLBfdCommonState* release_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4SessionState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::service_layer::SLBfdv4Key* key_;
  ::service_layer::SLBfdCommonState* state_;
  mutable int _cached_size_;
  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLBfdv4Notif : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Notif) */ {
 public:
  SLBfdv4Notif();
  virtual ~SLBfdv4Notif();

  SLBfdv4Notif(const SLBfdv4Notif& from);

  inline SLBfdv4Notif& operator=(const SLBfdv4Notif& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv4Notif& default_instance();

  enum EventCase {
    kErrStatus = 2,
    kSession = 3,
    EVENT_NOT_SET = 0,
  };

  static inline const SLBfdv4Notif* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Notif*>(
               &_SLBfdv4Notif_default_instance_);
  }

  void Swap(SLBfdv4Notif* other);

  // implements Message ----------------------------------------------

  inline SLBfdv4Notif* New() const PROTOBUF_FINAL { return New(NULL); }

  SLBfdv4Notif* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLBfdv4Notif& from);
  void MergeFrom(const SLBfdv4Notif& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLBfdv4Notif* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .service_layer.SLBfdNotifType EventType = 1;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  ::service_layer::SLBfdNotifType eventtype() const;
  void set_eventtype(::service_layer::SLBfdNotifType value);

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // .service_layer.SLBfdv4SessionState Session = 3;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 3;
  const ::service_layer::SLBfdv4SessionState& session() const;
  ::service_layer::SLBfdv4SessionState* mutable_session();
  ::service_layer::SLBfdv4SessionState* release_session();
  void set_allocated_session(::service_layer::SLBfdv4SessionState* session);

  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Notif)
 private:
  void set_has_errstatus();
  void set_has_session();

  inline bool has_Event() const;
  void clear_Event();
  inline void clear_has_Event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int eventtype_;
  union EventUnion {
    EventUnion() {}
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLBfdv4SessionState* session_;
  } Event_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_sl_5fbfd_5fipv4_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdv4Key

// .service_layer.SLBfdType Type = 1;
inline void SLBfdv4Key::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLBfdType SLBfdv4Key::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.Type)
  return static_cast< ::service_layer::SLBfdType >(type_);
}
inline void SLBfdv4Key::set_type(::service_layer::SLBfdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.Type)
}

// string VrfName = 2;
inline void SLBfdv4Key::clear_vrfname() {
  vrfname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SLBfdv4Key::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.VrfName)
  return vrfname_.GetNoArena();
}
inline void SLBfdv4Key::set_vrfname(const ::std::string& value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.VrfName)
}
#if LANG_CXX11
inline void SLBfdv4Key::set_vrfname(::std::string&& value) {
  
  vrfname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLBfdv4Key.VrfName)
}
#endif
inline void SLBfdv4Key::set_vrfname(const char* value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLBfdv4Key.VrfName)
}
inline void SLBfdv4Key::set_vrfname(const char* value, size_t size) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLBfdv4Key.VrfName)
}
inline ::std::string* SLBfdv4Key::mutable_vrfname() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Key.VrfName)
  return vrfname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SLBfdv4Key::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Key.VrfName)
  
  return vrfname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv4Key::set_allocated_vrfname(::std::string* vrfname) {
  if (vrfname != NULL) {
    
  } else {
    
  }
  vrfname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrfname);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Key.VrfName)
}

// uint32 NbrAddr = 3;
inline void SLBfdv4Key::clear_nbraddr() {
  nbraddr_ = 0u;
}
inline ::google::protobuf::uint32 SLBfdv4Key::nbraddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.NbrAddr)
  return nbraddr_;
}
inline void SLBfdv4Key::set_nbraddr(::google::protobuf::uint32 value) {
  
  nbraddr_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.NbrAddr)
}

// .service_layer.SLInterface Interface = 4;
inline bool SLBfdv4Key::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline void SLBfdv4Key::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) delete interface_;
  interface_ = NULL;
}
inline const ::service_layer::SLInterface& SLBfdv4Key::interface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.Interface)
  return interface_ != NULL ? *interface_
                         : *::service_layer::SLInterface::internal_default_instance();
}
inline ::service_layer::SLInterface* SLBfdv4Key::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Key.Interface)
  return interface_;
}
inline ::service_layer::SLInterface* SLBfdv4Key::release_interface() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Key.Interface)
  
  ::service_layer::SLInterface* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline void SLBfdv4Key::set_allocated_interface(::service_layer::SLInterface* interface) {
  delete interface_;
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Key.Interface)
}

// uint32 SourceAddr = 5;
inline void SLBfdv4Key::clear_sourceaddr() {
  sourceaddr_ = 0u;
}
inline ::google::protobuf::uint32 SLBfdv4Key::sourceaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.SourceAddr)
  return sourceaddr_;
}
inline void SLBfdv4Key::set_sourceaddr(::google::protobuf::uint32 value) {
  
  sourceaddr_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.SourceAddr)
}

// -------------------------------------------------------------------

// SLBfdv4SessionCfg

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4SessionCfg::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void SLBfdv4SessionCfg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionCfg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfg.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLBfdv4Key::internal_default_instance();
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv4Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfg.Key)
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfg::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfg.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv4SessionCfg::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfg.Key)
}

// .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv4SessionCfg::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void SLBfdv4SessionCfg::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv4SessionCfg::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfg.Config)
  return config_ != NULL ? *config_
                         : *::service_layer::SLBfdConfigCommon::internal_default_instance();
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfg::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::service_layer::SLBfdConfigCommon;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfg.Config)
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfg::release_config() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfg.Config)
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = NULL;
  return temp;
}
inline void SLBfdv4SessionCfg::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfg.Config)
}

// -------------------------------------------------------------------

// SLBfdv4Msg

// .service_layer.SLObjectOp Oper = 1;
inline void SLBfdv4Msg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLBfdv4Msg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Msg.Oper)
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline void SLBfdv4Msg::set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Msg.Oper)
}

// repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
inline int SLBfdv4Msg::sessions_size() const {
  return sessions_.size();
}
inline void SLBfdv4Msg::clear_sessions() {
  sessions_.Clear();
}
inline const ::service_layer::SLBfdv4SessionCfg& SLBfdv4Msg::sessions(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Msg.Sessions)
  return sessions_.Get(index);
}
inline ::service_layer::SLBfdv4SessionCfg* SLBfdv4Msg::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Msg.Sessions)
  return sessions_.Mutable(index);
}
inline ::service_layer::SLBfdv4SessionCfg* SLBfdv4Msg::add_sessions() {
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv4Msg.Sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >*
SLBfdv4Msg::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv4Msg.Sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >&
SLBfdv4Msg::sessions() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv4Msg.Sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// SLBfdv4Res

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdv4Res::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void SLBfdv4Res::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLBfdv4Res::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Res.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
inline ::service_layer::SLErrorStatus* SLBfdv4Res::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Res.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Res::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Res.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLBfdv4Res::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Res.ErrStatus)
}

// .service_layer.SLBfdv4Key Key = 2;
inline bool SLBfdv4Res::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void SLBfdv4Res::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4Res::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Res.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLBfdv4Key::internal_default_instance();
}
inline ::service_layer::SLBfdv4Key* SLBfdv4Res::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv4Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Res.Key)
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4Res::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Res.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv4Res::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Res.Key)
}

// -------------------------------------------------------------------

// SLBfdv4MsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLBfdv4MsgRsp::has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != NULL;
}
inline void SLBfdv4MsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLBfdv4MsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4MsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
inline ::service_layer::SLErrorStatus* SLBfdv4MsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4MsgRsp.StatusSummary)
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4MsgRsp::release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4MsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
inline void SLBfdv4MsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4MsgRsp.StatusSummary)
}

// repeated .service_layer.SLBfdv4Res Results = 2;
inline int SLBfdv4MsgRsp::results_size() const {
  return results_.size();
}
inline void SLBfdv4MsgRsp::clear_results() {
  results_.Clear();
}
inline const ::service_layer::SLBfdv4Res& SLBfdv4MsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4MsgRsp.Results)
  return results_.Get(index);
}
inline ::service_layer::SLBfdv4Res* SLBfdv4MsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4MsgRsp.Results)
  return results_.Mutable(index);
}
inline ::service_layer::SLBfdv4Res* SLBfdv4MsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv4MsgRsp.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4Res >*
SLBfdv4MsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv4MsgRsp.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4Res >&
SLBfdv4MsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv4MsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLBfdv4GetMsg

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4GetMsg::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void SLBfdv4GetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4GetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLBfdv4Key::internal_default_instance();
}
inline ::service_layer::SLBfdv4Key* SLBfdv4GetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv4Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4GetMsg.Key)
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4GetMsg::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4GetMsg.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv4GetMsg::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4GetMsg.Key)
}

// uint64 SeqNum = 2;
inline void SLBfdv4GetMsg::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SLBfdv4GetMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.SeqNum)
  return seqnum_;
}
inline void SLBfdv4GetMsg::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsg.SeqNum)
}

// uint32 EntriesCount = 3;
inline void SLBfdv4GetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::google::protobuf::uint32 SLBfdv4GetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.EntriesCount)
  return entriescount_;
}
inline void SLBfdv4GetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsg.EntriesCount)
}

// bool GetNext = 4;
inline void SLBfdv4GetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLBfdv4GetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.GetNext)
  return getnext_;
}
inline void SLBfdv4GetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLBfdv4SessionCfgState

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4SessionCfgState::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void SLBfdv4SessionCfgState::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionCfgState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfgState.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLBfdv4Key::internal_default_instance();
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfgState::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv4Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfgState.Key)
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfgState::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfgState.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv4SessionCfgState::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfgState.Key)
}

// .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv4SessionCfgState::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void SLBfdv4SessionCfgState::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv4SessionCfgState::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfgState.Config)
  return config_ != NULL ? *config_
                         : *::service_layer::SLBfdConfigCommon::internal_default_instance();
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfgState::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::service_layer::SLBfdConfigCommon;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfgState.Config)
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfgState::release_config() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfgState.Config)
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = NULL;
  return temp;
}
inline void SLBfdv4SessionCfgState::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfgState.Config)
}

// .service_layer.SLBfdCommonState State = 3;
inline bool SLBfdv4SessionCfgState::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void SLBfdv4SessionCfgState::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
inline const ::service_layer::SLBfdCommonState& SLBfdv4SessionCfgState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfgState.State)
  return state_ != NULL ? *state_
                         : *::service_layer::SLBfdCommonState::internal_default_instance();
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionCfgState::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::service_layer::SLBfdCommonState;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfgState.State)
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionCfgState::release_state() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfgState.State)
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void SLBfdv4SessionCfgState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfgState.State)
}

// -------------------------------------------------------------------

// SLBfdv4GetMsgRsp

// bool Eof = 1;
inline void SLBfdv4GetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLBfdv4GetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsgRsp.Eof)
  return eof_;
}
inline void SLBfdv4GetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv4GetMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void SLBfdv4GetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLBfdv4GetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
inline ::service_layer::SLErrorStatus* SLBfdv4GetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4GetMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLBfdv4GetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
inline int SLBfdv4GetMsgRsp::entries_size() const {
  return entries_.size();
}
inline void SLBfdv4GetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline const ::service_layer::SLBfdv4SessionCfgState& SLBfdv4GetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsgRsp.Entries)
  return entries_.Get(index);
}
inline ::service_layer::SLBfdv4SessionCfgState* SLBfdv4GetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4GetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::service_layer::SLBfdv4SessionCfgState* SLBfdv4GetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv4GetMsgRsp.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >*
SLBfdv4GetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv4GetMsgRsp.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >&
SLBfdv4GetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv4GetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLBfdv4SessionState

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4SessionState::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void SLBfdv4SessionState::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionState.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLBfdv4Key::internal_default_instance();
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionState::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv4Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionState.Key)
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionState::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionState.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv4SessionState::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionState.Key)
}

// .service_layer.SLBfdCommonState State = 2;
inline bool SLBfdv4SessionState::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void SLBfdv4SessionState::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
inline const ::service_layer::SLBfdCommonState& SLBfdv4SessionState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionState.State)
  return state_ != NULL ? *state_
                         : *::service_layer::SLBfdCommonState::internal_default_instance();
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionState::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::service_layer::SLBfdCommonState;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionState.State)
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionState::release_state() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionState.State)
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void SLBfdv4SessionState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionState.State)
}

// -------------------------------------------------------------------

// SLBfdv4Notif

// .service_layer.SLBfdNotifType EventType = 1;
inline void SLBfdv4Notif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLBfdNotifType SLBfdv4Notif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Notif.EventType)
  return static_cast< ::service_layer::SLBfdNotifType >(eventtype_);
}
inline void SLBfdv4Notif::set_eventtype(::service_layer::SLBfdNotifType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Notif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv4Notif::has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline void SLBfdv4Notif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline void SLBfdv4Notif::clear_errstatus() {
  if (has_errstatus()) {
    delete Event_.errstatus_;
    clear_has_Event();
  }
}
inline  const ::service_layer::SLErrorStatus& SLBfdv4Notif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Notif.ErrStatus)
  return has_errstatus()
      ? *Event_.errstatus_
      : ::service_layer::SLErrorStatus::default_instance();
}
inline ::service_layer::SLErrorStatus* SLBfdv4Notif::mutable_errstatus() {
  if (!has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Notif.ErrStatus)
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Notif::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Notif.ErrStatus)
  if (has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SLBfdv4Notif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Notif.ErrStatus)
}

// .service_layer.SLBfdv4SessionState Session = 3;
inline bool SLBfdv4Notif::has_session() const {
  return Event_case() == kSession;
}
inline void SLBfdv4Notif::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void SLBfdv4Notif::clear_session() {
  if (has_session()) {
    delete Event_.session_;
    clear_has_Event();
  }
}
inline  const ::service_layer::SLBfdv4SessionState& SLBfdv4Notif::session() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Notif.Session)
  return has_session()
      ? *Event_.session_
      : ::service_layer::SLBfdv4SessionState::default_instance();
}
inline ::service_layer::SLBfdv4SessionState* SLBfdv4Notif::mutable_session() {
  if (!has_session()) {
    clear_Event();
    set_has_session();
    Event_.session_ = new ::service_layer::SLBfdv4SessionState;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Notif.Session)
  return Event_.session_;
}
inline ::service_layer::SLBfdv4SessionState* SLBfdv4Notif::release_session() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Notif.Session)
  if (has_session()) {
    clear_has_Event();
    ::service_layer::SLBfdv4SessionState* temp = Event_.session_;
    Event_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SLBfdv4Notif::set_allocated_session(::service_layer::SLBfdv4SessionState* session) {
  clear_Event();
  if (session) {
    set_has_session();
    Event_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Notif.Session)
}

inline bool SLBfdv4Notif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLBfdv4Notif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLBfdv4Notif::EventCase SLBfdv4Notif::Event_case() const {
  return SLBfdv4Notif::EventCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sl_5fbfd_5fipv4_2eproto__INCLUDED
