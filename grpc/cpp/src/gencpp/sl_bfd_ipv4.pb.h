// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_ipv4.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fipv4_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fipv4_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_bfd_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fbfd_5fipv4_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fbfd_5fipv4_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbfd_5fipv4_2eproto;
namespace service_layer {
class SLBfdv4GetMsg;
struct SLBfdv4GetMsgDefaultTypeInternal;
extern SLBfdv4GetMsgDefaultTypeInternal _SLBfdv4GetMsg_default_instance_;
class SLBfdv4GetMsgRsp;
struct SLBfdv4GetMsgRspDefaultTypeInternal;
extern SLBfdv4GetMsgRspDefaultTypeInternal _SLBfdv4GetMsgRsp_default_instance_;
class SLBfdv4Key;
struct SLBfdv4KeyDefaultTypeInternal;
extern SLBfdv4KeyDefaultTypeInternal _SLBfdv4Key_default_instance_;
class SLBfdv4Msg;
struct SLBfdv4MsgDefaultTypeInternal;
extern SLBfdv4MsgDefaultTypeInternal _SLBfdv4Msg_default_instance_;
class SLBfdv4MsgRsp;
struct SLBfdv4MsgRspDefaultTypeInternal;
extern SLBfdv4MsgRspDefaultTypeInternal _SLBfdv4MsgRsp_default_instance_;
class SLBfdv4Notif;
struct SLBfdv4NotifDefaultTypeInternal;
extern SLBfdv4NotifDefaultTypeInternal _SLBfdv4Notif_default_instance_;
class SLBfdv4Res;
struct SLBfdv4ResDefaultTypeInternal;
extern SLBfdv4ResDefaultTypeInternal _SLBfdv4Res_default_instance_;
class SLBfdv4SessionCfg;
struct SLBfdv4SessionCfgDefaultTypeInternal;
extern SLBfdv4SessionCfgDefaultTypeInternal _SLBfdv4SessionCfg_default_instance_;
class SLBfdv4SessionCfgState;
struct SLBfdv4SessionCfgStateDefaultTypeInternal;
extern SLBfdv4SessionCfgStateDefaultTypeInternal _SLBfdv4SessionCfgState_default_instance_;
class SLBfdv4SessionState;
struct SLBfdv4SessionStateDefaultTypeInternal;
extern SLBfdv4SessionStateDefaultTypeInternal _SLBfdv4SessionState_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLBfdv4GetMsg* Arena::CreateMaybeMessage<::service_layer::SLBfdv4GetMsg>(Arena*);
template<> ::service_layer::SLBfdv4GetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdv4GetMsgRsp>(Arena*);
template<> ::service_layer::SLBfdv4Key* Arena::CreateMaybeMessage<::service_layer::SLBfdv4Key>(Arena*);
template<> ::service_layer::SLBfdv4Msg* Arena::CreateMaybeMessage<::service_layer::SLBfdv4Msg>(Arena*);
template<> ::service_layer::SLBfdv4MsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdv4MsgRsp>(Arena*);
template<> ::service_layer::SLBfdv4Notif* Arena::CreateMaybeMessage<::service_layer::SLBfdv4Notif>(Arena*);
template<> ::service_layer::SLBfdv4Res* Arena::CreateMaybeMessage<::service_layer::SLBfdv4Res>(Arena*);
template<> ::service_layer::SLBfdv4SessionCfg* Arena::CreateMaybeMessage<::service_layer::SLBfdv4SessionCfg>(Arena*);
template<> ::service_layer::SLBfdv4SessionCfgState* Arena::CreateMaybeMessage<::service_layer::SLBfdv4SessionCfgState>(Arena*);
template<> ::service_layer::SLBfdv4SessionState* Arena::CreateMaybeMessage<::service_layer::SLBfdv4SessionState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

// ===================================================================

class SLBfdv4Key final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Key) */ {
 public:
  inline SLBfdv4Key() : SLBfdv4Key(nullptr) {}
  ~SLBfdv4Key() override;
  explicit constexpr SLBfdv4Key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4Key(const SLBfdv4Key& from);
  SLBfdv4Key(SLBfdv4Key&& from) noexcept
    : SLBfdv4Key() {
    *this = ::std::move(from);
  }

  inline SLBfdv4Key& operator=(const SLBfdv4Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4Key& operator=(SLBfdv4Key&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4Key* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Key*>(
               &_SLBfdv4Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLBfdv4Key& a, SLBfdv4Key& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4Key* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4Key* New() const final {
    return new SLBfdv4Key();
  }

  SLBfdv4Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4Key>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4Key& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4Key& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4Key";
  }
  protected:
  explicit SLBfdv4Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kInterfaceFieldNumber = 4,
    kTypeFieldNumber = 1,
    kNbrAddrFieldNumber = 3,
    kSourceAddrFieldNumber = 5,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrfname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrfname();
  PROTOBUF_MUST_USE_RESULT std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLInterface Interface = 4;
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::service_layer::SLInterface& interface() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLInterface* release_interface();
  ::service_layer::SLInterface* mutable_interface();
  void set_allocated_interface(::service_layer::SLInterface* interface);
  private:
  const ::service_layer::SLInterface& _internal_interface() const;
  ::service_layer::SLInterface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::service_layer::SLInterface* interface);
  ::service_layer::SLInterface* unsafe_arena_release_interface();

  // .service_layer.SLBfdType Type = 1;
  void clear_type();
  ::service_layer::SLBfdType type() const;
  void set_type(::service_layer::SLBfdType value);
  private:
  ::service_layer::SLBfdType _internal_type() const;
  void _internal_set_type(::service_layer::SLBfdType value);
  public:

  // uint32 NbrAddr = 3;
  void clear_nbraddr();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbraddr() const;
  void set_nbraddr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbraddr() const;
  void _internal_set_nbraddr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SourceAddr = 5;
  void clear_sourceaddr();
  ::PROTOBUF_NAMESPACE_ID::uint32 sourceaddr() const;
  void set_sourceaddr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sourceaddr() const;
  void _internal_set_sourceaddr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLInterface* interface_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbraddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sourceaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4SessionCfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4SessionCfg) */ {
 public:
  inline SLBfdv4SessionCfg() : SLBfdv4SessionCfg(nullptr) {}
  ~SLBfdv4SessionCfg() override;
  explicit constexpr SLBfdv4SessionCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4SessionCfg(const SLBfdv4SessionCfg& from);
  SLBfdv4SessionCfg(SLBfdv4SessionCfg&& from) noexcept
    : SLBfdv4SessionCfg() {
    *this = ::std::move(from);
  }

  inline SLBfdv4SessionCfg& operator=(const SLBfdv4SessionCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4SessionCfg& operator=(SLBfdv4SessionCfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4SessionCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4SessionCfg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4SessionCfg*>(
               &_SLBfdv4SessionCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLBfdv4SessionCfg& a, SLBfdv4SessionCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4SessionCfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4SessionCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4SessionCfg* New() const final {
    return new SLBfdv4SessionCfg();
  }

  SLBfdv4SessionCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4SessionCfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4SessionCfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4SessionCfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4SessionCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4SessionCfg";
  }
  protected:
  explicit SLBfdv4SessionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv4Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv4Key* release_key();
  ::service_layer::SLBfdv4Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);
  private:
  const ::service_layer::SLBfdv4Key& _internal_key() const;
  ::service_layer::SLBfdv4Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv4Key* key);
  ::service_layer::SLBfdv4Key* unsafe_arena_release_key();

  // .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::service_layer::SLBfdConfigCommon& config() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdConfigCommon* release_config();
  ::service_layer::SLBfdConfigCommon* mutable_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);
  private:
  const ::service_layer::SLBfdConfigCommon& _internal_config() const;
  ::service_layer::SLBfdConfigCommon* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::service_layer::SLBfdConfigCommon* config);
  ::service_layer::SLBfdConfigCommon* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4SessionCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv4Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Msg) */ {
 public:
  inline SLBfdv4Msg() : SLBfdv4Msg(nullptr) {}
  ~SLBfdv4Msg() override;
  explicit constexpr SLBfdv4Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4Msg(const SLBfdv4Msg& from);
  SLBfdv4Msg(SLBfdv4Msg&& from) noexcept
    : SLBfdv4Msg() {
    *this = ::std::move(from);
  }

  inline SLBfdv4Msg& operator=(const SLBfdv4Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4Msg& operator=(SLBfdv4Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4Msg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Msg*>(
               &_SLBfdv4Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLBfdv4Msg& a, SLBfdv4Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4Msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4Msg* New() const final {
    return new SLBfdv4Msg();
  }

  SLBfdv4Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4Msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4Msg";
  }
  protected:
  explicit SLBfdv4Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::service_layer::SLBfdv4SessionCfg* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >*
      mutable_sessions();
  private:
  const ::service_layer::SLBfdv4SessionCfg& _internal_sessions(int index) const;
  ::service_layer::SLBfdv4SessionCfg* _internal_add_sessions();
  public:
  const ::service_layer::SLBfdv4SessionCfg& sessions(int index) const;
  ::service_layer::SLBfdv4SessionCfg* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >&
      sessions() const;

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg > sessions_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4Res final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Res) */ {
 public:
  inline SLBfdv4Res() : SLBfdv4Res(nullptr) {}
  ~SLBfdv4Res() override;
  explicit constexpr SLBfdv4Res(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4Res(const SLBfdv4Res& from);
  SLBfdv4Res(SLBfdv4Res&& from) noexcept
    : SLBfdv4Res() {
    *this = ::std::move(from);
  }

  inline SLBfdv4Res& operator=(const SLBfdv4Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4Res& operator=(SLBfdv4Res&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4Res& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4Res* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Res*>(
               &_SLBfdv4Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLBfdv4Res& a, SLBfdv4Res& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4Res* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4Res* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4Res* New() const final {
    return new SLBfdv4Res();
  }

  SLBfdv4Res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4Res>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4Res& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4Res& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4Res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4Res";
  }
  protected:
  explicit SLBfdv4Res(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLBfdv4Key Key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv4Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv4Key* release_key();
  ::service_layer::SLBfdv4Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);
  private:
  const ::service_layer::SLBfdv4Key& _internal_key() const;
  ::service_layer::SLBfdv4Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv4Key* key);
  ::service_layer::SLBfdv4Key* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Res)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLBfdv4Key* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4MsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4MsgRsp) */ {
 public:
  inline SLBfdv4MsgRsp() : SLBfdv4MsgRsp(nullptr) {}
  ~SLBfdv4MsgRsp() override;
  explicit constexpr SLBfdv4MsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4MsgRsp(const SLBfdv4MsgRsp& from);
  SLBfdv4MsgRsp(SLBfdv4MsgRsp&& from) noexcept
    : SLBfdv4MsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdv4MsgRsp& operator=(const SLBfdv4MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4MsgRsp& operator=(SLBfdv4MsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4MsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4MsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4MsgRsp*>(
               &_SLBfdv4MsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLBfdv4MsgRsp& a, SLBfdv4MsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4MsgRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4MsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4MsgRsp* New() const final {
    return new SLBfdv4MsgRsp();
  }

  SLBfdv4MsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4MsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4MsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4MsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4MsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4MsgRsp";
  }
  protected:
  explicit SLBfdv4MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusSummaryFieldNumber = 1,
  };
  // repeated .service_layer.SLBfdv4Res Results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLBfdv4Res* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4Res >*
      mutable_results();
  private:
  const ::service_layer::SLBfdv4Res& _internal_results(int index) const;
  ::service_layer::SLBfdv4Res* _internal_add_results();
  public:
  const ::service_layer::SLBfdv4Res& results(int index) const;
  ::service_layer::SLBfdv4Res* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4Res >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4MsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4Res > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4GetMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4GetMsg) */ {
 public:
  inline SLBfdv4GetMsg() : SLBfdv4GetMsg(nullptr) {}
  ~SLBfdv4GetMsg() override;
  explicit constexpr SLBfdv4GetMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4GetMsg(const SLBfdv4GetMsg& from);
  SLBfdv4GetMsg(SLBfdv4GetMsg&& from) noexcept
    : SLBfdv4GetMsg() {
    *this = ::std::move(from);
  }

  inline SLBfdv4GetMsg& operator=(const SLBfdv4GetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4GetMsg& operator=(SLBfdv4GetMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4GetMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4GetMsg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4GetMsg*>(
               &_SLBfdv4GetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLBfdv4GetMsg& a, SLBfdv4GetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4GetMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4GetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4GetMsg* New() const final {
    return new SLBfdv4GetMsg();
  }

  SLBfdv4GetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4GetMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4GetMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4GetMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4GetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4GetMsg";
  }
  protected:
  explicit SLBfdv4GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kSeqNumFieldNumber = 2,
    kEntriesCountFieldNumber = 3,
    kGetNextFieldNumber = 4,
  };
  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv4Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv4Key* release_key();
  ::service_layer::SLBfdv4Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);
  private:
  const ::service_layer::SLBfdv4Key& _internal_key() const;
  ::service_layer::SLBfdv4Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv4Key* key);
  ::service_layer::SLBfdv4Key* unsafe_arena_release_key();

  // uint64 SeqNum = 2;
  void clear_seqnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 seqnum() const;
  void set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seqnum() const;
  void _internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 EntriesCount = 3;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 4;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4GetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv4Key* key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seqnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4SessionCfgState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4SessionCfgState) */ {
 public:
  inline SLBfdv4SessionCfgState() : SLBfdv4SessionCfgState(nullptr) {}
  ~SLBfdv4SessionCfgState() override;
  explicit constexpr SLBfdv4SessionCfgState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4SessionCfgState(const SLBfdv4SessionCfgState& from);
  SLBfdv4SessionCfgState(SLBfdv4SessionCfgState&& from) noexcept
    : SLBfdv4SessionCfgState() {
    *this = ::std::move(from);
  }

  inline SLBfdv4SessionCfgState& operator=(const SLBfdv4SessionCfgState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4SessionCfgState& operator=(SLBfdv4SessionCfgState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4SessionCfgState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4SessionCfgState* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4SessionCfgState*>(
               &_SLBfdv4SessionCfgState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLBfdv4SessionCfgState& a, SLBfdv4SessionCfgState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4SessionCfgState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4SessionCfgState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4SessionCfgState* New() const final {
    return new SLBfdv4SessionCfgState();
  }

  SLBfdv4SessionCfgState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4SessionCfgState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4SessionCfgState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4SessionCfgState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4SessionCfgState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4SessionCfgState";
  }
  protected:
  explicit SLBfdv4SessionCfgState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv4Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv4Key* release_key();
  ::service_layer::SLBfdv4Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);
  private:
  const ::service_layer::SLBfdv4Key& _internal_key() const;
  ::service_layer::SLBfdv4Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv4Key* key);
  ::service_layer::SLBfdv4Key* unsafe_arena_release_key();

  // .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::service_layer::SLBfdConfigCommon& config() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdConfigCommon* release_config();
  ::service_layer::SLBfdConfigCommon* mutable_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);
  private:
  const ::service_layer::SLBfdConfigCommon& _internal_config() const;
  ::service_layer::SLBfdConfigCommon* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::service_layer::SLBfdConfigCommon* config);
  ::service_layer::SLBfdConfigCommon* unsafe_arena_release_config();

  // .service_layer.SLBfdCommonState State = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::service_layer::SLBfdCommonState& state() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdCommonState* release_state();
  ::service_layer::SLBfdCommonState* mutable_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);
  private:
  const ::service_layer::SLBfdCommonState& _internal_state() const;
  ::service_layer::SLBfdCommonState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::service_layer::SLBfdCommonState* state);
  ::service_layer::SLBfdCommonState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4SessionCfgState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv4Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  ::service_layer::SLBfdCommonState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4GetMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4GetMsgRsp) */ {
 public:
  inline SLBfdv4GetMsgRsp() : SLBfdv4GetMsgRsp(nullptr) {}
  ~SLBfdv4GetMsgRsp() override;
  explicit constexpr SLBfdv4GetMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4GetMsgRsp(const SLBfdv4GetMsgRsp& from);
  SLBfdv4GetMsgRsp(SLBfdv4GetMsgRsp&& from) noexcept
    : SLBfdv4GetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdv4GetMsgRsp& operator=(const SLBfdv4GetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4GetMsgRsp& operator=(SLBfdv4GetMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4GetMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4GetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4GetMsgRsp*>(
               &_SLBfdv4GetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLBfdv4GetMsgRsp& a, SLBfdv4GetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4GetMsgRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4GetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4GetMsgRsp* New() const final {
    return new SLBfdv4GetMsgRsp();
  }

  SLBfdv4GetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4GetMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4GetMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4GetMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4GetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4GetMsgRsp";
  }
  protected:
  explicit SLBfdv4GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrStatusFieldNumber = 2,
    kEofFieldNumber = 1,
  };
  // repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLBfdv4SessionCfgState* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >*
      mutable_entries();
  private:
  const ::service_layer::SLBfdv4SessionCfgState& _internal_entries(int index) const;
  ::service_layer::SLBfdv4SessionCfgState* _internal_add_entries();
  public:
  const ::service_layer::SLBfdv4SessionCfgState& entries(int index) const;
  ::service_layer::SLBfdv4SessionCfgState* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // bool Eof = 1;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4GetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4SessionState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4SessionState) */ {
 public:
  inline SLBfdv4SessionState() : SLBfdv4SessionState(nullptr) {}
  ~SLBfdv4SessionState() override;
  explicit constexpr SLBfdv4SessionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4SessionState(const SLBfdv4SessionState& from);
  SLBfdv4SessionState(SLBfdv4SessionState&& from) noexcept
    : SLBfdv4SessionState() {
    *this = ::std::move(from);
  }

  inline SLBfdv4SessionState& operator=(const SLBfdv4SessionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4SessionState& operator=(SLBfdv4SessionState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4SessionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv4SessionState* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4SessionState*>(
               &_SLBfdv4SessionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLBfdv4SessionState& a, SLBfdv4SessionState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4SessionState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4SessionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4SessionState* New() const final {
    return new SLBfdv4SessionState();
  }

  SLBfdv4SessionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4SessionState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4SessionState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4SessionState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4SessionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4SessionState";
  }
  protected:
  explicit SLBfdv4SessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .service_layer.SLBfdv4Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv4Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv4Key* release_key();
  ::service_layer::SLBfdv4Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv4Key* key);
  private:
  const ::service_layer::SLBfdv4Key& _internal_key() const;
  ::service_layer::SLBfdv4Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv4Key* key);
  ::service_layer::SLBfdv4Key* unsafe_arena_release_key();

  // .service_layer.SLBfdCommonState State = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::service_layer::SLBfdCommonState& state() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdCommonState* release_state();
  ::service_layer::SLBfdCommonState* mutable_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);
  private:
  const ::service_layer::SLBfdCommonState& _internal_state() const;
  ::service_layer::SLBfdCommonState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::service_layer::SLBfdCommonState* state);
  ::service_layer::SLBfdCommonState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4SessionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv4Key* key_;
  ::service_layer::SLBfdCommonState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv4Notif final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv4Notif) */ {
 public:
  inline SLBfdv4Notif() : SLBfdv4Notif(nullptr) {}
  ~SLBfdv4Notif() override;
  explicit constexpr SLBfdv4Notif(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv4Notif(const SLBfdv4Notif& from);
  SLBfdv4Notif(SLBfdv4Notif&& from) noexcept
    : SLBfdv4Notif() {
    *this = ::std::move(from);
  }

  inline SLBfdv4Notif& operator=(const SLBfdv4Notif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv4Notif& operator=(SLBfdv4Notif&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv4Notif& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kErrStatus = 2,
    kSession = 3,
    EVENT_NOT_SET = 0,
  };

  static inline const SLBfdv4Notif* internal_default_instance() {
    return reinterpret_cast<const SLBfdv4Notif*>(
               &_SLBfdv4Notif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLBfdv4Notif& a, SLBfdv4Notif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv4Notif* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv4Notif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv4Notif* New() const final {
    return new SLBfdv4Notif();
  }

  SLBfdv4Notif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv4Notif>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv4Notif& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv4Notif& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv4Notif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv4Notif";
  }
  protected:
  explicit SLBfdv4Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kErrStatusFieldNumber = 2,
    kSessionFieldNumber = 3,
  };
  // .service_layer.SLBfdNotifType EventType = 1;
  void clear_eventtype();
  ::service_layer::SLBfdNotifType eventtype() const;
  void set_eventtype(::service_layer::SLBfdNotifType value);
  private:
  ::service_layer::SLBfdNotifType _internal_eventtype() const;
  void _internal_set_eventtype(::service_layer::SLBfdNotifType value);
  public:

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLBfdv4SessionState Session = 3;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::service_layer::SLBfdv4SessionState& session() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv4SessionState* release_session();
  ::service_layer::SLBfdv4SessionState* mutable_session();
  void set_allocated_session(::service_layer::SLBfdv4SessionState* session);
  private:
  const ::service_layer::SLBfdv4SessionState& _internal_session() const;
  ::service_layer::SLBfdv4SessionState* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::service_layer::SLBfdv4SessionState* session);
  ::service_layer::SLBfdv4SessionState* unsafe_arena_release_session();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv4Notif)
 private:
  class _Internal;
  void set_has_errstatus();
  void set_has_session();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int eventtype_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLBfdv4SessionState* session_;
  } Event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbfd_5fipv4_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLBfdv4Key

// .service_layer.SLBfdType Type = 1;
inline void SLBfdv4Key::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLBfdType SLBfdv4Key::_internal_type() const {
  return static_cast< ::service_layer::SLBfdType >(type_);
}
inline ::service_layer::SLBfdType SLBfdv4Key::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.Type)
  return _internal_type();
}
inline void SLBfdv4Key::_internal_set_type(::service_layer::SLBfdType value) {
  
  type_ = value;
}
inline void SLBfdv4Key::set_type(::service_layer::SLBfdType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.Type)
}

// string VrfName = 2;
inline void SLBfdv4Key::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLBfdv4Key::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.VrfName)
  return _internal_vrfname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBfdv4Key::set_vrfname(ArgT0&& arg0, ArgT... args) {
 
 vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.VrfName)
}
inline std::string* SLBfdv4Key::mutable_vrfname() {
  std::string* _s = _internal_mutable_vrfname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Key.VrfName)
  return _s;
}
inline const std::string& SLBfdv4Key::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLBfdv4Key::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBfdv4Key::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBfdv4Key::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Key.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBfdv4Key::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Key.VrfName)
}

// uint32 NbrAddr = 3;
inline void SLBfdv4Key::clear_nbraddr() {
  nbraddr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv4Key::_internal_nbraddr() const {
  return nbraddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv4Key::nbraddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.NbrAddr)
  return _internal_nbraddr();
}
inline void SLBfdv4Key::_internal_set_nbraddr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbraddr_ = value;
}
inline void SLBfdv4Key::set_nbraddr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbraddr(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.NbrAddr)
}

// .service_layer.SLInterface Interface = 4;
inline bool SLBfdv4Key::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool SLBfdv4Key::has_interface() const {
  return _internal_has_interface();
}
inline const ::service_layer::SLInterface& SLBfdv4Key::_internal_interface() const {
  const ::service_layer::SLInterface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLInterface&>(
      ::service_layer::_SLInterface_default_instance_);
}
inline const ::service_layer::SLInterface& SLBfdv4Key::interface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.Interface)
  return _internal_interface();
}
inline void SLBfdv4Key::unsafe_arena_set_allocated_interface(
    ::service_layer::SLInterface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4Key.Interface)
}
inline ::service_layer::SLInterface* SLBfdv4Key::release_interface() {
  
  ::service_layer::SLInterface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLInterface* SLBfdv4Key::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Key.Interface)
  
  ::service_layer::SLInterface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::service_layer::SLInterface* SLBfdv4Key::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLInterface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::service_layer::SLInterface* SLBfdv4Key::mutable_interface() {
  ::service_layer::SLInterface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Key.Interface)
  return _msg;
}
inline void SLBfdv4Key::set_allocated_interface(::service_layer::SLInterface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface));
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Key.Interface)
}

// uint32 SourceAddr = 5;
inline void SLBfdv4Key::clear_sourceaddr() {
  sourceaddr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv4Key::_internal_sourceaddr() const {
  return sourceaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv4Key::sourceaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Key.SourceAddr)
  return _internal_sourceaddr();
}
inline void SLBfdv4Key::_internal_set_sourceaddr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sourceaddr_ = value;
}
inline void SLBfdv4Key::set_sourceaddr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sourceaddr(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Key.SourceAddr)
}

// -------------------------------------------------------------------

// SLBfdv4SessionCfg

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4SessionCfg::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv4SessionCfg::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv4SessionCfg::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionCfg::_internal_key() const {
  const ::service_layer::SLBfdv4Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv4Key&>(
      ::service_layer::_SLBfdv4Key_default_instance_);
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionCfg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfg.Key)
  return _internal_key();
}
inline void SLBfdv4SessionCfg::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv4Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionCfg.Key)
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfg::release_key() {
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfg::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfg.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfg::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv4Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfg::mutable_key() {
  ::service_layer::SLBfdv4Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfg.Key)
  return _msg;
}
inline void SLBfdv4SessionCfg::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv4Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfg.Key)
}

// .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv4SessionCfg::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SLBfdv4SessionCfg::has_config() const {
  return _internal_has_config();
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv4SessionCfg::_internal_config() const {
  const ::service_layer::SLBfdConfigCommon* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdConfigCommon&>(
      ::service_layer::_SLBfdConfigCommon_default_instance_);
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv4SessionCfg::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfg.Config)
  return _internal_config();
}
inline void SLBfdv4SessionCfg::unsafe_arena_set_allocated_config(
    ::service_layer::SLBfdConfigCommon* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionCfg.Config)
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfg::release_config() {
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfg::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfg.Config)
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfg::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdConfigCommon>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfg::mutable_config() {
  ::service_layer::SLBfdConfigCommon* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfg.Config)
  return _msg;
}
inline void SLBfdv4SessionCfg::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfg.Config)
}

// -------------------------------------------------------------------

// SLBfdv4Msg

// .service_layer.SLObjectOp Oper = 1;
inline void SLBfdv4Msg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLBfdv4Msg::_internal_oper() const {
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline ::service_layer::SLObjectOp SLBfdv4Msg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Msg.Oper)
  return _internal_oper();
}
inline void SLBfdv4Msg::_internal_set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
}
inline void SLBfdv4Msg::set_oper(::service_layer::SLObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Msg.Oper)
}

// repeated .service_layer.SLBfdv4SessionCfg Sessions = 2;
inline int SLBfdv4Msg::_internal_sessions_size() const {
  return sessions_.size();
}
inline int SLBfdv4Msg::sessions_size() const {
  return _internal_sessions_size();
}
inline void SLBfdv4Msg::clear_sessions() {
  sessions_.Clear();
}
inline ::service_layer::SLBfdv4SessionCfg* SLBfdv4Msg::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Msg.Sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >*
SLBfdv4Msg::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv4Msg.Sessions)
  return &sessions_;
}
inline const ::service_layer::SLBfdv4SessionCfg& SLBfdv4Msg::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::service_layer::SLBfdv4SessionCfg& SLBfdv4Msg::sessions(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Msg.Sessions)
  return _internal_sessions(index);
}
inline ::service_layer::SLBfdv4SessionCfg* SLBfdv4Msg::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::service_layer::SLBfdv4SessionCfg* SLBfdv4Msg::add_sessions() {
  ::service_layer::SLBfdv4SessionCfg* _add = _internal_add_sessions();
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv4Msg.Sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfg >&
SLBfdv4Msg::sessions() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv4Msg.Sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// SLBfdv4Res

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdv4Res::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdv4Res::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdv4Res::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv4Res::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Res.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdv4Res::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4Res.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdv4Res::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Res::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Res.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Res::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Res::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Res.ErrStatus)
  return _msg;
}
inline void SLBfdv4Res::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Res.ErrStatus)
}

// .service_layer.SLBfdv4Key Key = 2;
inline bool SLBfdv4Res::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv4Res::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv4Res::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4Res::_internal_key() const {
  const ::service_layer::SLBfdv4Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv4Key&>(
      ::service_layer::_SLBfdv4Key_default_instance_);
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4Res::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Res.Key)
  return _internal_key();
}
inline void SLBfdv4Res::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv4Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4Res.Key)
}
inline ::service_layer::SLBfdv4Key* SLBfdv4Res::release_key() {
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4Res::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Res.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4Res::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv4Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4Res::mutable_key() {
  ::service_layer::SLBfdv4Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Res.Key)
  return _msg;
}
inline void SLBfdv4Res::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv4Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4Res.Key)
}

// -------------------------------------------------------------------

// SLBfdv4MsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLBfdv4MsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLBfdv4MsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLBfdv4MsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv4MsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4MsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLBfdv4MsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4MsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLBfdv4MsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv4MsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4MsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv4MsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4MsgRsp::mutable_statussummary() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_statussummary();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4MsgRsp.StatusSummary)
  return _msg;
}
inline void SLBfdv4MsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary));
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4MsgRsp.StatusSummary)
}

// repeated .service_layer.SLBfdv4Res Results = 2;
inline int SLBfdv4MsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLBfdv4MsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLBfdv4MsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLBfdv4Res* SLBfdv4MsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4MsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4Res >*
SLBfdv4MsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv4MsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLBfdv4Res& SLBfdv4MsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLBfdv4Res& SLBfdv4MsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4MsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLBfdv4Res* SLBfdv4MsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLBfdv4Res* SLBfdv4MsgRsp::add_results() {
  ::service_layer::SLBfdv4Res* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv4MsgRsp.Results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4Res >&
SLBfdv4MsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv4MsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLBfdv4GetMsg

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4GetMsg::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv4GetMsg::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv4GetMsg::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4GetMsg::_internal_key() const {
  const ::service_layer::SLBfdv4Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv4Key&>(
      ::service_layer::_SLBfdv4Key_default_instance_);
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4GetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.Key)
  return _internal_key();
}
inline void SLBfdv4GetMsg::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv4Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4GetMsg.Key)
}
inline ::service_layer::SLBfdv4Key* SLBfdv4GetMsg::release_key() {
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4GetMsg::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4GetMsg.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4GetMsg::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv4Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4GetMsg::mutable_key() {
  ::service_layer::SLBfdv4Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4GetMsg.Key)
  return _msg;
}
inline void SLBfdv4GetMsg::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv4Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4GetMsg.Key)
}

// uint64 SeqNum = 2;
inline void SLBfdv4GetMsg::clear_seqnum() {
  seqnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLBfdv4GetMsg::_internal_seqnum() const {
  return seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLBfdv4GetMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.SeqNum)
  return _internal_seqnum();
}
inline void SLBfdv4GetMsg::_internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seqnum_ = value;
}
inline void SLBfdv4GetMsg::set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsg.SeqNum)
}

// uint32 EntriesCount = 3;
inline void SLBfdv4GetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv4GetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv4GetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLBfdv4GetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLBfdv4GetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsg.EntriesCount)
}

// bool GetNext = 4;
inline void SLBfdv4GetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLBfdv4GetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLBfdv4GetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsg.GetNext)
  return _internal_getnext();
}
inline void SLBfdv4GetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLBfdv4GetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLBfdv4SessionCfgState

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4SessionCfgState::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv4SessionCfgState::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv4SessionCfgState::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionCfgState::_internal_key() const {
  const ::service_layer::SLBfdv4Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv4Key&>(
      ::service_layer::_SLBfdv4Key_default_instance_);
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionCfgState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfgState.Key)
  return _internal_key();
}
inline void SLBfdv4SessionCfgState::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv4Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionCfgState.Key)
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfgState::release_key() {
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfgState::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfgState.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfgState::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv4Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionCfgState::mutable_key() {
  ::service_layer::SLBfdv4Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfgState.Key)
  return _msg;
}
inline void SLBfdv4SessionCfgState::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv4Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfgState.Key)
}

// .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv4SessionCfgState::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SLBfdv4SessionCfgState::has_config() const {
  return _internal_has_config();
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv4SessionCfgState::_internal_config() const {
  const ::service_layer::SLBfdConfigCommon* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdConfigCommon&>(
      ::service_layer::_SLBfdConfigCommon_default_instance_);
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv4SessionCfgState::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfgState.Config)
  return _internal_config();
}
inline void SLBfdv4SessionCfgState::unsafe_arena_set_allocated_config(
    ::service_layer::SLBfdConfigCommon* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionCfgState.Config)
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfgState::release_config() {
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfgState::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfgState.Config)
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfgState::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdConfigCommon>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv4SessionCfgState::mutable_config() {
  ::service_layer::SLBfdConfigCommon* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfgState.Config)
  return _msg;
}
inline void SLBfdv4SessionCfgState::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfgState.Config)
}

// .service_layer.SLBfdCommonState State = 3;
inline bool SLBfdv4SessionCfgState::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool SLBfdv4SessionCfgState::has_state() const {
  return _internal_has_state();
}
inline const ::service_layer::SLBfdCommonState& SLBfdv4SessionCfgState::_internal_state() const {
  const ::service_layer::SLBfdCommonState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdCommonState&>(
      ::service_layer::_SLBfdCommonState_default_instance_);
}
inline const ::service_layer::SLBfdCommonState& SLBfdv4SessionCfgState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionCfgState.State)
  return _internal_state();
}
inline void SLBfdv4SessionCfgState::unsafe_arena_set_allocated_state(
    ::service_layer::SLBfdCommonState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionCfgState.State)
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionCfgState::release_state() {
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionCfgState::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionCfgState.State)
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionCfgState::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdCommonState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionCfgState::mutable_state() {
  ::service_layer::SLBfdCommonState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionCfgState.State)
  return _msg;
}
inline void SLBfdv4SessionCfgState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionCfgState.State)
}

// -------------------------------------------------------------------

// SLBfdv4GetMsgRsp

// bool Eof = 1;
inline void SLBfdv4GetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLBfdv4GetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLBfdv4GetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLBfdv4GetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLBfdv4GetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4GetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv4GetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdv4GetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdv4GetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv4GetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdv4GetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdv4GetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv4GetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv4GetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4GetMsgRsp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
  return _msg;
}
inline void SLBfdv4GetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4GetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLBfdv4SessionCfgState Entries = 3;
inline int SLBfdv4GetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLBfdv4GetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLBfdv4GetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLBfdv4SessionCfgState* SLBfdv4GetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4GetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >*
SLBfdv4GetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv4GetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLBfdv4SessionCfgState& SLBfdv4GetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLBfdv4SessionCfgState& SLBfdv4GetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4GetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLBfdv4SessionCfgState* SLBfdv4GetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLBfdv4SessionCfgState* SLBfdv4GetMsgRsp::add_entries() {
  ::service_layer::SLBfdv4SessionCfgState* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv4GetMsgRsp.Entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv4SessionCfgState >&
SLBfdv4GetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv4GetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLBfdv4SessionState

// .service_layer.SLBfdv4Key Key = 1;
inline bool SLBfdv4SessionState::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv4SessionState::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv4SessionState::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionState::_internal_key() const {
  const ::service_layer::SLBfdv4Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv4Key&>(
      ::service_layer::_SLBfdv4Key_default_instance_);
}
inline const ::service_layer::SLBfdv4Key& SLBfdv4SessionState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionState.Key)
  return _internal_key();
}
inline void SLBfdv4SessionState::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv4Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionState.Key)
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionState::release_key() {
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionState::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionState.Key)
  
  ::service_layer::SLBfdv4Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionState::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv4Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv4Key* SLBfdv4SessionState::mutable_key() {
  ::service_layer::SLBfdv4Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionState.Key)
  return _msg;
}
inline void SLBfdv4SessionState::set_allocated_key(::service_layer::SLBfdv4Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv4Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionState.Key)
}

// .service_layer.SLBfdCommonState State = 2;
inline bool SLBfdv4SessionState::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool SLBfdv4SessionState::has_state() const {
  return _internal_has_state();
}
inline const ::service_layer::SLBfdCommonState& SLBfdv4SessionState::_internal_state() const {
  const ::service_layer::SLBfdCommonState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdCommonState&>(
      ::service_layer::_SLBfdCommonState_default_instance_);
}
inline const ::service_layer::SLBfdCommonState& SLBfdv4SessionState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4SessionState.State)
  return _internal_state();
}
inline void SLBfdv4SessionState::unsafe_arena_set_allocated_state(
    ::service_layer::SLBfdCommonState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4SessionState.State)
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionState::release_state() {
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionState::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4SessionState.State)
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionState::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdCommonState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv4SessionState::mutable_state() {
  ::service_layer::SLBfdCommonState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4SessionState.State)
  return _msg;
}
inline void SLBfdv4SessionState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv4SessionState.State)
}

// -------------------------------------------------------------------

// SLBfdv4Notif

// .service_layer.SLBfdNotifType EventType = 1;
inline void SLBfdv4Notif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLBfdNotifType SLBfdv4Notif::_internal_eventtype() const {
  return static_cast< ::service_layer::SLBfdNotifType >(eventtype_);
}
inline ::service_layer::SLBfdNotifType SLBfdv4Notif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Notif.EventType)
  return _internal_eventtype();
}
inline void SLBfdv4Notif::_internal_set_eventtype(::service_layer::SLBfdNotifType value) {
  
  eventtype_ = value;
}
inline void SLBfdv4Notif::set_eventtype(::service_layer::SLBfdNotifType value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv4Notif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv4Notif::_internal_has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline bool SLBfdv4Notif::has_errstatus() const {
  return _internal_has_errstatus();
}
inline void SLBfdv4Notif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Notif::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
      ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLErrorStatus& SLBfdv4Notif::_internal_errstatus() const {
  return _internal_has_errstatus()
      ? *Event_.errstatus_
      : reinterpret_cast< ::service_layer::SLErrorStatus&>(::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv4Notif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Notif.ErrStatus)
  return _internal_errstatus();
}
inline ::service_layer::SLErrorStatus* SLBfdv4Notif::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBfdv4Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBfdv4Notif::unsafe_arena_set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4Notif.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdv4Notif::_internal_mutable_errstatus() {
  if (!_internal_has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = CreateMaybeMessage< ::service_layer::SLErrorStatus >(GetArenaForAllocation());
  }
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv4Notif::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Notif.ErrStatus)
  return _msg;
}

// .service_layer.SLBfdv4SessionState Session = 3;
inline bool SLBfdv4Notif::_internal_has_session() const {
  return Event_case() == kSession;
}
inline bool SLBfdv4Notif::has_session() const {
  return _internal_has_session();
}
inline void SLBfdv4Notif::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void SLBfdv4Notif::clear_session() {
  if (_internal_has_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.session_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLBfdv4SessionState* SLBfdv4Notif::release_session() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv4Notif.Session)
  if (_internal_has_session()) {
    clear_has_Event();
      ::service_layer::SLBfdv4SessionState* temp = Event_.session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBfdv4SessionState& SLBfdv4Notif::_internal_session() const {
  return _internal_has_session()
      ? *Event_.session_
      : reinterpret_cast< ::service_layer::SLBfdv4SessionState&>(::service_layer::_SLBfdv4SessionState_default_instance_);
}
inline const ::service_layer::SLBfdv4SessionState& SLBfdv4Notif::session() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv4Notif.Session)
  return _internal_session();
}
inline ::service_layer::SLBfdv4SessionState* SLBfdv4Notif::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBfdv4Notif.Session)
  if (_internal_has_session()) {
    clear_has_Event();
    ::service_layer::SLBfdv4SessionState* temp = Event_.session_;
    Event_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBfdv4Notif::unsafe_arena_set_allocated_session(::service_layer::SLBfdv4SessionState* session) {
  clear_Event();
  if (session) {
    set_has_session();
    Event_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv4Notif.Session)
}
inline ::service_layer::SLBfdv4SessionState* SLBfdv4Notif::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_Event();
    set_has_session();
    Event_.session_ = CreateMaybeMessage< ::service_layer::SLBfdv4SessionState >(GetArenaForAllocation());
  }
  return Event_.session_;
}
inline ::service_layer::SLBfdv4SessionState* SLBfdv4Notif::mutable_session() {
  ::service_layer::SLBfdv4SessionState* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv4Notif.Session)
  return _msg;
}

inline bool SLBfdv4Notif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLBfdv4Notif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLBfdv4Notif::EventCase SLBfdv4Notif::Event_case() const {
  return SLBfdv4Notif::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fipv4_2eproto
