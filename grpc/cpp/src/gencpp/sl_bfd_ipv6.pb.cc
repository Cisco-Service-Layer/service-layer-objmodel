// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_ipv6.proto

#include "sl_bfd_ipv6.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLBfdv6Key::SLBfdv6Key(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nbraddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sourceaddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interface_(nullptr)
  , type_(0)
{}
struct SLBfdv6KeyDefaultTypeInternal {
  constexpr SLBfdv6KeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6KeyDefaultTypeInternal() {}
  union {
    SLBfdv6Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6KeyDefaultTypeInternal _SLBfdv6Key_default_instance_;
constexpr SLBfdv6SessionCfg::SLBfdv6SessionCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , config_(nullptr){}
struct SLBfdv6SessionCfgDefaultTypeInternal {
  constexpr SLBfdv6SessionCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6SessionCfgDefaultTypeInternal() {}
  union {
    SLBfdv6SessionCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6SessionCfgDefaultTypeInternal _SLBfdv6SessionCfg_default_instance_;
constexpr SLBfdv6Msg::SLBfdv6Msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessions_()
  , oper_(0)
{}
struct SLBfdv6MsgDefaultTypeInternal {
  constexpr SLBfdv6MsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6MsgDefaultTypeInternal() {}
  union {
    SLBfdv6Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6MsgDefaultTypeInternal _SLBfdv6Msg_default_instance_;
constexpr SLBfdv6Res::SLBfdv6Res(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , key_(nullptr){}
struct SLBfdv6ResDefaultTypeInternal {
  constexpr SLBfdv6ResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6ResDefaultTypeInternal() {}
  union {
    SLBfdv6Res _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6ResDefaultTypeInternal _SLBfdv6Res_default_instance_;
constexpr SLBfdv6MsgRsp::SLBfdv6MsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr){}
struct SLBfdv6MsgRspDefaultTypeInternal {
  constexpr SLBfdv6MsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6MsgRspDefaultTypeInternal() {}
  union {
    SLBfdv6MsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6MsgRspDefaultTypeInternal _SLBfdv6MsgRsp_default_instance_;
constexpr SLBfdv6GetMsg::SLBfdv6GetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , seqnum_(uint64_t{0u})
  , entriescount_(0u)
  , getnext_(false){}
struct SLBfdv6GetMsgDefaultTypeInternal {
  constexpr SLBfdv6GetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6GetMsgDefaultTypeInternal() {}
  union {
    SLBfdv6GetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6GetMsgDefaultTypeInternal _SLBfdv6GetMsg_default_instance_;
constexpr SLBfdv6SessionCfgState::SLBfdv6SessionCfgState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , config_(nullptr)
  , state_(nullptr){}
struct SLBfdv6SessionCfgStateDefaultTypeInternal {
  constexpr SLBfdv6SessionCfgStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6SessionCfgStateDefaultTypeInternal() {}
  union {
    SLBfdv6SessionCfgState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6SessionCfgStateDefaultTypeInternal _SLBfdv6SessionCfgState_default_instance_;
constexpr SLBfdv6GetMsgRsp::SLBfdv6GetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , errstatus_(nullptr)
  , eof_(false){}
struct SLBfdv6GetMsgRspDefaultTypeInternal {
  constexpr SLBfdv6GetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6GetMsgRspDefaultTypeInternal() {}
  union {
    SLBfdv6GetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6GetMsgRspDefaultTypeInternal _SLBfdv6GetMsgRsp_default_instance_;
constexpr SLBfdv6SessionState::SLBfdv6SessionState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , state_(nullptr){}
struct SLBfdv6SessionStateDefaultTypeInternal {
  constexpr SLBfdv6SessionStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6SessionStateDefaultTypeInternal() {}
  union {
    SLBfdv6SessionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6SessionStateDefaultTypeInternal _SLBfdv6SessionState_default_instance_;
constexpr SLBfdv6Notif::SLBfdv6Notif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventtype_(0)

  , _oneof_case_{}{}
struct SLBfdv6NotifDefaultTypeInternal {
  constexpr SLBfdv6NotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBfdv6NotifDefaultTypeInternal() {}
  union {
    SLBfdv6Notif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBfdv6NotifDefaultTypeInternal _SLBfdv6Notif_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fbfd_5fipv6_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sl_5fbfd_5fipv6_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fbfd_5fipv6_2eproto = nullptr;

const uint32_t TableStruct_sl_5fbfd_5fipv6_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Key, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Key, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Key, nbraddr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Key, interface_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Key, sourceaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfg, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Msg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Msg, sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Res, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Res, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6MsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6MsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6MsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsg, seqnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfgState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfgState, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfgState, config_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionCfgState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6GetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionState, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6SessionState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Notif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Notif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Notif, eventtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBfdv6Notif, Event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLBfdv6Key)},
  { 11, -1, -1, sizeof(::service_layer::SLBfdv6SessionCfg)},
  { 19, -1, -1, sizeof(::service_layer::SLBfdv6Msg)},
  { 27, -1, -1, sizeof(::service_layer::SLBfdv6Res)},
  { 35, -1, -1, sizeof(::service_layer::SLBfdv6MsgRsp)},
  { 43, -1, -1, sizeof(::service_layer::SLBfdv6GetMsg)},
  { 53, -1, -1, sizeof(::service_layer::SLBfdv6SessionCfgState)},
  { 62, -1, -1, sizeof(::service_layer::SLBfdv6GetMsgRsp)},
  { 71, -1, -1, sizeof(::service_layer::SLBfdv6SessionState)},
  { 79, -1, -1, sizeof(::service_layer::SLBfdv6Notif)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6SessionCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6Msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6Res_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6MsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6GetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6SessionCfgState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6GetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6SessionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBfdv6Notif_default_instance_),
};

const char descriptor_table_protodef_sl_5fbfd_5fipv6_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sl_bfd_ipv6.proto\022\rservice_layer\032\025sl_c"
  "ommon_types.proto\032\023sl_bfd_common.proto\"\231"
  "\001\n\nSLBfdv6Key\022&\n\004Type\030\001 \001(\0162\030.service_la"
  "yer.SLBfdType\022\017\n\007VrfName\030\002 \001(\t\022\017\n\007NbrAdd"
  "r\030\003 \001(\014\022-\n\tInterface\030\004 \001(\0132\032.service_lay"
  "er.SLInterface\022\022\n\nSourceAddr\030\005 \001(\014\"m\n\021SL"
  "Bfdv6SessionCfg\022&\n\003Key\030\001 \001(\0132\031.service_l"
  "ayer.SLBfdv6Key\0220\n\006Config\030\002 \001(\0132 .servic"
  "e_layer.SLBfdConfigCommon\"i\n\nSLBfdv6Msg\022"
  "\'\n\004Oper\030\001 \001(\0162\031.service_layer.SLObjectOp"
  "\0222\n\010Sessions\030\002 \003(\0132 .service_layer.SLBfd"
  "v6SessionCfg\"e\n\nSLBfdv6Res\022/\n\tErrStatus\030"
  "\001 \001(\0132\034.service_layer.SLErrorStatus\022&\n\003K"
  "ey\030\002 \001(\0132\031.service_layer.SLBfdv6Key\"p\n\rS"
  "LBfdv6MsgRsp\0223\n\rStatusSummary\030\001 \001(\0132\034.se"
  "rvice_layer.SLErrorStatus\022*\n\007Results\030\002 \003"
  "(\0132\031.service_layer.SLBfdv6Res\"n\n\rSLBfdv6"
  "GetMsg\022&\n\003Key\030\001 \001(\0132\031.service_layer.SLBf"
  "dv6Key\022\016\n\006SeqNum\030\002 \001(\004\022\024\n\014EntriesCount\030\003"
  " \001(\r\022\017\n\007GetNext\030\004 \001(\010\"\242\001\n\026SLBfdv6Session"
  "CfgState\022&\n\003Key\030\001 \001(\0132\031.service_layer.SL"
  "Bfdv6Key\0220\n\006Config\030\002 \001(\0132 .service_layer"
  ".SLBfdConfigCommon\022.\n\005State\030\003 \001(\0132\037.serv"
  "ice_layer.SLBfdCommonState\"\210\001\n\020SLBfdv6Ge"
  "tMsgRsp\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001(\0132"
  "\034.service_layer.SLErrorStatus\0226\n\007Entries"
  "\030\003 \003(\0132%.service_layer.SLBfdv6SessionCfg"
  "State\"m\n\023SLBfdv6SessionState\022&\n\003Key\030\001 \001("
  "\0132\031.service_layer.SLBfdv6Key\022.\n\005State\030\002 "
  "\001(\0132\037.service_layer.SLBfdCommonState\"\263\001\n"
  "\014SLBfdv6Notif\0220\n\tEventType\030\001 \001(\0162\035.servi"
  "ce_layer.SLBfdNotifType\0221\n\tErrStatus\030\002 \001"
  "(\0132\034.service_layer.SLErrorStatusH\000\0225\n\007Se"
  "ssion\030\003 \001(\0132\".service_layer.SLBfdv6Sessi"
  "onStateH\000B\007\n\005Event2\356\003\n\013SLBfdv6Oper\022I\n\014SL"
  "Bfdv6RegOp\022\032.service_layer.SLBfdRegMsg\032\035"
  ".service_layer.SLBfdRegMsgRsp\022G\n\nSLBfdv6"
  "Get\022\032.service_layer.SLBfdGetMsg\032\035.servic"
  "e_layer.SLBfdGetMsgRsp\022Q\n\017SLBfdv6GetStat"
  "s\022\032.service_layer.SLBfdGetMsg\032\".service_"
  "layer.SLBfdGetStatsMsgRsp\022W\n\025SLBfdv6GetN"
  "otifStream\022\037.service_layer.SLBfdGetNotif"
  "Msg\032\033.service_layer.SLBfdv6Notif0\001\022K\n\020SL"
  "Bfdv6SessionOp\022\031.service_layer.SLBfdv6Ms"
  "g\032\034.service_layer.SLBfdv6MsgRsp\022R\n\021SLBfd"
  "v6SessionGet\022\034.service_layer.SLBfdv6GetM"
  "sg\032\037.service_layer.SLBfdv6GetMsgRspBQZOg"
  "ithub.com/Cisco-service-layer/service-la"
  "yer-objmodel/grpc/protos;service_layerb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fbfd_5fipv6_2eproto_deps[2] = {
  &::descriptor_table_sl_5fbfd_5fcommon_2eproto,
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fbfd_5fipv6_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbfd_5fipv6_2eproto = {
  false, false, 1966, descriptor_table_protodef_sl_5fbfd_5fipv6_2eproto, "sl_bfd_ipv6.proto", 
  &descriptor_table_sl_5fbfd_5fipv6_2eproto_once, descriptor_table_sl_5fbfd_5fipv6_2eproto_deps, 2, 10,
  schemas, file_default_instances, TableStruct_sl_5fbfd_5fipv6_2eproto::offsets,
  file_level_metadata_sl_5fbfd_5fipv6_2eproto, file_level_enum_descriptors_sl_5fbfd_5fipv6_2eproto, file_level_service_descriptors_sl_5fbfd_5fipv6_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fbfd_5fipv6_2eproto_getter() {
  return &descriptor_table_sl_5fbfd_5fipv6_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fbfd_5fipv6_2eproto(&descriptor_table_sl_5fbfd_5fipv6_2eproto);
namespace service_layer {

// ===================================================================

class SLBfdv6Key::_Internal {
 public:
  static const ::service_layer::SLInterface& interface(const SLBfdv6Key* msg);
};

const ::service_layer::SLInterface&
SLBfdv6Key::_Internal::interface(const SLBfdv6Key* msg) {
  return *msg->interface_;
}
void SLBfdv6Key::clear_interface() {
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
SLBfdv6Key::SLBfdv6Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6Key)
}
SLBfdv6Key::SLBfdv6Key(const SLBfdv6Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  nbraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nbraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nbraddr().empty()) {
    nbraddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nbraddr(), 
      GetArenaForAllocation());
  }
  sourceaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sourceaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceaddr().empty()) {
    sourceaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceaddr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_interface()) {
    interface_ = new ::service_layer::SLInterface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6Key)
}

inline void SLBfdv6Key::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nbraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nbraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sourceaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sourceaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(type_));
}

SLBfdv6Key::~SLBfdv6Key() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6Key)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nbraddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interface_;
}

void SLBfdv6Key::ArenaDtor(void* object) {
  SLBfdv6Key* _this = reinterpret_cast< SLBfdv6Key* >(object);
  (void)_this;
}
void SLBfdv6Key::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6Key::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6Key)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  nbraddr_.ClearToEmpty();
  sourceaddr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBfdType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLBfdType>(val));
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBfdv6Key.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes NbrAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nbraddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterface Interface = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SourceAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sourceaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6Key::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6Key)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBfdv6Key.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // bytes NbrAddr = 3;
  if (!this->_internal_nbraddr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nbraddr(), target);
  }

  // .service_layer.SLInterface Interface = 4;
  if (this->_internal_has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::interface(this), target, stream);
  }

  // bytes SourceAddr = 5;
  if (!this->_internal_sourceaddr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sourceaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6Key)
  return target;
}

size_t SLBfdv6Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6Key)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // bytes NbrAddr = 3;
  if (!this->_internal_nbraddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nbraddr());
  }

  // bytes SourceAddr = 5;
  if (!this->_internal_sourceaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sourceaddr());
  }

  // .service_layer.SLInterface Interface = 4;
  if (this->_internal_has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  // .service_layer.SLBfdType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6Key::GetClassData() const { return &_class_data_; }

void SLBfdv6Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6Key *>(to)->MergeFrom(
      static_cast<const SLBfdv6Key &>(from));
}


void SLBfdv6Key::MergeFrom(const SLBfdv6Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6Key)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (!from._internal_nbraddr().empty()) {
    _internal_set_nbraddr(from._internal_nbraddr());
  }
  if (!from._internal_sourceaddr().empty()) {
    _internal_set_sourceaddr(from._internal_sourceaddr());
  }
  if (from._internal_has_interface()) {
    _internal_mutable_interface()->::service_layer::SLInterface::MergeFrom(from._internal_interface());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6Key::CopyFrom(const SLBfdv6Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6Key::IsInitialized() const {
  return true;
}

void SLBfdv6Key::InternalSwap(SLBfdv6Key* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nbraddr_, lhs_arena,
      &other->nbraddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourceaddr_, lhs_arena,
      &other->sourceaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6Key, type_)
      + sizeof(SLBfdv6Key::type_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6Key, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6Key::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[0]);
}

// ===================================================================

class SLBfdv6SessionCfg::_Internal {
 public:
  static const ::service_layer::SLBfdv6Key& key(const SLBfdv6SessionCfg* msg);
  static const ::service_layer::SLBfdConfigCommon& config(const SLBfdv6SessionCfg* msg);
};

const ::service_layer::SLBfdv6Key&
SLBfdv6SessionCfg::_Internal::key(const SLBfdv6SessionCfg* msg) {
  return *msg->key_;
}
const ::service_layer::SLBfdConfigCommon&
SLBfdv6SessionCfg::_Internal::config(const SLBfdv6SessionCfg* msg) {
  return *msg->config_;
}
void SLBfdv6SessionCfg::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
SLBfdv6SessionCfg::SLBfdv6SessionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6SessionCfg)
}
SLBfdv6SessionCfg::SLBfdv6SessionCfg(const SLBfdv6SessionCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv6Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::service_layer::SLBfdConfigCommon(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6SessionCfg)
}

inline void SLBfdv6SessionCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&key_)) + sizeof(config_));
}

SLBfdv6SessionCfg::~SLBfdv6SessionCfg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6SessionCfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6SessionCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete config_;
}

void SLBfdv6SessionCfg::ArenaDtor(void* object) {
  SLBfdv6SessionCfg* _this = reinterpret_cast< SLBfdv6SessionCfg* >(object);
  (void)_this;
}
void SLBfdv6SessionCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6SessionCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6SessionCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6SessionCfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6SessionCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBfdv6Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdConfigCommon Config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6SessionCfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6SessionCfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6SessionCfg)
  return target;
}

size_t SLBfdv6SessionCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6SessionCfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6SessionCfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6SessionCfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6SessionCfg::GetClassData() const { return &_class_data_; }

void SLBfdv6SessionCfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6SessionCfg *>(to)->MergeFrom(
      static_cast<const SLBfdv6SessionCfg &>(from));
}


void SLBfdv6SessionCfg::MergeFrom(const SLBfdv6SessionCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6SessionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv6Key::MergeFrom(from._internal_key());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::service_layer::SLBfdConfigCommon::MergeFrom(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6SessionCfg::CopyFrom(const SLBfdv6SessionCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6SessionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6SessionCfg::IsInitialized() const {
  return true;
}

void SLBfdv6SessionCfg::InternalSwap(SLBfdv6SessionCfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6SessionCfg, config_)
      + sizeof(SLBfdv6SessionCfg::config_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6SessionCfg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6SessionCfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[1]);
}

// ===================================================================

class SLBfdv6Msg::_Internal {
 public:
};

SLBfdv6Msg::SLBfdv6Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sessions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6Msg)
}
SLBfdv6Msg::SLBfdv6Msg(const SLBfdv6Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6Msg)
}

inline void SLBfdv6Msg::SharedCtor() {
oper_ = 0;
}

SLBfdv6Msg::~SLBfdv6Msg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6Msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBfdv6Msg::ArenaDtor(void* object) {
  SLBfdv6Msg* _this = reinterpret_cast< SLBfdv6Msg* >(object);
  (void)_this;
}
void SLBfdv6Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6Msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6Msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6Msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6Msg)
  return target;
}

size_t SLBfdv6Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6Msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6Msg::GetClassData() const { return &_class_data_; }

void SLBfdv6Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6Msg *>(to)->MergeFrom(
      static_cast<const SLBfdv6Msg &>(from));
}


void SLBfdv6Msg::MergeFrom(const SLBfdv6Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6Msg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6Msg::CopyFrom(const SLBfdv6Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6Msg::IsInitialized() const {
  return true;
}

void SLBfdv6Msg::InternalSwap(SLBfdv6Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sessions_.InternalSwap(&other->sessions_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6Msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[2]);
}

// ===================================================================

class SLBfdv6Res::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdv6Res* msg);
  static const ::service_layer::SLBfdv6Key& key(const SLBfdv6Res* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv6Res::_Internal::errstatus(const SLBfdv6Res* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLBfdv6Key&
SLBfdv6Res::_Internal::key(const SLBfdv6Res* msg) {
  return *msg->key_;
}
void SLBfdv6Res::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdv6Res::SLBfdv6Res(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6Res)
}
SLBfdv6Res::SLBfdv6Res(const SLBfdv6Res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv6Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6Res)
}

inline void SLBfdv6Res::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(key_));
}

SLBfdv6Res::~SLBfdv6Res() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6Res)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6Res::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete key_;
}

void SLBfdv6Res::ArenaDtor(void* object) {
  SLBfdv6Res* _this = reinterpret_cast< SLBfdv6Res* >(object);
  (void)_this;
}
void SLBfdv6Res::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6Res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6Res::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6Res)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6Res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdv6Key Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6Res::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6Res)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBfdv6Key Key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6Res)
  return target;
}

size_t SLBfdv6Res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6Res)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLBfdv6Key Key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6Res::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6Res::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6Res::GetClassData() const { return &_class_data_; }

void SLBfdv6Res::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6Res *>(to)->MergeFrom(
      static_cast<const SLBfdv6Res &>(from));
}


void SLBfdv6Res::MergeFrom(const SLBfdv6Res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6Res)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv6Key::MergeFrom(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6Res::CopyFrom(const SLBfdv6Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6Res::IsInitialized() const {
  return true;
}

void SLBfdv6Res::InternalSwap(SLBfdv6Res* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6Res, key_)
      + sizeof(SLBfdv6Res::key_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6Res, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6Res::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[3]);
}

// ===================================================================

class SLBfdv6MsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLBfdv6MsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv6MsgRsp::_Internal::statussummary(const SLBfdv6MsgRsp* msg) {
  return *msg->statussummary_;
}
void SLBfdv6MsgRsp::clear_statussummary() {
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLBfdv6MsgRsp::SLBfdv6MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6MsgRsp)
}
SLBfdv6MsgRsp::SLBfdv6MsgRsp(const SLBfdv6MsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6MsgRsp)
}

inline void SLBfdv6MsgRsp::SharedCtor() {
statussummary_ = nullptr;
}

SLBfdv6MsgRsp::~SLBfdv6MsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6MsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6MsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLBfdv6MsgRsp::ArenaDtor(void* object) {
  SLBfdv6MsgRsp* _this = reinterpret_cast< SLBfdv6MsgRsp* >(object);
  (void)_this;
}
void SLBfdv6MsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6MsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6MsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6MsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6MsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBfdv6Res Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6MsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6MsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLBfdv6Res Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6MsgRsp)
  return target;
}

size_t SLBfdv6MsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6MsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBfdv6Res Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6MsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6MsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6MsgRsp::GetClassData() const { return &_class_data_; }

void SLBfdv6MsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6MsgRsp *>(to)->MergeFrom(
      static_cast<const SLBfdv6MsgRsp &>(from));
}


void SLBfdv6MsgRsp::MergeFrom(const SLBfdv6MsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6MsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6MsgRsp::CopyFrom(const SLBfdv6MsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6MsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6MsgRsp::IsInitialized() const {
  return true;
}

void SLBfdv6MsgRsp::InternalSwap(SLBfdv6MsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6MsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[4]);
}

// ===================================================================

class SLBfdv6GetMsg::_Internal {
 public:
  static const ::service_layer::SLBfdv6Key& key(const SLBfdv6GetMsg* msg);
};

const ::service_layer::SLBfdv6Key&
SLBfdv6GetMsg::_Internal::key(const SLBfdv6GetMsg* msg) {
  return *msg->key_;
}
SLBfdv6GetMsg::SLBfdv6GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6GetMsg)
}
SLBfdv6GetMsg::SLBfdv6GetMsg(const SLBfdv6GetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv6Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6GetMsg)
}

inline void SLBfdv6GetMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&key_)) + sizeof(getnext_));
}

SLBfdv6GetMsg::~SLBfdv6GetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6GetMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6GetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLBfdv6GetMsg::ArenaDtor(void* object) {
  SLBfdv6GetMsg* _this = reinterpret_cast< SLBfdv6GetMsg* >(object);
  (void)_this;
}
void SLBfdv6GetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6GetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6GetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6GetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6GetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBfdv6Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 SeqNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EntriesCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetNext = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6GetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6GetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // uint64 SeqNum = 2;
  if (this->_internal_seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seqnum(), target);
  }

  // uint32 EntriesCount = 3;
  if (this->_internal_entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entriescount(), target);
  }

  // bool GetNext = 4;
  if (this->_internal_getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6GetMsg)
  return target;
}

size_t SLBfdv6GetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6GetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint64 SeqNum = 2;
  if (this->_internal_seqnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seqnum());
  }

  // uint32 EntriesCount = 3;
  if (this->_internal_entriescount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_entriescount());
  }

  // bool GetNext = 4;
  if (this->_internal_getnext() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6GetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6GetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6GetMsg::GetClassData() const { return &_class_data_; }

void SLBfdv6GetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6GetMsg *>(to)->MergeFrom(
      static_cast<const SLBfdv6GetMsg &>(from));
}


void SLBfdv6GetMsg::MergeFrom(const SLBfdv6GetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6GetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv6Key::MergeFrom(from._internal_key());
  }
  if (from._internal_seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from._internal_getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6GetMsg::CopyFrom(const SLBfdv6GetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6GetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6GetMsg::IsInitialized() const {
  return true;
}

void SLBfdv6GetMsg::InternalSwap(SLBfdv6GetMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6GetMsg, getnext_)
      + sizeof(SLBfdv6GetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6GetMsg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6GetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[5]);
}

// ===================================================================

class SLBfdv6SessionCfgState::_Internal {
 public:
  static const ::service_layer::SLBfdv6Key& key(const SLBfdv6SessionCfgState* msg);
  static const ::service_layer::SLBfdConfigCommon& config(const SLBfdv6SessionCfgState* msg);
  static const ::service_layer::SLBfdCommonState& state(const SLBfdv6SessionCfgState* msg);
};

const ::service_layer::SLBfdv6Key&
SLBfdv6SessionCfgState::_Internal::key(const SLBfdv6SessionCfgState* msg) {
  return *msg->key_;
}
const ::service_layer::SLBfdConfigCommon&
SLBfdv6SessionCfgState::_Internal::config(const SLBfdv6SessionCfgState* msg) {
  return *msg->config_;
}
const ::service_layer::SLBfdCommonState&
SLBfdv6SessionCfgState::_Internal::state(const SLBfdv6SessionCfgState* msg) {
  return *msg->state_;
}
void SLBfdv6SessionCfgState::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
void SLBfdv6SessionCfgState::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
SLBfdv6SessionCfgState::SLBfdv6SessionCfgState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6SessionCfgState)
}
SLBfdv6SessionCfgState::SLBfdv6SessionCfgState(const SLBfdv6SessionCfgState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv6Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::service_layer::SLBfdConfigCommon(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::service_layer::SLBfdCommonState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6SessionCfgState)
}

inline void SLBfdv6SessionCfgState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&key_)) + sizeof(state_));
}

SLBfdv6SessionCfgState::~SLBfdv6SessionCfgState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6SessionCfgState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6SessionCfgState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void SLBfdv6SessionCfgState::ArenaDtor(void* object) {
  SLBfdv6SessionCfgState* _this = reinterpret_cast< SLBfdv6SessionCfgState* >(object);
  (void)_this;
}
void SLBfdv6SessionCfgState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6SessionCfgState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6SessionCfgState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6SessionCfgState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6SessionCfgState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBfdv6Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdConfigCommon Config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdCommonState State = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6SessionCfgState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6SessionCfgState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .service_layer.SLBfdCommonState State = 3;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6SessionCfgState)
  return target;
}

size_t SLBfdv6SessionCfgState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6SessionCfgState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLBfdConfigCommon Config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .service_layer.SLBfdCommonState State = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6SessionCfgState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6SessionCfgState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6SessionCfgState::GetClassData() const { return &_class_data_; }

void SLBfdv6SessionCfgState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6SessionCfgState *>(to)->MergeFrom(
      static_cast<const SLBfdv6SessionCfgState &>(from));
}


void SLBfdv6SessionCfgState::MergeFrom(const SLBfdv6SessionCfgState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6SessionCfgState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv6Key::MergeFrom(from._internal_key());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::service_layer::SLBfdConfigCommon::MergeFrom(from._internal_config());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::service_layer::SLBfdCommonState::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6SessionCfgState::CopyFrom(const SLBfdv6SessionCfgState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6SessionCfgState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6SessionCfgState::IsInitialized() const {
  return true;
}

void SLBfdv6SessionCfgState::InternalSwap(SLBfdv6SessionCfgState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6SessionCfgState, state_)
      + sizeof(SLBfdv6SessionCfgState::state_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6SessionCfgState, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6SessionCfgState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[6]);
}

// ===================================================================

class SLBfdv6GetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdv6GetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv6GetMsgRsp::_Internal::errstatus(const SLBfdv6GetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLBfdv6GetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBfdv6GetMsgRsp::SLBfdv6GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6GetMsgRsp)
}
SLBfdv6GetMsgRsp::SLBfdv6GetMsgRsp(const SLBfdv6GetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6GetMsgRsp)
}

inline void SLBfdv6GetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLBfdv6GetMsgRsp::~SLBfdv6GetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6GetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6GetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLBfdv6GetMsgRsp::ArenaDtor(void* object) {
  SLBfdv6GetMsgRsp* _this = reinterpret_cast< SLBfdv6GetMsgRsp* >(object);
  (void)_this;
}
void SLBfdv6GetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6GetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6GetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6GetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6GetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Eof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6GetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6GetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Eof = 1;
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6GetMsgRsp)
  return target;
}

size_t SLBfdv6GetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6GetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 1;
  if (this->_internal_eof() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6GetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6GetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6GetMsgRsp::GetClassData() const { return &_class_data_; }

void SLBfdv6GetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6GetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLBfdv6GetMsgRsp &>(from));
}


void SLBfdv6GetMsgRsp::MergeFrom(const SLBfdv6GetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6GetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6GetMsgRsp::CopyFrom(const SLBfdv6GetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6GetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6GetMsgRsp::IsInitialized() const {
  return true;
}

void SLBfdv6GetMsgRsp::InternalSwap(SLBfdv6GetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6GetMsgRsp, eof_)
      + sizeof(SLBfdv6GetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6GetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6GetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[7]);
}

// ===================================================================

class SLBfdv6SessionState::_Internal {
 public:
  static const ::service_layer::SLBfdv6Key& key(const SLBfdv6SessionState* msg);
  static const ::service_layer::SLBfdCommonState& state(const SLBfdv6SessionState* msg);
};

const ::service_layer::SLBfdv6Key&
SLBfdv6SessionState::_Internal::key(const SLBfdv6SessionState* msg) {
  return *msg->key_;
}
const ::service_layer::SLBfdCommonState&
SLBfdv6SessionState::_Internal::state(const SLBfdv6SessionState* msg) {
  return *msg->state_;
}
void SLBfdv6SessionState::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
SLBfdv6SessionState::SLBfdv6SessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6SessionState)
}
SLBfdv6SessionState::SLBfdv6SessionState(const SLBfdv6SessionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLBfdv6Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::service_layer::SLBfdCommonState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6SessionState)
}

inline void SLBfdv6SessionState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&key_)) + sizeof(state_));
}

SLBfdv6SessionState::~SLBfdv6SessionState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6SessionState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6SessionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete state_;
}

void SLBfdv6SessionState::ArenaDtor(void* object) {
  SLBfdv6SessionState* _this = reinterpret_cast< SLBfdv6SessionState* >(object);
  (void)_this;
}
void SLBfdv6SessionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6SessionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6SessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6SessionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6SessionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBfdv6Key Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdCommonState State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6SessionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6SessionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLBfdCommonState State = 2;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6SessionState)
  return target;
}

size_t SLBfdv6SessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6SessionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdv6Key Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLBfdCommonState State = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6SessionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6SessionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6SessionState::GetClassData() const { return &_class_data_; }

void SLBfdv6SessionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6SessionState *>(to)->MergeFrom(
      static_cast<const SLBfdv6SessionState &>(from));
}


void SLBfdv6SessionState::MergeFrom(const SLBfdv6SessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLBfdv6Key::MergeFrom(from._internal_key());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::service_layer::SLBfdCommonState::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6SessionState::CopyFrom(const SLBfdv6SessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6SessionState::IsInitialized() const {
  return true;
}

void SLBfdv6SessionState::InternalSwap(SLBfdv6SessionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBfdv6SessionState, state_)
      + sizeof(SLBfdv6SessionState::state_)
      - PROTOBUF_FIELD_OFFSET(SLBfdv6SessionState, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6SessionState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[8]);
}

// ===================================================================

class SLBfdv6Notif::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBfdv6Notif* msg);
  static const ::service_layer::SLBfdv6SessionState& session(const SLBfdv6Notif* msg);
};

const ::service_layer::SLErrorStatus&
SLBfdv6Notif::_Internal::errstatus(const SLBfdv6Notif* msg) {
  return *msg->Event_.errstatus_;
}
const ::service_layer::SLBfdv6SessionState&
SLBfdv6Notif::_Internal::session(const SLBfdv6Notif* msg) {
  return *msg->Event_.session_;
}
void SLBfdv6Notif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Notif.ErrStatus)
}
void SLBfdv6Notif::clear_errstatus() {
  if (_internal_has_errstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.errstatus_;
    }
    clear_has_Event();
  }
}
void SLBfdv6Notif::set_allocated_session(::service_layer::SLBfdv6SessionState* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv6SessionState>::GetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    Event_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Notif.Session)
}
SLBfdv6Notif::SLBfdv6Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBfdv6Notif)
}
SLBfdv6Notif::SLBfdv6Notif(const SLBfdv6Notif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventtype_ = from.eventtype_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::service_layer::SLBfdv6SessionState::MergeFrom(from._internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBfdv6Notif)
}

inline void SLBfdv6Notif::SharedCtor() {
eventtype_ = 0;
clear_has_Event();
}

SLBfdv6Notif::~SLBfdv6Notif() {
  // @@protoc_insertion_point(destructor:service_layer.SLBfdv6Notif)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBfdv6Notif::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLBfdv6Notif::ArenaDtor(void* object) {
  SLBfdv6Notif* _this = reinterpret_cast< SLBfdv6Notif* >(object);
  (void)_this;
}
void SLBfdv6Notif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBfdv6Notif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBfdv6Notif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBfdv6Notif)
  switch (Event_case()) {
    case kErrStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.errstatus_;
      }
      break;
    }
    case kSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.session_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLBfdv6Notif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBfdv6Notif)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventtype_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBfdv6Notif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBfdNotifType EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::service_layer::SLBfdNotifType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBfdv6SessionState Session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBfdv6Notif::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBfdv6Notif)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBfdNotifType EventType = 1;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventtype(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBfdv6SessionState Session = 3;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBfdv6Notif)
  return target;
}

size_t SLBfdv6Notif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBfdv6Notif)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBfdNotifType EventType = 1;
  if (this->_internal_eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  switch (Event_case()) {
    // .service_layer.SLErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.errstatus_);
      break;
    }
    // .service_layer.SLBfdv6SessionState Session = 3;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.session_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBfdv6Notif::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBfdv6Notif::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBfdv6Notif::GetClassData() const { return &_class_data_; }

void SLBfdv6Notif::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBfdv6Notif *>(to)->MergeFrom(
      static_cast<const SLBfdv6Notif &>(from));
}


void SLBfdv6Notif::MergeFrom(const SLBfdv6Notif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBfdv6Notif)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::service_layer::SLBfdv6SessionState::MergeFrom(from._internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBfdv6Notif::CopyFrom(const SLBfdv6Notif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBfdv6Notif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBfdv6Notif::IsInitialized() const {
  return true;
}

void SLBfdv6Notif::InternalSwap(SLBfdv6Notif* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(eventtype_, other->eventtype_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBfdv6Notif::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbfd_5fipv6_2eproto_getter, &descriptor_table_sl_5fbfd_5fipv6_2eproto_once,
      file_level_metadata_sl_5fbfd_5fipv6_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6Key* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6Key >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6SessionCfg* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6SessionCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6SessionCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6Msg* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6Res* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6Res >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6Res >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6MsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6MsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6MsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6GetMsg* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6GetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6GetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6SessionCfgState* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6SessionCfgState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6SessionCfgState >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6GetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6GetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6GetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6SessionState* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6SessionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6SessionState >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBfdv6Notif* Arena::CreateMaybeMessage< ::service_layer::SLBfdv6Notif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBfdv6Notif >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
