// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_ipv6.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fipv6_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fipv6_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_bfd_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fbfd_5fipv6_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fbfd_5fipv6_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbfd_5fipv6_2eproto;
namespace service_layer {
class SLBfdv6GetMsg;
struct SLBfdv6GetMsgDefaultTypeInternal;
extern SLBfdv6GetMsgDefaultTypeInternal _SLBfdv6GetMsg_default_instance_;
class SLBfdv6GetMsgRsp;
struct SLBfdv6GetMsgRspDefaultTypeInternal;
extern SLBfdv6GetMsgRspDefaultTypeInternal _SLBfdv6GetMsgRsp_default_instance_;
class SLBfdv6Key;
struct SLBfdv6KeyDefaultTypeInternal;
extern SLBfdv6KeyDefaultTypeInternal _SLBfdv6Key_default_instance_;
class SLBfdv6Msg;
struct SLBfdv6MsgDefaultTypeInternal;
extern SLBfdv6MsgDefaultTypeInternal _SLBfdv6Msg_default_instance_;
class SLBfdv6MsgRsp;
struct SLBfdv6MsgRspDefaultTypeInternal;
extern SLBfdv6MsgRspDefaultTypeInternal _SLBfdv6MsgRsp_default_instance_;
class SLBfdv6Notif;
struct SLBfdv6NotifDefaultTypeInternal;
extern SLBfdv6NotifDefaultTypeInternal _SLBfdv6Notif_default_instance_;
class SLBfdv6Res;
struct SLBfdv6ResDefaultTypeInternal;
extern SLBfdv6ResDefaultTypeInternal _SLBfdv6Res_default_instance_;
class SLBfdv6SessionCfg;
struct SLBfdv6SessionCfgDefaultTypeInternal;
extern SLBfdv6SessionCfgDefaultTypeInternal _SLBfdv6SessionCfg_default_instance_;
class SLBfdv6SessionCfgState;
struct SLBfdv6SessionCfgStateDefaultTypeInternal;
extern SLBfdv6SessionCfgStateDefaultTypeInternal _SLBfdv6SessionCfgState_default_instance_;
class SLBfdv6SessionState;
struct SLBfdv6SessionStateDefaultTypeInternal;
extern SLBfdv6SessionStateDefaultTypeInternal _SLBfdv6SessionState_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLBfdv6GetMsg* Arena::CreateMaybeMessage<::service_layer::SLBfdv6GetMsg>(Arena*);
template<> ::service_layer::SLBfdv6GetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdv6GetMsgRsp>(Arena*);
template<> ::service_layer::SLBfdv6Key* Arena::CreateMaybeMessage<::service_layer::SLBfdv6Key>(Arena*);
template<> ::service_layer::SLBfdv6Msg* Arena::CreateMaybeMessage<::service_layer::SLBfdv6Msg>(Arena*);
template<> ::service_layer::SLBfdv6MsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBfdv6MsgRsp>(Arena*);
template<> ::service_layer::SLBfdv6Notif* Arena::CreateMaybeMessage<::service_layer::SLBfdv6Notif>(Arena*);
template<> ::service_layer::SLBfdv6Res* Arena::CreateMaybeMessage<::service_layer::SLBfdv6Res>(Arena*);
template<> ::service_layer::SLBfdv6SessionCfg* Arena::CreateMaybeMessage<::service_layer::SLBfdv6SessionCfg>(Arena*);
template<> ::service_layer::SLBfdv6SessionCfgState* Arena::CreateMaybeMessage<::service_layer::SLBfdv6SessionCfgState>(Arena*);
template<> ::service_layer::SLBfdv6SessionState* Arena::CreateMaybeMessage<::service_layer::SLBfdv6SessionState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

// ===================================================================

class SLBfdv6Key final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6Key) */ {
 public:
  inline SLBfdv6Key() : SLBfdv6Key(nullptr) {}
  ~SLBfdv6Key() override;
  explicit constexpr SLBfdv6Key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6Key(const SLBfdv6Key& from);
  SLBfdv6Key(SLBfdv6Key&& from) noexcept
    : SLBfdv6Key() {
    *this = ::std::move(from);
  }

  inline SLBfdv6Key& operator=(const SLBfdv6Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6Key& operator=(SLBfdv6Key&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6Key* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6Key*>(
               &_SLBfdv6Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLBfdv6Key& a, SLBfdv6Key& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6Key* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6Key* New() const final {
    return new SLBfdv6Key();
  }

  SLBfdv6Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6Key>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6Key& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6Key& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6Key";
  }
  protected:
  explicit SLBfdv6Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kNbrAddrFieldNumber = 3,
    kSourceAddrFieldNumber = 5,
    kInterfaceFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrfname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrfname();
  PROTOBUF_MUST_USE_RESULT std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // bytes NbrAddr = 3;
  void clear_nbraddr();
  const std::string& nbraddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nbraddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nbraddr();
  PROTOBUF_MUST_USE_RESULT std::string* release_nbraddr();
  void set_allocated_nbraddr(std::string* nbraddr);
  private:
  const std::string& _internal_nbraddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nbraddr(const std::string& value);
  std::string* _internal_mutable_nbraddr();
  public:

  // bytes SourceAddr = 5;
  void clear_sourceaddr();
  const std::string& sourceaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourceaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourceaddr();
  PROTOBUF_MUST_USE_RESULT std::string* release_sourceaddr();
  void set_allocated_sourceaddr(std::string* sourceaddr);
  private:
  const std::string& _internal_sourceaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceaddr(const std::string& value);
  std::string* _internal_mutable_sourceaddr();
  public:

  // .service_layer.SLInterface Interface = 4;
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::service_layer::SLInterface& interface() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLInterface* release_interface();
  ::service_layer::SLInterface* mutable_interface();
  void set_allocated_interface(::service_layer::SLInterface* interface);
  private:
  const ::service_layer::SLInterface& _internal_interface() const;
  ::service_layer::SLInterface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::service_layer::SLInterface* interface);
  ::service_layer::SLInterface* unsafe_arena_release_interface();

  // .service_layer.SLBfdType Type = 1;
  void clear_type();
  ::service_layer::SLBfdType type() const;
  void set_type(::service_layer::SLBfdType value);
  private:
  ::service_layer::SLBfdType _internal_type() const;
  void _internal_set_type(::service_layer::SLBfdType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nbraddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceaddr_;
  ::service_layer::SLInterface* interface_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6SessionCfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6SessionCfg) */ {
 public:
  inline SLBfdv6SessionCfg() : SLBfdv6SessionCfg(nullptr) {}
  ~SLBfdv6SessionCfg() override;
  explicit constexpr SLBfdv6SessionCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6SessionCfg(const SLBfdv6SessionCfg& from);
  SLBfdv6SessionCfg(SLBfdv6SessionCfg&& from) noexcept
    : SLBfdv6SessionCfg() {
    *this = ::std::move(from);
  }

  inline SLBfdv6SessionCfg& operator=(const SLBfdv6SessionCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6SessionCfg& operator=(SLBfdv6SessionCfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6SessionCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6SessionCfg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6SessionCfg*>(
               &_SLBfdv6SessionCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLBfdv6SessionCfg& a, SLBfdv6SessionCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6SessionCfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6SessionCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6SessionCfg* New() const final {
    return new SLBfdv6SessionCfg();
  }

  SLBfdv6SessionCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6SessionCfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6SessionCfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6SessionCfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6SessionCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6SessionCfg";
  }
  protected:
  explicit SLBfdv6SessionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv6Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv6Key* release_key();
  ::service_layer::SLBfdv6Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);
  private:
  const ::service_layer::SLBfdv6Key& _internal_key() const;
  ::service_layer::SLBfdv6Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv6Key* key);
  ::service_layer::SLBfdv6Key* unsafe_arena_release_key();

  // .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::service_layer::SLBfdConfigCommon& config() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdConfigCommon* release_config();
  ::service_layer::SLBfdConfigCommon* mutable_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);
  private:
  const ::service_layer::SLBfdConfigCommon& _internal_config() const;
  ::service_layer::SLBfdConfigCommon* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::service_layer::SLBfdConfigCommon* config);
  ::service_layer::SLBfdConfigCommon* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6SessionCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv6Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6Msg) */ {
 public:
  inline SLBfdv6Msg() : SLBfdv6Msg(nullptr) {}
  ~SLBfdv6Msg() override;
  explicit constexpr SLBfdv6Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6Msg(const SLBfdv6Msg& from);
  SLBfdv6Msg(SLBfdv6Msg&& from) noexcept
    : SLBfdv6Msg() {
    *this = ::std::move(from);
  }

  inline SLBfdv6Msg& operator=(const SLBfdv6Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6Msg& operator=(SLBfdv6Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6Msg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6Msg*>(
               &_SLBfdv6Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLBfdv6Msg& a, SLBfdv6Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6Msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6Msg* New() const final {
    return new SLBfdv6Msg();
  }

  SLBfdv6Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6Msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6Msg";
  }
  protected:
  explicit SLBfdv6Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::service_layer::SLBfdv6SessionCfg* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >*
      mutable_sessions();
  private:
  const ::service_layer::SLBfdv6SessionCfg& _internal_sessions(int index) const;
  ::service_layer::SLBfdv6SessionCfg* _internal_add_sessions();
  public:
  const ::service_layer::SLBfdv6SessionCfg& sessions(int index) const;
  ::service_layer::SLBfdv6SessionCfg* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >&
      sessions() const;

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg > sessions_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6Res final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6Res) */ {
 public:
  inline SLBfdv6Res() : SLBfdv6Res(nullptr) {}
  ~SLBfdv6Res() override;
  explicit constexpr SLBfdv6Res(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6Res(const SLBfdv6Res& from);
  SLBfdv6Res(SLBfdv6Res&& from) noexcept
    : SLBfdv6Res() {
    *this = ::std::move(from);
  }

  inline SLBfdv6Res& operator=(const SLBfdv6Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6Res& operator=(SLBfdv6Res&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6Res& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6Res* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6Res*>(
               &_SLBfdv6Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLBfdv6Res& a, SLBfdv6Res& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6Res* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6Res* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6Res* New() const final {
    return new SLBfdv6Res();
  }

  SLBfdv6Res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6Res>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6Res& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6Res& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6Res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6Res";
  }
  protected:
  explicit SLBfdv6Res(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLBfdv6Key Key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv6Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv6Key* release_key();
  ::service_layer::SLBfdv6Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);
  private:
  const ::service_layer::SLBfdv6Key& _internal_key() const;
  ::service_layer::SLBfdv6Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv6Key* key);
  ::service_layer::SLBfdv6Key* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Res)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLBfdv6Key* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6MsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6MsgRsp) */ {
 public:
  inline SLBfdv6MsgRsp() : SLBfdv6MsgRsp(nullptr) {}
  ~SLBfdv6MsgRsp() override;
  explicit constexpr SLBfdv6MsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6MsgRsp(const SLBfdv6MsgRsp& from);
  SLBfdv6MsgRsp(SLBfdv6MsgRsp&& from) noexcept
    : SLBfdv6MsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdv6MsgRsp& operator=(const SLBfdv6MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6MsgRsp& operator=(SLBfdv6MsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6MsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6MsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6MsgRsp*>(
               &_SLBfdv6MsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLBfdv6MsgRsp& a, SLBfdv6MsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6MsgRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6MsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6MsgRsp* New() const final {
    return new SLBfdv6MsgRsp();
  }

  SLBfdv6MsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6MsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6MsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6MsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6MsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6MsgRsp";
  }
  protected:
  explicit SLBfdv6MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusSummaryFieldNumber = 1,
  };
  // repeated .service_layer.SLBfdv6Res Results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLBfdv6Res* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6Res >*
      mutable_results();
  private:
  const ::service_layer::SLBfdv6Res& _internal_results(int index) const;
  ::service_layer::SLBfdv6Res* _internal_add_results();
  public:
  const ::service_layer::SLBfdv6Res& results(int index) const;
  ::service_layer::SLBfdv6Res* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6Res >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6MsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6Res > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6GetMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6GetMsg) */ {
 public:
  inline SLBfdv6GetMsg() : SLBfdv6GetMsg(nullptr) {}
  ~SLBfdv6GetMsg() override;
  explicit constexpr SLBfdv6GetMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6GetMsg(const SLBfdv6GetMsg& from);
  SLBfdv6GetMsg(SLBfdv6GetMsg&& from) noexcept
    : SLBfdv6GetMsg() {
    *this = ::std::move(from);
  }

  inline SLBfdv6GetMsg& operator=(const SLBfdv6GetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6GetMsg& operator=(SLBfdv6GetMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6GetMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6GetMsg* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6GetMsg*>(
               &_SLBfdv6GetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLBfdv6GetMsg& a, SLBfdv6GetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6GetMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6GetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6GetMsg* New() const final {
    return new SLBfdv6GetMsg();
  }

  SLBfdv6GetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6GetMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6GetMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6GetMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6GetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6GetMsg";
  }
  protected:
  explicit SLBfdv6GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kSeqNumFieldNumber = 2,
    kEntriesCountFieldNumber = 3,
    kGetNextFieldNumber = 4,
  };
  // .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv6Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv6Key* release_key();
  ::service_layer::SLBfdv6Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);
  private:
  const ::service_layer::SLBfdv6Key& _internal_key() const;
  ::service_layer::SLBfdv6Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv6Key* key);
  ::service_layer::SLBfdv6Key* unsafe_arena_release_key();

  // uint64 SeqNum = 2;
  void clear_seqnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 seqnum() const;
  void set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seqnum() const;
  void _internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 EntriesCount = 3;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 4;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6GetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv6Key* key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seqnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6SessionCfgState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6SessionCfgState) */ {
 public:
  inline SLBfdv6SessionCfgState() : SLBfdv6SessionCfgState(nullptr) {}
  ~SLBfdv6SessionCfgState() override;
  explicit constexpr SLBfdv6SessionCfgState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6SessionCfgState(const SLBfdv6SessionCfgState& from);
  SLBfdv6SessionCfgState(SLBfdv6SessionCfgState&& from) noexcept
    : SLBfdv6SessionCfgState() {
    *this = ::std::move(from);
  }

  inline SLBfdv6SessionCfgState& operator=(const SLBfdv6SessionCfgState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6SessionCfgState& operator=(SLBfdv6SessionCfgState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6SessionCfgState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6SessionCfgState* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6SessionCfgState*>(
               &_SLBfdv6SessionCfgState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLBfdv6SessionCfgState& a, SLBfdv6SessionCfgState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6SessionCfgState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6SessionCfgState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6SessionCfgState* New() const final {
    return new SLBfdv6SessionCfgState();
  }

  SLBfdv6SessionCfgState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6SessionCfgState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6SessionCfgState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6SessionCfgState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6SessionCfgState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6SessionCfgState";
  }
  protected:
  explicit SLBfdv6SessionCfgState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv6Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv6Key* release_key();
  ::service_layer::SLBfdv6Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);
  private:
  const ::service_layer::SLBfdv6Key& _internal_key() const;
  ::service_layer::SLBfdv6Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv6Key* key);
  ::service_layer::SLBfdv6Key* unsafe_arena_release_key();

  // .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::service_layer::SLBfdConfigCommon& config() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdConfigCommon* release_config();
  ::service_layer::SLBfdConfigCommon* mutable_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);
  private:
  const ::service_layer::SLBfdConfigCommon& _internal_config() const;
  ::service_layer::SLBfdConfigCommon* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::service_layer::SLBfdConfigCommon* config);
  ::service_layer::SLBfdConfigCommon* unsafe_arena_release_config();

  // .service_layer.SLBfdCommonState State = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::service_layer::SLBfdCommonState& state() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdCommonState* release_state();
  ::service_layer::SLBfdCommonState* mutable_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);
  private:
  const ::service_layer::SLBfdCommonState& _internal_state() const;
  ::service_layer::SLBfdCommonState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::service_layer::SLBfdCommonState* state);
  ::service_layer::SLBfdCommonState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6SessionCfgState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv6Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  ::service_layer::SLBfdCommonState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6GetMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6GetMsgRsp) */ {
 public:
  inline SLBfdv6GetMsgRsp() : SLBfdv6GetMsgRsp(nullptr) {}
  ~SLBfdv6GetMsgRsp() override;
  explicit constexpr SLBfdv6GetMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6GetMsgRsp(const SLBfdv6GetMsgRsp& from);
  SLBfdv6GetMsgRsp(SLBfdv6GetMsgRsp&& from) noexcept
    : SLBfdv6GetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBfdv6GetMsgRsp& operator=(const SLBfdv6GetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6GetMsgRsp& operator=(SLBfdv6GetMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6GetMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6GetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6GetMsgRsp*>(
               &_SLBfdv6GetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLBfdv6GetMsgRsp& a, SLBfdv6GetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6GetMsgRsp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6GetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6GetMsgRsp* New() const final {
    return new SLBfdv6GetMsgRsp();
  }

  SLBfdv6GetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6GetMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6GetMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6GetMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6GetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6GetMsgRsp";
  }
  protected:
  explicit SLBfdv6GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrStatusFieldNumber = 2,
    kEofFieldNumber = 1,
  };
  // repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLBfdv6SessionCfgState* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >*
      mutable_entries();
  private:
  const ::service_layer::SLBfdv6SessionCfgState& _internal_entries(int index) const;
  ::service_layer::SLBfdv6SessionCfgState* _internal_add_entries();
  public:
  const ::service_layer::SLBfdv6SessionCfgState& entries(int index) const;
  ::service_layer::SLBfdv6SessionCfgState* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // bool Eof = 1;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6GetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6SessionState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6SessionState) */ {
 public:
  inline SLBfdv6SessionState() : SLBfdv6SessionState(nullptr) {}
  ~SLBfdv6SessionState() override;
  explicit constexpr SLBfdv6SessionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6SessionState(const SLBfdv6SessionState& from);
  SLBfdv6SessionState(SLBfdv6SessionState&& from) noexcept
    : SLBfdv6SessionState() {
    *this = ::std::move(from);
  }

  inline SLBfdv6SessionState& operator=(const SLBfdv6SessionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6SessionState& operator=(SLBfdv6SessionState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6SessionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBfdv6SessionState* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6SessionState*>(
               &_SLBfdv6SessionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLBfdv6SessionState& a, SLBfdv6SessionState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6SessionState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6SessionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6SessionState* New() const final {
    return new SLBfdv6SessionState();
  }

  SLBfdv6SessionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6SessionState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6SessionState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6SessionState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6SessionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6SessionState";
  }
  protected:
  explicit SLBfdv6SessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLBfdv6Key& key() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv6Key* release_key();
  ::service_layer::SLBfdv6Key* mutable_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);
  private:
  const ::service_layer::SLBfdv6Key& _internal_key() const;
  ::service_layer::SLBfdv6Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLBfdv6Key* key);
  ::service_layer::SLBfdv6Key* unsafe_arena_release_key();

  // .service_layer.SLBfdCommonState State = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::service_layer::SLBfdCommonState& state() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdCommonState* release_state();
  ::service_layer::SLBfdCommonState* mutable_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);
  private:
  const ::service_layer::SLBfdCommonState& _internal_state() const;
  ::service_layer::SLBfdCommonState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::service_layer::SLBfdCommonState* state);
  ::service_layer::SLBfdCommonState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6SessionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBfdv6Key* key_;
  ::service_layer::SLBfdCommonState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLBfdv6Notif final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBfdv6Notif) */ {
 public:
  inline SLBfdv6Notif() : SLBfdv6Notif(nullptr) {}
  ~SLBfdv6Notif() override;
  explicit constexpr SLBfdv6Notif(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBfdv6Notif(const SLBfdv6Notif& from);
  SLBfdv6Notif(SLBfdv6Notif&& from) noexcept
    : SLBfdv6Notif() {
    *this = ::std::move(from);
  }

  inline SLBfdv6Notif& operator=(const SLBfdv6Notif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBfdv6Notif& operator=(SLBfdv6Notif&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBfdv6Notif& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kErrStatus = 2,
    kSession = 3,
    EVENT_NOT_SET = 0,
  };

  static inline const SLBfdv6Notif* internal_default_instance() {
    return reinterpret_cast<const SLBfdv6Notif*>(
               &_SLBfdv6Notif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLBfdv6Notif& a, SLBfdv6Notif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBfdv6Notif* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBfdv6Notif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLBfdv6Notif* New() const final {
    return new SLBfdv6Notif();
  }

  SLBfdv6Notif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLBfdv6Notif>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBfdv6Notif& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBfdv6Notif& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBfdv6Notif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBfdv6Notif";
  }
  protected:
  explicit SLBfdv6Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kErrStatusFieldNumber = 2,
    kSessionFieldNumber = 3,
  };
  // .service_layer.SLBfdNotifType EventType = 1;
  void clear_eventtype();
  ::service_layer::SLBfdNotifType eventtype() const;
  void set_eventtype(::service_layer::SLBfdNotifType value);
  private:
  ::service_layer::SLBfdNotifType _internal_eventtype() const;
  void _internal_set_eventtype(::service_layer::SLBfdNotifType value);
  public:

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLBfdv6SessionState Session = 3;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::service_layer::SLBfdv6SessionState& session() const;
  PROTOBUF_MUST_USE_RESULT ::service_layer::SLBfdv6SessionState* release_session();
  ::service_layer::SLBfdv6SessionState* mutable_session();
  void set_allocated_session(::service_layer::SLBfdv6SessionState* session);
  private:
  const ::service_layer::SLBfdv6SessionState& _internal_session() const;
  ::service_layer::SLBfdv6SessionState* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::service_layer::SLBfdv6SessionState* session);
  ::service_layer::SLBfdv6SessionState* unsafe_arena_release_session();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Notif)
 private:
  class _Internal;
  void set_has_errstatus();
  void set_has_session();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int eventtype_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLBfdv6SessionState* session_;
  } Event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbfd_5fipv6_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLBfdv6Key

// .service_layer.SLBfdType Type = 1;
inline void SLBfdv6Key::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLBfdType SLBfdv6Key::_internal_type() const {
  return static_cast< ::service_layer::SLBfdType >(type_);
}
inline ::service_layer::SLBfdType SLBfdv6Key::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.Type)
  return _internal_type();
}
inline void SLBfdv6Key::_internal_set_type(::service_layer::SLBfdType value) {
  
  type_ = value;
}
inline void SLBfdv6Key::set_type(::service_layer::SLBfdType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.Type)
}

// string VrfName = 2;
inline void SLBfdv6Key::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLBfdv6Key::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.VrfName)
  return _internal_vrfname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBfdv6Key::set_vrfname(ArgT0&& arg0, ArgT... args) {
 
 vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.VrfName)
}
inline std::string* SLBfdv6Key::mutable_vrfname() {
  std::string* _s = _internal_mutable_vrfname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.VrfName)
  return _s;
}
inline const std::string& SLBfdv6Key::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLBfdv6Key::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBfdv6Key::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBfdv6Key::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Key.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBfdv6Key::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.VrfName)
}

// bytes NbrAddr = 3;
inline void SLBfdv6Key::clear_nbraddr() {
  nbraddr_.ClearToEmpty();
}
inline const std::string& SLBfdv6Key::nbraddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.NbrAddr)
  return _internal_nbraddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBfdv6Key::set_nbraddr(ArgT0&& arg0, ArgT... args) {
 
 nbraddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.NbrAddr)
}
inline std::string* SLBfdv6Key::mutable_nbraddr() {
  std::string* _s = _internal_mutable_nbraddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.NbrAddr)
  return _s;
}
inline const std::string& SLBfdv6Key::_internal_nbraddr() const {
  return nbraddr_.Get();
}
inline void SLBfdv6Key::_internal_set_nbraddr(const std::string& value) {
  
  nbraddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBfdv6Key::_internal_mutable_nbraddr() {
  
  return nbraddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBfdv6Key::release_nbraddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Key.NbrAddr)
  return nbraddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBfdv6Key::set_allocated_nbraddr(std::string* nbraddr) {
  if (nbraddr != nullptr) {
    
  } else {
    
  }
  nbraddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nbraddr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.NbrAddr)
}

// .service_layer.SLInterface Interface = 4;
inline bool SLBfdv6Key::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool SLBfdv6Key::has_interface() const {
  return _internal_has_interface();
}
inline const ::service_layer::SLInterface& SLBfdv6Key::_internal_interface() const {
  const ::service_layer::SLInterface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLInterface&>(
      ::service_layer::_SLInterface_default_instance_);
}
inline const ::service_layer::SLInterface& SLBfdv6Key::interface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.Interface)
  return _internal_interface();
}
inline void SLBfdv6Key::unsafe_arena_set_allocated_interface(
    ::service_layer::SLInterface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6Key.Interface)
}
inline ::service_layer::SLInterface* SLBfdv6Key::release_interface() {
  
  ::service_layer::SLInterface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLInterface* SLBfdv6Key::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Key.Interface)
  
  ::service_layer::SLInterface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::service_layer::SLInterface* SLBfdv6Key::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLInterface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::service_layer::SLInterface* SLBfdv6Key::mutable_interface() {
  ::service_layer::SLInterface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.Interface)
  return _msg;
}
inline void SLBfdv6Key::set_allocated_interface(::service_layer::SLInterface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface));
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.Interface)
}

// bytes SourceAddr = 5;
inline void SLBfdv6Key::clear_sourceaddr() {
  sourceaddr_.ClearToEmpty();
}
inline const std::string& SLBfdv6Key::sourceaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.SourceAddr)
  return _internal_sourceaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBfdv6Key::set_sourceaddr(ArgT0&& arg0, ArgT... args) {
 
 sourceaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.SourceAddr)
}
inline std::string* SLBfdv6Key::mutable_sourceaddr() {
  std::string* _s = _internal_mutable_sourceaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.SourceAddr)
  return _s;
}
inline const std::string& SLBfdv6Key::_internal_sourceaddr() const {
  return sourceaddr_.Get();
}
inline void SLBfdv6Key::_internal_set_sourceaddr(const std::string& value) {
  
  sourceaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBfdv6Key::_internal_mutable_sourceaddr() {
  
  return sourceaddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBfdv6Key::release_sourceaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Key.SourceAddr)
  return sourceaddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBfdv6Key::set_allocated_sourceaddr(std::string* sourceaddr) {
  if (sourceaddr != nullptr) {
    
  } else {
    
  }
  sourceaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceaddr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.SourceAddr)
}

// -------------------------------------------------------------------

// SLBfdv6SessionCfg

// .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6SessionCfg::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv6SessionCfg::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv6SessionCfg::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionCfg::_internal_key() const {
  const ::service_layer::SLBfdv6Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv6Key&>(
      ::service_layer::_SLBfdv6Key_default_instance_);
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionCfg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfg.Key)
  return _internal_key();
}
inline void SLBfdv6SessionCfg::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv6Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionCfg.Key)
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfg::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfg::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionCfg.Key)
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfg::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv6Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfg::mutable_key() {
  ::service_layer::SLBfdv6Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfg.Key)
  return _msg;
}
inline void SLBfdv6SessionCfg::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv6Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfg.Key)
}

// .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv6SessionCfg::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SLBfdv6SessionCfg::has_config() const {
  return _internal_has_config();
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv6SessionCfg::_internal_config() const {
  const ::service_layer::SLBfdConfigCommon* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdConfigCommon&>(
      ::service_layer::_SLBfdConfigCommon_default_instance_);
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv6SessionCfg::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfg.Config)
  return _internal_config();
}
inline void SLBfdv6SessionCfg::unsafe_arena_set_allocated_config(
    ::service_layer::SLBfdConfigCommon* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionCfg.Config)
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfg::release_config() {
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfg::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionCfg.Config)
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfg::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdConfigCommon>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfg::mutable_config() {
  ::service_layer::SLBfdConfigCommon* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfg.Config)
  return _msg;
}
inline void SLBfdv6SessionCfg::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfg.Config)
}

// -------------------------------------------------------------------

// SLBfdv6Msg

// .service_layer.SLObjectOp Oper = 1;
inline void SLBfdv6Msg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLBfdv6Msg::_internal_oper() const {
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline ::service_layer::SLObjectOp SLBfdv6Msg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Msg.Oper)
  return _internal_oper();
}
inline void SLBfdv6Msg::_internal_set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
}
inline void SLBfdv6Msg::set_oper(::service_layer::SLObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Msg.Oper)
}

// repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
inline int SLBfdv6Msg::_internal_sessions_size() const {
  return sessions_.size();
}
inline int SLBfdv6Msg::sessions_size() const {
  return _internal_sessions_size();
}
inline void SLBfdv6Msg::clear_sessions() {
  sessions_.Clear();
}
inline ::service_layer::SLBfdv6SessionCfg* SLBfdv6Msg::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Msg.Sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >*
SLBfdv6Msg::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv6Msg.Sessions)
  return &sessions_;
}
inline const ::service_layer::SLBfdv6SessionCfg& SLBfdv6Msg::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::service_layer::SLBfdv6SessionCfg& SLBfdv6Msg::sessions(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Msg.Sessions)
  return _internal_sessions(index);
}
inline ::service_layer::SLBfdv6SessionCfg* SLBfdv6Msg::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::service_layer::SLBfdv6SessionCfg* SLBfdv6Msg::add_sessions() {
  ::service_layer::SLBfdv6SessionCfg* _add = _internal_add_sessions();
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv6Msg.Sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >&
SLBfdv6Msg::sessions() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv6Msg.Sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// SLBfdv6Res

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdv6Res::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdv6Res::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdv6Res::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv6Res::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Res.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdv6Res::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6Res.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdv6Res::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Res::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Res.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Res::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Res::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Res.ErrStatus)
  return _msg;
}
inline void SLBfdv6Res::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Res.ErrStatus)
}

// .service_layer.SLBfdv6Key Key = 2;
inline bool SLBfdv6Res::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv6Res::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv6Res::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6Res::_internal_key() const {
  const ::service_layer::SLBfdv6Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv6Key&>(
      ::service_layer::_SLBfdv6Key_default_instance_);
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6Res::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Res.Key)
  return _internal_key();
}
inline void SLBfdv6Res::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv6Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6Res.Key)
}
inline ::service_layer::SLBfdv6Key* SLBfdv6Res::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6Res::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Res.Key)
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6Res::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv6Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6Res::mutable_key() {
  ::service_layer::SLBfdv6Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Res.Key)
  return _msg;
}
inline void SLBfdv6Res::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv6Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Res.Key)
}

// -------------------------------------------------------------------

// SLBfdv6MsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLBfdv6MsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLBfdv6MsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLBfdv6MsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv6MsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6MsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLBfdv6MsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6MsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLBfdv6MsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv6MsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6MsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv6MsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6MsgRsp::mutable_statussummary() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_statussummary();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6MsgRsp.StatusSummary)
  return _msg;
}
inline void SLBfdv6MsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary));
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6MsgRsp.StatusSummary)
}

// repeated .service_layer.SLBfdv6Res Results = 2;
inline int SLBfdv6MsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLBfdv6MsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLBfdv6MsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLBfdv6Res* SLBfdv6MsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6MsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6Res >*
SLBfdv6MsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv6MsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLBfdv6Res& SLBfdv6MsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLBfdv6Res& SLBfdv6MsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6MsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLBfdv6Res* SLBfdv6MsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLBfdv6Res* SLBfdv6MsgRsp::add_results() {
  ::service_layer::SLBfdv6Res* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv6MsgRsp.Results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6Res >&
SLBfdv6MsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv6MsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLBfdv6GetMsg

// .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6GetMsg::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv6GetMsg::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv6GetMsg::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6GetMsg::_internal_key() const {
  const ::service_layer::SLBfdv6Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv6Key&>(
      ::service_layer::_SLBfdv6Key_default_instance_);
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6GetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.Key)
  return _internal_key();
}
inline void SLBfdv6GetMsg::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv6Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6GetMsg.Key)
}
inline ::service_layer::SLBfdv6Key* SLBfdv6GetMsg::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6GetMsg::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6GetMsg.Key)
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6GetMsg::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv6Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6GetMsg::mutable_key() {
  ::service_layer::SLBfdv6Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6GetMsg.Key)
  return _msg;
}
inline void SLBfdv6GetMsg::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv6Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6GetMsg.Key)
}

// uint64 SeqNum = 2;
inline void SLBfdv6GetMsg::clear_seqnum() {
  seqnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLBfdv6GetMsg::_internal_seqnum() const {
  return seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLBfdv6GetMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.SeqNum)
  return _internal_seqnum();
}
inline void SLBfdv6GetMsg::_internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seqnum_ = value;
}
inline void SLBfdv6GetMsg::set_seqnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsg.SeqNum)
}

// uint32 EntriesCount = 3;
inline void SLBfdv6GetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv6GetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLBfdv6GetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLBfdv6GetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLBfdv6GetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsg.EntriesCount)
}

// bool GetNext = 4;
inline void SLBfdv6GetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLBfdv6GetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLBfdv6GetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.GetNext)
  return _internal_getnext();
}
inline void SLBfdv6GetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLBfdv6GetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLBfdv6SessionCfgState

// .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6SessionCfgState::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv6SessionCfgState::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv6SessionCfgState::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionCfgState::_internal_key() const {
  const ::service_layer::SLBfdv6Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv6Key&>(
      ::service_layer::_SLBfdv6Key_default_instance_);
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionCfgState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfgState.Key)
  return _internal_key();
}
inline void SLBfdv6SessionCfgState::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv6Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionCfgState.Key)
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfgState::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfgState::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionCfgState.Key)
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfgState::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv6Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfgState::mutable_key() {
  ::service_layer::SLBfdv6Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfgState.Key)
  return _msg;
}
inline void SLBfdv6SessionCfgState::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv6Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfgState.Key)
}

// .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv6SessionCfgState::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SLBfdv6SessionCfgState::has_config() const {
  return _internal_has_config();
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv6SessionCfgState::_internal_config() const {
  const ::service_layer::SLBfdConfigCommon* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdConfigCommon&>(
      ::service_layer::_SLBfdConfigCommon_default_instance_);
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv6SessionCfgState::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfgState.Config)
  return _internal_config();
}
inline void SLBfdv6SessionCfgState::unsafe_arena_set_allocated_config(
    ::service_layer::SLBfdConfigCommon* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionCfgState.Config)
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfgState::release_config() {
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfgState::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionCfgState.Config)
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfgState::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdConfigCommon>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfgState::mutable_config() {
  ::service_layer::SLBfdConfigCommon* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfgState.Config)
  return _msg;
}
inline void SLBfdv6SessionCfgState::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfgState.Config)
}

// .service_layer.SLBfdCommonState State = 3;
inline bool SLBfdv6SessionCfgState::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool SLBfdv6SessionCfgState::has_state() const {
  return _internal_has_state();
}
inline const ::service_layer::SLBfdCommonState& SLBfdv6SessionCfgState::_internal_state() const {
  const ::service_layer::SLBfdCommonState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdCommonState&>(
      ::service_layer::_SLBfdCommonState_default_instance_);
}
inline const ::service_layer::SLBfdCommonState& SLBfdv6SessionCfgState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfgState.State)
  return _internal_state();
}
inline void SLBfdv6SessionCfgState::unsafe_arena_set_allocated_state(
    ::service_layer::SLBfdCommonState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionCfgState.State)
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionCfgState::release_state() {
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionCfgState::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionCfgState.State)
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionCfgState::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdCommonState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionCfgState::mutable_state() {
  ::service_layer::SLBfdCommonState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfgState.State)
  return _msg;
}
inline void SLBfdv6SessionCfgState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfgState.State)
}

// -------------------------------------------------------------------

// SLBfdv6GetMsgRsp

// bool Eof = 1;
inline void SLBfdv6GetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLBfdv6GetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLBfdv6GetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLBfdv6GetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLBfdv6GetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv6GetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBfdv6GetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBfdv6GetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv6GetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBfdv6GetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdv6GetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv6GetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBfdv6GetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6GetMsgRsp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
  return _msg;
}
inline void SLBfdv6GetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
inline int SLBfdv6GetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLBfdv6GetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLBfdv6GetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLBfdv6SessionCfgState* SLBfdv6GetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6GetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >*
SLBfdv6GetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv6GetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLBfdv6SessionCfgState& SLBfdv6GetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLBfdv6SessionCfgState& SLBfdv6GetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLBfdv6SessionCfgState* SLBfdv6GetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLBfdv6SessionCfgState* SLBfdv6GetMsgRsp::add_entries() {
  ::service_layer::SLBfdv6SessionCfgState* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv6GetMsgRsp.Entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >&
SLBfdv6GetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv6GetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLBfdv6SessionState

// .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6SessionState::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLBfdv6SessionState::has_key() const {
  return _internal_has_key();
}
inline void SLBfdv6SessionState::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionState::_internal_key() const {
  const ::service_layer::SLBfdv6Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdv6Key&>(
      ::service_layer::_SLBfdv6Key_default_instance_);
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionState.Key)
  return _internal_key();
}
inline void SLBfdv6SessionState::unsafe_arena_set_allocated_key(
    ::service_layer::SLBfdv6Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionState.Key)
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionState::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionState::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionState.Key)
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionState::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdv6Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionState::mutable_key() {
  ::service_layer::SLBfdv6Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionState.Key)
  return _msg;
}
inline void SLBfdv6SessionState::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBfdv6Key>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionState.Key)
}

// .service_layer.SLBfdCommonState State = 2;
inline bool SLBfdv6SessionState::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool SLBfdv6SessionState::has_state() const {
  return _internal_has_state();
}
inline const ::service_layer::SLBfdCommonState& SLBfdv6SessionState::_internal_state() const {
  const ::service_layer::SLBfdCommonState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBfdCommonState&>(
      ::service_layer::_SLBfdCommonState_default_instance_);
}
inline const ::service_layer::SLBfdCommonState& SLBfdv6SessionState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionState.State)
  return _internal_state();
}
inline void SLBfdv6SessionState::unsafe_arena_set_allocated_state(
    ::service_layer::SLBfdCommonState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6SessionState.State)
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionState::release_state() {
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionState::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6SessionState.State)
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionState::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBfdCommonState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionState::mutable_state() {
  ::service_layer::SLBfdCommonState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionState.State)
  return _msg;
}
inline void SLBfdv6SessionState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionState.State)
}

// -------------------------------------------------------------------

// SLBfdv6Notif

// .service_layer.SLBfdNotifType EventType = 1;
inline void SLBfdv6Notif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLBfdNotifType SLBfdv6Notif::_internal_eventtype() const {
  return static_cast< ::service_layer::SLBfdNotifType >(eventtype_);
}
inline ::service_layer::SLBfdNotifType SLBfdv6Notif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Notif.EventType)
  return _internal_eventtype();
}
inline void SLBfdv6Notif::_internal_set_eventtype(::service_layer::SLBfdNotifType value) {
  
  eventtype_ = value;
}
inline void SLBfdv6Notif::set_eventtype(::service_layer::SLBfdNotifType value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Notif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv6Notif::_internal_has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline bool SLBfdv6Notif::has_errstatus() const {
  return _internal_has_errstatus();
}
inline void SLBfdv6Notif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Notif::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
      ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLErrorStatus& SLBfdv6Notif::_internal_errstatus() const {
  return _internal_has_errstatus()
      ? *Event_.errstatus_
      : reinterpret_cast< ::service_layer::SLErrorStatus&>(::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBfdv6Notif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Notif.ErrStatus)
  return _internal_errstatus();
}
inline ::service_layer::SLErrorStatus* SLBfdv6Notif::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBfdv6Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBfdv6Notif::unsafe_arena_set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6Notif.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBfdv6Notif::_internal_mutable_errstatus() {
  if (!_internal_has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = CreateMaybeMessage< ::service_layer::SLErrorStatus >(GetArenaForAllocation());
  }
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Notif::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Notif.ErrStatus)
  return _msg;
}

// .service_layer.SLBfdv6SessionState Session = 3;
inline bool SLBfdv6Notif::_internal_has_session() const {
  return Event_case() == kSession;
}
inline bool SLBfdv6Notif::has_session() const {
  return _internal_has_session();
}
inline void SLBfdv6Notif::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void SLBfdv6Notif::clear_session() {
  if (_internal_has_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.session_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLBfdv6SessionState* SLBfdv6Notif::release_session() {
  // @@protoc_insertion_point(field_release:service_layer.SLBfdv6Notif.Session)
  if (_internal_has_session()) {
    clear_has_Event();
      ::service_layer::SLBfdv6SessionState* temp = Event_.session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBfdv6SessionState& SLBfdv6Notif::_internal_session() const {
  return _internal_has_session()
      ? *Event_.session_
      : reinterpret_cast< ::service_layer::SLBfdv6SessionState&>(::service_layer::_SLBfdv6SessionState_default_instance_);
}
inline const ::service_layer::SLBfdv6SessionState& SLBfdv6Notif::session() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Notif.Session)
  return _internal_session();
}
inline ::service_layer::SLBfdv6SessionState* SLBfdv6Notif::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBfdv6Notif.Session)
  if (_internal_has_session()) {
    clear_has_Event();
    ::service_layer::SLBfdv6SessionState* temp = Event_.session_;
    Event_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBfdv6Notif::unsafe_arena_set_allocated_session(::service_layer::SLBfdv6SessionState* session) {
  clear_Event();
  if (session) {
    set_has_session();
    Event_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBfdv6Notif.Session)
}
inline ::service_layer::SLBfdv6SessionState* SLBfdv6Notif::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_Event();
    set_has_session();
    Event_.session_ = CreateMaybeMessage< ::service_layer::SLBfdv6SessionState >(GetArenaForAllocation());
  }
  return Event_.session_;
}
inline ::service_layer::SLBfdv6SessionState* SLBfdv6Notif::mutable_session() {
  ::service_layer::SLBfdv6SessionState* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Notif.Session)
  return _msg;
}

inline bool SLBfdv6Notif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLBfdv6Notif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLBfdv6Notif::EventCase SLBfdv6Notif::Event_case() const {
  return SLBfdv6Notif::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fbfd_5fipv6_2eproto
