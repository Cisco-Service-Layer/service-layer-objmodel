// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bfd_ipv6.proto

#ifndef PROTOBUF_sl_5fbfd_5fipv6_2eproto__INCLUDED
#define PROTOBUF_sl_5fbfd_5fipv6_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_bfd_common.pb.h"
// @@protoc_insertion_point(includes)

namespace service_layer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

class SLBfdv6GetMsg;
class SLBfdv6GetMsgRsp;
class SLBfdv6Key;
class SLBfdv6Msg;
class SLBfdv6MsgRsp;
class SLBfdv6Notif;
class SLBfdv6Res;
class SLBfdv6SessionCfg;
class SLBfdv6SessionCfgState;
class SLBfdv6SessionState;

// ===================================================================

class SLBfdv6Key : public ::google::protobuf::Message {
 public:
  SLBfdv6Key();
  virtual ~SLBfdv6Key();

  SLBfdv6Key(const SLBfdv6Key& from);

  inline SLBfdv6Key& operator=(const SLBfdv6Key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6Key& default_instance();

  void Swap(SLBfdv6Key* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6Key* New() const { return New(NULL); }

  SLBfdv6Key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6Key& from);
  void MergeFrom(const SLBfdv6Key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLBfdType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::service_layer::SLBfdType type() const;
  void set_type(::service_layer::SLBfdType value);

  // optional string VrfName = 2;
  void clear_vrfname();
  static const int kVrfNameFieldNumber = 2;
  const ::std::string& vrfname() const;
  void set_vrfname(const ::std::string& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  ::std::string* mutable_vrfname();
  ::std::string* release_vrfname();
  void set_allocated_vrfname(::std::string* vrfname);

  // optional bytes NbrAddr = 3;
  void clear_nbraddr();
  static const int kNbrAddrFieldNumber = 3;
  const ::std::string& nbraddr() const;
  void set_nbraddr(const ::std::string& value);
  void set_nbraddr(const char* value);
  void set_nbraddr(const void* value, size_t size);
  ::std::string* mutable_nbraddr();
  ::std::string* release_nbraddr();
  void set_allocated_nbraddr(::std::string* nbraddr);

  // optional .service_layer.SLInterface Interface = 4;
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 4;
  const ::service_layer::SLInterface& interface() const;
  ::service_layer::SLInterface* mutable_interface();
  ::service_layer::SLInterface* release_interface();
  void set_allocated_interface(::service_layer::SLInterface* interface);

  // optional bytes SourceAddr = 5;
  void clear_sourceaddr();
  static const int kSourceAddrFieldNumber = 5;
  const ::std::string& sourceaddr() const;
  void set_sourceaddr(const ::std::string& value);
  void set_sourceaddr(const char* value);
  void set_sourceaddr(const void* value, size_t size);
  ::std::string* mutable_sourceaddr();
  ::std::string* release_sourceaddr();
  void set_allocated_sourceaddr(::std::string* sourceaddr);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr vrfname_;
  ::google::protobuf::internal::ArenaStringPtr nbraddr_;
  ::service_layer::SLInterface* interface_;
  ::google::protobuf::internal::ArenaStringPtr sourceaddr_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6Key* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6SessionCfg : public ::google::protobuf::Message {
 public:
  SLBfdv6SessionCfg();
  virtual ~SLBfdv6SessionCfg();

  SLBfdv6SessionCfg(const SLBfdv6SessionCfg& from);

  inline SLBfdv6SessionCfg& operator=(const SLBfdv6SessionCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6SessionCfg& default_instance();

  void Swap(SLBfdv6SessionCfg* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6SessionCfg* New() const { return New(NULL); }

  SLBfdv6SessionCfg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6SessionCfg& from);
  void MergeFrom(const SLBfdv6SessionCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6SessionCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv6Key& key() const;
  ::service_layer::SLBfdv6Key* mutable_key();
  ::service_layer::SLBfdv6Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);

  // optional .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::service_layer::SLBfdConfigCommon& config() const;
  ::service_layer::SLBfdConfigCommon* mutable_config();
  ::service_layer::SLBfdConfigCommon* release_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6SessionCfg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLBfdv6Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6SessionCfg* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6Msg : public ::google::protobuf::Message {
 public:
  SLBfdv6Msg();
  virtual ~SLBfdv6Msg();

  SLBfdv6Msg(const SLBfdv6Msg& from);

  inline SLBfdv6Msg& operator=(const SLBfdv6Msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6Msg& default_instance();

  void Swap(SLBfdv6Msg* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6Msg* New() const { return New(NULL); }

  SLBfdv6Msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6Msg& from);
  void MergeFrom(const SLBfdv6Msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);

  // repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  const ::service_layer::SLBfdv6SessionCfg& sessions(int index) const;
  ::service_layer::SLBfdv6SessionCfg* mutable_sessions(int index);
  ::service_layer::SLBfdv6SessionCfg* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg > sessions_;
  int oper_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6Msg* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6Res : public ::google::protobuf::Message {
 public:
  SLBfdv6Res();
  virtual ~SLBfdv6Res();

  SLBfdv6Res(const SLBfdv6Res& from);

  inline SLBfdv6Res& operator=(const SLBfdv6Res& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6Res& default_instance();

  void Swap(SLBfdv6Res* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6Res* New() const { return New(NULL); }

  SLBfdv6Res* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6Res& from);
  void MergeFrom(const SLBfdv6Res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6Res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // optional .service_layer.SLBfdv6Key Key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::service_layer::SLBfdv6Key& key() const;
  ::service_layer::SLBfdv6Key* mutable_key();
  ::service_layer::SLBfdv6Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLBfdv6Key* key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6Res* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6MsgRsp : public ::google::protobuf::Message {
 public:
  SLBfdv6MsgRsp();
  virtual ~SLBfdv6MsgRsp();

  SLBfdv6MsgRsp(const SLBfdv6MsgRsp& from);

  inline SLBfdv6MsgRsp& operator=(const SLBfdv6MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6MsgRsp& default_instance();

  void Swap(SLBfdv6MsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6MsgRsp* New() const { return New(NULL); }

  SLBfdv6MsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6MsgRsp& from);
  void MergeFrom(const SLBfdv6MsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6MsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  void clear_statussummary();
  static const int kStatusSummaryFieldNumber = 1;
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* mutable_statussummary();
  ::service_layer::SLErrorStatus* release_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);

  // repeated .service_layer.SLBfdv6Res Results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::service_layer::SLBfdv6Res& results(int index) const;
  ::service_layer::SLBfdv6Res* mutable_results(int index);
  ::service_layer::SLBfdv6Res* add_results();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6Res >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6Res >&
      results() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6MsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* statussummary_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6Res > results_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6MsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6GetMsg : public ::google::protobuf::Message {
 public:
  SLBfdv6GetMsg();
  virtual ~SLBfdv6GetMsg();

  SLBfdv6GetMsg(const SLBfdv6GetMsg& from);

  inline SLBfdv6GetMsg& operator=(const SLBfdv6GetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6GetMsg& default_instance();

  void Swap(SLBfdv6GetMsg* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6GetMsg* New() const { return New(NULL); }

  SLBfdv6GetMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6GetMsg& from);
  void MergeFrom(const SLBfdv6GetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6GetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv6Key& key() const;
  ::service_layer::SLBfdv6Key* mutable_key();
  ::service_layer::SLBfdv6Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);

  // optional uint64 SeqNum = 2;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 2;
  ::google::protobuf::uint64 seqnum() const;
  void set_seqnum(::google::protobuf::uint64 value);

  // optional uint32 EntriesCount = 3;
  void clear_entriescount();
  static const int kEntriesCountFieldNumber = 3;
  ::google::protobuf::uint32 entriescount() const;
  void set_entriescount(::google::protobuf::uint32 value);

  // optional bool GetNext = 4;
  void clear_getnext();
  static const int kGetNextFieldNumber = 4;
  bool getnext() const;
  void set_getnext(bool value);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6GetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLBfdv6Key* key_;
  ::google::protobuf::uint64 seqnum_;
  ::google::protobuf::uint32 entriescount_;
  bool getnext_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6GetMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6SessionCfgState : public ::google::protobuf::Message {
 public:
  SLBfdv6SessionCfgState();
  virtual ~SLBfdv6SessionCfgState();

  SLBfdv6SessionCfgState(const SLBfdv6SessionCfgState& from);

  inline SLBfdv6SessionCfgState& operator=(const SLBfdv6SessionCfgState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6SessionCfgState& default_instance();

  void Swap(SLBfdv6SessionCfgState* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6SessionCfgState* New() const { return New(NULL); }

  SLBfdv6SessionCfgState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6SessionCfgState& from);
  void MergeFrom(const SLBfdv6SessionCfgState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6SessionCfgState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv6Key& key() const;
  ::service_layer::SLBfdv6Key* mutable_key();
  ::service_layer::SLBfdv6Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);

  // optional .service_layer.SLBfdConfigCommon Config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::service_layer::SLBfdConfigCommon& config() const;
  ::service_layer::SLBfdConfigCommon* mutable_config();
  ::service_layer::SLBfdConfigCommon* release_config();
  void set_allocated_config(::service_layer::SLBfdConfigCommon* config);

  // optional .service_layer.SLBfdCommonState State = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::service_layer::SLBfdCommonState& state() const;
  ::service_layer::SLBfdCommonState* mutable_state();
  ::service_layer::SLBfdCommonState* release_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6SessionCfgState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLBfdv6Key* key_;
  ::service_layer::SLBfdConfigCommon* config_;
  ::service_layer::SLBfdCommonState* state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6SessionCfgState* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6GetMsgRsp : public ::google::protobuf::Message {
 public:
  SLBfdv6GetMsgRsp();
  virtual ~SLBfdv6GetMsgRsp();

  SLBfdv6GetMsgRsp(const SLBfdv6GetMsgRsp& from);

  inline SLBfdv6GetMsgRsp& operator=(const SLBfdv6GetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6GetMsgRsp& default_instance();

  void Swap(SLBfdv6GetMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6GetMsgRsp* New() const { return New(NULL); }

  SLBfdv6GetMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6GetMsgRsp& from);
  void MergeFrom(const SLBfdv6GetMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6GetMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Eof = 1;
  void clear_eof();
  static const int kEofFieldNumber = 1;
  bool eof() const;
  void set_eof(bool value);

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 3;
  const ::service_layer::SLBfdv6SessionCfgState& entries(int index) const;
  ::service_layer::SLBfdv6SessionCfgState* mutable_entries(int index);
  ::service_layer::SLBfdv6SessionCfgState* add_entries();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >&
      entries() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6GetMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState > entries_;
  bool eof_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6GetMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6SessionState : public ::google::protobuf::Message {
 public:
  SLBfdv6SessionState();
  virtual ~SLBfdv6SessionState();

  SLBfdv6SessionState(const SLBfdv6SessionState& from);

  inline SLBfdv6SessionState& operator=(const SLBfdv6SessionState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6SessionState& default_instance();

  void Swap(SLBfdv6SessionState* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6SessionState* New() const { return New(NULL); }

  SLBfdv6SessionState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6SessionState& from);
  void MergeFrom(const SLBfdv6SessionState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6SessionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLBfdv6Key Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLBfdv6Key& key() const;
  ::service_layer::SLBfdv6Key* mutable_key();
  ::service_layer::SLBfdv6Key* release_key();
  void set_allocated_key(::service_layer::SLBfdv6Key* key);

  // optional .service_layer.SLBfdCommonState State = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::service_layer::SLBfdCommonState& state() const;
  ::service_layer::SLBfdCommonState* mutable_state();
  ::service_layer::SLBfdCommonState* release_state();
  void set_allocated_state(::service_layer::SLBfdCommonState* state);

  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6SessionState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLBfdv6Key* key_;
  ::service_layer::SLBfdCommonState* state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6SessionState* default_instance_;
};
// -------------------------------------------------------------------

class SLBfdv6Notif : public ::google::protobuf::Message {
 public:
  SLBfdv6Notif();
  virtual ~SLBfdv6Notif();

  SLBfdv6Notif(const SLBfdv6Notif& from);

  inline SLBfdv6Notif& operator=(const SLBfdv6Notif& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLBfdv6Notif& default_instance();

  enum EventCase {
    kErrStatus = 2,
    kSession = 3,
    EVENT_NOT_SET = 0,
  };

  void Swap(SLBfdv6Notif* other);

  // implements Message ----------------------------------------------

  inline SLBfdv6Notif* New() const { return New(NULL); }

  SLBfdv6Notif* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLBfdv6Notif& from);
  void MergeFrom(const SLBfdv6Notif& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLBfdv6Notif* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLBfdNotifType EventType = 1;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  ::service_layer::SLBfdNotifType eventtype() const;
  void set_eventtype(::service_layer::SLBfdNotifType value);

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // optional .service_layer.SLBfdv6SessionState Session = 3;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 3;
  const ::service_layer::SLBfdv6SessionState& session() const;
  ::service_layer::SLBfdv6SessionState* mutable_session();
  ::service_layer::SLBfdv6SessionState* release_session();
  void set_allocated_session(::service_layer::SLBfdv6SessionState* session);

  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBfdv6Notif)
 private:
  inline void set_has_errstatus();
  inline void set_has_session();

  inline bool has_Event() const;
  void clear_Event();
  inline void clear_has_Event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int eventtype_;
  union EventUnion {
    EventUnion() {}
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLBfdv6SessionState* session_;
  } Event_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_AssignDesc_sl_5fbfd_5fipv6_2eproto();
  friend void protobuf_ShutdownFile_sl_5fbfd_5fipv6_2eproto();

  void InitAsDefaultInstance();
  static SLBfdv6Notif* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SLBfdv6Key

// optional .service_layer.SLBfdType Type = 1;
inline void SLBfdv6Key::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLBfdType SLBfdv6Key::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.Type)
  return static_cast< ::service_layer::SLBfdType >(type_);
}
inline void SLBfdv6Key::set_type(::service_layer::SLBfdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.Type)
}

// optional string VrfName = 2;
inline void SLBfdv6Key::clear_vrfname() {
  vrfname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SLBfdv6Key::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.VrfName)
  return vrfname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv6Key::set_vrfname(const ::std::string& value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.VrfName)
}
inline void SLBfdv6Key::set_vrfname(const char* value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLBfdv6Key.VrfName)
}
inline void SLBfdv6Key::set_vrfname(const char* value, size_t size) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLBfdv6Key.VrfName)
}
inline ::std::string* SLBfdv6Key::mutable_vrfname() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.VrfName)
  return vrfname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SLBfdv6Key::release_vrfname() {
  
  return vrfname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv6Key::set_allocated_vrfname(::std::string* vrfname) {
  if (vrfname != NULL) {
    
  } else {
    
  }
  vrfname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrfname);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.VrfName)
}

// optional bytes NbrAddr = 3;
inline void SLBfdv6Key::clear_nbraddr() {
  nbraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SLBfdv6Key::nbraddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.NbrAddr)
  return nbraddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv6Key::set_nbraddr(const ::std::string& value) {
  
  nbraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.NbrAddr)
}
inline void SLBfdv6Key::set_nbraddr(const char* value) {
  
  nbraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLBfdv6Key.NbrAddr)
}
inline void SLBfdv6Key::set_nbraddr(const void* value, size_t size) {
  
  nbraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLBfdv6Key.NbrAddr)
}
inline ::std::string* SLBfdv6Key::mutable_nbraddr() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.NbrAddr)
  return nbraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SLBfdv6Key::release_nbraddr() {
  
  return nbraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv6Key::set_allocated_nbraddr(::std::string* nbraddr) {
  if (nbraddr != NULL) {
    
  } else {
    
  }
  nbraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nbraddr);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.NbrAddr)
}

// optional .service_layer.SLInterface Interface = 4;
inline bool SLBfdv6Key::has_interface() const {
  return !_is_default_instance_ && interface_ != NULL;
}
inline void SLBfdv6Key::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) delete interface_;
  interface_ = NULL;
}
inline const ::service_layer::SLInterface& SLBfdv6Key::interface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.Interface)
  return interface_ != NULL ? *interface_ : *default_instance_->interface_;
}
inline ::service_layer::SLInterface* SLBfdv6Key::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.Interface)
  return interface_;
}
inline ::service_layer::SLInterface* SLBfdv6Key::release_interface() {
  
  ::service_layer::SLInterface* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline void SLBfdv6Key::set_allocated_interface(::service_layer::SLInterface* interface) {
  delete interface_;
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.Interface)
}

// optional bytes SourceAddr = 5;
inline void SLBfdv6Key::clear_sourceaddr() {
  sourceaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SLBfdv6Key::sourceaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Key.SourceAddr)
  return sourceaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv6Key::set_sourceaddr(const ::std::string& value) {
  
  sourceaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Key.SourceAddr)
}
inline void SLBfdv6Key::set_sourceaddr(const char* value) {
  
  sourceaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLBfdv6Key.SourceAddr)
}
inline void SLBfdv6Key::set_sourceaddr(const void* value, size_t size) {
  
  sourceaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLBfdv6Key.SourceAddr)
}
inline ::std::string* SLBfdv6Key::mutable_sourceaddr() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Key.SourceAddr)
  return sourceaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SLBfdv6Key::release_sourceaddr() {
  
  return sourceaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLBfdv6Key::set_allocated_sourceaddr(::std::string* sourceaddr) {
  if (sourceaddr != NULL) {
    
  } else {
    
  }
  sourceaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceaddr);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Key.SourceAddr)
}

// -------------------------------------------------------------------

// SLBfdv6SessionCfg

// optional .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6SessionCfg::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLBfdv6SessionCfg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionCfg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfg.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv6Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfg.Key)
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfg::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv6SessionCfg::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfg.Key)
}

// optional .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv6SessionCfg::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void SLBfdv6SessionCfg::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv6SessionCfg::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfg.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfg::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::service_layer::SLBfdConfigCommon;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfg.Config)
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfg::release_config() {
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = NULL;
  return temp;
}
inline void SLBfdv6SessionCfg::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfg.Config)
}

// -------------------------------------------------------------------

// SLBfdv6Msg

// optional .service_layer.SLObjectOp Oper = 1;
inline void SLBfdv6Msg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLBfdv6Msg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Msg.Oper)
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline void SLBfdv6Msg::set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Msg.Oper)
}

// repeated .service_layer.SLBfdv6SessionCfg Sessions = 2;
inline int SLBfdv6Msg::sessions_size() const {
  return sessions_.size();
}
inline void SLBfdv6Msg::clear_sessions() {
  sessions_.Clear();
}
inline const ::service_layer::SLBfdv6SessionCfg& SLBfdv6Msg::sessions(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Msg.Sessions)
  return sessions_.Get(index);
}
inline ::service_layer::SLBfdv6SessionCfg* SLBfdv6Msg::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Msg.Sessions)
  return sessions_.Mutable(index);
}
inline ::service_layer::SLBfdv6SessionCfg* SLBfdv6Msg::add_sessions() {
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv6Msg.Sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >*
SLBfdv6Msg::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv6Msg.Sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfg >&
SLBfdv6Msg::sessions() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv6Msg.Sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// SLBfdv6Res

// optional .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBfdv6Res::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLBfdv6Res::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLBfdv6Res::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Res.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Res::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Res.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Res::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLBfdv6Res::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Res.ErrStatus)
}

// optional .service_layer.SLBfdv6Key Key = 2;
inline bool SLBfdv6Res::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLBfdv6Res::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6Res::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Res.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6Res::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv6Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Res.Key)
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6Res::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv6Res::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Res.Key)
}

// -------------------------------------------------------------------

// SLBfdv6MsgRsp

// optional .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLBfdv6MsgRsp::has_statussummary() const {
  return !_is_default_instance_ && statussummary_ != NULL;
}
inline void SLBfdv6MsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLBfdv6MsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6MsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_ : *default_instance_->statussummary_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6MsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6MsgRsp.StatusSummary)
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6MsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
inline void SLBfdv6MsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6MsgRsp.StatusSummary)
}

// repeated .service_layer.SLBfdv6Res Results = 2;
inline int SLBfdv6MsgRsp::results_size() const {
  return results_.size();
}
inline void SLBfdv6MsgRsp::clear_results() {
  results_.Clear();
}
inline const ::service_layer::SLBfdv6Res& SLBfdv6MsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6MsgRsp.Results)
  return results_.Get(index);
}
inline ::service_layer::SLBfdv6Res* SLBfdv6MsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6MsgRsp.Results)
  return results_.Mutable(index);
}
inline ::service_layer::SLBfdv6Res* SLBfdv6MsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv6MsgRsp.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6Res >*
SLBfdv6MsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv6MsgRsp.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6Res >&
SLBfdv6MsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv6MsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLBfdv6GetMsg

// optional .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6GetMsg::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLBfdv6GetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6GetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6GetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv6Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6GetMsg.Key)
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6GetMsg::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv6GetMsg::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6GetMsg.Key)
}

// optional uint64 SeqNum = 2;
inline void SLBfdv6GetMsg::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SLBfdv6GetMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.SeqNum)
  return seqnum_;
}
inline void SLBfdv6GetMsg::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsg.SeqNum)
}

// optional uint32 EntriesCount = 3;
inline void SLBfdv6GetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::google::protobuf::uint32 SLBfdv6GetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.EntriesCount)
  return entriescount_;
}
inline void SLBfdv6GetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsg.EntriesCount)
}

// optional bool GetNext = 4;
inline void SLBfdv6GetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLBfdv6GetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsg.GetNext)
  return getnext_;
}
inline void SLBfdv6GetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLBfdv6SessionCfgState

// optional .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6SessionCfgState::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLBfdv6SessionCfgState::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionCfgState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfgState.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfgState::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv6Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfgState.Key)
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionCfgState::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv6SessionCfgState::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfgState.Key)
}

// optional .service_layer.SLBfdConfigCommon Config = 2;
inline bool SLBfdv6SessionCfgState::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void SLBfdv6SessionCfgState::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::service_layer::SLBfdConfigCommon& SLBfdv6SessionCfgState::config() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfgState.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfgState::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::service_layer::SLBfdConfigCommon;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfgState.Config)
  return config_;
}
inline ::service_layer::SLBfdConfigCommon* SLBfdv6SessionCfgState::release_config() {
  
  ::service_layer::SLBfdConfigCommon* temp = config_;
  config_ = NULL;
  return temp;
}
inline void SLBfdv6SessionCfgState::set_allocated_config(::service_layer::SLBfdConfigCommon* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfgState.Config)
}

// optional .service_layer.SLBfdCommonState State = 3;
inline bool SLBfdv6SessionCfgState::has_state() const {
  return !_is_default_instance_ && state_ != NULL;
}
inline void SLBfdv6SessionCfgState::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
inline const ::service_layer::SLBfdCommonState& SLBfdv6SessionCfgState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionCfgState.State)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionCfgState::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::service_layer::SLBfdCommonState;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionCfgState.State)
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionCfgState::release_state() {
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void SLBfdv6SessionCfgState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionCfgState.State)
}

// -------------------------------------------------------------------

// SLBfdv6GetMsgRsp

// optional bool Eof = 1;
inline void SLBfdv6GetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLBfdv6GetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsgRsp.Eof)
  return eof_;
}
inline void SLBfdv6GetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6GetMsgRsp.Eof)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv6GetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLBfdv6GetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLBfdv6GetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6GetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6GetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLBfdv6GetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6GetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLBfdv6SessionCfgState Entries = 3;
inline int SLBfdv6GetMsgRsp::entries_size() const {
  return entries_.size();
}
inline void SLBfdv6GetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline const ::service_layer::SLBfdv6SessionCfgState& SLBfdv6GetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6GetMsgRsp.Entries)
  return entries_.Get(index);
}
inline ::service_layer::SLBfdv6SessionCfgState* SLBfdv6GetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6GetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::service_layer::SLBfdv6SessionCfgState* SLBfdv6GetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLBfdv6GetMsgRsp.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >*
SLBfdv6GetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBfdv6GetMsgRsp.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLBfdv6SessionCfgState >&
SLBfdv6GetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBfdv6GetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLBfdv6SessionState

// optional .service_layer.SLBfdv6Key Key = 1;
inline bool SLBfdv6SessionState::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLBfdv6SessionState::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLBfdv6Key& SLBfdv6SessionState::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionState.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionState::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLBfdv6Key;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionState.Key)
  return key_;
}
inline ::service_layer::SLBfdv6Key* SLBfdv6SessionState::release_key() {
  
  ::service_layer::SLBfdv6Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLBfdv6SessionState::set_allocated_key(::service_layer::SLBfdv6Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionState.Key)
}

// optional .service_layer.SLBfdCommonState State = 2;
inline bool SLBfdv6SessionState::has_state() const {
  return !_is_default_instance_ && state_ != NULL;
}
inline void SLBfdv6SessionState::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
inline const ::service_layer::SLBfdCommonState& SLBfdv6SessionState::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6SessionState.State)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionState::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::service_layer::SLBfdCommonState;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6SessionState.State)
  return state_;
}
inline ::service_layer::SLBfdCommonState* SLBfdv6SessionState::release_state() {
  
  ::service_layer::SLBfdCommonState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void SLBfdv6SessionState::set_allocated_state(::service_layer::SLBfdCommonState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6SessionState.State)
}

// -------------------------------------------------------------------

// SLBfdv6Notif

// optional .service_layer.SLBfdNotifType EventType = 1;
inline void SLBfdv6Notif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLBfdNotifType SLBfdv6Notif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Notif.EventType)
  return static_cast< ::service_layer::SLBfdNotifType >(eventtype_);
}
inline void SLBfdv6Notif::set_eventtype(::service_layer::SLBfdNotifType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLBfdv6Notif.EventType)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBfdv6Notif::has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline void SLBfdv6Notif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline void SLBfdv6Notif::clear_errstatus() {
  if (has_errstatus()) {
    delete Event_.errstatus_;
    clear_has_Event();
  }
}
inline  const ::service_layer::SLErrorStatus& SLBfdv6Notif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Notif.ErrStatus)
  return has_errstatus()
      ? *Event_.errstatus_
      : ::service_layer::SLErrorStatus::default_instance();
}
inline ::service_layer::SLErrorStatus* SLBfdv6Notif::mutable_errstatus() {
  if (!has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Notif.ErrStatus)
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBfdv6Notif::release_errstatus() {
  if (has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SLBfdv6Notif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Notif.ErrStatus)
}

// optional .service_layer.SLBfdv6SessionState Session = 3;
inline bool SLBfdv6Notif::has_session() const {
  return Event_case() == kSession;
}
inline void SLBfdv6Notif::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void SLBfdv6Notif::clear_session() {
  if (has_session()) {
    delete Event_.session_;
    clear_has_Event();
  }
}
inline  const ::service_layer::SLBfdv6SessionState& SLBfdv6Notif::session() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBfdv6Notif.Session)
  return has_session()
      ? *Event_.session_
      : ::service_layer::SLBfdv6SessionState::default_instance();
}
inline ::service_layer::SLBfdv6SessionState* SLBfdv6Notif::mutable_session() {
  if (!has_session()) {
    clear_Event();
    set_has_session();
    Event_.session_ = new ::service_layer::SLBfdv6SessionState;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLBfdv6Notif.Session)
  return Event_.session_;
}
inline ::service_layer::SLBfdv6SessionState* SLBfdv6Notif::release_session() {
  if (has_session()) {
    clear_has_Event();
    ::service_layer::SLBfdv6SessionState* temp = Event_.session_;
    Event_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SLBfdv6Notif::set_allocated_session(::service_layer::SLBfdv6SessionState* session) {
  clear_Event();
  if (session) {
    set_has_session();
    Event_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBfdv6Notif.Session)
}

inline bool SLBfdv6Notif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLBfdv6Notif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLBfdv6Notif::EventCase SLBfdv6Notif::Event_case() const {
  return SLBfdv6Notif::EventCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sl_5fbfd_5fipv6_2eproto__INCLUDED
