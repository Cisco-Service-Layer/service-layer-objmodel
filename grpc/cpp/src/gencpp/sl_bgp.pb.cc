// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bgp.proto

#include "sl_bgp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLBgpApiStatus::SLBgpApiStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , operationid_(uint64_t{0u})
  , state_(0)
{}
struct SLBgpApiStatusDefaultTypeInternal {
  constexpr SLBgpApiStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiStatusDefaultTypeInternal() {}
  union {
    SLBgpApiStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiStatusDefaultTypeInternal _SLBgpApiStatus_default_instance_;
constexpr SLBgpAfiSafi::SLBgpAfiSafi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : afi_(0)

  , safi_(0)
{}
struct SLBgpAfiSafiDefaultTypeInternal {
  constexpr SLBgpAfiSafiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpAfiSafiDefaultTypeInternal() {}
  union {
    SLBgpAfiSafi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpAfiSafiDefaultTypeInternal _SLBgpAfiSafi_default_instance_;
constexpr SLBgpFrrInfo::SLBgpFrrInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectstatus_(nullptr)
  , _oneof_case_{}{}
struct SLBgpFrrInfoDefaultTypeInternal {
  constexpr SLBgpFrrInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpFrrInfoDefaultTypeInternal() {}
  union {
    SLBgpFrrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpFrrInfoDefaultTypeInternal _SLBgpFrrInfo_default_instance_;
constexpr SLBgpBwId::SLBgpBwId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectstatus_(nullptr)
  , linkbw_(uint64_t{0u})
  , bwid_(0u)
  , bwunit_(0)

  , asn_(0u){}
struct SLBgpBwIdDefaultTypeInternal {
  constexpr SLBgpBwIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpBwIdDefaultTypeInternal() {}
  union {
    SLBgpBwId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpBwIdDefaultTypeInternal _SLBgpBwId_default_instance_;
constexpr SLBgpNeighborSafiParam::SLBgpNeighborSafiParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outbwids_()
  , inbwids_()
  , perlinkmpathbkup_(nullptr){}
struct SLBgpNeighborSafiParamDefaultTypeInternal {
  constexpr SLBgpNeighborSafiParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpNeighborSafiParamDefaultTypeInternal() {}
  union {
    SLBgpNeighborSafiParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpNeighborSafiParamDefaultTypeInternal _SLBgpNeighborSafiParam_default_instance_;
constexpr SLBgpNeighborSafiMsg::SLBgpNeighborSafiMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : afisafi_(nullptr)
  , objectstatus_(nullptr)
  , _oneof_case_{}{}
struct SLBgpNeighborSafiMsgDefaultTypeInternal {
  constexpr SLBgpNeighborSafiMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpNeighborSafiMsgDefaultTypeInternal() {}
  union {
    SLBgpNeighborSafiMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpNeighborSafiMsgDefaultTypeInternal _SLBgpNeighborSafiMsg_default_instance_;
constexpr SLBgpNeighborSafiList::SLBgpNeighborSafiList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neighborsafis_(){}
struct SLBgpNeighborSafiListDefaultTypeInternal {
  constexpr SLBgpNeighborSafiListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpNeighborSafiListDefaultTypeInternal() {}
  union {
    SLBgpNeighborSafiList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpNeighborSafiListDefaultTypeInternal _SLBgpNeighborSafiList_default_instance_;
constexpr SLBgpNeighborKey::SLBgpNeighborKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(nullptr){}
struct SLBgpNeighborKeyDefaultTypeInternal {
  constexpr SLBgpNeighborKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpNeighborKeyDefaultTypeInternal() {}
  union {
    SLBgpNeighborKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpNeighborKeyDefaultTypeInternal _SLBgpNeighborKey_default_instance_;
constexpr SLBgpNeighborMsg::SLBgpNeighborMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neighborkey_(nullptr)
  , objectstatus_(nullptr)
  , _oneof_case_{}{}
struct SLBgpNeighborMsgDefaultTypeInternal {
  constexpr SLBgpNeighborMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpNeighborMsgDefaultTypeInternal() {}
  union {
    SLBgpNeighborMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpNeighborMsgDefaultTypeInternal _SLBgpNeighborMsg_default_instance_;
constexpr SLBgpApiObject::SLBgpApiObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objecttype_(0)

  , _oneof_case_{}{}
struct SLBgpApiObjectDefaultTypeInternal {
  constexpr SLBgpApiObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiObjectDefaultTypeInternal() {}
  union {
    SLBgpApiObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiObjectDefaultTypeInternal _SLBgpApiObject_default_instance_;
constexpr SLBgpApiObjectResp::SLBgpApiObjectResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgpapiobjects_()
  , bgpinstancename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statussummary_(nullptr){}
struct SLBgpApiObjectRespDefaultTypeInternal {
  constexpr SLBgpApiObjectRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiObjectRespDefaultTypeInternal() {}
  union {
    SLBgpApiObjectResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiObjectRespDefaultTypeInternal _SLBgpApiObjectResp_default_instance_;
constexpr SLBgpApiObjectReq::SLBgpApiObjectReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgpapiobjects_()
  , bgpinstancename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operationid_(uint64_t{0u})
  , oper_(0)
{}
struct SLBgpApiObjectReqDefaultTypeInternal {
  constexpr SLBgpApiObjectReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiObjectReqDefaultTypeInternal() {}
  union {
    SLBgpApiObjectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiObjectReqDefaultTypeInternal _SLBgpApiObjectReq_default_instance_;
constexpr SLBgpApiGetResp::SLBgpApiGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgpapiobjects_()
  , bgpinstancename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr)
  , eof_(false){}
struct SLBgpApiGetRespDefaultTypeInternal {
  constexpr SLBgpApiGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiGetRespDefaultTypeInternal() {}
  union {
    SLBgpApiGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiGetRespDefaultTypeInternal _SLBgpApiGetResp_default_instance_;
constexpr SLBgpApiGetReq::SLBgpApiGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgpinstancename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , objecttype_(0)

  , entriescount_(0u)
  , getnext_(false)
  , _oneof_case_{}{}
struct SLBgpApiGetReqDefaultTypeInternal {
  constexpr SLBgpApiGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiGetReqDefaultTypeInternal() {}
  union {
    SLBgpApiGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiGetReqDefaultTypeInternal _SLBgpApiGetReq_default_instance_;
constexpr SLBgpApiCapResp::SLBgpApiCapResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLBgpApiCapRespDefaultTypeInternal {
  constexpr SLBgpApiCapRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiCapRespDefaultTypeInternal() {}
  union {
    SLBgpApiCapResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiCapRespDefaultTypeInternal _SLBgpApiCapResp_default_instance_;
constexpr SLBgpApiCapReq::SLBgpApiCapReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLBgpApiCapReqDefaultTypeInternal {
  constexpr SLBgpApiCapReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiCapReqDefaultTypeInternal() {}
  union {
    SLBgpApiCapReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiCapReqDefaultTypeInternal _SLBgpApiCapReq_default_instance_;
constexpr SLBgpApiMsgRsp::SLBgpApiMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , correlator_(uint64_t{0u})
  , _oneof_case_{}{}
struct SLBgpApiMsgRspDefaultTypeInternal {
  constexpr SLBgpApiMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiMsgRspDefaultTypeInternal() {}
  union {
    SLBgpApiMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiMsgRspDefaultTypeInternal _SLBgpApiMsgRsp_default_instance_;
constexpr SLBgpApiMsg::SLBgpApiMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlator_(uint64_t{0u})
  , _oneof_case_{}{}
struct SLBgpApiMsgDefaultTypeInternal {
  constexpr SLBgpApiMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpApiMsgDefaultTypeInternal() {}
  union {
    SLBgpApiMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpApiMsgDefaultTypeInternal _SLBgpApiMsg_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fbgp_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fbgp_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fbgp_2eproto = nullptr;

const uint32_t TableStruct_sl_5fbgp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiStatus, status_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiStatus, state_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiStatus, operationid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpAfiSafi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpAfiSafi, afi_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpAfiSafi, safi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpFrrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpFrrInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpFrrInfo, objectstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpFrrInfo, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpBwId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpBwId, bwid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpBwId, linkbw_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpBwId, bwunit_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpBwId, asn_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpBwId, objectstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiParam, outbwids_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiParam, inbwids_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiParam, perlinkmpathbkup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiMsg, afisafi_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiMsg, objectstatus_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiMsg, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborSafiList, neighborsafis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborKey, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborKey, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborMsg, neighborkey_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborMsg, objectstatus_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpNeighborMsg, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObject, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObject, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObject, objecttype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObject, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectResp, bgpinstancename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectResp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectResp, bgpapiobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectReq, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectReq, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectReq, bgpinstancename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiObjectReq, bgpapiobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetResp, bgpinstancename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetResp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetResp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetResp, bgpapiobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, bgpinstancename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, objecttype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, getnext_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiGetReq, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiCapResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiCapReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiCapReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiCapReq, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsgRsp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsgRsp, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsgRsp, errstatus_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsgRsp, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsg, correlator_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpApiMsg, entry_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLBgpApiStatus)},
  { 9, -1, -1, sizeof(::service_layer::SLBgpAfiSafi)},
  { 17, -1, -1, sizeof(::service_layer::SLBgpFrrInfo)},
  { 26, -1, -1, sizeof(::service_layer::SLBgpBwId)},
  { 37, -1, -1, sizeof(::service_layer::SLBgpNeighborSafiParam)},
  { 46, -1, -1, sizeof(::service_layer::SLBgpNeighborSafiMsg)},
  { 56, -1, -1, sizeof(::service_layer::SLBgpNeighborSafiList)},
  { 63, -1, -1, sizeof(::service_layer::SLBgpNeighborKey)},
  { 71, -1, -1, sizeof(::service_layer::SLBgpNeighborMsg)},
  { 81, -1, -1, sizeof(::service_layer::SLBgpApiObject)},
  { 90, -1, -1, sizeof(::service_layer::SLBgpApiObjectResp)},
  { 99, -1, -1, sizeof(::service_layer::SLBgpApiObjectReq)},
  { 109, -1, -1, sizeof(::service_layer::SLBgpApiGetResp)},
  { 119, -1, -1, sizeof(::service_layer::SLBgpApiGetReq)},
  { 131, -1, -1, sizeof(::service_layer::SLBgpApiCapResp)},
  { 137, -1, -1, sizeof(::service_layer::SLBgpApiCapReq)},
  { 145, -1, -1, sizeof(::service_layer::SLBgpApiMsgRsp)},
  { 157, -1, -1, sizeof(::service_layer::SLBgpApiMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpAfiSafi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpFrrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpBwId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpNeighborSafiParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpNeighborSafiMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpNeighborSafiList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpNeighborKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpNeighborMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiObjectResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiObjectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiCapResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiCapReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpApiMsg_default_instance_),
};

const char descriptor_table_protodef_sl_5fbgp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sl_bgp.proto\022\rservice_layer\032\025sl_common"
  "_types.proto\"\204\001\n\016SLBgpApiStatus\022,\n\006Statu"
  "s\030\001 \001(\0132\034.service_layer.SLErrorStatus\022/\n"
  "\005State\030\002 \001(\0162 .service_layer.SLBgpApiSta"
  "teType\022\023\n\013OperationId\030\003 \001(\004\"\\\n\014SLBgpAfiS"
  "afi\022$\n\003Afi\030\001 \001(\0162\027.service_layer.SLBgpAf"
  "i\022&\n\004Safi\030\002 \001(\0162\030.service_layer.SLBgpSaf"
  "i\"x\n\014SLBgpFrrInfo\022*\n\004Addr\030\001 \001(\0132\032.servic"
  "e_layer.SLIpAddressH\000\0223\n\014ObjectStatus\030\002 "
  "\001(\0132\035.service_layer.SLBgpApiStatusB\007\n\005en"
  "try\"\227\001\n\tSLBgpBwId\022\014\n\004BwId\030\001 \001(\r\022\016\n\006LinkB"
  "w\030\002 \001(\004\022*\n\006BwUnit\030\003 \001(\0162\032.service_layer."
  "SLBgpBwUnit\022\013\n\003Asn\030\004 \001(\r\0223\n\014ObjectStatus"
  "\030\005 \001(\0132\035.service_layer.SLBgpApiStatus\"\246\001"
  "\n\026SLBgpNeighborSafiParam\022*\n\010OutBwIds\030\001 \003"
  "(\0132\030.service_layer.SLBgpBwId\022)\n\007InBwIds\030"
  "\002 \003(\0132\030.service_layer.SLBgpBwId\0225\n\020PerLi"
  "nkMpathBkup\030\003 \001(\0132\033.service_layer.SLBgpF"
  "rrInfo\"\276\001\n\024SLBgpNeighborSafiMsg\022,\n\007AfiSa"
  "fi\030\001 \001(\0132\033.service_layer.SLBgpAfiSafi\0223\n"
  "\014ObjectStatus\030\002 \001(\0132\035.service_layer.SLBg"
  "pApiStatus\022:\n\tSafiParam\030\003 \001(\0132%.service_"
  "layer.SLBgpNeighborSafiParamH\000B\007\n\005entry\""
  "S\n\025SLBgpNeighborSafiList\022:\n\rNeighborSafi"
  "s\030\001 \003(\0132#.service_layer.SLBgpNeighborSaf"
  "iMsg\"P\n\020SLBgpNeighborKey\022\017\n\007VrfName\030\001 \001("
  "\t\022+\n\007Address\030\002 \001(\0132\032.service_layer.SLIpA"
  "ddress\"\310\001\n\020SLBgpNeighborMsg\0224\n\013NeighborK"
  "ey\030\001 \001(\0132\037.service_layer.SLBgpNeighborKe"
  "y\0223\n\014ObjectStatus\030\002 \001(\0132\035.service_layer."
  "SLBgpApiStatus\022@\n\020NeighborSafiList\030\003 \001(\013"
  "2$.service_layer.SLBgpNeighborSafiListH\000"
  "B\007\n\005entry\"\205\001\n\016SLBgpApiObject\0225\n\nObjectTy"
  "pe\030\001 \001(\0162!.service_layer.SLBgpApiObjectT"
  "ype\0223\n\010Neighbor\030\002 \001(\0132\037.service_layer.SL"
  "BgpNeighborMsgH\000B\007\n\005entry\"\231\001\n\022SLBgpApiOb"
  "jectResp\022\027\n\017BgpInstanceName\030\001 \001(\t\0224\n\rSta"
  "tusSummary\030\002 \001(\0132\035.service_layer.SLBgpAp"
  "iStatus\0224\n\rBgpApiobjects\030\003 \003(\0132\035.service"
  "_layer.SLBgpApiObject\"\246\001\n\021SLBgpApiObject"
  "Req\022\023\n\013OperationId\030\001 \001(\004\022-\n\004Oper\030\002 \001(\0162\037"
  ".service_layer.SLBgpApiObjectOp\022\027\n\017BgpIn"
  "stanceName\030\003 \001(\t\0224\n\rBgpApiobjects\030\004 \003(\0132"
  "\035.service_layer.SLBgpApiObject\"\236\001\n\017SLBgp"
  "ApiGetResp\022\027\n\017BgpInstanceName\030\001 \001(\t\022\013\n\003E"
  "of\030\002 \001(\010\022/\n\tErrStatus\030\003 \001(\0132\034.service_la"
  "yer.SLErrorStatus\0224\n\rBgpApiobjects\030\004 \003(\013"
  "2\035.service_layer.SLBgpApiObject\"\305\001\n\016SLBg"
  "pApiGetReq\022\027\n\017BgpInstanceName\030\001 \001(\t\0225\n\nO"
  "bjectType\030\002 \001(\0162!.service_layer.SLBgpApi"
  "ObjectType\0223\n\010Neighbor\030\003 \001(\0132\037.service_l"
  "ayer.SLBgpNeighborKeyH\000\022\024\n\014EntriesCount\030"
  "\004 \001(\r\022\017\n\007GetNext\030\005 \001(\010B\007\n\005entry\"\021\n\017SLBgp"
  "ApiCapResp\"4\n\016SLBgpApiCapReq\022\031\n\017BgpInsta"
  "nceName\030\001 \001(\tH\000B\007\n\005entry\"\217\002\n\016SLBgpApiMsg"
  "Rsp\022\022\n\nCorrelator\030\001 \001(\004\022/\n\tErrStatus\030\002 \001"
  "(\0132\034.service_layer.SLErrorStatus\0227\n\rBgpA"
  "piCapResp\030\003 \001(\0132\036.service_layer.SLBgpApi"
  "CapRespH\000\0227\n\rBgpApiGetResp\030\004 \001(\0132\036.servi"
  "ce_layer.SLBgpApiGetRespH\000\022=\n\020BgpApiObje"
  "ctResp\030\005 \001(\0132!.service_layer.SLBgpApiObj"
  "ectRespH\000B\007\n\005entry\"\325\001\n\013SLBgpApiMsg\022\022\n\nCo"
  "rrelator\030\001 \001(\004\0225\n\014BgpApiCapReq\030\002 \001(\0132\035.s"
  "ervice_layer.SLBgpApiCapReqH\000\0225\n\014BgpApiG"
  "etReq\030\003 \001(\0132\035.service_layer.SLBgpApiGetR"
  "eqH\000\022;\n\017BgpApiobjectReq\030\004 \001(\0132 .service_"
  "layer.SLBgpApiObjectReqH\000B\007\n\005entry*_\n\013SL"
  "BgpBwUnit\022\030\n\024SL_BGP_UNIT_RESERVED\020\000\022\030\n\024S"
  "L_BGP_BYTES_PER_SEC\020\001\022\034\n\030SL_BGP_GIGA_BIT"
  "S_PER_SEC\020\002*M\n\010SLBgpAfi\022\027\n\023SL_BGP_AFI_RE"
  "SERVED\020\000\022\023\n\017SL_BGP_AFI_IPV4\020\001\022\023\n\017SL_BGP_"
  "AFI_IPV6\020\002*>\n\tSLBgpSafi\022\030\n\024SL_BGP_SAFI_R"
  "ESERVED\020\000\022\027\n\023SL_BGP_SAFI_UNICAST\020\001*^\n\022SL"
  "BgpApiObjectType\022#\n\037SL_BGP_API_RESERVED_"
  "OBJECT_TYPE\020\000\022#\n\037SL_BGP_API_NEIGHBOR_OBJ"
  "ECT_TYPE\020\001*V\n\020SLBgpApiObjectOp\022\026\n\022SL_BGP"
  "_OP_RESERVED\020\000\022\024\n\020SL_BGP_OP_UPDATE\020\001\022\024\n\020"
  "SL_BGP_OP_DELETE\020\002*e\n\021SLBgpApiStateType\022"
  "\032\n\026SL_BGP_API_FORWARD_REF\020\000\022\026\n\022SL_BGP_AP"
  "I_APPLIED\020\001\022\034\n\030SL_BGP_API_STATE_UNKNOWN\020"
  "\0022T\n\010SLBgpApi\022H\n\007SLBgpOp\022\032.service_layer"
  ".SLBgpApiMsg\032\035.service_layer.SLBgpApiMsg"
  "Rsp(\0010\001BQZOgithub.com/Cisco-service-laye"
  "r/service-layer-objmodel/grpc/protos;ser"
  "vice_layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fbgp_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fbgp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbgp_2eproto = {
  false, false, 3378, descriptor_table_protodef_sl_5fbgp_2eproto, "sl_bgp.proto", 
  &descriptor_table_sl_5fbgp_2eproto_once, descriptor_table_sl_5fbgp_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_sl_5fbgp_2eproto::offsets,
  file_level_metadata_sl_5fbgp_2eproto, file_level_enum_descriptors_sl_5fbgp_2eproto, file_level_service_descriptors_sl_5fbgp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fbgp_2eproto_getter() {
  return &descriptor_table_sl_5fbgp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fbgp_2eproto(&descriptor_table_sl_5fbgp_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpBwUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgp_2eproto);
  return file_level_enum_descriptors_sl_5fbgp_2eproto[0];
}
bool SLBgpBwUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpAfi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgp_2eproto);
  return file_level_enum_descriptors_sl_5fbgp_2eproto[1];
}
bool SLBgpAfi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpSafi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgp_2eproto);
  return file_level_enum_descriptors_sl_5fbgp_2eproto[2];
}
bool SLBgpSafi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpApiObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgp_2eproto);
  return file_level_enum_descriptors_sl_5fbgp_2eproto[3];
}
bool SLBgpApiObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpApiObjectOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgp_2eproto);
  return file_level_enum_descriptors_sl_5fbgp_2eproto[4];
}
bool SLBgpApiObjectOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpApiStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgp_2eproto);
  return file_level_enum_descriptors_sl_5fbgp_2eproto[5];
}
bool SLBgpApiStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLBgpApiStatus::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& status(const SLBgpApiStatus* msg);
};

const ::service_layer::SLErrorStatus&
SLBgpApiStatus::_Internal::status(const SLBgpApiStatus* msg) {
  return *msg->status_;
}
void SLBgpApiStatus::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SLBgpApiStatus::SLBgpApiStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiStatus)
}
SLBgpApiStatus::SLBgpApiStatus(const SLBgpApiStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::service_layer::SLErrorStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiStatus)
}

inline void SLBgpApiStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SLBgpApiStatus::~SLBgpApiStatus() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SLBgpApiStatus::ArenaDtor(void* object) {
  SLBgpApiStatus* _this = reinterpret_cast< SLBgpApiStatus* >(object);
  (void)_this;
}
void SLBgpApiStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiStateType State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::service_layer::SLBgpApiStateType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 OperationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus Status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .service_layer.SLBgpApiStateType State = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // uint64 OperationId = 3;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_operationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiStatus)
  return target;
}

size_t SLBgpApiStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus Status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint64 OperationId = 3;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  // .service_layer.SLBgpApiStateType State = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiStatus::GetClassData() const { return &_class_data_; }

void SLBgpApiStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiStatus *>(to)->MergeFrom(
      static_cast<const SLBgpApiStatus &>(from));
}


void SLBgpApiStatus::MergeFrom(const SLBgpApiStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::service_layer::SLErrorStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiStatus::CopyFrom(const SLBgpApiStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiStatus::IsInitialized() const {
  return true;
}

void SLBgpApiStatus::InternalSwap(SLBgpApiStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpApiStatus, state_)
      + sizeof(SLBgpApiStatus::state_)
      - PROTOBUF_FIELD_OFFSET(SLBgpApiStatus, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[0]);
}

// ===================================================================

class SLBgpAfiSafi::_Internal {
 public:
};

SLBgpAfiSafi::SLBgpAfiSafi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpAfiSafi)
}
SLBgpAfiSafi::SLBgpAfiSafi(const SLBgpAfiSafi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&safi_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpAfiSafi)
}

inline void SLBgpAfiSafi::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&safi_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
}

SLBgpAfiSafi::~SLBgpAfiSafi() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpAfiSafi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpAfiSafi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgpAfiSafi::ArenaDtor(void* object) {
  SLBgpAfiSafi* _this = reinterpret_cast< SLBgpAfiSafi* >(object);
  (void)_this;
}
void SLBgpAfiSafi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpAfiSafi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpAfiSafi::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpAfiSafi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpAfiSafi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpAfi Afi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::service_layer::SLBgpAfi>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpSafi Safi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::service_layer::SLBgpSafi>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpAfiSafi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpAfiSafi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpAfi Afi = 1;
  if (this->_internal_afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_afi(), target);
  }

  // .service_layer.SLBgpSafi Safi = 2;
  if (this->_internal_safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_safi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpAfiSafi)
  return target;
}

size_t SLBgpAfiSafi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpAfiSafi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgpAfi Afi = 1;
  if (this->_internal_afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .service_layer.SLBgpSafi Safi = 2;
  if (this->_internal_safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpAfiSafi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpAfiSafi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpAfiSafi::GetClassData() const { return &_class_data_; }

void SLBgpAfiSafi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpAfiSafi *>(to)->MergeFrom(
      static_cast<const SLBgpAfiSafi &>(from));
}


void SLBgpAfiSafi::MergeFrom(const SLBgpAfiSafi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpAfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from._internal_safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpAfiSafi::CopyFrom(const SLBgpAfiSafi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpAfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpAfiSafi::IsInitialized() const {
  return true;
}

void SLBgpAfiSafi::InternalSwap(SLBgpAfiSafi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpAfiSafi, safi_)
      + sizeof(SLBgpAfiSafi::safi_)
      - PROTOBUF_FIELD_OFFSET(SLBgpAfiSafi, afi_)>(
          reinterpret_cast<char*>(&afi_),
          reinterpret_cast<char*>(&other->afi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpAfiSafi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[1]);
}

// ===================================================================

class SLBgpFrrInfo::_Internal {
 public:
  static const ::service_layer::SLIpAddress& addr(const SLBgpFrrInfo* msg);
  static const ::service_layer::SLBgpApiStatus& objectstatus(const SLBgpFrrInfo* msg);
};

const ::service_layer::SLIpAddress&
SLBgpFrrInfo::_Internal::addr(const SLBgpFrrInfo* msg) {
  return *msg->entry_.addr_;
}
const ::service_layer::SLBgpApiStatus&
SLBgpFrrInfo::_Internal::objectstatus(const SLBgpFrrInfo* msg) {
  return *msg->objectstatus_;
}
void SLBgpFrrInfo::set_allocated_addr(::service_layer::SLIpAddress* addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addr));
    if (message_arena != submessage_arena) {
      addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    set_has_addr();
    entry_.addr_ = addr;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpFrrInfo.Addr)
}
void SLBgpFrrInfo::clear_addr() {
  if (_internal_has_addr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.addr_;
    }
    clear_has_entry();
  }
}
SLBgpFrrInfo::SLBgpFrrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpFrrInfo)
}
SLBgpFrrInfo::SLBgpFrrInfo(const SLBgpFrrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectstatus()) {
    objectstatus_ = new ::service_layer::SLBgpApiStatus(*from.objectstatus_);
  } else {
    objectstatus_ = nullptr;
  }
  clear_has_entry();
  switch (from.entry_case()) {
    case kAddr: {
      _internal_mutable_addr()->::service_layer::SLIpAddress::MergeFrom(from._internal_addr());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpFrrInfo)
}

inline void SLBgpFrrInfo::SharedCtor() {
objectstatus_ = nullptr;
clear_has_entry();
}

SLBgpFrrInfo::~SLBgpFrrInfo() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpFrrInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpFrrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete objectstatus_;
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpFrrInfo::ArenaDtor(void* object) {
  SLBgpFrrInfo* _this = reinterpret_cast< SLBgpFrrInfo* >(object);
  (void)_this;
}
void SLBgpFrrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpFrrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpFrrInfo::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpFrrInfo)
  switch (entry_case()) {
    case kAddr: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.addr_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpFrrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpFrrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpFrrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLIpAddress Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiStatus ObjectStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpFrrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpFrrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLIpAddress Addr = 1;
  if (_internal_has_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::addr(this), target, stream);
  }

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  if (this->_internal_has_objectstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::objectstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpFrrInfo)
  return target;
}

size_t SLBgpFrrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpFrrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  if (this->_internal_has_objectstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectstatus_);
  }

  switch (entry_case()) {
    // .service_layer.SLIpAddress Addr = 1;
    case kAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.addr_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpFrrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpFrrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpFrrInfo::GetClassData() const { return &_class_data_; }

void SLBgpFrrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpFrrInfo *>(to)->MergeFrom(
      static_cast<const SLBgpFrrInfo &>(from));
}


void SLBgpFrrInfo::MergeFrom(const SLBgpFrrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpFrrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectstatus()) {
    _internal_mutable_objectstatus()->::service_layer::SLBgpApiStatus::MergeFrom(from._internal_objectstatus());
  }
  switch (from.entry_case()) {
    case kAddr: {
      _internal_mutable_addr()->::service_layer::SLIpAddress::MergeFrom(from._internal_addr());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpFrrInfo::CopyFrom(const SLBgpFrrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpFrrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpFrrInfo::IsInitialized() const {
  return true;
}

void SLBgpFrrInfo::InternalSwap(SLBgpFrrInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(objectstatus_, other->objectstatus_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpFrrInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[2]);
}

// ===================================================================

class SLBgpBwId::_Internal {
 public:
  static const ::service_layer::SLBgpApiStatus& objectstatus(const SLBgpBwId* msg);
};

const ::service_layer::SLBgpApiStatus&
SLBgpBwId::_Internal::objectstatus(const SLBgpBwId* msg) {
  return *msg->objectstatus_;
}
SLBgpBwId::SLBgpBwId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpBwId)
}
SLBgpBwId::SLBgpBwId(const SLBgpBwId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectstatus()) {
    objectstatus_ = new ::service_layer::SLBgpApiStatus(*from.objectstatus_);
  } else {
    objectstatus_ = nullptr;
  }
  ::memcpy(&linkbw_, &from.linkbw_,
    static_cast<size_t>(reinterpret_cast<char*>(&asn_) -
    reinterpret_cast<char*>(&linkbw_)) + sizeof(asn_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpBwId)
}

inline void SLBgpBwId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objectstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asn_) -
    reinterpret_cast<char*>(&objectstatus_)) + sizeof(asn_));
}

SLBgpBwId::~SLBgpBwId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpBwId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpBwId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete objectstatus_;
}

void SLBgpBwId::ArenaDtor(void* object) {
  SLBgpBwId* _this = reinterpret_cast< SLBgpBwId* >(object);
  (void)_this;
}
void SLBgpBwId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpBwId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpBwId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpBwId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
  ::memset(&linkbw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asn_) -
      reinterpret_cast<char*>(&linkbw_)) + sizeof(asn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpBwId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 BwId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bwid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 LinkBw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          linkbw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpBwUnit BwUnit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bwunit(static_cast<::service_layer::SLBgpBwUnit>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Asn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiStatus ObjectStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpBwId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpBwId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 BwId = 1;
  if (this->_internal_bwid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bwid(), target);
  }

  // uint64 LinkBw = 2;
  if (this->_internal_linkbw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_linkbw(), target);
  }

  // .service_layer.SLBgpBwUnit BwUnit = 3;
  if (this->_internal_bwunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bwunit(), target);
  }

  // uint32 Asn = 4;
  if (this->_internal_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_asn(), target);
  }

  // .service_layer.SLBgpApiStatus ObjectStatus = 5;
  if (this->_internal_has_objectstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::objectstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpBwId)
  return target;
}

size_t SLBgpBwId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpBwId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgpApiStatus ObjectStatus = 5;
  if (this->_internal_has_objectstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectstatus_);
  }

  // uint64 LinkBw = 2;
  if (this->_internal_linkbw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_linkbw());
  }

  // uint32 BwId = 1;
  if (this->_internal_bwid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bwid());
  }

  // .service_layer.SLBgpBwUnit BwUnit = 3;
  if (this->_internal_bwunit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bwunit());
  }

  // uint32 Asn = 4;
  if (this->_internal_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_asn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpBwId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpBwId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpBwId::GetClassData() const { return &_class_data_; }

void SLBgpBwId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpBwId *>(to)->MergeFrom(
      static_cast<const SLBgpBwId &>(from));
}


void SLBgpBwId::MergeFrom(const SLBgpBwId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpBwId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectstatus()) {
    _internal_mutable_objectstatus()->::service_layer::SLBgpApiStatus::MergeFrom(from._internal_objectstatus());
  }
  if (from._internal_linkbw() != 0) {
    _internal_set_linkbw(from._internal_linkbw());
  }
  if (from._internal_bwid() != 0) {
    _internal_set_bwid(from._internal_bwid());
  }
  if (from._internal_bwunit() != 0) {
    _internal_set_bwunit(from._internal_bwunit());
  }
  if (from._internal_asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpBwId::CopyFrom(const SLBgpBwId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpBwId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpBwId::IsInitialized() const {
  return true;
}

void SLBgpBwId::InternalSwap(SLBgpBwId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpBwId, asn_)
      + sizeof(SLBgpBwId::asn_)
      - PROTOBUF_FIELD_OFFSET(SLBgpBwId, objectstatus_)>(
          reinterpret_cast<char*>(&objectstatus_),
          reinterpret_cast<char*>(&other->objectstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpBwId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[3]);
}

// ===================================================================

class SLBgpNeighborSafiParam::_Internal {
 public:
  static const ::service_layer::SLBgpFrrInfo& perlinkmpathbkup(const SLBgpNeighborSafiParam* msg);
};

const ::service_layer::SLBgpFrrInfo&
SLBgpNeighborSafiParam::_Internal::perlinkmpathbkup(const SLBgpNeighborSafiParam* msg) {
  return *msg->perlinkmpathbkup_;
}
SLBgpNeighborSafiParam::SLBgpNeighborSafiParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outbwids_(arena),
  inbwids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpNeighborSafiParam)
}
SLBgpNeighborSafiParam::SLBgpNeighborSafiParam(const SLBgpNeighborSafiParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outbwids_(from.outbwids_),
      inbwids_(from.inbwids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perlinkmpathbkup()) {
    perlinkmpathbkup_ = new ::service_layer::SLBgpFrrInfo(*from.perlinkmpathbkup_);
  } else {
    perlinkmpathbkup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpNeighborSafiParam)
}

inline void SLBgpNeighborSafiParam::SharedCtor() {
perlinkmpathbkup_ = nullptr;
}

SLBgpNeighborSafiParam::~SLBgpNeighborSafiParam() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpNeighborSafiParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpNeighborSafiParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete perlinkmpathbkup_;
}

void SLBgpNeighborSafiParam::ArenaDtor(void* object) {
  SLBgpNeighborSafiParam* _this = reinterpret_cast< SLBgpNeighborSafiParam* >(object);
  (void)_this;
}
void SLBgpNeighborSafiParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpNeighborSafiParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpNeighborSafiParam::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpNeighborSafiParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outbwids_.Clear();
  inbwids_.Clear();
  if (GetArenaForAllocation() == nullptr && perlinkmpathbkup_ != nullptr) {
    delete perlinkmpathbkup_;
  }
  perlinkmpathbkup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpNeighborSafiParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgpBwId OutBwIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outbwids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgpBwId InBwIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inbwids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpFrrInfo PerLinkMpathBkup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_perlinkmpathbkup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpNeighborSafiParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpNeighborSafiParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpBwId OutBwIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outbwids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outbwids(i), target, stream);
  }

  // repeated .service_layer.SLBgpBwId InBwIds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inbwids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inbwids(i), target, stream);
  }

  // .service_layer.SLBgpFrrInfo PerLinkMpathBkup = 3;
  if (this->_internal_has_perlinkmpathbkup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::perlinkmpathbkup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpNeighborSafiParam)
  return target;
}

size_t SLBgpNeighborSafiParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpNeighborSafiParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpBwId OutBwIds = 1;
  total_size += 1UL * this->_internal_outbwids_size();
  for (const auto& msg : this->outbwids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgpBwId InBwIds = 2;
  total_size += 1UL * this->_internal_inbwids_size();
  for (const auto& msg : this->inbwids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgpFrrInfo PerLinkMpathBkup = 3;
  if (this->_internal_has_perlinkmpathbkup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perlinkmpathbkup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpNeighborSafiParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpNeighborSafiParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpNeighborSafiParam::GetClassData() const { return &_class_data_; }

void SLBgpNeighborSafiParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpNeighborSafiParam *>(to)->MergeFrom(
      static_cast<const SLBgpNeighborSafiParam &>(from));
}


void SLBgpNeighborSafiParam::MergeFrom(const SLBgpNeighborSafiParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpNeighborSafiParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  outbwids_.MergeFrom(from.outbwids_);
  inbwids_.MergeFrom(from.inbwids_);
  if (from._internal_has_perlinkmpathbkup()) {
    _internal_mutable_perlinkmpathbkup()->::service_layer::SLBgpFrrInfo::MergeFrom(from._internal_perlinkmpathbkup());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpNeighborSafiParam::CopyFrom(const SLBgpNeighborSafiParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpNeighborSafiParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpNeighborSafiParam::IsInitialized() const {
  return true;
}

void SLBgpNeighborSafiParam::InternalSwap(SLBgpNeighborSafiParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  outbwids_.InternalSwap(&other->outbwids_);
  inbwids_.InternalSwap(&other->inbwids_);
  swap(perlinkmpathbkup_, other->perlinkmpathbkup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpNeighborSafiParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[4]);
}

// ===================================================================

class SLBgpNeighborSafiMsg::_Internal {
 public:
  static const ::service_layer::SLBgpAfiSafi& afisafi(const SLBgpNeighborSafiMsg* msg);
  static const ::service_layer::SLBgpApiStatus& objectstatus(const SLBgpNeighborSafiMsg* msg);
  static const ::service_layer::SLBgpNeighborSafiParam& safiparam(const SLBgpNeighborSafiMsg* msg);
};

const ::service_layer::SLBgpAfiSafi&
SLBgpNeighborSafiMsg::_Internal::afisafi(const SLBgpNeighborSafiMsg* msg) {
  return *msg->afisafi_;
}
const ::service_layer::SLBgpApiStatus&
SLBgpNeighborSafiMsg::_Internal::objectstatus(const SLBgpNeighborSafiMsg* msg) {
  return *msg->objectstatus_;
}
const ::service_layer::SLBgpNeighborSafiParam&
SLBgpNeighborSafiMsg::_Internal::safiparam(const SLBgpNeighborSafiMsg* msg) {
  return *msg->entry_.safiparam_;
}
void SLBgpNeighborSafiMsg::set_allocated_safiparam(::service_layer::SLBgpNeighborSafiParam* safiparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (safiparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpNeighborSafiParam>::GetOwningArena(safiparam);
    if (message_arena != submessage_arena) {
      safiparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, safiparam, submessage_arena);
    }
    set_has_safiparam();
    entry_.safiparam_ = safiparam;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborSafiMsg.SafiParam)
}
SLBgpNeighborSafiMsg::SLBgpNeighborSafiMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpNeighborSafiMsg)
}
SLBgpNeighborSafiMsg::SLBgpNeighborSafiMsg(const SLBgpNeighborSafiMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_afisafi()) {
    afisafi_ = new ::service_layer::SLBgpAfiSafi(*from.afisafi_);
  } else {
    afisafi_ = nullptr;
  }
  if (from._internal_has_objectstatus()) {
    objectstatus_ = new ::service_layer::SLBgpApiStatus(*from.objectstatus_);
  } else {
    objectstatus_ = nullptr;
  }
  clear_has_entry();
  switch (from.entry_case()) {
    case kSafiParam: {
      _internal_mutable_safiparam()->::service_layer::SLBgpNeighborSafiParam::MergeFrom(from._internal_safiparam());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpNeighborSafiMsg)
}

inline void SLBgpNeighborSafiMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afisafi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectstatus_) -
    reinterpret_cast<char*>(&afisafi_)) + sizeof(objectstatus_));
clear_has_entry();
}

SLBgpNeighborSafiMsg::~SLBgpNeighborSafiMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpNeighborSafiMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpNeighborSafiMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete afisafi_;
  if (this != internal_default_instance()) delete objectstatus_;
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpNeighborSafiMsg::ArenaDtor(void* object) {
  SLBgpNeighborSafiMsg* _this = reinterpret_cast< SLBgpNeighborSafiMsg* >(object);
  (void)_this;
}
void SLBgpNeighborSafiMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpNeighborSafiMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpNeighborSafiMsg::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpNeighborSafiMsg)
  switch (entry_case()) {
    case kSafiParam: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.safiparam_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpNeighborSafiMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpNeighborSafiMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && afisafi_ != nullptr) {
    delete afisafi_;
  }
  afisafi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpNeighborSafiMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpAfiSafi AfiSafi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_afisafi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiStatus ObjectStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpNeighborSafiParam SafiParam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_safiparam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpNeighborSafiMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpNeighborSafiMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpAfiSafi AfiSafi = 1;
  if (this->_internal_has_afisafi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::afisafi(this), target, stream);
  }

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  if (this->_internal_has_objectstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::objectstatus(this), target, stream);
  }

  // .service_layer.SLBgpNeighborSafiParam SafiParam = 3;
  if (_internal_has_safiparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::safiparam(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpNeighborSafiMsg)
  return target;
}

size_t SLBgpNeighborSafiMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpNeighborSafiMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgpAfiSafi AfiSafi = 1;
  if (this->_internal_has_afisafi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *afisafi_);
  }

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  if (this->_internal_has_objectstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectstatus_);
  }

  switch (entry_case()) {
    // .service_layer.SLBgpNeighborSafiParam SafiParam = 3;
    case kSafiParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.safiparam_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpNeighborSafiMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpNeighborSafiMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpNeighborSafiMsg::GetClassData() const { return &_class_data_; }

void SLBgpNeighborSafiMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpNeighborSafiMsg *>(to)->MergeFrom(
      static_cast<const SLBgpNeighborSafiMsg &>(from));
}


void SLBgpNeighborSafiMsg::MergeFrom(const SLBgpNeighborSafiMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpNeighborSafiMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_afisafi()) {
    _internal_mutable_afisafi()->::service_layer::SLBgpAfiSafi::MergeFrom(from._internal_afisafi());
  }
  if (from._internal_has_objectstatus()) {
    _internal_mutable_objectstatus()->::service_layer::SLBgpApiStatus::MergeFrom(from._internal_objectstatus());
  }
  switch (from.entry_case()) {
    case kSafiParam: {
      _internal_mutable_safiparam()->::service_layer::SLBgpNeighborSafiParam::MergeFrom(from._internal_safiparam());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpNeighborSafiMsg::CopyFrom(const SLBgpNeighborSafiMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpNeighborSafiMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpNeighborSafiMsg::IsInitialized() const {
  return true;
}

void SLBgpNeighborSafiMsg::InternalSwap(SLBgpNeighborSafiMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpNeighborSafiMsg, objectstatus_)
      + sizeof(SLBgpNeighborSafiMsg::objectstatus_)
      - PROTOBUF_FIELD_OFFSET(SLBgpNeighborSafiMsg, afisafi_)>(
          reinterpret_cast<char*>(&afisafi_),
          reinterpret_cast<char*>(&other->afisafi_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpNeighborSafiMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[5]);
}

// ===================================================================

class SLBgpNeighborSafiList::_Internal {
 public:
};

SLBgpNeighborSafiList::SLBgpNeighborSafiList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  neighborsafis_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpNeighborSafiList)
}
SLBgpNeighborSafiList::SLBgpNeighborSafiList(const SLBgpNeighborSafiList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neighborsafis_(from.neighborsafis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpNeighborSafiList)
}

inline void SLBgpNeighborSafiList::SharedCtor() {
}

SLBgpNeighborSafiList::~SLBgpNeighborSafiList() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpNeighborSafiList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpNeighborSafiList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgpNeighborSafiList::ArenaDtor(void* object) {
  SLBgpNeighborSafiList* _this = reinterpret_cast< SLBgpNeighborSafiList* >(object);
  (void)_this;
}
void SLBgpNeighborSafiList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpNeighborSafiList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpNeighborSafiList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpNeighborSafiList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighborsafis_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpNeighborSafiList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgpNeighborSafiMsg NeighborSafis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighborsafis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpNeighborSafiList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpNeighborSafiList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpNeighborSafiMsg NeighborSafis = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neighborsafis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_neighborsafis(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpNeighborSafiList)
  return target;
}

size_t SLBgpNeighborSafiList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpNeighborSafiList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpNeighborSafiMsg NeighborSafis = 1;
  total_size += 1UL * this->_internal_neighborsafis_size();
  for (const auto& msg : this->neighborsafis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpNeighborSafiList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpNeighborSafiList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpNeighborSafiList::GetClassData() const { return &_class_data_; }

void SLBgpNeighborSafiList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpNeighborSafiList *>(to)->MergeFrom(
      static_cast<const SLBgpNeighborSafiList &>(from));
}


void SLBgpNeighborSafiList::MergeFrom(const SLBgpNeighborSafiList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpNeighborSafiList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  neighborsafis_.MergeFrom(from.neighborsafis_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpNeighborSafiList::CopyFrom(const SLBgpNeighborSafiList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpNeighborSafiList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpNeighborSafiList::IsInitialized() const {
  return true;
}

void SLBgpNeighborSafiList::InternalSwap(SLBgpNeighborSafiList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  neighborsafis_.InternalSwap(&other->neighborsafis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpNeighborSafiList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[6]);
}

// ===================================================================

class SLBgpNeighborKey::_Internal {
 public:
  static const ::service_layer::SLIpAddress& address(const SLBgpNeighborKey* msg);
};

const ::service_layer::SLIpAddress&
SLBgpNeighborKey::_Internal::address(const SLBgpNeighborKey* msg) {
  return *msg->address_;
}
void SLBgpNeighborKey::clear_address() {
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
SLBgpNeighborKey::SLBgpNeighborKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpNeighborKey)
}
SLBgpNeighborKey::SLBgpNeighborKey(const SLBgpNeighborKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    address_ = new ::service_layer::SLIpAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpNeighborKey)
}

inline void SLBgpNeighborKey::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_ = nullptr;
}

SLBgpNeighborKey::~SLBgpNeighborKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpNeighborKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpNeighborKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
}

void SLBgpNeighborKey::ArenaDtor(void* object) {
  SLBgpNeighborKey* _this = reinterpret_cast< SLBgpNeighborKey* >(object);
  (void)_this;
}
void SLBgpNeighborKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpNeighborKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpNeighborKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpNeighborKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpNeighborKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgpNeighborKey.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLIpAddress Address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpNeighborKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpNeighborKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgpNeighborKey.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // .service_layer.SLIpAddress Address = 2;
  if (this->_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpNeighborKey)
  return target;
}

size_t SLBgpNeighborKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpNeighborKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLIpAddress Address = 2;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpNeighborKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpNeighborKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpNeighborKey::GetClassData() const { return &_class_data_; }

void SLBgpNeighborKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpNeighborKey *>(to)->MergeFrom(
      static_cast<const SLBgpNeighborKey &>(from));
}


void SLBgpNeighborKey::MergeFrom(const SLBgpNeighborKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpNeighborKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_has_address()) {
    _internal_mutable_address()->::service_layer::SLIpAddress::MergeFrom(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpNeighborKey::CopyFrom(const SLBgpNeighborKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpNeighborKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpNeighborKey::IsInitialized() const {
  return true;
}

void SLBgpNeighborKey::InternalSwap(SLBgpNeighborKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpNeighborKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[7]);
}

// ===================================================================

class SLBgpNeighborMsg::_Internal {
 public:
  static const ::service_layer::SLBgpNeighborKey& neighborkey(const SLBgpNeighborMsg* msg);
  static const ::service_layer::SLBgpApiStatus& objectstatus(const SLBgpNeighborMsg* msg);
  static const ::service_layer::SLBgpNeighborSafiList& neighborsafilist(const SLBgpNeighborMsg* msg);
};

const ::service_layer::SLBgpNeighborKey&
SLBgpNeighborMsg::_Internal::neighborkey(const SLBgpNeighborMsg* msg) {
  return *msg->neighborkey_;
}
const ::service_layer::SLBgpApiStatus&
SLBgpNeighborMsg::_Internal::objectstatus(const SLBgpNeighborMsg* msg) {
  return *msg->objectstatus_;
}
const ::service_layer::SLBgpNeighborSafiList&
SLBgpNeighborMsg::_Internal::neighborsafilist(const SLBgpNeighborMsg* msg) {
  return *msg->entry_.neighborsafilist_;
}
void SLBgpNeighborMsg::set_allocated_neighborsafilist(::service_layer::SLBgpNeighborSafiList* neighborsafilist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (neighborsafilist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpNeighborSafiList>::GetOwningArena(neighborsafilist);
    if (message_arena != submessage_arena) {
      neighborsafilist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighborsafilist, submessage_arena);
    }
    set_has_neighborsafilist();
    entry_.neighborsafilist_ = neighborsafilist;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborMsg.NeighborSafiList)
}
SLBgpNeighborMsg::SLBgpNeighborMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpNeighborMsg)
}
SLBgpNeighborMsg::SLBgpNeighborMsg(const SLBgpNeighborMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_neighborkey()) {
    neighborkey_ = new ::service_layer::SLBgpNeighborKey(*from.neighborkey_);
  } else {
    neighborkey_ = nullptr;
  }
  if (from._internal_has_objectstatus()) {
    objectstatus_ = new ::service_layer::SLBgpApiStatus(*from.objectstatus_);
  } else {
    objectstatus_ = nullptr;
  }
  clear_has_entry();
  switch (from.entry_case()) {
    case kNeighborSafiList: {
      _internal_mutable_neighborsafilist()->::service_layer::SLBgpNeighborSafiList::MergeFrom(from._internal_neighborsafilist());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpNeighborMsg)
}

inline void SLBgpNeighborMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&neighborkey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectstatus_) -
    reinterpret_cast<char*>(&neighborkey_)) + sizeof(objectstatus_));
clear_has_entry();
}

SLBgpNeighborMsg::~SLBgpNeighborMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpNeighborMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpNeighborMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete neighborkey_;
  if (this != internal_default_instance()) delete objectstatus_;
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpNeighborMsg::ArenaDtor(void* object) {
  SLBgpNeighborMsg* _this = reinterpret_cast< SLBgpNeighborMsg* >(object);
  (void)_this;
}
void SLBgpNeighborMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpNeighborMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpNeighborMsg::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpNeighborMsg)
  switch (entry_case()) {
    case kNeighborSafiList: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.neighborsafilist_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpNeighborMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpNeighborMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && neighborkey_ != nullptr) {
    delete neighborkey_;
  }
  neighborkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpNeighborMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpNeighborKey NeighborKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighborkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiStatus ObjectStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpNeighborSafiList NeighborSafiList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighborsafilist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpNeighborMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpNeighborMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpNeighborKey NeighborKey = 1;
  if (this->_internal_has_neighborkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::neighborkey(this), target, stream);
  }

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  if (this->_internal_has_objectstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::objectstatus(this), target, stream);
  }

  // .service_layer.SLBgpNeighborSafiList NeighborSafiList = 3;
  if (_internal_has_neighborsafilist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::neighborsafilist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpNeighborMsg)
  return target;
}

size_t SLBgpNeighborMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpNeighborMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgpNeighborKey NeighborKey = 1;
  if (this->_internal_has_neighborkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighborkey_);
  }

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  if (this->_internal_has_objectstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectstatus_);
  }

  switch (entry_case()) {
    // .service_layer.SLBgpNeighborSafiList NeighborSafiList = 3;
    case kNeighborSafiList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.neighborsafilist_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpNeighborMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpNeighborMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpNeighborMsg::GetClassData() const { return &_class_data_; }

void SLBgpNeighborMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpNeighborMsg *>(to)->MergeFrom(
      static_cast<const SLBgpNeighborMsg &>(from));
}


void SLBgpNeighborMsg::MergeFrom(const SLBgpNeighborMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpNeighborMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_neighborkey()) {
    _internal_mutable_neighborkey()->::service_layer::SLBgpNeighborKey::MergeFrom(from._internal_neighborkey());
  }
  if (from._internal_has_objectstatus()) {
    _internal_mutable_objectstatus()->::service_layer::SLBgpApiStatus::MergeFrom(from._internal_objectstatus());
  }
  switch (from.entry_case()) {
    case kNeighborSafiList: {
      _internal_mutable_neighborsafilist()->::service_layer::SLBgpNeighborSafiList::MergeFrom(from._internal_neighborsafilist());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpNeighborMsg::CopyFrom(const SLBgpNeighborMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpNeighborMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpNeighborMsg::IsInitialized() const {
  return true;
}

void SLBgpNeighborMsg::InternalSwap(SLBgpNeighborMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpNeighborMsg, objectstatus_)
      + sizeof(SLBgpNeighborMsg::objectstatus_)
      - PROTOBUF_FIELD_OFFSET(SLBgpNeighborMsg, neighborkey_)>(
          reinterpret_cast<char*>(&neighborkey_),
          reinterpret_cast<char*>(&other->neighborkey_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpNeighborMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[8]);
}

// ===================================================================

class SLBgpApiObject::_Internal {
 public:
  static const ::service_layer::SLBgpNeighborMsg& neighbor(const SLBgpApiObject* msg);
};

const ::service_layer::SLBgpNeighborMsg&
SLBgpApiObject::_Internal::neighbor(const SLBgpApiObject* msg) {
  return *msg->entry_.neighbor_;
}
void SLBgpApiObject::set_allocated_neighbor(::service_layer::SLBgpNeighborMsg* neighbor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (neighbor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpNeighborMsg>::GetOwningArena(neighbor);
    if (message_arena != submessage_arena) {
      neighbor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbor, submessage_arena);
    }
    set_has_neighbor();
    entry_.neighbor_ = neighbor;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiObject.Neighbor)
}
SLBgpApiObject::SLBgpApiObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiObject)
}
SLBgpApiObject::SLBgpApiObject(const SLBgpApiObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  objecttype_ = from.objecttype_;
  clear_has_entry();
  switch (from.entry_case()) {
    case kNeighbor: {
      _internal_mutable_neighbor()->::service_layer::SLBgpNeighborMsg::MergeFrom(from._internal_neighbor());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiObject)
}

inline void SLBgpApiObject::SharedCtor() {
objecttype_ = 0;
clear_has_entry();
}

SLBgpApiObject::~SLBgpApiObject() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpApiObject::ArenaDtor(void* object) {
  SLBgpApiObject* _this = reinterpret_cast< SLBgpApiObject* >(object);
  (void)_this;
}
void SLBgpApiObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiObject::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpApiObject)
  switch (entry_case()) {
    case kNeighbor: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.neighbor_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpApiObject::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objecttype_ = 0;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpApiObjectType ObjectType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objecttype(static_cast<::service_layer::SLBgpApiObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpNeighborMsg Neighbor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpApiObjectType ObjectType = 1;
  if (this->_internal_objecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_objecttype(), target);
  }

  // .service_layer.SLBgpNeighborMsg Neighbor = 2;
  if (_internal_has_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neighbor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiObject)
  return target;
}

size_t SLBgpApiObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgpApiObjectType ObjectType = 1;
  if (this->_internal_objecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_objecttype());
  }

  switch (entry_case()) {
    // .service_layer.SLBgpNeighborMsg Neighbor = 2;
    case kNeighbor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.neighbor_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiObject::GetClassData() const { return &_class_data_; }

void SLBgpApiObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiObject *>(to)->MergeFrom(
      static_cast<const SLBgpApiObject &>(from));
}


void SLBgpApiObject::MergeFrom(const SLBgpApiObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objecttype() != 0) {
    _internal_set_objecttype(from._internal_objecttype());
  }
  switch (from.entry_case()) {
    case kNeighbor: {
      _internal_mutable_neighbor()->::service_layer::SLBgpNeighborMsg::MergeFrom(from._internal_neighbor());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiObject::CopyFrom(const SLBgpApiObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiObject::IsInitialized() const {
  return true;
}

void SLBgpApiObject::InternalSwap(SLBgpApiObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(objecttype_, other->objecttype_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[9]);
}

// ===================================================================

class SLBgpApiObjectResp::_Internal {
 public:
  static const ::service_layer::SLBgpApiStatus& statussummary(const SLBgpApiObjectResp* msg);
};

const ::service_layer::SLBgpApiStatus&
SLBgpApiObjectResp::_Internal::statussummary(const SLBgpApiObjectResp* msg) {
  return *msg->statussummary_;
}
SLBgpApiObjectResp::SLBgpApiObjectResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgpapiobjects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiObjectResp)
}
SLBgpApiObjectResp::SLBgpApiObjectResp(const SLBgpApiObjectResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bgpapiobjects_(from.bgpapiobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bgpinstancename().empty()) {
    bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpinstancename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLBgpApiStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiObjectResp)
}

inline void SLBgpApiObjectResp::SharedCtor() {
bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
statussummary_ = nullptr;
}

SLBgpApiObjectResp::~SLBgpApiObjectResp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiObjectResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiObjectResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bgpinstancename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete statussummary_;
}

void SLBgpApiObjectResp::ArenaDtor(void* object) {
  SLBgpApiObjectResp* _this = reinterpret_cast< SLBgpApiObjectResp* >(object);
  (void)_this;
}
void SLBgpApiObjectResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiObjectResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiObjectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiObjectResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgpapiobjects_.Clear();
  bgpinstancename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiObjectResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BgpInstanceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bgpinstancename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgpApiObjectResp.BgpInstanceName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiStatus StatusSummary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgpApiObject BgpApiobjects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgpapiobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiObjectResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiObjectResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BgpInstanceName = 1;
  if (!this->_internal_bgpinstancename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgpinstancename().data(), static_cast<int>(this->_internal_bgpinstancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgpApiObjectResp.BgpInstanceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bgpinstancename(), target);
  }

  // .service_layer.SLBgpApiStatus StatusSummary = 2;
  if (this->_internal_has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgpapiobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bgpapiobjects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiObjectResp)
  return target;
}

size_t SLBgpApiObjectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiObjectResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 3;
  total_size += 1UL * this->_internal_bgpapiobjects_size();
  for (const auto& msg : this->bgpapiobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string BgpInstanceName = 1;
  if (!this->_internal_bgpinstancename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgpinstancename());
  }

  // .service_layer.SLBgpApiStatus StatusSummary = 2;
  if (this->_internal_has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiObjectResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiObjectResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiObjectResp::GetClassData() const { return &_class_data_; }

void SLBgpApiObjectResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiObjectResp *>(to)->MergeFrom(
      static_cast<const SLBgpApiObjectResp &>(from));
}


void SLBgpApiObjectResp::MergeFrom(const SLBgpApiObjectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiObjectResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bgpapiobjects_.MergeFrom(from.bgpapiobjects_);
  if (!from._internal_bgpinstancename().empty()) {
    _internal_set_bgpinstancename(from._internal_bgpinstancename());
  }
  if (from._internal_has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLBgpApiStatus::MergeFrom(from._internal_statussummary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiObjectResp::CopyFrom(const SLBgpApiObjectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiObjectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiObjectResp::IsInitialized() const {
  return true;
}

void SLBgpApiObjectResp::InternalSwap(SLBgpApiObjectResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bgpapiobjects_.InternalSwap(&other->bgpapiobjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpinstancename_, lhs_arena,
      &other->bgpinstancename_, rhs_arena
  );
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiObjectResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[10]);
}

// ===================================================================

class SLBgpApiObjectReq::_Internal {
 public:
};

SLBgpApiObjectReq::SLBgpApiObjectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgpapiobjects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiObjectReq)
}
SLBgpApiObjectReq::SLBgpApiObjectReq(const SLBgpApiObjectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bgpapiobjects_(from.bgpapiobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bgpinstancename().empty()) {
    bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpinstancename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiObjectReq)
}

inline void SLBgpApiObjectReq::SharedCtor() {
bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operationid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(oper_));
}

SLBgpApiObjectReq::~SLBgpApiObjectReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiObjectReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiObjectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bgpinstancename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgpApiObjectReq::ArenaDtor(void* object) {
  SLBgpApiObjectReq* _this = reinterpret_cast< SLBgpApiObjectReq* >(object);
  (void)_this;
}
void SLBgpApiObjectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiObjectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiObjectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiObjectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgpapiobjects_.Clear();
  bgpinstancename_.ClearToEmpty();
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiObjectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 OperationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiObjectOp Oper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLBgpApiObjectOp>(val));
        } else
          goto handle_unusual;
        continue;
      // string BgpInstanceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bgpinstancename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgpApiObjectReq.BgpInstanceName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgpapiobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiObjectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiObjectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 OperationId = 1;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_operationid(), target);
  }

  // .service_layer.SLBgpApiObjectOp Oper = 2;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_oper(), target);
  }

  // string BgpInstanceName = 3;
  if (!this->_internal_bgpinstancename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgpinstancename().data(), static_cast<int>(this->_internal_bgpinstancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgpApiObjectReq.BgpInstanceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bgpinstancename(), target);
  }

  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgpapiobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bgpapiobjects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiObjectReq)
  return target;
}

size_t SLBgpApiObjectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiObjectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
  total_size += 1UL * this->_internal_bgpapiobjects_size();
  for (const auto& msg : this->bgpapiobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string BgpInstanceName = 3;
  if (!this->_internal_bgpinstancename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgpinstancename());
  }

  // uint64 OperationId = 1;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  // .service_layer.SLBgpApiObjectOp Oper = 2;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiObjectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiObjectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiObjectReq::GetClassData() const { return &_class_data_; }

void SLBgpApiObjectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiObjectReq *>(to)->MergeFrom(
      static_cast<const SLBgpApiObjectReq &>(from));
}


void SLBgpApiObjectReq::MergeFrom(const SLBgpApiObjectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiObjectReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bgpapiobjects_.MergeFrom(from.bgpapiobjects_);
  if (!from._internal_bgpinstancename().empty()) {
    _internal_set_bgpinstancename(from._internal_bgpinstancename());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiObjectReq::CopyFrom(const SLBgpApiObjectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiObjectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiObjectReq::IsInitialized() const {
  return true;
}

void SLBgpApiObjectReq::InternalSwap(SLBgpApiObjectReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bgpapiobjects_.InternalSwap(&other->bgpapiobjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpinstancename_, lhs_arena,
      &other->bgpinstancename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpApiObjectReq, oper_)
      + sizeof(SLBgpApiObjectReq::oper_)
      - PROTOBUF_FIELD_OFFSET(SLBgpApiObjectReq, operationid_)>(
          reinterpret_cast<char*>(&operationid_),
          reinterpret_cast<char*>(&other->operationid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiObjectReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[11]);
}

// ===================================================================

class SLBgpApiGetResp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBgpApiGetResp* msg);
};

const ::service_layer::SLErrorStatus&
SLBgpApiGetResp::_Internal::errstatus(const SLBgpApiGetResp* msg) {
  return *msg->errstatus_;
}
void SLBgpApiGetResp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLBgpApiGetResp::SLBgpApiGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgpapiobjects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiGetResp)
}
SLBgpApiGetResp::SLBgpApiGetResp(const SLBgpApiGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bgpapiobjects_(from.bgpapiobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bgpinstancename().empty()) {
    bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpinstancename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiGetResp)
}

inline void SLBgpApiGetResp::SharedCtor() {
bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLBgpApiGetResp::~SLBgpApiGetResp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bgpinstancename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLBgpApiGetResp::ArenaDtor(void* object) {
  SLBgpApiGetResp* _this = reinterpret_cast< SLBgpApiGetResp* >(object);
  (void)_this;
}
void SLBgpApiGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiGetResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgpapiobjects_.Clear();
  bgpinstancename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BgpInstanceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bgpinstancename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgpApiGetResp.BgpInstanceName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Eof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgpapiobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiGetResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiGetResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BgpInstanceName = 1;
  if (!this->_internal_bgpinstancename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgpinstancename().data(), static_cast<int>(this->_internal_bgpinstancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgpApiGetResp.BgpInstanceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bgpinstancename(), target);
  }

  // bool Eof = 2;
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgpapiobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bgpapiobjects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiGetResp)
  return target;
}

size_t SLBgpApiGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiGetResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
  total_size += 1UL * this->_internal_bgpapiobjects_size();
  for (const auto& msg : this->bgpapiobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string BgpInstanceName = 1;
  if (!this->_internal_bgpinstancename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgpinstancename());
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 2;
  if (this->_internal_eof() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiGetResp::GetClassData() const { return &_class_data_; }

void SLBgpApiGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiGetResp *>(to)->MergeFrom(
      static_cast<const SLBgpApiGetResp &>(from));
}


void SLBgpApiGetResp::MergeFrom(const SLBgpApiGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bgpapiobjects_.MergeFrom(from.bgpapiobjects_);
  if (!from._internal_bgpinstancename().empty()) {
    _internal_set_bgpinstancename(from._internal_bgpinstancename());
  }
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiGetResp::CopyFrom(const SLBgpApiGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiGetResp::IsInitialized() const {
  return true;
}

void SLBgpApiGetResp::InternalSwap(SLBgpApiGetResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bgpapiobjects_.InternalSwap(&other->bgpapiobjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpinstancename_, lhs_arena,
      &other->bgpinstancename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpApiGetResp, eof_)
      + sizeof(SLBgpApiGetResp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLBgpApiGetResp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[12]);
}

// ===================================================================

class SLBgpApiGetReq::_Internal {
 public:
  static const ::service_layer::SLBgpNeighborKey& neighbor(const SLBgpApiGetReq* msg);
};

const ::service_layer::SLBgpNeighborKey&
SLBgpApiGetReq::_Internal::neighbor(const SLBgpApiGetReq* msg) {
  return *msg->entry_.neighbor_;
}
void SLBgpApiGetReq::set_allocated_neighbor(::service_layer::SLBgpNeighborKey* neighbor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (neighbor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpNeighborKey>::GetOwningArena(neighbor);
    if (message_arena != submessage_arena) {
      neighbor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbor, submessage_arena);
    }
    set_has_neighbor();
    entry_.neighbor_ = neighbor;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiGetReq.Neighbor)
}
SLBgpApiGetReq::SLBgpApiGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiGetReq)
}
SLBgpApiGetReq::SLBgpApiGetReq(const SLBgpApiGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bgpinstancename().empty()) {
    bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpinstancename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&objecttype_, &from.objecttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&objecttype_)) + sizeof(getnext_));
  clear_has_entry();
  switch (from.entry_case()) {
    case kNeighbor: {
      _internal_mutable_neighbor()->::service_layer::SLBgpNeighborKey::MergeFrom(from._internal_neighbor());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiGetReq)
}

inline void SLBgpApiGetReq::SharedCtor() {
bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objecttype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&objecttype_)) + sizeof(getnext_));
clear_has_entry();
}

SLBgpApiGetReq::~SLBgpApiGetReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bgpinstancename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpApiGetReq::ArenaDtor(void* object) {
  SLBgpApiGetReq* _this = reinterpret_cast< SLBgpApiGetReq* >(object);
  (void)_this;
}
void SLBgpApiGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiGetReq::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpApiGetReq)
  switch (entry_case()) {
    case kNeighbor: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.neighbor_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpApiGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiGetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgpinstancename_.ClearToEmpty();
  ::memset(&objecttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&objecttype_)) + sizeof(getnext_));
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BgpInstanceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bgpinstancename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgpApiGetReq.BgpInstanceName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiObjectType ObjectType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objecttype(static_cast<::service_layer::SLBgpApiObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpNeighborKey Neighbor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EntriesCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetNext = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiGetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiGetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BgpInstanceName = 1;
  if (!this->_internal_bgpinstancename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgpinstancename().data(), static_cast<int>(this->_internal_bgpinstancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgpApiGetReq.BgpInstanceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bgpinstancename(), target);
  }

  // .service_layer.SLBgpApiObjectType ObjectType = 2;
  if (this->_internal_objecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_objecttype(), target);
  }

  // .service_layer.SLBgpNeighborKey Neighbor = 3;
  if (_internal_has_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::neighbor(this), target, stream);
  }

  // uint32 EntriesCount = 4;
  if (this->_internal_entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_entriescount(), target);
  }

  // bool GetNext = 5;
  if (this->_internal_getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiGetReq)
  return target;
}

size_t SLBgpApiGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiGetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BgpInstanceName = 1;
  if (!this->_internal_bgpinstancename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgpinstancename());
  }

  // .service_layer.SLBgpApiObjectType ObjectType = 2;
  if (this->_internal_objecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_objecttype());
  }

  // uint32 EntriesCount = 4;
  if (this->_internal_entriescount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_entriescount());
  }

  // bool GetNext = 5;
  if (this->_internal_getnext() != 0) {
    total_size += 1 + 1;
  }

  switch (entry_case()) {
    // .service_layer.SLBgpNeighborKey Neighbor = 3;
    case kNeighbor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.neighbor_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiGetReq::GetClassData() const { return &_class_data_; }

void SLBgpApiGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiGetReq *>(to)->MergeFrom(
      static_cast<const SLBgpApiGetReq &>(from));
}


void SLBgpApiGetReq::MergeFrom(const SLBgpApiGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bgpinstancename().empty()) {
    _internal_set_bgpinstancename(from._internal_bgpinstancename());
  }
  if (from._internal_objecttype() != 0) {
    _internal_set_objecttype(from._internal_objecttype());
  }
  if (from._internal_entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from._internal_getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
  switch (from.entry_case()) {
    case kNeighbor: {
      _internal_mutable_neighbor()->::service_layer::SLBgpNeighborKey::MergeFrom(from._internal_neighbor());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiGetReq::CopyFrom(const SLBgpApiGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiGetReq::IsInitialized() const {
  return true;
}

void SLBgpApiGetReq::InternalSwap(SLBgpApiGetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpinstancename_, lhs_arena,
      &other->bgpinstancename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpApiGetReq, getnext_)
      + sizeof(SLBgpApiGetReq::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLBgpApiGetReq, objecttype_)>(
          reinterpret_cast<char*>(&objecttype_),
          reinterpret_cast<char*>(&other->objecttype_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[13]);
}

// ===================================================================

class SLBgpApiCapResp::_Internal {
 public:
};

SLBgpApiCapResp::SLBgpApiCapResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiCapResp)
}
SLBgpApiCapResp::SLBgpApiCapResp(const SLBgpApiCapResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiCapResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiCapResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiCapResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiCapResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[14]);
}

// ===================================================================

class SLBgpApiCapReq::_Internal {
 public:
};

SLBgpApiCapReq::SLBgpApiCapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiCapReq)
}
SLBgpApiCapReq::SLBgpApiCapReq(const SLBgpApiCapReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kBgpInstanceName: {
      _internal_set_bgpinstancename(from._internal_bgpinstancename());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiCapReq)
}

inline void SLBgpApiCapReq::SharedCtor() {
clear_has_entry();
}

SLBgpApiCapReq::~SLBgpApiCapReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiCapReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiCapReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpApiCapReq::ArenaDtor(void* object) {
  SLBgpApiCapReq* _this = reinterpret_cast< SLBgpApiCapReq* >(object);
  (void)_this;
}
void SLBgpApiCapReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiCapReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiCapReq::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpApiCapReq)
  switch (entry_case()) {
    case kBgpInstanceName: {
      entry_.bgpinstancename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpApiCapReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiCapReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiCapReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BgpInstanceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bgpinstancename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgpApiCapReq.BgpInstanceName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiCapReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiCapReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BgpInstanceName = 1;
  if (_internal_has_bgpinstancename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgpinstancename().data(), static_cast<int>(this->_internal_bgpinstancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgpApiCapReq.BgpInstanceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bgpinstancename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiCapReq)
  return target;
}

size_t SLBgpApiCapReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiCapReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // string BgpInstanceName = 1;
    case kBgpInstanceName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgpinstancename());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiCapReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiCapReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiCapReq::GetClassData() const { return &_class_data_; }

void SLBgpApiCapReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiCapReq *>(to)->MergeFrom(
      static_cast<const SLBgpApiCapReq &>(from));
}


void SLBgpApiCapReq::MergeFrom(const SLBgpApiCapReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiCapReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kBgpInstanceName: {
      _internal_set_bgpinstancename(from._internal_bgpinstancename());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiCapReq::CopyFrom(const SLBgpApiCapReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiCapReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiCapReq::IsInitialized() const {
  return true;
}

void SLBgpApiCapReq::InternalSwap(SLBgpApiCapReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiCapReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[15]);
}

// ===================================================================

class SLBgpApiMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBgpApiMsgRsp* msg);
  static const ::service_layer::SLBgpApiCapResp& bgpapicapresp(const SLBgpApiMsgRsp* msg);
  static const ::service_layer::SLBgpApiGetResp& bgpapigetresp(const SLBgpApiMsgRsp* msg);
  static const ::service_layer::SLBgpApiObjectResp& bgpapiobjectresp(const SLBgpApiMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLBgpApiMsgRsp::_Internal::errstatus(const SLBgpApiMsgRsp* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLBgpApiCapResp&
SLBgpApiMsgRsp::_Internal::bgpapicapresp(const SLBgpApiMsgRsp* msg) {
  return *msg->entry_.bgpapicapresp_;
}
const ::service_layer::SLBgpApiGetResp&
SLBgpApiMsgRsp::_Internal::bgpapigetresp(const SLBgpApiMsgRsp* msg) {
  return *msg->entry_.bgpapigetresp_;
}
const ::service_layer::SLBgpApiObjectResp&
SLBgpApiMsgRsp::_Internal::bgpapiobjectresp(const SLBgpApiMsgRsp* msg) {
  return *msg->entry_.bgpapiobjectresp_;
}
void SLBgpApiMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
void SLBgpApiMsgRsp::set_allocated_bgpapicapresp(::service_layer::SLBgpApiCapResp* bgpapicapresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (bgpapicapresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiCapResp>::GetOwningArena(bgpapicapresp);
    if (message_arena != submessage_arena) {
      bgpapicapresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpapicapresp, submessage_arena);
    }
    set_has_bgpapicapresp();
    entry_.bgpapicapresp_ = bgpapicapresp;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsgRsp.BgpApiCapResp)
}
void SLBgpApiMsgRsp::set_allocated_bgpapigetresp(::service_layer::SLBgpApiGetResp* bgpapigetresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (bgpapigetresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiGetResp>::GetOwningArena(bgpapigetresp);
    if (message_arena != submessage_arena) {
      bgpapigetresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpapigetresp, submessage_arena);
    }
    set_has_bgpapigetresp();
    entry_.bgpapigetresp_ = bgpapigetresp;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsgRsp.BgpApiGetResp)
}
void SLBgpApiMsgRsp::set_allocated_bgpapiobjectresp(::service_layer::SLBgpApiObjectResp* bgpapiobjectresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (bgpapiobjectresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiObjectResp>::GetOwningArena(bgpapiobjectresp);
    if (message_arena != submessage_arena) {
      bgpapiobjectresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpapiobjectresp, submessage_arena);
    }
    set_has_bgpapiobjectresp();
    entry_.bgpapiobjectresp_ = bgpapiobjectresp;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsgRsp.BgpApiObjectResp)
}
SLBgpApiMsgRsp::SLBgpApiMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiMsgRsp)
}
SLBgpApiMsgRsp::SLBgpApiMsgRsp(const SLBgpApiMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  correlator_ = from.correlator_;
  clear_has_entry();
  switch (from.entry_case()) {
    case kBgpApiCapResp: {
      _internal_mutable_bgpapicapresp()->::service_layer::SLBgpApiCapResp::MergeFrom(from._internal_bgpapicapresp());
      break;
    }
    case kBgpApiGetResp: {
      _internal_mutable_bgpapigetresp()->::service_layer::SLBgpApiGetResp::MergeFrom(from._internal_bgpapigetresp());
      break;
    }
    case kBgpApiObjectResp: {
      _internal_mutable_bgpapiobjectresp()->::service_layer::SLBgpApiObjectResp::MergeFrom(from._internal_bgpapiobjectresp());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiMsgRsp)
}

inline void SLBgpApiMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correlator_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(correlator_));
clear_has_entry();
}

SLBgpApiMsgRsp::~SLBgpApiMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpApiMsgRsp::ArenaDtor(void* object) {
  SLBgpApiMsgRsp* _this = reinterpret_cast< SLBgpApiMsgRsp* >(object);
  (void)_this;
}
void SLBgpApiMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiMsgRsp::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpApiMsgRsp)
  switch (entry_case()) {
    case kBgpApiCapResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.bgpapicapresp_;
      }
      break;
    }
    case kBgpApiGetResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.bgpapigetresp_;
      }
      break;
    }
    case kBgpApiObjectResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.bgpapiobjectresp_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpApiMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  correlator_ = uint64_t{0u};
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiCapResp BgpApiCapResp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpapicapresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiGetResp BgpApiGetResp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpapigetresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiObjectResp BgpApiObjectResp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpapiobjectresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBgpApiCapResp BgpApiCapResp = 3;
  if (_internal_has_bgpapicapresp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bgpapicapresp(this), target, stream);
  }

  // .service_layer.SLBgpApiGetResp BgpApiGetResp = 4;
  if (_internal_has_bgpapigetresp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bgpapigetresp(this), target, stream);
  }

  // .service_layer.SLBgpApiObjectResp BgpApiObjectResp = 5;
  if (_internal_has_bgpapiobjectresp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bgpapiobjectresp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiMsgRsp)
  return target;
}

size_t SLBgpApiMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_correlator());
  }

  switch (entry_case()) {
    // .service_layer.SLBgpApiCapResp BgpApiCapResp = 3;
    case kBgpApiCapResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.bgpapicapresp_);
      break;
    }
    // .service_layer.SLBgpApiGetResp BgpApiGetResp = 4;
    case kBgpApiGetResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.bgpapigetresp_);
      break;
    }
    // .service_layer.SLBgpApiObjectResp BgpApiObjectResp = 5;
    case kBgpApiObjectResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.bgpapiobjectresp_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiMsgRsp::GetClassData() const { return &_class_data_; }

void SLBgpApiMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiMsgRsp *>(to)->MergeFrom(
      static_cast<const SLBgpApiMsgRsp &>(from));
}


void SLBgpApiMsgRsp::MergeFrom(const SLBgpApiMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  switch (from.entry_case()) {
    case kBgpApiCapResp: {
      _internal_mutable_bgpapicapresp()->::service_layer::SLBgpApiCapResp::MergeFrom(from._internal_bgpapicapresp());
      break;
    }
    case kBgpApiGetResp: {
      _internal_mutable_bgpapigetresp()->::service_layer::SLBgpApiGetResp::MergeFrom(from._internal_bgpapigetresp());
      break;
    }
    case kBgpApiObjectResp: {
      _internal_mutable_bgpapiobjectresp()->::service_layer::SLBgpApiObjectResp::MergeFrom(from._internal_bgpapiobjectresp());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiMsgRsp::CopyFrom(const SLBgpApiMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiMsgRsp::IsInitialized() const {
  return true;
}

void SLBgpApiMsgRsp::InternalSwap(SLBgpApiMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgpApiMsgRsp, correlator_)
      + sizeof(SLBgpApiMsgRsp::correlator_)
      - PROTOBUF_FIELD_OFFSET(SLBgpApiMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[16]);
}

// ===================================================================

class SLBgpApiMsg::_Internal {
 public:
  static const ::service_layer::SLBgpApiCapReq& bgpapicapreq(const SLBgpApiMsg* msg);
  static const ::service_layer::SLBgpApiGetReq& bgpapigetreq(const SLBgpApiMsg* msg);
  static const ::service_layer::SLBgpApiObjectReq& bgpapiobjectreq(const SLBgpApiMsg* msg);
};

const ::service_layer::SLBgpApiCapReq&
SLBgpApiMsg::_Internal::bgpapicapreq(const SLBgpApiMsg* msg) {
  return *msg->entry_.bgpapicapreq_;
}
const ::service_layer::SLBgpApiGetReq&
SLBgpApiMsg::_Internal::bgpapigetreq(const SLBgpApiMsg* msg) {
  return *msg->entry_.bgpapigetreq_;
}
const ::service_layer::SLBgpApiObjectReq&
SLBgpApiMsg::_Internal::bgpapiobjectreq(const SLBgpApiMsg* msg) {
  return *msg->entry_.bgpapiobjectreq_;
}
void SLBgpApiMsg::set_allocated_bgpapicapreq(::service_layer::SLBgpApiCapReq* bgpapicapreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (bgpapicapreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiCapReq>::GetOwningArena(bgpapicapreq);
    if (message_arena != submessage_arena) {
      bgpapicapreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpapicapreq, submessage_arena);
    }
    set_has_bgpapicapreq();
    entry_.bgpapicapreq_ = bgpapicapreq;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsg.BgpApiCapReq)
}
void SLBgpApiMsg::set_allocated_bgpapigetreq(::service_layer::SLBgpApiGetReq* bgpapigetreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (bgpapigetreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiGetReq>::GetOwningArena(bgpapigetreq);
    if (message_arena != submessage_arena) {
      bgpapigetreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpapigetreq, submessage_arena);
    }
    set_has_bgpapigetreq();
    entry_.bgpapigetreq_ = bgpapigetreq;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsg.BgpApiGetReq)
}
void SLBgpApiMsg::set_allocated_bgpapiobjectreq(::service_layer::SLBgpApiObjectReq* bgpapiobjectreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (bgpapiobjectreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiObjectReq>::GetOwningArena(bgpapiobjectreq);
    if (message_arena != submessage_arena) {
      bgpapiobjectreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpapiobjectreq, submessage_arena);
    }
    set_has_bgpapiobjectreq();
    entry_.bgpapiobjectreq_ = bgpapiobjectreq;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsg.BgpApiobjectReq)
}
SLBgpApiMsg::SLBgpApiMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpApiMsg)
}
SLBgpApiMsg::SLBgpApiMsg(const SLBgpApiMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlator_ = from.correlator_;
  clear_has_entry();
  switch (from.entry_case()) {
    case kBgpApiCapReq: {
      _internal_mutable_bgpapicapreq()->::service_layer::SLBgpApiCapReq::MergeFrom(from._internal_bgpapicapreq());
      break;
    }
    case kBgpApiGetReq: {
      _internal_mutable_bgpapigetreq()->::service_layer::SLBgpApiGetReq::MergeFrom(from._internal_bgpapigetreq());
      break;
    }
    case kBgpApiobjectReq: {
      _internal_mutable_bgpapiobjectreq()->::service_layer::SLBgpApiObjectReq::MergeFrom(from._internal_bgpapiobjectreq());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpApiMsg)
}

inline void SLBgpApiMsg::SharedCtor() {
correlator_ = uint64_t{0u};
clear_has_entry();
}

SLBgpApiMsg::~SLBgpApiMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpApiMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpApiMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void SLBgpApiMsg::ArenaDtor(void* object) {
  SLBgpApiMsg* _this = reinterpret_cast< SLBgpApiMsg* >(object);
  (void)_this;
}
void SLBgpApiMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpApiMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpApiMsg::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpApiMsg)
  switch (entry_case()) {
    case kBgpApiCapReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.bgpapicapreq_;
      }
      break;
    }
    case kBgpApiGetReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.bgpapigetreq_;
      }
      break;
    }
    case kBgpApiobjectReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.bgpapiobjectreq_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void SLBgpApiMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpApiMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlator_ = uint64_t{0u};
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpApiMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiCapReq BgpApiCapReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpapicapreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiGetReq BgpApiGetReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpapigetreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgpApiObjectReq BgpApiobjectReq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpapiobjectreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpApiMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpApiMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // .service_layer.SLBgpApiCapReq BgpApiCapReq = 2;
  if (_internal_has_bgpapicapreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bgpapicapreq(this), target, stream);
  }

  // .service_layer.SLBgpApiGetReq BgpApiGetReq = 3;
  if (_internal_has_bgpapigetreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bgpapigetreq(this), target, stream);
  }

  // .service_layer.SLBgpApiObjectReq BgpApiobjectReq = 4;
  if (_internal_has_bgpapiobjectreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bgpapiobjectreq(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpApiMsg)
  return target;
}

size_t SLBgpApiMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpApiMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_correlator());
  }

  switch (entry_case()) {
    // .service_layer.SLBgpApiCapReq BgpApiCapReq = 2;
    case kBgpApiCapReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.bgpapicapreq_);
      break;
    }
    // .service_layer.SLBgpApiGetReq BgpApiGetReq = 3;
    case kBgpApiGetReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.bgpapigetreq_);
      break;
    }
    // .service_layer.SLBgpApiObjectReq BgpApiobjectReq = 4;
    case kBgpApiobjectReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.bgpapiobjectreq_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpApiMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpApiMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpApiMsg::GetClassData() const { return &_class_data_; }

void SLBgpApiMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpApiMsg *>(to)->MergeFrom(
      static_cast<const SLBgpApiMsg &>(from));
}


void SLBgpApiMsg::MergeFrom(const SLBgpApiMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpApiMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  switch (from.entry_case()) {
    case kBgpApiCapReq: {
      _internal_mutable_bgpapicapreq()->::service_layer::SLBgpApiCapReq::MergeFrom(from._internal_bgpapicapreq());
      break;
    }
    case kBgpApiGetReq: {
      _internal_mutable_bgpapigetreq()->::service_layer::SLBgpApiGetReq::MergeFrom(from._internal_bgpapigetreq());
      break;
    }
    case kBgpApiobjectReq: {
      _internal_mutable_bgpapiobjectreq()->::service_layer::SLBgpApiObjectReq::MergeFrom(from._internal_bgpapiobjectreq());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpApiMsg::CopyFrom(const SLBgpApiMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpApiMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpApiMsg::IsInitialized() const {
  return true;
}

void SLBgpApiMsg::InternalSwap(SLBgpApiMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlator_, other->correlator_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpApiMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgp_2eproto_getter, &descriptor_table_sl_5fbgp_2eproto_once,
      file_level_metadata_sl_5fbgp_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiStatus* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpAfiSafi* Arena::CreateMaybeMessage< ::service_layer::SLBgpAfiSafi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpAfiSafi >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpFrrInfo* Arena::CreateMaybeMessage< ::service_layer::SLBgpFrrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpFrrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpBwId* Arena::CreateMaybeMessage< ::service_layer::SLBgpBwId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpBwId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpNeighborSafiParam* Arena::CreateMaybeMessage< ::service_layer::SLBgpNeighborSafiParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpNeighborSafiParam >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpNeighborSafiMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgpNeighborSafiMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpNeighborSafiMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpNeighborSafiList* Arena::CreateMaybeMessage< ::service_layer::SLBgpNeighborSafiList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpNeighborSafiList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpNeighborKey* Arena::CreateMaybeMessage< ::service_layer::SLBgpNeighborKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpNeighborKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpNeighborMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgpNeighborMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpNeighborMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiObject* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiObject >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiObjectResp* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiObjectResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiObjectResp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiObjectReq* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiObjectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiObjectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiGetResp* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiGetReq* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiCapResp* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiCapResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiCapResp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiCapReq* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiCapReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiCapReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpApiMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgpApiMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpApiMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
