// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bgp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fbgp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fbgp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fbgp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fbgp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbgp_2eproto;
namespace service_layer {
class SLBgpAfiSafi;
struct SLBgpAfiSafiDefaultTypeInternal;
extern SLBgpAfiSafiDefaultTypeInternal _SLBgpAfiSafi_default_instance_;
class SLBgpApiCapReq;
struct SLBgpApiCapReqDefaultTypeInternal;
extern SLBgpApiCapReqDefaultTypeInternal _SLBgpApiCapReq_default_instance_;
class SLBgpApiCapResp;
struct SLBgpApiCapRespDefaultTypeInternal;
extern SLBgpApiCapRespDefaultTypeInternal _SLBgpApiCapResp_default_instance_;
class SLBgpApiGetReq;
struct SLBgpApiGetReqDefaultTypeInternal;
extern SLBgpApiGetReqDefaultTypeInternal _SLBgpApiGetReq_default_instance_;
class SLBgpApiGetResp;
struct SLBgpApiGetRespDefaultTypeInternal;
extern SLBgpApiGetRespDefaultTypeInternal _SLBgpApiGetResp_default_instance_;
class SLBgpApiMsg;
struct SLBgpApiMsgDefaultTypeInternal;
extern SLBgpApiMsgDefaultTypeInternal _SLBgpApiMsg_default_instance_;
class SLBgpApiMsgRsp;
struct SLBgpApiMsgRspDefaultTypeInternal;
extern SLBgpApiMsgRspDefaultTypeInternal _SLBgpApiMsgRsp_default_instance_;
class SLBgpApiObject;
struct SLBgpApiObjectDefaultTypeInternal;
extern SLBgpApiObjectDefaultTypeInternal _SLBgpApiObject_default_instance_;
class SLBgpApiObjectReq;
struct SLBgpApiObjectReqDefaultTypeInternal;
extern SLBgpApiObjectReqDefaultTypeInternal _SLBgpApiObjectReq_default_instance_;
class SLBgpApiObjectResp;
struct SLBgpApiObjectRespDefaultTypeInternal;
extern SLBgpApiObjectRespDefaultTypeInternal _SLBgpApiObjectResp_default_instance_;
class SLBgpApiStatus;
struct SLBgpApiStatusDefaultTypeInternal;
extern SLBgpApiStatusDefaultTypeInternal _SLBgpApiStatus_default_instance_;
class SLBgpBwId;
struct SLBgpBwIdDefaultTypeInternal;
extern SLBgpBwIdDefaultTypeInternal _SLBgpBwId_default_instance_;
class SLBgpFrrInfo;
struct SLBgpFrrInfoDefaultTypeInternal;
extern SLBgpFrrInfoDefaultTypeInternal _SLBgpFrrInfo_default_instance_;
class SLBgpNeighborKey;
struct SLBgpNeighborKeyDefaultTypeInternal;
extern SLBgpNeighborKeyDefaultTypeInternal _SLBgpNeighborKey_default_instance_;
class SLBgpNeighborMsg;
struct SLBgpNeighborMsgDefaultTypeInternal;
extern SLBgpNeighborMsgDefaultTypeInternal _SLBgpNeighborMsg_default_instance_;
class SLBgpNeighborSafiList;
struct SLBgpNeighborSafiListDefaultTypeInternal;
extern SLBgpNeighborSafiListDefaultTypeInternal _SLBgpNeighborSafiList_default_instance_;
class SLBgpNeighborSafiMsg;
struct SLBgpNeighborSafiMsgDefaultTypeInternal;
extern SLBgpNeighborSafiMsgDefaultTypeInternal _SLBgpNeighborSafiMsg_default_instance_;
class SLBgpNeighborSafiParam;
struct SLBgpNeighborSafiParamDefaultTypeInternal;
extern SLBgpNeighborSafiParamDefaultTypeInternal _SLBgpNeighborSafiParam_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLBgpAfiSafi* Arena::CreateMaybeMessage<::service_layer::SLBgpAfiSafi>(Arena*);
template<> ::service_layer::SLBgpApiCapReq* Arena::CreateMaybeMessage<::service_layer::SLBgpApiCapReq>(Arena*);
template<> ::service_layer::SLBgpApiCapResp* Arena::CreateMaybeMessage<::service_layer::SLBgpApiCapResp>(Arena*);
template<> ::service_layer::SLBgpApiGetReq* Arena::CreateMaybeMessage<::service_layer::SLBgpApiGetReq>(Arena*);
template<> ::service_layer::SLBgpApiGetResp* Arena::CreateMaybeMessage<::service_layer::SLBgpApiGetResp>(Arena*);
template<> ::service_layer::SLBgpApiMsg* Arena::CreateMaybeMessage<::service_layer::SLBgpApiMsg>(Arena*);
template<> ::service_layer::SLBgpApiMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLBgpApiMsgRsp>(Arena*);
template<> ::service_layer::SLBgpApiObject* Arena::CreateMaybeMessage<::service_layer::SLBgpApiObject>(Arena*);
template<> ::service_layer::SLBgpApiObjectReq* Arena::CreateMaybeMessage<::service_layer::SLBgpApiObjectReq>(Arena*);
template<> ::service_layer::SLBgpApiObjectResp* Arena::CreateMaybeMessage<::service_layer::SLBgpApiObjectResp>(Arena*);
template<> ::service_layer::SLBgpApiStatus* Arena::CreateMaybeMessage<::service_layer::SLBgpApiStatus>(Arena*);
template<> ::service_layer::SLBgpBwId* Arena::CreateMaybeMessage<::service_layer::SLBgpBwId>(Arena*);
template<> ::service_layer::SLBgpFrrInfo* Arena::CreateMaybeMessage<::service_layer::SLBgpFrrInfo>(Arena*);
template<> ::service_layer::SLBgpNeighborKey* Arena::CreateMaybeMessage<::service_layer::SLBgpNeighborKey>(Arena*);
template<> ::service_layer::SLBgpNeighborMsg* Arena::CreateMaybeMessage<::service_layer::SLBgpNeighborMsg>(Arena*);
template<> ::service_layer::SLBgpNeighborSafiList* Arena::CreateMaybeMessage<::service_layer::SLBgpNeighborSafiList>(Arena*);
template<> ::service_layer::SLBgpNeighborSafiMsg* Arena::CreateMaybeMessage<::service_layer::SLBgpNeighborSafiMsg>(Arena*);
template<> ::service_layer::SLBgpNeighborSafiParam* Arena::CreateMaybeMessage<::service_layer::SLBgpNeighborSafiParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLBgpBwUnit : int {
  SL_BGP_UNIT_RESERVED = 0,
  SL_BGP_BYTES_PER_SEC = 1,
  SL_BGP_GIGA_BITS_PER_SEC = 2,
  SLBgpBwUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgpBwUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgpBwUnit_IsValid(int value);
constexpr SLBgpBwUnit SLBgpBwUnit_MIN = SL_BGP_UNIT_RESERVED;
constexpr SLBgpBwUnit SLBgpBwUnit_MAX = SL_BGP_GIGA_BITS_PER_SEC;
constexpr int SLBgpBwUnit_ARRAYSIZE = SLBgpBwUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpBwUnit_descriptor();
template<typename T>
inline const std::string& SLBgpBwUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgpBwUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgpBwUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgpBwUnit_descriptor(), enum_t_value);
}
inline bool SLBgpBwUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgpBwUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgpBwUnit>(
    SLBgpBwUnit_descriptor(), name, value);
}
enum SLBgpAfi : int {
  SL_BGP_AFI_RESERVED = 0,
  SL_BGP_AFI_IPV4 = 1,
  SL_BGP_AFI_IPV6 = 2,
  SLBgpAfi_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgpAfi_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgpAfi_IsValid(int value);
constexpr SLBgpAfi SLBgpAfi_MIN = SL_BGP_AFI_RESERVED;
constexpr SLBgpAfi SLBgpAfi_MAX = SL_BGP_AFI_IPV6;
constexpr int SLBgpAfi_ARRAYSIZE = SLBgpAfi_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpAfi_descriptor();
template<typename T>
inline const std::string& SLBgpAfi_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgpAfi>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgpAfi_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgpAfi_descriptor(), enum_t_value);
}
inline bool SLBgpAfi_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgpAfi* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgpAfi>(
    SLBgpAfi_descriptor(), name, value);
}
enum SLBgpSafi : int {
  SL_BGP_SAFI_RESERVED = 0,
  SL_BGP_SAFI_UNICAST = 1,
  SLBgpSafi_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgpSafi_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgpSafi_IsValid(int value);
constexpr SLBgpSafi SLBgpSafi_MIN = SL_BGP_SAFI_RESERVED;
constexpr SLBgpSafi SLBgpSafi_MAX = SL_BGP_SAFI_UNICAST;
constexpr int SLBgpSafi_ARRAYSIZE = SLBgpSafi_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpSafi_descriptor();
template<typename T>
inline const std::string& SLBgpSafi_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgpSafi>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgpSafi_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgpSafi_descriptor(), enum_t_value);
}
inline bool SLBgpSafi_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgpSafi* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgpSafi>(
    SLBgpSafi_descriptor(), name, value);
}
enum SLBgpApiObjectType : int {
  SL_BGP_API_RESERVED_OBJECT_TYPE = 0,
  SL_BGP_API_NEIGHBOR_OBJECT_TYPE = 1,
  SLBgpApiObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgpApiObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgpApiObjectType_IsValid(int value);
constexpr SLBgpApiObjectType SLBgpApiObjectType_MIN = SL_BGP_API_RESERVED_OBJECT_TYPE;
constexpr SLBgpApiObjectType SLBgpApiObjectType_MAX = SL_BGP_API_NEIGHBOR_OBJECT_TYPE;
constexpr int SLBgpApiObjectType_ARRAYSIZE = SLBgpApiObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpApiObjectType_descriptor();
template<typename T>
inline const std::string& SLBgpApiObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgpApiObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgpApiObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgpApiObjectType_descriptor(), enum_t_value);
}
inline bool SLBgpApiObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgpApiObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgpApiObjectType>(
    SLBgpApiObjectType_descriptor(), name, value);
}
enum SLBgpApiObjectOp : int {
  SL_BGP_OP_RESERVED = 0,
  SL_BGP_OP_UPDATE = 1,
  SL_BGP_OP_DELETE = 2,
  SLBgpApiObjectOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgpApiObjectOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgpApiObjectOp_IsValid(int value);
constexpr SLBgpApiObjectOp SLBgpApiObjectOp_MIN = SL_BGP_OP_RESERVED;
constexpr SLBgpApiObjectOp SLBgpApiObjectOp_MAX = SL_BGP_OP_DELETE;
constexpr int SLBgpApiObjectOp_ARRAYSIZE = SLBgpApiObjectOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpApiObjectOp_descriptor();
template<typename T>
inline const std::string& SLBgpApiObjectOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgpApiObjectOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgpApiObjectOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgpApiObjectOp_descriptor(), enum_t_value);
}
inline bool SLBgpApiObjectOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgpApiObjectOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgpApiObjectOp>(
    SLBgpApiObjectOp_descriptor(), name, value);
}
enum SLBgpApiStateType : int {
  SL_BGP_API_FORWARD_REF = 0,
  SL_BGP_API_APPLIED = 1,
  SL_BGP_API_STATE_UNKNOWN = 2,
  SLBgpApiStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgpApiStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgpApiStateType_IsValid(int value);
constexpr SLBgpApiStateType SLBgpApiStateType_MIN = SL_BGP_API_FORWARD_REF;
constexpr SLBgpApiStateType SLBgpApiStateType_MAX = SL_BGP_API_STATE_UNKNOWN;
constexpr int SLBgpApiStateType_ARRAYSIZE = SLBgpApiStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgpApiStateType_descriptor();
template<typename T>
inline const std::string& SLBgpApiStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgpApiStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgpApiStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgpApiStateType_descriptor(), enum_t_value);
}
inline bool SLBgpApiStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgpApiStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgpApiStateType>(
    SLBgpApiStateType_descriptor(), name, value);
}
// ===================================================================

class SLBgpApiStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiStatus) */ {
 public:
  inline SLBgpApiStatus() : SLBgpApiStatus(nullptr) {}
  ~SLBgpApiStatus() override;
  explicit constexpr SLBgpApiStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiStatus(const SLBgpApiStatus& from);
  SLBgpApiStatus(SLBgpApiStatus&& from) noexcept
    : SLBgpApiStatus() {
    *this = ::std::move(from);
  }

  inline SLBgpApiStatus& operator=(const SLBgpApiStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiStatus& operator=(SLBgpApiStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpApiStatus* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiStatus*>(
               &_SLBgpApiStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLBgpApiStatus& a, SLBgpApiStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiStatus";
  }
  protected:
  explicit SLBgpApiStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kOperationIdFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .service_layer.SLErrorStatus Status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::service_layer::SLErrorStatus& status() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_status();
  ::service_layer::SLErrorStatus* mutable_status();
  void set_allocated_status(::service_layer::SLErrorStatus* status);
  private:
  const ::service_layer::SLErrorStatus& _internal_status() const;
  ::service_layer::SLErrorStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::service_layer::SLErrorStatus* status);
  ::service_layer::SLErrorStatus* unsafe_arena_release_status();

  // uint64 OperationId = 3;
  void clear_operationid();
  uint64_t operationid() const;
  void set_operationid(uint64_t value);
  private:
  uint64_t _internal_operationid() const;
  void _internal_set_operationid(uint64_t value);
  public:

  // .service_layer.SLBgpApiStateType State = 2;
  void clear_state();
  ::service_layer::SLBgpApiStateType state() const;
  void set_state(::service_layer::SLBgpApiStateType value);
  private:
  ::service_layer::SLBgpApiStateType _internal_state() const;
  void _internal_set_state(::service_layer::SLBgpApiStateType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* status_;
  uint64_t operationid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpAfiSafi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpAfiSafi) */ {
 public:
  inline SLBgpAfiSafi() : SLBgpAfiSafi(nullptr) {}
  ~SLBgpAfiSafi() override;
  explicit constexpr SLBgpAfiSafi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpAfiSafi(const SLBgpAfiSafi& from);
  SLBgpAfiSafi(SLBgpAfiSafi&& from) noexcept
    : SLBgpAfiSafi() {
    *this = ::std::move(from);
  }

  inline SLBgpAfiSafi& operator=(const SLBgpAfiSafi& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpAfiSafi& operator=(SLBgpAfiSafi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpAfiSafi& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpAfiSafi* internal_default_instance() {
    return reinterpret_cast<const SLBgpAfiSafi*>(
               &_SLBgpAfiSafi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLBgpAfiSafi& a, SLBgpAfiSafi& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpAfiSafi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpAfiSafi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpAfiSafi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpAfiSafi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpAfiSafi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpAfiSafi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpAfiSafi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpAfiSafi";
  }
  protected:
  explicit SLBgpAfiSafi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfiFieldNumber = 1,
    kSafiFieldNumber = 2,
  };
  // .service_layer.SLBgpAfi Afi = 1;
  void clear_afi();
  ::service_layer::SLBgpAfi afi() const;
  void set_afi(::service_layer::SLBgpAfi value);
  private:
  ::service_layer::SLBgpAfi _internal_afi() const;
  void _internal_set_afi(::service_layer::SLBgpAfi value);
  public:

  // .service_layer.SLBgpSafi Safi = 2;
  void clear_safi();
  ::service_layer::SLBgpSafi safi() const;
  void set_safi(::service_layer::SLBgpSafi value);
  private:
  ::service_layer::SLBgpSafi _internal_safi() const;
  void _internal_set_safi(::service_layer::SLBgpSafi value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpAfiSafi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int afi_;
  int safi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpFrrInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpFrrInfo) */ {
 public:
  inline SLBgpFrrInfo() : SLBgpFrrInfo(nullptr) {}
  ~SLBgpFrrInfo() override;
  explicit constexpr SLBgpFrrInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpFrrInfo(const SLBgpFrrInfo& from);
  SLBgpFrrInfo(SLBgpFrrInfo&& from) noexcept
    : SLBgpFrrInfo() {
    *this = ::std::move(from);
  }

  inline SLBgpFrrInfo& operator=(const SLBgpFrrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpFrrInfo& operator=(SLBgpFrrInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpFrrInfo& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kAddr = 1,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpFrrInfo* internal_default_instance() {
    return reinterpret_cast<const SLBgpFrrInfo*>(
               &_SLBgpFrrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLBgpFrrInfo& a, SLBgpFrrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpFrrInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpFrrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpFrrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpFrrInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpFrrInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpFrrInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpFrrInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpFrrInfo";
  }
  protected:
  explicit SLBgpFrrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectStatusFieldNumber = 2,
    kAddrFieldNumber = 1,
  };
  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  bool has_objectstatus() const;
  private:
  bool _internal_has_objectstatus() const;
  public:
  void clear_objectstatus();
  const ::service_layer::SLBgpApiStatus& objectstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiStatus* release_objectstatus();
  ::service_layer::SLBgpApiStatus* mutable_objectstatus();
  void set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus);
  private:
  const ::service_layer::SLBgpApiStatus& _internal_objectstatus() const;
  ::service_layer::SLBgpApiStatus* _internal_mutable_objectstatus();
  public:
  void unsafe_arena_set_allocated_objectstatus(
      ::service_layer::SLBgpApiStatus* objectstatus);
  ::service_layer::SLBgpApiStatus* unsafe_arena_release_objectstatus();

  // .service_layer.SLIpAddress Addr = 1;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const ::service_layer::SLIpAddress& addr() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpAddress* release_addr();
  ::service_layer::SLIpAddress* mutable_addr();
  void set_allocated_addr(::service_layer::SLIpAddress* addr);
  private:
  const ::service_layer::SLIpAddress& _internal_addr() const;
  ::service_layer::SLIpAddress* _internal_mutable_addr();
  public:
  void unsafe_arena_set_allocated_addr(
      ::service_layer::SLIpAddress* addr);
  ::service_layer::SLIpAddress* unsafe_arena_release_addr();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpFrrInfo)
 private:
  class _Internal;
  void set_has_addr();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgpApiStatus* objectstatus_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLIpAddress* addr_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpBwId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpBwId) */ {
 public:
  inline SLBgpBwId() : SLBgpBwId(nullptr) {}
  ~SLBgpBwId() override;
  explicit constexpr SLBgpBwId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpBwId(const SLBgpBwId& from);
  SLBgpBwId(SLBgpBwId&& from) noexcept
    : SLBgpBwId() {
    *this = ::std::move(from);
  }

  inline SLBgpBwId& operator=(const SLBgpBwId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpBwId& operator=(SLBgpBwId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpBwId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpBwId* internal_default_instance() {
    return reinterpret_cast<const SLBgpBwId*>(
               &_SLBgpBwId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLBgpBwId& a, SLBgpBwId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpBwId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpBwId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpBwId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpBwId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpBwId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpBwId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpBwId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpBwId";
  }
  protected:
  explicit SLBgpBwId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectStatusFieldNumber = 5,
    kLinkBwFieldNumber = 2,
    kBwIdFieldNumber = 1,
    kBwUnitFieldNumber = 3,
    kAsnFieldNumber = 4,
  };
  // .service_layer.SLBgpApiStatus ObjectStatus = 5;
  bool has_objectstatus() const;
  private:
  bool _internal_has_objectstatus() const;
  public:
  void clear_objectstatus();
  const ::service_layer::SLBgpApiStatus& objectstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiStatus* release_objectstatus();
  ::service_layer::SLBgpApiStatus* mutable_objectstatus();
  void set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus);
  private:
  const ::service_layer::SLBgpApiStatus& _internal_objectstatus() const;
  ::service_layer::SLBgpApiStatus* _internal_mutable_objectstatus();
  public:
  void unsafe_arena_set_allocated_objectstatus(
      ::service_layer::SLBgpApiStatus* objectstatus);
  ::service_layer::SLBgpApiStatus* unsafe_arena_release_objectstatus();

  // uint64 LinkBw = 2;
  void clear_linkbw();
  uint64_t linkbw() const;
  void set_linkbw(uint64_t value);
  private:
  uint64_t _internal_linkbw() const;
  void _internal_set_linkbw(uint64_t value);
  public:

  // uint32 BwId = 1;
  void clear_bwid();
  uint32_t bwid() const;
  void set_bwid(uint32_t value);
  private:
  uint32_t _internal_bwid() const;
  void _internal_set_bwid(uint32_t value);
  public:

  // .service_layer.SLBgpBwUnit BwUnit = 3;
  void clear_bwunit();
  ::service_layer::SLBgpBwUnit bwunit() const;
  void set_bwunit(::service_layer::SLBgpBwUnit value);
  private:
  ::service_layer::SLBgpBwUnit _internal_bwunit() const;
  void _internal_set_bwunit(::service_layer::SLBgpBwUnit value);
  public:

  // uint32 Asn = 4;
  void clear_asn();
  uint32_t asn() const;
  void set_asn(uint32_t value);
  private:
  uint32_t _internal_asn() const;
  void _internal_set_asn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpBwId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgpApiStatus* objectstatus_;
  uint64_t linkbw_;
  uint32_t bwid_;
  int bwunit_;
  uint32_t asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpNeighborSafiParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpNeighborSafiParam) */ {
 public:
  inline SLBgpNeighborSafiParam() : SLBgpNeighborSafiParam(nullptr) {}
  ~SLBgpNeighborSafiParam() override;
  explicit constexpr SLBgpNeighborSafiParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpNeighborSafiParam(const SLBgpNeighborSafiParam& from);
  SLBgpNeighborSafiParam(SLBgpNeighborSafiParam&& from) noexcept
    : SLBgpNeighborSafiParam() {
    *this = ::std::move(from);
  }

  inline SLBgpNeighborSafiParam& operator=(const SLBgpNeighborSafiParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpNeighborSafiParam& operator=(SLBgpNeighborSafiParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpNeighborSafiParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpNeighborSafiParam* internal_default_instance() {
    return reinterpret_cast<const SLBgpNeighborSafiParam*>(
               &_SLBgpNeighborSafiParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLBgpNeighborSafiParam& a, SLBgpNeighborSafiParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpNeighborSafiParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpNeighborSafiParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpNeighborSafiParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpNeighborSafiParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpNeighborSafiParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpNeighborSafiParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpNeighborSafiParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpNeighborSafiParam";
  }
  protected:
  explicit SLBgpNeighborSafiParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutBwIdsFieldNumber = 1,
    kInBwIdsFieldNumber = 2,
    kPerLinkMpathBkupFieldNumber = 3,
  };
  // repeated .service_layer.SLBgpBwId OutBwIds = 1;
  int outbwids_size() const;
  private:
  int _internal_outbwids_size() const;
  public:
  void clear_outbwids();
  ::service_layer::SLBgpBwId* mutable_outbwids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >*
      mutable_outbwids();
  private:
  const ::service_layer::SLBgpBwId& _internal_outbwids(int index) const;
  ::service_layer::SLBgpBwId* _internal_add_outbwids();
  public:
  const ::service_layer::SLBgpBwId& outbwids(int index) const;
  ::service_layer::SLBgpBwId* add_outbwids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >&
      outbwids() const;

  // repeated .service_layer.SLBgpBwId InBwIds = 2;
  int inbwids_size() const;
  private:
  int _internal_inbwids_size() const;
  public:
  void clear_inbwids();
  ::service_layer::SLBgpBwId* mutable_inbwids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >*
      mutable_inbwids();
  private:
  const ::service_layer::SLBgpBwId& _internal_inbwids(int index) const;
  ::service_layer::SLBgpBwId* _internal_add_inbwids();
  public:
  const ::service_layer::SLBgpBwId& inbwids(int index) const;
  ::service_layer::SLBgpBwId* add_inbwids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >&
      inbwids() const;

  // .service_layer.SLBgpFrrInfo PerLinkMpathBkup = 3;
  bool has_perlinkmpathbkup() const;
  private:
  bool _internal_has_perlinkmpathbkup() const;
  public:
  void clear_perlinkmpathbkup();
  const ::service_layer::SLBgpFrrInfo& perlinkmpathbkup() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpFrrInfo* release_perlinkmpathbkup();
  ::service_layer::SLBgpFrrInfo* mutable_perlinkmpathbkup();
  void set_allocated_perlinkmpathbkup(::service_layer::SLBgpFrrInfo* perlinkmpathbkup);
  private:
  const ::service_layer::SLBgpFrrInfo& _internal_perlinkmpathbkup() const;
  ::service_layer::SLBgpFrrInfo* _internal_mutable_perlinkmpathbkup();
  public:
  void unsafe_arena_set_allocated_perlinkmpathbkup(
      ::service_layer::SLBgpFrrInfo* perlinkmpathbkup);
  ::service_layer::SLBgpFrrInfo* unsafe_arena_release_perlinkmpathbkup();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpNeighborSafiParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId > outbwids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId > inbwids_;
  ::service_layer::SLBgpFrrInfo* perlinkmpathbkup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpNeighborSafiMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpNeighborSafiMsg) */ {
 public:
  inline SLBgpNeighborSafiMsg() : SLBgpNeighborSafiMsg(nullptr) {}
  ~SLBgpNeighborSafiMsg() override;
  explicit constexpr SLBgpNeighborSafiMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpNeighborSafiMsg(const SLBgpNeighborSafiMsg& from);
  SLBgpNeighborSafiMsg(SLBgpNeighborSafiMsg&& from) noexcept
    : SLBgpNeighborSafiMsg() {
    *this = ::std::move(from);
  }

  inline SLBgpNeighborSafiMsg& operator=(const SLBgpNeighborSafiMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpNeighborSafiMsg& operator=(SLBgpNeighborSafiMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpNeighborSafiMsg& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kSafiParam = 3,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpNeighborSafiMsg* internal_default_instance() {
    return reinterpret_cast<const SLBgpNeighborSafiMsg*>(
               &_SLBgpNeighborSafiMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLBgpNeighborSafiMsg& a, SLBgpNeighborSafiMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpNeighborSafiMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpNeighborSafiMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpNeighborSafiMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpNeighborSafiMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpNeighborSafiMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpNeighborSafiMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpNeighborSafiMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpNeighborSafiMsg";
  }
  protected:
  explicit SLBgpNeighborSafiMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfiSafiFieldNumber = 1,
    kObjectStatusFieldNumber = 2,
    kSafiParamFieldNumber = 3,
  };
  // .service_layer.SLBgpAfiSafi AfiSafi = 1;
  bool has_afisafi() const;
  private:
  bool _internal_has_afisafi() const;
  public:
  void clear_afisafi();
  const ::service_layer::SLBgpAfiSafi& afisafi() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpAfiSafi* release_afisafi();
  ::service_layer::SLBgpAfiSafi* mutable_afisafi();
  void set_allocated_afisafi(::service_layer::SLBgpAfiSafi* afisafi);
  private:
  const ::service_layer::SLBgpAfiSafi& _internal_afisafi() const;
  ::service_layer::SLBgpAfiSafi* _internal_mutable_afisafi();
  public:
  void unsafe_arena_set_allocated_afisafi(
      ::service_layer::SLBgpAfiSafi* afisafi);
  ::service_layer::SLBgpAfiSafi* unsafe_arena_release_afisafi();

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  bool has_objectstatus() const;
  private:
  bool _internal_has_objectstatus() const;
  public:
  void clear_objectstatus();
  const ::service_layer::SLBgpApiStatus& objectstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiStatus* release_objectstatus();
  ::service_layer::SLBgpApiStatus* mutable_objectstatus();
  void set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus);
  private:
  const ::service_layer::SLBgpApiStatus& _internal_objectstatus() const;
  ::service_layer::SLBgpApiStatus* _internal_mutable_objectstatus();
  public:
  void unsafe_arena_set_allocated_objectstatus(
      ::service_layer::SLBgpApiStatus* objectstatus);
  ::service_layer::SLBgpApiStatus* unsafe_arena_release_objectstatus();

  // .service_layer.SLBgpNeighborSafiParam SafiParam = 3;
  bool has_safiparam() const;
  private:
  bool _internal_has_safiparam() const;
  public:
  void clear_safiparam();
  const ::service_layer::SLBgpNeighborSafiParam& safiparam() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpNeighborSafiParam* release_safiparam();
  ::service_layer::SLBgpNeighborSafiParam* mutable_safiparam();
  void set_allocated_safiparam(::service_layer::SLBgpNeighborSafiParam* safiparam);
  private:
  const ::service_layer::SLBgpNeighborSafiParam& _internal_safiparam() const;
  ::service_layer::SLBgpNeighborSafiParam* _internal_mutable_safiparam();
  public:
  void unsafe_arena_set_allocated_safiparam(
      ::service_layer::SLBgpNeighborSafiParam* safiparam);
  ::service_layer::SLBgpNeighborSafiParam* unsafe_arena_release_safiparam();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpNeighborSafiMsg)
 private:
  class _Internal;
  void set_has_safiparam();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgpAfiSafi* afisafi_;
  ::service_layer::SLBgpApiStatus* objectstatus_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgpNeighborSafiParam* safiparam_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpNeighborSafiList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpNeighborSafiList) */ {
 public:
  inline SLBgpNeighborSafiList() : SLBgpNeighborSafiList(nullptr) {}
  ~SLBgpNeighborSafiList() override;
  explicit constexpr SLBgpNeighborSafiList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpNeighborSafiList(const SLBgpNeighborSafiList& from);
  SLBgpNeighborSafiList(SLBgpNeighborSafiList&& from) noexcept
    : SLBgpNeighborSafiList() {
    *this = ::std::move(from);
  }

  inline SLBgpNeighborSafiList& operator=(const SLBgpNeighborSafiList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpNeighborSafiList& operator=(SLBgpNeighborSafiList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpNeighborSafiList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpNeighborSafiList* internal_default_instance() {
    return reinterpret_cast<const SLBgpNeighborSafiList*>(
               &_SLBgpNeighborSafiList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLBgpNeighborSafiList& a, SLBgpNeighborSafiList& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpNeighborSafiList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpNeighborSafiList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpNeighborSafiList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpNeighborSafiList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpNeighborSafiList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpNeighborSafiList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpNeighborSafiList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpNeighborSafiList";
  }
  protected:
  explicit SLBgpNeighborSafiList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborSafisFieldNumber = 1,
  };
  // repeated .service_layer.SLBgpNeighborSafiMsg NeighborSafis = 1;
  int neighborsafis_size() const;
  private:
  int _internal_neighborsafis_size() const;
  public:
  void clear_neighborsafis();
  ::service_layer::SLBgpNeighborSafiMsg* mutable_neighborsafis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpNeighborSafiMsg >*
      mutable_neighborsafis();
  private:
  const ::service_layer::SLBgpNeighborSafiMsg& _internal_neighborsafis(int index) const;
  ::service_layer::SLBgpNeighborSafiMsg* _internal_add_neighborsafis();
  public:
  const ::service_layer::SLBgpNeighborSafiMsg& neighborsafis(int index) const;
  ::service_layer::SLBgpNeighborSafiMsg* add_neighborsafis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpNeighborSafiMsg >&
      neighborsafis() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpNeighborSafiList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpNeighborSafiMsg > neighborsafis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpNeighborKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpNeighborKey) */ {
 public:
  inline SLBgpNeighborKey() : SLBgpNeighborKey(nullptr) {}
  ~SLBgpNeighborKey() override;
  explicit constexpr SLBgpNeighborKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpNeighborKey(const SLBgpNeighborKey& from);
  SLBgpNeighborKey(SLBgpNeighborKey&& from) noexcept
    : SLBgpNeighborKey() {
    *this = ::std::move(from);
  }

  inline SLBgpNeighborKey& operator=(const SLBgpNeighborKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpNeighborKey& operator=(SLBgpNeighborKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpNeighborKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpNeighborKey* internal_default_instance() {
    return reinterpret_cast<const SLBgpNeighborKey*>(
               &_SLBgpNeighborKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLBgpNeighborKey& a, SLBgpNeighborKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpNeighborKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpNeighborKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpNeighborKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpNeighborKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpNeighborKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpNeighborKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpNeighborKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpNeighborKey";
  }
  protected:
  explicit SLBgpNeighborKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrfname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrfname();
  PROTOBUF_NODISCARD std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLIpAddress Address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::service_layer::SLIpAddress& address() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpAddress* release_address();
  ::service_layer::SLIpAddress* mutable_address();
  void set_allocated_address(::service_layer::SLIpAddress* address);
  private:
  const ::service_layer::SLIpAddress& _internal_address() const;
  ::service_layer::SLIpAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::service_layer::SLIpAddress* address);
  ::service_layer::SLIpAddress* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpNeighborKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLIpAddress* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpNeighborMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpNeighborMsg) */ {
 public:
  inline SLBgpNeighborMsg() : SLBgpNeighborMsg(nullptr) {}
  ~SLBgpNeighborMsg() override;
  explicit constexpr SLBgpNeighborMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpNeighborMsg(const SLBgpNeighborMsg& from);
  SLBgpNeighborMsg(SLBgpNeighborMsg&& from) noexcept
    : SLBgpNeighborMsg() {
    *this = ::std::move(from);
  }

  inline SLBgpNeighborMsg& operator=(const SLBgpNeighborMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpNeighborMsg& operator=(SLBgpNeighborMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpNeighborMsg& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kNeighborSafiList = 3,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpNeighborMsg* internal_default_instance() {
    return reinterpret_cast<const SLBgpNeighborMsg*>(
               &_SLBgpNeighborMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLBgpNeighborMsg& a, SLBgpNeighborMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpNeighborMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpNeighborMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpNeighborMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpNeighborMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpNeighborMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpNeighborMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpNeighborMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpNeighborMsg";
  }
  protected:
  explicit SLBgpNeighborMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborKeyFieldNumber = 1,
    kObjectStatusFieldNumber = 2,
    kNeighborSafiListFieldNumber = 3,
  };
  // .service_layer.SLBgpNeighborKey NeighborKey = 1;
  bool has_neighborkey() const;
  private:
  bool _internal_has_neighborkey() const;
  public:
  void clear_neighborkey();
  const ::service_layer::SLBgpNeighborKey& neighborkey() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpNeighborKey* release_neighborkey();
  ::service_layer::SLBgpNeighborKey* mutable_neighborkey();
  void set_allocated_neighborkey(::service_layer::SLBgpNeighborKey* neighborkey);
  private:
  const ::service_layer::SLBgpNeighborKey& _internal_neighborkey() const;
  ::service_layer::SLBgpNeighborKey* _internal_mutable_neighborkey();
  public:
  void unsafe_arena_set_allocated_neighborkey(
      ::service_layer::SLBgpNeighborKey* neighborkey);
  ::service_layer::SLBgpNeighborKey* unsafe_arena_release_neighborkey();

  // .service_layer.SLBgpApiStatus ObjectStatus = 2;
  bool has_objectstatus() const;
  private:
  bool _internal_has_objectstatus() const;
  public:
  void clear_objectstatus();
  const ::service_layer::SLBgpApiStatus& objectstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiStatus* release_objectstatus();
  ::service_layer::SLBgpApiStatus* mutable_objectstatus();
  void set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus);
  private:
  const ::service_layer::SLBgpApiStatus& _internal_objectstatus() const;
  ::service_layer::SLBgpApiStatus* _internal_mutable_objectstatus();
  public:
  void unsafe_arena_set_allocated_objectstatus(
      ::service_layer::SLBgpApiStatus* objectstatus);
  ::service_layer::SLBgpApiStatus* unsafe_arena_release_objectstatus();

  // .service_layer.SLBgpNeighborSafiList NeighborSafiList = 3;
  bool has_neighborsafilist() const;
  private:
  bool _internal_has_neighborsafilist() const;
  public:
  void clear_neighborsafilist();
  const ::service_layer::SLBgpNeighborSafiList& neighborsafilist() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpNeighborSafiList* release_neighborsafilist();
  ::service_layer::SLBgpNeighborSafiList* mutable_neighborsafilist();
  void set_allocated_neighborsafilist(::service_layer::SLBgpNeighborSafiList* neighborsafilist);
  private:
  const ::service_layer::SLBgpNeighborSafiList& _internal_neighborsafilist() const;
  ::service_layer::SLBgpNeighborSafiList* _internal_mutable_neighborsafilist();
  public:
  void unsafe_arena_set_allocated_neighborsafilist(
      ::service_layer::SLBgpNeighborSafiList* neighborsafilist);
  ::service_layer::SLBgpNeighborSafiList* unsafe_arena_release_neighborsafilist();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpNeighborMsg)
 private:
  class _Internal;
  void set_has_neighborsafilist();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgpNeighborKey* neighborkey_;
  ::service_layer::SLBgpApiStatus* objectstatus_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgpNeighborSafiList* neighborsafilist_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiObject) */ {
 public:
  inline SLBgpApiObject() : SLBgpApiObject(nullptr) {}
  ~SLBgpApiObject() override;
  explicit constexpr SLBgpApiObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiObject(const SLBgpApiObject& from);
  SLBgpApiObject(SLBgpApiObject&& from) noexcept
    : SLBgpApiObject() {
    *this = ::std::move(from);
  }

  inline SLBgpApiObject& operator=(const SLBgpApiObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiObject& operator=(SLBgpApiObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiObject& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kNeighbor = 2,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpApiObject* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiObject*>(
               &_SLBgpApiObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLBgpApiObject& a, SLBgpApiObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiObject";
  }
  protected:
  explicit SLBgpApiObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTypeFieldNumber = 1,
    kNeighborFieldNumber = 2,
  };
  // .service_layer.SLBgpApiObjectType ObjectType = 1;
  void clear_objecttype();
  ::service_layer::SLBgpApiObjectType objecttype() const;
  void set_objecttype(::service_layer::SLBgpApiObjectType value);
  private:
  ::service_layer::SLBgpApiObjectType _internal_objecttype() const;
  void _internal_set_objecttype(::service_layer::SLBgpApiObjectType value);
  public:

  // .service_layer.SLBgpNeighborMsg Neighbor = 2;
  bool has_neighbor() const;
  private:
  bool _internal_has_neighbor() const;
  public:
  void clear_neighbor();
  const ::service_layer::SLBgpNeighborMsg& neighbor() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpNeighborMsg* release_neighbor();
  ::service_layer::SLBgpNeighborMsg* mutable_neighbor();
  void set_allocated_neighbor(::service_layer::SLBgpNeighborMsg* neighbor);
  private:
  const ::service_layer::SLBgpNeighborMsg& _internal_neighbor() const;
  ::service_layer::SLBgpNeighborMsg* _internal_mutable_neighbor();
  public:
  void unsafe_arena_set_allocated_neighbor(
      ::service_layer::SLBgpNeighborMsg* neighbor);
  ::service_layer::SLBgpNeighborMsg* unsafe_arena_release_neighbor();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiObject)
 private:
  class _Internal;
  void set_has_neighbor();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int objecttype_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgpNeighborMsg* neighbor_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiObjectResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiObjectResp) */ {
 public:
  inline SLBgpApiObjectResp() : SLBgpApiObjectResp(nullptr) {}
  ~SLBgpApiObjectResp() override;
  explicit constexpr SLBgpApiObjectResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiObjectResp(const SLBgpApiObjectResp& from);
  SLBgpApiObjectResp(SLBgpApiObjectResp&& from) noexcept
    : SLBgpApiObjectResp() {
    *this = ::std::move(from);
  }

  inline SLBgpApiObjectResp& operator=(const SLBgpApiObjectResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiObjectResp& operator=(SLBgpApiObjectResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiObjectResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpApiObjectResp* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiObjectResp*>(
               &_SLBgpApiObjectResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLBgpApiObjectResp& a, SLBgpApiObjectResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiObjectResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiObjectResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiObjectResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiObjectResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiObjectResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiObjectResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiObjectResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiObjectResp";
  }
  protected:
  explicit SLBgpApiObjectResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpApiobjectsFieldNumber = 3,
    kBgpInstanceNameFieldNumber = 1,
    kStatusSummaryFieldNumber = 2,
  };
  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 3;
  int bgpapiobjects_size() const;
  private:
  int _internal_bgpapiobjects_size() const;
  public:
  void clear_bgpapiobjects();
  ::service_layer::SLBgpApiObject* mutable_bgpapiobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >*
      mutable_bgpapiobjects();
  private:
  const ::service_layer::SLBgpApiObject& _internal_bgpapiobjects(int index) const;
  ::service_layer::SLBgpApiObject* _internal_add_bgpapiobjects();
  public:
  const ::service_layer::SLBgpApiObject& bgpapiobjects(int index) const;
  ::service_layer::SLBgpApiObject* add_bgpapiobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >&
      bgpapiobjects() const;

  // string BgpInstanceName = 1;
  void clear_bgpinstancename();
  const std::string& bgpinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgpinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgpinstancename();
  PROTOBUF_NODISCARD std::string* release_bgpinstancename();
  void set_allocated_bgpinstancename(std::string* bgpinstancename);
  private:
  const std::string& _internal_bgpinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgpinstancename(const std::string& value);
  std::string* _internal_mutable_bgpinstancename();
  public:

  // .service_layer.SLBgpApiStatus StatusSummary = 2;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLBgpApiStatus& statussummary() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiStatus* release_statussummary();
  ::service_layer::SLBgpApiStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLBgpApiStatus* statussummary);
  private:
  const ::service_layer::SLBgpApiStatus& _internal_statussummary() const;
  ::service_layer::SLBgpApiStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLBgpApiStatus* statussummary);
  ::service_layer::SLBgpApiStatus* unsafe_arena_release_statussummary();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiObjectResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject > bgpapiobjects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgpinstancename_;
  ::service_layer::SLBgpApiStatus* statussummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiObjectReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiObjectReq) */ {
 public:
  inline SLBgpApiObjectReq() : SLBgpApiObjectReq(nullptr) {}
  ~SLBgpApiObjectReq() override;
  explicit constexpr SLBgpApiObjectReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiObjectReq(const SLBgpApiObjectReq& from);
  SLBgpApiObjectReq(SLBgpApiObjectReq&& from) noexcept
    : SLBgpApiObjectReq() {
    *this = ::std::move(from);
  }

  inline SLBgpApiObjectReq& operator=(const SLBgpApiObjectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiObjectReq& operator=(SLBgpApiObjectReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiObjectReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpApiObjectReq* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiObjectReq*>(
               &_SLBgpApiObjectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SLBgpApiObjectReq& a, SLBgpApiObjectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiObjectReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiObjectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiObjectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiObjectReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiObjectReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiObjectReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiObjectReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiObjectReq";
  }
  protected:
  explicit SLBgpApiObjectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpApiobjectsFieldNumber = 4,
    kBgpInstanceNameFieldNumber = 3,
    kOperationIdFieldNumber = 1,
    kOperFieldNumber = 2,
  };
  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
  int bgpapiobjects_size() const;
  private:
  int _internal_bgpapiobjects_size() const;
  public:
  void clear_bgpapiobjects();
  ::service_layer::SLBgpApiObject* mutable_bgpapiobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >*
      mutable_bgpapiobjects();
  private:
  const ::service_layer::SLBgpApiObject& _internal_bgpapiobjects(int index) const;
  ::service_layer::SLBgpApiObject* _internal_add_bgpapiobjects();
  public:
  const ::service_layer::SLBgpApiObject& bgpapiobjects(int index) const;
  ::service_layer::SLBgpApiObject* add_bgpapiobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >&
      bgpapiobjects() const;

  // string BgpInstanceName = 3;
  void clear_bgpinstancename();
  const std::string& bgpinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgpinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgpinstancename();
  PROTOBUF_NODISCARD std::string* release_bgpinstancename();
  void set_allocated_bgpinstancename(std::string* bgpinstancename);
  private:
  const std::string& _internal_bgpinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgpinstancename(const std::string& value);
  std::string* _internal_mutable_bgpinstancename();
  public:

  // uint64 OperationId = 1;
  void clear_operationid();
  uint64_t operationid() const;
  void set_operationid(uint64_t value);
  private:
  uint64_t _internal_operationid() const;
  void _internal_set_operationid(uint64_t value);
  public:

  // .service_layer.SLBgpApiObjectOp Oper = 2;
  void clear_oper();
  ::service_layer::SLBgpApiObjectOp oper() const;
  void set_oper(::service_layer::SLBgpApiObjectOp value);
  private:
  ::service_layer::SLBgpApiObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLBgpApiObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiObjectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject > bgpapiobjects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgpinstancename_;
  uint64_t operationid_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiGetResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiGetResp) */ {
 public:
  inline SLBgpApiGetResp() : SLBgpApiGetResp(nullptr) {}
  ~SLBgpApiGetResp() override;
  explicit constexpr SLBgpApiGetResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiGetResp(const SLBgpApiGetResp& from);
  SLBgpApiGetResp(SLBgpApiGetResp&& from) noexcept
    : SLBgpApiGetResp() {
    *this = ::std::move(from);
  }

  inline SLBgpApiGetResp& operator=(const SLBgpApiGetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiGetResp& operator=(SLBgpApiGetResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiGetResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpApiGetResp* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiGetResp*>(
               &_SLBgpApiGetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SLBgpApiGetResp& a, SLBgpApiGetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiGetResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiGetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiGetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiGetResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiGetResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiGetResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiGetResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiGetResp";
  }
  protected:
  explicit SLBgpApiGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpApiobjectsFieldNumber = 4,
    kBgpInstanceNameFieldNumber = 1,
    kErrStatusFieldNumber = 3,
    kEofFieldNumber = 2,
  };
  // repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
  int bgpapiobjects_size() const;
  private:
  int _internal_bgpapiobjects_size() const;
  public:
  void clear_bgpapiobjects();
  ::service_layer::SLBgpApiObject* mutable_bgpapiobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >*
      mutable_bgpapiobjects();
  private:
  const ::service_layer::SLBgpApiObject& _internal_bgpapiobjects(int index) const;
  ::service_layer::SLBgpApiObject* _internal_add_bgpapiobjects();
  public:
  const ::service_layer::SLBgpApiObject& bgpapiobjects(int index) const;
  ::service_layer::SLBgpApiObject* add_bgpapiobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >&
      bgpapiobjects() const;

  // string BgpInstanceName = 1;
  void clear_bgpinstancename();
  const std::string& bgpinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgpinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgpinstancename();
  PROTOBUF_NODISCARD std::string* release_bgpinstancename();
  void set_allocated_bgpinstancename(std::string* bgpinstancename);
  private:
  const std::string& _internal_bgpinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgpinstancename(const std::string& value);
  std::string* _internal_mutable_bgpinstancename();
  public:

  // .service_layer.SLErrorStatus ErrStatus = 3;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // bool Eof = 2;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiGetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject > bgpapiobjects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgpinstancename_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiGetReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiGetReq) */ {
 public:
  inline SLBgpApiGetReq() : SLBgpApiGetReq(nullptr) {}
  ~SLBgpApiGetReq() override;
  explicit constexpr SLBgpApiGetReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiGetReq(const SLBgpApiGetReq& from);
  SLBgpApiGetReq(SLBgpApiGetReq&& from) noexcept
    : SLBgpApiGetReq() {
    *this = ::std::move(from);
  }

  inline SLBgpApiGetReq& operator=(const SLBgpApiGetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiGetReq& operator=(SLBgpApiGetReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiGetReq& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kNeighbor = 3,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpApiGetReq* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiGetReq*>(
               &_SLBgpApiGetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SLBgpApiGetReq& a, SLBgpApiGetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiGetReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiGetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiGetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiGetReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiGetReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiGetReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiGetReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiGetReq";
  }
  protected:
  explicit SLBgpApiGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpInstanceNameFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
    kEntriesCountFieldNumber = 4,
    kGetNextFieldNumber = 5,
    kNeighborFieldNumber = 3,
  };
  // string BgpInstanceName = 1;
  void clear_bgpinstancename();
  const std::string& bgpinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgpinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgpinstancename();
  PROTOBUF_NODISCARD std::string* release_bgpinstancename();
  void set_allocated_bgpinstancename(std::string* bgpinstancename);
  private:
  const std::string& _internal_bgpinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgpinstancename(const std::string& value);
  std::string* _internal_mutable_bgpinstancename();
  public:

  // .service_layer.SLBgpApiObjectType ObjectType = 2;
  void clear_objecttype();
  ::service_layer::SLBgpApiObjectType objecttype() const;
  void set_objecttype(::service_layer::SLBgpApiObjectType value);
  private:
  ::service_layer::SLBgpApiObjectType _internal_objecttype() const;
  void _internal_set_objecttype(::service_layer::SLBgpApiObjectType value);
  public:

  // uint32 EntriesCount = 4;
  void clear_entriescount();
  uint32_t entriescount() const;
  void set_entriescount(uint32_t value);
  private:
  uint32_t _internal_entriescount() const;
  void _internal_set_entriescount(uint32_t value);
  public:

  // bool GetNext = 5;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // .service_layer.SLBgpNeighborKey Neighbor = 3;
  bool has_neighbor() const;
  private:
  bool _internal_has_neighbor() const;
  public:
  void clear_neighbor();
  const ::service_layer::SLBgpNeighborKey& neighbor() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpNeighborKey* release_neighbor();
  ::service_layer::SLBgpNeighborKey* mutable_neighbor();
  void set_allocated_neighbor(::service_layer::SLBgpNeighborKey* neighbor);
  private:
  const ::service_layer::SLBgpNeighborKey& _internal_neighbor() const;
  ::service_layer::SLBgpNeighborKey* _internal_mutable_neighbor();
  public:
  void unsafe_arena_set_allocated_neighbor(
      ::service_layer::SLBgpNeighborKey* neighbor);
  ::service_layer::SLBgpNeighborKey* unsafe_arena_release_neighbor();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiGetReq)
 private:
  class _Internal;
  void set_has_neighbor();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgpinstancename_;
  int objecttype_;
  uint32_t entriescount_;
  bool getnext_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgpNeighborKey* neighbor_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiCapResp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiCapResp) */ {
 public:
  inline SLBgpApiCapResp() : SLBgpApiCapResp(nullptr) {}
  explicit constexpr SLBgpApiCapResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiCapResp(const SLBgpApiCapResp& from);
  SLBgpApiCapResp(SLBgpApiCapResp&& from) noexcept
    : SLBgpApiCapResp() {
    *this = ::std::move(from);
  }

  inline SLBgpApiCapResp& operator=(const SLBgpApiCapResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiCapResp& operator=(SLBgpApiCapResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiCapResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgpApiCapResp* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiCapResp*>(
               &_SLBgpApiCapResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SLBgpApiCapResp& a, SLBgpApiCapResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiCapResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiCapResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiCapResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiCapResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLBgpApiCapResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLBgpApiCapResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiCapResp";
  }
  protected:
  explicit SLBgpApiCapResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiCapResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiCapReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiCapReq) */ {
 public:
  inline SLBgpApiCapReq() : SLBgpApiCapReq(nullptr) {}
  ~SLBgpApiCapReq() override;
  explicit constexpr SLBgpApiCapReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiCapReq(const SLBgpApiCapReq& from);
  SLBgpApiCapReq(SLBgpApiCapReq&& from) noexcept
    : SLBgpApiCapReq() {
    *this = ::std::move(from);
  }

  inline SLBgpApiCapReq& operator=(const SLBgpApiCapReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiCapReq& operator=(SLBgpApiCapReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiCapReq& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kBgpInstanceName = 1,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpApiCapReq* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiCapReq*>(
               &_SLBgpApiCapReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SLBgpApiCapReq& a, SLBgpApiCapReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiCapReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiCapReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiCapReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiCapReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiCapReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiCapReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiCapReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiCapReq";
  }
  protected:
  explicit SLBgpApiCapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpInstanceNameFieldNumber = 1,
  };
  // string BgpInstanceName = 1;
  bool has_bgpinstancename() const;
  private:
  bool _internal_has_bgpinstancename() const;
  public:
  void clear_bgpinstancename();
  const std::string& bgpinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgpinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgpinstancename();
  PROTOBUF_NODISCARD std::string* release_bgpinstancename();
  void set_allocated_bgpinstancename(std::string* bgpinstancename);
  private:
  const std::string& _internal_bgpinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgpinstancename(const std::string& value);
  std::string* _internal_mutable_bgpinstancename();
  public:

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiCapReq)
 private:
  class _Internal;
  void set_has_bgpinstancename();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgpinstancename_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiMsgRsp) */ {
 public:
  inline SLBgpApiMsgRsp() : SLBgpApiMsgRsp(nullptr) {}
  ~SLBgpApiMsgRsp() override;
  explicit constexpr SLBgpApiMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiMsgRsp(const SLBgpApiMsgRsp& from);
  SLBgpApiMsgRsp(SLBgpApiMsgRsp&& from) noexcept
    : SLBgpApiMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLBgpApiMsgRsp& operator=(const SLBgpApiMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiMsgRsp& operator=(SLBgpApiMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kBgpApiCapResp = 3,
    kBgpApiGetResp = 4,
    kBgpApiObjectResp = 5,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpApiMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiMsgRsp*>(
               &_SLBgpApiMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SLBgpApiMsgRsp& a, SLBgpApiMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiMsgRsp";
  }
  protected:
  explicit SLBgpApiMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 2,
    kCorrelatorFieldNumber = 1,
    kBgpApiCapRespFieldNumber = 3,
    kBgpApiGetRespFieldNumber = 4,
    kBgpApiObjectRespFieldNumber = 5,
  };
  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint64 Correlator = 1;
  void clear_correlator();
  uint64_t correlator() const;
  void set_correlator(uint64_t value);
  private:
  uint64_t _internal_correlator() const;
  void _internal_set_correlator(uint64_t value);
  public:

  // .service_layer.SLBgpApiCapResp BgpApiCapResp = 3;
  bool has_bgpapicapresp() const;
  private:
  bool _internal_has_bgpapicapresp() const;
  public:
  void clear_bgpapicapresp();
  const ::service_layer::SLBgpApiCapResp& bgpapicapresp() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiCapResp* release_bgpapicapresp();
  ::service_layer::SLBgpApiCapResp* mutable_bgpapicapresp();
  void set_allocated_bgpapicapresp(::service_layer::SLBgpApiCapResp* bgpapicapresp);
  private:
  const ::service_layer::SLBgpApiCapResp& _internal_bgpapicapresp() const;
  ::service_layer::SLBgpApiCapResp* _internal_mutable_bgpapicapresp();
  public:
  void unsafe_arena_set_allocated_bgpapicapresp(
      ::service_layer::SLBgpApiCapResp* bgpapicapresp);
  ::service_layer::SLBgpApiCapResp* unsafe_arena_release_bgpapicapresp();

  // .service_layer.SLBgpApiGetResp BgpApiGetResp = 4;
  bool has_bgpapigetresp() const;
  private:
  bool _internal_has_bgpapigetresp() const;
  public:
  void clear_bgpapigetresp();
  const ::service_layer::SLBgpApiGetResp& bgpapigetresp() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiGetResp* release_bgpapigetresp();
  ::service_layer::SLBgpApiGetResp* mutable_bgpapigetresp();
  void set_allocated_bgpapigetresp(::service_layer::SLBgpApiGetResp* bgpapigetresp);
  private:
  const ::service_layer::SLBgpApiGetResp& _internal_bgpapigetresp() const;
  ::service_layer::SLBgpApiGetResp* _internal_mutable_bgpapigetresp();
  public:
  void unsafe_arena_set_allocated_bgpapigetresp(
      ::service_layer::SLBgpApiGetResp* bgpapigetresp);
  ::service_layer::SLBgpApiGetResp* unsafe_arena_release_bgpapigetresp();

  // .service_layer.SLBgpApiObjectResp BgpApiObjectResp = 5;
  bool has_bgpapiobjectresp() const;
  private:
  bool _internal_has_bgpapiobjectresp() const;
  public:
  void clear_bgpapiobjectresp();
  const ::service_layer::SLBgpApiObjectResp& bgpapiobjectresp() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiObjectResp* release_bgpapiobjectresp();
  ::service_layer::SLBgpApiObjectResp* mutable_bgpapiobjectresp();
  void set_allocated_bgpapiobjectresp(::service_layer::SLBgpApiObjectResp* bgpapiobjectresp);
  private:
  const ::service_layer::SLBgpApiObjectResp& _internal_bgpapiobjectresp() const;
  ::service_layer::SLBgpApiObjectResp* _internal_mutable_bgpapiobjectresp();
  public:
  void unsafe_arena_set_allocated_bgpapiobjectresp(
      ::service_layer::SLBgpApiObjectResp* bgpapiobjectresp);
  ::service_layer::SLBgpApiObjectResp* unsafe_arena_release_bgpapiobjectresp();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiMsgRsp)
 private:
  class _Internal;
  void set_has_bgpapicapresp();
  void set_has_bgpapigetresp();
  void set_has_bgpapiobjectresp();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  uint64_t correlator_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgpApiCapResp* bgpapicapresp_;
    ::service_layer::SLBgpApiGetResp* bgpapigetresp_;
    ::service_layer::SLBgpApiObjectResp* bgpapiobjectresp_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// -------------------------------------------------------------------

class SLBgpApiMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpApiMsg) */ {
 public:
  inline SLBgpApiMsg() : SLBgpApiMsg(nullptr) {}
  ~SLBgpApiMsg() override;
  explicit constexpr SLBgpApiMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpApiMsg(const SLBgpApiMsg& from);
  SLBgpApiMsg(SLBgpApiMsg&& from) noexcept
    : SLBgpApiMsg() {
    *this = ::std::move(from);
  }

  inline SLBgpApiMsg& operator=(const SLBgpApiMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpApiMsg& operator=(SLBgpApiMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpApiMsg& default_instance() {
    return *internal_default_instance();
  }
  enum EntryCase {
    kBgpApiCapReq = 2,
    kBgpApiGetReq = 3,
    kBgpApiobjectReq = 4,
    ENTRY_NOT_SET = 0,
  };

  static inline const SLBgpApiMsg* internal_default_instance() {
    return reinterpret_cast<const SLBgpApiMsg*>(
               &_SLBgpApiMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SLBgpApiMsg& a, SLBgpApiMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpApiMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpApiMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpApiMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpApiMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpApiMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpApiMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpApiMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpApiMsg";
  }
  protected:
  explicit SLBgpApiMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrelatorFieldNumber = 1,
    kBgpApiCapReqFieldNumber = 2,
    kBgpApiGetReqFieldNumber = 3,
    kBgpApiobjectReqFieldNumber = 4,
  };
  // uint64 Correlator = 1;
  void clear_correlator();
  uint64_t correlator() const;
  void set_correlator(uint64_t value);
  private:
  uint64_t _internal_correlator() const;
  void _internal_set_correlator(uint64_t value);
  public:

  // .service_layer.SLBgpApiCapReq BgpApiCapReq = 2;
  bool has_bgpapicapreq() const;
  private:
  bool _internal_has_bgpapicapreq() const;
  public:
  void clear_bgpapicapreq();
  const ::service_layer::SLBgpApiCapReq& bgpapicapreq() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiCapReq* release_bgpapicapreq();
  ::service_layer::SLBgpApiCapReq* mutable_bgpapicapreq();
  void set_allocated_bgpapicapreq(::service_layer::SLBgpApiCapReq* bgpapicapreq);
  private:
  const ::service_layer::SLBgpApiCapReq& _internal_bgpapicapreq() const;
  ::service_layer::SLBgpApiCapReq* _internal_mutable_bgpapicapreq();
  public:
  void unsafe_arena_set_allocated_bgpapicapreq(
      ::service_layer::SLBgpApiCapReq* bgpapicapreq);
  ::service_layer::SLBgpApiCapReq* unsafe_arena_release_bgpapicapreq();

  // .service_layer.SLBgpApiGetReq BgpApiGetReq = 3;
  bool has_bgpapigetreq() const;
  private:
  bool _internal_has_bgpapigetreq() const;
  public:
  void clear_bgpapigetreq();
  const ::service_layer::SLBgpApiGetReq& bgpapigetreq() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiGetReq* release_bgpapigetreq();
  ::service_layer::SLBgpApiGetReq* mutable_bgpapigetreq();
  void set_allocated_bgpapigetreq(::service_layer::SLBgpApiGetReq* bgpapigetreq);
  private:
  const ::service_layer::SLBgpApiGetReq& _internal_bgpapigetreq() const;
  ::service_layer::SLBgpApiGetReq* _internal_mutable_bgpapigetreq();
  public:
  void unsafe_arena_set_allocated_bgpapigetreq(
      ::service_layer::SLBgpApiGetReq* bgpapigetreq);
  ::service_layer::SLBgpApiGetReq* unsafe_arena_release_bgpapigetreq();

  // .service_layer.SLBgpApiObjectReq BgpApiobjectReq = 4;
  bool has_bgpapiobjectreq() const;
  private:
  bool _internal_has_bgpapiobjectreq() const;
  public:
  void clear_bgpapiobjectreq();
  const ::service_layer::SLBgpApiObjectReq& bgpapiobjectreq() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpApiObjectReq* release_bgpapiobjectreq();
  ::service_layer::SLBgpApiObjectReq* mutable_bgpapiobjectreq();
  void set_allocated_bgpapiobjectreq(::service_layer::SLBgpApiObjectReq* bgpapiobjectreq);
  private:
  const ::service_layer::SLBgpApiObjectReq& _internal_bgpapiobjectreq() const;
  ::service_layer::SLBgpApiObjectReq* _internal_mutable_bgpapiobjectreq();
  public:
  void unsafe_arena_set_allocated_bgpapiobjectreq(
      ::service_layer::SLBgpApiObjectReq* bgpapiobjectreq);
  ::service_layer::SLBgpApiObjectReq* unsafe_arena_release_bgpapiobjectreq();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpApiMsg)
 private:
  class _Internal;
  void set_has_bgpapicapreq();
  void set_has_bgpapigetreq();
  void set_has_bgpapiobjectreq();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t correlator_;
  union EntryUnion {
    constexpr EntryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgpApiCapReq* bgpapicapreq_;
    ::service_layer::SLBgpApiGetReq* bgpapigetreq_;
    ::service_layer::SLBgpApiObjectReq* bgpapiobjectreq_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLBgpApiStatus

// .service_layer.SLErrorStatus Status = 1;
inline bool SLBgpApiStatus::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SLBgpApiStatus::has_status() const {
  return _internal_has_status();
}
inline const ::service_layer::SLErrorStatus& SLBgpApiStatus::_internal_status() const {
  const ::service_layer::SLErrorStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBgpApiStatus::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiStatus.Status)
  return _internal_status();
}
inline void SLBgpApiStatus::unsafe_arena_set_allocated_status(
    ::service_layer::SLErrorStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiStatus.Status)
}
inline ::service_layer::SLErrorStatus* SLBgpApiStatus::release_status() {
  
  ::service_layer::SLErrorStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBgpApiStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiStatus.Status)
  
  ::service_layer::SLErrorStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBgpApiStatus::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::service_layer::SLErrorStatus* SLBgpApiStatus::mutable_status() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiStatus.Status)
  return _msg;
}
inline void SLBgpApiStatus::set_allocated_status(::service_layer::SLErrorStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiStatus.Status)
}

// .service_layer.SLBgpApiStateType State = 2;
inline void SLBgpApiStatus::clear_state() {
  state_ = 0;
}
inline ::service_layer::SLBgpApiStateType SLBgpApiStatus::_internal_state() const {
  return static_cast< ::service_layer::SLBgpApiStateType >(state_);
}
inline ::service_layer::SLBgpApiStateType SLBgpApiStatus::state() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiStatus.State)
  return _internal_state();
}
inline void SLBgpApiStatus::_internal_set_state(::service_layer::SLBgpApiStateType value) {
  
  state_ = value;
}
inline void SLBgpApiStatus::set_state(::service_layer::SLBgpApiStateType value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiStatus.State)
}

// uint64 OperationId = 3;
inline void SLBgpApiStatus::clear_operationid() {
  operationid_ = uint64_t{0u};
}
inline uint64_t SLBgpApiStatus::_internal_operationid() const {
  return operationid_;
}
inline uint64_t SLBgpApiStatus::operationid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiStatus.OperationId)
  return _internal_operationid();
}
inline void SLBgpApiStatus::_internal_set_operationid(uint64_t value) {
  
  operationid_ = value;
}
inline void SLBgpApiStatus::set_operationid(uint64_t value) {
  _internal_set_operationid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiStatus.OperationId)
}

// -------------------------------------------------------------------

// SLBgpAfiSafi

// .service_layer.SLBgpAfi Afi = 1;
inline void SLBgpAfiSafi::clear_afi() {
  afi_ = 0;
}
inline ::service_layer::SLBgpAfi SLBgpAfiSafi::_internal_afi() const {
  return static_cast< ::service_layer::SLBgpAfi >(afi_);
}
inline ::service_layer::SLBgpAfi SLBgpAfiSafi::afi() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpAfiSafi.Afi)
  return _internal_afi();
}
inline void SLBgpAfiSafi::_internal_set_afi(::service_layer::SLBgpAfi value) {
  
  afi_ = value;
}
inline void SLBgpAfiSafi::set_afi(::service_layer::SLBgpAfi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpAfiSafi.Afi)
}

// .service_layer.SLBgpSafi Safi = 2;
inline void SLBgpAfiSafi::clear_safi() {
  safi_ = 0;
}
inline ::service_layer::SLBgpSafi SLBgpAfiSafi::_internal_safi() const {
  return static_cast< ::service_layer::SLBgpSafi >(safi_);
}
inline ::service_layer::SLBgpSafi SLBgpAfiSafi::safi() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpAfiSafi.Safi)
  return _internal_safi();
}
inline void SLBgpAfiSafi::_internal_set_safi(::service_layer::SLBgpSafi value) {
  
  safi_ = value;
}
inline void SLBgpAfiSafi::set_safi(::service_layer::SLBgpSafi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpAfiSafi.Safi)
}

// -------------------------------------------------------------------

// SLBgpFrrInfo

// .service_layer.SLIpAddress Addr = 1;
inline bool SLBgpFrrInfo::_internal_has_addr() const {
  return entry_case() == kAddr;
}
inline bool SLBgpFrrInfo::has_addr() const {
  return _internal_has_addr();
}
inline void SLBgpFrrInfo::set_has_addr() {
  _oneof_case_[0] = kAddr;
}
inline ::service_layer::SLIpAddress* SLBgpFrrInfo::release_addr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpFrrInfo.Addr)
  if (_internal_has_addr()) {
    clear_has_entry();
      ::service_layer::SLIpAddress* temp = entry_.addr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLIpAddress& SLBgpFrrInfo::_internal_addr() const {
  return _internal_has_addr()
      ? *entry_.addr_
      : reinterpret_cast< ::service_layer::SLIpAddress&>(::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLBgpFrrInfo::addr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpFrrInfo.Addr)
  return _internal_addr();
}
inline ::service_layer::SLIpAddress* SLBgpFrrInfo::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpFrrInfo.Addr)
  if (_internal_has_addr()) {
    clear_has_entry();
    ::service_layer::SLIpAddress* temp = entry_.addr_;
    entry_.addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpFrrInfo::unsafe_arena_set_allocated_addr(::service_layer::SLIpAddress* addr) {
  clear_entry();
  if (addr) {
    set_has_addr();
    entry_.addr_ = addr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpFrrInfo.Addr)
}
inline ::service_layer::SLIpAddress* SLBgpFrrInfo::_internal_mutable_addr() {
  if (!_internal_has_addr()) {
    clear_entry();
    set_has_addr();
    entry_.addr_ = CreateMaybeMessage< ::service_layer::SLIpAddress >(GetArenaForAllocation());
  }
  return entry_.addr_;
}
inline ::service_layer::SLIpAddress* SLBgpFrrInfo::mutable_addr() {
  ::service_layer::SLIpAddress* _msg = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpFrrInfo.Addr)
  return _msg;
}

// .service_layer.SLBgpApiStatus ObjectStatus = 2;
inline bool SLBgpFrrInfo::_internal_has_objectstatus() const {
  return this != internal_default_instance() && objectstatus_ != nullptr;
}
inline bool SLBgpFrrInfo::has_objectstatus() const {
  return _internal_has_objectstatus();
}
inline void SLBgpFrrInfo::clear_objectstatus() {
  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
}
inline const ::service_layer::SLBgpApiStatus& SLBgpFrrInfo::_internal_objectstatus() const {
  const ::service_layer::SLBgpApiStatus* p = objectstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpApiStatus&>(
      ::service_layer::_SLBgpApiStatus_default_instance_);
}
inline const ::service_layer::SLBgpApiStatus& SLBgpFrrInfo::objectstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpFrrInfo.ObjectStatus)
  return _internal_objectstatus();
}
inline void SLBgpFrrInfo::unsafe_arena_set_allocated_objectstatus(
    ::service_layer::SLBgpApiStatus* objectstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectstatus_);
  }
  objectstatus_ = objectstatus;
  if (objectstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpFrrInfo.ObjectStatus)
}
inline ::service_layer::SLBgpApiStatus* SLBgpFrrInfo::release_objectstatus() {
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpFrrInfo::unsafe_arena_release_objectstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpFrrInfo.ObjectStatus)
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpFrrInfo::_internal_mutable_objectstatus() {
  
  if (objectstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpApiStatus>(GetArenaForAllocation());
    objectstatus_ = p;
  }
  return objectstatus_;
}
inline ::service_layer::SLBgpApiStatus* SLBgpFrrInfo::mutable_objectstatus() {
  ::service_layer::SLBgpApiStatus* _msg = _internal_mutable_objectstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpFrrInfo.ObjectStatus)
  return _msg;
}
inline void SLBgpFrrInfo::set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete objectstatus_;
  }
  if (objectstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiStatus>::GetOwningArena(objectstatus);
    if (message_arena != submessage_arena) {
      objectstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectstatus, submessage_arena);
    }
    
  } else {
    
  }
  objectstatus_ = objectstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpFrrInfo.ObjectStatus)
}

inline bool SLBgpFrrInfo::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpFrrInfo::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpFrrInfo::EntryCase SLBgpFrrInfo::entry_case() const {
  return SLBgpFrrInfo::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpBwId

// uint32 BwId = 1;
inline void SLBgpBwId::clear_bwid() {
  bwid_ = 0u;
}
inline uint32_t SLBgpBwId::_internal_bwid() const {
  return bwid_;
}
inline uint32_t SLBgpBwId::bwid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpBwId.BwId)
  return _internal_bwid();
}
inline void SLBgpBwId::_internal_set_bwid(uint32_t value) {
  
  bwid_ = value;
}
inline void SLBgpBwId::set_bwid(uint32_t value) {
  _internal_set_bwid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpBwId.BwId)
}

// uint64 LinkBw = 2;
inline void SLBgpBwId::clear_linkbw() {
  linkbw_ = uint64_t{0u};
}
inline uint64_t SLBgpBwId::_internal_linkbw() const {
  return linkbw_;
}
inline uint64_t SLBgpBwId::linkbw() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpBwId.LinkBw)
  return _internal_linkbw();
}
inline void SLBgpBwId::_internal_set_linkbw(uint64_t value) {
  
  linkbw_ = value;
}
inline void SLBgpBwId::set_linkbw(uint64_t value) {
  _internal_set_linkbw(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpBwId.LinkBw)
}

// .service_layer.SLBgpBwUnit BwUnit = 3;
inline void SLBgpBwId::clear_bwunit() {
  bwunit_ = 0;
}
inline ::service_layer::SLBgpBwUnit SLBgpBwId::_internal_bwunit() const {
  return static_cast< ::service_layer::SLBgpBwUnit >(bwunit_);
}
inline ::service_layer::SLBgpBwUnit SLBgpBwId::bwunit() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpBwId.BwUnit)
  return _internal_bwunit();
}
inline void SLBgpBwId::_internal_set_bwunit(::service_layer::SLBgpBwUnit value) {
  
  bwunit_ = value;
}
inline void SLBgpBwId::set_bwunit(::service_layer::SLBgpBwUnit value) {
  _internal_set_bwunit(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpBwId.BwUnit)
}

// uint32 Asn = 4;
inline void SLBgpBwId::clear_asn() {
  asn_ = 0u;
}
inline uint32_t SLBgpBwId::_internal_asn() const {
  return asn_;
}
inline uint32_t SLBgpBwId::asn() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpBwId.Asn)
  return _internal_asn();
}
inline void SLBgpBwId::_internal_set_asn(uint32_t value) {
  
  asn_ = value;
}
inline void SLBgpBwId::set_asn(uint32_t value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpBwId.Asn)
}

// .service_layer.SLBgpApiStatus ObjectStatus = 5;
inline bool SLBgpBwId::_internal_has_objectstatus() const {
  return this != internal_default_instance() && objectstatus_ != nullptr;
}
inline bool SLBgpBwId::has_objectstatus() const {
  return _internal_has_objectstatus();
}
inline void SLBgpBwId::clear_objectstatus() {
  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
}
inline const ::service_layer::SLBgpApiStatus& SLBgpBwId::_internal_objectstatus() const {
  const ::service_layer::SLBgpApiStatus* p = objectstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpApiStatus&>(
      ::service_layer::_SLBgpApiStatus_default_instance_);
}
inline const ::service_layer::SLBgpApiStatus& SLBgpBwId::objectstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpBwId.ObjectStatus)
  return _internal_objectstatus();
}
inline void SLBgpBwId::unsafe_arena_set_allocated_objectstatus(
    ::service_layer::SLBgpApiStatus* objectstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectstatus_);
  }
  objectstatus_ = objectstatus;
  if (objectstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpBwId.ObjectStatus)
}
inline ::service_layer::SLBgpApiStatus* SLBgpBwId::release_objectstatus() {
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpBwId::unsafe_arena_release_objectstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpBwId.ObjectStatus)
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpBwId::_internal_mutable_objectstatus() {
  
  if (objectstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpApiStatus>(GetArenaForAllocation());
    objectstatus_ = p;
  }
  return objectstatus_;
}
inline ::service_layer::SLBgpApiStatus* SLBgpBwId::mutable_objectstatus() {
  ::service_layer::SLBgpApiStatus* _msg = _internal_mutable_objectstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpBwId.ObjectStatus)
  return _msg;
}
inline void SLBgpBwId::set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete objectstatus_;
  }
  if (objectstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiStatus>::GetOwningArena(objectstatus);
    if (message_arena != submessage_arena) {
      objectstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectstatus, submessage_arena);
    }
    
  } else {
    
  }
  objectstatus_ = objectstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpBwId.ObjectStatus)
}

// -------------------------------------------------------------------

// SLBgpNeighborSafiParam

// repeated .service_layer.SLBgpBwId OutBwIds = 1;
inline int SLBgpNeighborSafiParam::_internal_outbwids_size() const {
  return outbwids_.size();
}
inline int SLBgpNeighborSafiParam::outbwids_size() const {
  return _internal_outbwids_size();
}
inline void SLBgpNeighborSafiParam::clear_outbwids() {
  outbwids_.Clear();
}
inline ::service_layer::SLBgpBwId* SLBgpNeighborSafiParam::mutable_outbwids(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiParam.OutBwIds)
  return outbwids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >*
SLBgpNeighborSafiParam::mutable_outbwids() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgpNeighborSafiParam.OutBwIds)
  return &outbwids_;
}
inline const ::service_layer::SLBgpBwId& SLBgpNeighborSafiParam::_internal_outbwids(int index) const {
  return outbwids_.Get(index);
}
inline const ::service_layer::SLBgpBwId& SLBgpNeighborSafiParam::outbwids(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiParam.OutBwIds)
  return _internal_outbwids(index);
}
inline ::service_layer::SLBgpBwId* SLBgpNeighborSafiParam::_internal_add_outbwids() {
  return outbwids_.Add();
}
inline ::service_layer::SLBgpBwId* SLBgpNeighborSafiParam::add_outbwids() {
  ::service_layer::SLBgpBwId* _add = _internal_add_outbwids();
  // @@protoc_insertion_point(field_add:service_layer.SLBgpNeighborSafiParam.OutBwIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >&
SLBgpNeighborSafiParam::outbwids() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgpNeighborSafiParam.OutBwIds)
  return outbwids_;
}

// repeated .service_layer.SLBgpBwId InBwIds = 2;
inline int SLBgpNeighborSafiParam::_internal_inbwids_size() const {
  return inbwids_.size();
}
inline int SLBgpNeighborSafiParam::inbwids_size() const {
  return _internal_inbwids_size();
}
inline void SLBgpNeighborSafiParam::clear_inbwids() {
  inbwids_.Clear();
}
inline ::service_layer::SLBgpBwId* SLBgpNeighborSafiParam::mutable_inbwids(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiParam.InBwIds)
  return inbwids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >*
SLBgpNeighborSafiParam::mutable_inbwids() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgpNeighborSafiParam.InBwIds)
  return &inbwids_;
}
inline const ::service_layer::SLBgpBwId& SLBgpNeighborSafiParam::_internal_inbwids(int index) const {
  return inbwids_.Get(index);
}
inline const ::service_layer::SLBgpBwId& SLBgpNeighborSafiParam::inbwids(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiParam.InBwIds)
  return _internal_inbwids(index);
}
inline ::service_layer::SLBgpBwId* SLBgpNeighborSafiParam::_internal_add_inbwids() {
  return inbwids_.Add();
}
inline ::service_layer::SLBgpBwId* SLBgpNeighborSafiParam::add_inbwids() {
  ::service_layer::SLBgpBwId* _add = _internal_add_inbwids();
  // @@protoc_insertion_point(field_add:service_layer.SLBgpNeighborSafiParam.InBwIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpBwId >&
SLBgpNeighborSafiParam::inbwids() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgpNeighborSafiParam.InBwIds)
  return inbwids_;
}

// .service_layer.SLBgpFrrInfo PerLinkMpathBkup = 3;
inline bool SLBgpNeighborSafiParam::_internal_has_perlinkmpathbkup() const {
  return this != internal_default_instance() && perlinkmpathbkup_ != nullptr;
}
inline bool SLBgpNeighborSafiParam::has_perlinkmpathbkup() const {
  return _internal_has_perlinkmpathbkup();
}
inline void SLBgpNeighborSafiParam::clear_perlinkmpathbkup() {
  if (GetArenaForAllocation() == nullptr && perlinkmpathbkup_ != nullptr) {
    delete perlinkmpathbkup_;
  }
  perlinkmpathbkup_ = nullptr;
}
inline const ::service_layer::SLBgpFrrInfo& SLBgpNeighborSafiParam::_internal_perlinkmpathbkup() const {
  const ::service_layer::SLBgpFrrInfo* p = perlinkmpathbkup_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpFrrInfo&>(
      ::service_layer::_SLBgpFrrInfo_default_instance_);
}
inline const ::service_layer::SLBgpFrrInfo& SLBgpNeighborSafiParam::perlinkmpathbkup() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiParam.PerLinkMpathBkup)
  return _internal_perlinkmpathbkup();
}
inline void SLBgpNeighborSafiParam::unsafe_arena_set_allocated_perlinkmpathbkup(
    ::service_layer::SLBgpFrrInfo* perlinkmpathbkup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perlinkmpathbkup_);
  }
  perlinkmpathbkup_ = perlinkmpathbkup;
  if (perlinkmpathbkup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborSafiParam.PerLinkMpathBkup)
}
inline ::service_layer::SLBgpFrrInfo* SLBgpNeighborSafiParam::release_perlinkmpathbkup() {
  
  ::service_layer::SLBgpFrrInfo* temp = perlinkmpathbkup_;
  perlinkmpathbkup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpFrrInfo* SLBgpNeighborSafiParam::unsafe_arena_release_perlinkmpathbkup() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborSafiParam.PerLinkMpathBkup)
  
  ::service_layer::SLBgpFrrInfo* temp = perlinkmpathbkup_;
  perlinkmpathbkup_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpFrrInfo* SLBgpNeighborSafiParam::_internal_mutable_perlinkmpathbkup() {
  
  if (perlinkmpathbkup_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpFrrInfo>(GetArenaForAllocation());
    perlinkmpathbkup_ = p;
  }
  return perlinkmpathbkup_;
}
inline ::service_layer::SLBgpFrrInfo* SLBgpNeighborSafiParam::mutable_perlinkmpathbkup() {
  ::service_layer::SLBgpFrrInfo* _msg = _internal_mutable_perlinkmpathbkup();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiParam.PerLinkMpathBkup)
  return _msg;
}
inline void SLBgpNeighborSafiParam::set_allocated_perlinkmpathbkup(::service_layer::SLBgpFrrInfo* perlinkmpathbkup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete perlinkmpathbkup_;
  }
  if (perlinkmpathbkup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpFrrInfo>::GetOwningArena(perlinkmpathbkup);
    if (message_arena != submessage_arena) {
      perlinkmpathbkup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perlinkmpathbkup, submessage_arena);
    }
    
  } else {
    
  }
  perlinkmpathbkup_ = perlinkmpathbkup;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborSafiParam.PerLinkMpathBkup)
}

// -------------------------------------------------------------------

// SLBgpNeighborSafiMsg

// .service_layer.SLBgpAfiSafi AfiSafi = 1;
inline bool SLBgpNeighborSafiMsg::_internal_has_afisafi() const {
  return this != internal_default_instance() && afisafi_ != nullptr;
}
inline bool SLBgpNeighborSafiMsg::has_afisafi() const {
  return _internal_has_afisafi();
}
inline void SLBgpNeighborSafiMsg::clear_afisafi() {
  if (GetArenaForAllocation() == nullptr && afisafi_ != nullptr) {
    delete afisafi_;
  }
  afisafi_ = nullptr;
}
inline const ::service_layer::SLBgpAfiSafi& SLBgpNeighborSafiMsg::_internal_afisafi() const {
  const ::service_layer::SLBgpAfiSafi* p = afisafi_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpAfiSafi&>(
      ::service_layer::_SLBgpAfiSafi_default_instance_);
}
inline const ::service_layer::SLBgpAfiSafi& SLBgpNeighborSafiMsg::afisafi() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiMsg.AfiSafi)
  return _internal_afisafi();
}
inline void SLBgpNeighborSafiMsg::unsafe_arena_set_allocated_afisafi(
    ::service_layer::SLBgpAfiSafi* afisafi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(afisafi_);
  }
  afisafi_ = afisafi;
  if (afisafi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborSafiMsg.AfiSafi)
}
inline ::service_layer::SLBgpAfiSafi* SLBgpNeighborSafiMsg::release_afisafi() {
  
  ::service_layer::SLBgpAfiSafi* temp = afisafi_;
  afisafi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpAfiSafi* SLBgpNeighborSafiMsg::unsafe_arena_release_afisafi() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborSafiMsg.AfiSafi)
  
  ::service_layer::SLBgpAfiSafi* temp = afisafi_;
  afisafi_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpAfiSafi* SLBgpNeighborSafiMsg::_internal_mutable_afisafi() {
  
  if (afisafi_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpAfiSafi>(GetArenaForAllocation());
    afisafi_ = p;
  }
  return afisafi_;
}
inline ::service_layer::SLBgpAfiSafi* SLBgpNeighborSafiMsg::mutable_afisafi() {
  ::service_layer::SLBgpAfiSafi* _msg = _internal_mutable_afisafi();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiMsg.AfiSafi)
  return _msg;
}
inline void SLBgpNeighborSafiMsg::set_allocated_afisafi(::service_layer::SLBgpAfiSafi* afisafi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete afisafi_;
  }
  if (afisafi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpAfiSafi>::GetOwningArena(afisafi);
    if (message_arena != submessage_arena) {
      afisafi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, afisafi, submessage_arena);
    }
    
  } else {
    
  }
  afisafi_ = afisafi;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborSafiMsg.AfiSafi)
}

// .service_layer.SLBgpApiStatus ObjectStatus = 2;
inline bool SLBgpNeighborSafiMsg::_internal_has_objectstatus() const {
  return this != internal_default_instance() && objectstatus_ != nullptr;
}
inline bool SLBgpNeighborSafiMsg::has_objectstatus() const {
  return _internal_has_objectstatus();
}
inline void SLBgpNeighborSafiMsg::clear_objectstatus() {
  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
}
inline const ::service_layer::SLBgpApiStatus& SLBgpNeighborSafiMsg::_internal_objectstatus() const {
  const ::service_layer::SLBgpApiStatus* p = objectstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpApiStatus&>(
      ::service_layer::_SLBgpApiStatus_default_instance_);
}
inline const ::service_layer::SLBgpApiStatus& SLBgpNeighborSafiMsg::objectstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiMsg.ObjectStatus)
  return _internal_objectstatus();
}
inline void SLBgpNeighborSafiMsg::unsafe_arena_set_allocated_objectstatus(
    ::service_layer::SLBgpApiStatus* objectstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectstatus_);
  }
  objectstatus_ = objectstatus;
  if (objectstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborSafiMsg.ObjectStatus)
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborSafiMsg::release_objectstatus() {
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborSafiMsg::unsafe_arena_release_objectstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborSafiMsg.ObjectStatus)
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborSafiMsg::_internal_mutable_objectstatus() {
  
  if (objectstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpApiStatus>(GetArenaForAllocation());
    objectstatus_ = p;
  }
  return objectstatus_;
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborSafiMsg::mutable_objectstatus() {
  ::service_layer::SLBgpApiStatus* _msg = _internal_mutable_objectstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiMsg.ObjectStatus)
  return _msg;
}
inline void SLBgpNeighborSafiMsg::set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete objectstatus_;
  }
  if (objectstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiStatus>::GetOwningArena(objectstatus);
    if (message_arena != submessage_arena) {
      objectstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectstatus, submessage_arena);
    }
    
  } else {
    
  }
  objectstatus_ = objectstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborSafiMsg.ObjectStatus)
}

// .service_layer.SLBgpNeighborSafiParam SafiParam = 3;
inline bool SLBgpNeighborSafiMsg::_internal_has_safiparam() const {
  return entry_case() == kSafiParam;
}
inline bool SLBgpNeighborSafiMsg::has_safiparam() const {
  return _internal_has_safiparam();
}
inline void SLBgpNeighborSafiMsg::set_has_safiparam() {
  _oneof_case_[0] = kSafiParam;
}
inline void SLBgpNeighborSafiMsg::clear_safiparam() {
  if (_internal_has_safiparam()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.safiparam_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpNeighborSafiParam* SLBgpNeighborSafiMsg::release_safiparam() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborSafiMsg.SafiParam)
  if (_internal_has_safiparam()) {
    clear_has_entry();
      ::service_layer::SLBgpNeighborSafiParam* temp = entry_.safiparam_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.safiparam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpNeighborSafiParam& SLBgpNeighborSafiMsg::_internal_safiparam() const {
  return _internal_has_safiparam()
      ? *entry_.safiparam_
      : reinterpret_cast< ::service_layer::SLBgpNeighborSafiParam&>(::service_layer::_SLBgpNeighborSafiParam_default_instance_);
}
inline const ::service_layer::SLBgpNeighborSafiParam& SLBgpNeighborSafiMsg::safiparam() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiMsg.SafiParam)
  return _internal_safiparam();
}
inline ::service_layer::SLBgpNeighborSafiParam* SLBgpNeighborSafiMsg::unsafe_arena_release_safiparam() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpNeighborSafiMsg.SafiParam)
  if (_internal_has_safiparam()) {
    clear_has_entry();
    ::service_layer::SLBgpNeighborSafiParam* temp = entry_.safiparam_;
    entry_.safiparam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpNeighborSafiMsg::unsafe_arena_set_allocated_safiparam(::service_layer::SLBgpNeighborSafiParam* safiparam) {
  clear_entry();
  if (safiparam) {
    set_has_safiparam();
    entry_.safiparam_ = safiparam;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborSafiMsg.SafiParam)
}
inline ::service_layer::SLBgpNeighborSafiParam* SLBgpNeighborSafiMsg::_internal_mutable_safiparam() {
  if (!_internal_has_safiparam()) {
    clear_entry();
    set_has_safiparam();
    entry_.safiparam_ = CreateMaybeMessage< ::service_layer::SLBgpNeighborSafiParam >(GetArenaForAllocation());
  }
  return entry_.safiparam_;
}
inline ::service_layer::SLBgpNeighborSafiParam* SLBgpNeighborSafiMsg::mutable_safiparam() {
  ::service_layer::SLBgpNeighborSafiParam* _msg = _internal_mutable_safiparam();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiMsg.SafiParam)
  return _msg;
}

inline bool SLBgpNeighborSafiMsg::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpNeighborSafiMsg::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpNeighborSafiMsg::EntryCase SLBgpNeighborSafiMsg::entry_case() const {
  return SLBgpNeighborSafiMsg::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpNeighborSafiList

// repeated .service_layer.SLBgpNeighborSafiMsg NeighborSafis = 1;
inline int SLBgpNeighborSafiList::_internal_neighborsafis_size() const {
  return neighborsafis_.size();
}
inline int SLBgpNeighborSafiList::neighborsafis_size() const {
  return _internal_neighborsafis_size();
}
inline void SLBgpNeighborSafiList::clear_neighborsafis() {
  neighborsafis_.Clear();
}
inline ::service_layer::SLBgpNeighborSafiMsg* SLBgpNeighborSafiList::mutable_neighborsafis(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborSafiList.NeighborSafis)
  return neighborsafis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpNeighborSafiMsg >*
SLBgpNeighborSafiList::mutable_neighborsafis() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgpNeighborSafiList.NeighborSafis)
  return &neighborsafis_;
}
inline const ::service_layer::SLBgpNeighborSafiMsg& SLBgpNeighborSafiList::_internal_neighborsafis(int index) const {
  return neighborsafis_.Get(index);
}
inline const ::service_layer::SLBgpNeighborSafiMsg& SLBgpNeighborSafiList::neighborsafis(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborSafiList.NeighborSafis)
  return _internal_neighborsafis(index);
}
inline ::service_layer::SLBgpNeighborSafiMsg* SLBgpNeighborSafiList::_internal_add_neighborsafis() {
  return neighborsafis_.Add();
}
inline ::service_layer::SLBgpNeighborSafiMsg* SLBgpNeighborSafiList::add_neighborsafis() {
  ::service_layer::SLBgpNeighborSafiMsg* _add = _internal_add_neighborsafis();
  // @@protoc_insertion_point(field_add:service_layer.SLBgpNeighborSafiList.NeighborSafis)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpNeighborSafiMsg >&
SLBgpNeighborSafiList::neighborsafis() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgpNeighborSafiList.NeighborSafis)
  return neighborsafis_;
}

// -------------------------------------------------------------------

// SLBgpNeighborKey

// string VrfName = 1;
inline void SLBgpNeighborKey::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLBgpNeighborKey::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborKey.VrfName)
  return _internal_vrfname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgpNeighborKey::set_vrfname(ArgT0&& arg0, ArgT... args) {
 
 vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpNeighborKey.VrfName)
}
inline std::string* SLBgpNeighborKey::mutable_vrfname() {
  std::string* _s = _internal_mutable_vrfname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborKey.VrfName)
  return _s;
}
inline const std::string& SLBgpNeighborKey::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLBgpNeighborKey::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpNeighborKey::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpNeighborKey::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborKey.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgpNeighborKey::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vrfname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborKey.VrfName)
}

// .service_layer.SLIpAddress Address = 2;
inline bool SLBgpNeighborKey::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool SLBgpNeighborKey::has_address() const {
  return _internal_has_address();
}
inline const ::service_layer::SLIpAddress& SLBgpNeighborKey::_internal_address() const {
  const ::service_layer::SLIpAddress* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLIpAddress&>(
      ::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLBgpNeighborKey::address() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborKey.Address)
  return _internal_address();
}
inline void SLBgpNeighborKey::unsafe_arena_set_allocated_address(
    ::service_layer::SLIpAddress* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborKey.Address)
}
inline ::service_layer::SLIpAddress* SLBgpNeighborKey::release_address() {
  
  ::service_layer::SLIpAddress* temp = address_;
  address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLIpAddress* SLBgpNeighborKey::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborKey.Address)
  
  ::service_layer::SLIpAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLBgpNeighborKey::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArenaForAllocation());
    address_ = p;
  }
  return address_;
}
inline ::service_layer::SLIpAddress* SLBgpNeighborKey::mutable_address() {
  ::service_layer::SLIpAddress* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborKey.Address)
  return _msg;
}
inline void SLBgpNeighborKey::set_allocated_address(::service_layer::SLIpAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborKey.Address)
}

// -------------------------------------------------------------------

// SLBgpNeighborMsg

// .service_layer.SLBgpNeighborKey NeighborKey = 1;
inline bool SLBgpNeighborMsg::_internal_has_neighborkey() const {
  return this != internal_default_instance() && neighborkey_ != nullptr;
}
inline bool SLBgpNeighborMsg::has_neighborkey() const {
  return _internal_has_neighborkey();
}
inline void SLBgpNeighborMsg::clear_neighborkey() {
  if (GetArenaForAllocation() == nullptr && neighborkey_ != nullptr) {
    delete neighborkey_;
  }
  neighborkey_ = nullptr;
}
inline const ::service_layer::SLBgpNeighborKey& SLBgpNeighborMsg::_internal_neighborkey() const {
  const ::service_layer::SLBgpNeighborKey* p = neighborkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpNeighborKey&>(
      ::service_layer::_SLBgpNeighborKey_default_instance_);
}
inline const ::service_layer::SLBgpNeighborKey& SLBgpNeighborMsg::neighborkey() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborMsg.NeighborKey)
  return _internal_neighborkey();
}
inline void SLBgpNeighborMsg::unsafe_arena_set_allocated_neighborkey(
    ::service_layer::SLBgpNeighborKey* neighborkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neighborkey_);
  }
  neighborkey_ = neighborkey;
  if (neighborkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborMsg.NeighborKey)
}
inline ::service_layer::SLBgpNeighborKey* SLBgpNeighborMsg::release_neighborkey() {
  
  ::service_layer::SLBgpNeighborKey* temp = neighborkey_;
  neighborkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpNeighborKey* SLBgpNeighborMsg::unsafe_arena_release_neighborkey() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborMsg.NeighborKey)
  
  ::service_layer::SLBgpNeighborKey* temp = neighborkey_;
  neighborkey_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpNeighborKey* SLBgpNeighborMsg::_internal_mutable_neighborkey() {
  
  if (neighborkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpNeighborKey>(GetArenaForAllocation());
    neighborkey_ = p;
  }
  return neighborkey_;
}
inline ::service_layer::SLBgpNeighborKey* SLBgpNeighborMsg::mutable_neighborkey() {
  ::service_layer::SLBgpNeighborKey* _msg = _internal_mutable_neighborkey();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborMsg.NeighborKey)
  return _msg;
}
inline void SLBgpNeighborMsg::set_allocated_neighborkey(::service_layer::SLBgpNeighborKey* neighborkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete neighborkey_;
  }
  if (neighborkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpNeighborKey>::GetOwningArena(neighborkey);
    if (message_arena != submessage_arena) {
      neighborkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighborkey, submessage_arena);
    }
    
  } else {
    
  }
  neighborkey_ = neighborkey;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborMsg.NeighborKey)
}

// .service_layer.SLBgpApiStatus ObjectStatus = 2;
inline bool SLBgpNeighborMsg::_internal_has_objectstatus() const {
  return this != internal_default_instance() && objectstatus_ != nullptr;
}
inline bool SLBgpNeighborMsg::has_objectstatus() const {
  return _internal_has_objectstatus();
}
inline void SLBgpNeighborMsg::clear_objectstatus() {
  if (GetArenaForAllocation() == nullptr && objectstatus_ != nullptr) {
    delete objectstatus_;
  }
  objectstatus_ = nullptr;
}
inline const ::service_layer::SLBgpApiStatus& SLBgpNeighborMsg::_internal_objectstatus() const {
  const ::service_layer::SLBgpApiStatus* p = objectstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpApiStatus&>(
      ::service_layer::_SLBgpApiStatus_default_instance_);
}
inline const ::service_layer::SLBgpApiStatus& SLBgpNeighborMsg::objectstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborMsg.ObjectStatus)
  return _internal_objectstatus();
}
inline void SLBgpNeighborMsg::unsafe_arena_set_allocated_objectstatus(
    ::service_layer::SLBgpApiStatus* objectstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectstatus_);
  }
  objectstatus_ = objectstatus;
  if (objectstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborMsg.ObjectStatus)
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborMsg::release_objectstatus() {
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborMsg::unsafe_arena_release_objectstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborMsg.ObjectStatus)
  
  ::service_layer::SLBgpApiStatus* temp = objectstatus_;
  objectstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborMsg::_internal_mutable_objectstatus() {
  
  if (objectstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpApiStatus>(GetArenaForAllocation());
    objectstatus_ = p;
  }
  return objectstatus_;
}
inline ::service_layer::SLBgpApiStatus* SLBgpNeighborMsg::mutable_objectstatus() {
  ::service_layer::SLBgpApiStatus* _msg = _internal_mutable_objectstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborMsg.ObjectStatus)
  return _msg;
}
inline void SLBgpNeighborMsg::set_allocated_objectstatus(::service_layer::SLBgpApiStatus* objectstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete objectstatus_;
  }
  if (objectstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiStatus>::GetOwningArena(objectstatus);
    if (message_arena != submessage_arena) {
      objectstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectstatus, submessage_arena);
    }
    
  } else {
    
  }
  objectstatus_ = objectstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpNeighborMsg.ObjectStatus)
}

// .service_layer.SLBgpNeighborSafiList NeighborSafiList = 3;
inline bool SLBgpNeighborMsg::_internal_has_neighborsafilist() const {
  return entry_case() == kNeighborSafiList;
}
inline bool SLBgpNeighborMsg::has_neighborsafilist() const {
  return _internal_has_neighborsafilist();
}
inline void SLBgpNeighborMsg::set_has_neighborsafilist() {
  _oneof_case_[0] = kNeighborSafiList;
}
inline void SLBgpNeighborMsg::clear_neighborsafilist() {
  if (_internal_has_neighborsafilist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.neighborsafilist_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpNeighborSafiList* SLBgpNeighborMsg::release_neighborsafilist() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpNeighborMsg.NeighborSafiList)
  if (_internal_has_neighborsafilist()) {
    clear_has_entry();
      ::service_layer::SLBgpNeighborSafiList* temp = entry_.neighborsafilist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.neighborsafilist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpNeighborSafiList& SLBgpNeighborMsg::_internal_neighborsafilist() const {
  return _internal_has_neighborsafilist()
      ? *entry_.neighborsafilist_
      : reinterpret_cast< ::service_layer::SLBgpNeighborSafiList&>(::service_layer::_SLBgpNeighborSafiList_default_instance_);
}
inline const ::service_layer::SLBgpNeighborSafiList& SLBgpNeighborMsg::neighborsafilist() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpNeighborMsg.NeighborSafiList)
  return _internal_neighborsafilist();
}
inline ::service_layer::SLBgpNeighborSafiList* SLBgpNeighborMsg::unsafe_arena_release_neighborsafilist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpNeighborMsg.NeighborSafiList)
  if (_internal_has_neighborsafilist()) {
    clear_has_entry();
    ::service_layer::SLBgpNeighborSafiList* temp = entry_.neighborsafilist_;
    entry_.neighborsafilist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpNeighborMsg::unsafe_arena_set_allocated_neighborsafilist(::service_layer::SLBgpNeighborSafiList* neighborsafilist) {
  clear_entry();
  if (neighborsafilist) {
    set_has_neighborsafilist();
    entry_.neighborsafilist_ = neighborsafilist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpNeighborMsg.NeighborSafiList)
}
inline ::service_layer::SLBgpNeighborSafiList* SLBgpNeighborMsg::_internal_mutable_neighborsafilist() {
  if (!_internal_has_neighborsafilist()) {
    clear_entry();
    set_has_neighborsafilist();
    entry_.neighborsafilist_ = CreateMaybeMessage< ::service_layer::SLBgpNeighborSafiList >(GetArenaForAllocation());
  }
  return entry_.neighborsafilist_;
}
inline ::service_layer::SLBgpNeighborSafiList* SLBgpNeighborMsg::mutable_neighborsafilist() {
  ::service_layer::SLBgpNeighborSafiList* _msg = _internal_mutable_neighborsafilist();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpNeighborMsg.NeighborSafiList)
  return _msg;
}

inline bool SLBgpNeighborMsg::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpNeighborMsg::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpNeighborMsg::EntryCase SLBgpNeighborMsg::entry_case() const {
  return SLBgpNeighborMsg::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpApiObject

// .service_layer.SLBgpApiObjectType ObjectType = 1;
inline void SLBgpApiObject::clear_objecttype() {
  objecttype_ = 0;
}
inline ::service_layer::SLBgpApiObjectType SLBgpApiObject::_internal_objecttype() const {
  return static_cast< ::service_layer::SLBgpApiObjectType >(objecttype_);
}
inline ::service_layer::SLBgpApiObjectType SLBgpApiObject::objecttype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObject.ObjectType)
  return _internal_objecttype();
}
inline void SLBgpApiObject::_internal_set_objecttype(::service_layer::SLBgpApiObjectType value) {
  
  objecttype_ = value;
}
inline void SLBgpApiObject::set_objecttype(::service_layer::SLBgpApiObjectType value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiObject.ObjectType)
}

// .service_layer.SLBgpNeighborMsg Neighbor = 2;
inline bool SLBgpApiObject::_internal_has_neighbor() const {
  return entry_case() == kNeighbor;
}
inline bool SLBgpApiObject::has_neighbor() const {
  return _internal_has_neighbor();
}
inline void SLBgpApiObject::set_has_neighbor() {
  _oneof_case_[0] = kNeighbor;
}
inline void SLBgpApiObject::clear_neighbor() {
  if (_internal_has_neighbor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.neighbor_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpNeighborMsg* SLBgpApiObject::release_neighbor() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiObject.Neighbor)
  if (_internal_has_neighbor()) {
    clear_has_entry();
      ::service_layer::SLBgpNeighborMsg* temp = entry_.neighbor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.neighbor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpNeighborMsg& SLBgpApiObject::_internal_neighbor() const {
  return _internal_has_neighbor()
      ? *entry_.neighbor_
      : reinterpret_cast< ::service_layer::SLBgpNeighborMsg&>(::service_layer::_SLBgpNeighborMsg_default_instance_);
}
inline const ::service_layer::SLBgpNeighborMsg& SLBgpApiObject::neighbor() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObject.Neighbor)
  return _internal_neighbor();
}
inline ::service_layer::SLBgpNeighborMsg* SLBgpApiObject::unsafe_arena_release_neighbor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiObject.Neighbor)
  if (_internal_has_neighbor()) {
    clear_has_entry();
    ::service_layer::SLBgpNeighborMsg* temp = entry_.neighbor_;
    entry_.neighbor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiObject::unsafe_arena_set_allocated_neighbor(::service_layer::SLBgpNeighborMsg* neighbor) {
  clear_entry();
  if (neighbor) {
    set_has_neighbor();
    entry_.neighbor_ = neighbor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiObject.Neighbor)
}
inline ::service_layer::SLBgpNeighborMsg* SLBgpApiObject::_internal_mutable_neighbor() {
  if (!_internal_has_neighbor()) {
    clear_entry();
    set_has_neighbor();
    entry_.neighbor_ = CreateMaybeMessage< ::service_layer::SLBgpNeighborMsg >(GetArenaForAllocation());
  }
  return entry_.neighbor_;
}
inline ::service_layer::SLBgpNeighborMsg* SLBgpApiObject::mutable_neighbor() {
  ::service_layer::SLBgpNeighborMsg* _msg = _internal_mutable_neighbor();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiObject.Neighbor)
  return _msg;
}

inline bool SLBgpApiObject::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpApiObject::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpApiObject::EntryCase SLBgpApiObject::entry_case() const {
  return SLBgpApiObject::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpApiObjectResp

// string BgpInstanceName = 1;
inline void SLBgpApiObjectResp::clear_bgpinstancename() {
  bgpinstancename_.ClearToEmpty();
}
inline const std::string& SLBgpApiObjectResp::bgpinstancename() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectResp.BgpInstanceName)
  return _internal_bgpinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgpApiObjectResp::set_bgpinstancename(ArgT0&& arg0, ArgT... args) {
 
 bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiObjectResp.BgpInstanceName)
}
inline std::string* SLBgpApiObjectResp::mutable_bgpinstancename() {
  std::string* _s = _internal_mutable_bgpinstancename();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiObjectResp.BgpInstanceName)
  return _s;
}
inline const std::string& SLBgpApiObjectResp::_internal_bgpinstancename() const {
  return bgpinstancename_.Get();
}
inline void SLBgpApiObjectResp::_internal_set_bgpinstancename(const std::string& value) {
  
  bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpApiObjectResp::_internal_mutable_bgpinstancename() {
  
  return bgpinstancename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpApiObjectResp::release_bgpinstancename() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiObjectResp.BgpInstanceName)
  return bgpinstancename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgpApiObjectResp::set_allocated_bgpinstancename(std::string* bgpinstancename) {
  if (bgpinstancename != nullptr) {
    
  } else {
    
  }
  bgpinstancename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgpinstancename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgpinstancename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiObjectResp.BgpInstanceName)
}

// .service_layer.SLBgpApiStatus StatusSummary = 2;
inline bool SLBgpApiObjectResp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLBgpApiObjectResp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline void SLBgpApiObjectResp::clear_statussummary() {
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
inline const ::service_layer::SLBgpApiStatus& SLBgpApiObjectResp::_internal_statussummary() const {
  const ::service_layer::SLBgpApiStatus* p = statussummary_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpApiStatus&>(
      ::service_layer::_SLBgpApiStatus_default_instance_);
}
inline const ::service_layer::SLBgpApiStatus& SLBgpApiObjectResp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectResp.StatusSummary)
  return _internal_statussummary();
}
inline void SLBgpApiObjectResp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLBgpApiStatus* statussummary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiObjectResp.StatusSummary)
}
inline ::service_layer::SLBgpApiStatus* SLBgpApiObjectResp::release_statussummary() {
  
  ::service_layer::SLBgpApiStatus* temp = statussummary_;
  statussummary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpApiObjectResp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiObjectResp.StatusSummary)
  
  ::service_layer::SLBgpApiStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpApiStatus* SLBgpApiObjectResp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpApiStatus>(GetArenaForAllocation());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLBgpApiStatus* SLBgpApiObjectResp::mutable_statussummary() {
  ::service_layer::SLBgpApiStatus* _msg = _internal_mutable_statussummary();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiObjectResp.StatusSummary)
  return _msg;
}
inline void SLBgpApiObjectResp::set_allocated_statussummary(::service_layer::SLBgpApiStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete statussummary_;
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpApiStatus>::GetOwningArena(statussummary);
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiObjectResp.StatusSummary)
}

// repeated .service_layer.SLBgpApiObject BgpApiobjects = 3;
inline int SLBgpApiObjectResp::_internal_bgpapiobjects_size() const {
  return bgpapiobjects_.size();
}
inline int SLBgpApiObjectResp::bgpapiobjects_size() const {
  return _internal_bgpapiobjects_size();
}
inline void SLBgpApiObjectResp::clear_bgpapiobjects() {
  bgpapiobjects_.Clear();
}
inline ::service_layer::SLBgpApiObject* SLBgpApiObjectResp::mutable_bgpapiobjects(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiObjectResp.BgpApiobjects)
  return bgpapiobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >*
SLBgpApiObjectResp::mutable_bgpapiobjects() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgpApiObjectResp.BgpApiobjects)
  return &bgpapiobjects_;
}
inline const ::service_layer::SLBgpApiObject& SLBgpApiObjectResp::_internal_bgpapiobjects(int index) const {
  return bgpapiobjects_.Get(index);
}
inline const ::service_layer::SLBgpApiObject& SLBgpApiObjectResp::bgpapiobjects(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectResp.BgpApiobjects)
  return _internal_bgpapiobjects(index);
}
inline ::service_layer::SLBgpApiObject* SLBgpApiObjectResp::_internal_add_bgpapiobjects() {
  return bgpapiobjects_.Add();
}
inline ::service_layer::SLBgpApiObject* SLBgpApiObjectResp::add_bgpapiobjects() {
  ::service_layer::SLBgpApiObject* _add = _internal_add_bgpapiobjects();
  // @@protoc_insertion_point(field_add:service_layer.SLBgpApiObjectResp.BgpApiobjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >&
SLBgpApiObjectResp::bgpapiobjects() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgpApiObjectResp.BgpApiobjects)
  return bgpapiobjects_;
}

// -------------------------------------------------------------------

// SLBgpApiObjectReq

// uint64 OperationId = 1;
inline void SLBgpApiObjectReq::clear_operationid() {
  operationid_ = uint64_t{0u};
}
inline uint64_t SLBgpApiObjectReq::_internal_operationid() const {
  return operationid_;
}
inline uint64_t SLBgpApiObjectReq::operationid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectReq.OperationId)
  return _internal_operationid();
}
inline void SLBgpApiObjectReq::_internal_set_operationid(uint64_t value) {
  
  operationid_ = value;
}
inline void SLBgpApiObjectReq::set_operationid(uint64_t value) {
  _internal_set_operationid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiObjectReq.OperationId)
}

// .service_layer.SLBgpApiObjectOp Oper = 2;
inline void SLBgpApiObjectReq::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLBgpApiObjectOp SLBgpApiObjectReq::_internal_oper() const {
  return static_cast< ::service_layer::SLBgpApiObjectOp >(oper_);
}
inline ::service_layer::SLBgpApiObjectOp SLBgpApiObjectReq::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectReq.Oper)
  return _internal_oper();
}
inline void SLBgpApiObjectReq::_internal_set_oper(::service_layer::SLBgpApiObjectOp value) {
  
  oper_ = value;
}
inline void SLBgpApiObjectReq::set_oper(::service_layer::SLBgpApiObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiObjectReq.Oper)
}

// string BgpInstanceName = 3;
inline void SLBgpApiObjectReq::clear_bgpinstancename() {
  bgpinstancename_.ClearToEmpty();
}
inline const std::string& SLBgpApiObjectReq::bgpinstancename() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectReq.BgpInstanceName)
  return _internal_bgpinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgpApiObjectReq::set_bgpinstancename(ArgT0&& arg0, ArgT... args) {
 
 bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiObjectReq.BgpInstanceName)
}
inline std::string* SLBgpApiObjectReq::mutable_bgpinstancename() {
  std::string* _s = _internal_mutable_bgpinstancename();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiObjectReq.BgpInstanceName)
  return _s;
}
inline const std::string& SLBgpApiObjectReq::_internal_bgpinstancename() const {
  return bgpinstancename_.Get();
}
inline void SLBgpApiObjectReq::_internal_set_bgpinstancename(const std::string& value) {
  
  bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpApiObjectReq::_internal_mutable_bgpinstancename() {
  
  return bgpinstancename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpApiObjectReq::release_bgpinstancename() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiObjectReq.BgpInstanceName)
  return bgpinstancename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgpApiObjectReq::set_allocated_bgpinstancename(std::string* bgpinstancename) {
  if (bgpinstancename != nullptr) {
    
  } else {
    
  }
  bgpinstancename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgpinstancename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgpinstancename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiObjectReq.BgpInstanceName)
}

// repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
inline int SLBgpApiObjectReq::_internal_bgpapiobjects_size() const {
  return bgpapiobjects_.size();
}
inline int SLBgpApiObjectReq::bgpapiobjects_size() const {
  return _internal_bgpapiobjects_size();
}
inline void SLBgpApiObjectReq::clear_bgpapiobjects() {
  bgpapiobjects_.Clear();
}
inline ::service_layer::SLBgpApiObject* SLBgpApiObjectReq::mutable_bgpapiobjects(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiObjectReq.BgpApiobjects)
  return bgpapiobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >*
SLBgpApiObjectReq::mutable_bgpapiobjects() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgpApiObjectReq.BgpApiobjects)
  return &bgpapiobjects_;
}
inline const ::service_layer::SLBgpApiObject& SLBgpApiObjectReq::_internal_bgpapiobjects(int index) const {
  return bgpapiobjects_.Get(index);
}
inline const ::service_layer::SLBgpApiObject& SLBgpApiObjectReq::bgpapiobjects(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiObjectReq.BgpApiobjects)
  return _internal_bgpapiobjects(index);
}
inline ::service_layer::SLBgpApiObject* SLBgpApiObjectReq::_internal_add_bgpapiobjects() {
  return bgpapiobjects_.Add();
}
inline ::service_layer::SLBgpApiObject* SLBgpApiObjectReq::add_bgpapiobjects() {
  ::service_layer::SLBgpApiObject* _add = _internal_add_bgpapiobjects();
  // @@protoc_insertion_point(field_add:service_layer.SLBgpApiObjectReq.BgpApiobjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >&
SLBgpApiObjectReq::bgpapiobjects() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgpApiObjectReq.BgpApiobjects)
  return bgpapiobjects_;
}

// -------------------------------------------------------------------

// SLBgpApiGetResp

// string BgpInstanceName = 1;
inline void SLBgpApiGetResp::clear_bgpinstancename() {
  bgpinstancename_.ClearToEmpty();
}
inline const std::string& SLBgpApiGetResp::bgpinstancename() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetResp.BgpInstanceName)
  return _internal_bgpinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgpApiGetResp::set_bgpinstancename(ArgT0&& arg0, ArgT... args) {
 
 bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiGetResp.BgpInstanceName)
}
inline std::string* SLBgpApiGetResp::mutable_bgpinstancename() {
  std::string* _s = _internal_mutable_bgpinstancename();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiGetResp.BgpInstanceName)
  return _s;
}
inline const std::string& SLBgpApiGetResp::_internal_bgpinstancename() const {
  return bgpinstancename_.Get();
}
inline void SLBgpApiGetResp::_internal_set_bgpinstancename(const std::string& value) {
  
  bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpApiGetResp::_internal_mutable_bgpinstancename() {
  
  return bgpinstancename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpApiGetResp::release_bgpinstancename() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiGetResp.BgpInstanceName)
  return bgpinstancename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgpApiGetResp::set_allocated_bgpinstancename(std::string* bgpinstancename) {
  if (bgpinstancename != nullptr) {
    
  } else {
    
  }
  bgpinstancename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgpinstancename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgpinstancename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiGetResp.BgpInstanceName)
}

// bool Eof = 2;
inline void SLBgpApiGetResp::clear_eof() {
  eof_ = false;
}
inline bool SLBgpApiGetResp::_internal_eof() const {
  return eof_;
}
inline bool SLBgpApiGetResp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetResp.Eof)
  return _internal_eof();
}
inline void SLBgpApiGetResp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLBgpApiGetResp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiGetResp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 3;
inline bool SLBgpApiGetResp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBgpApiGetResp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBgpApiGetResp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBgpApiGetResp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetResp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBgpApiGetResp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiGetResp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBgpApiGetResp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBgpApiGetResp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiGetResp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBgpApiGetResp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBgpApiGetResp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiGetResp.ErrStatus)
  return _msg;
}
inline void SLBgpApiGetResp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiGetResp.ErrStatus)
}

// repeated .service_layer.SLBgpApiObject BgpApiobjects = 4;
inline int SLBgpApiGetResp::_internal_bgpapiobjects_size() const {
  return bgpapiobjects_.size();
}
inline int SLBgpApiGetResp::bgpapiobjects_size() const {
  return _internal_bgpapiobjects_size();
}
inline void SLBgpApiGetResp::clear_bgpapiobjects() {
  bgpapiobjects_.Clear();
}
inline ::service_layer::SLBgpApiObject* SLBgpApiGetResp::mutable_bgpapiobjects(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiGetResp.BgpApiobjects)
  return bgpapiobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >*
SLBgpApiGetResp::mutable_bgpapiobjects() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgpApiGetResp.BgpApiobjects)
  return &bgpapiobjects_;
}
inline const ::service_layer::SLBgpApiObject& SLBgpApiGetResp::_internal_bgpapiobjects(int index) const {
  return bgpapiobjects_.Get(index);
}
inline const ::service_layer::SLBgpApiObject& SLBgpApiGetResp::bgpapiobjects(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetResp.BgpApiobjects)
  return _internal_bgpapiobjects(index);
}
inline ::service_layer::SLBgpApiObject* SLBgpApiGetResp::_internal_add_bgpapiobjects() {
  return bgpapiobjects_.Add();
}
inline ::service_layer::SLBgpApiObject* SLBgpApiGetResp::add_bgpapiobjects() {
  ::service_layer::SLBgpApiObject* _add = _internal_add_bgpapiobjects();
  // @@protoc_insertion_point(field_add:service_layer.SLBgpApiGetResp.BgpApiobjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgpApiObject >&
SLBgpApiGetResp::bgpapiobjects() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgpApiGetResp.BgpApiobjects)
  return bgpapiobjects_;
}

// -------------------------------------------------------------------

// SLBgpApiGetReq

// string BgpInstanceName = 1;
inline void SLBgpApiGetReq::clear_bgpinstancename() {
  bgpinstancename_.ClearToEmpty();
}
inline const std::string& SLBgpApiGetReq::bgpinstancename() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetReq.BgpInstanceName)
  return _internal_bgpinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgpApiGetReq::set_bgpinstancename(ArgT0&& arg0, ArgT... args) {
 
 bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiGetReq.BgpInstanceName)
}
inline std::string* SLBgpApiGetReq::mutable_bgpinstancename() {
  std::string* _s = _internal_mutable_bgpinstancename();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiGetReq.BgpInstanceName)
  return _s;
}
inline const std::string& SLBgpApiGetReq::_internal_bgpinstancename() const {
  return bgpinstancename_.Get();
}
inline void SLBgpApiGetReq::_internal_set_bgpinstancename(const std::string& value) {
  
  bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpApiGetReq::_internal_mutable_bgpinstancename() {
  
  return bgpinstancename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpApiGetReq::release_bgpinstancename() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiGetReq.BgpInstanceName)
  return bgpinstancename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgpApiGetReq::set_allocated_bgpinstancename(std::string* bgpinstancename) {
  if (bgpinstancename != nullptr) {
    
  } else {
    
  }
  bgpinstancename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgpinstancename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgpinstancename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgpinstancename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiGetReq.BgpInstanceName)
}

// .service_layer.SLBgpApiObjectType ObjectType = 2;
inline void SLBgpApiGetReq::clear_objecttype() {
  objecttype_ = 0;
}
inline ::service_layer::SLBgpApiObjectType SLBgpApiGetReq::_internal_objecttype() const {
  return static_cast< ::service_layer::SLBgpApiObjectType >(objecttype_);
}
inline ::service_layer::SLBgpApiObjectType SLBgpApiGetReq::objecttype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetReq.ObjectType)
  return _internal_objecttype();
}
inline void SLBgpApiGetReq::_internal_set_objecttype(::service_layer::SLBgpApiObjectType value) {
  
  objecttype_ = value;
}
inline void SLBgpApiGetReq::set_objecttype(::service_layer::SLBgpApiObjectType value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiGetReq.ObjectType)
}

// .service_layer.SLBgpNeighborKey Neighbor = 3;
inline bool SLBgpApiGetReq::_internal_has_neighbor() const {
  return entry_case() == kNeighbor;
}
inline bool SLBgpApiGetReq::has_neighbor() const {
  return _internal_has_neighbor();
}
inline void SLBgpApiGetReq::set_has_neighbor() {
  _oneof_case_[0] = kNeighbor;
}
inline void SLBgpApiGetReq::clear_neighbor() {
  if (_internal_has_neighbor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.neighbor_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpNeighborKey* SLBgpApiGetReq::release_neighbor() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiGetReq.Neighbor)
  if (_internal_has_neighbor()) {
    clear_has_entry();
      ::service_layer::SLBgpNeighborKey* temp = entry_.neighbor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.neighbor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpNeighborKey& SLBgpApiGetReq::_internal_neighbor() const {
  return _internal_has_neighbor()
      ? *entry_.neighbor_
      : reinterpret_cast< ::service_layer::SLBgpNeighborKey&>(::service_layer::_SLBgpNeighborKey_default_instance_);
}
inline const ::service_layer::SLBgpNeighborKey& SLBgpApiGetReq::neighbor() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetReq.Neighbor)
  return _internal_neighbor();
}
inline ::service_layer::SLBgpNeighborKey* SLBgpApiGetReq::unsafe_arena_release_neighbor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiGetReq.Neighbor)
  if (_internal_has_neighbor()) {
    clear_has_entry();
    ::service_layer::SLBgpNeighborKey* temp = entry_.neighbor_;
    entry_.neighbor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiGetReq::unsafe_arena_set_allocated_neighbor(::service_layer::SLBgpNeighborKey* neighbor) {
  clear_entry();
  if (neighbor) {
    set_has_neighbor();
    entry_.neighbor_ = neighbor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiGetReq.Neighbor)
}
inline ::service_layer::SLBgpNeighborKey* SLBgpApiGetReq::_internal_mutable_neighbor() {
  if (!_internal_has_neighbor()) {
    clear_entry();
    set_has_neighbor();
    entry_.neighbor_ = CreateMaybeMessage< ::service_layer::SLBgpNeighborKey >(GetArenaForAllocation());
  }
  return entry_.neighbor_;
}
inline ::service_layer::SLBgpNeighborKey* SLBgpApiGetReq::mutable_neighbor() {
  ::service_layer::SLBgpNeighborKey* _msg = _internal_mutable_neighbor();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiGetReq.Neighbor)
  return _msg;
}

// uint32 EntriesCount = 4;
inline void SLBgpApiGetReq::clear_entriescount() {
  entriescount_ = 0u;
}
inline uint32_t SLBgpApiGetReq::_internal_entriescount() const {
  return entriescount_;
}
inline uint32_t SLBgpApiGetReq::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetReq.EntriesCount)
  return _internal_entriescount();
}
inline void SLBgpApiGetReq::_internal_set_entriescount(uint32_t value) {
  
  entriescount_ = value;
}
inline void SLBgpApiGetReq::set_entriescount(uint32_t value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiGetReq.EntriesCount)
}

// bool GetNext = 5;
inline void SLBgpApiGetReq::clear_getnext() {
  getnext_ = false;
}
inline bool SLBgpApiGetReq::_internal_getnext() const {
  return getnext_;
}
inline bool SLBgpApiGetReq::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiGetReq.GetNext)
  return _internal_getnext();
}
inline void SLBgpApiGetReq::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLBgpApiGetReq::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiGetReq.GetNext)
}

inline bool SLBgpApiGetReq::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpApiGetReq::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpApiGetReq::EntryCase SLBgpApiGetReq::entry_case() const {
  return SLBgpApiGetReq::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpApiCapResp

// -------------------------------------------------------------------

// SLBgpApiCapReq

// string BgpInstanceName = 1;
inline bool SLBgpApiCapReq::_internal_has_bgpinstancename() const {
  return entry_case() == kBgpInstanceName;
}
inline bool SLBgpApiCapReq::has_bgpinstancename() const {
  return _internal_has_bgpinstancename();
}
inline void SLBgpApiCapReq::set_has_bgpinstancename() {
  _oneof_case_[0] = kBgpInstanceName;
}
inline void SLBgpApiCapReq::clear_bgpinstancename() {
  if (_internal_has_bgpinstancename()) {
    entry_.bgpinstancename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_entry();
  }
}
inline const std::string& SLBgpApiCapReq::bgpinstancename() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiCapReq.BgpInstanceName)
  return _internal_bgpinstancename();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgpApiCapReq::set_bgpinstancename(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bgpinstancename()) {
    clear_entry();
    set_has_bgpinstancename();
    entry_.bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entry_.bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiCapReq.BgpInstanceName)
}
inline std::string* SLBgpApiCapReq::mutable_bgpinstancename() {
  std::string* _s = _internal_mutable_bgpinstancename();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiCapReq.BgpInstanceName)
  return _s;
}
inline const std::string& SLBgpApiCapReq::_internal_bgpinstancename() const {
  if (_internal_has_bgpinstancename()) {
    return entry_.bgpinstancename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgpApiCapReq::_internal_set_bgpinstancename(const std::string& value) {
  if (!_internal_has_bgpinstancename()) {
    clear_entry();
    set_has_bgpinstancename();
    entry_.bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entry_.bgpinstancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpApiCapReq::_internal_mutable_bgpinstancename() {
  if (!_internal_has_bgpinstancename()) {
    clear_entry();
    set_has_bgpinstancename();
    entry_.bgpinstancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return entry_.bgpinstancename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpApiCapReq::release_bgpinstancename() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiCapReq.BgpInstanceName)
  if (_internal_has_bgpinstancename()) {
    clear_has_entry();
    return entry_.bgpinstancename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgpApiCapReq::set_allocated_bgpinstancename(std::string* bgpinstancename) {
  if (has_entry()) {
    clear_entry();
  }
  if (bgpinstancename != nullptr) {
    set_has_bgpinstancename();
    entry_.bgpinstancename_.UnsafeSetDefault(bgpinstancename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bgpinstancename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiCapReq.BgpInstanceName)
}

inline bool SLBgpApiCapReq::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpApiCapReq::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpApiCapReq::EntryCase SLBgpApiCapReq::entry_case() const {
  return SLBgpApiCapReq::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpApiMsgRsp

// uint64 Correlator = 1;
inline void SLBgpApiMsgRsp::clear_correlator() {
  correlator_ = uint64_t{0u};
}
inline uint64_t SLBgpApiMsgRsp::_internal_correlator() const {
  return correlator_;
}
inline uint64_t SLBgpApiMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLBgpApiMsgRsp::_internal_set_correlator(uint64_t value) {
  
  correlator_ = value;
}
inline void SLBgpApiMsgRsp::set_correlator(uint64_t value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiMsgRsp.Correlator)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLBgpApiMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLBgpApiMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLBgpApiMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBgpApiMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLBgpApiMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBgpApiMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBgpApiMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLBgpApiMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBgpApiMsgRsp::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsgRsp.ErrStatus)
  return _msg;
}
inline void SLBgpApiMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpApiMsgRsp.ErrStatus)
}

// .service_layer.SLBgpApiCapResp BgpApiCapResp = 3;
inline bool SLBgpApiMsgRsp::_internal_has_bgpapicapresp() const {
  return entry_case() == kBgpApiCapResp;
}
inline bool SLBgpApiMsgRsp::has_bgpapicapresp() const {
  return _internal_has_bgpapicapresp();
}
inline void SLBgpApiMsgRsp::set_has_bgpapicapresp() {
  _oneof_case_[0] = kBgpApiCapResp;
}
inline void SLBgpApiMsgRsp::clear_bgpapicapresp() {
  if (_internal_has_bgpapicapresp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.bgpapicapresp_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpApiCapResp* SLBgpApiMsgRsp::release_bgpapicapresp() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsgRsp.BgpApiCapResp)
  if (_internal_has_bgpapicapresp()) {
    clear_has_entry();
      ::service_layer::SLBgpApiCapResp* temp = entry_.bgpapicapresp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.bgpapicapresp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpApiCapResp& SLBgpApiMsgRsp::_internal_bgpapicapresp() const {
  return _internal_has_bgpapicapresp()
      ? *entry_.bgpapicapresp_
      : reinterpret_cast< ::service_layer::SLBgpApiCapResp&>(::service_layer::_SLBgpApiCapResp_default_instance_);
}
inline const ::service_layer::SLBgpApiCapResp& SLBgpApiMsgRsp::bgpapicapresp() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsgRsp.BgpApiCapResp)
  return _internal_bgpapicapresp();
}
inline ::service_layer::SLBgpApiCapResp* SLBgpApiMsgRsp::unsafe_arena_release_bgpapicapresp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiMsgRsp.BgpApiCapResp)
  if (_internal_has_bgpapicapresp()) {
    clear_has_entry();
    ::service_layer::SLBgpApiCapResp* temp = entry_.bgpapicapresp_;
    entry_.bgpapicapresp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiMsgRsp::unsafe_arena_set_allocated_bgpapicapresp(::service_layer::SLBgpApiCapResp* bgpapicapresp) {
  clear_entry();
  if (bgpapicapresp) {
    set_has_bgpapicapresp();
    entry_.bgpapicapresp_ = bgpapicapresp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsgRsp.BgpApiCapResp)
}
inline ::service_layer::SLBgpApiCapResp* SLBgpApiMsgRsp::_internal_mutable_bgpapicapresp() {
  if (!_internal_has_bgpapicapresp()) {
    clear_entry();
    set_has_bgpapicapresp();
    entry_.bgpapicapresp_ = CreateMaybeMessage< ::service_layer::SLBgpApiCapResp >(GetArenaForAllocation());
  }
  return entry_.bgpapicapresp_;
}
inline ::service_layer::SLBgpApiCapResp* SLBgpApiMsgRsp::mutable_bgpapicapresp() {
  ::service_layer::SLBgpApiCapResp* _msg = _internal_mutable_bgpapicapresp();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsgRsp.BgpApiCapResp)
  return _msg;
}

// .service_layer.SLBgpApiGetResp BgpApiGetResp = 4;
inline bool SLBgpApiMsgRsp::_internal_has_bgpapigetresp() const {
  return entry_case() == kBgpApiGetResp;
}
inline bool SLBgpApiMsgRsp::has_bgpapigetresp() const {
  return _internal_has_bgpapigetresp();
}
inline void SLBgpApiMsgRsp::set_has_bgpapigetresp() {
  _oneof_case_[0] = kBgpApiGetResp;
}
inline void SLBgpApiMsgRsp::clear_bgpapigetresp() {
  if (_internal_has_bgpapigetresp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.bgpapigetresp_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpApiGetResp* SLBgpApiMsgRsp::release_bgpapigetresp() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsgRsp.BgpApiGetResp)
  if (_internal_has_bgpapigetresp()) {
    clear_has_entry();
      ::service_layer::SLBgpApiGetResp* temp = entry_.bgpapigetresp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.bgpapigetresp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpApiGetResp& SLBgpApiMsgRsp::_internal_bgpapigetresp() const {
  return _internal_has_bgpapigetresp()
      ? *entry_.bgpapigetresp_
      : reinterpret_cast< ::service_layer::SLBgpApiGetResp&>(::service_layer::_SLBgpApiGetResp_default_instance_);
}
inline const ::service_layer::SLBgpApiGetResp& SLBgpApiMsgRsp::bgpapigetresp() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsgRsp.BgpApiGetResp)
  return _internal_bgpapigetresp();
}
inline ::service_layer::SLBgpApiGetResp* SLBgpApiMsgRsp::unsafe_arena_release_bgpapigetresp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiMsgRsp.BgpApiGetResp)
  if (_internal_has_bgpapigetresp()) {
    clear_has_entry();
    ::service_layer::SLBgpApiGetResp* temp = entry_.bgpapigetresp_;
    entry_.bgpapigetresp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiMsgRsp::unsafe_arena_set_allocated_bgpapigetresp(::service_layer::SLBgpApiGetResp* bgpapigetresp) {
  clear_entry();
  if (bgpapigetresp) {
    set_has_bgpapigetresp();
    entry_.bgpapigetresp_ = bgpapigetresp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsgRsp.BgpApiGetResp)
}
inline ::service_layer::SLBgpApiGetResp* SLBgpApiMsgRsp::_internal_mutable_bgpapigetresp() {
  if (!_internal_has_bgpapigetresp()) {
    clear_entry();
    set_has_bgpapigetresp();
    entry_.bgpapigetresp_ = CreateMaybeMessage< ::service_layer::SLBgpApiGetResp >(GetArenaForAllocation());
  }
  return entry_.bgpapigetresp_;
}
inline ::service_layer::SLBgpApiGetResp* SLBgpApiMsgRsp::mutable_bgpapigetresp() {
  ::service_layer::SLBgpApiGetResp* _msg = _internal_mutable_bgpapigetresp();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsgRsp.BgpApiGetResp)
  return _msg;
}

// .service_layer.SLBgpApiObjectResp BgpApiObjectResp = 5;
inline bool SLBgpApiMsgRsp::_internal_has_bgpapiobjectresp() const {
  return entry_case() == kBgpApiObjectResp;
}
inline bool SLBgpApiMsgRsp::has_bgpapiobjectresp() const {
  return _internal_has_bgpapiobjectresp();
}
inline void SLBgpApiMsgRsp::set_has_bgpapiobjectresp() {
  _oneof_case_[0] = kBgpApiObjectResp;
}
inline void SLBgpApiMsgRsp::clear_bgpapiobjectresp() {
  if (_internal_has_bgpapiobjectresp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.bgpapiobjectresp_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpApiObjectResp* SLBgpApiMsgRsp::release_bgpapiobjectresp() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsgRsp.BgpApiObjectResp)
  if (_internal_has_bgpapiobjectresp()) {
    clear_has_entry();
      ::service_layer::SLBgpApiObjectResp* temp = entry_.bgpapiobjectresp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.bgpapiobjectresp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpApiObjectResp& SLBgpApiMsgRsp::_internal_bgpapiobjectresp() const {
  return _internal_has_bgpapiobjectresp()
      ? *entry_.bgpapiobjectresp_
      : reinterpret_cast< ::service_layer::SLBgpApiObjectResp&>(::service_layer::_SLBgpApiObjectResp_default_instance_);
}
inline const ::service_layer::SLBgpApiObjectResp& SLBgpApiMsgRsp::bgpapiobjectresp() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsgRsp.BgpApiObjectResp)
  return _internal_bgpapiobjectresp();
}
inline ::service_layer::SLBgpApiObjectResp* SLBgpApiMsgRsp::unsafe_arena_release_bgpapiobjectresp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiMsgRsp.BgpApiObjectResp)
  if (_internal_has_bgpapiobjectresp()) {
    clear_has_entry();
    ::service_layer::SLBgpApiObjectResp* temp = entry_.bgpapiobjectresp_;
    entry_.bgpapiobjectresp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiMsgRsp::unsafe_arena_set_allocated_bgpapiobjectresp(::service_layer::SLBgpApiObjectResp* bgpapiobjectresp) {
  clear_entry();
  if (bgpapiobjectresp) {
    set_has_bgpapiobjectresp();
    entry_.bgpapiobjectresp_ = bgpapiobjectresp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsgRsp.BgpApiObjectResp)
}
inline ::service_layer::SLBgpApiObjectResp* SLBgpApiMsgRsp::_internal_mutable_bgpapiobjectresp() {
  if (!_internal_has_bgpapiobjectresp()) {
    clear_entry();
    set_has_bgpapiobjectresp();
    entry_.bgpapiobjectresp_ = CreateMaybeMessage< ::service_layer::SLBgpApiObjectResp >(GetArenaForAllocation());
  }
  return entry_.bgpapiobjectresp_;
}
inline ::service_layer::SLBgpApiObjectResp* SLBgpApiMsgRsp::mutable_bgpapiobjectresp() {
  ::service_layer::SLBgpApiObjectResp* _msg = _internal_mutable_bgpapiobjectresp();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsgRsp.BgpApiObjectResp)
  return _msg;
}

inline bool SLBgpApiMsgRsp::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpApiMsgRsp::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpApiMsgRsp::EntryCase SLBgpApiMsgRsp::entry_case() const {
  return SLBgpApiMsgRsp::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgpApiMsg

// uint64 Correlator = 1;
inline void SLBgpApiMsg::clear_correlator() {
  correlator_ = uint64_t{0u};
}
inline uint64_t SLBgpApiMsg::_internal_correlator() const {
  return correlator_;
}
inline uint64_t SLBgpApiMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsg.Correlator)
  return _internal_correlator();
}
inline void SLBgpApiMsg::_internal_set_correlator(uint64_t value) {
  
  correlator_ = value;
}
inline void SLBgpApiMsg::set_correlator(uint64_t value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgpApiMsg.Correlator)
}

// .service_layer.SLBgpApiCapReq BgpApiCapReq = 2;
inline bool SLBgpApiMsg::_internal_has_bgpapicapreq() const {
  return entry_case() == kBgpApiCapReq;
}
inline bool SLBgpApiMsg::has_bgpapicapreq() const {
  return _internal_has_bgpapicapreq();
}
inline void SLBgpApiMsg::set_has_bgpapicapreq() {
  _oneof_case_[0] = kBgpApiCapReq;
}
inline void SLBgpApiMsg::clear_bgpapicapreq() {
  if (_internal_has_bgpapicapreq()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.bgpapicapreq_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpApiCapReq* SLBgpApiMsg::release_bgpapicapreq() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsg.BgpApiCapReq)
  if (_internal_has_bgpapicapreq()) {
    clear_has_entry();
      ::service_layer::SLBgpApiCapReq* temp = entry_.bgpapicapreq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.bgpapicapreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpApiCapReq& SLBgpApiMsg::_internal_bgpapicapreq() const {
  return _internal_has_bgpapicapreq()
      ? *entry_.bgpapicapreq_
      : reinterpret_cast< ::service_layer::SLBgpApiCapReq&>(::service_layer::_SLBgpApiCapReq_default_instance_);
}
inline const ::service_layer::SLBgpApiCapReq& SLBgpApiMsg::bgpapicapreq() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsg.BgpApiCapReq)
  return _internal_bgpapicapreq();
}
inline ::service_layer::SLBgpApiCapReq* SLBgpApiMsg::unsafe_arena_release_bgpapicapreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiMsg.BgpApiCapReq)
  if (_internal_has_bgpapicapreq()) {
    clear_has_entry();
    ::service_layer::SLBgpApiCapReq* temp = entry_.bgpapicapreq_;
    entry_.bgpapicapreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiMsg::unsafe_arena_set_allocated_bgpapicapreq(::service_layer::SLBgpApiCapReq* bgpapicapreq) {
  clear_entry();
  if (bgpapicapreq) {
    set_has_bgpapicapreq();
    entry_.bgpapicapreq_ = bgpapicapreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsg.BgpApiCapReq)
}
inline ::service_layer::SLBgpApiCapReq* SLBgpApiMsg::_internal_mutable_bgpapicapreq() {
  if (!_internal_has_bgpapicapreq()) {
    clear_entry();
    set_has_bgpapicapreq();
    entry_.bgpapicapreq_ = CreateMaybeMessage< ::service_layer::SLBgpApiCapReq >(GetArenaForAllocation());
  }
  return entry_.bgpapicapreq_;
}
inline ::service_layer::SLBgpApiCapReq* SLBgpApiMsg::mutable_bgpapicapreq() {
  ::service_layer::SLBgpApiCapReq* _msg = _internal_mutable_bgpapicapreq();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsg.BgpApiCapReq)
  return _msg;
}

// .service_layer.SLBgpApiGetReq BgpApiGetReq = 3;
inline bool SLBgpApiMsg::_internal_has_bgpapigetreq() const {
  return entry_case() == kBgpApiGetReq;
}
inline bool SLBgpApiMsg::has_bgpapigetreq() const {
  return _internal_has_bgpapigetreq();
}
inline void SLBgpApiMsg::set_has_bgpapigetreq() {
  _oneof_case_[0] = kBgpApiGetReq;
}
inline void SLBgpApiMsg::clear_bgpapigetreq() {
  if (_internal_has_bgpapigetreq()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.bgpapigetreq_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpApiGetReq* SLBgpApiMsg::release_bgpapigetreq() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsg.BgpApiGetReq)
  if (_internal_has_bgpapigetreq()) {
    clear_has_entry();
      ::service_layer::SLBgpApiGetReq* temp = entry_.bgpapigetreq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.bgpapigetreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpApiGetReq& SLBgpApiMsg::_internal_bgpapigetreq() const {
  return _internal_has_bgpapigetreq()
      ? *entry_.bgpapigetreq_
      : reinterpret_cast< ::service_layer::SLBgpApiGetReq&>(::service_layer::_SLBgpApiGetReq_default_instance_);
}
inline const ::service_layer::SLBgpApiGetReq& SLBgpApiMsg::bgpapigetreq() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsg.BgpApiGetReq)
  return _internal_bgpapigetreq();
}
inline ::service_layer::SLBgpApiGetReq* SLBgpApiMsg::unsafe_arena_release_bgpapigetreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiMsg.BgpApiGetReq)
  if (_internal_has_bgpapigetreq()) {
    clear_has_entry();
    ::service_layer::SLBgpApiGetReq* temp = entry_.bgpapigetreq_;
    entry_.bgpapigetreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiMsg::unsafe_arena_set_allocated_bgpapigetreq(::service_layer::SLBgpApiGetReq* bgpapigetreq) {
  clear_entry();
  if (bgpapigetreq) {
    set_has_bgpapigetreq();
    entry_.bgpapigetreq_ = bgpapigetreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsg.BgpApiGetReq)
}
inline ::service_layer::SLBgpApiGetReq* SLBgpApiMsg::_internal_mutable_bgpapigetreq() {
  if (!_internal_has_bgpapigetreq()) {
    clear_entry();
    set_has_bgpapigetreq();
    entry_.bgpapigetreq_ = CreateMaybeMessage< ::service_layer::SLBgpApiGetReq >(GetArenaForAllocation());
  }
  return entry_.bgpapigetreq_;
}
inline ::service_layer::SLBgpApiGetReq* SLBgpApiMsg::mutable_bgpapigetreq() {
  ::service_layer::SLBgpApiGetReq* _msg = _internal_mutable_bgpapigetreq();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsg.BgpApiGetReq)
  return _msg;
}

// .service_layer.SLBgpApiObjectReq BgpApiobjectReq = 4;
inline bool SLBgpApiMsg::_internal_has_bgpapiobjectreq() const {
  return entry_case() == kBgpApiobjectReq;
}
inline bool SLBgpApiMsg::has_bgpapiobjectreq() const {
  return _internal_has_bgpapiobjectreq();
}
inline void SLBgpApiMsg::set_has_bgpapiobjectreq() {
  _oneof_case_[0] = kBgpApiobjectReq;
}
inline void SLBgpApiMsg::clear_bgpapiobjectreq() {
  if (_internal_has_bgpapiobjectreq()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entry_.bgpapiobjectreq_;
    }
    clear_has_entry();
  }
}
inline ::service_layer::SLBgpApiObjectReq* SLBgpApiMsg::release_bgpapiobjectreq() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpApiMsg.BgpApiobjectReq)
  if (_internal_has_bgpapiobjectreq()) {
    clear_has_entry();
      ::service_layer::SLBgpApiObjectReq* temp = entry_.bgpapiobjectreq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.bgpapiobjectreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgpApiObjectReq& SLBgpApiMsg::_internal_bgpapiobjectreq() const {
  return _internal_has_bgpapiobjectreq()
      ? *entry_.bgpapiobjectreq_
      : reinterpret_cast< ::service_layer::SLBgpApiObjectReq&>(::service_layer::_SLBgpApiObjectReq_default_instance_);
}
inline const ::service_layer::SLBgpApiObjectReq& SLBgpApiMsg::bgpapiobjectreq() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpApiMsg.BgpApiobjectReq)
  return _internal_bgpapiobjectreq();
}
inline ::service_layer::SLBgpApiObjectReq* SLBgpApiMsg::unsafe_arena_release_bgpapiobjectreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgpApiMsg.BgpApiobjectReq)
  if (_internal_has_bgpapiobjectreq()) {
    clear_has_entry();
    ::service_layer::SLBgpApiObjectReq* temp = entry_.bgpapiobjectreq_;
    entry_.bgpapiobjectreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgpApiMsg::unsafe_arena_set_allocated_bgpapiobjectreq(::service_layer::SLBgpApiObjectReq* bgpapiobjectreq) {
  clear_entry();
  if (bgpapiobjectreq) {
    set_has_bgpapiobjectreq();
    entry_.bgpapiobjectreq_ = bgpapiobjectreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgpApiMsg.BgpApiobjectReq)
}
inline ::service_layer::SLBgpApiObjectReq* SLBgpApiMsg::_internal_mutable_bgpapiobjectreq() {
  if (!_internal_has_bgpapiobjectreq()) {
    clear_entry();
    set_has_bgpapiobjectreq();
    entry_.bgpapiobjectreq_ = CreateMaybeMessage< ::service_layer::SLBgpApiObjectReq >(GetArenaForAllocation());
  }
  return entry_.bgpapiobjectreq_;
}
inline ::service_layer::SLBgpApiObjectReq* SLBgpApiMsg::mutable_bgpapiobjectreq() {
  ::service_layer::SLBgpApiObjectReq* _msg = _internal_mutable_bgpapiobjectreq();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpApiMsg.BgpApiobjectReq)
  return _msg;
}

inline bool SLBgpApiMsg::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void SLBgpApiMsg::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline SLBgpApiMsg::EntryCase SLBgpApiMsg::entry_case() const {
  return SLBgpApiMsg::EntryCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLBgpBwUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgpBwUnit>() {
  return ::service_layer::SLBgpBwUnit_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgpAfi> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgpAfi>() {
  return ::service_layer::SLBgpAfi_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgpSafi> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgpSafi>() {
  return ::service_layer::SLBgpSafi_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgpApiObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgpApiObjectType>() {
  return ::service_layer::SLBgpApiObjectType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgpApiObjectOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgpApiObjectOp>() {
  return ::service_layer::SLBgpApiObjectOp_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgpApiStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgpApiStateType>() {
  return ::service_layer::SLBgpApiStateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fbgp_2eproto
