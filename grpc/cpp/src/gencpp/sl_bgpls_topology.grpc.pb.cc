// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_bgpls_topology.proto

#include "sl_bgpls_topology.pb.h"
#include "sl_bgpls_topology.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLBgplsTopo_method_names[] = {
  "/service_layer.SLBgplsTopo/SLBgplsTopoNotifStream",
};

std::unique_ptr< SLBgplsTopo::Stub> SLBgplsTopo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLBgplsTopo::Stub> stub(new SLBgplsTopo::Stub(channel, options));
  return stub;
}

SLBgplsTopo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SLBgplsTopoNotifStream_(SLBgplsTopo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::service_layer::SLBgplsTopoNotifMsg>* SLBgplsTopo::Stub::SLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request) {
  return ::grpc::internal::ClientReaderFactory< ::service_layer::SLBgplsTopoNotifMsg>::Create(channel_.get(), rpcmethod_SLBgplsTopoNotifStream_, context, request);
}

void SLBgplsTopo::Stub::async::SLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLBgplsTopoNotifMsg>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::service_layer::SLBgplsTopoNotifMsg>::Create(stub_->channel_.get(), stub_->rpcmethod_SLBgplsTopoNotifStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>* SLBgplsTopo::Stub::AsyncSLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::service_layer::SLBgplsTopoNotifMsg>::Create(channel_.get(), cq, rpcmethod_SLBgplsTopoNotifStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>* SLBgplsTopo::Stub::PrepareAsyncSLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::service_layer::SLBgplsTopoNotifMsg>::Create(channel_.get(), cq, rpcmethod_SLBgplsTopoNotifStream_, context, request, false, nullptr);
}

SLBgplsTopo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLBgplsTopo_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SLBgplsTopo::Service, ::service_layer::SLBgplsTopoNotifReqMsg, ::service_layer::SLBgplsTopoNotifMsg>(
          [](SLBgplsTopo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLBgplsTopoNotifReqMsg* req,
             ::grpc::ServerWriter<::service_layer::SLBgplsTopoNotifMsg>* writer) {
               return service->SLBgplsTopoNotifStream(ctx, req, writer);
             }, this)));
}

SLBgplsTopo::Service::~Service() {
}

::grpc::Status SLBgplsTopo::Service::SLBgplsTopoNotifStream(::grpc::ServerContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg* request, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

