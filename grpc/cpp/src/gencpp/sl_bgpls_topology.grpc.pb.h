// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_bgpls_topology.proto
// Original file comments:
// @file
// @brief RPC proto file for BGP-LS Topology Subscription Service.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
// @defgroup BGP-LS Topology Subscription
// @brief BGP-LS Topology Subscription service definitions.
//
#ifndef GRPC_sl_5fbgpls_5ftopology_2eproto__INCLUDED
#define GRPC_sl_5fbgpls_5ftopology_2eproto__INCLUDED

#include "sl_bgpls_topology.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// ===================================================================================================//
//                                          RPC Section                                              //
// ===================================================================================================//
//
// @defgroup SLBgplsTopoSubscription
// Defines RPC calls for subscribing to BGP-LS Topology updates.
// @{
class SLBgplsTopoSubscription final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLBgplsTopoSubscription";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // BGP-LS Topology Subscription
    //
    //
    // This call is used to get a stream of BGP-LS Topology updates.
    // It can be used to get "push" information for BGP-LS
    // adds/updates/deletes.
    //
    // The caller must maintain the GRPC channel as long as there is
    // interest in BGP-LS Topology information.
    //
    // The call takes a stream of requests to get updates, with the information on filter
    // to be applied while sending updates passed in the first request. The request stream
    // is then only maintained to indicate the interest in BGP-LS Topology information.
    //
    // The success/failure of the request is relayed in the response as error status.
    // If the request was successful, then the initial set of BGP-LS Topology information is sent
    // as a stream containing a Start marker, any BGP-LS Topology if present, and an End Marker.
    // The response stream will then be maintained to send subsequent updates and terminated only
    // when the request stream is terminated.
    //
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>> SLBgplsTopoGetUpdStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>>(SLBgplsTopoGetUpdStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>> AsyncSLBgplsTopoGetUpdStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>>(AsyncSLBgplsTopoGetUpdStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>> PrepareAsyncSLBgplsTopoGetUpdStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>>(PrepareAsyncSLBgplsTopoGetUpdStreamRaw(context, cq));
    }
    //
    // @}
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // BGP-LS Topology Subscription
      //
      //
      // This call is used to get a stream of BGP-LS Topology updates.
      // It can be used to get "push" information for BGP-LS
      // adds/updates/deletes.
      //
      // The caller must maintain the GRPC channel as long as there is
      // interest in BGP-LS Topology information.
      //
      // The call takes a stream of requests to get updates, with the information on filter
      // to be applied while sending updates passed in the first request. The request stream
      // is then only maintained to indicate the interest in BGP-LS Topology information.
      //
      // The success/failure of the request is relayed in the response as error status.
      // If the request was successful, then the initial set of BGP-LS Topology information is sent
      // as a stream containing a Start marker, any BGP-LS Topology if present, and an End Marker.
      // The response stream will then be maintained to send subsequent updates and terminated only
      // when the request stream is terminated.
      //
      virtual void SLBgplsTopoGetUpdStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLBgplsTopoGetUpdMsg,::service_layer::SLBgplsTopoUpdMsg>* reactor) = 0;
      //
      // @}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* SLBgplsTopoGetUpdStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* AsyncSLBgplsTopoGetUpdStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* PrepareAsyncSLBgplsTopoGetUpdStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>> SLBgplsTopoGetUpdStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>>(SLBgplsTopoGetUpdStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>> AsyncSLBgplsTopoGetUpdStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>>(AsyncSLBgplsTopoGetUpdStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>> PrepareAsyncSLBgplsTopoGetUpdStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>>(PrepareAsyncSLBgplsTopoGetUpdStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLBgplsTopoGetUpdStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLBgplsTopoGetUpdMsg,::service_layer::SLBgplsTopoUpdMsg>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* SLBgplsTopoGetUpdStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* AsyncSLBgplsTopoGetUpdStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* PrepareAsyncSLBgplsTopoGetUpdStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLBgplsTopoGetUpdStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // BGP-LS Topology Subscription
    //
    //
    // This call is used to get a stream of BGP-LS Topology updates.
    // It can be used to get "push" information for BGP-LS
    // adds/updates/deletes.
    //
    // The caller must maintain the GRPC channel as long as there is
    // interest in BGP-LS Topology information.
    //
    // The call takes a stream of requests to get updates, with the information on filter
    // to be applied while sending updates passed in the first request. The request stream
    // is then only maintained to indicate the interest in BGP-LS Topology information.
    //
    // The success/failure of the request is relayed in the response as error status.
    // If the request was successful, then the initial set of BGP-LS Topology information is sent
    // as a stream containing a Start marker, any BGP-LS Topology if present, and an End Marker.
    // The response stream will then be maintained to send subsequent updates and terminated only
    // when the request stream is terminated.
    //
    virtual ::grpc::Status SLBgplsTopoGetUpdStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* stream);
    //
    // @}
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBgplsTopoGetUpdStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBgplsTopoGetUpdStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLBgplsTopoGetUpdStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoGetUpdStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBgplsTopoGetUpdStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLBgplsTopoGetUpdStream<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLBgplsTopoGetUpdStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBgplsTopoGetUpdStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLBgplsTopoGetUpdStream(context); }));
    }
    ~WithCallbackMethod_SLBgplsTopoGetUpdStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoGetUpdStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLBgplsTopoGetUpdMsg, ::service_layer::SLBgplsTopoUpdMsg>* SLBgplsTopoGetUpdStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SLBgplsTopoGetUpdStream<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLBgplsTopoGetUpdStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBgplsTopoGetUpdStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLBgplsTopoGetUpdStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoGetUpdStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBgplsTopoGetUpdStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBgplsTopoGetUpdStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLBgplsTopoGetUpdStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoGetUpdStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBgplsTopoGetUpdStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBgplsTopoGetUpdStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBgplsTopoGetUpdStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLBgplsTopoGetUpdStream(context); }));
    }
    ~WithRawCallbackMethod_SLBgplsTopoGetUpdStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoGetUpdStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLBgplsTopoUpdMsg, ::service_layer::SLBgplsTopoGetUpdMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLBgplsTopoGetUpdStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};
// @addtogroup SLBgplsTopoSubscription
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5fbgpls_5ftopology_2eproto__INCLUDED
