// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_bgpls_topology.proto
// Original file comments:
// @file
// @brief RPC proto file for BGP-LS Topology Subscription Service.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
// @defgroup BGP-LS Topology Service
// @brief BGP-LS Topology Service definitions.
//
#ifndef GRPC_sl_5fbgpls_5ftopology_2eproto__INCLUDED
#define GRPC_sl_5fbgpls_5ftopology_2eproto__INCLUDED

#include "sl_bgpls_topology.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLBgplsTopo
// Defines RPC calls for BGP-LS Topology updates.
// @{
class SLBgplsTopo final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLBgplsTopo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // BGP-LS Topology Subscription
    //
    //
    // This call is used to get a stream of BGP-LS Topology updates.
    // It can be used to get "push" information for BGP-LS
    // adds/updates/deletes.
    //
    // The caller must close the response stream when it is no longer
    // interested in BGP-LS Topology information.
    //
    // The call takes a request message with the information on Match filters
    // to be applied while sending BGP-LS Topology updates in the response stream.
    //
    // The success/failure of the request is relayed in the response as error status.
    // If the request was successful, then the initial set of BGP-LS Topology
    // information is sent as a stream containing a Start marker, any BGP-LS
    // Topology if present, and an End Marker. The response stream will then
    // be maintained to send subsequent updates and terminated only when the
    // response stream is terminated by the caller.
    //
    // When the backend process handling the BGP-LS Topology subscription goes
    // for a restart and when it comes up and ready again, the caller would
    // get a Start marker, any BGP-LS Topology if present, and an End Marker.
    // Upon receiving the Start marker, the caller must perform a mark and
    // sweep operation on the data it received from this subscription.
    //
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>> SLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>>(SLBgplsTopoNotifStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>> AsyncSLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>>(AsyncSLBgplsTopoNotifStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>> PrepareAsyncSLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>>(PrepareAsyncSLBgplsTopoNotifStreamRaw(context, request, cq));
    }
    //
    // @}
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // BGP-LS Topology Subscription
      //
      //
      // This call is used to get a stream of BGP-LS Topology updates.
      // It can be used to get "push" information for BGP-LS
      // adds/updates/deletes.
      //
      // The caller must close the response stream when it is no longer
      // interested in BGP-LS Topology information.
      //
      // The call takes a request message with the information on Match filters
      // to be applied while sending BGP-LS Topology updates in the response stream.
      //
      // The success/failure of the request is relayed in the response as error status.
      // If the request was successful, then the initial set of BGP-LS Topology
      // information is sent as a stream containing a Start marker, any BGP-LS
      // Topology if present, and an End Marker. The response stream will then
      // be maintained to send subsequent updates and terminated only when the
      // response stream is terminated by the caller.
      //
      // When the backend process handling the BGP-LS Topology subscription goes
      // for a restart and when it comes up and ready again, the caller would
      // get a Start marker, any BGP-LS Topology if present, and an End Marker.
      // Upon receiving the Start marker, the caller must perform a mark and
      // sweep operation on the data it received from this subscription.
      //
      virtual void SLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLBgplsTopoNotifMsg>* reactor) = 0;
      //
      // @}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>* SLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>* AsyncSLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLBgplsTopoNotifMsg>* PrepareAsyncSLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLBgplsTopoNotifMsg>> SLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLBgplsTopoNotifMsg>>(SLBgplsTopoNotifStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>> AsyncSLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>>(AsyncSLBgplsTopoNotifStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>> PrepareAsyncSLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>>(PrepareAsyncSLBgplsTopoNotifStreamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLBgplsTopoNotifStream(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLBgplsTopoNotifMsg>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::service_layer::SLBgplsTopoNotifMsg>* SLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>* AsyncSLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLBgplsTopoNotifMsg>* PrepareAsyncSLBgplsTopoNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLBgplsTopoNotifStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // BGP-LS Topology Subscription
    //
    //
    // This call is used to get a stream of BGP-LS Topology updates.
    // It can be used to get "push" information for BGP-LS
    // adds/updates/deletes.
    //
    // The caller must close the response stream when it is no longer
    // interested in BGP-LS Topology information.
    //
    // The call takes a request message with the information on Match filters
    // to be applied while sending BGP-LS Topology updates in the response stream.
    //
    // The success/failure of the request is relayed in the response as error status.
    // If the request was successful, then the initial set of BGP-LS Topology
    // information is sent as a stream containing a Start marker, any BGP-LS
    // Topology if present, and an End Marker. The response stream will then
    // be maintained to send subsequent updates and terminated only when the
    // response stream is terminated by the caller.
    //
    // When the backend process handling the BGP-LS Topology subscription goes
    // for a restart and when it comes up and ready again, the caller would
    // get a Start marker, any BGP-LS Topology if present, and an End Marker.
    // Upon receiving the Start marker, the caller must perform a mark and
    // sweep operation on the data it received from this subscription.
    //
    virtual ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg* request, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* writer);
    //
    // @}
  };
  template <class BaseClass>
  class WithAsyncMethod_SLBgplsTopoNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLBgplsTopoNotifStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLBgplsTopoNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBgplsTopoNotifStream(::grpc::ServerContext* context, ::service_layer::SLBgplsTopoNotifReqMsg* request, ::grpc::ServerAsyncWriter< ::service_layer::SLBgplsTopoNotifMsg>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLBgplsTopoNotifStream<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLBgplsTopoNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLBgplsTopoNotifStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service_layer::SLBgplsTopoNotifReqMsg, ::service_layer::SLBgplsTopoNotifMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLBgplsTopoNotifReqMsg* request) { return this->SLBgplsTopoNotifStream(context, request); }));
    }
    ~WithCallbackMethod_SLBgplsTopoNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service_layer::SLBgplsTopoNotifMsg>* SLBgplsTopoNotifStream(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SLBgplsTopoNotifStream<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLBgplsTopoNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLBgplsTopoNotifStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLBgplsTopoNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLBgplsTopoNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLBgplsTopoNotifStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLBgplsTopoNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLBgplsTopoNotifStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLBgplsTopoNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLBgplsTopoNotifStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SLBgplsTopoNotifStream(context, request); }));
    }
    ~WithRawCallbackMethod_SLBgplsTopoNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SLBgplsTopoNotifStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SLBgplsTopoNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SLBgplsTopoNotifStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service_layer::SLBgplsTopoNotifReqMsg, ::service_layer::SLBgplsTopoNotifMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service_layer::SLBgplsTopoNotifReqMsg, ::service_layer::SLBgplsTopoNotifMsg>* streamer) {
                       return this->StreamedSLBgplsTopoNotifStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SLBgplsTopoNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLBgplsTopoNotifStream(::grpc::ServerContext* /*context*/, const ::service_layer::SLBgplsTopoNotifReqMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLBgplsTopoNotifMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSLBgplsTopoNotifStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service_layer::SLBgplsTopoNotifReqMsg,::service_layer::SLBgplsTopoNotifMsg>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SLBgplsTopoNotifStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SLBgplsTopoNotifStream<Service > StreamedService;
};
// @addtogroup SLBgplsTopo
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5fbgpls_5ftopology_2eproto__INCLUDED
