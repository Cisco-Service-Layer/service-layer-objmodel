// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bgpls_topology.proto

#include "sl_bgpls_topology.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLBgplsTopoGetUpdMsg::SLBgplsTopoGetUpdMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(){}
struct SLBgplsTopoGetUpdMsgDefaultTypeInternal {
  constexpr SLBgplsTopoGetUpdMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoGetUpdMsgDefaultTypeInternal() {}
  union {
    SLBgplsTopoGetUpdMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoGetUpdMsgDefaultTypeInternal _SLBgplsTopoGetUpdMsg_default_instance_;
constexpr SLBgplsTopoNlriFilter::SLBgplsTopoNlriFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(uint64_t{0u})
  , protocol_(0)

  , nlritype_(0)
{}
struct SLBgplsTopoNlriFilterDefaultTypeInternal {
  constexpr SLBgplsTopoNlriFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNlriFilterDefaultTypeInternal() {}
  union {
    SLBgplsTopoNlriFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNlriFilterDefaultTypeInternal _SLBgplsTopoNlriFilter_default_instance_;
constexpr SLBgplsTopoUpdMsg::SLBgplsTopoUpdMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updtype_(0)

  , _oneof_case_{}{}
struct SLBgplsTopoUpdMsgDefaultTypeInternal {
  constexpr SLBgplsTopoUpdMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUpdMsgDefaultTypeInternal() {}
  union {
    SLBgplsTopoUpdMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUpdMsgDefaultTypeInternal _SLBgplsTopoUpdMsg_default_instance_;
constexpr SLBgplsTopoErrorStatus::SLBgplsTopoErrorStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SLBgplsTopoErrorStatusDefaultTypeInternal {
  constexpr SLBgplsTopoErrorStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoErrorStatusDefaultTypeInternal() {}
  union {
    SLBgplsTopoErrorStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoErrorStatusDefaultTypeInternal _SLBgplsTopoErrorStatus_default_instance_;
constexpr SLBgplsTopoUpd::SLBgplsTopoUpd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct SLBgplsTopoUpdDefaultTypeInternal {
  constexpr SLBgplsTopoUpdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUpdDefaultTypeInternal() {}
  union {
    SLBgplsTopoUpd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUpdDefaultTypeInternal _SLBgplsTopoUpd_default_instance_;
constexpr SLBgplsTopoEntry::SLBgplsTopoEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nlri_(nullptr)
  , attr_(nullptr)
  , operation_(0)
{}
struct SLBgplsTopoEntryDefaultTypeInternal {
  constexpr SLBgplsTopoEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoEntryDefaultTypeInternal() {}
  union {
    SLBgplsTopoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoEntryDefaultTypeInternal _SLBgplsTopoEntry_default_instance_;
constexpr SLBgplsTopoNlri::SLBgplsTopoNlri(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(uint64_t{0u})
  , protocol_(0)

  , nlritype_(0)

  , _oneof_case_{}{}
struct SLBgplsTopoNlriDefaultTypeInternal {
  constexpr SLBgplsTopoNlriDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNlriDefaultTypeInternal() {}
  union {
    SLBgplsTopoNlri _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNlriDefaultTypeInternal _SLBgplsTopoNlri_default_instance_;
constexpr SLBgplsTopoNode::SLBgplsTopoNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodedescr_(nullptr){}
struct SLBgplsTopoNodeDefaultTypeInternal {
  constexpr SLBgplsTopoNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeDefaultTypeInternal() {}
  union {
    SLBgplsTopoNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeDefaultTypeInternal _SLBgplsTopoNode_default_instance_;
constexpr SLBgplsTopoLink::SLBgplsTopoLink(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localnodedescr_(nullptr)
  , remotenodedescr_(nullptr)
  , linkdescr_(nullptr){}
struct SLBgplsTopoLinkDefaultTypeInternal {
  constexpr SLBgplsTopoLinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkDefaultTypeInternal() {}
  union {
    SLBgplsTopoLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkDefaultTypeInternal _SLBgplsTopoLink_default_instance_;
constexpr SLBgplsTopoPrefix::SLBgplsTopoPrefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodedescr_(nullptr)
  , prefixdescr_(nullptr){}
struct SLBgplsTopoPrefixDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixDefaultTypeInternal _SLBgplsTopoPrefix_default_instance_;
constexpr SLBgplsTopoSrv6Sid::SLBgplsTopoSrv6Sid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodedescr_(nullptr)
  , srv6siddescr_(nullptr){}
struct SLBgplsTopoSrv6SidDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6SidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6SidDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6Sid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6SidDefaultTypeInternal _SLBgplsTopoSrv6Sid_default_instance_;
constexpr SLBgplsTopoSrPolicy::SLBgplsTopoSrPolicy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodedescr_(nullptr)
  , srpolicydescr_(nullptr){}
struct SLBgplsTopoSrPolicyDefaultTypeInternal {
  constexpr SLBgplsTopoSrPolicyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrPolicyDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrPolicyDefaultTypeInternal _SLBgplsTopoSrPolicy_default_instance_;
constexpr SLBgplsTopoNodeDescr::SLBgplsTopoNodeDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asn_(0u)
  , nodeidtype_(0)

  , _oneof_case_{}{}
struct SLBgplsTopoNodeDescrDefaultTypeInternal {
  constexpr SLBgplsTopoNodeDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeDescrDefaultTypeInternal _SLBgplsTopoNodeDescr_default_instance_;
constexpr SLBgplsTopoLinkDescr::SLBgplsTopoLinkDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remoteipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtid_(nullptr)
  , localid_(0u)
  , remoteid_(0u)
  , localipv4_(0u)
  , remoteipv4_(0u){}
struct SLBgplsTopoLinkDescrDefaultTypeInternal {
  constexpr SLBgplsTopoLinkDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkDescrDefaultTypeInternal _SLBgplsTopoLinkDescr_default_instance_;
constexpr SLBgplsTopoPrefixDescr::SLBgplsTopoPrefixDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefixlength_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtid_(nullptr)
  , ospfroutetype_(0)
{}
struct SLBgplsTopoPrefixDescrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixDescrDefaultTypeInternal _SLBgplsTopoPrefixDescr_default_instance_;
constexpr SLBgplsTopoSrv6SidDescr::SLBgplsTopoSrv6SidDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv6sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtid_(nullptr){}
struct SLBgplsTopoSrv6SidDescrDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6SidDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6SidDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6SidDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6SidDescrDefaultTypeInternal _SLBgplsTopoSrv6SidDescr_default_instance_;
constexpr SLBgplsTopoSrPolicyDescr::SLBgplsTopoSrPolicyDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(nullptr)
  , protoorigin_(0)

  , isendpointaddressipv6_(0u)
  , color_(0u)
  , originasn_(0u)
  , isoriginatoraddressipv6_(0u)
  , discriminator_(0u)
  , _oneof_case_{}{}
struct SLBgplsTopoSrPolicyDescrDefaultTypeInternal {
  constexpr SLBgplsTopoSrPolicyDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrPolicyDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrPolicyDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrPolicyDescrDefaultTypeInternal _SLBgplsTopoSrPolicyDescr_default_instance_;
constexpr SLBgplsTopoOspfNodeId::SLBgplsTopoOspfNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : areaid_(0u)
  , isasscoped_(0u)
  , routerid_(0u)
  , dridentifier_(0u){}
struct SLBgplsTopoOspfNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoOspfNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoOspfNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoOspfNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoOspfNodeIdDefaultTypeInternal _SLBgplsTopoOspfNodeId_default_instance_;
constexpr SLBgplsTopoOspfv3NodeId::SLBgplsTopoOspfv3NodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : areaid_(0u)
  , asscoped_(0u)
  , routerid_(0u)
  , dridentifier_(0u){}
struct SLBgplsTopoOspfv3NodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoOspfv3NodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoOspfv3NodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoOspfv3NodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoOspfv3NodeIdDefaultTypeInternal _SLBgplsTopoOspfv3NodeId_default_instance_;
constexpr SLBgplsTopoIsisNodeId::SLBgplsTopoIsisNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : systemid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , psnid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoIsisNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoIsisNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoIsisNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoIsisNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoIsisNodeIdDefaultTypeInternal _SLBgplsTopoIsisNodeId_default_instance_;
constexpr SLBgplsTopoBgpNodeId::SLBgplsTopoBgpNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(0u)
  , memberasn_(0u){}
struct SLBgplsTopoBgpNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoBgpNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoBgpNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoBgpNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoBgpNodeIdDefaultTypeInternal _SLBgplsTopoBgpNodeId_default_instance_;
constexpr SLBgplsTopoSrPolicyNodeId::SLBgplsTopoSrPolicyNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipv6routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routerid_(0u)
  , memberasn_(0u)
  , ipv4routerid_(0u){}
struct SLBgplsTopoSrPolicyNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoSrPolicyNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrPolicyNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrPolicyNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrPolicyNodeIdDefaultTypeInternal _SLBgplsTopoSrPolicyNodeId_default_instance_;
constexpr SLBgplsTopoSrPolicyFlags::SLBgplsTopoSrPolicyFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrPolicyFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoSrPolicyFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrPolicyFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrPolicyFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrPolicyFlagsDefaultTypeInternal _SLBgplsTopoSrPolicyFlags_default_instance_;
constexpr SLBgplsTopoAttr::SLBgplsTopoAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attrtype_(0)

  , _oneof_case_{}{}
struct SLBgplsTopoAttrDefaultTypeInternal {
  constexpr SLBgplsTopoAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoAttrDefaultTypeInternal _SLBgplsTopoAttr_default_instance_;
constexpr SLBgplsTopoNodeAttr::SLBgplsTopoNodeAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mtid_()
  , nodemsd_()
  , isisareaid_()
  , localipv4_()
  , localipv6_()
  , srgb_()
  , srlb_()
  , fad_()
  , nodeflagbits_(nullptr)
  , opaquenodeattr_(nullptr)
  , nodename_(nullptr)
  , srgbisisflags_(nullptr)
  , sralgorithm_(nullptr){}
struct SLBgplsTopoNodeAttrDefaultTypeInternal {
  constexpr SLBgplsTopoNodeAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeAttrDefaultTypeInternal _SLBgplsTopoNodeAttr_default_instance_;
constexpr SLBgplsTopoLinkAttr::SLBgplsTopoLinkAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linkmsd_()
  , localipv4routerid_()
  , localipv6routerid_()
  , remoteipv4routerid_()
  , remoteipv6routerid_()
  , extadmingroup_()
  , unresvbandwidth_()
  , srlg_()
  , adjsid_()
  , lanadjsid_()
  , srv6endxsid_()
  , srv6lanendxsid_()
  , asla_()
  , l2bundlememberattr_()
  , linklocremid_(nullptr)
  , maxbandwidth_(nullptr)
  , maxresvbandwidth_(nullptr)
  , tedefmetric_(nullptr)
  , protectiontype_(nullptr)
  , mplsprotomask_(nullptr)
  , igpmetric_(nullptr)
  , opaqueattr_(nullptr)
  , linkname_(nullptr)
  , unilinkdelay_(nullptr)
  , minmaxunilinkdelay_(nullptr)
  , unidelayvar_(nullptr)
  , unilinkloss_(nullptr)
  , uniresbandwidth_(nullptr)
  , uniavailbandwidth_(nullptr)
  , uniutilbandwidth_(nullptr){}
struct SLBgplsTopoLinkAttrDefaultTypeInternal {
  constexpr SLBgplsTopoLinkAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkAttrDefaultTypeInternal _SLBgplsTopoLinkAttr_default_instance_;
constexpr SLBgplsTopoPrefixAttr::SLBgplsTopoPrefixAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : igproutetag_()
  , igpextroutetag_()
  , fapm_(nullptr)
  , igpflags_(nullptr)
  , metric_(nullptr)
  , ospffwdaddr_(nullptr)
  , opaqueattr_(nullptr)
  , sid_(nullptr)
  , range_(nullptr)
  , srv6loc_(nullptr)
  , attrflags_(nullptr)
  , srcrouterid_(nullptr){}
struct SLBgplsTopoPrefixAttrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixAttrDefaultTypeInternal _SLBgplsTopoPrefixAttr_default_instance_;
constexpr SLBgplsTopoSrv6SidAttr::SLBgplsTopoSrv6SidAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgppeernodesid_()
  , endpointbehavior_(nullptr)
  , sidstruct_(nullptr){}
struct SLBgplsTopoSrv6SidAttrDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6SidAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6SidAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6SidAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6SidAttrDefaultTypeInternal _SLBgplsTopoSrv6SidAttr_default_instance_;
constexpr SLBgplsTopoSrPolicyAttr::SLBgplsTopoSrPolicyAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seglists_()
  , srbsid_(nullptr)
  , cpstate_(nullptr)
  , cpname_(nullptr)
  , cpconstraints_(nullptr)
  , srv6bsid_(nullptr)
  , srpolicyname_(nullptr){}
struct SLBgplsTopoSrPolicyAttrDefaultTypeInternal {
  constexpr SLBgplsTopoSrPolicyAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrPolicyAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrPolicyAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrPolicyAttrDefaultTypeInternal _SLBgplsTopoSrPolicyAttr_default_instance_;
constexpr SLBplsTopoLinkLocRemId::SLBplsTopoLinkLocRemId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localid_(0u)
  , remoteid_(0u){}
struct SLBplsTopoLinkLocRemIdDefaultTypeInternal {
  constexpr SLBplsTopoLinkLocRemIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBplsTopoLinkLocRemIdDefaultTypeInternal() {}
  union {
    SLBplsTopoLinkLocRemId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBplsTopoLinkLocRemIdDefaultTypeInternal _SLBplsTopoLinkLocRemId_default_instance_;
constexpr SLBgplsTopoMtId::SLBgplsTopoMtId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mtid_(0u){}
struct SLBgplsTopoMtIdDefaultTypeInternal {
  constexpr SLBgplsTopoMtIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoMtIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoMtId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoMtIdDefaultTypeInternal _SLBgplsTopoMtId_default_instance_;
constexpr SLBgplsTopoNodeMsd::SLBgplsTopoNodeMsd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , value_(0u){}
struct SLBgplsTopoNodeMsdDefaultTypeInternal {
  constexpr SLBgplsTopoNodeMsdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeMsdDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeMsd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeMsdDefaultTypeInternal _SLBgplsTopoNodeMsd_default_instance_;
constexpr SLBgplsTopoLinkMsd::SLBgplsTopoLinkMsd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , value_(0u){}
struct SLBgplsTopoLinkMsdDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMsdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMsdDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMsd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMsdDefaultTypeInternal _SLBgplsTopoLinkMsd_default_instance_;
constexpr SLBgplsTopoNodeFlagBits::SLBgplsTopoNodeFlagBits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoNodeFlagBitsDefaultTypeInternal {
  constexpr SLBgplsTopoNodeFlagBitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeFlagBitsDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeFlagBits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeFlagBitsDefaultTypeInternal _SLBgplsTopoNodeFlagBits_default_instance_;
constexpr SLBgplsTopoNodeOpaqueAttr::SLBgplsTopoNodeOpaqueAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaqueattr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal {
  constexpr SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeOpaqueAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal _SLBgplsTopoNodeOpaqueAttr_default_instance_;
constexpr SLBgplsNodeName::SLBgplsNodeName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsNodeNameDefaultTypeInternal {
  constexpr SLBgplsNodeNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsNodeNameDefaultTypeInternal() {}
  union {
    SLBgplsNodeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsNodeNameDefaultTypeInternal _SLBgplsNodeName_default_instance_;
constexpr SLBgplsTopoIsisAreaId::SLBgplsTopoIsisAreaId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : areaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoIsisAreaIdDefaultTypeInternal {
  constexpr SLBgplsTopoIsisAreaIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoIsisAreaIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoIsisAreaId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoIsisAreaIdDefaultTypeInternal _SLBgplsTopoIsisAreaId_default_instance_;
constexpr SLBgplsTopoLocalIpv4RouterId::SLBgplsTopoLocalIpv4RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(0u){}
struct SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoLocalIpv4RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal _SLBgplsTopoLocalIpv4RouterId_default_instance_;
constexpr SLBgplsTopoLocalIpv6RouterId::SLBgplsTopoLocalIpv6RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoLocalIpv6RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal _SLBgplsTopoLocalIpv6RouterId_default_instance_;
constexpr SLBgplsTopoRemoteIpv4RouterId::SLBgplsTopoRemoteIpv4RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(0u){}
struct SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoRemoteIpv4RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal _SLBgplsTopoRemoteIpv4RouterId_default_instance_;
constexpr SLBgplsTopoRemoteIpv6RouterId::SLBgplsTopoRemoteIpv6RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoRemoteIpv6RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal _SLBgplsTopoRemoteIpv6RouterId_default_instance_;
constexpr SLBgplsTopoSrgb::SLBgplsTopoSrgb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startlabel_(0u)
  , rangesize_(0u){}
struct SLBgplsTopoSrgbDefaultTypeInternal {
  constexpr SLBgplsTopoSrgbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrgbDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrgb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrgbDefaultTypeInternal _SLBgplsTopoSrgb_default_instance_;
constexpr SLBgplsTopoSrgbIsisFlags::SLBgplsTopoSrgbIsisFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrgbIsisFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal _SLBgplsTopoSrgbIsisFlags_default_instance_;
constexpr SLBgplsTopoSrAlgorithm::SLBgplsTopoSrAlgorithm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : algorithms_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrAlgorithmDefaultTypeInternal {
  constexpr SLBgplsTopoSrAlgorithmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrAlgorithmDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrAlgorithm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrAlgorithmDefaultTypeInternal _SLBgplsTopoSrAlgorithm_default_instance_;
constexpr SLBgplsTopoSrlb::SLBgplsTopoSrlb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startlabel_(0u)
  , rangesize_(0u){}
struct SLBgplsTopoSrlbDefaultTypeInternal {
  constexpr SLBgplsTopoSrlbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrlbDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrlb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrlbDefaultTypeInternal _SLBgplsTopoSrlb_default_instance_;
constexpr SLBgplsTopoFad::SLBgplsTopoFad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : excanyaff_()
  , _excanyaff_cached_byte_size_(0)
  , incanyaff_()
  , _incanyaff_cached_byte_size_(0)
  , incallaff_()
  , _incallaff_cached_byte_size_(0)
  , excsrlg_()
  , _excsrlg_cached_byte_size_(0)
  , excanyrevaff_()
  , _excanyrevaff_cached_byte_size_(0)
  , incanyrevaff_()
  , _incanyrevaff_cached_byte_size_(0)
  , incallrevaff_()
  , _incallrevaff_cached_byte_size_(0)
  , algorithm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metrictype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , calctype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , excminbw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unsupptlv_(nullptr)
  , excmaxdelay_(0u){}
struct SLBgplsTopoFadDefaultTypeInternal {
  constexpr SLBgplsTopoFadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoFadDefaultTypeInternal() {}
  union {
    SLBgplsTopoFad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoFadDefaultTypeInternal _SLBgplsTopoFad_default_instance_;
constexpr SLBgplsTopoPrefixFAPM::SLBgplsTopoPrefixFAPM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flexalgo_(0u)
  , metric_(0u){}
struct SLBgplsTopoPrefixFAPMDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixFAPMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixFAPMDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixFAPM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixFAPMDefaultTypeInternal _SLBgplsTopoPrefixFAPM_default_instance_;
constexpr SLBgplsTopoFadUnsuppTlv::SLBgplsTopoFadUnsuppTlv(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(0)
{}
struct SLBgplsTopoFadUnsuppTlvDefaultTypeInternal {
  constexpr SLBgplsTopoFadUnsuppTlvDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoFadUnsuppTlvDefaultTypeInternal() {}
  union {
    SLBgplsTopoFadUnsuppTlv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoFadUnsuppTlvDefaultTypeInternal _SLBgplsTopoFadUnsuppTlv_default_instance_;
constexpr SLBgplsTopoExtAdminGroup::SLBgplsTopoExtAdminGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(0u){}
struct SLBgplsTopoExtAdminGroupDefaultTypeInternal {
  constexpr SLBgplsTopoExtAdminGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoExtAdminGroupDefaultTypeInternal() {}
  union {
    SLBgplsTopoExtAdminGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoExtAdminGroupDefaultTypeInternal _SLBgplsTopoExtAdminGroup_default_instance_;
constexpr SLBgplsTopoLinkMaxBandwidth::SLBgplsTopoLinkMaxBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMaxBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal _SLBgplsTopoLinkMaxBandwidth_default_instance_;
constexpr SLBgplsTopoLinkMaxResvBandwidth::SLBgplsTopoLinkMaxResvBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMaxResvBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal _SLBgplsTopoLinkMaxResvBandwidth_default_instance_;
constexpr SLBgplsTopoLinkUnresvBandwidth::SLBgplsTopoLinkUnresvBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(0u){}
struct SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkUnresvBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal _SLBgplsTopoLinkUnresvBandwidth_default_instance_;
constexpr SLBgplsTopoLinkTeDefaultMetric::SLBgplsTopoLinkTeDefaultMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_(0u){}
struct SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal {
  constexpr SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkTeDefaultMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal _SLBgplsTopoLinkTeDefaultMetric_default_instance_;
constexpr SLBgplsTopoLinkProtecionType::SLBgplsTopoLinkProtecionType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mask_(0u){}
struct SLBgplsTopoLinkProtecionTypeDefaultTypeInternal {
  constexpr SLBgplsTopoLinkProtecionTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkProtecionTypeDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkProtecionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkProtecionTypeDefaultTypeInternal _SLBgplsTopoLinkProtecionType_default_instance_;
constexpr SLBgplsTopoLinkMplsProtoMask::SLBgplsTopoLinkMplsProtoMask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMplsProtoMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal _SLBgplsTopoLinkMplsProtoMask_default_instance_;
constexpr SLBgplsTopoLinkIgpMetric::SLBgplsTopoLinkIgpMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkIgpMetricDefaultTypeInternal {
  constexpr SLBgplsTopoLinkIgpMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkIgpMetricDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkIgpMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkIgpMetricDefaultTypeInternal _SLBgplsTopoLinkIgpMetric_default_instance_;
constexpr SLBgplsTopoLinkSrlg::SLBgplsTopoLinkSrlg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srlgval_(0u){}
struct SLBgplsTopoLinkSrlgDefaultTypeInternal {
  constexpr SLBgplsTopoLinkSrlgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkSrlgDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkSrlg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkSrlgDefaultTypeInternal _SLBgplsTopoLinkSrlg_default_instance_;
constexpr SLBgplsTopoLinkOpaqueAttr::SLBgplsTopoLinkOpaqueAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaqueattr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal {
  constexpr SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkOpaqueAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal _SLBgplsTopoLinkOpaqueAttr_default_instance_;
constexpr SLBgplsTopoLinkName::SLBgplsTopoLinkName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkNameDefaultTypeInternal {
  constexpr SLBgplsTopoLinkNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkNameDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkNameDefaultTypeInternal _SLBgplsTopoLinkName_default_instance_;
constexpr SLBgplsTopoAdjSid::SLBgplsTopoAdjSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , labelindex_(0u)
  , adjsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoAdjSidDefaultTypeInternal {
  constexpr SLBgplsTopoAdjSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoAdjSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoAdjSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoAdjSidDefaultTypeInternal _SLBgplsTopoAdjSid_default_instance_;
constexpr SLBgplsTopoLanAdjSid::SLBgplsTopoLanAdjSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , neighbor_(nullptr)
  , labelindex_(0u)
  , adjsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoLanAdjSidDefaultTypeInternal {
  constexpr SLBgplsTopoLanAdjSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLanAdjSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoLanAdjSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLanAdjSidDefaultTypeInternal _SLBgplsTopoLanAdjSid_default_instance_;
constexpr SLBgplsTopoSrv6EndXSid::SLBgplsTopoSrv6EndXSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sidstruct_(nullptr)
  , algorithm_(0u)
  , weight_(0u)
  , endpointbehavior_(0u){}
struct SLBgplsTopoSrv6EndXSidDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6EndXSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6EndXSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6EndXSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6EndXSidDefaultTypeInternal _SLBgplsTopoSrv6EndXSid_default_instance_;
constexpr SLBgpLsTopoNeighborId::SLBgpLsTopoNeighborId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isneighboridipv4_(0u)
  , _oneof_case_{}{}
struct SLBgpLsTopoNeighborIdDefaultTypeInternal {
  constexpr SLBgpLsTopoNeighborIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpLsTopoNeighborIdDefaultTypeInternal() {}
  union {
    SLBgpLsTopoNeighborId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpLsTopoNeighborIdDefaultTypeInternal _SLBgpLsTopoNeighborId_default_instance_;
constexpr SLBgplsTopoSrv6LanEndXSid::SLBgplsTopoSrv6LanEndXSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , neighbor_(nullptr)
  , sidstruct_(nullptr)
  , algorithm_(0u)
  , weight_(0u)
  , endpointbehavior_(0u){}
struct SLBgplsTopoSrv6LanEndXSidDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6LanEndXSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6LanEndXSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6LanEndXSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6LanEndXSidDefaultTypeInternal _SLBgplsTopoSrv6LanEndXSid_default_instance_;
constexpr SLBgplsTopoUniLinkDelay::SLBgplsTopoUniLinkDelay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delay_(0u){}
struct SLBgplsTopoUniLinkDelayDefaultTypeInternal {
  constexpr SLBgplsTopoUniLinkDelayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniLinkDelayDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniLinkDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniLinkDelayDefaultTypeInternal _SLBgplsTopoUniLinkDelay_default_instance_;
constexpr SLBgplsTopoMinMaxUniLinkDelay::SLBgplsTopoMinMaxUniLinkDelay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_(0u)
  , max_(0u){}
struct SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal {
  constexpr SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal() {}
  union {
    SLBgplsTopoMinMaxUniLinkDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal _SLBgplsTopoMinMaxUniLinkDelay_default_instance_;
constexpr SLBgplsTopoUniDelayVar::SLBgplsTopoUniDelayVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , variation_(0u){}
struct SLBgplsTopoUniDelayVarDefaultTypeInternal {
  constexpr SLBgplsTopoUniDelayVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniDelayVarDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniDelayVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniDelayVarDefaultTypeInternal _SLBgplsTopoUniDelayVar_default_instance_;
constexpr SLBgplsTopoUniLinkLoss::SLBgplsTopoUniLinkLoss(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loss_(0u){}
struct SLBgplsTopoUniLinkLossDefaultTypeInternal {
  constexpr SLBgplsTopoUniLinkLossDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniLinkLossDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniLinkLoss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniLinkLossDefaultTypeInternal _SLBgplsTopoUniLinkLoss_default_instance_;
constexpr SLBgplsTopoUniResBandwidth::SLBgplsTopoUniResBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoUniResBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoUniResBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniResBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniResBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniResBandwidthDefaultTypeInternal _SLBgplsTopoUniResBandwidth_default_instance_;
constexpr SLBgplsTopoUniAvailBandwidth::SLBgplsTopoUniAvailBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoUniAvailBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoUniAvailBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniAvailBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniAvailBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniAvailBandwidthDefaultTypeInternal _SLBgplsTopoUniAvailBandwidth_default_instance_;
constexpr SLBgplsTopoUniUtilBandwidth::SLBgplsTopoUniUtilBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoUniUtilBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoUniUtilBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniUtilBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniUtilBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniUtilBandwidthDefaultTypeInternal _SLBgplsTopoUniUtilBandwidth_default_instance_;
constexpr SLBgplsTopoPrefixIgpFlags::SLBgplsTopoPrefixIgpFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixIgpFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal _SLBgplsTopoPrefixIgpFlags_default_instance_;
constexpr SLBgplsTopoPrefixIgpRouteTag::SLBgplsTopoPrefixIgpRouteTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(0u){}
struct SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixIgpRouteTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal _SLBgplsTopoPrefixIgpRouteTag_default_instance_;
constexpr SLBgplsTopoPrefixIgpExtRouteTag::SLBgplsTopoPrefixIgpExtRouteTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(0u){}
struct SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixIgpExtRouteTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal _SLBgplsTopoPrefixIgpExtRouteTag_default_instance_;
constexpr SLBgplsTopoPrefixMetric::SLBgplsTopoPrefixMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_(0u){}
struct SLBgplsTopoPrefixMetricDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixMetricDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixMetricDefaultTypeInternal _SLBgplsTopoPrefixMetric_default_instance_;
constexpr SLBgplsTopoPrefixOspfFwdAddr::SLBgplsTopoPrefixOspfFwdAddr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isospffwdaddrdipv4_(0u)
  , _oneof_case_{}{}
struct SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixOspfFwdAddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal _SLBgplsTopoPrefixOspfFwdAddr_default_instance_;
constexpr SLBgplsTopoPrefixOpaqueAttr::SLBgplsTopoPrefixOpaqueAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaqueattr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixOpaqueAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal _SLBgplsTopoPrefixOpaqueAttr_default_instance_;
constexpr SLBgplsTopoPrefixSid::SLBgplsTopoPrefixSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , algorithm_(0u)
  , labelindex_(0u)
  , prefixsidformat_(0)
{}
struct SLBgplsTopoPrefixSidDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixSidDefaultTypeInternal _SLBgplsTopoPrefixSid_default_instance_;
constexpr SLBgplsTopoPrefixRange::SLBgplsTopoPrefixRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sidflags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rangesize_(0u)
  , algorithm_(0u)
  , index_(0u){}
struct SLBgplsTopoPrefixRangeDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixRangeDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixRangeDefaultTypeInternal _SLBgplsTopoPrefixRange_default_instance_;
constexpr SLBgplsTopoPrefixSrv6Loc::SLBgplsTopoPrefixSrv6Loc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , algorithm_(0u)
  , metric_(0u){}
struct SLBgplsTopoPrefixSrv6LocDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixSrv6LocDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixSrv6LocDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixSrv6Loc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixSrv6LocDefaultTypeInternal _SLBgplsTopoPrefixSrv6Loc_default_instance_;
constexpr SLBgplsTopoPrefixAttrFlags::SLBgplsTopoPrefixAttrFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixAttrFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal _SLBgplsTopoPrefixAttrFlags_default_instance_;
constexpr SLBgplsTopoPrefixSrcRouterId::SLBgplsTopoPrefixSrcRouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : issrcrouteridipv4_(0u)
  , _oneof_case_{}{}
struct SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixSrcRouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal _SLBgplsTopoPrefixSrcRouterId_default_instance_;
constexpr SLBgplsTopoL2BundleMemberAttr::SLBgplsTopoL2BundleMemberAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extadmingroup_()
  , unresvbandwidth_()
  , adjsid_()
  , lanadjsid_()
  , asla_()
  , maxbandwidth_(nullptr)
  , maxresvbandwidth_(nullptr)
  , tedefmetric_(nullptr)
  , protectiontype_(nullptr)
  , unilinkdelay_(nullptr)
  , minmaxlinkdelay_(nullptr)
  , unidelayvariation_(nullptr)
  , unilinkloss_(nullptr)
  , uniresbandwidth_(nullptr)
  , uniavailbandwidth_(nullptr)
  , uniutilbandwidth_(nullptr)
  , memberdesc_(0u){}
struct SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal {
  constexpr SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoL2BundleMemberAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal _SLBgplsTopoL2BundleMemberAttr_default_instance_;
constexpr SLBgplsTopoAslaAttr::SLBgplsTopoAslaAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extadmingroup_()
  , sabm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , udabm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tedefmetric_(nullptr)
  , srlg_(nullptr)
  , unilinkdelay_(nullptr)
  , minmaxlinkdelay_(nullptr)
  , unidelayvariation_(nullptr)
  , unilinkloss_(nullptr)
  , uniresbandwidth_(nullptr)
  , uniavailbandwidth_(nullptr)
  , uniutilbandwidth_(nullptr){}
struct SLBgplsTopoAslaAttrDefaultTypeInternal {
  constexpr SLBgplsTopoAslaAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoAslaAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoAslaAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoAslaAttrDefaultTypeInternal _SLBgplsTopoAslaAttr_default_instance_;
constexpr SlBgplsTopoSrBsid::SlBgplsTopoSrBsid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isbindingsidmpls_(0u)
  , _oneof_case_{}{}
struct SlBgplsTopoSrBsidDefaultTypeInternal {
  constexpr SlBgplsTopoSrBsidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlBgplsTopoSrBsidDefaultTypeInternal() {}
  union {
    SlBgplsTopoSrBsid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlBgplsTopoSrBsidDefaultTypeInternal _SlBgplsTopoSrBsid_default_instance_;
constexpr SLBgplsTopoSrBindingSid::SLBgplsTopoSrBindingSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bsidflags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bsid_(nullptr)
  , specifiedbsid_(nullptr){}
struct SLBgplsTopoSrBindingSidDefaultTypeInternal {
  constexpr SLBgplsTopoSrBindingSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrBindingSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrBindingSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrBindingSidDefaultTypeInternal _SLBgplsTopoSrBindingSid_default_instance_;
constexpr SLBgplsTopoSrCpState::SLBgplsTopoSrCpState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(0u)
  , preference_(0u){}
struct SLBgplsTopoSrCpStateDefaultTypeInternal {
  constexpr SLBgplsTopoSrCpStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrCpStateDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrCpState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrCpStateDefaultTypeInternal _SLBgplsTopoSrCpState_default_instance_;
constexpr SLBgplsTopoSrCpName::SLBgplsTopoSrCpName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrCpNameDefaultTypeInternal {
  constexpr SLBgplsTopoSrCpNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrCpNameDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrCpName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrCpNameDefaultTypeInternal _SLBgplsTopoSrCpName_default_instance_;
constexpr SLBgplsTopoSrCpConstraints::SLBgplsTopoSrCpConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_()
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bandwidth_(nullptr)
  , affinity_(nullptr)
  , srlg_(nullptr)
  , disjoint_(nullptr)
  , bidirgroup_(nullptr)
  , mtid_(0u)
  , algorithm_(0u){}
struct SLBgplsTopoSrCpConstraintsDefaultTypeInternal {
  constexpr SLBgplsTopoSrCpConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrCpConstraintsDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrCpConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrCpConstraintsDefaultTypeInternal _SLBgplsTopoSrCpConstraints_default_instance_;
constexpr SLBgplsTopoSrSegList::SLBgplsTopoSrSegList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_()
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtid_(0u)
  , algorithm_(0u)
  , weight_(0u){}
struct SLBgplsTopoSrSegListDefaultTypeInternal {
  constexpr SLBgplsTopoSrSegListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrSegListDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrSegList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrSegListDefaultTypeInternal _SLBgplsTopoSrSegList_default_instance_;
constexpr SLBgplsTopoSrSegmentDesc::SLBgplsTopoSrSegmentDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipv6localnodeglobaladdr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipv6remotenodeglobaladdr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , algorithm_(0u)
  , islocalnodeaddripv4_(0u)
  , remotenodeintfid_(0u)
  , isremotenodeaddripv4_(0u)
  , localnodeintfid_(0u)
  , _oneof_case_{}{}
struct SLBgplsTopoSrSegmentDescDefaultTypeInternal {
  constexpr SLBgplsTopoSrSegmentDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrSegmentDescDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrSegmentDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrSegmentDescDefaultTypeInternal _SLBgplsTopoSrSegmentDesc_default_instance_;
constexpr SLBgplsTopoSrSegment::SLBgplsTopoSrSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , segmentdesc_(nullptr)
  , endpointbehaviour_(nullptr)
  , sidstruct_(nullptr)
  , type_(0)

  , issidmpls_(0u)
  , _oneof_case_{}{}
struct SLBgplsTopoSrSegmentDefaultTypeInternal {
  constexpr SLBgplsTopoSrSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrSegmentDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrSegmentDefaultTypeInternal _SLBgplsTopoSrSegment_default_instance_;
constexpr SLBgplsSrSegListMetric::SLBgplsSrSegListMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u)
  , margin_(0u)
  , bound_(0u)
  , value_(0u){}
struct SLBgplsSrSegListMetricDefaultTypeInternal {
  constexpr SLBgplsSrSegListMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsSrSegListMetricDefaultTypeInternal() {}
  union {
    SLBgplsSrSegListMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsSrSegListMetricDefaultTypeInternal _SLBgplsSrSegListMetric_default_instance_;
constexpr SLBgplsTopoSrAffinityConstraints::SLBgplsTopoSrAffinityConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exclanyeag_()
  , _exclanyeag_cached_byte_size_(0)
  , inclanyeag_()
  , _inclanyeag_cached_byte_size_(0)
  , inclalleag_()
  , _inclalleag_cached_byte_size_(0){}
struct SLBgplsTopoSrAffinityConstraintsDefaultTypeInternal {
  constexpr SLBgplsTopoSrAffinityConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrAffinityConstraintsDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrAffinityConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrAffinityConstraintsDefaultTypeInternal _SLBgplsTopoSrAffinityConstraints_default_instance_;
constexpr SLBgplsTopoSrSrlgConstraints::SLBgplsTopoSrSrlgConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srlgvalues_()
  , _srlgvalues_cached_byte_size_(0){}
struct SLBgplsTopoSrSrlgConstraintsDefaultTypeInternal {
  constexpr SLBgplsTopoSrSrlgConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrSrlgConstraintsDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrSrlgConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrSrlgConstraintsDefaultTypeInternal _SLBgplsTopoSrSrlgConstraints_default_instance_;
constexpr SLBgplsTopoSrBandwidthConstraint::SLBgplsTopoSrBandwidthConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrBandwidthConstraintDefaultTypeInternal {
  constexpr SLBgplsTopoSrBandwidthConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrBandwidthConstraintDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrBandwidthConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrBandwidthConstraintDefaultTypeInternal _SLBgplsTopoSrBandwidthConstraint_default_instance_;
constexpr SLBgplsTopoSrDisjointGroupConstraint::SLBgplsTopoSrDisjointGroupConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestflags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statusflags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , groupid_(0u){}
struct SLBgplsTopoSrDisjointGroupConstraintDefaultTypeInternal {
  constexpr SLBgplsTopoSrDisjointGroupConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrDisjointGroupConstraintDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrDisjointGroupConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrDisjointGroupConstraintDefaultTypeInternal _SLBgplsTopoSrDisjointGroupConstraint_default_instance_;
constexpr SLBgplsTopoSrv6BindingSid::SLBgplsTopoSrv6BindingSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bsid_(nullptr)
  , specifiedbsid_(nullptr)
  , endpointbehaviour_(nullptr)
  , sidstruct_(nullptr){}
struct SLBgplsTopoSrv6BindingSidDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6BindingSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6BindingSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6BindingSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6BindingSidDefaultTypeInternal _SLBgplsTopoSrv6BindingSid_default_instance_;
constexpr SLBgplsTopoSrPolicyName::SLBgplsTopoSrPolicyName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrPolicyNameDefaultTypeInternal {
  constexpr SLBgplsTopoSrPolicyNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrPolicyNameDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrPolicyName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrPolicyNameDefaultTypeInternal _SLBgplsTopoSrPolicyName_default_instance_;
constexpr SLBgplsTopoSrBidirGroupConstraint::SLBgplsTopoSrBidirGroupConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , groupid_(0u){}
struct SLBgplsTopoSrBidirGroupConstraintDefaultTypeInternal {
  constexpr SLBgplsTopoSrBidirGroupConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrBidirGroupConstraintDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrBidirGroupConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrBidirGroupConstraintDefaultTypeInternal _SLBgplsTopoSrBidirGroupConstraint_default_instance_;
constexpr SLBgplsTopoSrMetricConstraint::SLBgplsTopoSrMetricConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u)
  , margin_(0u)
  , bound_(0u){}
struct SLBgplsTopoSrMetricConstraintDefaultTypeInternal {
  constexpr SLBgplsTopoSrMetricConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrMetricConstraintDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrMetricConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrMetricConstraintDefaultTypeInternal _SLBgplsTopoSrMetricConstraint_default_instance_;
constexpr SLBgplsTopoSrCpSegListBandwidthState::SLBgplsTopoSrCpSegListBandwidthState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrCpSegListBandwidthStateDefaultTypeInternal {
  constexpr SLBgplsTopoSrCpSegListBandwidthStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrCpSegListBandwidthStateDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrCpSegListBandwidthState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrCpSegListBandwidthStateDefaultTypeInternal _SLBgplsTopoSrCpSegListBandwidthState_default_instance_;
constexpr SLBgplsTopoSrSegListId::SLBgplsTopoSrSegListId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seglistid_(0u){}
struct SLBgplsTopoSrSegListIdDefaultTypeInternal {
  constexpr SLBgplsTopoSrSegListIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrSegListIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrSegListId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrSegListIdDefaultTypeInternal _SLBgplsTopoSrSegListId_default_instance_;
constexpr SLBgplsTopoSrv6EndPointBehavior::SLBgplsTopoSrv6EndPointBehavior(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , endpointbehavior_(0u)
  , algorithm_(0u){}
struct SLBgplsTopoSrv6EndPointBehaviorDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6EndPointBehaviorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6EndPointBehaviorDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6EndPointBehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6EndPointBehaviorDefaultTypeInternal _SLBgplsTopoSrv6EndPointBehavior_default_instance_;
constexpr SLBgplsTopoSrv6BgpPeerNodeSid::SLBgplsTopoSrv6BgpPeerNodeSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(0u)
  , peeras_(0u)
  , peerbgpid_(0u){}
struct SLBgplsTopoSrv6BgpPeerNodeSidDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6BgpPeerNodeSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6BgpPeerNodeSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6BgpPeerNodeSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6BgpPeerNodeSidDefaultTypeInternal _SLBgplsTopoSrv6BgpPeerNodeSid_default_instance_;
constexpr SLBgplsTopoSrv6SidStruct::SLBgplsTopoSrv6SidStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locatorblocklen_(0u)
  , locatornodelen_(0u)
  , functionlen_(0u)
  , arglen_(0u){}
struct SLBgplsTopoSrv6SidStructDefaultTypeInternal {
  constexpr SLBgplsTopoSrv6SidStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrv6SidStructDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrv6SidStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrv6SidStructDefaultTypeInternal _SLBgplsTopoSrv6SidStruct_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fbgpls_5ftopology_2eproto[106];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fbgpls_5ftopology_2eproto = nullptr;

const uint32_t TableStruct_sl_5fbgpls_5ftopology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoGetUpdMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoGetUpdMsg, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriFilter, identifier_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriFilter, protocol_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriFilter, nlritype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUpdMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUpdMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUpdMsg, updtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUpdMsg, Update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoErrorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoErrorStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUpd, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, operation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, nlri_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlri, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlri, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlri, identifier_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlri, protocol_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlri, nlritype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlri, Nlri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNode, nodedescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, localnodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, remotenodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, linkdescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefix, nodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefix, prefixdescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6Sid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6Sid, nodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6Sid, srv6siddescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicy, nodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicy, srpolicydescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeDescr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeDescr, asn_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeDescr, nodeidtype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeDescr, NodeId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, localid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, remoteid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, localipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, remoteipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, localipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, remoteipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, mtid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, ospfroutetype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, prefixlength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidDescr, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidDescr, srv6sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, protoorigin_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, flags_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, isendpointaddressipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, color_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, originasn_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, isoriginatoraddressipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, discriminator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, EndpointAddress_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyDescr, OriginatorAddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, areaid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, isasscoped_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, dridentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, areaid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, asscoped_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, dridentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisNodeId, systemid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisNodeId, psnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpNodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpNodeId, memberasn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyNodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyNodeId, memberasn_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyNodeId, ipv4routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyNodeId, ipv6routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAttr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAttr, attrtype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAttr, Attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, nodemsd_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, nodeflagbits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, opaquenodeattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, nodename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, isisareaid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, localipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, localipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, srgbisisflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, srgb_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, sralgorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, srlb_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, fad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, linklocremid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, linkmsd_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, localipv4routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, localipv6routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, remoteipv4routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, remoteipv6routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, extadmingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, maxbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, maxresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, tedefmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, protectiontype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, mplsprotomask_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, igpmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, srlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, opaqueattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, linkname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, adjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, lanadjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, srv6endxsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, srv6lanendxsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, minmaxunilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unidelayvar_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unilinkloss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, uniresbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, uniavailbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, uniutilbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, asla_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, l2bundlememberattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, fapm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, igpflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, igproutetag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, igpextroutetag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, metric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, ospffwdaddr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, opaqueattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, range_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, srv6loc_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, attrflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, srcrouterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidAttr, endpointbehavior_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidAttr, bgppeernodesid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidAttr, sidstruct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, srbsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, cpstate_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, cpname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, cpconstraints_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, seglists_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, srv6bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyAttr, srpolicyname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBplsTopoLinkLocRemId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBplsTopoLinkLocRemId, localid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBplsTopoLinkLocRemId, remoteid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMtId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMtId, mtid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeMsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeMsd, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeMsd, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMsd, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMsd, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeFlagBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeFlagBits, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeOpaqueAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeOpaqueAttr, opaqueattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsNodeName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsNodeName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisAreaId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisAreaId, areaid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv4RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv4RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv6RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv6RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv4RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv4RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv6RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv6RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgb, startlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgb, rangesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgbIsisFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgbIsisFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAlgorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAlgorithm, algorithms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrlb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrlb, startlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrlb, rangesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, metrictype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, calctype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, priority_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excanyaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incanyaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incallaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excsrlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, unsupptlv_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excminbw_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excmaxdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excanyrevaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incanyrevaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incallrevaff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, flexalgo_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFadUnsuppTlv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFadUnsuppTlv, protocol_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFadUnsuppTlv, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoExtAdminGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoExtAdminGroup, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxResvBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxResvBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkUnresvBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkUnresvBandwidth, priority_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkUnresvBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkTeDefaultMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkTeDefaultMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkProtecionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkProtecionType, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMplsProtoMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMplsProtoMask, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkIgpMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkIgpMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkSrlg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkSrlg, srlgval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkOpaqueAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkOpaqueAttr, opaqueattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, labelindex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, adjsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, neighbor_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, labelindex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, adjsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, weight_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, endpointbehavior_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndXSid, sidstruct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, isneighboridipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, NeighborId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, neighbor_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, weight_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, endpointbehavior_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6LanEndXSid, sidstruct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkDelay, delay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkDelay, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, min_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, max_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniDelayVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniDelayVar, variation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniDelayVar, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkLoss, loss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkLoss, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniResBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniResBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniAvailBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniAvailBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniUtilBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniUtilBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpRouteTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpRouteTag, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpExtRouteTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpExtRouteTag, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, isospffwdaddrdipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, OspfFwdAddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOpaqueAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOpaqueAttr, opaqueattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, labelindex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, prefixsidformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, rangesize_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, index_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, sidflags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrv6Loc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrv6Loc, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrv6Loc, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrv6Loc, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttrFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttrFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, issrcrouteridipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, SrcRouterId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, memberdesc_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, extadmingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, maxbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, maxresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, tedefmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, protectiontype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, adjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, lanadjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, minmaxlinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unidelayvariation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unilinkloss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, uniresbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, uniavailbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, uniutilbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, asla_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, sabm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, udabm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, extadmingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, tedefmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, srlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, minmaxlinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unidelayvariation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unilinkloss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, uniresbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, uniavailbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, uniutilbandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SlBgplsTopoSrBsid, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SlBgplsTopoSrBsid, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SlBgplsTopoSrBsid, isbindingsidmpls_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SlBgplsTopoSrBsid, BindingSid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBindingSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBindingSid, bsidflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBindingSid, bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBindingSid, specifiedbsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpState, priority_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpState, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpState, preference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, affinity_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, srlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, disjoint_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, bidirgroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpConstraints, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegList, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegList, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegList, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegList, weight_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegList, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, algorithm_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, islocalnodeaddripv4_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, isremotenodeaddripv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, ipv6localnodeglobaladdr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, ipv6remotenodeglobaladdr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, localnodeintfid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, remotenodeintfid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, LocalNodeAddr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegmentDesc, RemoteNodeAddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, flags_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, issidmpls_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, segmentdesc_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, endpointbehaviour_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, sidstruct_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegment, Sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsSrSegListMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsSrSegListMetric, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsSrSegListMetric, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsSrSegListMetric, margin_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsSrSegListMetric, bound_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsSrSegListMetric, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAffinityConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAffinityConstraints, exclanyeag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAffinityConstraints, inclanyeag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAffinityConstraints, inclalleag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSrlgConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSrlgConstraints, srlgvalues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBandwidthConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBandwidthConstraint, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrDisjointGroupConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrDisjointGroupConstraint, requestflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrDisjointGroupConstraint, statusflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrDisjointGroupConstraint, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BindingSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BindingSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BindingSid, bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BindingSid, specifiedbsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BindingSid, endpointbehaviour_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BindingSid, sidstruct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrPolicyName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBidirGroupConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBidirGroupConstraint, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrBidirGroupConstraint, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrMetricConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrMetricConstraint, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrMetricConstraint, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrMetricConstraint, margin_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrMetricConstraint, bound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpSegListBandwidthState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrCpSegListBandwidthState, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegListId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrSegListId, seglistid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndPointBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndPointBehavior, endpointbehavior_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndPointBehavior, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6EndPointBehavior, algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid, weight_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid, peeras_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid, peerbgpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidStruct, locatorblocklen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidStruct, locatornodelen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidStruct, functionlen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrv6SidStruct, arglen_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLBgplsTopoGetUpdMsg)},
  { 7, -1, -1, sizeof(::service_layer::SLBgplsTopoNlriFilter)},
  { 16, -1, -1, sizeof(::service_layer::SLBgplsTopoUpdMsg)},
  { 26, -1, -1, sizeof(::service_layer::SLBgplsTopoErrorStatus)},
  { 33, -1, -1, sizeof(::service_layer::SLBgplsTopoUpd)},
  { 40, -1, -1, sizeof(::service_layer::SLBgplsTopoEntry)},
  { 49, -1, -1, sizeof(::service_layer::SLBgplsTopoNlri)},
  { 64, -1, -1, sizeof(::service_layer::SLBgplsTopoNode)},
  { 71, -1, -1, sizeof(::service_layer::SLBgplsTopoLink)},
  { 80, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefix)},
  { 88, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6Sid)},
  { 96, -1, -1, sizeof(::service_layer::SLBgplsTopoSrPolicy)},
  { 104, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeDescr)},
  { 118, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkDescr)},
  { 131, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixDescr)},
  { 141, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6SidDescr)},
  { 149, -1, -1, sizeof(::service_layer::SLBgplsTopoSrPolicyDescr)},
  { 168, -1, -1, sizeof(::service_layer::SLBgplsTopoOspfNodeId)},
  { 178, -1, -1, sizeof(::service_layer::SLBgplsTopoOspfv3NodeId)},
  { 188, -1, -1, sizeof(::service_layer::SLBgplsTopoIsisNodeId)},
  { 196, -1, -1, sizeof(::service_layer::SLBgplsTopoBgpNodeId)},
  { 204, -1, -1, sizeof(::service_layer::SLBgplsTopoSrPolicyNodeId)},
  { 214, -1, -1, sizeof(::service_layer::SLBgplsTopoSrPolicyFlags)},
  { 221, -1, -1, sizeof(::service_layer::SLBgplsTopoAttr)},
  { 234, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeAttr)},
  { 253, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkAttr)},
  { 289, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixAttr)},
  { 307, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6SidAttr)},
  { 316, -1, -1, sizeof(::service_layer::SLBgplsTopoSrPolicyAttr)},
  { 329, -1, -1, sizeof(::service_layer::SLBplsTopoLinkLocRemId)},
  { 337, -1, -1, sizeof(::service_layer::SLBgplsTopoMtId)},
  { 344, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeMsd)},
  { 352, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMsd)},
  { 360, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeFlagBits)},
  { 367, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeOpaqueAttr)},
  { 374, -1, -1, sizeof(::service_layer::SLBgplsNodeName)},
  { 381, -1, -1, sizeof(::service_layer::SLBgplsTopoIsisAreaId)},
  { 388, -1, -1, sizeof(::service_layer::SLBgplsTopoLocalIpv4RouterId)},
  { 395, -1, -1, sizeof(::service_layer::SLBgplsTopoLocalIpv6RouterId)},
  { 402, -1, -1, sizeof(::service_layer::SLBgplsTopoRemoteIpv4RouterId)},
  { 409, -1, -1, sizeof(::service_layer::SLBgplsTopoRemoteIpv6RouterId)},
  { 416, -1, -1, sizeof(::service_layer::SLBgplsTopoSrgb)},
  { 424, -1, -1, sizeof(::service_layer::SLBgplsTopoSrgbIsisFlags)},
  { 431, -1, -1, sizeof(::service_layer::SLBgplsTopoSrAlgorithm)},
  { 438, -1, -1, sizeof(::service_layer::SLBgplsTopoSrlb)},
  { 446, -1, -1, sizeof(::service_layer::SLBgplsTopoFad)},
  { 467, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixFAPM)},
  { 476, -1, -1, sizeof(::service_layer::SLBgplsTopoFadUnsuppTlv)},
  { 484, -1, -1, sizeof(::service_layer::SLBgplsTopoExtAdminGroup)},
  { 491, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMaxBandwidth)},
  { 498, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMaxResvBandwidth)},
  { 505, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkUnresvBandwidth)},
  { 513, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkTeDefaultMetric)},
  { 520, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkProtecionType)},
  { 527, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMplsProtoMask)},
  { 534, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkIgpMetric)},
  { 541, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkSrlg)},
  { 548, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkOpaqueAttr)},
  { 555, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkName)},
  { 562, -1, -1, sizeof(::service_layer::SLBgplsTopoAdjSid)},
  { 572, -1, -1, sizeof(::service_layer::SLBgplsTopoLanAdjSid)},
  { 583, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6EndXSid)},
  { 595, -1, -1, sizeof(::service_layer::SLBgpLsTopoNeighborId)},
  { 605, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6LanEndXSid)},
  { 618, -1, -1, sizeof(::service_layer::SLBgplsTopoUniLinkDelay)},
  { 626, -1, -1, sizeof(::service_layer::SLBgplsTopoMinMaxUniLinkDelay)},
  { 635, -1, -1, sizeof(::service_layer::SLBgplsTopoUniDelayVar)},
  { 643, -1, -1, sizeof(::service_layer::SLBgplsTopoUniLinkLoss)},
  { 651, -1, -1, sizeof(::service_layer::SLBgplsTopoUniResBandwidth)},
  { 658, -1, -1, sizeof(::service_layer::SLBgplsTopoUniAvailBandwidth)},
  { 665, -1, -1, sizeof(::service_layer::SLBgplsTopoUniUtilBandwidth)},
  { 672, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixIgpFlags)},
  { 679, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixIgpRouteTag)},
  { 686, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixIgpExtRouteTag)},
  { 693, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixMetric)},
  { 700, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixOspfFwdAddr)},
  { 710, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixOpaqueAttr)},
  { 717, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixSid)},
  { 727, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixRange)},
  { 738, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixSrv6Loc)},
  { 747, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixAttrFlags)},
  { 754, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixSrcRouterId)},
  { 764, -1, -1, sizeof(::service_layer::SLBgplsTopoL2BundleMemberAttr)},
  { 787, -1, -1, sizeof(::service_layer::SLBgplsTopoAslaAttr)},
  { 805, -1, -1, sizeof(::service_layer::SlBgplsTopoSrBsid)},
  { 815, -1, -1, sizeof(::service_layer::SLBgplsTopoSrBindingSid)},
  { 824, -1, -1, sizeof(::service_layer::SLBgplsTopoSrCpState)},
  { 833, -1, -1, sizeof(::service_layer::SLBgplsTopoSrCpName)},
  { 840, -1, -1, sizeof(::service_layer::SLBgplsTopoSrCpConstraints)},
  { 855, -1, -1, sizeof(::service_layer::SLBgplsTopoSrSegList)},
  { 866, -1, -1, sizeof(::service_layer::SLBgplsTopoSrSegmentDesc)},
  { 885, -1, -1, sizeof(::service_layer::SLBgplsTopoSrSegment)},
  { 900, -1, -1, sizeof(::service_layer::SLBgplsSrSegListMetric)},
  { 911, -1, -1, sizeof(::service_layer::SLBgplsTopoSrAffinityConstraints)},
  { 920, -1, -1, sizeof(::service_layer::SLBgplsTopoSrSrlgConstraints)},
  { 927, -1, -1, sizeof(::service_layer::SLBgplsTopoSrBandwidthConstraint)},
  { 934, -1, -1, sizeof(::service_layer::SLBgplsTopoSrDisjointGroupConstraint)},
  { 943, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6BindingSid)},
  { 954, -1, -1, sizeof(::service_layer::SLBgplsTopoSrPolicyName)},
  { 961, -1, -1, sizeof(::service_layer::SLBgplsTopoSrBidirGroupConstraint)},
  { 969, -1, -1, sizeof(::service_layer::SLBgplsTopoSrMetricConstraint)},
  { 979, -1, -1, sizeof(::service_layer::SLBgplsTopoSrCpSegListBandwidthState)},
  { 986, -1, -1, sizeof(::service_layer::SLBgplsTopoSrSegListId)},
  { 993, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6EndPointBehavior)},
  { 1002, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid)},
  { 1012, -1, -1, sizeof(::service_layer::SLBgplsTopoSrv6SidStruct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoGetUpdMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNlriFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUpdMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoErrorStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUpd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNlri_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6Sid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6SidDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrPolicyDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoOspfNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoOspfv3NodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoIsisNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoBgpNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrPolicyNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrPolicyFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6SidAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrPolicyAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBplsTopoLinkLocRemId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoMtId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeMsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeFlagBits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeOpaqueAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsNodeName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoIsisAreaId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLocalIpv4RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLocalIpv6RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoRemoteIpv4RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoRemoteIpv6RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrgb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrgbIsisFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrAlgorithm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrlb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoFad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixFAPM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoFadUnsuppTlv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoExtAdminGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMaxBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMaxResvBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkUnresvBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkTeDefaultMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkProtecionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMplsProtoMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkIgpMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkSrlg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkOpaqueAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoAdjSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLanAdjSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6EndXSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpLsTopoNeighborId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6LanEndXSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniLinkDelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoMinMaxUniLinkDelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniDelayVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniLinkLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniResBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniAvailBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniUtilBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixIgpFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixIgpRouteTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixIgpExtRouteTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixOspfFwdAddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixOpaqueAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixSrv6Loc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixAttrFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixSrcRouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoL2BundleMemberAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoAslaAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SlBgplsTopoSrBsid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrBindingSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrCpState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrCpName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrCpConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrSegList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrSegmentDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsSrSegListMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrAffinityConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrSrlgConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrBandwidthConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrDisjointGroupConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6BindingSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrPolicyName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrBidirGroupConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrMetricConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrCpSegListBandwidthState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrSegListId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6EndPointBehavior_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6BgpPeerNodeSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrv6SidStruct_default_instance_),
};

const char descriptor_table_protodef_sl_5fbgpls_5ftopology_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027sl_bgpls_topology.proto\022\rservice_layer"
  "\"L\n\024SLBgplsTopoGetUpdMsg\0224\n\006Filter\030\001 \003(\013"
  "2$.service_layer.SLBgplsTopoNlriFilter\"\227"
  "\001\n\025SLBgplsTopoNlriFilter\022\022\n\nIdentifier\030\001"
  " \001(\004\0224\n\010Protocol\030\002 \001(\0162\".service_layer.S"
  "LBgplsTopoProtocol\0224\n\010NlriType\030\003 \001(\0162\".s"
  "ervice_layer.SLBgplsTopoNlriType\"\274\001\n\021SLB"
  "gplsTopoUpdMsg\0222\n\007UpdType\030\001 \001(\0162!.servic"
  "e_layer.SLBgplsTopoUpdType\022:\n\tErrStatus\030"
  "\002 \001(\0132%.service_layer.SLBgplsTopoErrorSt"
  "atusH\000\022-\n\004Data\030\003 \001(\0132\035.service_layer.SLB"
  "gplsTopoUpdH\000B\010\n\006Update\"\270\006\n\026SLBgplsTopoE"
  "rrorStatus\022F\n\006Status\030\001 \001(\01626.service_lay"
  "er.SLBgplsTopoErrorStatus.SLBgplsTopoErr"
  "no\"\325\005\n\020SLBgplsTopoErrno\022\031\n\025SL_BGPLS_TOPO"
  "_SUCCESS\020\000\022\037\n\033SL_BGPLS_TOPO_NOT_CONNECTE"
  "D\020\001\022\030\n\024SL_BGPLS_TOPO_EAGAIN\020\002\022\030\n\024SL_BGPL"
  "S_TOPO_ENOMEM\020\003\022\027\n\023SL_BGPLS_TOPO_EBUSY\020\004"
  "\022\030\n\024SL_BGPLS_TOPO_EINVAL\020\005\022!\n\035SL_BGPLS_T"
  "OPO_UNSUPPORTED_VER\020\006\022\037\n\033SL_BGPLS_TOPO_N"
  "OT_AVAILABLE\020\007\022&\n\"SL_BGPLS_TOPO_STREAM_N"
  "OT_SUPPORTED\020\010\022\031\n\025SL_BGPLS_TOPO_ENOTSUP\020"
  "\t\022\032\n\026SL_BGPLS_TOPO_SOME_ERR\020\n\022\031\n\025SL_BGPL"
  "S_TOPO_TIMEOUT\020\013\022\034\n\030SL_BGPLS_TOPO_NOTIF_"
  "TERM\020\014\022\033\n\027SL_BGPLS_TOPO_AUTH_FAIL\020\r\022$\n\037S"
  "L_BGPLS_TOPO_INIT_START_OFFSET\020\200\n\022#\n\036SL_"
  "BGPLS_TOPO_INIT_STATE_CLEAR\020\201\n\022#\n\036SL_BGP"
  "LS_TOPO_INIT_STATE_READY\020\202\n\022\'\n\"SL_BGPLS_"
  "TOPO_INIT_UNSUPPORTED_VER\020\203\n\022.\n)SL_BGPLS"
  "_TOPO_INIT_SERVER_NOT_INITIALIZED\020\204\n\0221\n,"
  "SL_BGPLS_TOPO_INIT_SERVER_MODE_CHANGE_FA"
  "ILED\020\205\n\022)\n#SL_BGPLS_TOPO_INTERNAL_START_"
  "OFFSET\020\200\200@\"B\n\016SLBgplsTopoUpd\0220\n\007Entries\030"
  "\001 \003(\0132\037.service_layer.SLBgplsTopoEntry\"\246"
  "\001\n\020SLBgplsTopoEntry\0226\n\tOperation\030\001 \001(\0162#"
  ".service_layer.SLBgplsTopoOperation\022,\n\004N"
  "lri\030\002 \001(\0132\036.service_layer.SLBgplsTopoNlr"
  "i\022,\n\004Attr\030\003 \001(\0132\036.service_layer.SLBgplsT"
  "opoAttr\"\233\003\n\017SLBgplsTopoNlri\022\022\n\nIdentifie"
  "r\030\001 \001(\004\0224\n\010Protocol\030\002 \001(\0162\".service_laye"
  "r.SLBgplsTopoProtocol\0224\n\010NlriType\030\003 \001(\0162"
  "\".service_layer.SLBgplsTopoNlriType\022.\n\004N"
  "ode\030\004 \001(\0132\036.service_layer.SLBgplsTopoNod"
  "eH\000\022.\n\004Link\030\005 \001(\0132\036.service_layer.SLBgpl"
  "sTopoLinkH\000\0222\n\006Prefix\030\006 \001(\0132 .service_la"
  "yer.SLBgplsTopoPrefixH\000\0224\n\007Srv6Sid\030\007 \001(\013"
  "2!.service_layer.SLBgplsTopoSrv6SidH\000\0226\n"
  "\010SrPolicy\030\010 \001(\0132\".service_layer.SLBgplsT"
  "opoSrPolicyH\000B\006\n\004Nlri\"I\n\017SLBgplsTopoNode"
  "\0226\n\tNodeDescr\030\001 \001(\0132#.service_layer.SLBg"
  "plsTopoNodeDescr\"\304\001\n\017SLBgplsTopoLink\022;\n\016"
  "LocalNodeDescr\030\001 \001(\0132#.service_layer.SLB"
  "gplsTopoNodeDescr\022<\n\017RemoteNodeDescr\030\002 \001"
  "(\0132#.service_layer.SLBgplsTopoNodeDescr\022"
  "6\n\tLinkDescr\030\003 \001(\0132#.service_layer.SLBgp"
  "lsTopoLinkDescr\"\207\001\n\021SLBgplsTopoPrefix\0226\n"
  "\tNodeDescr\030\001 \001(\0132#.service_layer.SLBgpls"
  "TopoNodeDescr\022:\n\013PrefixDescr\030\002 \001(\0132%.ser"
  "vice_layer.SLBgplsTopoPrefixDescr\"\212\001\n\022SL"
  "BgplsTopoSrv6Sid\0226\n\tNodeDescr\030\001 \001(\0132#.se"
  "rvice_layer.SLBgplsTopoNodeDescr\022<\n\014Srv6"
  "SidDescr\030\002 \001(\0132&.service_layer.SLBgplsTo"
  "poSrv6SidDescr\"\215\001\n\023SLBgplsTopoSrPolicy\0226"
  "\n\tNodeDescr\030\001 \001(\0132#.service_layer.SLBgpl"
  "sTopoNodeDescr\022>\n\rSrPolicyDescr\030\002 \001(\0132\'."
  "service_layer.SLBgplsTopoSrPolicyDescr\"\235"
  "\003\n\024SLBgplsTopoNodeDescr\022\013\n\003Asn\030\001 \001(\r\022:\n\n"
  "OspfNodeId\030\002 \001(\0132$.service_layer.SLBgpls"
  "TopoOspfNodeIdH\000\022>\n\014Ospfv3NodeId\030\003 \001(\0132&"
  ".service_layer.SLBgplsTopoOspfv3NodeIdH\000"
  "\022:\n\nIsisNodeId\030\004 \001(\0132$.service_layer.SLB"
  "gplsTopoIsisNodeIdH\000\0228\n\tBgpNodeId\030\005 \001(\0132"
  "#.service_layer.SLBgplsTopoBgpNodeIdH\000\022B"
  "\n\016SrPolicyNodeId\030\006 \001(\0132(.service_layer.S"
  "LBgplsTopoSrPolicyNodeIdH\000\0228\n\nNodeIdType"
  "\030\007 \001(\0162$.service_layer.SLBgplsTopoNodeId"
  "TypeB\010\n\006NodeId\"\265\001\n\024SLBgplsTopoLinkDescr\022"
  "\017\n\007LocalId\030\001 \001(\r\022\020\n\010RemoteId\030\002 \001(\r\022\021\n\tLo"
  "calIpv4\030\003 \001(\r\022\022\n\nRemoteIpv4\030\004 \001(\r\022\021\n\tLoc"
  "alIpv6\030\005 \001(\014\022\022\n\nRemoteIpv6\030\006 \001(\014\022,\n\004MtId"
  "\030\007 \001(\0132\036.service_layer.SLBgplsTopoMtId\"\254"
  "\001\n\026SLBgplsTopoPrefixDescr\022,\n\004MtId\030\001 \001(\0132"
  "\036.service_layer.SLBgplsTopoMtId\022>\n\rOspfR"
  "outeType\030\002 \001(\0162\'.service_layer.SLBgplsTo"
  "poOspfRouteType\022\024\n\014PrefixLength\030\003 \001(\014\022\016\n"
  "\006Prefix\030\004 \001(\014\"X\n\027SLBgplsTopoSrv6SidDescr"
  "\022,\n\004MtId\030\001 \001(\0132\036.service_layer.SLBgplsTo"
  "poMtId\022\017\n\007Srv6Sid\030\002 \001(\014\"\272\003\n\030SLBgplsTopoS"
  "rPolicyDescr\022E\n\013ProtoOrigin\030\001 \001(\01620.serv"
  "ice_layer.SLBgplsTopoSrPolicyProtocolOri"
  "gin\0226\n\005Flags\030\002 \001(\0132\'.service_layer.SLBgp"
  "lsTopoSrPolicyFlags\022\035\n\023Ipv4EndpointAddre"
  "ss\030\003 \001(\rH\000\022\035\n\023Ipv6EndpointAddress\030\004 \001(\014H"
  "\000\022\035\n\025IsEndpointAddressIpv6\030\005 \001(\r\022\r\n\005Colo"
  "r\030\006 \001(\r\022\021\n\tOriginAsn\030\007 \001(\r\022\037\n\025Ipv4Origin"
  "atorAddress\030\010 \001(\rH\001\022\037\n\025Ipv6OriginatorAdd"
  "ress\030\t \001(\014H\001\022\037\n\027IsOriginatorAddressIpv6\030"
  "\n \001(\r\022\025\n\rDiscriminator\030\013 \001(\rB\021\n\017Endpoint"
  "AddressB\023\n\021OriginatorAddress\"c\n\025SLBgplsT"
  "opoOspfNodeId\022\016\n\006AreaId\030\001 \001(\r\022\022\n\nIsAsSco"
  "ped\030\002 \001(\r\022\020\n\010RouterId\030\003 \001(\r\022\024\n\014DrIdentif"
  "ier\030\004 \001(\r\"c\n\027SLBgplsTopoOspfv3NodeId\022\016\n\006"
  "AreaId\030\001 \001(\r\022\020\n\010AsScoped\030\002 \001(\r\022\020\n\010Router"
  "Id\030\003 \001(\r\022\024\n\014DrIdentifier\030\004 \001(\r\"8\n\025SLBgpl"
  "sTopoIsisNodeId\022\020\n\010SystemId\030\001 \001(\014\022\r\n\005Psn"
  "Id\030\002 \001(\014\";\n\024SLBgplsTopoBgpNodeId\022\020\n\010Rout"
  "erId\030\001 \001(\r\022\021\n\tMemberAsn\030\002 \001(\r\"l\n\031SLBgpls"
  "TopoSrPolicyNodeId\022\020\n\010RouterId\030\001 \001(\r\022\021\n\t"
  "MemberAsn\030\002 \001(\r\022\024\n\014Ipv4RouterId\030\003 \001(\r\022\024\n"
  "\014Ipv6RouterId\030\004 \001(\014\")\n\030SLBgplsTopoSrPoli"
  "cyFlags\022\r\n\005Flags\030\001 \001(\014\"\371\002\n\017SLBgplsTopoAt"
  "tr\0226\n\010NodeAttr\030\001 \001(\0132\".service_layer.SLB"
  "gplsTopoNodeAttrH\000\0226\n\010LinkAttr\030\002 \001(\0132\".s"
  "ervice_layer.SLBgplsTopoLinkAttrH\000\022:\n\nPr"
  "efixAttr\030\003 \001(\0132$.service_layer.SLBgplsTo"
  "poPrefixAttrH\000\022<\n\013Srv6SidAttr\030\004 \001(\0132%.se"
  "rvice_layer.SLBgplsTopoSrv6SidAttrH\000\022>\n\014"
  "SrPolicyAttr\030\005 \001(\0132&.service_layer.SLBgp"
  "lsTopoSrPolicyAttrH\000\0224\n\010AttrType\030\006 \001(\0162\""
  ".service_layer.SLBgplsTopoAttrTypeB\006\n\004At"
  "tr\"\347\005\n\023SLBgplsTopoNodeAttr\022,\n\004MtId\030\001 \003(\013"
  "2\036.service_layer.SLBgplsTopoMtId\0222\n\007Node"
  "Msd\030\002 \003(\0132!.service_layer.SLBgplsTopoNod"
  "eMsd\022<\n\014NodeFlagBits\030\003 \001(\0132&.service_lay"
  "er.SLBgplsTopoNodeFlagBits\022@\n\016OpaqueNode"
  "Attr\030\004 \001(\0132(.service_layer.SLBgplsTopoNo"
  "deOpaqueAttr\0220\n\010NodeName\030\005 \001(\0132\036.service"
  "_layer.SLBgplsNodeName\0228\n\nIsisAreaId\030\006 \003"
  "(\0132$.service_layer.SLBgplsTopoIsisAreaId"
  "\022>\n\tLocalIpv4\030\007 \003(\0132+.service_layer.SLBg"
  "plsTopoLocalIpv4RouterId\022>\n\tLocalIpv6\030\010 "
  "\003(\0132+.service_layer.SLBgplsTopoLocalIpv6"
  "RouterId\022>\n\rSrgbIsisFlags\030\t \001(\0132\'.servic"
  "e_layer.SLBgplsTopoSrgbIsisFlags\022,\n\004Srgb"
  "\030\n \003(\0132\036.service_layer.SLBgplsTopoSrgb\022:"
  "\n\013SrAlgorithm\030\013 \001(\0132%.service_layer.SLBg"
  "plsTopoSrAlgorithm\022,\n\004Srlb\030\014 \003(\0132\036.servi"
  "ce_layer.SLBgplsTopoSrlb\022*\n\003Fad\030\r \003(\0132\035."
  "service_layer.SLBgplsTopoFad\"\243\017\n\023SLBgpls"
  "TopoLinkAttr\022;\n\014LinkLocRemId\030\001 \001(\0132%.ser"
  "vice_layer.SLBplsTopoLinkLocRemId\0222\n\007Lin"
  "kMsd\030\002 \003(\0132!.service_layer.SLBgplsTopoLi"
  "nkMsd\022F\n\021LocalIpv4RouterId\030\003 \003(\0132+.servi"
  "ce_layer.SLBgplsTopoLocalIpv4RouterId\022F\n"
  "\021LocalIpv6RouterId\030\004 \003(\0132+.service_layer"
  ".SLBgplsTopoLocalIpv6RouterId\022H\n\022RemoteI"
  "pv4RouterId\030\005 \003(\0132,.service_layer.SLBgpl"
  "sTopoRemoteIpv4RouterId\022H\n\022RemoteIpv6Rou"
  "terId\030\006 \003(\0132,.service_layer.SLBgplsTopoR"
  "emoteIpv6RouterId\022>\n\rExtAdminGroup\030\007 \003(\013"
  "2\'.service_layer.SLBgplsTopoExtAdminGrou"
  "p\022@\n\014MaxBandwidth\030\010 \001(\0132*.service_layer."
  "SLBgplsTopoLinkMaxBandwidth\022H\n\020MaxResvBa"
  "ndwidth\030\t \001(\0132..service_layer.SLBgplsTop"
  "oLinkMaxResvBandwidth\022F\n\017UnresvBandwidth"
  "\030\n \003(\0132-.service_layer.SLBgplsTopoLinkUn"
  "resvBandwidth\022B\n\013TeDefMetric\030\013 \001(\0132-.ser"
  "vice_layer.SLBgplsTopoLinkTeDefaultMetri"
  "c\022C\n\016ProtectionType\030\014 \001(\0132+.service_laye"
  "r.SLBgplsTopoLinkProtecionType\022B\n\rMplsPr"
  "otoMask\030\r \001(\0132+.service_layer.SLBgplsTop"
  "oLinkMplsProtoMask\022:\n\tIgpMetric\030\016 \001(\0132\'."
  "service_layer.SLBgplsTopoLinkIgpMetric\0220"
  "\n\004Srlg\030\017 \003(\0132\".service_layer.SLBgplsTopo"
  "LinkSrlg\022<\n\nOpaqueAttr\030\020 \001(\0132(.service_l"
  "ayer.SLBgplsTopoLinkOpaqueAttr\0224\n\010LinkNa"
  "me\030\021 \001(\0132\".service_layer.SLBgplsTopoLink"
  "Name\0220\n\006AdjSid\030\022 \003(\0132 .service_layer.SLB"
  "gplsTopoAdjSid\0226\n\tLanAdjSid\030\023 \003(\0132#.serv"
  "ice_layer.SLBgplsTopoLanAdjSid\022:\n\013Srv6En"
  "dXSid\030\024 \003(\0132%.service_layer.SLBgplsTopoS"
  "rv6EndXSid\022@\n\016Srv6LanEndXSid\030\025 \003(\0132(.ser"
  "vice_layer.SLBgplsTopoSrv6LanEndXSid\022<\n\014"
  "UniLinkDelay\030\026 \001(\0132&.service_layer.SLBgp"
  "lsTopoUniLinkDelay\022H\n\022MinMaxUniLinkDelay"
  "\030\027 \001(\0132,.service_layer.SLBgplsTopoMinMax"
  "UniLinkDelay\022:\n\013UniDelayVar\030\030 \001(\0132%.serv"
  "ice_layer.SLBgplsTopoUniDelayVar\022:\n\013UniL"
  "inkLoss\030\031 \001(\0132%.service_layer.SLBgplsTop"
  "oUniLinkLoss\022B\n\017UniResBandwidth\030\032 \001(\0132)."
  "service_layer.SLBgplsTopoUniResBandwidth"
  "\022F\n\021UniAvailBandwidth\030\033 \001(\0132+.service_la"
  "yer.SLBgplsTopoUniAvailBandwidth\022D\n\020UniU"
  "tilBandwidth\030\034 \001(\0132*.service_layer.SLBgp"
  "lsTopoUniUtilBandwidth\0220\n\004Asla\030\035 \003(\0132\".s"
  "ervice_layer.SLBgplsTopoAslaAttr\022H\n\022L2Bu"
  "ndleMemberAttr\030\036 \003(\0132,.service_layer.SLB"
  "gplsTopoL2BundleMemberAttr\"\355\005\n\025SLBgplsTo"
  "poPrefixAttr\0222\n\004Fapm\030\001 \001(\0132$.service_lay"
  "er.SLBgplsTopoPrefixFAPM\022:\n\010IgpFlags\030\002 \001"
  "(\0132(.service_layer.SLBgplsTopoPrefixIgpF"
  "lags\022@\n\013IgpRouteTag\030\003 \003(\0132+.service_laye"
  "r.SLBgplsTopoPrefixIgpRouteTag\022F\n\016IgpExt"
  "RouteTag\030\004 \003(\0132..service_layer.SLBgplsTo"
  "poPrefixIgpExtRouteTag\0226\n\006Metric\030\005 \001(\0132&"
  ".service_layer.SLBgplsTopoPrefixMetric\022@"
  "\n\013OspfFwdAddr\030\006 \001(\0132+.service_layer.SLBg"
  "plsTopoPrefixOspfFwdAddr\022>\n\nOpaqueAttr\030\007"
  " \001(\0132*.service_layer.SLBgplsTopoPrefixOp"
  "aqueAttr\0220\n\003Sid\030\010 \001(\0132#.service_layer.SL"
  "BgplsTopoPrefixSid\0224\n\005Range\030\t \001(\0132%.serv"
  "ice_layer.SLBgplsTopoPrefixRange\0228\n\007Srv6"
  "Loc\030\n \001(\0132\'.service_layer.SLBgplsTopoPre"
  "fixSrv6Loc\022<\n\tAttrFlags\030\013 \001(\0132).service_"
  "layer.SLBgplsTopoPrefixAttrFlags\022@\n\013SrcR"
  "outerId\030\014 \001(\0132+.service_layer.SLBgplsTop"
  "oPrefixSrcRouterId\"\344\001\n\026SLBgplsTopoSrv6Si"
  "dAttr\022H\n\020EndPointBehavior\030\001 \001(\0132..servic"
  "e_layer.SLBgplsTopoSrv6EndPointBehavior\022"
  "D\n\016BgpPeerNodeSid\030\002 \003(\0132,.service_layer."
  "SLBgplsTopoSrv6BgpPeerNodeSid\022:\n\tSidStru"
  "ct\030\003 \001(\0132\'.service_layer.SLBgplsTopoSrv6"
  "SidStruct\"\256\003\n\027SLBgplsTopoSrPolicyAttr\0226\n"
  "\006SrBsid\030\001 \001(\0132&.service_layer.SLBgplsTop"
  "oSrBindingSid\0224\n\007CpState\030\002 \001(\0132#.service"
  "_layer.SLBgplsTopoSrCpState\0222\n\006CpName\030\003 "
  "\001(\0132\".service_layer.SLBgplsTopoSrCpName\022"
  "@\n\rCpConstraints\030\004 \001(\0132).service_layer.S"
  "LBgplsTopoSrCpConstraints\0225\n\010SegLists\030\005 "
  "\003(\0132#.service_layer.SLBgplsTopoSrSegList"
  "\022:\n\010Srv6Bsid\030\006 \001(\0132(.service_layer.SLBgp"
  "lsTopoSrv6BindingSid\022<\n\014SrPolicyName\030\007 \001"
  "(\0132&.service_layer.SLBgplsTopoSrPolicyNa"
  "me\";\n\026SLBplsTopoLinkLocRemId\022\017\n\007LocalId\030"
  "\001 \001(\r\022\020\n\010RemoteId\030\002 \001(\r\"\037\n\017SLBgplsTopoMt"
  "Id\022\014\n\004MtId\030\001 \001(\r\"1\n\022SLBgplsTopoNodeMsd\022\014"
  "\n\004Type\030\001 \001(\r\022\r\n\005Value\030\002 \001(\r\"1\n\022SLBgplsTo"
  "poLinkMsd\022\014\n\004Type\030\001 \001(\r\022\r\n\005Value\030\002 \001(\r\"("
  "\n\027SLBgplsTopoNodeFlagBits\022\r\n\005Flags\030\001 \001(\014"
  "\"/\n\031SLBgplsTopoNodeOpaqueAttr\022\022\n\nOpaqueA"
  "ttr\030\001 \001(\014\"\037\n\017SLBgplsNodeName\022\014\n\004Name\030\001 \001"
  "(\t\"\'\n\025SLBgplsTopoIsisAreaId\022\016\n\006AreaId\030\001 "
  "\001(\014\"0\n\034SLBgplsTopoLocalIpv4RouterId\022\020\n\010R"
  "outerId\030\001 \001(\r\"0\n\034SLBgplsTopoLocalIpv6Rou"
  "terId\022\020\n\010RouterId\030\001 \001(\014\"1\n\035SLBgplsTopoRe"
  "moteIpv4RouterId\022\020\n\010RouterId\030\001 \001(\r\"1\n\035SL"
  "BgplsTopoRemoteIpv6RouterId\022\020\n\010RouterId\030"
  "\001 \001(\014\"8\n\017SLBgplsTopoSrgb\022\022\n\nStartLabel\030\001"
  " \001(\r\022\021\n\tRangeSize\030\002 \001(\r\")\n\030SLBgplsTopoSr"
  "gbIsisFlags\022\r\n\005Flags\030\001 \001(\014\",\n\026SLBgplsTop"
  "oSrAlgorithm\022\022\n\nAlgorithms\030\001 \001(\014\"8\n\017SLBg"
  "plsTopoSrlb\022\022\n\nStartLabel\030\001 \001(\r\022\021\n\tRange"
  "Size\030\002 \001(\r\"\330\002\n\016SLBgplsTopoFad\022\021\n\tAlgorit"
  "hm\030\001 \001(\014\022\022\n\nMetricType\030\002 \001(\014\022\020\n\010CalcType"
  "\030\003 \001(\014\022\020\n\010Priority\030\004 \001(\014\022\021\n\tExcAnyAff\030\005 "
  "\003(\r\022\021\n\tIncAnyAff\030\006 \003(\r\022\021\n\tIncAllAff\030\007 \003("
  "\r\022\r\n\005Flags\030\010 \001(\014\022\017\n\007ExcSrlg\030\t \003(\r\0229\n\tUns"
  "uppTlv\030\017 \001(\0132&.service_layer.SLBgplsTopo"
  "FadUnsuppTlv\022\020\n\010ExcMinBw\030\016 \001(\014\022\023\n\013ExcMax"
  "Delay\030\r \001(\r\022\024\n\014ExcAnyRevAff\030\n \003(\r\022\024\n\014Inc"
  "AnyRevAff\030\013 \003(\r\022\024\n\014IncAllRevAff\030\014 \003(\r\"H\n"
  "\025SLBgplsTopoPrefixFAPM\022\020\n\010FlexAlgo\030\001 \001(\r"
  "\022\r\n\005Flags\030\002 \001(\014\022\016\n\006Metric\030\003 \001(\r\"^\n\027SLBgp"
  "lsTopoFadUnsuppTlv\0224\n\010Protocol\030\001 \001(\0162\".s"
  "ervice_layer.SLBgplsTopoProtocol\022\r\n\005Type"
  "s\030\002 \001(\014\")\n\030SLBgplsTopoExtAdminGroup\022\r\n\005G"
  "roup\030\001 \001(\r\"0\n\033SLBgplsTopoLinkMaxBandwidt"
  "h\022\021\n\tBandwidth\030\001 \001(\014\"4\n\037SLBgplsTopoLinkM"
  "axResvBandwidth\022\021\n\tBandwidth\030\001 \001(\014\"E\n\036SL"
  "BgplsTopoLinkUnresvBandwidth\022\020\n\010Priority"
  "\030\001 \001(\r\022\021\n\tBandwidth\030\002 \001(\014\"0\n\036SLBgplsTopo"
  "LinkTeDefaultMetric\022\016\n\006Metric\030\001 \001(\r\",\n\034S"
  "LBgplsTopoLinkProtecionType\022\014\n\004Mask\030\001 \001("
  "\r\",\n\034SLBgplsTopoLinkMplsProtoMask\022\014\n\004Mas"
  "k\030\001 \001(\014\"*\n\030SLBgplsTopoLinkIgpMetric\022\016\n\006M"
  "etric\030\001 \001(\014\"&\n\023SLBgplsTopoLinkSrlg\022\017\n\007Sr"
  "lgVal\030\001 \001(\r\"/\n\031SLBgplsTopoLinkOpaqueAttr"
  "\022\022\n\nOpaqueAttr\030\001 \001(\014\"#\n\023SLBgplsTopoLinkN"
  "ame\022\014\n\004Name\030\001 \001(\t\"\204\001\n\021SLBgplsTopoAdjSid\022"
  "\022\n\nLabelIndex\030\001 \001(\r\022<\n\014AdjSidFormat\030\002 \001("
  "\0162&.service_layer.SLBgplsTopoAdjSidForma"
  "t\022\r\n\005Flags\030\003 \001(\014\022\016\n\006Weight\030\004 \001(\r\"\277\001\n\024SLB"
  "gplsTopoLanAdjSid\0226\n\010Neighbor\030\001 \001(\0132$.se"
  "rvice_layer.SLBgpLsTopoNeighborId\022\022\n\nLab"
  "elIndex\030\002 \001(\r\022<\n\014AdjSidFormat\030\003 \001(\0162&.se"
  "rvice_layer.SLBgplsTopoAdjSidFormat\022\r\n\005F"
  "lags\030\004 \001(\014\022\016\n\006Weight\030\005 \001(\r\"\255\001\n\026SLBgplsTo"
  "poSrv6EndXSid\022\013\n\003Sid\030\001 \001(\014\022\021\n\tAlgorithm\030"
  "\002 \001(\r\022\r\n\005Flags\030\003 \001(\014\022\016\n\006Weight\030\004 \001(\r\022\030\n\020"
  "EndPointBehavior\030\005 \001(\r\022:\n\tSidStruct\030\006 \001("
  "\0132\'.service_layer.SLBgplsTopoSrv6SidStru"
  "ct\"g\n\025SLBgpLsTopoNeighborId\022\022\n\010Ipv4Addr\030"
  "\001 \001(\rH\000\022\022\n\010SystemId\030\002 \001(\014H\000\022\030\n\020IsNeighbo"
  "rIdIpv4\030\003 \001(\rB\014\n\nNeighborId\"\350\001\n\031SLBgplsT"
  "opoSrv6LanEndXSid\0226\n\010Neighbor\030\001 \001(\0132$.se"
  "rvice_layer.SLBgpLsTopoNeighborId\022\013\n\003Sid"
  "\030\002 \001(\014\022\021\n\tAlgorithm\030\003 \001(\r\022\r\n\005Flags\030\004 \001(\014"
  "\022\016\n\006Weight\030\005 \001(\r\022\030\n\020EndPointBehavior\030\006 \001"
  "(\r\022:\n\tSidStruct\030\007 \001(\0132\'.service_layer.SL"
  "BgplsTopoSrv6SidStruct\"7\n\027SLBgplsTopoUni"
  "LinkDelay\022\r\n\005Delay\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\014\""
  "H\n\035SLBgplsTopoMinMaxUniLinkDelay\022\013\n\003Min\030"
  "\001 \001(\r\022\013\n\003Max\030\002 \001(\r\022\r\n\005Flags\030\003 \001(\014\":\n\026SLB"
  "gplsTopoUniDelayVar\022\021\n\tVariation\030\001 \001(\r\022\r"
  "\n\005Flags\030\002 \001(\014\"5\n\026SLBgplsTopoUniLinkLoss\022"
  "\014\n\004Loss\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\014\"/\n\032SLBgplsT"
  "opoUniResBandwidth\022\021\n\tBandwidth\030\001 \001(\014\"1\n"
  "\034SLBgplsTopoUniAvailBandwidth\022\021\n\tBandwid"
  "th\030\001 \001(\014\"0\n\033SLBgplsTopoUniUtilBandwidth\022"
  "\021\n\tBandwidth\030\001 \001(\014\"*\n\031SLBgplsTopoPrefixI"
  "gpFlags\022\r\n\005Flags\030\001 \001(\014\"+\n\034SLBgplsTopoPre"
  "fixIgpRouteTag\022\013\n\003Tag\030\001 \001(\r\".\n\037SLBgplsTo"
  "poPrefixIgpExtRouteTag\022\013\n\003Tag\030\001 \001(\r\")\n\027S"
  "LBgplsTopoPrefixMetric\022\016\n\006Metric\030\001 \001(\r\"q"
  "\n\034SLBgplsTopoPrefixOspfFwdAddr\022\022\n\010Ipv4Ad"
  "dr\030\001 \001(\rH\000\022\022\n\010Ipv6Addr\030\002 \001(\014H\000\022\032\n\022IsOspf"
  "FwdAddrdIpv4\030\003 \001(\rB\r\n\013OspfFwdAddr\"1\n\033SLB"
  "gplsTopoPrefixOpaqueAttr\022\022\n\nOpaqueAttr\030\001"
  " \001(\014\"\220\001\n\024SLBgplsTopoPrefixSid\022\r\n\005Flags\030\001"
  " \001(\014\022\021\n\tAlgorithm\030\002 \001(\r\022\022\n\nLabelIndex\030\003 "
  "\001(\r\022B\n\017PrefixSidFormat\030\004 \001(\0162).service_l"
  "ayer.SLBgplsTopoPrefixSidFormat\"n\n\026SLBgp"
  "lsTopoPrefixRange\022\r\n\005Flags\030\001 \001(\014\022\021\n\tRang"
  "eSize\030\002 \001(\r\022\021\n\tAlgorithm\030\003 \001(\r\022\r\n\005Index\030"
  "\004 \001(\r\022\020\n\010SidFlags\030\005 \001(\014\"L\n\030SLBgplsTopoPr"
  "efixSrv6Loc\022\r\n\005Flags\030\001 \001(\014\022\021\n\tAlgorithm\030"
  "\002 \001(\r\022\016\n\006Metric\030\003 \001(\r\"+\n\032SLBgplsTopoPref"
  "ixAttrFlags\022\r\n\005Flags\030\001 \001(\014\"p\n\034SLBgplsTop"
  "oPrefixSrcRouterId\022\022\n\010Ipv4Addr\030\001 \001(\rH\000\022\022"
  "\n\010Ipv6Addr\030\002 \001(\014H\000\022\031\n\021IsSrcRouterIdIpv4\030"
  "\003 \001(\rB\r\n\013SrcRouterId\"\301\010\n\035SLBgplsTopoL2Bu"
  "ndleMemberAttr\022\022\n\nMemberDesc\030\001 \001(\r\022>\n\rEx"
  "tAdminGroup\030\003 \003(\0132\'.service_layer.SLBgpl"
  "sTopoExtAdminGroup\022@\n\014MaxBandwidth\030\002 \001(\013"
  "2*.service_layer.SLBgplsTopoLinkMaxBandw"
  "idth\022H\n\020MaxResvBandwidth\030\004 \001(\0132..service"
  "_layer.SLBgplsTopoLinkMaxResvBandwidth\022F"
  "\n\017UnresvBandwidth\030\005 \003(\0132-.service_layer."
  "SLBgplsTopoLinkUnresvBandwidth\022B\n\013TeDefM"
  "etric\030\006 \001(\0132-.service_layer.SLBgplsTopoL"
  "inkTeDefaultMetric\022C\n\016ProtectionType\030\007 \001"
  "(\0132+.service_layer.SLBgplsTopoLinkProtec"
  "ionType\0220\n\006AdjSid\030\010 \003(\0132 .service_layer."
  "SLBgplsTopoAdjSid\0226\n\tLanAdjSid\030\t \003(\0132#.s"
  "ervice_layer.SLBgplsTopoLanAdjSid\022<\n\014Uni"
  "LinkDelay\030\n \001(\0132&.service_layer.SLBgplsT"
  "opoUniLinkDelay\022E\n\017MinMaxLinkDelay\030\013 \001(\013"
  "2,.service_layer.SLBgplsTopoMinMaxUniLin"
  "kDelay\022@\n\021UniDelayVariation\030\014 \001(\0132%.serv"
  "ice_layer.SLBgplsTopoUniDelayVar\022:\n\013UniL"
  "inkLoss\030\r \001(\0132%.service_layer.SLBgplsTop"
  "oUniLinkLoss\022B\n\017UniResBandwidth\030\016 \001(\0132)."
  "service_layer.SLBgplsTopoUniResBandwidth"
  "\022F\n\021UniAvailBandwidth\030\017 \001(\0132+.service_la"
  "yer.SLBgplsTopoUniAvailBandwidth\022D\n\020UniU"
  "tilBandwidth\030\020 \001(\0132*.service_layer.SLBgp"
  "lsTopoUniUtilBandwidth\0220\n\004Asla\030\021 \003(\0132\".s"
  "ervice_layer.SLBgplsTopoAslaAttr\"\275\005\n\023SLB"
  "gplsTopoAslaAttr\022\014\n\004Sabm\030\001 \001(\014\022\r\n\005Udabm\030"
  "\002 \001(\014\022>\n\rExtAdminGroup\030\003 \003(\0132\'.service_l"
  "ayer.SLBgplsTopoExtAdminGroup\022B\n\013TeDefMe"
  "tric\030\004 \001(\0132-.service_layer.SLBgplsTopoLi"
  "nkTeDefaultMetric\0220\n\004Srlg\030\005 \001(\0132\".servic"
  "e_layer.SLBgplsTopoLinkSrlg\022<\n\014UniLinkDe"
  "lay\030\006 \001(\0132&.service_layer.SLBgplsTopoUni"
  "LinkDelay\022E\n\017MinMaxLinkDelay\030\007 \001(\0132,.ser"
  "vice_layer.SLBgplsTopoMinMaxUniLinkDelay"
  "\022@\n\021UniDelayVariation\030\010 \001(\0132%.service_la"
  "yer.SLBgplsTopoUniDelayVar\022:\n\013UniLinkLos"
  "s\030\t \001(\0132%.service_layer.SLBgplsTopoUniLi"
  "nkLoss\022B\n\017UniResBandwidth\030\n \001(\0132).servic"
  "e_layer.SLBgplsTopoUniResBandwidth\022F\n\021Un"
  "iAvailBandwidth\030\013 \001(\0132+.service_layer.SL"
  "BgplsTopoUniAvailBandwidth\022D\n\020UniUtilBan"
  "dwidth\030\014 \001(\0132*.service_layer.SLBgplsTopo"
  "UniUtilBandwidth\"c\n\021SlBgplsTopoSrBsid\022\022\n"
  "\010MplsBsid\030\001 \001(\rH\000\022\022\n\010Srv6Bsid\030\002 \001(\014H\000\022\030\n"
  "\020IsBindingSidMpls\030\003 \001(\rB\014\n\nBindingSid\"\225\001"
  "\n\027SLBgplsTopoSrBindingSid\022\021\n\tBsidFlags\030\001"
  " \001(\014\022.\n\004Bsid\030\002 \001(\0132 .service_layer.SlBgp"
  "lsTopoSrBsid\0227\n\rSpecifiedBsid\030\003 \001(\0132 .se"
  "rvice_layer.SlBgplsTopoSrBsid\"K\n\024SLBgpls"
  "TopoSrCpState\022\020\n\010Priority\030\001 \001(\r\022\r\n\005Flags"
  "\030\002 \001(\014\022\022\n\nPreference\030\003 \001(\r\"#\n\023SLBgplsTop"
  "oSrCpName\022\014\n\004Name\030\001 \001(\t\"\331\003\n\032SLBgplsTopoS"
  "rCpConstraints\022\r\n\005Flags\030\001 \001(\014\022\014\n\004Mtid\030\002 "
  "\001(\r\022\021\n\tAlgorithm\030\003 \001(\r\022A\n\010Affinity\030\005 \001(\013"
  "2/.service_layer.SLBgplsTopoSrAffinityCo"
  "nstraints\0229\n\004Srlg\030\006 \001(\0132+.service_layer."
  "SLBgplsTopoSrSrlgConstraints\022B\n\tBandwidt"
  "h\030\004 \001(\0132/.service_layer.SLBgplsTopoSrBan"
  "dwidthConstraint\022E\n\010Disjoint\030\007 \001(\01323.ser"
  "vice_layer.SLBgplsTopoSrDisjointGroupCon"
  "straint\022D\n\nBidirGroup\030\010 \001(\01320.service_la"
  "yer.SLBgplsTopoSrBidirGroupConstraint\022<\n"
  "\006Metric\030\t \003(\0132,.service_layer.SLBgplsTop"
  "oSrMetricConstraint\"\215\001\n\024SLBgplsTopoSrSeg"
  "List\022\r\n\005Flags\030\001 \001(\014\022\014\n\004Mtid\030\002 \001(\r\022\021\n\tAlg"
  "orithm\030\003 \001(\r\022\016\n\006Weight\030\004 \001(\r\0225\n\010Segments"
  "\030\005 \003(\0132#.service_layer.SLBgplsTopoSrSegm"
  "ent\"\367\002\n\030SLBgplsTopoSrSegmentDesc\022\021\n\tAlgo"
  "rithm\030\001 \001(\r\022\033\n\021Ipv4LocalNodeAddr\030\002 \001(\rH\000"
  "\022\033\n\021Ipv6LocalNodeAddr\030\003 \001(\014H\000\022\033\n\023IsLocal"
  "NodeAddrIpv4\030\004 \001(\r\022\034\n\022Ipv4RemoteNodeAddr"
  "\030\005 \001(\rH\001\022\034\n\022Ipv6RemoteNodeAddr\030\006 \001(\014H\001\022\034"
  "\n\024IsRemoteNodeAddrIpv4\030\007 \001(\r\022\037\n\027Ipv6Loca"
  "lNodeGlobalAddr\030\010 \001(\014\022 \n\030Ipv6RemoteNodeG"
  "lobalAddr\030\t \001(\014\022\027\n\017LocalNodeIntfId\030\n \001(\r"
  "\022\030\n\020RemoteNodeIntfId\030\013 \001(\rB\017\n\rLocalNodeA"
  "ddrB\020\n\016RemoteNodeAddr\"\343\002\n\024SLBgplsTopoSrS"
  "egment\0225\n\004Type\030\001 \001(\0162\'.service_layer.SLB"
  "gplsTopoSrSegmentType\022\r\n\005Flags\030\002 \001(\014\022\023\n\t"
  "MplsLabel\030\003 \001(\rH\000\022\021\n\007Srv6Sid\030\004 \001(\014H\000\022\021\n\t"
  "IsSidMpls\030\005 \001(\r\022<\n\013SegmentDesc\030\006 \001(\0132\'.s"
  "ervice_layer.SLBgplsTopoSrSegmentDesc\022I\n"
  "\021EndPointBehaviour\030\007 \001(\0132..service_layer"
  ".SLBgplsTopoSrv6EndPointBehavior\022:\n\tSidS"
  "truct\030\010 \001(\0132\'.service_layer.SLBgplsTopoS"
  "rv6SidStructB\005\n\003Sid\"c\n\026SLBgplsSrSegListM"
  "etric\022\014\n\004Type\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\014\022\016\n\006Ma"
  "rgin\030\003 \001(\r\022\r\n\005Bound\030\004 \001(\r\022\r\n\005Value\030\005 \001(\r"
  "\"^\n SLBgplsTopoSrAffinityConstraints\022\022\n\n"
  "ExclAnyEag\030\001 \003(\r\022\022\n\nInclAnyEag\030\002 \003(\r\022\022\n\n"
  "InclAllEag\030\003 \003(\r\"2\n\034SLBgplsTopoSrSrlgCon"
  "straints\022\022\n\nSrlgValues\030\001 \003(\r\"5\n SLBgplsT"
  "opoSrBandwidthConstraint\022\021\n\tBandwidth\030\001 "
  "\001(\014\"b\n$SLBgplsTopoSrDisjointGroupConstra"
  "int\022\024\n\014RequestFlags\030\001 \001(\014\022\023\n\013StatusFlags"
  "\030\002 \001(\014\022\017\n\007GroupId\030\003 \001(\r\"\232\002\n\031SLBgplsTopoS"
  "rv6BindingSid\022\r\n\005Flags\030\001 \001(\014\022.\n\004Bsid\030\002 \001"
  "(\0132 .service_layer.SlBgplsTopoSrBsid\0227\n\r"
  "SpecifiedBsid\030\003 \001(\0132 .service_layer.SlBg"
  "plsTopoSrBsid\022I\n\021EndPointBehaviour\030\004 \001(\013"
  "2..service_layer.SLBgplsTopoSrv6EndPoint"
  "Behavior\022:\n\tSidStruct\030\005 \001(\0132\'.service_la"
  "yer.SLBgplsTopoSrv6SidStruct\"\'\n\027SLBgplsT"
  "opoSrPolicyName\022\014\n\004Name\030\001 \001(\t\"C\n!SLBgpls"
  "TopoSrBidirGroupConstraint\022\r\n\005Flags\030\001 \001("
  "\014\022\017\n\007GroupId\030\002 \001(\r\"[\n\035SLBgplsTopoSrMetri"
  "cConstraint\022\014\n\004Type\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\014"
  "\022\016\n\006Margin\030\003 \001(\r\022\r\n\005Bound\030\004 \001(\r\"9\n$SLBgp"
  "lsTopoSrCpSegListBandwidthState\022\021\n\tBandw"
  "idth\030\001 \001(\014\"+\n\026SLBgplsTopoSrSegListId\022\021\n\t"
  "SegListId\030\001 \001(\r\"]\n\037SLBgplsTopoSrv6EndPoi"
  "ntBehavior\022\030\n\020EndPointBehavior\030\001 \001(\r\022\r\n\005"
  "Flags\030\002 \001(\014\022\021\n\tAlgorithm\030\003 \001(\r\"a\n\035SLBgpl"
  "sTopoSrv6BgpPeerNodeSid\022\r\n\005Flags\030\001 \001(\014\022\016"
  "\n\006Weight\030\002 \001(\r\022\016\n\006PeerAS\030\003 \001(\r\022\021\n\tPeerBg"
  "pId\030\004 \001(\r\"p\n\030SLBgplsTopoSrv6SidStruct\022\027\n"
  "\017LocatorBlockLen\030\001 \001(\r\022\026\n\016LocatorNodeLen"
  "\030\002 \001(\r\022\023\n\013FunctionLen\030\003 \001(\r\022\016\n\006ArgLen\030\004 "
  "\001(\r*\314\001\n\022SLBgplsTopoUpdType\022#\n\037SL_BGPLS_T"
  "OPO_UPD_TYPE_RESERVED\020\000\022 \n\034SL_BGPLS_TOPO"
  "_UPD_TYPE_ERROR\020\001\022\037\n\033SL_BGPLS_TOPO_UPD_T"
  "YPE_DATA\020\002\022\'\n#SL_BGPLS_TOPO_UPD_TYPE_STA"
  "RT_MARKER\020\003\022%\n!SL_BGPLS_TOPO_UPD_TYPE_EN"
  "D_MARKER\020\004*\204\001\n\024SLBgplsTopoOperation\022$\n S"
  "L_BGPLS_TOPO_OPERATION_RESERVED\020\000\022\"\n\036SL_"
  "BGPLS_TOPO_OPERATION_UPDATE\020\001\022\"\n\036SL_BGPL"
  "S_TOPO_OPERATION_DELETE\020\002*\255\002\n\023SLBgplsTop"
  "oNlriType\022$\n SL_BGPLS_TOPO_NLRI_TYPE_RES"
  "ERVED\020\000\022 \n\034SL_BGPLS_TOPO_NLRI_TYPE_NODE\020"
  "\001\022 \n\034SL_BGPLS_TOPO_NLRI_TYPE_LINK\020\002\022\'\n#S"
  "L_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX\020\003\022\'\n#"
  "SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX\020\004\0224\n"
  "0SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDI"
  "DATE_PATH\020\005\022$\n SL_BGPLS_TOPO_NLRI_TYPE_S"
  "RV6_SID\020\006*\361\002\n\023SLBgplsTopoProtocol\022#\n\037SL_"
  "BGPLS_TOPO_PROTOCOL_RESERVED\020\000\022\"\n\036SL_BGP"
  "LS_TOPO_PROTOCOL_ISIS_L1\020\001\022\"\n\036SL_BGPLS_T"
  "OPO_PROTOCOL_ISIS_L2\020\002\022!\n\035SL_BGPLS_TOPO_"
  "PROTOCOL_OSPFv2\020\003\022!\n\035SL_BGPLS_TOPO_PROTO"
  "COL_DIRECT\020\004\022!\n\035SL_BGPLS_TOPO_PROTOCOL_S"
  "TATIC\020\005\022!\n\035SL_BGPLS_TOPO_PROTOCOL_OSPFv3"
  "\020\006\022\036\n\032SL_BGPLS_TOPO_PROTOCOL_BGP\020\007\022\"\n\036SL"
  "_BGPLS_TOPO_PROTOCOL_RSVP_TE\020\010\022\035\n\031SL_BGP"
  "LS_TOPO_PROTOCOL_SR\020\t*\372\001\n\025SLBgplsTopoNod"
  "eIdType\022\'\n#SL_BGPLS_TOPO_NODE_ID_TYPE_RE"
  "SERVED\020\000\022#\n\037SL_BGPLS_TOPO_NODE_ID_TYPE_I"
  "SIS\020\001\022%\n!SL_BGPLS_TOPO_NODE_ID_TYPE_OSPF"
  "v2\020\002\022%\n!SL_BGPLS_TOPO_NODE_ID_TYPE_OSPFv"
  "3\020\003\022\"\n\036SL_BGPLS_TOPO_NODE_ID_TYPE_BGP\020\004\022"
  "!\n\035SL_BGPLS_TOPO_NODE_ID_TYPE_SR\020\005*\316\002\n\030S"
  "LBgplsTopoOspfRouteType\022*\n&SL_BGPLS_TOPO"
  "_OSPF_ROUTE_TYPE_RESERVED\020\000\022,\n(SL_BGPLS_"
  "TOPO_OSPF_ROUTE_TYPE_INTRA_AREA\020\001\022,\n(SL_"
  "BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA\020\002\022"
  "*\n&SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_"
  "1\020\003\022*\n&SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXT"
  "ERN_2\020\004\022(\n$SL_BGPLS_TOPO_OSPF_ROUTE_TYPE"
  "_NSSA_1\020\005\022(\n$SL_BGPLS_TOPO_OSPF_ROUTE_TY"
  "PE_NSSA_2\020\006*\263\003\n!SLBgplsTopoSrPolicyProto"
  "colOrigin\0224\n0SL_BGPLS_TOPO_SR_POLICY_PRO"
  "TOCOL_ORIGIN_RESERVED\020\000\0220\n,SL_BGPLS_TOPO"
  "_SR_POLICY_PROTOCOL_ORIGIN_PCEP\020\001\0229\n5SL_"
  "BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP"
  "_SR_POLICY\020\002\0222\n.SL_BGPLS_TOPO_SR_POLICY_"
  "PROTOCOL_ORIGIN_CONFIG\020\003\0228\n4SL_BGPLS_TOP"
  "O_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE"
  "\020\n\022A\n=SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_O"
  "RIGIN_BGP_SR_POLICY_VIA_PCE\020\024\022:\n6SL_BGPL"
  "S_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_"
  "VIA_PCE\020\036*\255\002\n\023SLBgplsTopoAttrType\022$\n SL_"
  "BGPLS_TOPO_ATTR_TYPE_RESERVED\020\000\022 \n\034SL_BG"
  "PLS_TOPO_ATTR_TYPE_NODE\020\001\022 \n\034SL_BGPLS_TO"
  "PO_ATTR_TYPE_LINK\020\002\022\'\n#SL_BGPLS_TOPO_ATT"
  "R_TYPE_IPV4_PREFIX\020\003\022\'\n#SL_BGPLS_TOPO_AT"
  "TR_TYPE_IPV6_PREFIX\020\004\0224\n0SL_BGPLS_TOPO_A"
  "TTR_TYPE_SR_POLICY_CANDIDATE_PATH\020\005\022$\n S"
  "L_BGPLS_TOPO_ATTR_TYPE_SRV6_SID\020\006*\224\001\n\027SL"
  "BgplsTopoAdjSidFormat\022)\n%SL_BGPLS_TOPO_A"
  "DJ_SID_FORMAT_RESERVED\020\000\022&\n\"SL_BGPLS_TOP"
  "O_ADJ_SID_FORMAT_LABEL\020\001\022&\n\"SL_BGPLS_TOP"
  "O_ADJ_SID_FORMAT_INDEX\020\002*\240\001\n\032SLBgplsTopo"
  "PrefixSidFormat\022,\n(SL_BGPLS_TOPO_PREFIX_"
  "SID_FORMAT_RESERVED\020\000\022)\n%SL_BGPLS_TOPO_P"
  "REFIX_SID_FORMAT_LABEL\020\001\022)\n%SL_BGPLS_TOP"
  "O_PREFIX_SID_FORMAT_INDEX\020\002*\250\005\n\030SLBgplsT"
  "opoSrSegmentType\022&\n\"SL_BGPLS_TOPO_SR_SEG"
  "_TYPE_RESERVED\020\000\022(\n$SL_BGPLS_TOPO_SR_SEG"
  "_TYPE_MPLS_LABEL\020\001\022)\n%SL_BGPLS_TOPO_SR_S"
  "EG_TYPE_SRV6_SID_V6\020\002\022-\n)SL_BGPLS_TOPO_S"
  "R_SEG_TYPE_MPLS_PFX_SID_V4\020\003\022-\n)SL_BGPLS"
  "_TOPO_SR_SEG_TYPE_MPLS_PFX_SID_V6\020\004\022>\n:S"
  "L_BGPLS_TOPO_SR_SEG_TYPE_MPLS_ADJ_SID_V4"
  "_NODE_ADDR_LOC_ID\020\005\022:\n6SL_BGPLS_TOPO_SR_"
  "SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR\020\006\022"
  "A\n=SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_ADJ_SI"
  "D_V6_LOC_REM_ADDR_AND_ID\020\007\022:\n6SL_BGPLS_T"
  "OPO_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_"
  "ADDR\020\010\0227\n3SL_BGPLS_TOPO_SR_SEG_TYPE_SRV6"
  "_END_SID_V6_NODE_ADDR\020\t\022A\n=SL_BGPLS_TOPO"
  "_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADD"
  "R_AND_ID\020\n\022:\n6SL_BGPLS_TOPO_SR_SEG_TYPE_"
  "SRV6_END_SID_V6_LOC_REM_ADDR\020\0132\177\n\027SLBgpl"
  "sTopoSubscription\022d\n\027SLBgplsTopoGetUpdSt"
  "ream\022#.service_layer.SLBgplsTopoGetUpdMs"
  "g\032 .service_layer.SLBgplsTopoUpdMsg(\0010\001B"
  "QZOgithub.com/Cisco-service-layer/servic"
  "e-layer-objmodel/grpc/protos;service_lay"
  "erb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fbgpls_5ftopology_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbgpls_5ftopology_2eproto = {
  false, false, 21210, descriptor_table_protodef_sl_5fbgpls_5ftopology_2eproto, "sl_bgpls_topology.proto", 
  &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once, nullptr, 0, 106,
  schemas, file_default_instances, TableStruct_sl_5fbgpls_5ftopology_2eproto::offsets,
  file_level_metadata_sl_5fbgpls_5ftopology_2eproto, file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto, file_level_service_descriptors_sl_5fbgpls_5ftopology_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter() {
  return &descriptor_table_sl_5fbgpls_5ftopology_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fbgpls_5ftopology_2eproto(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoErrorStatus_SLBgplsTopoErrno_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[0];
}
bool SLBgplsTopoErrorStatus_SLBgplsTopoErrno_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 1280:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1048576:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_SUCCESS;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_NOT_CONNECTED;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_EAGAIN;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_ENOMEM;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_EBUSY;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_EINVAL;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_UNSUPPORTED_VER;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_NOT_AVAILABLE;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_STREAM_NOT_SUPPORTED;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_ENOTSUP;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_SOME_ERR;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_TIMEOUT;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_NOTIF_TERM;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_AUTH_FAIL;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INIT_START_OFFSET;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INIT_STATE_CLEAR;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INIT_STATE_READY;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INIT_UNSUPPORTED_VER;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INIT_SERVER_NOT_INITIALIZED;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INIT_SERVER_MODE_CHANGE_FAILED;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SL_BGPLS_TOPO_INTERNAL_START_OFFSET;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SLBgplsTopoErrno_MIN;
constexpr SLBgplsTopoErrorStatus_SLBgplsTopoErrno SLBgplsTopoErrorStatus::SLBgplsTopoErrno_MAX;
constexpr int SLBgplsTopoErrorStatus::SLBgplsTopoErrno_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoUpdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[1];
}
bool SLBgplsTopoUpdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[2];
}
bool SLBgplsTopoOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoNlriType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[3];
}
bool SLBgplsTopoNlriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[4];
}
bool SLBgplsTopoProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoNodeIdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[5];
}
bool SLBgplsTopoNodeIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOspfRouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[6];
}
bool SLBgplsTopoOspfRouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSrPolicyProtocolOrigin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[7];
}
bool SLBgplsTopoSrPolicyProtocolOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoAttrType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[8];
}
bool SLBgplsTopoAttrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoAdjSidFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[9];
}
bool SLBgplsTopoAdjSidFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoPrefixSidFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[10];
}
bool SLBgplsTopoPrefixSidFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSrSegmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[11];
}
bool SLBgplsTopoSrSegmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLBgplsTopoGetUpdMsg::_Internal {
 public:
};

SLBgplsTopoGetUpdMsg::SLBgplsTopoGetUpdMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoGetUpdMsg)
}
SLBgplsTopoGetUpdMsg::SLBgplsTopoGetUpdMsg(const SLBgplsTopoGetUpdMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filter_(from.filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoGetUpdMsg)
}

inline void SLBgplsTopoGetUpdMsg::SharedCtor() {
}

SLBgplsTopoGetUpdMsg::~SLBgplsTopoGetUpdMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoGetUpdMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoGetUpdMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoGetUpdMsg::ArenaDtor(void* object) {
  SLBgplsTopoGetUpdMsg* _this = reinterpret_cast< SLBgplsTopoGetUpdMsg* >(object);
  (void)_this;
}
void SLBgplsTopoGetUpdMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoGetUpdMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoGetUpdMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoGetUpdMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoGetUpdMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoNlriFilter Filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoGetUpdMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoGetUpdMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoNlriFilter Filter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoGetUpdMsg)
  return target;
}

size_t SLBgplsTopoGetUpdMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoGetUpdMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoNlriFilter Filter = 1;
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoGetUpdMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoGetUpdMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoGetUpdMsg::GetClassData() const { return &_class_data_; }

void SLBgplsTopoGetUpdMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoGetUpdMsg *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoGetUpdMsg &>(from));
}


void SLBgplsTopoGetUpdMsg::MergeFrom(const SLBgplsTopoGetUpdMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoGetUpdMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoGetUpdMsg::CopyFrom(const SLBgplsTopoGetUpdMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoGetUpdMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoGetUpdMsg::IsInitialized() const {
  return true;
}

void SLBgplsTopoGetUpdMsg::InternalSwap(SLBgplsTopoGetUpdMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filter_.InternalSwap(&other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoGetUpdMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[0]);
}

// ===================================================================

class SLBgplsTopoNlriFilter::_Internal {
 public:
};

SLBgplsTopoNlriFilter::SLBgplsTopoNlriFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNlriFilter)
}
SLBgplsTopoNlriFilter::SLBgplsTopoNlriFilter(const SLBgplsTopoNlriFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&nlritype_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(nlritype_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNlriFilter)
}

inline void SLBgplsTopoNlriFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nlritype_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(nlritype_));
}

SLBgplsTopoNlriFilter::~SLBgplsTopoNlriFilter() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNlriFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNlriFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoNlriFilter::ArenaDtor(void* object) {
  SLBgplsTopoNlriFilter* _this = reinterpret_cast< SLBgplsTopoNlriFilter* >(object);
  (void)_this;
}
void SLBgplsTopoNlriFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNlriFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNlriFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNlriFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nlritype_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(nlritype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNlriFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoProtocol Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::service_layer::SLBgplsTopoProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNlriType NlriType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nlritype(static_cast<::service_layer::SLBgplsTopoNlriType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNlriFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNlriFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Identifier = 1;
  if (this->_internal_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protocol(), target);
  }

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  if (this->_internal_nlritype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nlritype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNlriFilter)
  return target;
}

size_t SLBgplsTopoNlriFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNlriFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Identifier = 1;
  if (this->_internal_identifier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  if (this->_internal_nlritype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nlritype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNlriFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNlriFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNlriFilter::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNlriFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNlriFilter *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNlriFilter &>(from));
}


void SLBgplsTopoNlriFilter::MergeFrom(const SLBgplsTopoNlriFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNlriFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_nlritype() != 0) {
    _internal_set_nlritype(from._internal_nlritype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNlriFilter::CopyFrom(const SLBgplsTopoNlriFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNlriFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNlriFilter::IsInitialized() const {
  return true;
}

void SLBgplsTopoNlriFilter::InternalSwap(SLBgplsTopoNlriFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNlriFilter, nlritype_)
      + sizeof(SLBgplsTopoNlriFilter::nlritype_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNlriFilter, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNlriFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[1]);
}

// ===================================================================

class SLBgplsTopoUpdMsg::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoErrorStatus& errstatus(const SLBgplsTopoUpdMsg* msg);
  static const ::service_layer::SLBgplsTopoUpd& data(const SLBgplsTopoUpdMsg* msg);
};

const ::service_layer::SLBgplsTopoErrorStatus&
SLBgplsTopoUpdMsg::_Internal::errstatus(const SLBgplsTopoUpdMsg* msg) {
  return *msg->Update_.errstatus_;
}
const ::service_layer::SLBgplsTopoUpd&
SLBgplsTopoUpdMsg::_Internal::data(const SLBgplsTopoUpdMsg* msg) {
  return *msg->Update_.data_;
}
void SLBgplsTopoUpdMsg::set_allocated_errstatus(::service_layer::SLBgplsTopoErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Update();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoErrorStatus>::GetOwningArena(errstatus);
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Update_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUpdMsg.ErrStatus)
}
void SLBgplsTopoUpdMsg::set_allocated_data(::service_layer::SLBgplsTopoUpd* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Update();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUpd>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    Update_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUpdMsg.Data)
}
SLBgplsTopoUpdMsg::SLBgplsTopoUpdMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUpdMsg)
}
SLBgplsTopoUpdMsg::SLBgplsTopoUpdMsg(const SLBgplsTopoUpdMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updtype_ = from.updtype_;
  clear_has_Update();
  switch (from.Update_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLBgplsTopoErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kData: {
      _internal_mutable_data()->::service_layer::SLBgplsTopoUpd::MergeFrom(from._internal_data());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUpdMsg)
}

inline void SLBgplsTopoUpdMsg::SharedCtor() {
updtype_ = 0;
clear_has_Update();
}

SLBgplsTopoUpdMsg::~SLBgplsTopoUpdMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUpdMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUpdMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Update()) {
    clear_Update();
  }
}

void SLBgplsTopoUpdMsg::ArenaDtor(void* object) {
  SLBgplsTopoUpdMsg* _this = reinterpret_cast< SLBgplsTopoUpdMsg* >(object);
  (void)_this;
}
void SLBgplsTopoUpdMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUpdMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUpdMsg::clear_Update() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoUpdMsg)
  switch (Update_case()) {
    case kErrStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Update_.errstatus_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Update_.data_;
      }
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void SLBgplsTopoUpdMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUpdMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updtype_ = 0;
  clear_Update();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUpdMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoUpdType UpdType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_updtype(static_cast<::service_layer::SLBgplsTopoUpdType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUpd Data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUpdMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUpdMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoUpdType UpdType = 1;
  if (this->_internal_updtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_updtype(), target);
  }

  // .service_layer.SLBgplsTopoErrorStatus ErrStatus = 2;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUpd Data = 3;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUpdMsg)
  return target;
}

size_t SLBgplsTopoUpdMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUpdMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoUpdType UpdType = 1;
  if (this->_internal_updtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_updtype());
  }

  switch (Update_case()) {
    // .service_layer.SLBgplsTopoErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Update_.errstatus_);
      break;
    }
    // .service_layer.SLBgplsTopoUpd Data = 3;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Update_.data_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUpdMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUpdMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUpdMsg::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUpdMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUpdMsg *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUpdMsg &>(from));
}


void SLBgplsTopoUpdMsg::MergeFrom(const SLBgplsTopoUpdMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUpdMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_updtype() != 0) {
    _internal_set_updtype(from._internal_updtype());
  }
  switch (from.Update_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLBgplsTopoErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kData: {
      _internal_mutable_data()->::service_layer::SLBgplsTopoUpd::MergeFrom(from._internal_data());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUpdMsg::CopyFrom(const SLBgplsTopoUpdMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUpdMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUpdMsg::IsInitialized() const {
  return true;
}

void SLBgplsTopoUpdMsg::InternalSwap(SLBgplsTopoUpdMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(updtype_, other->updtype_);
  swap(Update_, other->Update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUpdMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[2]);
}

// ===================================================================

class SLBgplsTopoErrorStatus::_Internal {
 public:
};

SLBgplsTopoErrorStatus::SLBgplsTopoErrorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoErrorStatus)
}
SLBgplsTopoErrorStatus::SLBgplsTopoErrorStatus(const SLBgplsTopoErrorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoErrorStatus)
}

inline void SLBgplsTopoErrorStatus::SharedCtor() {
status_ = 0;
}

SLBgplsTopoErrorStatus::~SLBgplsTopoErrorStatus() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoErrorStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoErrorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoErrorStatus::ArenaDtor(void* object) {
  SLBgplsTopoErrorStatus* _this = reinterpret_cast< SLBgplsTopoErrorStatus* >(object);
  (void)_this;
}
void SLBgplsTopoErrorStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoErrorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoErrorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoErrorStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoErrorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoErrorStatus.SLBgplsTopoErrno Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::service_layer::SLBgplsTopoErrorStatus_SLBgplsTopoErrno>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoErrorStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoErrorStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoErrorStatus.SLBgplsTopoErrno Status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoErrorStatus)
  return target;
}

size_t SLBgplsTopoErrorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoErrorStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoErrorStatus.SLBgplsTopoErrno Status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoErrorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoErrorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoErrorStatus::GetClassData() const { return &_class_data_; }

void SLBgplsTopoErrorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoErrorStatus *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoErrorStatus &>(from));
}


void SLBgplsTopoErrorStatus::MergeFrom(const SLBgplsTopoErrorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoErrorStatus::CopyFrom(const SLBgplsTopoErrorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoErrorStatus::IsInitialized() const {
  return true;
}

void SLBgplsTopoErrorStatus::InternalSwap(SLBgplsTopoErrorStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoErrorStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[3]);
}

// ===================================================================

class SLBgplsTopoUpd::_Internal {
 public:
};

SLBgplsTopoUpd::SLBgplsTopoUpd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUpd)
}
SLBgplsTopoUpd::SLBgplsTopoUpd(const SLBgplsTopoUpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUpd)
}

inline void SLBgplsTopoUpd::SharedCtor() {
}

SLBgplsTopoUpd::~SLBgplsTopoUpd() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUpd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUpd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoUpd::ArenaDtor(void* object) {
  SLBgplsTopoUpd* _this = reinterpret_cast< SLBgplsTopoUpd* >(object);
  (void)_this;
}
void SLBgplsTopoUpd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUpd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUpd::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUpd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUpd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUpd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUpd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUpd)
  return target;
}

size_t SLBgplsTopoUpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUpd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUpd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUpd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUpd::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUpd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUpd *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUpd &>(from));
}


void SLBgplsTopoUpd::MergeFrom(const SLBgplsTopoUpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUpd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUpd::CopyFrom(const SLBgplsTopoUpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUpd::IsInitialized() const {
  return true;
}

void SLBgplsTopoUpd::InternalSwap(SLBgplsTopoUpd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUpd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[4]);
}

// ===================================================================

class SLBgplsTopoEntry::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNlri& nlri(const SLBgplsTopoEntry* msg);
  static const ::service_layer::SLBgplsTopoAttr& attr(const SLBgplsTopoEntry* msg);
};

const ::service_layer::SLBgplsTopoNlri&
SLBgplsTopoEntry::_Internal::nlri(const SLBgplsTopoEntry* msg) {
  return *msg->nlri_;
}
const ::service_layer::SLBgplsTopoAttr&
SLBgplsTopoEntry::_Internal::attr(const SLBgplsTopoEntry* msg) {
  return *msg->attr_;
}
SLBgplsTopoEntry::SLBgplsTopoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoEntry)
}
SLBgplsTopoEntry::SLBgplsTopoEntry(const SLBgplsTopoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nlri()) {
    nlri_ = new ::service_layer::SLBgplsTopoNlri(*from.nlri_);
  } else {
    nlri_ = nullptr;
  }
  if (from._internal_has_attr()) {
    attr_ = new ::service_layer::SLBgplsTopoAttr(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoEntry)
}

inline void SLBgplsTopoEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nlri_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&nlri_)) + sizeof(operation_));
}

SLBgplsTopoEntry::~SLBgplsTopoEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nlri_;
  if (this != internal_default_instance()) delete attr_;
}

void SLBgplsTopoEntry::ArenaDtor(void* object) {
  SLBgplsTopoEntry* _this = reinterpret_cast< SLBgplsTopoEntry* >(object);
  (void)_this;
}
void SLBgplsTopoEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoOperation Operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::service_layer::SLBgplsTopoOperation>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNlri Nlri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nlri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAttr Attr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoOperation Operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .service_layer.SLBgplsTopoNlri Nlri = 2;
  if (this->_internal_has_nlri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nlri(this), target, stream);
  }

  // .service_layer.SLBgplsTopoAttr Attr = 3;
  if (this->_internal_has_attr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoEntry)
  return target;
}

size_t SLBgplsTopoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNlri Nlri = 2;
  if (this->_internal_has_nlri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nlri_);
  }

  // .service_layer.SLBgplsTopoAttr Attr = 3;
  if (this->_internal_has_attr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  // .service_layer.SLBgplsTopoOperation Operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoEntry::GetClassData() const { return &_class_data_; }

void SLBgplsTopoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoEntry *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoEntry &>(from));
}


void SLBgplsTopoEntry::MergeFrom(const SLBgplsTopoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nlri()) {
    _internal_mutable_nlri()->::service_layer::SLBgplsTopoNlri::MergeFrom(from._internal_nlri());
  }
  if (from._internal_has_attr()) {
    _internal_mutable_attr()->::service_layer::SLBgplsTopoAttr::MergeFrom(from._internal_attr());
  }
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoEntry::CopyFrom(const SLBgplsTopoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoEntry::IsInitialized() const {
  return true;
}

void SLBgplsTopoEntry::InternalSwap(SLBgplsTopoEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoEntry, operation_)
      + sizeof(SLBgplsTopoEntry::operation_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoEntry, nlri_)>(
          reinterpret_cast<char*>(&nlri_),
          reinterpret_cast<char*>(&other->nlri_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[5]);
}

// ===================================================================

class SLBgplsTopoNlri::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNode& node(const SLBgplsTopoNlri* msg);
  static const ::service_layer::SLBgplsTopoLink& link(const SLBgplsTopoNlri* msg);
  static const ::service_layer::SLBgplsTopoPrefix& prefix(const SLBgplsTopoNlri* msg);
  static const ::service_layer::SLBgplsTopoSrv6Sid& srv6sid(const SLBgplsTopoNlri* msg);
  static const ::service_layer::SLBgplsTopoSrPolicy& srpolicy(const SLBgplsTopoNlri* msg);
};

const ::service_layer::SLBgplsTopoNode&
SLBgplsTopoNlri::_Internal::node(const SLBgplsTopoNlri* msg) {
  return *msg->Nlri_.node_;
}
const ::service_layer::SLBgplsTopoLink&
SLBgplsTopoNlri::_Internal::link(const SLBgplsTopoNlri* msg) {
  return *msg->Nlri_.link_;
}
const ::service_layer::SLBgplsTopoPrefix&
SLBgplsTopoNlri::_Internal::prefix(const SLBgplsTopoNlri* msg) {
  return *msg->Nlri_.prefix_;
}
const ::service_layer::SLBgplsTopoSrv6Sid&
SLBgplsTopoNlri::_Internal::srv6sid(const SLBgplsTopoNlri* msg) {
  return *msg->Nlri_.srv6sid_;
}
const ::service_layer::SLBgplsTopoSrPolicy&
SLBgplsTopoNlri::_Internal::srpolicy(const SLBgplsTopoNlri* msg) {
  return *msg->Nlri_.srpolicy_;
}
void SLBgplsTopoNlri::set_allocated_node(::service_layer::SLBgplsTopoNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Nlri();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    Nlri_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNlri.Node)
}
void SLBgplsTopoNlri::set_allocated_link(::service_layer::SLBgplsTopoLink* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Nlri();
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLink>::GetOwningArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    set_has_link();
    Nlri_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNlri.Link)
}
void SLBgplsTopoNlri::set_allocated_prefix(::service_layer::SLBgplsTopoPrefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Nlri();
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefix>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    set_has_prefix();
    Nlri_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNlri.Prefix)
}
void SLBgplsTopoNlri::set_allocated_srv6sid(::service_layer::SLBgplsTopoSrv6Sid* srv6sid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Nlri();
  if (srv6sid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6Sid>::GetOwningArena(srv6sid);
    if (message_arena != submessage_arena) {
      srv6sid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6sid, submessage_arena);
    }
    set_has_srv6sid();
    Nlri_.srv6sid_ = srv6sid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNlri.Srv6Sid)
}
void SLBgplsTopoNlri::set_allocated_srpolicy(::service_layer::SLBgplsTopoSrPolicy* srpolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Nlri();
  if (srpolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicy>::GetOwningArena(srpolicy);
    if (message_arena != submessage_arena) {
      srpolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicy, submessage_arena);
    }
    set_has_srpolicy();
    Nlri_.srpolicy_ = srpolicy;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNlri.SrPolicy)
}
SLBgplsTopoNlri::SLBgplsTopoNlri(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNlri)
}
SLBgplsTopoNlri::SLBgplsTopoNlri(const SLBgplsTopoNlri& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&nlritype_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(nlritype_));
  clear_has_Nlri();
  switch (from.Nlri_case()) {
    case kNode: {
      _internal_mutable_node()->::service_layer::SLBgplsTopoNode::MergeFrom(from._internal_node());
      break;
    }
    case kLink: {
      _internal_mutable_link()->::service_layer::SLBgplsTopoLink::MergeFrom(from._internal_link());
      break;
    }
    case kPrefix: {
      _internal_mutable_prefix()->::service_layer::SLBgplsTopoPrefix::MergeFrom(from._internal_prefix());
      break;
    }
    case kSrv6Sid: {
      _internal_mutable_srv6sid()->::service_layer::SLBgplsTopoSrv6Sid::MergeFrom(from._internal_srv6sid());
      break;
    }
    case kSrPolicy: {
      _internal_mutable_srpolicy()->::service_layer::SLBgplsTopoSrPolicy::MergeFrom(from._internal_srpolicy());
      break;
    }
    case NLRI_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNlri)
}

inline void SLBgplsTopoNlri::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nlritype_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(nlritype_));
clear_has_Nlri();
}

SLBgplsTopoNlri::~SLBgplsTopoNlri() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNlri)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNlri::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Nlri()) {
    clear_Nlri();
  }
}

void SLBgplsTopoNlri::ArenaDtor(void* object) {
  SLBgplsTopoNlri* _this = reinterpret_cast< SLBgplsTopoNlri* >(object);
  (void)_this;
}
void SLBgplsTopoNlri::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNlri::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNlri::clear_Nlri() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoNlri)
  switch (Nlri_case()) {
    case kNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete Nlri_.node_;
      }
      break;
    }
    case kLink: {
      if (GetArenaForAllocation() == nullptr) {
        delete Nlri_.link_;
      }
      break;
    }
    case kPrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete Nlri_.prefix_;
      }
      break;
    }
    case kSrv6Sid: {
      if (GetArenaForAllocation() == nullptr) {
        delete Nlri_.srv6sid_;
      }
      break;
    }
    case kSrPolicy: {
      if (GetArenaForAllocation() == nullptr) {
        delete Nlri_.srpolicy_;
      }
      break;
    }
    case NLRI_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NLRI_NOT_SET;
}


void SLBgplsTopoNlri::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNlri)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nlritype_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(nlritype_));
  clear_Nlri();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNlri::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoProtocol Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::service_layer::SLBgplsTopoProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNlriType NlriType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nlritype(static_cast<::service_layer::SLBgplsTopoNlriType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNode Node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLink Link = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefix Prefix = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6Sid Srv6Sid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_srv6sid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrPolicy SrPolicy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_srpolicy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNlri::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNlri)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Identifier = 1;
  if (this->_internal_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protocol(), target);
  }

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  if (this->_internal_nlritype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nlritype(), target);
  }

  // .service_layer.SLBgplsTopoNode Node = 4;
  if (_internal_has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::node(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLink Link = 5;
  if (_internal_has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::link(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefix Prefix = 6;
  if (_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::prefix(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6Sid Srv6Sid = 7;
  if (_internal_has_srv6sid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::srv6sid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrPolicy SrPolicy = 8;
  if (_internal_has_srpolicy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::srpolicy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNlri)
  return target;
}

size_t SLBgplsTopoNlri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNlri)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Identifier = 1;
  if (this->_internal_identifier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  if (this->_internal_nlritype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nlritype());
  }

  switch (Nlri_case()) {
    // .service_layer.SLBgplsTopoNode Node = 4;
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Nlri_.node_);
      break;
    }
    // .service_layer.SLBgplsTopoLink Link = 5;
    case kLink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Nlri_.link_);
      break;
    }
    // .service_layer.SLBgplsTopoPrefix Prefix = 6;
    case kPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Nlri_.prefix_);
      break;
    }
    // .service_layer.SLBgplsTopoSrv6Sid Srv6Sid = 7;
    case kSrv6Sid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Nlri_.srv6sid_);
      break;
    }
    // .service_layer.SLBgplsTopoSrPolicy SrPolicy = 8;
    case kSrPolicy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Nlri_.srpolicy_);
      break;
    }
    case NLRI_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNlri::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNlri::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNlri::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNlri::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNlri *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNlri &>(from));
}


void SLBgplsTopoNlri::MergeFrom(const SLBgplsTopoNlri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNlri)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_nlritype() != 0) {
    _internal_set_nlritype(from._internal_nlritype());
  }
  switch (from.Nlri_case()) {
    case kNode: {
      _internal_mutable_node()->::service_layer::SLBgplsTopoNode::MergeFrom(from._internal_node());
      break;
    }
    case kLink: {
      _internal_mutable_link()->::service_layer::SLBgplsTopoLink::MergeFrom(from._internal_link());
      break;
    }
    case kPrefix: {
      _internal_mutable_prefix()->::service_layer::SLBgplsTopoPrefix::MergeFrom(from._internal_prefix());
      break;
    }
    case kSrv6Sid: {
      _internal_mutable_srv6sid()->::service_layer::SLBgplsTopoSrv6Sid::MergeFrom(from._internal_srv6sid());
      break;
    }
    case kSrPolicy: {
      _internal_mutable_srpolicy()->::service_layer::SLBgplsTopoSrPolicy::MergeFrom(from._internal_srpolicy());
      break;
    }
    case NLRI_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNlri::CopyFrom(const SLBgplsTopoNlri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNlri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNlri::IsInitialized() const {
  return true;
}

void SLBgplsTopoNlri::InternalSwap(SLBgplsTopoNlri* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNlri, nlritype_)
      + sizeof(SLBgplsTopoNlri::nlritype_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNlri, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
  swap(Nlri_, other->Nlri_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNlri::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[6]);
}

// ===================================================================

class SLBgplsTopoNode::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeDescr& nodedescr(const SLBgplsTopoNode* msg);
};

const ::service_layer::SLBgplsTopoNodeDescr&
SLBgplsTopoNode::_Internal::nodedescr(const SLBgplsTopoNode* msg) {
  return *msg->nodedescr_;
}
SLBgplsTopoNode::SLBgplsTopoNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNode)
}
SLBgplsTopoNode::SLBgplsTopoNode(const SLBgplsTopoNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodedescr()) {
    nodedescr_ = new ::service_layer::SLBgplsTopoNodeDescr(*from.nodedescr_);
  } else {
    nodedescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNode)
}

inline void SLBgplsTopoNode::SharedCtor() {
nodedescr_ = nullptr;
}

SLBgplsTopoNode::~SLBgplsTopoNode() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodedescr_;
}

void SLBgplsTopoNode::ArenaDtor(void* object) {
  SLBgplsTopoNode* _this = reinterpret_cast< SLBgplsTopoNode* >(object);
  (void)_this;
}
void SLBgplsTopoNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNode::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodedescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNode)
  return target;
}

size_t SLBgplsTopoNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodedescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNode::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNode *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNode &>(from));
}


void SLBgplsTopoNode::MergeFrom(const SLBgplsTopoNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodedescr()) {
    _internal_mutable_nodedescr()->::service_layer::SLBgplsTopoNodeDescr::MergeFrom(from._internal_nodedescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNode::CopyFrom(const SLBgplsTopoNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNode::IsInitialized() const {
  return true;
}

void SLBgplsTopoNode::InternalSwap(SLBgplsTopoNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nodedescr_, other->nodedescr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[7]);
}

// ===================================================================

class SLBgplsTopoLink::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeDescr& localnodedescr(const SLBgplsTopoLink* msg);
  static const ::service_layer::SLBgplsTopoNodeDescr& remotenodedescr(const SLBgplsTopoLink* msg);
  static const ::service_layer::SLBgplsTopoLinkDescr& linkdescr(const SLBgplsTopoLink* msg);
};

const ::service_layer::SLBgplsTopoNodeDescr&
SLBgplsTopoLink::_Internal::localnodedescr(const SLBgplsTopoLink* msg) {
  return *msg->localnodedescr_;
}
const ::service_layer::SLBgplsTopoNodeDescr&
SLBgplsTopoLink::_Internal::remotenodedescr(const SLBgplsTopoLink* msg) {
  return *msg->remotenodedescr_;
}
const ::service_layer::SLBgplsTopoLinkDescr&
SLBgplsTopoLink::_Internal::linkdescr(const SLBgplsTopoLink* msg) {
  return *msg->linkdescr_;
}
SLBgplsTopoLink::SLBgplsTopoLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLink)
}
SLBgplsTopoLink::SLBgplsTopoLink(const SLBgplsTopoLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_localnodedescr()) {
    localnodedescr_ = new ::service_layer::SLBgplsTopoNodeDescr(*from.localnodedescr_);
  } else {
    localnodedescr_ = nullptr;
  }
  if (from._internal_has_remotenodedescr()) {
    remotenodedescr_ = new ::service_layer::SLBgplsTopoNodeDescr(*from.remotenodedescr_);
  } else {
    remotenodedescr_ = nullptr;
  }
  if (from._internal_has_linkdescr()) {
    linkdescr_ = new ::service_layer::SLBgplsTopoLinkDescr(*from.linkdescr_);
  } else {
    linkdescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLink)
}

inline void SLBgplsTopoLink::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&localnodedescr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linkdescr_) -
    reinterpret_cast<char*>(&localnodedescr_)) + sizeof(linkdescr_));
}

SLBgplsTopoLink::~SLBgplsTopoLink() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLink)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete localnodedescr_;
  if (this != internal_default_instance()) delete remotenodedescr_;
  if (this != internal_default_instance()) delete linkdescr_;
}

void SLBgplsTopoLink::ArenaDtor(void* object) {
  SLBgplsTopoLink* _this = reinterpret_cast< SLBgplsTopoLink* >(object);
  (void)_this;
}
void SLBgplsTopoLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLink::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && localnodedescr_ != nullptr) {
    delete localnodedescr_;
  }
  localnodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && remotenodedescr_ != nullptr) {
    delete remotenodedescr_;
  }
  remotenodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linkdescr_ != nullptr) {
    delete linkdescr_;
  }
  linkdescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNodeDescr LocalNodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localnodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeDescr RemoteNodeDescr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remotenodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkdescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr LocalNodeDescr = 1;
  if (this->_internal_has_localnodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::localnodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeDescr RemoteNodeDescr = 2;
  if (this->_internal_has_remotenodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remotenodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
  if (this->_internal_has_linkdescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linkdescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLink)
  return target;
}

size_t SLBgplsTopoLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr LocalNodeDescr = 1;
  if (this->_internal_has_localnodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localnodedescr_);
  }

  // .service_layer.SLBgplsTopoNodeDescr RemoteNodeDescr = 2;
  if (this->_internal_has_remotenodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remotenodedescr_);
  }

  // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
  if (this->_internal_has_linkdescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linkdescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLink::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLink *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLink &>(from));
}


void SLBgplsTopoLink::MergeFrom(const SLBgplsTopoLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLink)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_localnodedescr()) {
    _internal_mutable_localnodedescr()->::service_layer::SLBgplsTopoNodeDescr::MergeFrom(from._internal_localnodedescr());
  }
  if (from._internal_has_remotenodedescr()) {
    _internal_mutable_remotenodedescr()->::service_layer::SLBgplsTopoNodeDescr::MergeFrom(from._internal_remotenodedescr());
  }
  if (from._internal_has_linkdescr()) {
    _internal_mutable_linkdescr()->::service_layer::SLBgplsTopoLinkDescr::MergeFrom(from._internal_linkdescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLink::CopyFrom(const SLBgplsTopoLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLink::IsInitialized() const {
  return true;
}

void SLBgplsTopoLink::InternalSwap(SLBgplsTopoLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLink, linkdescr_)
      + sizeof(SLBgplsTopoLink::linkdescr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLink, localnodedescr_)>(
          reinterpret_cast<char*>(&localnodedescr_),
          reinterpret_cast<char*>(&other->localnodedescr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLink::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[8]);
}

// ===================================================================

class SLBgplsTopoPrefix::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeDescr& nodedescr(const SLBgplsTopoPrefix* msg);
  static const ::service_layer::SLBgplsTopoPrefixDescr& prefixdescr(const SLBgplsTopoPrefix* msg);
};

const ::service_layer::SLBgplsTopoNodeDescr&
SLBgplsTopoPrefix::_Internal::nodedescr(const SLBgplsTopoPrefix* msg) {
  return *msg->nodedescr_;
}
const ::service_layer::SLBgplsTopoPrefixDescr&
SLBgplsTopoPrefix::_Internal::prefixdescr(const SLBgplsTopoPrefix* msg) {
  return *msg->prefixdescr_;
}
SLBgplsTopoPrefix::SLBgplsTopoPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefix)
}
SLBgplsTopoPrefix::SLBgplsTopoPrefix(const SLBgplsTopoPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodedescr()) {
    nodedescr_ = new ::service_layer::SLBgplsTopoNodeDescr(*from.nodedescr_);
  } else {
    nodedescr_ = nullptr;
  }
  if (from._internal_has_prefixdescr()) {
    prefixdescr_ = new ::service_layer::SLBgplsTopoPrefixDescr(*from.prefixdescr_);
  } else {
    prefixdescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefix)
}

inline void SLBgplsTopoPrefix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodedescr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixdescr_) -
    reinterpret_cast<char*>(&nodedescr_)) + sizeof(prefixdescr_));
}

SLBgplsTopoPrefix::~SLBgplsTopoPrefix() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodedescr_;
  if (this != internal_default_instance()) delete prefixdescr_;
}

void SLBgplsTopoPrefix::ArenaDtor(void* object) {
  SLBgplsTopoPrefix* _this = reinterpret_cast< SLBgplsTopoPrefix* >(object);
  (void)_this;
}
void SLBgplsTopoPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && prefixdescr_ != nullptr) {
    delete prefixdescr_;
  }
  prefixdescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefixdescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
  if (this->_internal_has_prefixdescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefixdescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefix)
  return target;
}

size_t SLBgplsTopoPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodedescr_);
  }

  // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
  if (this->_internal_has_prefixdescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefixdescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefix::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefix *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefix &>(from));
}


void SLBgplsTopoPrefix::MergeFrom(const SLBgplsTopoPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodedescr()) {
    _internal_mutable_nodedescr()->::service_layer::SLBgplsTopoNodeDescr::MergeFrom(from._internal_nodedescr());
  }
  if (from._internal_has_prefixdescr()) {
    _internal_mutable_prefixdescr()->::service_layer::SLBgplsTopoPrefixDescr::MergeFrom(from._internal_prefixdescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefix::CopyFrom(const SLBgplsTopoPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefix::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefix::InternalSwap(SLBgplsTopoPrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefix, prefixdescr_)
      + sizeof(SLBgplsTopoPrefix::prefixdescr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefix, nodedescr_)>(
          reinterpret_cast<char*>(&nodedescr_),
          reinterpret_cast<char*>(&other->nodedescr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[9]);
}

// ===================================================================

class SLBgplsTopoSrv6Sid::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeDescr& nodedescr(const SLBgplsTopoSrv6Sid* msg);
  static const ::service_layer::SLBgplsTopoSrv6SidDescr& srv6siddescr(const SLBgplsTopoSrv6Sid* msg);
};

const ::service_layer::SLBgplsTopoNodeDescr&
SLBgplsTopoSrv6Sid::_Internal::nodedescr(const SLBgplsTopoSrv6Sid* msg) {
  return *msg->nodedescr_;
}
const ::service_layer::SLBgplsTopoSrv6SidDescr&
SLBgplsTopoSrv6Sid::_Internal::srv6siddescr(const SLBgplsTopoSrv6Sid* msg) {
  return *msg->srv6siddescr_;
}
SLBgplsTopoSrv6Sid::SLBgplsTopoSrv6Sid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6Sid)
}
SLBgplsTopoSrv6Sid::SLBgplsTopoSrv6Sid(const SLBgplsTopoSrv6Sid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodedescr()) {
    nodedescr_ = new ::service_layer::SLBgplsTopoNodeDescr(*from.nodedescr_);
  } else {
    nodedescr_ = nullptr;
  }
  if (from._internal_has_srv6siddescr()) {
    srv6siddescr_ = new ::service_layer::SLBgplsTopoSrv6SidDescr(*from.srv6siddescr_);
  } else {
    srv6siddescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6Sid)
}

inline void SLBgplsTopoSrv6Sid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodedescr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srv6siddescr_) -
    reinterpret_cast<char*>(&nodedescr_)) + sizeof(srv6siddescr_));
}

SLBgplsTopoSrv6Sid::~SLBgplsTopoSrv6Sid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6Sid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6Sid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodedescr_;
  if (this != internal_default_instance()) delete srv6siddescr_;
}

void SLBgplsTopoSrv6Sid::ArenaDtor(void* object) {
  SLBgplsTopoSrv6Sid* _this = reinterpret_cast< SLBgplsTopoSrv6Sid* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6Sid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6Sid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6Sid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6Sid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srv6siddescr_ != nullptr) {
    delete srv6siddescr_;
  }
  srv6siddescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6Sid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidDescr Srv6SidDescr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_srv6siddescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6Sid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6Sid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6SidDescr Srv6SidDescr = 2;
  if (this->_internal_has_srv6siddescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::srv6siddescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6Sid)
  return target;
}

size_t SLBgplsTopoSrv6Sid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6Sid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodedescr_);
  }

  // .service_layer.SLBgplsTopoSrv6SidDescr Srv6SidDescr = 2;
  if (this->_internal_has_srv6siddescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srv6siddescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6Sid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6Sid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6Sid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6Sid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6Sid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6Sid &>(from));
}


void SLBgplsTopoSrv6Sid::MergeFrom(const SLBgplsTopoSrv6Sid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6Sid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodedescr()) {
    _internal_mutable_nodedescr()->::service_layer::SLBgplsTopoNodeDescr::MergeFrom(from._internal_nodedescr());
  }
  if (from._internal_has_srv6siddescr()) {
    _internal_mutable_srv6siddescr()->::service_layer::SLBgplsTopoSrv6SidDescr::MergeFrom(from._internal_srv6siddescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6Sid::CopyFrom(const SLBgplsTopoSrv6Sid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6Sid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6Sid::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6Sid::InternalSwap(SLBgplsTopoSrv6Sid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6Sid, srv6siddescr_)
      + sizeof(SLBgplsTopoSrv6Sid::srv6siddescr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6Sid, nodedescr_)>(
          reinterpret_cast<char*>(&nodedescr_),
          reinterpret_cast<char*>(&other->nodedescr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6Sid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[10]);
}

// ===================================================================

class SLBgplsTopoSrPolicy::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeDescr& nodedescr(const SLBgplsTopoSrPolicy* msg);
  static const ::service_layer::SLBgplsTopoSrPolicyDescr& srpolicydescr(const SLBgplsTopoSrPolicy* msg);
};

const ::service_layer::SLBgplsTopoNodeDescr&
SLBgplsTopoSrPolicy::_Internal::nodedescr(const SLBgplsTopoSrPolicy* msg) {
  return *msg->nodedescr_;
}
const ::service_layer::SLBgplsTopoSrPolicyDescr&
SLBgplsTopoSrPolicy::_Internal::srpolicydescr(const SLBgplsTopoSrPolicy* msg) {
  return *msg->srpolicydescr_;
}
SLBgplsTopoSrPolicy::SLBgplsTopoSrPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrPolicy)
}
SLBgplsTopoSrPolicy::SLBgplsTopoSrPolicy(const SLBgplsTopoSrPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodedescr()) {
    nodedescr_ = new ::service_layer::SLBgplsTopoNodeDescr(*from.nodedescr_);
  } else {
    nodedescr_ = nullptr;
  }
  if (from._internal_has_srpolicydescr()) {
    srpolicydescr_ = new ::service_layer::SLBgplsTopoSrPolicyDescr(*from.srpolicydescr_);
  } else {
    srpolicydescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrPolicy)
}

inline void SLBgplsTopoSrPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodedescr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srpolicydescr_) -
    reinterpret_cast<char*>(&nodedescr_)) + sizeof(srpolicydescr_));
}

SLBgplsTopoSrPolicy::~SLBgplsTopoSrPolicy() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrPolicy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodedescr_;
  if (this != internal_default_instance()) delete srpolicydescr_;
}

void SLBgplsTopoSrPolicy::ArenaDtor(void* object) {
  SLBgplsTopoSrPolicy* _this = reinterpret_cast< SLBgplsTopoSrPolicy* >(object);
  (void)_this;
}
void SLBgplsTopoSrPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srpolicydescr_ != nullptr) {
    delete srpolicydescr_;
  }
  srpolicydescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrPolicyDescr SrPolicyDescr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_srpolicydescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrPolicyDescr SrPolicyDescr = 2;
  if (this->_internal_has_srpolicydescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::srpolicydescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrPolicy)
  return target;
}

size_t SLBgplsTopoSrPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeDescr NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodedescr_);
  }

  // .service_layer.SLBgplsTopoSrPolicyDescr SrPolicyDescr = 2;
  if (this->_internal_has_srpolicydescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srpolicydescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrPolicy::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrPolicy *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrPolicy &>(from));
}


void SLBgplsTopoSrPolicy::MergeFrom(const SLBgplsTopoSrPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodedescr()) {
    _internal_mutable_nodedescr()->::service_layer::SLBgplsTopoNodeDescr::MergeFrom(from._internal_nodedescr());
  }
  if (from._internal_has_srpolicydescr()) {
    _internal_mutable_srpolicydescr()->::service_layer::SLBgplsTopoSrPolicyDescr::MergeFrom(from._internal_srpolicydescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrPolicy::CopyFrom(const SLBgplsTopoSrPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrPolicy::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrPolicy::InternalSwap(SLBgplsTopoSrPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicy, srpolicydescr_)
      + sizeof(SLBgplsTopoSrPolicy::srpolicydescr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicy, nodedescr_)>(
          reinterpret_cast<char*>(&nodedescr_),
          reinterpret_cast<char*>(&other->nodedescr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrPolicy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[11]);
}

// ===================================================================

class SLBgplsTopoNodeDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoOspfNodeId& ospfnodeid(const SLBgplsTopoNodeDescr* msg);
  static const ::service_layer::SLBgplsTopoOspfv3NodeId& ospfv3nodeid(const SLBgplsTopoNodeDescr* msg);
  static const ::service_layer::SLBgplsTopoIsisNodeId& isisnodeid(const SLBgplsTopoNodeDescr* msg);
  static const ::service_layer::SLBgplsTopoBgpNodeId& bgpnodeid(const SLBgplsTopoNodeDescr* msg);
  static const ::service_layer::SLBgplsTopoSrPolicyNodeId& srpolicynodeid(const SLBgplsTopoNodeDescr* msg);
};

const ::service_layer::SLBgplsTopoOspfNodeId&
SLBgplsTopoNodeDescr::_Internal::ospfnodeid(const SLBgplsTopoNodeDescr* msg) {
  return *msg->NodeId_.ospfnodeid_;
}
const ::service_layer::SLBgplsTopoOspfv3NodeId&
SLBgplsTopoNodeDescr::_Internal::ospfv3nodeid(const SLBgplsTopoNodeDescr* msg) {
  return *msg->NodeId_.ospfv3nodeid_;
}
const ::service_layer::SLBgplsTopoIsisNodeId&
SLBgplsTopoNodeDescr::_Internal::isisnodeid(const SLBgplsTopoNodeDescr* msg) {
  return *msg->NodeId_.isisnodeid_;
}
const ::service_layer::SLBgplsTopoBgpNodeId&
SLBgplsTopoNodeDescr::_Internal::bgpnodeid(const SLBgplsTopoNodeDescr* msg) {
  return *msg->NodeId_.bgpnodeid_;
}
const ::service_layer::SLBgplsTopoSrPolicyNodeId&
SLBgplsTopoNodeDescr::_Internal::srpolicynodeid(const SLBgplsTopoNodeDescr* msg) {
  return *msg->NodeId_.srpolicynodeid_;
}
void SLBgplsTopoNodeDescr::set_allocated_ospfnodeid(::service_layer::SLBgplsTopoOspfNodeId* ospfnodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (ospfnodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoOspfNodeId>::GetOwningArena(ospfnodeid);
    if (message_arena != submessage_arena) {
      ospfnodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ospfnodeid, submessage_arena);
    }
    set_has_ospfnodeid();
    NodeId_.ospfnodeid_ = ospfnodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeDescr.OspfNodeId)
}
void SLBgplsTopoNodeDescr::set_allocated_ospfv3nodeid(::service_layer::SLBgplsTopoOspfv3NodeId* ospfv3nodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (ospfv3nodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoOspfv3NodeId>::GetOwningArena(ospfv3nodeid);
    if (message_arena != submessage_arena) {
      ospfv3nodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ospfv3nodeid, submessage_arena);
    }
    set_has_ospfv3nodeid();
    NodeId_.ospfv3nodeid_ = ospfv3nodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeDescr.Ospfv3NodeId)
}
void SLBgplsTopoNodeDescr::set_allocated_isisnodeid(::service_layer::SLBgplsTopoIsisNodeId* isisnodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (isisnodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoIsisNodeId>::GetOwningArena(isisnodeid);
    if (message_arena != submessage_arena) {
      isisnodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, isisnodeid, submessage_arena);
    }
    set_has_isisnodeid();
    NodeId_.isisnodeid_ = isisnodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeDescr.IsisNodeId)
}
void SLBgplsTopoNodeDescr::set_allocated_bgpnodeid(::service_layer::SLBgplsTopoBgpNodeId* bgpnodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (bgpnodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoBgpNodeId>::GetOwningArena(bgpnodeid);
    if (message_arena != submessage_arena) {
      bgpnodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpnodeid, submessage_arena);
    }
    set_has_bgpnodeid();
    NodeId_.bgpnodeid_ = bgpnodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeDescr.BgpNodeId)
}
void SLBgplsTopoNodeDescr::set_allocated_srpolicynodeid(::service_layer::SLBgplsTopoSrPolicyNodeId* srpolicynodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (srpolicynodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicyNodeId>::GetOwningArena(srpolicynodeid);
    if (message_arena != submessage_arena) {
      srpolicynodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicynodeid, submessage_arena);
    }
    set_has_srpolicynodeid();
    NodeId_.srpolicynodeid_ = srpolicynodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeDescr.SrPolicyNodeId)
}
SLBgplsTopoNodeDescr::SLBgplsTopoNodeDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeDescr)
}
SLBgplsTopoNodeDescr::SLBgplsTopoNodeDescr(const SLBgplsTopoNodeDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodeidtype_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(nodeidtype_));
  clear_has_NodeId();
  switch (from.NodeId_case()) {
    case kOspfNodeId: {
      _internal_mutable_ospfnodeid()->::service_layer::SLBgplsTopoOspfNodeId::MergeFrom(from._internal_ospfnodeid());
      break;
    }
    case kOspfv3NodeId: {
      _internal_mutable_ospfv3nodeid()->::service_layer::SLBgplsTopoOspfv3NodeId::MergeFrom(from._internal_ospfv3nodeid());
      break;
    }
    case kIsisNodeId: {
      _internal_mutable_isisnodeid()->::service_layer::SLBgplsTopoIsisNodeId::MergeFrom(from._internal_isisnodeid());
      break;
    }
    case kBgpNodeId: {
      _internal_mutable_bgpnodeid()->::service_layer::SLBgplsTopoBgpNodeId::MergeFrom(from._internal_bgpnodeid());
      break;
    }
    case kSrPolicyNodeId: {
      _internal_mutable_srpolicynodeid()->::service_layer::SLBgplsTopoSrPolicyNodeId::MergeFrom(from._internal_srpolicynodeid());
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeDescr)
}

inline void SLBgplsTopoNodeDescr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nodeidtype_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(nodeidtype_));
clear_has_NodeId();
}

SLBgplsTopoNodeDescr::~SLBgplsTopoNodeDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_NodeId()) {
    clear_NodeId();
  }
}

void SLBgplsTopoNodeDescr::ArenaDtor(void* object) {
  SLBgplsTopoNodeDescr* _this = reinterpret_cast< SLBgplsTopoNodeDescr* >(object);
  (void)_this;
}
void SLBgplsTopoNodeDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeDescr::clear_NodeId() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoNodeDescr)
  switch (NodeId_case()) {
    case kOspfNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.ospfnodeid_;
      }
      break;
    }
    case kOspfv3NodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.ospfv3nodeid_;
      }
      break;
    }
    case kIsisNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.isisnodeid_;
      }
      break;
    }
    case kBgpNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.bgpnodeid_;
      }
      break;
    }
    case kSrPolicyNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.srpolicynodeid_;
      }
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODEID_NOT_SET;
}


void SLBgplsTopoNodeDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeidtype_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(nodeidtype_));
  clear_NodeId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ospfnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ospfv3nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_isisnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrPolicyNodeId SrPolicyNodeId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_srpolicynodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeIdType NodeIdType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nodeidtype(static_cast<::service_layer::SLBgplsTopoNodeIdType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Asn = 1;
  if (this->_internal_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
  if (_internal_has_ospfnodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ospfnodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
  if (_internal_has_ospfv3nodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ospfv3nodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
  if (_internal_has_isisnodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::isisnodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
  if (_internal_has_bgpnodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bgpnodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrPolicyNodeId SrPolicyNodeId = 6;
  if (_internal_has_srpolicynodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::srpolicynodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeIdType NodeIdType = 7;
  if (this->_internal_nodeidtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_nodeidtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeDescr)
  return target;
}

size_t SLBgplsTopoNodeDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Asn = 1;
  if (this->_internal_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_asn());
  }

  // .service_layer.SLBgplsTopoNodeIdType NodeIdType = 7;
  if (this->_internal_nodeidtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nodeidtype());
  }

  switch (NodeId_case()) {
    // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
    case kOspfNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.ospfnodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
    case kOspfv3NodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.ospfv3nodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
    case kIsisNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.isisnodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
    case kBgpNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.bgpnodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoSrPolicyNodeId SrPolicyNodeId = 6;
    case kSrPolicyNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.srpolicynodeid_);
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeDescr &>(from));
}


void SLBgplsTopoNodeDescr::MergeFrom(const SLBgplsTopoNodeDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from._internal_nodeidtype() != 0) {
    _internal_set_nodeidtype(from._internal_nodeidtype());
  }
  switch (from.NodeId_case()) {
    case kOspfNodeId: {
      _internal_mutable_ospfnodeid()->::service_layer::SLBgplsTopoOspfNodeId::MergeFrom(from._internal_ospfnodeid());
      break;
    }
    case kOspfv3NodeId: {
      _internal_mutable_ospfv3nodeid()->::service_layer::SLBgplsTopoOspfv3NodeId::MergeFrom(from._internal_ospfv3nodeid());
      break;
    }
    case kIsisNodeId: {
      _internal_mutable_isisnodeid()->::service_layer::SLBgplsTopoIsisNodeId::MergeFrom(from._internal_isisnodeid());
      break;
    }
    case kBgpNodeId: {
      _internal_mutable_bgpnodeid()->::service_layer::SLBgplsTopoBgpNodeId::MergeFrom(from._internal_bgpnodeid());
      break;
    }
    case kSrPolicyNodeId: {
      _internal_mutable_srpolicynodeid()->::service_layer::SLBgplsTopoSrPolicyNodeId::MergeFrom(from._internal_srpolicynodeid());
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeDescr::CopyFrom(const SLBgplsTopoNodeDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeDescr::InternalSwap(SLBgplsTopoNodeDescr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeDescr, nodeidtype_)
      + sizeof(SLBgplsTopoNodeDescr::nodeidtype_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeDescr, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
  swap(NodeId_, other->NodeId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[12]);
}

// ===================================================================

class SLBgplsTopoLinkDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoMtId& mtid(const SLBgplsTopoLinkDescr* msg);
};

const ::service_layer::SLBgplsTopoMtId&
SLBgplsTopoLinkDescr::_Internal::mtid(const SLBgplsTopoLinkDescr* msg) {
  return *msg->mtid_;
}
SLBgplsTopoLinkDescr::SLBgplsTopoLinkDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkDescr)
}
SLBgplsTopoLinkDescr::SLBgplsTopoLinkDescr(const SLBgplsTopoLinkDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  localipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localipv6().empty()) {
    localipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localipv6(), 
      GetArenaForAllocation());
  }
  remoteipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remoteipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remoteipv6().empty()) {
    remoteipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remoteipv6(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mtid()) {
    mtid_ = new ::service_layer::SLBgplsTopoMtId(*from.mtid_);
  } else {
    mtid_ = nullptr;
  }
  ::memcpy(&localid_, &from.localid_,
    static_cast<size_t>(reinterpret_cast<char*>(&remoteipv4_) -
    reinterpret_cast<char*>(&localid_)) + sizeof(remoteipv4_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkDescr)
}

inline void SLBgplsTopoLinkDescr::SharedCtor() {
localipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remoteipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remoteipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remoteipv4_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(remoteipv4_));
}

SLBgplsTopoLinkDescr::~SLBgplsTopoLinkDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  localipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mtid_;
}

void SLBgplsTopoLinkDescr::ArenaDtor(void* object) {
  SLBgplsTopoLinkDescr* _this = reinterpret_cast< SLBgplsTopoLinkDescr* >(object);
  (void)_this;
}
void SLBgplsTopoLinkDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  localipv6_.ClearToEmpty();
  remoteipv6_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
  ::memset(&localid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remoteipv4_) -
      reinterpret_cast<char*>(&localid_)) + sizeof(remoteipv4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocalId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          localid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          remoteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LocalIpv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          localipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteIpv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          remoteipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes LocalIpv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_localipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RemoteIpv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_remoteipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMtId MtId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_localid(), target);
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remoteid(), target);
  }

  // uint32 LocalIpv4 = 3;
  if (this->_internal_localipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_localipv4(), target);
  }

  // uint32 RemoteIpv4 = 4;
  if (this->_internal_remoteipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_remoteipv4(), target);
  }

  // bytes LocalIpv6 = 5;
  if (!this->_internal_localipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_localipv6(), target);
  }

  // bytes RemoteIpv6 = 6;
  if (!this->_internal_remoteipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_remoteipv6(), target);
  }

  // .service_layer.SLBgplsTopoMtId MtId = 7;
  if (this->_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mtid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkDescr)
  return target;
}

size_t SLBgplsTopoLinkDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes LocalIpv6 = 5;
  if (!this->_internal_localipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_localipv6());
  }

  // bytes RemoteIpv6 = 6;
  if (!this->_internal_remoteipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remoteipv6());
  }

  // .service_layer.SLBgplsTopoMtId MtId = 7;
  if (this->_internal_has_mtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtid_);
  }

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localid());
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remoteid());
  }

  // uint32 LocalIpv4 = 3;
  if (this->_internal_localipv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localipv4());
  }

  // uint32 RemoteIpv4 = 4;
  if (this->_internal_remoteipv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remoteipv4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkDescr &>(from));
}


void SLBgplsTopoLinkDescr::MergeFrom(const SLBgplsTopoLinkDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_localipv6().empty()) {
    _internal_set_localipv6(from._internal_localipv6());
  }
  if (!from._internal_remoteipv6().empty()) {
    _internal_set_remoteipv6(from._internal_remoteipv6());
  }
  if (from._internal_has_mtid()) {
    _internal_mutable_mtid()->::service_layer::SLBgplsTopoMtId::MergeFrom(from._internal_mtid());
  }
  if (from._internal_localid() != 0) {
    _internal_set_localid(from._internal_localid());
  }
  if (from._internal_remoteid() != 0) {
    _internal_set_remoteid(from._internal_remoteid());
  }
  if (from._internal_localipv4() != 0) {
    _internal_set_localipv4(from._internal_localipv4());
  }
  if (from._internal_remoteipv4() != 0) {
    _internal_set_remoteipv4(from._internal_remoteipv4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkDescr::CopyFrom(const SLBgplsTopoLinkDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkDescr::InternalSwap(SLBgplsTopoLinkDescr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localipv6_, lhs_arena,
      &other->localipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remoteipv6_, lhs_arena,
      &other->remoteipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkDescr, remoteipv4_)
      + sizeof(SLBgplsTopoLinkDescr::remoteipv4_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkDescr, mtid_)>(
          reinterpret_cast<char*>(&mtid_),
          reinterpret_cast<char*>(&other->mtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[13]);
}

// ===================================================================

class SLBgplsTopoPrefixDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoMtId& mtid(const SLBgplsTopoPrefixDescr* msg);
};

const ::service_layer::SLBgplsTopoMtId&
SLBgplsTopoPrefixDescr::_Internal::mtid(const SLBgplsTopoPrefixDescr* msg) {
  return *msg->mtid_;
}
SLBgplsTopoPrefixDescr::SLBgplsTopoPrefixDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixDescr)
}
SLBgplsTopoPrefixDescr::SLBgplsTopoPrefixDescr(const SLBgplsTopoPrefixDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefixlength_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefixlength_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefixlength().empty()) {
    prefixlength_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefixlength(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mtid()) {
    mtid_ = new ::service_layer::SLBgplsTopoMtId(*from.mtid_);
  } else {
    mtid_ = nullptr;
  }
  ospfroutetype_ = from.ospfroutetype_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixDescr)
}

inline void SLBgplsTopoPrefixDescr::SharedCtor() {
prefixlength_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefixlength_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ospfroutetype_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(ospfroutetype_));
}

SLBgplsTopoPrefixDescr::~SLBgplsTopoPrefixDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefixlength_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mtid_;
}

void SLBgplsTopoPrefixDescr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixDescr* _this = reinterpret_cast< SLBgplsTopoPrefixDescr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefixlength_.ClearToEmpty();
  prefix_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
  ospfroutetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoMtId MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ospfroutetype(static_cast<::service_layer::SLBgplsTopoOspfRouteType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes PrefixLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prefixlength();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  if (this->_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mtid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
  if (this->_internal_ospfroutetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ospfroutetype(), target);
  }

  // bytes PrefixLength = 3;
  if (!this->_internal_prefixlength().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prefixlength(), target);
  }

  // bytes Prefix = 4;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixDescr)
  return target;
}

size_t SLBgplsTopoPrefixDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PrefixLength = 3;
  if (!this->_internal_prefixlength().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefixlength());
  }

  // bytes Prefix = 4;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  if (this->_internal_has_mtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtid_);
  }

  // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
  if (this->_internal_ospfroutetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ospfroutetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixDescr &>(from));
}


void SLBgplsTopoPrefixDescr::MergeFrom(const SLBgplsTopoPrefixDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefixlength().empty()) {
    _internal_set_prefixlength(from._internal_prefixlength());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_has_mtid()) {
    _internal_mutable_mtid()->::service_layer::SLBgplsTopoMtId::MergeFrom(from._internal_mtid());
  }
  if (from._internal_ospfroutetype() != 0) {
    _internal_set_ospfroutetype(from._internal_ospfroutetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixDescr::CopyFrom(const SLBgplsTopoPrefixDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixDescr::InternalSwap(SLBgplsTopoPrefixDescr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefixlength_, lhs_arena,
      &other->prefixlength_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixDescr, ospfroutetype_)
      + sizeof(SLBgplsTopoPrefixDescr::ospfroutetype_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixDescr, mtid_)>(
          reinterpret_cast<char*>(&mtid_),
          reinterpret_cast<char*>(&other->mtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[14]);
}

// ===================================================================

class SLBgplsTopoSrv6SidDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoMtId& mtid(const SLBgplsTopoSrv6SidDescr* msg);
};

const ::service_layer::SLBgplsTopoMtId&
SLBgplsTopoSrv6SidDescr::_Internal::mtid(const SLBgplsTopoSrv6SidDescr* msg) {
  return *msg->mtid_;
}
SLBgplsTopoSrv6SidDescr::SLBgplsTopoSrv6SidDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6SidDescr)
}
SLBgplsTopoSrv6SidDescr::SLBgplsTopoSrv6SidDescr(const SLBgplsTopoSrv6SidDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srv6sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srv6sid().empty()) {
    srv6sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srv6sid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mtid()) {
    mtid_ = new ::service_layer::SLBgplsTopoMtId(*from.mtid_);
  } else {
    mtid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6SidDescr)
}

inline void SLBgplsTopoSrv6SidDescr::SharedCtor() {
srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srv6sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mtid_ = nullptr;
}

SLBgplsTopoSrv6SidDescr::~SLBgplsTopoSrv6SidDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6SidDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6SidDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srv6sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mtid_;
}

void SLBgplsTopoSrv6SidDescr::ArenaDtor(void* object) {
  SLBgplsTopoSrv6SidDescr* _this = reinterpret_cast< SLBgplsTopoSrv6SidDescr* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6SidDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6SidDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6SidDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6SidDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srv6sid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6SidDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoMtId MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Srv6Sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srv6sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6SidDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6SidDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  if (this->_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mtid(this), target, stream);
  }

  // bytes Srv6Sid = 2;
  if (!this->_internal_srv6sid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_srv6sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6SidDescr)
  return target;
}

size_t SLBgplsTopoSrv6SidDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6SidDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Srv6Sid = 2;
  if (!this->_internal_srv6sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srv6sid());
  }

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  if (this->_internal_has_mtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6SidDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6SidDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6SidDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6SidDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6SidDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6SidDescr &>(from));
}


void SLBgplsTopoSrv6SidDescr::MergeFrom(const SLBgplsTopoSrv6SidDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6SidDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srv6sid().empty()) {
    _internal_set_srv6sid(from._internal_srv6sid());
  }
  if (from._internal_has_mtid()) {
    _internal_mutable_mtid()->::service_layer::SLBgplsTopoMtId::MergeFrom(from._internal_mtid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6SidDescr::CopyFrom(const SLBgplsTopoSrv6SidDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6SidDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6SidDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6SidDescr::InternalSwap(SLBgplsTopoSrv6SidDescr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srv6sid_, lhs_arena,
      &other->srv6sid_, rhs_arena
  );
  swap(mtid_, other->mtid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6SidDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[15]);
}

// ===================================================================

class SLBgplsTopoSrPolicyDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoSrPolicyFlags& flags(const SLBgplsTopoSrPolicyDescr* msg);
};

const ::service_layer::SLBgplsTopoSrPolicyFlags&
SLBgplsTopoSrPolicyDescr::_Internal::flags(const SLBgplsTopoSrPolicyDescr* msg) {
  return *msg->flags_;
}
SLBgplsTopoSrPolicyDescr::SLBgplsTopoSrPolicyDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrPolicyDescr)
}
SLBgplsTopoSrPolicyDescr::SLBgplsTopoSrPolicyDescr(const SLBgplsTopoSrPolicyDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flags()) {
    flags_ = new ::service_layer::SLBgplsTopoSrPolicyFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  ::memcpy(&protoorigin_, &from.protoorigin_,
    static_cast<size_t>(reinterpret_cast<char*>(&discriminator_) -
    reinterpret_cast<char*>(&protoorigin_)) + sizeof(discriminator_));
  clear_has_EndpointAddress();
  switch (from.EndpointAddress_case()) {
    case kIpv4EndpointAddress: {
      _internal_set_ipv4endpointaddress(from._internal_ipv4endpointaddress());
      break;
    }
    case kIpv6EndpointAddress: {
      _internal_set_ipv6endpointaddress(from._internal_ipv6endpointaddress());
      break;
    }
    case ENDPOINTADDRESS_NOT_SET: {
      break;
    }
  }
  clear_has_OriginatorAddress();
  switch (from.OriginatorAddress_case()) {
    case kIpv4OriginatorAddress: {
      _internal_set_ipv4originatoraddress(from._internal_ipv4originatoraddress());
      break;
    }
    case kIpv6OriginatorAddress: {
      _internal_set_ipv6originatoraddress(from._internal_ipv6originatoraddress());
      break;
    }
    case ORIGINATORADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrPolicyDescr)
}

inline void SLBgplsTopoSrPolicyDescr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&discriminator_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(discriminator_));
clear_has_EndpointAddress();
clear_has_OriginatorAddress();
}

SLBgplsTopoSrPolicyDescr::~SLBgplsTopoSrPolicyDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrPolicyDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrPolicyDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete flags_;
  if (has_EndpointAddress()) {
    clear_EndpointAddress();
  }
  if (has_OriginatorAddress()) {
    clear_OriginatorAddress();
  }
}

void SLBgplsTopoSrPolicyDescr::ArenaDtor(void* object) {
  SLBgplsTopoSrPolicyDescr* _this = reinterpret_cast< SLBgplsTopoSrPolicyDescr* >(object);
  (void)_this;
}
void SLBgplsTopoSrPolicyDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrPolicyDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrPolicyDescr::clear_EndpointAddress() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoSrPolicyDescr)
  switch (EndpointAddress_case()) {
    case kIpv4EndpointAddress: {
      // No need to clear
      break;
    }
    case kIpv6EndpointAddress: {
      EndpointAddress_.ipv6endpointaddress_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ENDPOINTADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENDPOINTADDRESS_NOT_SET;
}

void SLBgplsTopoSrPolicyDescr::clear_OriginatorAddress() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoSrPolicyDescr)
  switch (OriginatorAddress_case()) {
    case kIpv4OriginatorAddress: {
      // No need to clear
      break;
    }
    case kIpv6OriginatorAddress: {
      OriginatorAddress_.ipv6originatoraddress_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ORIGINATORADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ORIGINATORADDRESS_NOT_SET;
}


void SLBgplsTopoSrPolicyDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrPolicyDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  ::memset(&protoorigin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discriminator_) -
      reinterpret_cast<char*>(&protoorigin_)) + sizeof(discriminator_));
  clear_EndpointAddress();
  clear_OriginatorAddress();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrPolicyDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoSrPolicyProtocolOrigin ProtoOrigin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protoorigin(static_cast<::service_layer::SLBgplsTopoSrPolicyProtocolOrigin>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrPolicyFlags Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Ipv4EndpointAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_ipv4endpointaddress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6EndpointAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ipv6endpointaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsEndpointAddressIpv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          isendpointaddressipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 OriginAsn = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          originasn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Ipv4OriginatorAddress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_ipv4originatoraddress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6OriginatorAddress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ipv6originatoraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsOriginatorAddressIpv6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          isoriginatoraddressipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Discriminator = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          discriminator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrPolicyDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrPolicyDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoSrPolicyProtocolOrigin ProtoOrigin = 1;
  if (this->_internal_protoorigin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protoorigin(), target);
  }

  // .service_layer.SLBgplsTopoSrPolicyFlags Flags = 2;
  if (this->_internal_has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flags(this), target, stream);
  }

  // uint32 Ipv4EndpointAddress = 3;
  if (_internal_has_ipv4endpointaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ipv4endpointaddress(), target);
  }

  // bytes Ipv6EndpointAddress = 4;
  if (_internal_has_ipv6endpointaddress()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ipv6endpointaddress(), target);
  }

  // uint32 IsEndpointAddressIpv6 = 5;
  if (this->_internal_isendpointaddressipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_isendpointaddressipv6(), target);
  }

  // uint32 Color = 6;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_color(), target);
  }

  // uint32 OriginAsn = 7;
  if (this->_internal_originasn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_originasn(), target);
  }

  // uint32 Ipv4OriginatorAddress = 8;
  if (_internal_has_ipv4originatoraddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ipv4originatoraddress(), target);
  }

  // bytes Ipv6OriginatorAddress = 9;
  if (_internal_has_ipv6originatoraddress()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_ipv6originatoraddress(), target);
  }

  // uint32 IsOriginatorAddressIpv6 = 10;
  if (this->_internal_isoriginatoraddressipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_isoriginatoraddressipv6(), target);
  }

  // uint32 Discriminator = 11;
  if (this->_internal_discriminator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_discriminator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrPolicyDescr)
  return target;
}

size_t SLBgplsTopoSrPolicyDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrPolicyDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoSrPolicyFlags Flags = 2;
  if (this->_internal_has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .service_layer.SLBgplsTopoSrPolicyProtocolOrigin ProtoOrigin = 1;
  if (this->_internal_protoorigin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protoorigin());
  }

  // uint32 IsEndpointAddressIpv6 = 5;
  if (this->_internal_isendpointaddressipv6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isendpointaddressipv6());
  }

  // uint32 Color = 6;
  if (this->_internal_color() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  // uint32 OriginAsn = 7;
  if (this->_internal_originasn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_originasn());
  }

  // uint32 IsOriginatorAddressIpv6 = 10;
  if (this->_internal_isoriginatoraddressipv6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isoriginatoraddressipv6());
  }

  // uint32 Discriminator = 11;
  if (this->_internal_discriminator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_discriminator());
  }

  switch (EndpointAddress_case()) {
    // uint32 Ipv4EndpointAddress = 3;
    case kIpv4EndpointAddress: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4endpointaddress());
      break;
    }
    // bytes Ipv6EndpointAddress = 4;
    case kIpv6EndpointAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6endpointaddress());
      break;
    }
    case ENDPOINTADDRESS_NOT_SET: {
      break;
    }
  }
  switch (OriginatorAddress_case()) {
    // uint32 Ipv4OriginatorAddress = 8;
    case kIpv4OriginatorAddress: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4originatoraddress());
      break;
    }
    // bytes Ipv6OriginatorAddress = 9;
    case kIpv6OriginatorAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6originatoraddress());
      break;
    }
    case ORIGINATORADDRESS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrPolicyDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrPolicyDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrPolicyDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrPolicyDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrPolicyDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrPolicyDescr &>(from));
}


void SLBgplsTopoSrPolicyDescr::MergeFrom(const SLBgplsTopoSrPolicyDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrPolicyDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flags()) {
    _internal_mutable_flags()->::service_layer::SLBgplsTopoSrPolicyFlags::MergeFrom(from._internal_flags());
  }
  if (from._internal_protoorigin() != 0) {
    _internal_set_protoorigin(from._internal_protoorigin());
  }
  if (from._internal_isendpointaddressipv6() != 0) {
    _internal_set_isendpointaddressipv6(from._internal_isendpointaddressipv6());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_originasn() != 0) {
    _internal_set_originasn(from._internal_originasn());
  }
  if (from._internal_isoriginatoraddressipv6() != 0) {
    _internal_set_isoriginatoraddressipv6(from._internal_isoriginatoraddressipv6());
  }
  if (from._internal_discriminator() != 0) {
    _internal_set_discriminator(from._internal_discriminator());
  }
  switch (from.EndpointAddress_case()) {
    case kIpv4EndpointAddress: {
      _internal_set_ipv4endpointaddress(from._internal_ipv4endpointaddress());
      break;
    }
    case kIpv6EndpointAddress: {
      _internal_set_ipv6endpointaddress(from._internal_ipv6endpointaddress());
      break;
    }
    case ENDPOINTADDRESS_NOT_SET: {
      break;
    }
  }
  switch (from.OriginatorAddress_case()) {
    case kIpv4OriginatorAddress: {
      _internal_set_ipv4originatoraddress(from._internal_ipv4originatoraddress());
      break;
    }
    case kIpv6OriginatorAddress: {
      _internal_set_ipv6originatoraddress(from._internal_ipv6originatoraddress());
      break;
    }
    case ORIGINATORADDRESS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrPolicyDescr::CopyFrom(const SLBgplsTopoSrPolicyDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrPolicyDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrPolicyDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrPolicyDescr::InternalSwap(SLBgplsTopoSrPolicyDescr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicyDescr, discriminator_)
      + sizeof(SLBgplsTopoSrPolicyDescr::discriminator_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicyDescr, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
  swap(EndpointAddress_, other->EndpointAddress_);
  swap(OriginatorAddress_, other->OriginatorAddress_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrPolicyDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[16]);
}

// ===================================================================

class SLBgplsTopoOspfNodeId::_Internal {
 public:
};

SLBgplsTopoOspfNodeId::SLBgplsTopoOspfNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoOspfNodeId)
}
SLBgplsTopoOspfNodeId::SLBgplsTopoOspfNodeId(const SLBgplsTopoOspfNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dridentifier_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoOspfNodeId)
}

inline void SLBgplsTopoOspfNodeId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&areaid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dridentifier_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
}

SLBgplsTopoOspfNodeId::~SLBgplsTopoOspfNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoOspfNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoOspfNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoOspfNodeId::ArenaDtor(void* object) {
  SLBgplsTopoOspfNodeId* _this = reinterpret_cast< SLBgplsTopoOspfNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoOspfNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoOspfNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoOspfNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoOspfNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dridentifier_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoOspfNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 AreaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsAsScoped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          isasscoped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DrIdentifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dridentifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoOspfNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoOspfNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areaid(), target);
  }

  // uint32 IsAsScoped = 2;
  if (this->_internal_isasscoped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_isasscoped(), target);
  }

  // uint32 RouterId = 3;
  if (this->_internal_routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_routerid(), target);
  }

  // uint32 DrIdentifier = 4;
  if (this->_internal_dridentifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dridentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoOspfNodeId)
  return target;
}

size_t SLBgplsTopoOspfNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoOspfNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areaid());
  }

  // uint32 IsAsScoped = 2;
  if (this->_internal_isasscoped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isasscoped());
  }

  // uint32 RouterId = 3;
  if (this->_internal_routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routerid());
  }

  // uint32 DrIdentifier = 4;
  if (this->_internal_dridentifier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dridentifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoOspfNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoOspfNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoOspfNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoOspfNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoOspfNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoOspfNodeId &>(from));
}


void SLBgplsTopoOspfNodeId::MergeFrom(const SLBgplsTopoOspfNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoOspfNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_areaid() != 0) {
    _internal_set_areaid(from._internal_areaid());
  }
  if (from._internal_isasscoped() != 0) {
    _internal_set_isasscoped(from._internal_isasscoped());
  }
  if (from._internal_routerid() != 0) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (from._internal_dridentifier() != 0) {
    _internal_set_dridentifier(from._internal_dridentifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoOspfNodeId::CopyFrom(const SLBgplsTopoOspfNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoOspfNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoOspfNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoOspfNodeId::InternalSwap(SLBgplsTopoOspfNodeId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfNodeId, dridentifier_)
      + sizeof(SLBgplsTopoOspfNodeId::dridentifier_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfNodeId, areaid_)>(
          reinterpret_cast<char*>(&areaid_),
          reinterpret_cast<char*>(&other->areaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoOspfNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[17]);
}

// ===================================================================

class SLBgplsTopoOspfv3NodeId::_Internal {
 public:
};

SLBgplsTopoOspfv3NodeId::SLBgplsTopoOspfv3NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoOspfv3NodeId)
}
SLBgplsTopoOspfv3NodeId::SLBgplsTopoOspfv3NodeId(const SLBgplsTopoOspfv3NodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dridentifier_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoOspfv3NodeId)
}

inline void SLBgplsTopoOspfv3NodeId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&areaid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dridentifier_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
}

SLBgplsTopoOspfv3NodeId::~SLBgplsTopoOspfv3NodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoOspfv3NodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoOspfv3NodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoOspfv3NodeId::ArenaDtor(void* object) {
  SLBgplsTopoOspfv3NodeId* _this = reinterpret_cast< SLBgplsTopoOspfv3NodeId* >(object);
  (void)_this;
}
void SLBgplsTopoOspfv3NodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoOspfv3NodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoOspfv3NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoOspfv3NodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dridentifier_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoOspfv3NodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 AreaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AsScoped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          asscoped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DrIdentifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dridentifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoOspfv3NodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoOspfv3NodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areaid(), target);
  }

  // uint32 AsScoped = 2;
  if (this->_internal_asscoped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asscoped(), target);
  }

  // uint32 RouterId = 3;
  if (this->_internal_routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_routerid(), target);
  }

  // uint32 DrIdentifier = 4;
  if (this->_internal_dridentifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dridentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoOspfv3NodeId)
  return target;
}

size_t SLBgplsTopoOspfv3NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoOspfv3NodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areaid());
  }

  // uint32 AsScoped = 2;
  if (this->_internal_asscoped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_asscoped());
  }

  // uint32 RouterId = 3;
  if (this->_internal_routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routerid());
  }

  // uint32 DrIdentifier = 4;
  if (this->_internal_dridentifier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dridentifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoOspfv3NodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoOspfv3NodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoOspfv3NodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoOspfv3NodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoOspfv3NodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoOspfv3NodeId &>(from));
}


void SLBgplsTopoOspfv3NodeId::MergeFrom(const SLBgplsTopoOspfv3NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoOspfv3NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_areaid() != 0) {
    _internal_set_areaid(from._internal_areaid());
  }
  if (from._internal_asscoped() != 0) {
    _internal_set_asscoped(from._internal_asscoped());
  }
  if (from._internal_routerid() != 0) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (from._internal_dridentifier() != 0) {
    _internal_set_dridentifier(from._internal_dridentifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoOspfv3NodeId::CopyFrom(const SLBgplsTopoOspfv3NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoOspfv3NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoOspfv3NodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoOspfv3NodeId::InternalSwap(SLBgplsTopoOspfv3NodeId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfv3NodeId, dridentifier_)
      + sizeof(SLBgplsTopoOspfv3NodeId::dridentifier_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfv3NodeId, areaid_)>(
          reinterpret_cast<char*>(&areaid_),
          reinterpret_cast<char*>(&other->areaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoOspfv3NodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[18]);
}

// ===================================================================

class SLBgplsTopoIsisNodeId::_Internal {
 public:
};

SLBgplsTopoIsisNodeId::SLBgplsTopoIsisNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoIsisNodeId)
}
SLBgplsTopoIsisNodeId::SLBgplsTopoIsisNodeId(const SLBgplsTopoIsisNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    systemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_systemid().empty()) {
    systemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_systemid(), 
      GetArenaForAllocation());
  }
  psnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    psnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_psnid().empty()) {
    psnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_psnid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoIsisNodeId)
}

inline void SLBgplsTopoIsisNodeId::SharedCtor() {
systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  systemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
psnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  psnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoIsisNodeId::~SLBgplsTopoIsisNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoIsisNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoIsisNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  systemid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psnid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoIsisNodeId::ArenaDtor(void* object) {
  SLBgplsTopoIsisNodeId* _this = reinterpret_cast< SLBgplsTopoIsisNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoIsisNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoIsisNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoIsisNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoIsisNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  systemid_.ClearToEmpty();
  psnid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoIsisNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes SystemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_systemid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes PsnId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_psnid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoIsisNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoIsisNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SystemId = 1;
  if (!this->_internal_systemid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_systemid(), target);
  }

  // bytes PsnId = 2;
  if (!this->_internal_psnid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_psnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoIsisNodeId)
  return target;
}

size_t SLBgplsTopoIsisNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoIsisNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SystemId = 1;
  if (!this->_internal_systemid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_systemid());
  }

  // bytes PsnId = 2;
  if (!this->_internal_psnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_psnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoIsisNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoIsisNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoIsisNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoIsisNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoIsisNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoIsisNodeId &>(from));
}


void SLBgplsTopoIsisNodeId::MergeFrom(const SLBgplsTopoIsisNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoIsisNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_systemid().empty()) {
    _internal_set_systemid(from._internal_systemid());
  }
  if (!from._internal_psnid().empty()) {
    _internal_set_psnid(from._internal_psnid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoIsisNodeId::CopyFrom(const SLBgplsTopoIsisNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoIsisNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoIsisNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoIsisNodeId::InternalSwap(SLBgplsTopoIsisNodeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &systemid_, lhs_arena,
      &other->systemid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &psnid_, lhs_arena,
      &other->psnid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoIsisNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[19]);
}

// ===================================================================

class SLBgplsTopoBgpNodeId::_Internal {
 public:
};

SLBgplsTopoBgpNodeId::SLBgplsTopoBgpNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoBgpNodeId)
}
SLBgplsTopoBgpNodeId::SLBgplsTopoBgpNodeId(const SLBgplsTopoBgpNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&routerid_, &from.routerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&memberasn_) -
    reinterpret_cast<char*>(&routerid_)) + sizeof(memberasn_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoBgpNodeId)
}

inline void SLBgplsTopoBgpNodeId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memberasn_) -
    reinterpret_cast<char*>(&routerid_)) + sizeof(memberasn_));
}

SLBgplsTopoBgpNodeId::~SLBgplsTopoBgpNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoBgpNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoBgpNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoBgpNodeId::ArenaDtor(void* object) {
  SLBgplsTopoBgpNodeId* _this = reinterpret_cast< SLBgplsTopoBgpNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoBgpNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoBgpNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoBgpNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoBgpNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&routerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memberasn_) -
      reinterpret_cast<char*>(&routerid_)) + sizeof(memberasn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoBgpNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MemberAsn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          memberasn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoBgpNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoBgpNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_routerid(), target);
  }

  // uint32 MemberAsn = 2;
  if (this->_internal_memberasn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_memberasn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoBgpNodeId)
  return target;
}

size_t SLBgplsTopoBgpNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoBgpNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routerid());
  }

  // uint32 MemberAsn = 2;
  if (this->_internal_memberasn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_memberasn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoBgpNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoBgpNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoBgpNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoBgpNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoBgpNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoBgpNodeId &>(from));
}


void SLBgplsTopoBgpNodeId::MergeFrom(const SLBgplsTopoBgpNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoBgpNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_routerid() != 0) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (from._internal_memberasn() != 0) {
    _internal_set_memberasn(from._internal_memberasn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoBgpNodeId::CopyFrom(const SLBgplsTopoBgpNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoBgpNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoBgpNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoBgpNodeId::InternalSwap(SLBgplsTopoBgpNodeId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpNodeId, memberasn_)
      + sizeof(SLBgplsTopoBgpNodeId::memberasn_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpNodeId, routerid_)>(
          reinterpret_cast<char*>(&routerid_),
          reinterpret_cast<char*>(&other->routerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoBgpNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[20]);
}

// ===================================================================

class SLBgplsTopoSrPolicyNodeId::_Internal {
 public:
};

SLBgplsTopoSrPolicyNodeId::SLBgplsTopoSrPolicyNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrPolicyNodeId)
}
SLBgplsTopoSrPolicyNodeId::SLBgplsTopoSrPolicyNodeId(const SLBgplsTopoSrPolicyNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipv6routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipv6routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6routerid().empty()) {
    ipv6routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6routerid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&routerid_, &from.routerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4routerid_) -
    reinterpret_cast<char*>(&routerid_)) + sizeof(ipv4routerid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrPolicyNodeId)
}

inline void SLBgplsTopoSrPolicyNodeId::SharedCtor() {
ipv6routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipv6routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipv4routerid_) -
    reinterpret_cast<char*>(&routerid_)) + sizeof(ipv4routerid_));
}

SLBgplsTopoSrPolicyNodeId::~SLBgplsTopoSrPolicyNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrPolicyNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrPolicyNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipv6routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrPolicyNodeId::ArenaDtor(void* object) {
  SLBgplsTopoSrPolicyNodeId* _this = reinterpret_cast< SLBgplsTopoSrPolicyNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoSrPolicyNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrPolicyNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrPolicyNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrPolicyNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv6routerid_.ClearToEmpty();
  ::memset(&routerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4routerid_) -
      reinterpret_cast<char*>(&routerid_)) + sizeof(ipv4routerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrPolicyNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MemberAsn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          memberasn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Ipv4RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ipv4routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6RouterId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ipv6routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrPolicyNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrPolicyNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_routerid(), target);
  }

  // uint32 MemberAsn = 2;
  if (this->_internal_memberasn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_memberasn(), target);
  }

  // uint32 Ipv4RouterId = 3;
  if (this->_internal_ipv4routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ipv4routerid(), target);
  }

  // bytes Ipv6RouterId = 4;
  if (!this->_internal_ipv6routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ipv6routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrPolicyNodeId)
  return target;
}

size_t SLBgplsTopoSrPolicyNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrPolicyNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Ipv6RouterId = 4;
  if (!this->_internal_ipv6routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6routerid());
  }

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routerid());
  }

  // uint32 MemberAsn = 2;
  if (this->_internal_memberasn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_memberasn());
  }

  // uint32 Ipv4RouterId = 3;
  if (this->_internal_ipv4routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrPolicyNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrPolicyNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrPolicyNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrPolicyNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrPolicyNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrPolicyNodeId &>(from));
}


void SLBgplsTopoSrPolicyNodeId::MergeFrom(const SLBgplsTopoSrPolicyNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrPolicyNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipv6routerid().empty()) {
    _internal_set_ipv6routerid(from._internal_ipv6routerid());
  }
  if (from._internal_routerid() != 0) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (from._internal_memberasn() != 0) {
    _internal_set_memberasn(from._internal_memberasn());
  }
  if (from._internal_ipv4routerid() != 0) {
    _internal_set_ipv4routerid(from._internal_ipv4routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrPolicyNodeId::CopyFrom(const SLBgplsTopoSrPolicyNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrPolicyNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrPolicyNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrPolicyNodeId::InternalSwap(SLBgplsTopoSrPolicyNodeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6routerid_, lhs_arena,
      &other->ipv6routerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicyNodeId, ipv4routerid_)
      + sizeof(SLBgplsTopoSrPolicyNodeId::ipv4routerid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicyNodeId, routerid_)>(
          reinterpret_cast<char*>(&routerid_),
          reinterpret_cast<char*>(&other->routerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrPolicyNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[21]);
}

// ===================================================================

class SLBgplsTopoSrPolicyFlags::_Internal {
 public:
};

SLBgplsTopoSrPolicyFlags::SLBgplsTopoSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrPolicyFlags)
}
SLBgplsTopoSrPolicyFlags::SLBgplsTopoSrPolicyFlags(const SLBgplsTopoSrPolicyFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrPolicyFlags)
}

inline void SLBgplsTopoSrPolicyFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrPolicyFlags::~SLBgplsTopoSrPolicyFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrPolicyFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrPolicyFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrPolicyFlags::ArenaDtor(void* object) {
  SLBgplsTopoSrPolicyFlags* _this = reinterpret_cast< SLBgplsTopoSrPolicyFlags* >(object);
  (void)_this;
}
void SLBgplsTopoSrPolicyFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrPolicyFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrPolicyFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrPolicyFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrPolicyFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrPolicyFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrPolicyFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrPolicyFlags)
  return target;
}

size_t SLBgplsTopoSrPolicyFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrPolicyFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrPolicyFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrPolicyFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrPolicyFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrPolicyFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrPolicyFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrPolicyFlags &>(from));
}


void SLBgplsTopoSrPolicyFlags::MergeFrom(const SLBgplsTopoSrPolicyFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrPolicyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrPolicyFlags::CopyFrom(const SLBgplsTopoSrPolicyFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrPolicyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrPolicyFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrPolicyFlags::InternalSwap(SLBgplsTopoSrPolicyFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrPolicyFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[22]);
}

// ===================================================================

class SLBgplsTopoAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeAttr& nodeattr(const SLBgplsTopoAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkAttr& linkattr(const SLBgplsTopoAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixAttr& prefixattr(const SLBgplsTopoAttr* msg);
  static const ::service_layer::SLBgplsTopoSrv6SidAttr& srv6sidattr(const SLBgplsTopoAttr* msg);
  static const ::service_layer::SLBgplsTopoSrPolicyAttr& srpolicyattr(const SLBgplsTopoAttr* msg);
};

const ::service_layer::SLBgplsTopoNodeAttr&
SLBgplsTopoAttr::_Internal::nodeattr(const SLBgplsTopoAttr* msg) {
  return *msg->Attr_.nodeattr_;
}
const ::service_layer::SLBgplsTopoLinkAttr&
SLBgplsTopoAttr::_Internal::linkattr(const SLBgplsTopoAttr* msg) {
  return *msg->Attr_.linkattr_;
}
const ::service_layer::SLBgplsTopoPrefixAttr&
SLBgplsTopoAttr::_Internal::prefixattr(const SLBgplsTopoAttr* msg) {
  return *msg->Attr_.prefixattr_;
}
const ::service_layer::SLBgplsTopoSrv6SidAttr&
SLBgplsTopoAttr::_Internal::srv6sidattr(const SLBgplsTopoAttr* msg) {
  return *msg->Attr_.srv6sidattr_;
}
const ::service_layer::SLBgplsTopoSrPolicyAttr&
SLBgplsTopoAttr::_Internal::srpolicyattr(const SLBgplsTopoAttr* msg) {
  return *msg->Attr_.srpolicyattr_;
}
void SLBgplsTopoAttr::set_allocated_nodeattr(::service_layer::SLBgplsTopoNodeAttr* nodeattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Attr();
  if (nodeattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNodeAttr>::GetOwningArena(nodeattr);
    if (message_arena != submessage_arena) {
      nodeattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeattr, submessage_arena);
    }
    set_has_nodeattr();
    Attr_.nodeattr_ = nodeattr;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAttr.NodeAttr)
}
void SLBgplsTopoAttr::set_allocated_linkattr(::service_layer::SLBgplsTopoLinkAttr* linkattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Attr();
  if (linkattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkAttr>::GetOwningArena(linkattr);
    if (message_arena != submessage_arena) {
      linkattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkattr, submessage_arena);
    }
    set_has_linkattr();
    Attr_.linkattr_ = linkattr;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAttr.LinkAttr)
}
void SLBgplsTopoAttr::set_allocated_prefixattr(::service_layer::SLBgplsTopoPrefixAttr* prefixattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Attr();
  if (prefixattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixAttr>::GetOwningArena(prefixattr);
    if (message_arena != submessage_arena) {
      prefixattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefixattr, submessage_arena);
    }
    set_has_prefixattr();
    Attr_.prefixattr_ = prefixattr;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAttr.PrefixAttr)
}
void SLBgplsTopoAttr::set_allocated_srv6sidattr(::service_layer::SLBgplsTopoSrv6SidAttr* srv6sidattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Attr();
  if (srv6sidattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidAttr>::GetOwningArena(srv6sidattr);
    if (message_arena != submessage_arena) {
      srv6sidattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6sidattr, submessage_arena);
    }
    set_has_srv6sidattr();
    Attr_.srv6sidattr_ = srv6sidattr;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAttr.Srv6SidAttr)
}
void SLBgplsTopoAttr::set_allocated_srpolicyattr(::service_layer::SLBgplsTopoSrPolicyAttr* srpolicyattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Attr();
  if (srpolicyattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicyAttr>::GetOwningArena(srpolicyattr);
    if (message_arena != submessage_arena) {
      srpolicyattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicyattr, submessage_arena);
    }
    set_has_srpolicyattr();
    Attr_.srpolicyattr_ = srpolicyattr;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAttr.SrPolicyAttr)
}
SLBgplsTopoAttr::SLBgplsTopoAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoAttr)
}
SLBgplsTopoAttr::SLBgplsTopoAttr(const SLBgplsTopoAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attrtype_ = from.attrtype_;
  clear_has_Attr();
  switch (from.Attr_case()) {
    case kNodeAttr: {
      _internal_mutable_nodeattr()->::service_layer::SLBgplsTopoNodeAttr::MergeFrom(from._internal_nodeattr());
      break;
    }
    case kLinkAttr: {
      _internal_mutable_linkattr()->::service_layer::SLBgplsTopoLinkAttr::MergeFrom(from._internal_linkattr());
      break;
    }
    case kPrefixAttr: {
      _internal_mutable_prefixattr()->::service_layer::SLBgplsTopoPrefixAttr::MergeFrom(from._internal_prefixattr());
      break;
    }
    case kSrv6SidAttr: {
      _internal_mutable_srv6sidattr()->::service_layer::SLBgplsTopoSrv6SidAttr::MergeFrom(from._internal_srv6sidattr());
      break;
    }
    case kSrPolicyAttr: {
      _internal_mutable_srpolicyattr()->::service_layer::SLBgplsTopoSrPolicyAttr::MergeFrom(from._internal_srpolicyattr());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoAttr)
}

inline void SLBgplsTopoAttr::SharedCtor() {
attrtype_ = 0;
clear_has_Attr();
}

SLBgplsTopoAttr::~SLBgplsTopoAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Attr()) {
    clear_Attr();
  }
}

void SLBgplsTopoAttr::ArenaDtor(void* object) {
  SLBgplsTopoAttr* _this = reinterpret_cast< SLBgplsTopoAttr* >(object);
  (void)_this;
}
void SLBgplsTopoAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoAttr::clear_Attr() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoAttr)
  switch (Attr_case()) {
    case kNodeAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete Attr_.nodeattr_;
      }
      break;
    }
    case kLinkAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete Attr_.linkattr_;
      }
      break;
    }
    case kPrefixAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete Attr_.prefixattr_;
      }
      break;
    }
    case kSrv6SidAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete Attr_.srv6sidattr_;
      }
      break;
    }
    case kSrPolicyAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete Attr_.srpolicyattr_;
      }
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTR_NOT_SET;
}


void SLBgplsTopoAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrtype_ = 0;
  clear_Attr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefixattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidAttr Srv6SidAttr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_srv6sidattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrPolicyAttr SrPolicyAttr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_srpolicyattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAttrType AttrType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attrtype(static_cast<::service_layer::SLBgplsTopoAttrType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 1;
  if (_internal_has_nodeattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodeattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
  if (_internal_has_linkattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linkattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 3;
  if (_internal_has_prefixattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prefixattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6SidAttr Srv6SidAttr = 4;
  if (_internal_has_srv6sidattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::srv6sidattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrPolicyAttr SrPolicyAttr = 5;
  if (_internal_has_srpolicyattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::srpolicyattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoAttrType AttrType = 6;
  if (this->_internal_attrtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_attrtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoAttr)
  return target;
}

size_t SLBgplsTopoAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoAttrType AttrType = 6;
  if (this->_internal_attrtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_attrtype());
  }

  switch (Attr_case()) {
    // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 1;
    case kNodeAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Attr_.nodeattr_);
      break;
    }
    // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
    case kLinkAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Attr_.linkattr_);
      break;
    }
    // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 3;
    case kPrefixAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Attr_.prefixattr_);
      break;
    }
    // .service_layer.SLBgplsTopoSrv6SidAttr Srv6SidAttr = 4;
    case kSrv6SidAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Attr_.srv6sidattr_);
      break;
    }
    // .service_layer.SLBgplsTopoSrPolicyAttr SrPolicyAttr = 5;
    case kSrPolicyAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Attr_.srpolicyattr_);
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoAttr &>(from));
}


void SLBgplsTopoAttr::MergeFrom(const SLBgplsTopoAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attrtype() != 0) {
    _internal_set_attrtype(from._internal_attrtype());
  }
  switch (from.Attr_case()) {
    case kNodeAttr: {
      _internal_mutable_nodeattr()->::service_layer::SLBgplsTopoNodeAttr::MergeFrom(from._internal_nodeattr());
      break;
    }
    case kLinkAttr: {
      _internal_mutable_linkattr()->::service_layer::SLBgplsTopoLinkAttr::MergeFrom(from._internal_linkattr());
      break;
    }
    case kPrefixAttr: {
      _internal_mutable_prefixattr()->::service_layer::SLBgplsTopoPrefixAttr::MergeFrom(from._internal_prefixattr());
      break;
    }
    case kSrv6SidAttr: {
      _internal_mutable_srv6sidattr()->::service_layer::SLBgplsTopoSrv6SidAttr::MergeFrom(from._internal_srv6sidattr());
      break;
    }
    case kSrPolicyAttr: {
      _internal_mutable_srpolicyattr()->::service_layer::SLBgplsTopoSrPolicyAttr::MergeFrom(from._internal_srpolicyattr());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoAttr::CopyFrom(const SLBgplsTopoAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoAttr::InternalSwap(SLBgplsTopoAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(attrtype_, other->attrtype_);
  swap(Attr_, other->Attr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[23]);
}

// ===================================================================

class SLBgplsTopoNodeAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeFlagBits& nodeflagbits(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsTopoNodeOpaqueAttr& opaquenodeattr(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsNodeName& nodename(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsTopoSrgbIsisFlags& srgbisisflags(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsTopoSrAlgorithm& sralgorithm(const SLBgplsTopoNodeAttr* msg);
};

const ::service_layer::SLBgplsTopoNodeFlagBits&
SLBgplsTopoNodeAttr::_Internal::nodeflagbits(const SLBgplsTopoNodeAttr* msg) {
  return *msg->nodeflagbits_;
}
const ::service_layer::SLBgplsTopoNodeOpaqueAttr&
SLBgplsTopoNodeAttr::_Internal::opaquenodeattr(const SLBgplsTopoNodeAttr* msg) {
  return *msg->opaquenodeattr_;
}
const ::service_layer::SLBgplsNodeName&
SLBgplsTopoNodeAttr::_Internal::nodename(const SLBgplsTopoNodeAttr* msg) {
  return *msg->nodename_;
}
const ::service_layer::SLBgplsTopoSrgbIsisFlags&
SLBgplsTopoNodeAttr::_Internal::srgbisisflags(const SLBgplsTopoNodeAttr* msg) {
  return *msg->srgbisisflags_;
}
const ::service_layer::SLBgplsTopoSrAlgorithm&
SLBgplsTopoNodeAttr::_Internal::sralgorithm(const SLBgplsTopoNodeAttr* msg) {
  return *msg->sralgorithm_;
}
SLBgplsTopoNodeAttr::SLBgplsTopoNodeAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mtid_(arena),
  nodemsd_(arena),
  isisareaid_(arena),
  localipv4_(arena),
  localipv6_(arena),
  srgb_(arena),
  srlb_(arena),
  fad_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeAttr)
}
SLBgplsTopoNodeAttr::SLBgplsTopoNodeAttr(const SLBgplsTopoNodeAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mtid_(from.mtid_),
      nodemsd_(from.nodemsd_),
      isisareaid_(from.isisareaid_),
      localipv4_(from.localipv4_),
      localipv6_(from.localipv6_),
      srgb_(from.srgb_),
      srlb_(from.srlb_),
      fad_(from.fad_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodeflagbits()) {
    nodeflagbits_ = new ::service_layer::SLBgplsTopoNodeFlagBits(*from.nodeflagbits_);
  } else {
    nodeflagbits_ = nullptr;
  }
  if (from._internal_has_opaquenodeattr()) {
    opaquenodeattr_ = new ::service_layer::SLBgplsTopoNodeOpaqueAttr(*from.opaquenodeattr_);
  } else {
    opaquenodeattr_ = nullptr;
  }
  if (from._internal_has_nodename()) {
    nodename_ = new ::service_layer::SLBgplsNodeName(*from.nodename_);
  } else {
    nodename_ = nullptr;
  }
  if (from._internal_has_srgbisisflags()) {
    srgbisisflags_ = new ::service_layer::SLBgplsTopoSrgbIsisFlags(*from.srgbisisflags_);
  } else {
    srgbisisflags_ = nullptr;
  }
  if (from._internal_has_sralgorithm()) {
    sralgorithm_ = new ::service_layer::SLBgplsTopoSrAlgorithm(*from.sralgorithm_);
  } else {
    sralgorithm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeAttr)
}

inline void SLBgplsTopoNodeAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodeflagbits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sralgorithm_) -
    reinterpret_cast<char*>(&nodeflagbits_)) + sizeof(sralgorithm_));
}

SLBgplsTopoNodeAttr::~SLBgplsTopoNodeAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodeflagbits_;
  if (this != internal_default_instance()) delete opaquenodeattr_;
  if (this != internal_default_instance()) delete nodename_;
  if (this != internal_default_instance()) delete srgbisisflags_;
  if (this != internal_default_instance()) delete sralgorithm_;
}

void SLBgplsTopoNodeAttr::ArenaDtor(void* object) {
  SLBgplsTopoNodeAttr* _this = reinterpret_cast< SLBgplsTopoNodeAttr* >(object);
  (void)_this;
}
void SLBgplsTopoNodeAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtid_.Clear();
  nodemsd_.Clear();
  isisareaid_.Clear();
  localipv4_.Clear();
  localipv6_.Clear();
  srgb_.Clear();
  srlb_.Clear();
  fad_.Clear();
  if (GetArenaForAllocation() == nullptr && nodeflagbits_ != nullptr) {
    delete nodeflagbits_;
  }
  nodeflagbits_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opaquenodeattr_ != nullptr) {
    delete opaquenodeattr_;
  }
  opaquenodeattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nodename_ != nullptr) {
    delete nodename_;
  }
  nodename_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srgbisisflags_ != nullptr) {
    delete srgbisisflags_;
  }
  srgbisisflags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sralgorithm_ != nullptr) {
    delete sralgorithm_;
  }
  sralgorithm_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mtid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodemsd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeflagbits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaquenodeattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsNodeName NodeName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_isisareaid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv6(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_srgbisisflags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srgb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sralgorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srlb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoFad Fad = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mtid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mtid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodemsd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nodemsd(i), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
  if (this->_internal_has_nodeflagbits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nodeflagbits(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
  if (this->_internal_has_opaquenodeattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::opaquenodeattr(this), target, stream);
  }

  // .service_layer.SLBgplsNodeName NodeName = 5;
  if (this->_internal_has_nodename()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nodename(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_isisareaid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_isisareaid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv4_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_localipv4(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv6_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_localipv6(i), target, stream);
  }

  // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
  if (this->_internal_has_srgbisisflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::srgbisisflags(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srgb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_srgb(i), target, stream);
  }

  // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
  if (this->_internal_has_sralgorithm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::sralgorithm(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srlb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_srlb(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoFad Fad = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_fad(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeAttr)
  return target;
}

size_t SLBgplsTopoNodeAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
  total_size += 1UL * this->_internal_mtid_size();
  for (const auto& msg : this->mtid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
  total_size += 1UL * this->_internal_nodemsd_size();
  for (const auto& msg : this->nodemsd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
  total_size += 1UL * this->_internal_isisareaid_size();
  for (const auto& msg : this->isisareaid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
  total_size += 1UL * this->_internal_localipv4_size();
  for (const auto& msg : this->localipv4_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
  total_size += 1UL * this->_internal_localipv6_size();
  for (const auto& msg : this->localipv6_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
  total_size += 1UL * this->_internal_srgb_size();
  for (const auto& msg : this->srgb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
  total_size += 1UL * this->_internal_srlb_size();
  for (const auto& msg : this->srlb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoFad Fad = 13;
  total_size += 1UL * this->_internal_fad_size();
  for (const auto& msg : this->fad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
  if (this->_internal_has_nodeflagbits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeflagbits_);
  }

  // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
  if (this->_internal_has_opaquenodeattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opaquenodeattr_);
  }

  // .service_layer.SLBgplsNodeName NodeName = 5;
  if (this->_internal_has_nodename()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodename_);
  }

  // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
  if (this->_internal_has_srgbisisflags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srgbisisflags_);
  }

  // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
  if (this->_internal_has_sralgorithm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sralgorithm_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeAttr &>(from));
}


void SLBgplsTopoNodeAttr::MergeFrom(const SLBgplsTopoNodeAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mtid_.MergeFrom(from.mtid_);
  nodemsd_.MergeFrom(from.nodemsd_);
  isisareaid_.MergeFrom(from.isisareaid_);
  localipv4_.MergeFrom(from.localipv4_);
  localipv6_.MergeFrom(from.localipv6_);
  srgb_.MergeFrom(from.srgb_);
  srlb_.MergeFrom(from.srlb_);
  fad_.MergeFrom(from.fad_);
  if (from._internal_has_nodeflagbits()) {
    _internal_mutable_nodeflagbits()->::service_layer::SLBgplsTopoNodeFlagBits::MergeFrom(from._internal_nodeflagbits());
  }
  if (from._internal_has_opaquenodeattr()) {
    _internal_mutable_opaquenodeattr()->::service_layer::SLBgplsTopoNodeOpaqueAttr::MergeFrom(from._internal_opaquenodeattr());
  }
  if (from._internal_has_nodename()) {
    _internal_mutable_nodename()->::service_layer::SLBgplsNodeName::MergeFrom(from._internal_nodename());
  }
  if (from._internal_has_srgbisisflags()) {
    _internal_mutable_srgbisisflags()->::service_layer::SLBgplsTopoSrgbIsisFlags::MergeFrom(from._internal_srgbisisflags());
  }
  if (from._internal_has_sralgorithm()) {
    _internal_mutable_sralgorithm()->::service_layer::SLBgplsTopoSrAlgorithm::MergeFrom(from._internal_sralgorithm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeAttr::CopyFrom(const SLBgplsTopoNodeAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeAttr::InternalSwap(SLBgplsTopoNodeAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mtid_.InternalSwap(&other->mtid_);
  nodemsd_.InternalSwap(&other->nodemsd_);
  isisareaid_.InternalSwap(&other->isisareaid_);
  localipv4_.InternalSwap(&other->localipv4_);
  localipv6_.InternalSwap(&other->localipv6_);
  srgb_.InternalSwap(&other->srgb_);
  srlb_.InternalSwap(&other->srlb_);
  fad_.InternalSwap(&other->fad_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeAttr, sralgorithm_)
      + sizeof(SLBgplsTopoNodeAttr::sralgorithm_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeAttr, nodeflagbits_)>(
          reinterpret_cast<char*>(&nodeflagbits_),
          reinterpret_cast<char*>(&other->nodeflagbits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[24]);
}

// ===================================================================

class SLBgplsTopoLinkAttr::_Internal {
 public:
  static const ::service_layer::SLBplsTopoLinkLocRemId& linklocremid(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxBandwidth& maxbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& maxresvbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkProtecionType& protectiontype(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMplsProtoMask& mplsprotomask(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkIgpMetric& igpmetric(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkOpaqueAttr& opaqueattr(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkName& linkname(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxunilinkdelay(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvar(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth(const SLBgplsTopoLinkAttr* msg);
};

const ::service_layer::SLBplsTopoLinkLocRemId&
SLBgplsTopoLinkAttr::_Internal::linklocremid(const SLBgplsTopoLinkAttr* msg) {
  return *msg->linklocremid_;
}
const ::service_layer::SLBgplsTopoLinkMaxBandwidth&
SLBgplsTopoLinkAttr::_Internal::maxbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->maxbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth&
SLBgplsTopoLinkAttr::_Internal::maxresvbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->maxresvbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&
SLBgplsTopoLinkAttr::_Internal::tedefmetric(const SLBgplsTopoLinkAttr* msg) {
  return *msg->tedefmetric_;
}
const ::service_layer::SLBgplsTopoLinkProtecionType&
SLBgplsTopoLinkAttr::_Internal::protectiontype(const SLBgplsTopoLinkAttr* msg) {
  return *msg->protectiontype_;
}
const ::service_layer::SLBgplsTopoLinkMplsProtoMask&
SLBgplsTopoLinkAttr::_Internal::mplsprotomask(const SLBgplsTopoLinkAttr* msg) {
  return *msg->mplsprotomask_;
}
const ::service_layer::SLBgplsTopoLinkIgpMetric&
SLBgplsTopoLinkAttr::_Internal::igpmetric(const SLBgplsTopoLinkAttr* msg) {
  return *msg->igpmetric_;
}
const ::service_layer::SLBgplsTopoLinkOpaqueAttr&
SLBgplsTopoLinkAttr::_Internal::opaqueattr(const SLBgplsTopoLinkAttr* msg) {
  return *msg->opaqueattr_;
}
const ::service_layer::SLBgplsTopoLinkName&
SLBgplsTopoLinkAttr::_Internal::linkname(const SLBgplsTopoLinkAttr* msg) {
  return *msg->linkname_;
}
const ::service_layer::SLBgplsTopoUniLinkDelay&
SLBgplsTopoLinkAttr::_Internal::unilinkdelay(const SLBgplsTopoLinkAttr* msg) {
  return *msg->unilinkdelay_;
}
const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&
SLBgplsTopoLinkAttr::_Internal::minmaxunilinkdelay(const SLBgplsTopoLinkAttr* msg) {
  return *msg->minmaxunilinkdelay_;
}
const ::service_layer::SLBgplsTopoUniDelayVar&
SLBgplsTopoLinkAttr::_Internal::unidelayvar(const SLBgplsTopoLinkAttr* msg) {
  return *msg->unidelayvar_;
}
const ::service_layer::SLBgplsTopoUniLinkLoss&
SLBgplsTopoLinkAttr::_Internal::unilinkloss(const SLBgplsTopoLinkAttr* msg) {
  return *msg->unilinkloss_;
}
const ::service_layer::SLBgplsTopoUniResBandwidth&
SLBgplsTopoLinkAttr::_Internal::uniresbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->uniresbandwidth_;
}
const ::service_layer::SLBgplsTopoUniAvailBandwidth&
SLBgplsTopoLinkAttr::_Internal::uniavailbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->uniavailbandwidth_;
}
const ::service_layer::SLBgplsTopoUniUtilBandwidth&
SLBgplsTopoLinkAttr::_Internal::uniutilbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->uniutilbandwidth_;
}
SLBgplsTopoLinkAttr::SLBgplsTopoLinkAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  linkmsd_(arena),
  localipv4routerid_(arena),
  localipv6routerid_(arena),
  remoteipv4routerid_(arena),
  remoteipv6routerid_(arena),
  extadmingroup_(arena),
  unresvbandwidth_(arena),
  srlg_(arena),
  adjsid_(arena),
  lanadjsid_(arena),
  srv6endxsid_(arena),
  srv6lanendxsid_(arena),
  asla_(arena),
  l2bundlememberattr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkAttr)
}
SLBgplsTopoLinkAttr::SLBgplsTopoLinkAttr(const SLBgplsTopoLinkAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linkmsd_(from.linkmsd_),
      localipv4routerid_(from.localipv4routerid_),
      localipv6routerid_(from.localipv6routerid_),
      remoteipv4routerid_(from.remoteipv4routerid_),
      remoteipv6routerid_(from.remoteipv6routerid_),
      extadmingroup_(from.extadmingroup_),
      unresvbandwidth_(from.unresvbandwidth_),
      srlg_(from.srlg_),
      adjsid_(from.adjsid_),
      lanadjsid_(from.lanadjsid_),
      srv6endxsid_(from.srv6endxsid_),
      srv6lanendxsid_(from.srv6lanendxsid_),
      asla_(from.asla_),
      l2bundlememberattr_(from.l2bundlememberattr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linklocremid()) {
    linklocremid_ = new ::service_layer::SLBplsTopoLinkLocRemId(*from.linklocremid_);
  } else {
    linklocremid_ = nullptr;
  }
  if (from._internal_has_maxbandwidth()) {
    maxbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxBandwidth(*from.maxbandwidth_);
  } else {
    maxbandwidth_ = nullptr;
  }
  if (from._internal_has_maxresvbandwidth()) {
    maxresvbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxResvBandwidth(*from.maxresvbandwidth_);
  } else {
    maxresvbandwidth_ = nullptr;
  }
  if (from._internal_has_tedefmetric()) {
    tedefmetric_ = new ::service_layer::SLBgplsTopoLinkTeDefaultMetric(*from.tedefmetric_);
  } else {
    tedefmetric_ = nullptr;
  }
  if (from._internal_has_protectiontype()) {
    protectiontype_ = new ::service_layer::SLBgplsTopoLinkProtecionType(*from.protectiontype_);
  } else {
    protectiontype_ = nullptr;
  }
  if (from._internal_has_mplsprotomask()) {
    mplsprotomask_ = new ::service_layer::SLBgplsTopoLinkMplsProtoMask(*from.mplsprotomask_);
  } else {
    mplsprotomask_ = nullptr;
  }
  if (from._internal_has_igpmetric()) {
    igpmetric_ = new ::service_layer::SLBgplsTopoLinkIgpMetric(*from.igpmetric_);
  } else {
    igpmetric_ = nullptr;
  }
  if (from._internal_has_opaqueattr()) {
    opaqueattr_ = new ::service_layer::SLBgplsTopoLinkOpaqueAttr(*from.opaqueattr_);
  } else {
    opaqueattr_ = nullptr;
  }
  if (from._internal_has_linkname()) {
    linkname_ = new ::service_layer::SLBgplsTopoLinkName(*from.linkname_);
  } else {
    linkname_ = nullptr;
  }
  if (from._internal_has_unilinkdelay()) {
    unilinkdelay_ = new ::service_layer::SLBgplsTopoUniLinkDelay(*from.unilinkdelay_);
  } else {
    unilinkdelay_ = nullptr;
  }
  if (from._internal_has_minmaxunilinkdelay()) {
    minmaxunilinkdelay_ = new ::service_layer::SLBgplsTopoMinMaxUniLinkDelay(*from.minmaxunilinkdelay_);
  } else {
    minmaxunilinkdelay_ = nullptr;
  }
  if (from._internal_has_unidelayvar()) {
    unidelayvar_ = new ::service_layer::SLBgplsTopoUniDelayVar(*from.unidelayvar_);
  } else {
    unidelayvar_ = nullptr;
  }
  if (from._internal_has_unilinkloss()) {
    unilinkloss_ = new ::service_layer::SLBgplsTopoUniLinkLoss(*from.unilinkloss_);
  } else {
    unilinkloss_ = nullptr;
  }
  if (from._internal_has_uniresbandwidth()) {
    uniresbandwidth_ = new ::service_layer::SLBgplsTopoUniResBandwidth(*from.uniresbandwidth_);
  } else {
    uniresbandwidth_ = nullptr;
  }
  if (from._internal_has_uniavailbandwidth()) {
    uniavailbandwidth_ = new ::service_layer::SLBgplsTopoUniAvailBandwidth(*from.uniavailbandwidth_);
  } else {
    uniavailbandwidth_ = nullptr;
  }
  if (from._internal_has_uniutilbandwidth()) {
    uniutilbandwidth_ = new ::service_layer::SLBgplsTopoUniUtilBandwidth(*from.uniutilbandwidth_);
  } else {
    uniutilbandwidth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkAttr)
}

inline void SLBgplsTopoLinkAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linklocremid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uniutilbandwidth_) -
    reinterpret_cast<char*>(&linklocremid_)) + sizeof(uniutilbandwidth_));
}

SLBgplsTopoLinkAttr::~SLBgplsTopoLinkAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete linklocremid_;
  if (this != internal_default_instance()) delete maxbandwidth_;
  if (this != internal_default_instance()) delete maxresvbandwidth_;
  if (this != internal_default_instance()) delete tedefmetric_;
  if (this != internal_default_instance()) delete protectiontype_;
  if (this != internal_default_instance()) delete mplsprotomask_;
  if (this != internal_default_instance()) delete igpmetric_;
  if (this != internal_default_instance()) delete opaqueattr_;
  if (this != internal_default_instance()) delete linkname_;
  if (this != internal_default_instance()) delete unilinkdelay_;
  if (this != internal_default_instance()) delete minmaxunilinkdelay_;
  if (this != internal_default_instance()) delete unidelayvar_;
  if (this != internal_default_instance()) delete unilinkloss_;
  if (this != internal_default_instance()) delete uniresbandwidth_;
  if (this != internal_default_instance()) delete uniavailbandwidth_;
  if (this != internal_default_instance()) delete uniutilbandwidth_;
}

void SLBgplsTopoLinkAttr::ArenaDtor(void* object) {
  SLBgplsTopoLinkAttr* _this = reinterpret_cast< SLBgplsTopoLinkAttr* >(object);
  (void)_this;
}
void SLBgplsTopoLinkAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linkmsd_.Clear();
  localipv4routerid_.Clear();
  localipv6routerid_.Clear();
  remoteipv4routerid_.Clear();
  remoteipv6routerid_.Clear();
  extadmingroup_.Clear();
  unresvbandwidth_.Clear();
  srlg_.Clear();
  adjsid_.Clear();
  lanadjsid_.Clear();
  srv6endxsid_.Clear();
  srv6lanendxsid_.Clear();
  asla_.Clear();
  l2bundlememberattr_.Clear();
  if (GetArenaForAllocation() == nullptr && linklocremid_ != nullptr) {
    delete linklocremid_;
  }
  linklocremid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxbandwidth_ != nullptr) {
    delete maxbandwidth_;
  }
  maxbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxresvbandwidth_ != nullptr) {
    delete maxresvbandwidth_;
  }
  maxresvbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protectiontype_ != nullptr) {
    delete protectiontype_;
  }
  protectiontype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mplsprotomask_ != nullptr) {
    delete mplsprotomask_;
  }
  mplsprotomask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && igpmetric_ != nullptr) {
    delete igpmetric_;
  }
  igpmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opaqueattr_ != nullptr) {
    delete opaqueattr_;
  }
  opaqueattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linkname_ != nullptr) {
    delete linkname_;
  }
  linkname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minmaxunilinkdelay_ != nullptr) {
    delete minmaxunilinkdelay_;
  }
  minmaxunilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unidelayvar_ != nullptr) {
    delete unidelayvar_;
  }
  unidelayvar_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linklocremid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linkmsd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv4routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv6routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remoteipv4routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remoteipv6routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extadmingroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxresvbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unresvbandwidth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tedefmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkProtecionType ProtectionType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectiontype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplsprotomask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_igpmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srlg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaqueattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkName LinkName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lanadjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrv6EndXSid Srv6EndXSid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_srv6endxsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrv6LanEndXSid Srv6LanEndXSid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_srv6lanendxsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_minmaxunilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_unidelayvar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkloss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniresbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniavailbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniutilbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_asla(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_l2bundlememberattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
  if (this->_internal_has_linklocremid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linklocremid(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linkmsd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_linkmsd(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv4routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_localipv4routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv6routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_localipv6routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remoteipv4routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_remoteipv4routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remoteipv6routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_remoteipv6routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extadmingroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_extadmingroup(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
  if (this->_internal_has_maxbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::maxbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
  if (this->_internal_has_maxresvbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::maxresvbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unresvbandwidth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_unresvbandwidth(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
  if (this->_internal_has_tedefmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tedefmetric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkProtecionType ProtectionType = 12;
  if (this->_internal_has_protectiontype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::protectiontype(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
  if (this->_internal_has_mplsprotomask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::mplsprotomask(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
  if (this->_internal_has_igpmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::igpmetric(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srlg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_srlg(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
  if (this->_internal_has_opaqueattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::opaqueattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkName LinkName = 17;
  if (this->_internal_has_linkname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::linkname(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_adjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanadjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_lanadjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrv6EndXSid Srv6EndXSid = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srv6endxsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_srv6endxsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrv6LanEndXSid Srv6LanEndXSid = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srv6lanendxsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_srv6lanendxsid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 22;
  if (this->_internal_has_unilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::unilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 23;
  if (this->_internal_has_minmaxunilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::minmaxunilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 24;
  if (this->_internal_has_unidelayvar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::unidelayvar(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 25;
  if (this->_internal_has_unilinkloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::unilinkloss(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 26;
  if (this->_internal_has_uniresbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::uniresbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 27;
  if (this->_internal_has_uniavailbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::uniavailbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 28;
  if (this->_internal_has_uniutilbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::uniutilbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asla_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_asla(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_l2bundlememberattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_l2bundlememberattr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkAttr)
  return target;
}

size_t SLBgplsTopoLinkAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
  total_size += 1UL * this->_internal_linkmsd_size();
  for (const auto& msg : this->linkmsd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
  total_size += 1UL * this->_internal_localipv4routerid_size();
  for (const auto& msg : this->localipv4routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
  total_size += 1UL * this->_internal_localipv6routerid_size();
  for (const auto& msg : this->localipv6routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
  total_size += 1UL * this->_internal_remoteipv4routerid_size();
  for (const auto& msg : this->remoteipv4routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
  total_size += 1UL * this->_internal_remoteipv6routerid_size();
  for (const auto& msg : this->remoteipv6routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 7;
  total_size += 1UL * this->_internal_extadmingroup_size();
  for (const auto& msg : this->extadmingroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
  total_size += 1UL * this->_internal_unresvbandwidth_size();
  for (const auto& msg : this->unresvbandwidth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
  total_size += 1UL * this->_internal_srlg_size();
  for (const auto& msg : this->srlg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
  total_size += 2UL * this->_internal_adjsid_size();
  for (const auto& msg : this->adjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
  total_size += 2UL * this->_internal_lanadjsid_size();
  for (const auto& msg : this->lanadjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoSrv6EndXSid Srv6EndXSid = 20;
  total_size += 2UL * this->_internal_srv6endxsid_size();
  for (const auto& msg : this->srv6endxsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoSrv6LanEndXSid Srv6LanEndXSid = 21;
  total_size += 2UL * this->_internal_srv6lanendxsid_size();
  for (const auto& msg : this->srv6lanendxsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 29;
  total_size += 2UL * this->_internal_asla_size();
  for (const auto& msg : this->asla_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 30;
  total_size += 2UL * this->_internal_l2bundlememberattr_size();
  for (const auto& msg : this->l2bundlememberattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
  if (this->_internal_has_linklocremid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linklocremid_);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
  if (this->_internal_has_maxbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
  if (this->_internal_has_maxresvbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxresvbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
  if (this->_internal_has_tedefmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tedefmetric_);
  }

  // .service_layer.SLBgplsTopoLinkProtecionType ProtectionType = 12;
  if (this->_internal_has_protectiontype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectiontype_);
  }

  // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
  if (this->_internal_has_mplsprotomask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mplsprotomask_);
  }

  // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
  if (this->_internal_has_igpmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *igpmetric_);
  }

  // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
  if (this->_internal_has_opaqueattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opaqueattr_);
  }

  // .service_layer.SLBgplsTopoLinkName LinkName = 17;
  if (this->_internal_has_linkname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linkname_);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 22;
  if (this->_internal_has_unilinkdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkdelay_);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 23;
  if (this->_internal_has_minmaxunilinkdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minmaxunilinkdelay_);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 24;
  if (this->_internal_has_unidelayvar()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unidelayvar_);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 25;
  if (this->_internal_has_unilinkloss()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkloss_);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 26;
  if (this->_internal_has_uniresbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniresbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 27;
  if (this->_internal_has_uniavailbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniavailbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 28;
  if (this->_internal_has_uniutilbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniutilbandwidth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkAttr &>(from));
}


void SLBgplsTopoLinkAttr::MergeFrom(const SLBgplsTopoLinkAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  linkmsd_.MergeFrom(from.linkmsd_);
  localipv4routerid_.MergeFrom(from.localipv4routerid_);
  localipv6routerid_.MergeFrom(from.localipv6routerid_);
  remoteipv4routerid_.MergeFrom(from.remoteipv4routerid_);
  remoteipv6routerid_.MergeFrom(from.remoteipv6routerid_);
  extadmingroup_.MergeFrom(from.extadmingroup_);
  unresvbandwidth_.MergeFrom(from.unresvbandwidth_);
  srlg_.MergeFrom(from.srlg_);
  adjsid_.MergeFrom(from.adjsid_);
  lanadjsid_.MergeFrom(from.lanadjsid_);
  srv6endxsid_.MergeFrom(from.srv6endxsid_);
  srv6lanendxsid_.MergeFrom(from.srv6lanendxsid_);
  asla_.MergeFrom(from.asla_);
  l2bundlememberattr_.MergeFrom(from.l2bundlememberattr_);
  if (from._internal_has_linklocremid()) {
    _internal_mutable_linklocremid()->::service_layer::SLBplsTopoLinkLocRemId::MergeFrom(from._internal_linklocremid());
  }
  if (from._internal_has_maxbandwidth()) {
    _internal_mutable_maxbandwidth()->::service_layer::SLBgplsTopoLinkMaxBandwidth::MergeFrom(from._internal_maxbandwidth());
  }
  if (from._internal_has_maxresvbandwidth()) {
    _internal_mutable_maxresvbandwidth()->::service_layer::SLBgplsTopoLinkMaxResvBandwidth::MergeFrom(from._internal_maxresvbandwidth());
  }
  if (from._internal_has_tedefmetric()) {
    _internal_mutable_tedefmetric()->::service_layer::SLBgplsTopoLinkTeDefaultMetric::MergeFrom(from._internal_tedefmetric());
  }
  if (from._internal_has_protectiontype()) {
    _internal_mutable_protectiontype()->::service_layer::SLBgplsTopoLinkProtecionType::MergeFrom(from._internal_protectiontype());
  }
  if (from._internal_has_mplsprotomask()) {
    _internal_mutable_mplsprotomask()->::service_layer::SLBgplsTopoLinkMplsProtoMask::MergeFrom(from._internal_mplsprotomask());
  }
  if (from._internal_has_igpmetric()) {
    _internal_mutable_igpmetric()->::service_layer::SLBgplsTopoLinkIgpMetric::MergeFrom(from._internal_igpmetric());
  }
  if (from._internal_has_opaqueattr()) {
    _internal_mutable_opaqueattr()->::service_layer::SLBgplsTopoLinkOpaqueAttr::MergeFrom(from._internal_opaqueattr());
  }
  if (from._internal_has_linkname()) {
    _internal_mutable_linkname()->::service_layer::SLBgplsTopoLinkName::MergeFrom(from._internal_linkname());
  }
  if (from._internal_has_unilinkdelay()) {
    _internal_mutable_unilinkdelay()->::service_layer::SLBgplsTopoUniLinkDelay::MergeFrom(from._internal_unilinkdelay());
  }
  if (from._internal_has_minmaxunilinkdelay()) {
    _internal_mutable_minmaxunilinkdelay()->::service_layer::SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(from._internal_minmaxunilinkdelay());
  }
  if (from._internal_has_unidelayvar()) {
    _internal_mutable_unidelayvar()->::service_layer::SLBgplsTopoUniDelayVar::MergeFrom(from._internal_unidelayvar());
  }
  if (from._internal_has_unilinkloss()) {
    _internal_mutable_unilinkloss()->::service_layer::SLBgplsTopoUniLinkLoss::MergeFrom(from._internal_unilinkloss());
  }
  if (from._internal_has_uniresbandwidth()) {
    _internal_mutable_uniresbandwidth()->::service_layer::SLBgplsTopoUniResBandwidth::MergeFrom(from._internal_uniresbandwidth());
  }
  if (from._internal_has_uniavailbandwidth()) {
    _internal_mutable_uniavailbandwidth()->::service_layer::SLBgplsTopoUniAvailBandwidth::MergeFrom(from._internal_uniavailbandwidth());
  }
  if (from._internal_has_uniutilbandwidth()) {
    _internal_mutable_uniutilbandwidth()->::service_layer::SLBgplsTopoUniUtilBandwidth::MergeFrom(from._internal_uniutilbandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkAttr::CopyFrom(const SLBgplsTopoLinkAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkAttr::InternalSwap(SLBgplsTopoLinkAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linkmsd_.InternalSwap(&other->linkmsd_);
  localipv4routerid_.InternalSwap(&other->localipv4routerid_);
  localipv6routerid_.InternalSwap(&other->localipv6routerid_);
  remoteipv4routerid_.InternalSwap(&other->remoteipv4routerid_);
  remoteipv6routerid_.InternalSwap(&other->remoteipv6routerid_);
  extadmingroup_.InternalSwap(&other->extadmingroup_);
  unresvbandwidth_.InternalSwap(&other->unresvbandwidth_);
  srlg_.InternalSwap(&other->srlg_);
  adjsid_.InternalSwap(&other->adjsid_);
  lanadjsid_.InternalSwap(&other->lanadjsid_);
  srv6endxsid_.InternalSwap(&other->srv6endxsid_);
  srv6lanendxsid_.InternalSwap(&other->srv6lanendxsid_);
  asla_.InternalSwap(&other->asla_);
  l2bundlememberattr_.InternalSwap(&other->l2bundlememberattr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkAttr, uniutilbandwidth_)
      + sizeof(SLBgplsTopoLinkAttr::uniutilbandwidth_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkAttr, linklocremid_)>(
          reinterpret_cast<char*>(&linklocremid_),
          reinterpret_cast<char*>(&other->linklocremid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[25]);
}

// ===================================================================

class SLBgplsTopoPrefixAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoPrefixFAPM& fapm(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixIgpFlags& igpflags(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixMetric& metric(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr& ospffwdaddr(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixOpaqueAttr& opaqueattr(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixSid& sid(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixRange& range(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixSrv6Loc& srv6loc(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixAttrFlags& attrflags(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixSrcRouterId& srcrouterid(const SLBgplsTopoPrefixAttr* msg);
};

const ::service_layer::SLBgplsTopoPrefixFAPM&
SLBgplsTopoPrefixAttr::_Internal::fapm(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->fapm_;
}
const ::service_layer::SLBgplsTopoPrefixIgpFlags&
SLBgplsTopoPrefixAttr::_Internal::igpflags(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->igpflags_;
}
const ::service_layer::SLBgplsTopoPrefixMetric&
SLBgplsTopoPrefixAttr::_Internal::metric(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->metric_;
}
const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr&
SLBgplsTopoPrefixAttr::_Internal::ospffwdaddr(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->ospffwdaddr_;
}
const ::service_layer::SLBgplsTopoPrefixOpaqueAttr&
SLBgplsTopoPrefixAttr::_Internal::opaqueattr(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->opaqueattr_;
}
const ::service_layer::SLBgplsTopoPrefixSid&
SLBgplsTopoPrefixAttr::_Internal::sid(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->sid_;
}
const ::service_layer::SLBgplsTopoPrefixRange&
SLBgplsTopoPrefixAttr::_Internal::range(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->range_;
}
const ::service_layer::SLBgplsTopoPrefixSrv6Loc&
SLBgplsTopoPrefixAttr::_Internal::srv6loc(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->srv6loc_;
}
const ::service_layer::SLBgplsTopoPrefixAttrFlags&
SLBgplsTopoPrefixAttr::_Internal::attrflags(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->attrflags_;
}
const ::service_layer::SLBgplsTopoPrefixSrcRouterId&
SLBgplsTopoPrefixAttr::_Internal::srcrouterid(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->srcrouterid_;
}
SLBgplsTopoPrefixAttr::SLBgplsTopoPrefixAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  igproutetag_(arena),
  igpextroutetag_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixAttr)
}
SLBgplsTopoPrefixAttr::SLBgplsTopoPrefixAttr(const SLBgplsTopoPrefixAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      igproutetag_(from.igproutetag_),
      igpextroutetag_(from.igpextroutetag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fapm()) {
    fapm_ = new ::service_layer::SLBgplsTopoPrefixFAPM(*from.fapm_);
  } else {
    fapm_ = nullptr;
  }
  if (from._internal_has_igpflags()) {
    igpflags_ = new ::service_layer::SLBgplsTopoPrefixIgpFlags(*from.igpflags_);
  } else {
    igpflags_ = nullptr;
  }
  if (from._internal_has_metric()) {
    metric_ = new ::service_layer::SLBgplsTopoPrefixMetric(*from.metric_);
  } else {
    metric_ = nullptr;
  }
  if (from._internal_has_ospffwdaddr()) {
    ospffwdaddr_ = new ::service_layer::SLBgplsTopoPrefixOspfFwdAddr(*from.ospffwdaddr_);
  } else {
    ospffwdaddr_ = nullptr;
  }
  if (from._internal_has_opaqueattr()) {
    opaqueattr_ = new ::service_layer::SLBgplsTopoPrefixOpaqueAttr(*from.opaqueattr_);
  } else {
    opaqueattr_ = nullptr;
  }
  if (from._internal_has_sid()) {
    sid_ = new ::service_layer::SLBgplsTopoPrefixSid(*from.sid_);
  } else {
    sid_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::service_layer::SLBgplsTopoPrefixRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_srv6loc()) {
    srv6loc_ = new ::service_layer::SLBgplsTopoPrefixSrv6Loc(*from.srv6loc_);
  } else {
    srv6loc_ = nullptr;
  }
  if (from._internal_has_attrflags()) {
    attrflags_ = new ::service_layer::SLBgplsTopoPrefixAttrFlags(*from.attrflags_);
  } else {
    attrflags_ = nullptr;
  }
  if (from._internal_has_srcrouterid()) {
    srcrouterid_ = new ::service_layer::SLBgplsTopoPrefixSrcRouterId(*from.srcrouterid_);
  } else {
    srcrouterid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixAttr)
}

inline void SLBgplsTopoPrefixAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fapm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srcrouterid_) -
    reinterpret_cast<char*>(&fapm_)) + sizeof(srcrouterid_));
}

SLBgplsTopoPrefixAttr::~SLBgplsTopoPrefixAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fapm_;
  if (this != internal_default_instance()) delete igpflags_;
  if (this != internal_default_instance()) delete metric_;
  if (this != internal_default_instance()) delete ospffwdaddr_;
  if (this != internal_default_instance()) delete opaqueattr_;
  if (this != internal_default_instance()) delete sid_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete srv6loc_;
  if (this != internal_default_instance()) delete attrflags_;
  if (this != internal_default_instance()) delete srcrouterid_;
}

void SLBgplsTopoPrefixAttr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixAttr* _this = reinterpret_cast< SLBgplsTopoPrefixAttr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  igproutetag_.Clear();
  igpextroutetag_.Clear();
  if (GetArenaForAllocation() == nullptr && fapm_ != nullptr) {
    delete fapm_;
  }
  fapm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && igpflags_ != nullptr) {
    delete igpflags_;
  }
  igpflags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metric_ != nullptr) {
    delete metric_;
  }
  metric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ospffwdaddr_ != nullptr) {
    delete ospffwdaddr_;
  }
  ospffwdaddr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opaqueattr_ != nullptr) {
    delete opaqueattr_;
  }
  opaqueattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sid_ != nullptr) {
    delete sid_;
  }
  sid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srv6loc_ != nullptr) {
    delete srv6loc_;
  }
  srv6loc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attrflags_ != nullptr) {
    delete attrflags_;
  }
  attrflags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srcrouterid_ != nullptr) {
    delete srcrouterid_;
  }
  srcrouterid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fapm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_igpflags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_igproutetag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_igpextroutetag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ospffwdaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaqueattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixSid Sid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixRange Range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixSrv6Loc Srv6Loc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_srv6loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrflags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcrouterid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
  if (this->_internal_has_fapm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fapm(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
  if (this->_internal_has_igpflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::igpflags(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_igproutetag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_igproutetag(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_igpextroutetag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_igpextroutetag(i), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
  if (this->_internal_has_metric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
  if (this->_internal_has_ospffwdaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ospffwdaddr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
  if (this->_internal_has_opaqueattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::opaqueattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixSid Sid = 8;
  if (this->_internal_has_sid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixRange Range = 9;
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::range(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixSrv6Loc Srv6Loc = 10;
  if (this->_internal_has_srv6loc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::srv6loc(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 11;
  if (this->_internal_has_attrflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::attrflags(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 12;
  if (this->_internal_has_srcrouterid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::srcrouterid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixAttr)
  return target;
}

size_t SLBgplsTopoPrefixAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
  total_size += 1UL * this->_internal_igproutetag_size();
  for (const auto& msg : this->igproutetag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
  total_size += 1UL * this->_internal_igpextroutetag_size();
  for (const auto& msg : this->igpextroutetag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
  if (this->_internal_has_fapm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fapm_);
  }

  // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
  if (this->_internal_has_igpflags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *igpflags_);
  }

  // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
  if (this->_internal_has_metric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metric_);
  }

  // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
  if (this->_internal_has_ospffwdaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ospffwdaddr_);
  }

  // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
  if (this->_internal_has_opaqueattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opaqueattr_);
  }

  // .service_layer.SLBgplsTopoPrefixSid Sid = 8;
  if (this->_internal_has_sid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sid_);
  }

  // .service_layer.SLBgplsTopoPrefixRange Range = 9;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .service_layer.SLBgplsTopoPrefixSrv6Loc Srv6Loc = 10;
  if (this->_internal_has_srv6loc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srv6loc_);
  }

  // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 11;
  if (this->_internal_has_attrflags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attrflags_);
  }

  // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 12;
  if (this->_internal_has_srcrouterid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srcrouterid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixAttr &>(from));
}


void SLBgplsTopoPrefixAttr::MergeFrom(const SLBgplsTopoPrefixAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  igproutetag_.MergeFrom(from.igproutetag_);
  igpextroutetag_.MergeFrom(from.igpextroutetag_);
  if (from._internal_has_fapm()) {
    _internal_mutable_fapm()->::service_layer::SLBgplsTopoPrefixFAPM::MergeFrom(from._internal_fapm());
  }
  if (from._internal_has_igpflags()) {
    _internal_mutable_igpflags()->::service_layer::SLBgplsTopoPrefixIgpFlags::MergeFrom(from._internal_igpflags());
  }
  if (from._internal_has_metric()) {
    _internal_mutable_metric()->::service_layer::SLBgplsTopoPrefixMetric::MergeFrom(from._internal_metric());
  }
  if (from._internal_has_ospffwdaddr()) {
    _internal_mutable_ospffwdaddr()->::service_layer::SLBgplsTopoPrefixOspfFwdAddr::MergeFrom(from._internal_ospffwdaddr());
  }
  if (from._internal_has_opaqueattr()) {
    _internal_mutable_opaqueattr()->::service_layer::SLBgplsTopoPrefixOpaqueAttr::MergeFrom(from._internal_opaqueattr());
  }
  if (from._internal_has_sid()) {
    _internal_mutable_sid()->::service_layer::SLBgplsTopoPrefixSid::MergeFrom(from._internal_sid());
  }
  if (from._internal_has_range()) {
    _internal_mutable_range()->::service_layer::SLBgplsTopoPrefixRange::MergeFrom(from._internal_range());
  }
  if (from._internal_has_srv6loc()) {
    _internal_mutable_srv6loc()->::service_layer::SLBgplsTopoPrefixSrv6Loc::MergeFrom(from._internal_srv6loc());
  }
  if (from._internal_has_attrflags()) {
    _internal_mutable_attrflags()->::service_layer::SLBgplsTopoPrefixAttrFlags::MergeFrom(from._internal_attrflags());
  }
  if (from._internal_has_srcrouterid()) {
    _internal_mutable_srcrouterid()->::service_layer::SLBgplsTopoPrefixSrcRouterId::MergeFrom(from._internal_srcrouterid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixAttr::CopyFrom(const SLBgplsTopoPrefixAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixAttr::InternalSwap(SLBgplsTopoPrefixAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  igproutetag_.InternalSwap(&other->igproutetag_);
  igpextroutetag_.InternalSwap(&other->igpextroutetag_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixAttr, srcrouterid_)
      + sizeof(SLBgplsTopoPrefixAttr::srcrouterid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixAttr, fapm_)>(
          reinterpret_cast<char*>(&fapm_),
          reinterpret_cast<char*>(&other->fapm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[26]);
}

// ===================================================================

class SLBgplsTopoSrv6SidAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& endpointbehavior(const SLBgplsTopoSrv6SidAttr* msg);
  static const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct(const SLBgplsTopoSrv6SidAttr* msg);
};

const ::service_layer::SLBgplsTopoSrv6EndPointBehavior&
SLBgplsTopoSrv6SidAttr::_Internal::endpointbehavior(const SLBgplsTopoSrv6SidAttr* msg) {
  return *msg->endpointbehavior_;
}
const ::service_layer::SLBgplsTopoSrv6SidStruct&
SLBgplsTopoSrv6SidAttr::_Internal::sidstruct(const SLBgplsTopoSrv6SidAttr* msg) {
  return *msg->sidstruct_;
}
SLBgplsTopoSrv6SidAttr::SLBgplsTopoSrv6SidAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgppeernodesid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6SidAttr)
}
SLBgplsTopoSrv6SidAttr::SLBgplsTopoSrv6SidAttr(const SLBgplsTopoSrv6SidAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bgppeernodesid_(from.bgppeernodesid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_endpointbehavior()) {
    endpointbehavior_ = new ::service_layer::SLBgplsTopoSrv6EndPointBehavior(*from.endpointbehavior_);
  } else {
    endpointbehavior_ = nullptr;
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLBgplsTopoSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6SidAttr)
}

inline void SLBgplsTopoSrv6SidAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endpointbehavior_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sidstruct_) -
    reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(sidstruct_));
}

SLBgplsTopoSrv6SidAttr::~SLBgplsTopoSrv6SidAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6SidAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6SidAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete endpointbehavior_;
  if (this != internal_default_instance()) delete sidstruct_;
}

void SLBgplsTopoSrv6SidAttr::ArenaDtor(void* object) {
  SLBgplsTopoSrv6SidAttr* _this = reinterpret_cast< SLBgplsTopoSrv6SidAttr* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6SidAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6SidAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6SidAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6SidAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgppeernodesid_.Clear();
  if (GetArenaForAllocation() == nullptr && endpointbehavior_ != nullptr) {
    delete endpointbehavior_;
  }
  endpointbehavior_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6SidAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpointbehavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrv6BgpPeerNodeSid BgpPeerNodeSid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgppeernodesid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6SidAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6SidAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehavior = 1;
  if (this->_internal_has_endpointbehavior()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::endpointbehavior(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrv6BgpPeerNodeSid BgpPeerNodeSid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgppeernodesid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bgppeernodesid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 3;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6SidAttr)
  return target;
}

size_t SLBgplsTopoSrv6SidAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6SidAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoSrv6BgpPeerNodeSid BgpPeerNodeSid = 2;
  total_size += 1UL * this->_internal_bgppeernodesid_size();
  for (const auto& msg : this->bgppeernodesid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehavior = 1;
  if (this->_internal_has_endpointbehavior()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpointbehavior_);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 3;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6SidAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6SidAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6SidAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6SidAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6SidAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6SidAttr &>(from));
}


void SLBgplsTopoSrv6SidAttr::MergeFrom(const SLBgplsTopoSrv6SidAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6SidAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bgppeernodesid_.MergeFrom(from.bgppeernodesid_);
  if (from._internal_has_endpointbehavior()) {
    _internal_mutable_endpointbehavior()->::service_layer::SLBgplsTopoSrv6EndPointBehavior::MergeFrom(from._internal_endpointbehavior());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLBgplsTopoSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6SidAttr::CopyFrom(const SLBgplsTopoSrv6SidAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6SidAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6SidAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6SidAttr::InternalSwap(SLBgplsTopoSrv6SidAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bgppeernodesid_.InternalSwap(&other->bgppeernodesid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6SidAttr, sidstruct_)
      + sizeof(SLBgplsTopoSrv6SidAttr::sidstruct_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6SidAttr, endpointbehavior_)>(
          reinterpret_cast<char*>(&endpointbehavior_),
          reinterpret_cast<char*>(&other->endpointbehavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6SidAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[27]);
}

// ===================================================================

class SLBgplsTopoSrPolicyAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoSrBindingSid& srbsid(const SLBgplsTopoSrPolicyAttr* msg);
  static const ::service_layer::SLBgplsTopoSrCpState& cpstate(const SLBgplsTopoSrPolicyAttr* msg);
  static const ::service_layer::SLBgplsTopoSrCpName& cpname(const SLBgplsTopoSrPolicyAttr* msg);
  static const ::service_layer::SLBgplsTopoSrCpConstraints& cpconstraints(const SLBgplsTopoSrPolicyAttr* msg);
  static const ::service_layer::SLBgplsTopoSrv6BindingSid& srv6bsid(const SLBgplsTopoSrPolicyAttr* msg);
  static const ::service_layer::SLBgplsTopoSrPolicyName& srpolicyname(const SLBgplsTopoSrPolicyAttr* msg);
};

const ::service_layer::SLBgplsTopoSrBindingSid&
SLBgplsTopoSrPolicyAttr::_Internal::srbsid(const SLBgplsTopoSrPolicyAttr* msg) {
  return *msg->srbsid_;
}
const ::service_layer::SLBgplsTopoSrCpState&
SLBgplsTopoSrPolicyAttr::_Internal::cpstate(const SLBgplsTopoSrPolicyAttr* msg) {
  return *msg->cpstate_;
}
const ::service_layer::SLBgplsTopoSrCpName&
SLBgplsTopoSrPolicyAttr::_Internal::cpname(const SLBgplsTopoSrPolicyAttr* msg) {
  return *msg->cpname_;
}
const ::service_layer::SLBgplsTopoSrCpConstraints&
SLBgplsTopoSrPolicyAttr::_Internal::cpconstraints(const SLBgplsTopoSrPolicyAttr* msg) {
  return *msg->cpconstraints_;
}
const ::service_layer::SLBgplsTopoSrv6BindingSid&
SLBgplsTopoSrPolicyAttr::_Internal::srv6bsid(const SLBgplsTopoSrPolicyAttr* msg) {
  return *msg->srv6bsid_;
}
const ::service_layer::SLBgplsTopoSrPolicyName&
SLBgplsTopoSrPolicyAttr::_Internal::srpolicyname(const SLBgplsTopoSrPolicyAttr* msg) {
  return *msg->srpolicyname_;
}
SLBgplsTopoSrPolicyAttr::SLBgplsTopoSrPolicyAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  seglists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrPolicyAttr)
}
SLBgplsTopoSrPolicyAttr::SLBgplsTopoSrPolicyAttr(const SLBgplsTopoSrPolicyAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seglists_(from.seglists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srbsid()) {
    srbsid_ = new ::service_layer::SLBgplsTopoSrBindingSid(*from.srbsid_);
  } else {
    srbsid_ = nullptr;
  }
  if (from._internal_has_cpstate()) {
    cpstate_ = new ::service_layer::SLBgplsTopoSrCpState(*from.cpstate_);
  } else {
    cpstate_ = nullptr;
  }
  if (from._internal_has_cpname()) {
    cpname_ = new ::service_layer::SLBgplsTopoSrCpName(*from.cpname_);
  } else {
    cpname_ = nullptr;
  }
  if (from._internal_has_cpconstraints()) {
    cpconstraints_ = new ::service_layer::SLBgplsTopoSrCpConstraints(*from.cpconstraints_);
  } else {
    cpconstraints_ = nullptr;
  }
  if (from._internal_has_srv6bsid()) {
    srv6bsid_ = new ::service_layer::SLBgplsTopoSrv6BindingSid(*from.srv6bsid_);
  } else {
    srv6bsid_ = nullptr;
  }
  if (from._internal_has_srpolicyname()) {
    srpolicyname_ = new ::service_layer::SLBgplsTopoSrPolicyName(*from.srpolicyname_);
  } else {
    srpolicyname_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrPolicyAttr)
}

inline void SLBgplsTopoSrPolicyAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srbsid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srpolicyname_) -
    reinterpret_cast<char*>(&srbsid_)) + sizeof(srpolicyname_));
}

SLBgplsTopoSrPolicyAttr::~SLBgplsTopoSrPolicyAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrPolicyAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrPolicyAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete srbsid_;
  if (this != internal_default_instance()) delete cpstate_;
  if (this != internal_default_instance()) delete cpname_;
  if (this != internal_default_instance()) delete cpconstraints_;
  if (this != internal_default_instance()) delete srv6bsid_;
  if (this != internal_default_instance()) delete srpolicyname_;
}

void SLBgplsTopoSrPolicyAttr::ArenaDtor(void* object) {
  SLBgplsTopoSrPolicyAttr* _this = reinterpret_cast< SLBgplsTopoSrPolicyAttr* >(object);
  (void)_this;
}
void SLBgplsTopoSrPolicyAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrPolicyAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrPolicyAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrPolicyAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seglists_.Clear();
  if (GetArenaForAllocation() == nullptr && srbsid_ != nullptr) {
    delete srbsid_;
  }
  srbsid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cpstate_ != nullptr) {
    delete cpstate_;
  }
  cpstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cpname_ != nullptr) {
    delete cpname_;
  }
  cpname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cpconstraints_ != nullptr) {
    delete cpconstraints_;
  }
  cpconstraints_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srv6bsid_ != nullptr) {
    delete srv6bsid_;
  }
  srv6bsid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srpolicyname_ != nullptr) {
    delete srpolicyname_;
  }
  srpolicyname_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrPolicyAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoSrBindingSid SrBsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_srbsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrCpState CpState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrCpName CpName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrCpConstraints CpConstraints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpconstraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrSegList SegLists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seglists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6BindingSid Srv6Bsid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_srv6bsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrPolicyName SrPolicyName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_srpolicyname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrPolicyAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrPolicyAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoSrBindingSid SrBsid = 1;
  if (this->_internal_has_srbsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::srbsid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrCpState CpState = 2;
  if (this->_internal_has_cpstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cpstate(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrCpName CpName = 3;
  if (this->_internal_has_cpname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cpname(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrCpConstraints CpConstraints = 4;
  if (this->_internal_has_cpconstraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cpconstraints(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrSegList SegLists = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seglists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_seglists(i), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6BindingSid Srv6Bsid = 6;
  if (this->_internal_has_srv6bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::srv6bsid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrPolicyName SrPolicyName = 7;
  if (this->_internal_has_srpolicyname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::srpolicyname(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrPolicyAttr)
  return target;
}

size_t SLBgplsTopoSrPolicyAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrPolicyAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoSrSegList SegLists = 5;
  total_size += 1UL * this->_internal_seglists_size();
  for (const auto& msg : this->seglists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoSrBindingSid SrBsid = 1;
  if (this->_internal_has_srbsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srbsid_);
  }

  // .service_layer.SLBgplsTopoSrCpState CpState = 2;
  if (this->_internal_has_cpstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpstate_);
  }

  // .service_layer.SLBgplsTopoSrCpName CpName = 3;
  if (this->_internal_has_cpname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpname_);
  }

  // .service_layer.SLBgplsTopoSrCpConstraints CpConstraints = 4;
  if (this->_internal_has_cpconstraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpconstraints_);
  }

  // .service_layer.SLBgplsTopoSrv6BindingSid Srv6Bsid = 6;
  if (this->_internal_has_srv6bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srv6bsid_);
  }

  // .service_layer.SLBgplsTopoSrPolicyName SrPolicyName = 7;
  if (this->_internal_has_srpolicyname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srpolicyname_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrPolicyAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrPolicyAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrPolicyAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrPolicyAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrPolicyAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrPolicyAttr &>(from));
}


void SLBgplsTopoSrPolicyAttr::MergeFrom(const SLBgplsTopoSrPolicyAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrPolicyAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  seglists_.MergeFrom(from.seglists_);
  if (from._internal_has_srbsid()) {
    _internal_mutable_srbsid()->::service_layer::SLBgplsTopoSrBindingSid::MergeFrom(from._internal_srbsid());
  }
  if (from._internal_has_cpstate()) {
    _internal_mutable_cpstate()->::service_layer::SLBgplsTopoSrCpState::MergeFrom(from._internal_cpstate());
  }
  if (from._internal_has_cpname()) {
    _internal_mutable_cpname()->::service_layer::SLBgplsTopoSrCpName::MergeFrom(from._internal_cpname());
  }
  if (from._internal_has_cpconstraints()) {
    _internal_mutable_cpconstraints()->::service_layer::SLBgplsTopoSrCpConstraints::MergeFrom(from._internal_cpconstraints());
  }
  if (from._internal_has_srv6bsid()) {
    _internal_mutable_srv6bsid()->::service_layer::SLBgplsTopoSrv6BindingSid::MergeFrom(from._internal_srv6bsid());
  }
  if (from._internal_has_srpolicyname()) {
    _internal_mutable_srpolicyname()->::service_layer::SLBgplsTopoSrPolicyName::MergeFrom(from._internal_srpolicyname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrPolicyAttr::CopyFrom(const SLBgplsTopoSrPolicyAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrPolicyAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrPolicyAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrPolicyAttr::InternalSwap(SLBgplsTopoSrPolicyAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  seglists_.InternalSwap(&other->seglists_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicyAttr, srpolicyname_)
      + sizeof(SLBgplsTopoSrPolicyAttr::srpolicyname_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrPolicyAttr, srbsid_)>(
          reinterpret_cast<char*>(&srbsid_),
          reinterpret_cast<char*>(&other->srbsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrPolicyAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[28]);
}

// ===================================================================

class SLBplsTopoLinkLocRemId::_Internal {
 public:
};

SLBplsTopoLinkLocRemId::SLBplsTopoLinkLocRemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBplsTopoLinkLocRemId)
}
SLBplsTopoLinkLocRemId::SLBplsTopoLinkLocRemId(const SLBplsTopoLinkLocRemId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&localid_, &from.localid_,
    static_cast<size_t>(reinterpret_cast<char*>(&remoteid_) -
    reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBplsTopoLinkLocRemId)
}

inline void SLBplsTopoLinkLocRemId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&localid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remoteid_) -
    reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
}

SLBplsTopoLinkLocRemId::~SLBplsTopoLinkLocRemId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBplsTopoLinkLocRemId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBplsTopoLinkLocRemId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBplsTopoLinkLocRemId::ArenaDtor(void* object) {
  SLBplsTopoLinkLocRemId* _this = reinterpret_cast< SLBplsTopoLinkLocRemId* >(object);
  (void)_this;
}
void SLBplsTopoLinkLocRemId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBplsTopoLinkLocRemId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBplsTopoLinkLocRemId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBplsTopoLinkLocRemId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&localid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remoteid_) -
      reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBplsTopoLinkLocRemId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocalId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          localid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          remoteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBplsTopoLinkLocRemId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBplsTopoLinkLocRemId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_localid(), target);
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remoteid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBplsTopoLinkLocRemId)
  return target;
}

size_t SLBplsTopoLinkLocRemId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBplsTopoLinkLocRemId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localid());
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remoteid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBplsTopoLinkLocRemId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBplsTopoLinkLocRemId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBplsTopoLinkLocRemId::GetClassData() const { return &_class_data_; }

void SLBplsTopoLinkLocRemId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBplsTopoLinkLocRemId *>(to)->MergeFrom(
      static_cast<const SLBplsTopoLinkLocRemId &>(from));
}


void SLBplsTopoLinkLocRemId::MergeFrom(const SLBplsTopoLinkLocRemId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBplsTopoLinkLocRemId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_localid() != 0) {
    _internal_set_localid(from._internal_localid());
  }
  if (from._internal_remoteid() != 0) {
    _internal_set_remoteid(from._internal_remoteid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBplsTopoLinkLocRemId::CopyFrom(const SLBplsTopoLinkLocRemId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBplsTopoLinkLocRemId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBplsTopoLinkLocRemId::IsInitialized() const {
  return true;
}

void SLBplsTopoLinkLocRemId::InternalSwap(SLBplsTopoLinkLocRemId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBplsTopoLinkLocRemId, remoteid_)
      + sizeof(SLBplsTopoLinkLocRemId::remoteid_)
      - PROTOBUF_FIELD_OFFSET(SLBplsTopoLinkLocRemId, localid_)>(
          reinterpret_cast<char*>(&localid_),
          reinterpret_cast<char*>(&other->localid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBplsTopoLinkLocRemId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[29]);
}

// ===================================================================

class SLBgplsTopoMtId::_Internal {
 public:
};

SLBgplsTopoMtId::SLBgplsTopoMtId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoMtId)
}
SLBgplsTopoMtId::SLBgplsTopoMtId(const SLBgplsTopoMtId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mtid_ = from.mtid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoMtId)
}

inline void SLBgplsTopoMtId::SharedCtor() {
mtid_ = 0u;
}

SLBgplsTopoMtId::~SLBgplsTopoMtId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoMtId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoMtId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoMtId::ArenaDtor(void* object) {
  SLBgplsTopoMtId* _this = reinterpret_cast< SLBgplsTopoMtId* >(object);
  (void)_this;
}
void SLBgplsTopoMtId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoMtId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoMtId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoMtId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoMtId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoMtId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoMtId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MtId = 1;
  if (this->_internal_mtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mtid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoMtId)
  return target;
}

size_t SLBgplsTopoMtId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoMtId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 MtId = 1;
  if (this->_internal_mtid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoMtId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoMtId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoMtId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoMtId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoMtId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoMtId &>(from));
}


void SLBgplsTopoMtId::MergeFrom(const SLBgplsTopoMtId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoMtId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mtid() != 0) {
    _internal_set_mtid(from._internal_mtid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoMtId::CopyFrom(const SLBgplsTopoMtId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoMtId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoMtId::IsInitialized() const {
  return true;
}

void SLBgplsTopoMtId::InternalSwap(SLBgplsTopoMtId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mtid_, other->mtid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoMtId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[30]);
}

// ===================================================================

class SLBgplsTopoNodeMsd::_Internal {
 public:
};

SLBgplsTopoNodeMsd::SLBgplsTopoNodeMsd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeMsd)
}
SLBgplsTopoNodeMsd::SLBgplsTopoNodeMsd(const SLBgplsTopoNodeMsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeMsd)
}

inline void SLBgplsTopoNodeMsd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

SLBgplsTopoNodeMsd::~SLBgplsTopoNodeMsd() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeMsd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeMsd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoNodeMsd::ArenaDtor(void* object) {
  SLBgplsTopoNodeMsd* _this = reinterpret_cast< SLBgplsTopoNodeMsd* >(object);
  (void)_this;
}
void SLBgplsTopoNodeMsd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeMsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeMsd::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeMsd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeMsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeMsd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeMsd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeMsd)
  return target;
}

size_t SLBgplsTopoNodeMsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeMsd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeMsd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeMsd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeMsd::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeMsd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeMsd *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeMsd &>(from));
}


void SLBgplsTopoNodeMsd::MergeFrom(const SLBgplsTopoNodeMsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeMsd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeMsd::CopyFrom(const SLBgplsTopoNodeMsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeMsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeMsd::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeMsd::InternalSwap(SLBgplsTopoNodeMsd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeMsd, value_)
      + sizeof(SLBgplsTopoNodeMsd::value_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeMsd, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeMsd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[31]);
}

// ===================================================================

class SLBgplsTopoLinkMsd::_Internal {
 public:
};

SLBgplsTopoLinkMsd::SLBgplsTopoLinkMsd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMsd)
}
SLBgplsTopoLinkMsd::SLBgplsTopoLinkMsd(const SLBgplsTopoLinkMsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMsd)
}

inline void SLBgplsTopoLinkMsd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

SLBgplsTopoLinkMsd::~SLBgplsTopoLinkMsd() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMsd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMsd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkMsd::ArenaDtor(void* object) {
  SLBgplsTopoLinkMsd* _this = reinterpret_cast< SLBgplsTopoLinkMsd* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMsd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMsd::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMsd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMsd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMsd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMsd)
  return target;
}

size_t SLBgplsTopoLinkMsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMsd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMsd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMsd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMsd::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMsd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMsd *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMsd &>(from));
}


void SLBgplsTopoLinkMsd::MergeFrom(const SLBgplsTopoLinkMsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMsd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMsd::CopyFrom(const SLBgplsTopoLinkMsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMsd::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMsd::InternalSwap(SLBgplsTopoLinkMsd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkMsd, value_)
      + sizeof(SLBgplsTopoLinkMsd::value_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkMsd, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMsd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[32]);
}

// ===================================================================

class SLBgplsTopoNodeFlagBits::_Internal {
 public:
};

SLBgplsTopoNodeFlagBits::SLBgplsTopoNodeFlagBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeFlagBits)
}
SLBgplsTopoNodeFlagBits::SLBgplsTopoNodeFlagBits(const SLBgplsTopoNodeFlagBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeFlagBits)
}

inline void SLBgplsTopoNodeFlagBits::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoNodeFlagBits::~SLBgplsTopoNodeFlagBits() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeFlagBits)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeFlagBits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoNodeFlagBits::ArenaDtor(void* object) {
  SLBgplsTopoNodeFlagBits* _this = reinterpret_cast< SLBgplsTopoNodeFlagBits* >(object);
  (void)_this;
}
void SLBgplsTopoNodeFlagBits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeFlagBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeFlagBits::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeFlagBits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeFlagBits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeFlagBits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeFlagBits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeFlagBits)
  return target;
}

size_t SLBgplsTopoNodeFlagBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeFlagBits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeFlagBits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeFlagBits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeFlagBits::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeFlagBits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeFlagBits *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeFlagBits &>(from));
}


void SLBgplsTopoNodeFlagBits::MergeFrom(const SLBgplsTopoNodeFlagBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeFlagBits)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeFlagBits::CopyFrom(const SLBgplsTopoNodeFlagBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeFlagBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeFlagBits::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeFlagBits::InternalSwap(SLBgplsTopoNodeFlagBits* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeFlagBits::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[33]);
}

// ===================================================================

class SLBgplsTopoNodeOpaqueAttr::_Internal {
 public:
};

SLBgplsTopoNodeOpaqueAttr::SLBgplsTopoNodeOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeOpaqueAttr)
}
SLBgplsTopoNodeOpaqueAttr::SLBgplsTopoNodeOpaqueAttr(const SLBgplsTopoNodeOpaqueAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opaqueattr().empty()) {
    opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaqueattr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeOpaqueAttr)
}

inline void SLBgplsTopoNodeOpaqueAttr::SharedCtor() {
opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoNodeOpaqueAttr::~SLBgplsTopoNodeOpaqueAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeOpaqueAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeOpaqueAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaqueattr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoNodeOpaqueAttr::ArenaDtor(void* object) {
  SLBgplsTopoNodeOpaqueAttr* _this = reinterpret_cast< SLBgplsTopoNodeOpaqueAttr* >(object);
  (void)_this;
}
void SLBgplsTopoNodeOpaqueAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeOpaqueAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeOpaqueAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaqueattr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeOpaqueAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes OpaqueAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaqueattr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeOpaqueAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaqueattr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeOpaqueAttr)
  return target;
}

size_t SLBgplsTopoNodeOpaqueAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaqueattr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeOpaqueAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeOpaqueAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeOpaqueAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeOpaqueAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeOpaqueAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeOpaqueAttr &>(from));
}


void SLBgplsTopoNodeOpaqueAttr::MergeFrom(const SLBgplsTopoNodeOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_opaqueattr().empty()) {
    _internal_set_opaqueattr(from._internal_opaqueattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeOpaqueAttr::CopyFrom(const SLBgplsTopoNodeOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeOpaqueAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeOpaqueAttr::InternalSwap(SLBgplsTopoNodeOpaqueAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaqueattr_, lhs_arena,
      &other->opaqueattr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeOpaqueAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[34]);
}

// ===================================================================

class SLBgplsNodeName::_Internal {
 public:
};

SLBgplsNodeName::SLBgplsNodeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsNodeName)
}
SLBgplsNodeName::SLBgplsNodeName(const SLBgplsNodeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsNodeName)
}

inline void SLBgplsNodeName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsNodeName::~SLBgplsNodeName() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsNodeName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsNodeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsNodeName::ArenaDtor(void* object) {
  SLBgplsNodeName* _this = reinterpret_cast< SLBgplsNodeName* >(object);
  (void)_this;
}
void SLBgplsNodeName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsNodeName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsNodeName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsNodeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsNodeName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgplsNodeName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsNodeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsNodeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgplsNodeName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsNodeName)
  return target;
}

size_t SLBgplsNodeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsNodeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsNodeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsNodeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsNodeName::GetClassData() const { return &_class_data_; }

void SLBgplsNodeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsNodeName *>(to)->MergeFrom(
      static_cast<const SLBgplsNodeName &>(from));
}


void SLBgplsNodeName::MergeFrom(const SLBgplsNodeName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsNodeName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsNodeName::CopyFrom(const SLBgplsNodeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsNodeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsNodeName::IsInitialized() const {
  return true;
}

void SLBgplsNodeName::InternalSwap(SLBgplsNodeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsNodeName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[35]);
}

// ===================================================================

class SLBgplsTopoIsisAreaId::_Internal {
 public:
};

SLBgplsTopoIsisAreaId::SLBgplsTopoIsisAreaId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoIsisAreaId)
}
SLBgplsTopoIsisAreaId::SLBgplsTopoIsisAreaId(const SLBgplsTopoIsisAreaId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  areaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    areaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_areaid().empty()) {
    areaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_areaid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoIsisAreaId)
}

inline void SLBgplsTopoIsisAreaId::SharedCtor() {
areaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  areaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoIsisAreaId::~SLBgplsTopoIsisAreaId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoIsisAreaId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoIsisAreaId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  areaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoIsisAreaId::ArenaDtor(void* object) {
  SLBgplsTopoIsisAreaId* _this = reinterpret_cast< SLBgplsTopoIsisAreaId* >(object);
  (void)_this;
}
void SLBgplsTopoIsisAreaId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoIsisAreaId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoIsisAreaId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoIsisAreaId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areaid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoIsisAreaId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes AreaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_areaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoIsisAreaId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoIsisAreaId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AreaId = 1;
  if (!this->_internal_areaid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_areaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoIsisAreaId)
  return target;
}

size_t SLBgplsTopoIsisAreaId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoIsisAreaId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes AreaId = 1;
  if (!this->_internal_areaid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_areaid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoIsisAreaId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoIsisAreaId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoIsisAreaId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoIsisAreaId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoIsisAreaId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoIsisAreaId &>(from));
}


void SLBgplsTopoIsisAreaId::MergeFrom(const SLBgplsTopoIsisAreaId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoIsisAreaId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_areaid().empty()) {
    _internal_set_areaid(from._internal_areaid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoIsisAreaId::CopyFrom(const SLBgplsTopoIsisAreaId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoIsisAreaId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoIsisAreaId::IsInitialized() const {
  return true;
}

void SLBgplsTopoIsisAreaId::InternalSwap(SLBgplsTopoIsisAreaId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &areaid_, lhs_arena,
      &other->areaid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoIsisAreaId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[36]);
}

// ===================================================================

class SLBgplsTopoLocalIpv4RouterId::_Internal {
 public:
};

SLBgplsTopoLocalIpv4RouterId::SLBgplsTopoLocalIpv4RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLocalIpv4RouterId)
}
SLBgplsTopoLocalIpv4RouterId::SLBgplsTopoLocalIpv4RouterId(const SLBgplsTopoLocalIpv4RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_ = from.routerid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLocalIpv4RouterId)
}

inline void SLBgplsTopoLocalIpv4RouterId::SharedCtor() {
routerid_ = 0u;
}

SLBgplsTopoLocalIpv4RouterId::~SLBgplsTopoLocalIpv4RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLocalIpv4RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLocalIpv4RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLocalIpv4RouterId::ArenaDtor(void* object) {
  SLBgplsTopoLocalIpv4RouterId* _this = reinterpret_cast< SLBgplsTopoLocalIpv4RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoLocalIpv4RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLocalIpv4RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLocalIpv4RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLocalIpv4RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLocalIpv4RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLocalIpv4RouterId)
  return target;
}

size_t SLBgplsTopoLocalIpv4RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLocalIpv4RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLocalIpv4RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLocalIpv4RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLocalIpv4RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLocalIpv4RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLocalIpv4RouterId &>(from));
}


void SLBgplsTopoLocalIpv4RouterId::MergeFrom(const SLBgplsTopoLocalIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_routerid() != 0) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLocalIpv4RouterId::CopyFrom(const SLBgplsTopoLocalIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLocalIpv4RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoLocalIpv4RouterId::InternalSwap(SLBgplsTopoLocalIpv4RouterId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(routerid_, other->routerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLocalIpv4RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[37]);
}

// ===================================================================

class SLBgplsTopoLocalIpv6RouterId::_Internal {
 public:
};

SLBgplsTopoLocalIpv6RouterId::SLBgplsTopoLocalIpv6RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLocalIpv6RouterId)
}
SLBgplsTopoLocalIpv6RouterId::SLBgplsTopoLocalIpv6RouterId(const SLBgplsTopoLocalIpv6RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLocalIpv6RouterId)
}

inline void SLBgplsTopoLocalIpv6RouterId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLocalIpv6RouterId::~SLBgplsTopoLocalIpv6RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLocalIpv6RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLocalIpv6RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLocalIpv6RouterId::ArenaDtor(void* object) {
  SLBgplsTopoLocalIpv6RouterId* _this = reinterpret_cast< SLBgplsTopoLocalIpv6RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoLocalIpv6RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLocalIpv6RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLocalIpv6RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLocalIpv6RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLocalIpv6RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLocalIpv6RouterId)
  return target;
}

size_t SLBgplsTopoLocalIpv6RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLocalIpv6RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLocalIpv6RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLocalIpv6RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLocalIpv6RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLocalIpv6RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLocalIpv6RouterId &>(from));
}


void SLBgplsTopoLocalIpv6RouterId::MergeFrom(const SLBgplsTopoLocalIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLocalIpv6RouterId::CopyFrom(const SLBgplsTopoLocalIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLocalIpv6RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoLocalIpv6RouterId::InternalSwap(SLBgplsTopoLocalIpv6RouterId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLocalIpv6RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[38]);
}

// ===================================================================

class SLBgplsTopoRemoteIpv4RouterId::_Internal {
 public:
};

SLBgplsTopoRemoteIpv4RouterId::SLBgplsTopoRemoteIpv4RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoRemoteIpv4RouterId)
}
SLBgplsTopoRemoteIpv4RouterId::SLBgplsTopoRemoteIpv4RouterId(const SLBgplsTopoRemoteIpv4RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_ = from.routerid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoRemoteIpv4RouterId)
}

inline void SLBgplsTopoRemoteIpv4RouterId::SharedCtor() {
routerid_ = 0u;
}

SLBgplsTopoRemoteIpv4RouterId::~SLBgplsTopoRemoteIpv4RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoRemoteIpv4RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoRemoteIpv4RouterId::ArenaDtor(void* object) {
  SLBgplsTopoRemoteIpv4RouterId* _this = reinterpret_cast< SLBgplsTopoRemoteIpv4RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoRemoteIpv4RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoRemoteIpv4RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoRemoteIpv4RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoRemoteIpv4RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          routerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoRemoteIpv4RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  return target;
}

size_t SLBgplsTopoRemoteIpv4RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RouterId = 1;
  if (this->_internal_routerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoRemoteIpv4RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoRemoteIpv4RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoRemoteIpv4RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoRemoteIpv4RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoRemoteIpv4RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoRemoteIpv4RouterId &>(from));
}


void SLBgplsTopoRemoteIpv4RouterId::MergeFrom(const SLBgplsTopoRemoteIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_routerid() != 0) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoRemoteIpv4RouterId::CopyFrom(const SLBgplsTopoRemoteIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoRemoteIpv4RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoRemoteIpv4RouterId::InternalSwap(SLBgplsTopoRemoteIpv4RouterId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(routerid_, other->routerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoRemoteIpv4RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[39]);
}

// ===================================================================

class SLBgplsTopoRemoteIpv6RouterId::_Internal {
 public:
};

SLBgplsTopoRemoteIpv6RouterId::SLBgplsTopoRemoteIpv6RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoRemoteIpv6RouterId)
}
SLBgplsTopoRemoteIpv6RouterId::SLBgplsTopoRemoteIpv6RouterId(const SLBgplsTopoRemoteIpv6RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoRemoteIpv6RouterId)
}

inline void SLBgplsTopoRemoteIpv6RouterId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoRemoteIpv6RouterId::~SLBgplsTopoRemoteIpv6RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoRemoteIpv6RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoRemoteIpv6RouterId::ArenaDtor(void* object) {
  SLBgplsTopoRemoteIpv6RouterId* _this = reinterpret_cast< SLBgplsTopoRemoteIpv6RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoRemoteIpv6RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoRemoteIpv6RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoRemoteIpv6RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoRemoteIpv6RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoRemoteIpv6RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  return target;
}

size_t SLBgplsTopoRemoteIpv6RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoRemoteIpv6RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoRemoteIpv6RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoRemoteIpv6RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoRemoteIpv6RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoRemoteIpv6RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoRemoteIpv6RouterId &>(from));
}


void SLBgplsTopoRemoteIpv6RouterId::MergeFrom(const SLBgplsTopoRemoteIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoRemoteIpv6RouterId::CopyFrom(const SLBgplsTopoRemoteIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoRemoteIpv6RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoRemoteIpv6RouterId::InternalSwap(SLBgplsTopoRemoteIpv6RouterId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoRemoteIpv6RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[40]);
}

// ===================================================================

class SLBgplsTopoSrgb::_Internal {
 public:
};

SLBgplsTopoSrgb::SLBgplsTopoSrgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrgb)
}
SLBgplsTopoSrgb::SLBgplsTopoSrgb(const SLBgplsTopoSrgb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startlabel_, &from.startlabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrgb)
}

inline void SLBgplsTopoSrgb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startlabel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
}

SLBgplsTopoSrgb::~SLBgplsTopoSrgb() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrgb)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrgb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrgb::ArenaDtor(void* object) {
  SLBgplsTopoSrgb* _this = reinterpret_cast< SLBgplsTopoSrgb* >(object);
  (void)_this;
}
void SLBgplsTopoSrgb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrgb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrgb::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrgb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangesize_) -
      reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrgb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 StartLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          startlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RangeSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rangesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrgb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrgb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startlabel(), target);
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rangesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrgb)
  return target;
}

size_t SLBgplsTopoSrgb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrgb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startlabel());
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrgb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrgb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrgb::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrgb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrgb *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrgb &>(from));
}


void SLBgplsTopoSrgb::MergeFrom(const SLBgplsTopoSrgb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrgb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_startlabel() != 0) {
    _internal_set_startlabel(from._internal_startlabel());
  }
  if (from._internal_rangesize() != 0) {
    _internal_set_rangesize(from._internal_rangesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrgb::CopyFrom(const SLBgplsTopoSrgb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrgb::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrgb::InternalSwap(SLBgplsTopoSrgb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrgb, rangesize_)
      + sizeof(SLBgplsTopoSrgb::rangesize_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrgb, startlabel_)>(
          reinterpret_cast<char*>(&startlabel_),
          reinterpret_cast<char*>(&other->startlabel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrgb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[41]);
}

// ===================================================================

class SLBgplsTopoSrgbIsisFlags::_Internal {
 public:
};

SLBgplsTopoSrgbIsisFlags::SLBgplsTopoSrgbIsisFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrgbIsisFlags)
}
SLBgplsTopoSrgbIsisFlags::SLBgplsTopoSrgbIsisFlags(const SLBgplsTopoSrgbIsisFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrgbIsisFlags)
}

inline void SLBgplsTopoSrgbIsisFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrgbIsisFlags::~SLBgplsTopoSrgbIsisFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrgbIsisFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrgbIsisFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrgbIsisFlags::ArenaDtor(void* object) {
  SLBgplsTopoSrgbIsisFlags* _this = reinterpret_cast< SLBgplsTopoSrgbIsisFlags* >(object);
  (void)_this;
}
void SLBgplsTopoSrgbIsisFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrgbIsisFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrgbIsisFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrgbIsisFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrgbIsisFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrgbIsisFlags)
  return target;
}

size_t SLBgplsTopoSrgbIsisFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrgbIsisFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrgbIsisFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrgbIsisFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrgbIsisFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrgbIsisFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrgbIsisFlags &>(from));
}


void SLBgplsTopoSrgbIsisFlags::MergeFrom(const SLBgplsTopoSrgbIsisFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrgbIsisFlags::CopyFrom(const SLBgplsTopoSrgbIsisFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrgbIsisFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrgbIsisFlags::InternalSwap(SLBgplsTopoSrgbIsisFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrgbIsisFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[42]);
}

// ===================================================================

class SLBgplsTopoSrAlgorithm::_Internal {
 public:
};

SLBgplsTopoSrAlgorithm::SLBgplsTopoSrAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrAlgorithm)
}
SLBgplsTopoSrAlgorithm::SLBgplsTopoSrAlgorithm(const SLBgplsTopoSrAlgorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithms().empty()) {
    algorithms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algorithms(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrAlgorithm)
}

inline void SLBgplsTopoSrAlgorithm::SharedCtor() {
algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrAlgorithm::~SLBgplsTopoSrAlgorithm() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrAlgorithm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrAlgorithm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  algorithms_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrAlgorithm::ArenaDtor(void* object) {
  SLBgplsTopoSrAlgorithm* _this = reinterpret_cast< SLBgplsTopoSrAlgorithm* >(object);
  (void)_this;
}
void SLBgplsTopoSrAlgorithm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrAlgorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrAlgorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrAlgorithm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithms_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrAlgorithm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Algorithms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_algorithms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrAlgorithm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrAlgorithm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Algorithms = 1;
  if (!this->_internal_algorithms().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_algorithms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrAlgorithm)
  return target;
}

size_t SLBgplsTopoSrAlgorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrAlgorithm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Algorithms = 1;
  if (!this->_internal_algorithms().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_algorithms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrAlgorithm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrAlgorithm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrAlgorithm::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrAlgorithm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrAlgorithm *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrAlgorithm &>(from));
}


void SLBgplsTopoSrAlgorithm::MergeFrom(const SLBgplsTopoSrAlgorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrAlgorithm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_algorithms().empty()) {
    _internal_set_algorithms(from._internal_algorithms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrAlgorithm::CopyFrom(const SLBgplsTopoSrAlgorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrAlgorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrAlgorithm::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrAlgorithm::InternalSwap(SLBgplsTopoSrAlgorithm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &algorithms_, lhs_arena,
      &other->algorithms_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrAlgorithm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[43]);
}

// ===================================================================

class SLBgplsTopoSrlb::_Internal {
 public:
};

SLBgplsTopoSrlb::SLBgplsTopoSrlb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrlb)
}
SLBgplsTopoSrlb::SLBgplsTopoSrlb(const SLBgplsTopoSrlb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startlabel_, &from.startlabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrlb)
}

inline void SLBgplsTopoSrlb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startlabel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
}

SLBgplsTopoSrlb::~SLBgplsTopoSrlb() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrlb)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrlb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrlb::ArenaDtor(void* object) {
  SLBgplsTopoSrlb* _this = reinterpret_cast< SLBgplsTopoSrlb* >(object);
  (void)_this;
}
void SLBgplsTopoSrlb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrlb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrlb::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrlb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangesize_) -
      reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrlb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 StartLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          startlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RangeSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rangesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrlb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrlb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startlabel(), target);
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rangesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrlb)
  return target;
}

size_t SLBgplsTopoSrlb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrlb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startlabel());
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrlb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrlb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrlb::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrlb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrlb *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrlb &>(from));
}


void SLBgplsTopoSrlb::MergeFrom(const SLBgplsTopoSrlb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrlb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_startlabel() != 0) {
    _internal_set_startlabel(from._internal_startlabel());
  }
  if (from._internal_rangesize() != 0) {
    _internal_set_rangesize(from._internal_rangesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrlb::CopyFrom(const SLBgplsTopoSrlb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrlb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrlb::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrlb::InternalSwap(SLBgplsTopoSrlb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrlb, rangesize_)
      + sizeof(SLBgplsTopoSrlb::rangesize_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrlb, startlabel_)>(
          reinterpret_cast<char*>(&startlabel_),
          reinterpret_cast<char*>(&other->startlabel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrlb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[44]);
}

// ===================================================================

class SLBgplsTopoFad::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoFadUnsuppTlv& unsupptlv(const SLBgplsTopoFad* msg);
};

const ::service_layer::SLBgplsTopoFadUnsuppTlv&
SLBgplsTopoFad::_Internal::unsupptlv(const SLBgplsTopoFad* msg) {
  return *msg->unsupptlv_;
}
SLBgplsTopoFad::SLBgplsTopoFad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  excanyaff_(arena),
  incanyaff_(arena),
  incallaff_(arena),
  excsrlg_(arena),
  excanyrevaff_(arena),
  incanyrevaff_(arena),
  incallrevaff_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoFad)
}
SLBgplsTopoFad::SLBgplsTopoFad(const SLBgplsTopoFad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      excanyaff_(from.excanyaff_),
      incanyaff_(from.incanyaff_),
      incallaff_(from.incallaff_),
      excsrlg_(from.excsrlg_),
      excanyrevaff_(from.excanyrevaff_),
      incanyrevaff_(from.incanyrevaff_),
      incallrevaff_(from.incallrevaff_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm().empty()) {
    algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algorithm(), 
      GetArenaForAllocation());
  }
  metrictype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metrictype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metrictype().empty()) {
    metrictype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metrictype(), 
      GetArenaForAllocation());
  }
  calctype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    calctype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_calctype().empty()) {
    calctype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_calctype(), 
      GetArenaForAllocation());
  }
  priority_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    priority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priority().empty()) {
    priority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_priority(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  excminbw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    excminbw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_excminbw().empty()) {
    excminbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_excminbw(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_unsupptlv()) {
    unsupptlv_ = new ::service_layer::SLBgplsTopoFadUnsuppTlv(*from.unsupptlv_);
  } else {
    unsupptlv_ = nullptr;
  }
  excmaxdelay_ = from.excmaxdelay_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoFad)
}

inline void SLBgplsTopoFad::SharedCtor() {
algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metrictype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metrictype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
calctype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  calctype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
priority_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  priority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
excminbw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  excminbw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unsupptlv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&excmaxdelay_) -
    reinterpret_cast<char*>(&unsupptlv_)) + sizeof(excmaxdelay_));
}

SLBgplsTopoFad::~SLBgplsTopoFad() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoFad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoFad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metrictype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calctype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excminbw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unsupptlv_;
}

void SLBgplsTopoFad::ArenaDtor(void* object) {
  SLBgplsTopoFad* _this = reinterpret_cast< SLBgplsTopoFad* >(object);
  (void)_this;
}
void SLBgplsTopoFad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoFad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoFad::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoFad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excanyaff_.Clear();
  incanyaff_.Clear();
  incallaff_.Clear();
  excsrlg_.Clear();
  excanyrevaff_.Clear();
  incanyrevaff_.Clear();
  incallrevaff_.Clear();
  algorithm_.ClearToEmpty();
  metrictype_.ClearToEmpty();
  calctype_.ClearToEmpty();
  priority_.ClearToEmpty();
  flags_.ClearToEmpty();
  excminbw_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && unsupptlv_ != nullptr) {
    delete unsupptlv_;
  }
  unsupptlv_ = nullptr;
  excmaxdelay_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoFad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes MetricType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metrictype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes CalcType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_calctype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_priority();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ExcAnyAff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excanyaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_excanyaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAnyAff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incanyaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_incanyaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAllAff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incallaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_incallaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ExcSrlg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excsrlg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_excsrlg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ExcAnyRevAff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excanyrevaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_excanyrevaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAnyRevAff = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incanyrevaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_incanyrevaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAllRevAff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incallrevaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_incallrevaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ExcMaxDelay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          excmaxdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ExcMinBw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_excminbw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsupptlv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoFad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoFad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Algorithm = 1;
  if (!this->_internal_algorithm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_algorithm(), target);
  }

  // bytes MetricType = 2;
  if (!this->_internal_metrictype().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metrictype(), target);
  }

  // bytes CalcType = 3;
  if (!this->_internal_calctype().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_calctype(), target);
  }

  // bytes Priority = 4;
  if (!this->_internal_priority().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_priority(), target);
  }

  // repeated uint32 ExcAnyAff = 5;
  {
    int byte_size = _excanyaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_excanyaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAnyAff = 6;
  {
    int byte_size = _incanyaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_incanyaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAllAff = 7;
  {
    int byte_size = _incallaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_incallaff(), byte_size, target);
    }
  }

  // bytes Flags = 8;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_flags(), target);
  }

  // repeated uint32 ExcSrlg = 9;
  {
    int byte_size = _excsrlg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_excsrlg(), byte_size, target);
    }
  }

  // repeated uint32 ExcAnyRevAff = 10;
  {
    int byte_size = _excanyrevaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_excanyrevaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAnyRevAff = 11;
  {
    int byte_size = _incanyrevaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_incanyrevaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAllRevAff = 12;
  {
    int byte_size = _incallrevaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_incallrevaff(), byte_size, target);
    }
  }

  // uint32 ExcMaxDelay = 13;
  if (this->_internal_excmaxdelay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_excmaxdelay(), target);
  }

  // bytes ExcMinBw = 14;
  if (!this->_internal_excminbw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_excminbw(), target);
  }

  // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
  if (this->_internal_has_unsupptlv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::unsupptlv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoFad)
  return target;
}

size_t SLBgplsTopoFad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoFad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ExcAnyAff = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excanyaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excanyaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAnyAff = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incanyaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incanyaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAllAff = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incallaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incallaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ExcSrlg = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excsrlg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excsrlg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ExcAnyRevAff = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excanyrevaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excanyrevaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAnyRevAff = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incanyrevaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incanyrevaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAllRevAff = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incallrevaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incallrevaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes Algorithm = 1;
  if (!this->_internal_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_algorithm());
  }

  // bytes MetricType = 2;
  if (!this->_internal_metrictype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metrictype());
  }

  // bytes CalcType = 3;
  if (!this->_internal_calctype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_calctype());
  }

  // bytes Priority = 4;
  if (!this->_internal_priority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_priority());
  }

  // bytes Flags = 8;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // bytes ExcMinBw = 14;
  if (!this->_internal_excminbw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_excminbw());
  }

  // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
  if (this->_internal_has_unsupptlv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unsupptlv_);
  }

  // uint32 ExcMaxDelay = 13;
  if (this->_internal_excmaxdelay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_excmaxdelay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoFad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoFad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoFad::GetClassData() const { return &_class_data_; }

void SLBgplsTopoFad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoFad *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoFad &>(from));
}


void SLBgplsTopoFad::MergeFrom(const SLBgplsTopoFad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoFad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  excanyaff_.MergeFrom(from.excanyaff_);
  incanyaff_.MergeFrom(from.incanyaff_);
  incallaff_.MergeFrom(from.incallaff_);
  excsrlg_.MergeFrom(from.excsrlg_);
  excanyrevaff_.MergeFrom(from.excanyrevaff_);
  incanyrevaff_.MergeFrom(from.incanyrevaff_);
  incallrevaff_.MergeFrom(from.incallrevaff_);
  if (!from._internal_algorithm().empty()) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (!from._internal_metrictype().empty()) {
    _internal_set_metrictype(from._internal_metrictype());
  }
  if (!from._internal_calctype().empty()) {
    _internal_set_calctype(from._internal_calctype());
  }
  if (!from._internal_priority().empty()) {
    _internal_set_priority(from._internal_priority());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (!from._internal_excminbw().empty()) {
    _internal_set_excminbw(from._internal_excminbw());
  }
  if (from._internal_has_unsupptlv()) {
    _internal_mutable_unsupptlv()->::service_layer::SLBgplsTopoFadUnsuppTlv::MergeFrom(from._internal_unsupptlv());
  }
  if (from._internal_excmaxdelay() != 0) {
    _internal_set_excmaxdelay(from._internal_excmaxdelay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoFad::CopyFrom(const SLBgplsTopoFad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoFad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoFad::IsInitialized() const {
  return true;
}

void SLBgplsTopoFad::InternalSwap(SLBgplsTopoFad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  excanyaff_.InternalSwap(&other->excanyaff_);
  incanyaff_.InternalSwap(&other->incanyaff_);
  incallaff_.InternalSwap(&other->incallaff_);
  excsrlg_.InternalSwap(&other->excsrlg_);
  excanyrevaff_.InternalSwap(&other->excanyrevaff_);
  incanyrevaff_.InternalSwap(&other->incanyrevaff_);
  incallrevaff_.InternalSwap(&other->incallrevaff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &algorithm_, lhs_arena,
      &other->algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metrictype_, lhs_arena,
      &other->metrictype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &calctype_, lhs_arena,
      &other->calctype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &priority_, lhs_arena,
      &other->priority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &excminbw_, lhs_arena,
      &other->excminbw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoFad, excmaxdelay_)
      + sizeof(SLBgplsTopoFad::excmaxdelay_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoFad, unsupptlv_)>(
          reinterpret_cast<char*>(&unsupptlv_),
          reinterpret_cast<char*>(&other->unsupptlv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoFad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[45]);
}

// ===================================================================

class SLBgplsTopoPrefixFAPM::_Internal {
 public:
};

SLBgplsTopoPrefixFAPM::SLBgplsTopoPrefixFAPM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixFAPM)
}
SLBgplsTopoPrefixFAPM::SLBgplsTopoPrefixFAPM(const SLBgplsTopoPrefixFAPM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&flexalgo_, &from.flexalgo_,
    static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&flexalgo_)) + sizeof(metric_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixFAPM)
}

inline void SLBgplsTopoPrefixFAPM::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flexalgo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&flexalgo_)) + sizeof(metric_));
}

SLBgplsTopoPrefixFAPM::~SLBgplsTopoPrefixFAPM() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixFAPM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixFAPM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixFAPM::ArenaDtor(void* object) {
  SLBgplsTopoPrefixFAPM* _this = reinterpret_cast< SLBgplsTopoPrefixFAPM* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixFAPM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixFAPM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixFAPM::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixFAPM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&flexalgo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metric_) -
      reinterpret_cast<char*>(&flexalgo_)) + sizeof(metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixFAPM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 FlexAlgo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flexalgo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Metric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixFAPM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixFAPM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FlexAlgo = 1;
  if (this->_internal_flexalgo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flexalgo(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 Metric = 3;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixFAPM)
  return target;
}

size_t SLBgplsTopoPrefixFAPM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixFAPM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 FlexAlgo = 1;
  if (this->_internal_flexalgo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flexalgo());
  }

  // uint32 Metric = 3;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixFAPM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixFAPM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixFAPM::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixFAPM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixFAPM *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixFAPM &>(from));
}


void SLBgplsTopoPrefixFAPM::MergeFrom(const SLBgplsTopoPrefixFAPM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixFAPM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_flexalgo() != 0) {
    _internal_set_flexalgo(from._internal_flexalgo());
  }
  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixFAPM::CopyFrom(const SLBgplsTopoPrefixFAPM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixFAPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixFAPM::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixFAPM::InternalSwap(SLBgplsTopoPrefixFAPM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixFAPM, metric_)
      + sizeof(SLBgplsTopoPrefixFAPM::metric_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixFAPM, flexalgo_)>(
          reinterpret_cast<char*>(&flexalgo_),
          reinterpret_cast<char*>(&other->flexalgo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixFAPM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[46]);
}

// ===================================================================

class SLBgplsTopoFadUnsuppTlv::_Internal {
 public:
};

SLBgplsTopoFadUnsuppTlv::SLBgplsTopoFadUnsuppTlv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoFadUnsuppTlv)
}
SLBgplsTopoFadUnsuppTlv::SLBgplsTopoFadUnsuppTlv(const SLBgplsTopoFadUnsuppTlv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_types().empty()) {
    types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_types(), 
      GetArenaForAllocation());
  }
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoFadUnsuppTlv)
}

inline void SLBgplsTopoFadUnsuppTlv::SharedCtor() {
types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_ = 0;
}

SLBgplsTopoFadUnsuppTlv::~SLBgplsTopoFadUnsuppTlv() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoFadUnsuppTlv)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoFadUnsuppTlv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  types_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoFadUnsuppTlv::ArenaDtor(void* object) {
  SLBgplsTopoFadUnsuppTlv* _this = reinterpret_cast< SLBgplsTopoFadUnsuppTlv* >(object);
  (void)_this;
}
void SLBgplsTopoFadUnsuppTlv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoFadUnsuppTlv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoFadUnsuppTlv::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.ClearToEmpty();
  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoFadUnsuppTlv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoProtocol Protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::service_layer::SLBgplsTopoProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_types();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoFadUnsuppTlv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoProtocol Protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // bytes Types = 2;
  if (!this->_internal_types().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_types(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoFadUnsuppTlv)
  return target;
}

size_t SLBgplsTopoFadUnsuppTlv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Types = 2;
  if (!this->_internal_types().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_types());
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoFadUnsuppTlv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoFadUnsuppTlv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoFadUnsuppTlv::GetClassData() const { return &_class_data_; }

void SLBgplsTopoFadUnsuppTlv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoFadUnsuppTlv *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoFadUnsuppTlv &>(from));
}


void SLBgplsTopoFadUnsuppTlv::MergeFrom(const SLBgplsTopoFadUnsuppTlv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_types().empty()) {
    _internal_set_types(from._internal_types());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoFadUnsuppTlv::CopyFrom(const SLBgplsTopoFadUnsuppTlv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoFadUnsuppTlv::IsInitialized() const {
  return true;
}

void SLBgplsTopoFadUnsuppTlv::InternalSwap(SLBgplsTopoFadUnsuppTlv* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &types_, lhs_arena,
      &other->types_, rhs_arena
  );
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoFadUnsuppTlv::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[47]);
}

// ===================================================================

class SLBgplsTopoExtAdminGroup::_Internal {
 public:
};

SLBgplsTopoExtAdminGroup::SLBgplsTopoExtAdminGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoExtAdminGroup)
}
SLBgplsTopoExtAdminGroup::SLBgplsTopoExtAdminGroup(const SLBgplsTopoExtAdminGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_ = from.group_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoExtAdminGroup)
}

inline void SLBgplsTopoExtAdminGroup::SharedCtor() {
group_ = 0u;
}

SLBgplsTopoExtAdminGroup::~SLBgplsTopoExtAdminGroup() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoExtAdminGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoExtAdminGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoExtAdminGroup::ArenaDtor(void* object) {
  SLBgplsTopoExtAdminGroup* _this = reinterpret_cast< SLBgplsTopoExtAdminGroup* >(object);
  (void)_this;
}
void SLBgplsTopoExtAdminGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoExtAdminGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoExtAdminGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoExtAdminGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoExtAdminGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoExtAdminGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoExtAdminGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Group = 1;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoExtAdminGroup)
  return target;
}

size_t SLBgplsTopoExtAdminGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoExtAdminGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Group = 1;
  if (this->_internal_group() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoExtAdminGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoExtAdminGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoExtAdminGroup::GetClassData() const { return &_class_data_; }

void SLBgplsTopoExtAdminGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoExtAdminGroup *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoExtAdminGroup &>(from));
}


void SLBgplsTopoExtAdminGroup::MergeFrom(const SLBgplsTopoExtAdminGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoExtAdminGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group() != 0) {
    _internal_set_group(from._internal_group());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoExtAdminGroup::CopyFrom(const SLBgplsTopoExtAdminGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoExtAdminGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoExtAdminGroup::IsInitialized() const {
  return true;
}

void SLBgplsTopoExtAdminGroup::InternalSwap(SLBgplsTopoExtAdminGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoExtAdminGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[48]);
}

// ===================================================================

class SLBgplsTopoLinkMaxBandwidth::_Internal {
 public:
};

SLBgplsTopoLinkMaxBandwidth::SLBgplsTopoLinkMaxBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMaxBandwidth)
}
SLBgplsTopoLinkMaxBandwidth::SLBgplsTopoLinkMaxBandwidth(const SLBgplsTopoLinkMaxBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMaxBandwidth)
}

inline void SLBgplsTopoLinkMaxBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkMaxBandwidth::~SLBgplsTopoLinkMaxBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMaxBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMaxBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkMaxBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoLinkMaxBandwidth* _this = reinterpret_cast< SLBgplsTopoLinkMaxBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMaxBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMaxBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMaxBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMaxBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMaxBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMaxBandwidth)
  return target;
}

size_t SLBgplsTopoLinkMaxBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMaxBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMaxBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMaxBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMaxBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMaxBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMaxBandwidth &>(from));
}


void SLBgplsTopoLinkMaxBandwidth::MergeFrom(const SLBgplsTopoLinkMaxBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMaxBandwidth::CopyFrom(const SLBgplsTopoLinkMaxBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMaxBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMaxBandwidth::InternalSwap(SLBgplsTopoLinkMaxBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMaxBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[49]);
}

// ===================================================================

class SLBgplsTopoLinkMaxResvBandwidth::_Internal {
 public:
};

SLBgplsTopoLinkMaxResvBandwidth::SLBgplsTopoLinkMaxResvBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
}
SLBgplsTopoLinkMaxResvBandwidth::SLBgplsTopoLinkMaxResvBandwidth(const SLBgplsTopoLinkMaxResvBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
}

inline void SLBgplsTopoLinkMaxResvBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkMaxResvBandwidth::~SLBgplsTopoLinkMaxResvBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMaxResvBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkMaxResvBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoLinkMaxResvBandwidth* _this = reinterpret_cast< SLBgplsTopoLinkMaxResvBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMaxResvBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMaxResvBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMaxResvBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMaxResvBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMaxResvBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  return target;
}

size_t SLBgplsTopoLinkMaxResvBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMaxResvBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMaxResvBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMaxResvBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMaxResvBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMaxResvBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMaxResvBandwidth &>(from));
}


void SLBgplsTopoLinkMaxResvBandwidth::MergeFrom(const SLBgplsTopoLinkMaxResvBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMaxResvBandwidth::CopyFrom(const SLBgplsTopoLinkMaxResvBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMaxResvBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMaxResvBandwidth::InternalSwap(SLBgplsTopoLinkMaxResvBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMaxResvBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[50]);
}

// ===================================================================

class SLBgplsTopoLinkUnresvBandwidth::_Internal {
 public:
};

SLBgplsTopoLinkUnresvBandwidth::SLBgplsTopoLinkUnresvBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkUnresvBandwidth)
}
SLBgplsTopoLinkUnresvBandwidth::SLBgplsTopoLinkUnresvBandwidth(const SLBgplsTopoLinkUnresvBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkUnresvBandwidth)
}

inline void SLBgplsTopoLinkUnresvBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
priority_ = 0u;
}

SLBgplsTopoLinkUnresvBandwidth::~SLBgplsTopoLinkUnresvBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkUnresvBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkUnresvBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoLinkUnresvBandwidth* _this = reinterpret_cast< SLBgplsTopoLinkUnresvBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoLinkUnresvBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkUnresvBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkUnresvBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  priority_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkUnresvBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkUnresvBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Priority = 1;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // bytes Bandwidth = 2;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  return target;
}

size_t SLBgplsTopoLinkUnresvBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 2;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  // uint32 Priority = 1;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkUnresvBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkUnresvBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkUnresvBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkUnresvBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkUnresvBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkUnresvBandwidth &>(from));
}


void SLBgplsTopoLinkUnresvBandwidth::MergeFrom(const SLBgplsTopoLinkUnresvBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkUnresvBandwidth::CopyFrom(const SLBgplsTopoLinkUnresvBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkUnresvBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkUnresvBandwidth::InternalSwap(SLBgplsTopoLinkUnresvBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkUnresvBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[51]);
}

// ===================================================================

class SLBgplsTopoLinkTeDefaultMetric::_Internal {
 public:
};

SLBgplsTopoLinkTeDefaultMetric::SLBgplsTopoLinkTeDefaultMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkTeDefaultMetric)
}
SLBgplsTopoLinkTeDefaultMetric::SLBgplsTopoLinkTeDefaultMetric(const SLBgplsTopoLinkTeDefaultMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkTeDefaultMetric)
}

inline void SLBgplsTopoLinkTeDefaultMetric::SharedCtor() {
metric_ = 0u;
}

SLBgplsTopoLinkTeDefaultMetric::~SLBgplsTopoLinkTeDefaultMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkTeDefaultMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkTeDefaultMetric::ArenaDtor(void* object) {
  SLBgplsTopoLinkTeDefaultMetric* _this = reinterpret_cast< SLBgplsTopoLinkTeDefaultMetric* >(object);
  (void)_this;
}
void SLBgplsTopoLinkTeDefaultMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkTeDefaultMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkTeDefaultMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkTeDefaultMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkTeDefaultMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  return target;
}

size_t SLBgplsTopoLinkTeDefaultMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkTeDefaultMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkTeDefaultMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkTeDefaultMetric::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkTeDefaultMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkTeDefaultMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkTeDefaultMetric &>(from));
}


void SLBgplsTopoLinkTeDefaultMetric::MergeFrom(const SLBgplsTopoLinkTeDefaultMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkTeDefaultMetric::CopyFrom(const SLBgplsTopoLinkTeDefaultMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkTeDefaultMetric::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkTeDefaultMetric::InternalSwap(SLBgplsTopoLinkTeDefaultMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metric_, other->metric_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkTeDefaultMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[52]);
}

// ===================================================================

class SLBgplsTopoLinkProtecionType::_Internal {
 public:
};

SLBgplsTopoLinkProtecionType::SLBgplsTopoLinkProtecionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkProtecionType)
}
SLBgplsTopoLinkProtecionType::SLBgplsTopoLinkProtecionType(const SLBgplsTopoLinkProtecionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkProtecionType)
}

inline void SLBgplsTopoLinkProtecionType::SharedCtor() {
mask_ = 0u;
}

SLBgplsTopoLinkProtecionType::~SLBgplsTopoLinkProtecionType() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkProtecionType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkProtecionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkProtecionType::ArenaDtor(void* object) {
  SLBgplsTopoLinkProtecionType* _this = reinterpret_cast< SLBgplsTopoLinkProtecionType* >(object);
  (void)_this;
}
void SLBgplsTopoLinkProtecionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkProtecionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkProtecionType::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkProtecionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkProtecionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkProtecionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkProtecionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Mask = 1;
  if (this->_internal_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkProtecionType)
  return target;
}

size_t SLBgplsTopoLinkProtecionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkProtecionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Mask = 1;
  if (this->_internal_mask() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkProtecionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkProtecionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkProtecionType::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkProtecionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkProtecionType *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkProtecionType &>(from));
}


void SLBgplsTopoLinkProtecionType::MergeFrom(const SLBgplsTopoLinkProtecionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkProtecionType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mask() != 0) {
    _internal_set_mask(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkProtecionType::CopyFrom(const SLBgplsTopoLinkProtecionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkProtecionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkProtecionType::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkProtecionType::InternalSwap(SLBgplsTopoLinkProtecionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkProtecionType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[53]);
}

// ===================================================================

class SLBgplsTopoLinkMplsProtoMask::_Internal {
 public:
};

SLBgplsTopoLinkMplsProtoMask::SLBgplsTopoLinkMplsProtoMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMplsProtoMask)
}
SLBgplsTopoLinkMplsProtoMask::SLBgplsTopoLinkMplsProtoMask(const SLBgplsTopoLinkMplsProtoMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask().empty()) {
    mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mask(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMplsProtoMask)
}

inline void SLBgplsTopoLinkMplsProtoMask::SharedCtor() {
mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkMplsProtoMask::~SLBgplsTopoLinkMplsProtoMask() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMplsProtoMask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMplsProtoMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkMplsProtoMask::ArenaDtor(void* object) {
  SLBgplsTopoLinkMplsProtoMask* _this = reinterpret_cast< SLBgplsTopoLinkMplsProtoMask* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMplsProtoMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMplsProtoMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMplsProtoMask::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMplsProtoMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMplsProtoMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Mask = 1;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMplsProtoMask)
  return target;
}

size_t SLBgplsTopoLinkMplsProtoMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Mask = 1;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMplsProtoMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMplsProtoMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMplsProtoMask::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMplsProtoMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMplsProtoMask *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMplsProtoMask &>(from));
}


void SLBgplsTopoLinkMplsProtoMask::MergeFrom(const SLBgplsTopoLinkMplsProtoMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mask().empty()) {
    _internal_set_mask(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMplsProtoMask::CopyFrom(const SLBgplsTopoLinkMplsProtoMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMplsProtoMask::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMplsProtoMask::InternalSwap(SLBgplsTopoLinkMplsProtoMask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mask_, lhs_arena,
      &other->mask_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMplsProtoMask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[54]);
}

// ===================================================================

class SLBgplsTopoLinkIgpMetric::_Internal {
 public:
};

SLBgplsTopoLinkIgpMetric::SLBgplsTopoLinkIgpMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkIgpMetric)
}
SLBgplsTopoLinkIgpMetric::SLBgplsTopoLinkIgpMetric(const SLBgplsTopoLinkIgpMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric().empty()) {
    metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkIgpMetric)
}

inline void SLBgplsTopoLinkIgpMetric::SharedCtor() {
metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkIgpMetric::~SLBgplsTopoLinkIgpMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkIgpMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkIgpMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkIgpMetric::ArenaDtor(void* object) {
  SLBgplsTopoLinkIgpMetric* _this = reinterpret_cast< SLBgplsTopoLinkIgpMetric* >(object);
  (void)_this;
}
void SLBgplsTopoLinkIgpMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkIgpMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkIgpMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkIgpMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkIgpMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkIgpMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkIgpMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Metric = 1;
  if (!this->_internal_metric().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkIgpMetric)
  return target;
}

size_t SLBgplsTopoLinkIgpMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkIgpMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Metric = 1;
  if (!this->_internal_metric().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkIgpMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkIgpMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkIgpMetric::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkIgpMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkIgpMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkIgpMetric &>(from));
}


void SLBgplsTopoLinkIgpMetric::MergeFrom(const SLBgplsTopoLinkIgpMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkIgpMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metric().empty()) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkIgpMetric::CopyFrom(const SLBgplsTopoLinkIgpMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkIgpMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkIgpMetric::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkIgpMetric::InternalSwap(SLBgplsTopoLinkIgpMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metric_, lhs_arena,
      &other->metric_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkIgpMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[55]);
}

// ===================================================================

class SLBgplsTopoLinkSrlg::_Internal {
 public:
};

SLBgplsTopoLinkSrlg::SLBgplsTopoLinkSrlg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkSrlg)
}
SLBgplsTopoLinkSrlg::SLBgplsTopoLinkSrlg(const SLBgplsTopoLinkSrlg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srlgval_ = from.srlgval_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkSrlg)
}

inline void SLBgplsTopoLinkSrlg::SharedCtor() {
srlgval_ = 0u;
}

SLBgplsTopoLinkSrlg::~SLBgplsTopoLinkSrlg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkSrlg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkSrlg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkSrlg::ArenaDtor(void* object) {
  SLBgplsTopoLinkSrlg* _this = reinterpret_cast< SLBgplsTopoLinkSrlg* >(object);
  (void)_this;
}
void SLBgplsTopoLinkSrlg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkSrlg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkSrlg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkSrlg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srlgval_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkSrlg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SrlgVal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srlgval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkSrlg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkSrlg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SrlgVal = 1;
  if (this->_internal_srlgval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srlgval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkSrlg)
  return target;
}

size_t SLBgplsTopoLinkSrlg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkSrlg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SrlgVal = 1;
  if (this->_internal_srlgval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_srlgval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkSrlg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkSrlg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkSrlg::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkSrlg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkSrlg *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkSrlg &>(from));
}


void SLBgplsTopoLinkSrlg::MergeFrom(const SLBgplsTopoLinkSrlg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkSrlg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srlgval() != 0) {
    _internal_set_srlgval(from._internal_srlgval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkSrlg::CopyFrom(const SLBgplsTopoLinkSrlg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkSrlg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkSrlg::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkSrlg::InternalSwap(SLBgplsTopoLinkSrlg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(srlgval_, other->srlgval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkSrlg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[56]);
}

// ===================================================================

class SLBgplsTopoLinkOpaqueAttr::_Internal {
 public:
};

SLBgplsTopoLinkOpaqueAttr::SLBgplsTopoLinkOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkOpaqueAttr)
}
SLBgplsTopoLinkOpaqueAttr::SLBgplsTopoLinkOpaqueAttr(const SLBgplsTopoLinkOpaqueAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opaqueattr().empty()) {
    opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaqueattr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkOpaqueAttr)
}

inline void SLBgplsTopoLinkOpaqueAttr::SharedCtor() {
opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkOpaqueAttr::~SLBgplsTopoLinkOpaqueAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkOpaqueAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkOpaqueAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaqueattr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkOpaqueAttr::ArenaDtor(void* object) {
  SLBgplsTopoLinkOpaqueAttr* _this = reinterpret_cast< SLBgplsTopoLinkOpaqueAttr* >(object);
  (void)_this;
}
void SLBgplsTopoLinkOpaqueAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkOpaqueAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkOpaqueAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaqueattr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkOpaqueAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes OpaqueAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaqueattr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkOpaqueAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaqueattr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkOpaqueAttr)
  return target;
}

size_t SLBgplsTopoLinkOpaqueAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaqueattr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkOpaqueAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkOpaqueAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkOpaqueAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkOpaqueAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkOpaqueAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkOpaqueAttr &>(from));
}


void SLBgplsTopoLinkOpaqueAttr::MergeFrom(const SLBgplsTopoLinkOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_opaqueattr().empty()) {
    _internal_set_opaqueattr(from._internal_opaqueattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkOpaqueAttr::CopyFrom(const SLBgplsTopoLinkOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkOpaqueAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkOpaqueAttr::InternalSwap(SLBgplsTopoLinkOpaqueAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaqueattr_, lhs_arena,
      &other->opaqueattr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkOpaqueAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[57]);
}

// ===================================================================

class SLBgplsTopoLinkName::_Internal {
 public:
};

SLBgplsTopoLinkName::SLBgplsTopoLinkName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkName)
}
SLBgplsTopoLinkName::SLBgplsTopoLinkName(const SLBgplsTopoLinkName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkName)
}

inline void SLBgplsTopoLinkName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkName::~SLBgplsTopoLinkName() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkName::ArenaDtor(void* object) {
  SLBgplsTopoLinkName* _this = reinterpret_cast< SLBgplsTopoLinkName* >(object);
  (void)_this;
}
void SLBgplsTopoLinkName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgplsTopoLinkName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgplsTopoLinkName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkName)
  return target;
}

size_t SLBgplsTopoLinkName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkName::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkName *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkName &>(from));
}


void SLBgplsTopoLinkName::MergeFrom(const SLBgplsTopoLinkName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkName::CopyFrom(const SLBgplsTopoLinkName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkName::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkName::InternalSwap(SLBgplsTopoLinkName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[58]);
}

// ===================================================================

class SLBgplsTopoAdjSid::_Internal {
 public:
};

SLBgplsTopoAdjSid::SLBgplsTopoAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoAdjSid)
}
SLBgplsTopoAdjSid::SLBgplsTopoAdjSid(const SLBgplsTopoAdjSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&labelindex_, &from.labelindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoAdjSid)
}

inline void SLBgplsTopoAdjSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&labelindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
}

SLBgplsTopoAdjSid::~SLBgplsTopoAdjSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoAdjSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoAdjSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoAdjSid::ArenaDtor(void* object) {
  SLBgplsTopoAdjSid* _this = reinterpret_cast< SLBgplsTopoAdjSid* >(object);
  (void)_this;
}
void SLBgplsTopoAdjSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoAdjSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoAdjSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoAdjSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&labelindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoAdjSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LabelIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          labelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAdjSidFormat AdjSidFormat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adjsidformat(static_cast<::service_layer::SLBgplsTopoAdjSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoAdjSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoAdjSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LabelIndex = 1;
  if (this->_internal_labelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_labelindex(), target);
  }

  // .service_layer.SLBgplsTopoAdjSidFormat AdjSidFormat = 2;
  if (this->_internal_adjsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_adjsidformat(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoAdjSid)
  return target;
}

size_t SLBgplsTopoAdjSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoAdjSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 LabelIndex = 1;
  if (this->_internal_labelindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_labelindex());
  }

  // .service_layer.SLBgplsTopoAdjSidFormat AdjSidFormat = 2;
  if (this->_internal_adjsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adjsidformat());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoAdjSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoAdjSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoAdjSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoAdjSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoAdjSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoAdjSid &>(from));
}


void SLBgplsTopoAdjSid::MergeFrom(const SLBgplsTopoAdjSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoAdjSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_labelindex() != 0) {
    _internal_set_labelindex(from._internal_labelindex());
  }
  if (from._internal_adjsidformat() != 0) {
    _internal_set_adjsidformat(from._internal_adjsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoAdjSid::CopyFrom(const SLBgplsTopoAdjSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoAdjSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoAdjSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoAdjSid::InternalSwap(SLBgplsTopoAdjSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoAdjSid, weight_)
      + sizeof(SLBgplsTopoAdjSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoAdjSid, labelindex_)>(
          reinterpret_cast<char*>(&labelindex_),
          reinterpret_cast<char*>(&other->labelindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoAdjSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[59]);
}

// ===================================================================

class SLBgplsTopoLanAdjSid::_Internal {
 public:
  static const ::service_layer::SLBgpLsTopoNeighborId& neighbor(const SLBgplsTopoLanAdjSid* msg);
};

const ::service_layer::SLBgpLsTopoNeighborId&
SLBgplsTopoLanAdjSid::_Internal::neighbor(const SLBgplsTopoLanAdjSid* msg) {
  return *msg->neighbor_;
}
SLBgplsTopoLanAdjSid::SLBgplsTopoLanAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLanAdjSid)
}
SLBgplsTopoLanAdjSid::SLBgplsTopoLanAdjSid(const SLBgplsTopoLanAdjSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_neighbor()) {
    neighbor_ = new ::service_layer::SLBgpLsTopoNeighborId(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  ::memcpy(&labelindex_, &from.labelindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLanAdjSid)
}

inline void SLBgplsTopoLanAdjSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&neighbor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&neighbor_)) + sizeof(weight_));
}

SLBgplsTopoLanAdjSid::~SLBgplsTopoLanAdjSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLanAdjSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLanAdjSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete neighbor_;
}

void SLBgplsTopoLanAdjSid::ArenaDtor(void* object) {
  SLBgplsTopoLanAdjSid* _this = reinterpret_cast< SLBgplsTopoLanAdjSid* >(object);
  (void)_this;
}
void SLBgplsTopoLanAdjSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLanAdjSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLanAdjSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLanAdjSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && neighbor_ != nullptr) {
    delete neighbor_;
  }
  neighbor_ = nullptr;
  ::memset(&labelindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLanAdjSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LabelIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          labelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAdjSidFormat AdjSidFormat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adjsidformat(static_cast<::service_layer::SLBgplsTopoAdjSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLanAdjSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLanAdjSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  if (this->_internal_has_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::neighbor(this), target, stream);
  }

  // uint32 LabelIndex = 2;
  if (this->_internal_labelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_labelindex(), target);
  }

  // .service_layer.SLBgplsTopoAdjSidFormat AdjSidFormat = 3;
  if (this->_internal_adjsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_adjsidformat(), target);
  }

  // bytes Flags = 4;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_flags(), target);
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLanAdjSid)
  return target;
}

size_t SLBgplsTopoLanAdjSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLanAdjSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 4;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  if (this->_internal_has_neighbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }

  // uint32 LabelIndex = 2;
  if (this->_internal_labelindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_labelindex());
  }

  // .service_layer.SLBgplsTopoAdjSidFormat AdjSidFormat = 3;
  if (this->_internal_adjsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adjsidformat());
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLanAdjSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLanAdjSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLanAdjSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLanAdjSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLanAdjSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLanAdjSid &>(from));
}


void SLBgplsTopoLanAdjSid::MergeFrom(const SLBgplsTopoLanAdjSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLanAdjSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_neighbor()) {
    _internal_mutable_neighbor()->::service_layer::SLBgpLsTopoNeighborId::MergeFrom(from._internal_neighbor());
  }
  if (from._internal_labelindex() != 0) {
    _internal_set_labelindex(from._internal_labelindex());
  }
  if (from._internal_adjsidformat() != 0) {
    _internal_set_adjsidformat(from._internal_adjsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLanAdjSid::CopyFrom(const SLBgplsTopoLanAdjSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLanAdjSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLanAdjSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoLanAdjSid::InternalSwap(SLBgplsTopoLanAdjSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLanAdjSid, weight_)
      + sizeof(SLBgplsTopoLanAdjSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLanAdjSid, neighbor_)>(
          reinterpret_cast<char*>(&neighbor_),
          reinterpret_cast<char*>(&other->neighbor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLanAdjSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[60]);
}

// ===================================================================

class SLBgplsTopoSrv6EndXSid::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct(const SLBgplsTopoSrv6EndXSid* msg);
};

const ::service_layer::SLBgplsTopoSrv6SidStruct&
SLBgplsTopoSrv6EndXSid::_Internal::sidstruct(const SLBgplsTopoSrv6EndXSid* msg) {
  return *msg->sidstruct_;
}
SLBgplsTopoSrv6EndXSid::SLBgplsTopoSrv6EndXSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6EndXSid)
}
SLBgplsTopoSrv6EndXSid::SLBgplsTopoSrv6EndXSid(const SLBgplsTopoSrv6EndXSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLBgplsTopoSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&endpointbehavior_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(endpointbehavior_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6EndXSid)
}

inline void SLBgplsTopoSrv6EndXSid::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sidstruct_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endpointbehavior_) -
    reinterpret_cast<char*>(&sidstruct_)) + sizeof(endpointbehavior_));
}

SLBgplsTopoSrv6EndXSid::~SLBgplsTopoSrv6EndXSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6EndXSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6EndXSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sidstruct_;
}

void SLBgplsTopoSrv6EndXSid::ArenaDtor(void* object) {
  SLBgplsTopoSrv6EndXSid* _this = reinterpret_cast< SLBgplsTopoSrv6EndXSid* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6EndXSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6EndXSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6EndXSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6EndXSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endpointbehavior_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(endpointbehavior_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6EndXSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EndPointBehavior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          endpointbehavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6EndXSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6EndXSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_algorithm(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  // uint32 EndPointBehavior = 5;
  if (this->_internal_endpointbehavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_endpointbehavior(), target);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 6;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6EndXSid)
  return target;
}

size_t SLBgplsTopoSrv6EndXSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6EndXSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 6;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  // uint32 EndPointBehavior = 5;
  if (this->_internal_endpointbehavior() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_endpointbehavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6EndXSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6EndXSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6EndXSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6EndXSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6EndXSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6EndXSid &>(from));
}


void SLBgplsTopoSrv6EndXSid::MergeFrom(const SLBgplsTopoSrv6EndXSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6EndXSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLBgplsTopoSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_endpointbehavior() != 0) {
    _internal_set_endpointbehavior(from._internal_endpointbehavior());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6EndXSid::CopyFrom(const SLBgplsTopoSrv6EndXSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6EndXSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6EndXSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6EndXSid::InternalSwap(SLBgplsTopoSrv6EndXSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6EndXSid, endpointbehavior_)
      + sizeof(SLBgplsTopoSrv6EndXSid::endpointbehavior_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6EndXSid, sidstruct_)>(
          reinterpret_cast<char*>(&sidstruct_),
          reinterpret_cast<char*>(&other->sidstruct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6EndXSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[61]);
}

// ===================================================================

class SLBgpLsTopoNeighborId::_Internal {
 public:
};

SLBgpLsTopoNeighborId::SLBgpLsTopoNeighborId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpLsTopoNeighborId)
}
SLBgpLsTopoNeighborId::SLBgpLsTopoNeighborId(const SLBgpLsTopoNeighborId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isneighboridipv4_ = from.isneighboridipv4_;
  clear_has_NeighborId();
  switch (from.NeighborId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kSystemId: {
      _internal_set_systemid(from._internal_systemid());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpLsTopoNeighborId)
}

inline void SLBgpLsTopoNeighborId::SharedCtor() {
isneighboridipv4_ = 0u;
clear_has_NeighborId();
}

SLBgpLsTopoNeighborId::~SLBgpLsTopoNeighborId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpLsTopoNeighborId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpLsTopoNeighborId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_NeighborId()) {
    clear_NeighborId();
  }
}

void SLBgpLsTopoNeighborId::ArenaDtor(void* object) {
  SLBgpLsTopoNeighborId* _this = reinterpret_cast< SLBgpLsTopoNeighborId* >(object);
  (void)_this;
}
void SLBgpLsTopoNeighborId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpLsTopoNeighborId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpLsTopoNeighborId::clear_NeighborId() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpLsTopoNeighborId)
  switch (NeighborId_case()) {
    case kIpv4Addr: {
      // No need to clear
      break;
    }
    case kSystemId: {
      NeighborId_.systemid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NEIGHBORID_NOT_SET;
}


void SLBgpLsTopoNeighborId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpLsTopoNeighborId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isneighboridipv4_ = 0u;
  clear_NeighborId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpLsTopoNeighborId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Ipv4Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_ipv4addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SystemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_systemid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsNeighborIdIpv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          isneighboridipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpLsTopoNeighborId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpLsTopoNeighborId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Ipv4Addr = 1;
  if (_internal_has_ipv4addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ipv4addr(), target);
  }

  // bytes SystemId = 2;
  if (_internal_has_systemid()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_systemid(), target);
  }

  // uint32 IsNeighborIdIpv4 = 3;
  if (this->_internal_isneighboridipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_isneighboridipv4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpLsTopoNeighborId)
  return target;
}

size_t SLBgpLsTopoNeighborId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpLsTopoNeighborId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 IsNeighborIdIpv4 = 3;
  if (this->_internal_isneighboridipv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isneighboridipv4());
  }

  switch (NeighborId_case()) {
    // uint32 Ipv4Addr = 1;
    case kIpv4Addr: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4addr());
      break;
    }
    // bytes SystemId = 2;
    case kSystemId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_systemid());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpLsTopoNeighborId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpLsTopoNeighborId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpLsTopoNeighborId::GetClassData() const { return &_class_data_; }

void SLBgpLsTopoNeighborId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpLsTopoNeighborId *>(to)->MergeFrom(
      static_cast<const SLBgpLsTopoNeighborId &>(from));
}


void SLBgpLsTopoNeighborId::MergeFrom(const SLBgpLsTopoNeighborId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpLsTopoNeighborId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isneighboridipv4() != 0) {
    _internal_set_isneighboridipv4(from._internal_isneighboridipv4());
  }
  switch (from.NeighborId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kSystemId: {
      _internal_set_systemid(from._internal_systemid());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpLsTopoNeighborId::CopyFrom(const SLBgpLsTopoNeighborId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpLsTopoNeighborId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpLsTopoNeighborId::IsInitialized() const {
  return true;
}

void SLBgpLsTopoNeighborId::InternalSwap(SLBgpLsTopoNeighborId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(isneighboridipv4_, other->isneighboridipv4_);
  swap(NeighborId_, other->NeighborId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpLsTopoNeighborId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[62]);
}

// ===================================================================

class SLBgplsTopoSrv6LanEndXSid::_Internal {
 public:
  static const ::service_layer::SLBgpLsTopoNeighborId& neighbor(const SLBgplsTopoSrv6LanEndXSid* msg);
  static const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct(const SLBgplsTopoSrv6LanEndXSid* msg);
};

const ::service_layer::SLBgpLsTopoNeighborId&
SLBgplsTopoSrv6LanEndXSid::_Internal::neighbor(const SLBgplsTopoSrv6LanEndXSid* msg) {
  return *msg->neighbor_;
}
const ::service_layer::SLBgplsTopoSrv6SidStruct&
SLBgplsTopoSrv6LanEndXSid::_Internal::sidstruct(const SLBgplsTopoSrv6LanEndXSid* msg) {
  return *msg->sidstruct_;
}
SLBgplsTopoSrv6LanEndXSid::SLBgplsTopoSrv6LanEndXSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6LanEndXSid)
}
SLBgplsTopoSrv6LanEndXSid::SLBgplsTopoSrv6LanEndXSid(const SLBgplsTopoSrv6LanEndXSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_neighbor()) {
    neighbor_ = new ::service_layer::SLBgpLsTopoNeighborId(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLBgplsTopoSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&endpointbehavior_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(endpointbehavior_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6LanEndXSid)
}

inline void SLBgplsTopoSrv6LanEndXSid::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&neighbor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endpointbehavior_) -
    reinterpret_cast<char*>(&neighbor_)) + sizeof(endpointbehavior_));
}

SLBgplsTopoSrv6LanEndXSid::~SLBgplsTopoSrv6LanEndXSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6LanEndXSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6LanEndXSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete neighbor_;
  if (this != internal_default_instance()) delete sidstruct_;
}

void SLBgplsTopoSrv6LanEndXSid::ArenaDtor(void* object) {
  SLBgplsTopoSrv6LanEndXSid* _this = reinterpret_cast< SLBgplsTopoSrv6LanEndXSid* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6LanEndXSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6LanEndXSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6LanEndXSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6LanEndXSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && neighbor_ != nullptr) {
    delete neighbor_;
  }
  neighbor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endpointbehavior_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(endpointbehavior_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6LanEndXSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EndPointBehavior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          endpointbehavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6LanEndXSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6LanEndXSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  if (this->_internal_has_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::neighbor(this), target, stream);
  }

  // bytes Sid = 2;
  if (!this->_internal_sid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sid(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  // bytes Flags = 4;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_flags(), target);
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_weight(), target);
  }

  // uint32 EndPointBehavior = 6;
  if (this->_internal_endpointbehavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_endpointbehavior(), target);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6LanEndXSid)
  return target;
}

size_t SLBgplsTopoSrv6LanEndXSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6LanEndXSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Sid = 2;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // bytes Flags = 4;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  if (this->_internal_has_neighbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  // uint32 EndPointBehavior = 6;
  if (this->_internal_endpointbehavior() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_endpointbehavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6LanEndXSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6LanEndXSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6LanEndXSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6LanEndXSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6LanEndXSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6LanEndXSid &>(from));
}


void SLBgplsTopoSrv6LanEndXSid::MergeFrom(const SLBgplsTopoSrv6LanEndXSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6LanEndXSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_neighbor()) {
    _internal_mutable_neighbor()->::service_layer::SLBgpLsTopoNeighborId::MergeFrom(from._internal_neighbor());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLBgplsTopoSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_endpointbehavior() != 0) {
    _internal_set_endpointbehavior(from._internal_endpointbehavior());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6LanEndXSid::CopyFrom(const SLBgplsTopoSrv6LanEndXSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6LanEndXSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6LanEndXSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6LanEndXSid::InternalSwap(SLBgplsTopoSrv6LanEndXSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6LanEndXSid, endpointbehavior_)
      + sizeof(SLBgplsTopoSrv6LanEndXSid::endpointbehavior_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6LanEndXSid, neighbor_)>(
          reinterpret_cast<char*>(&neighbor_),
          reinterpret_cast<char*>(&other->neighbor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6LanEndXSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[63]);
}

// ===================================================================

class SLBgplsTopoUniLinkDelay::_Internal {
 public:
};

SLBgplsTopoUniLinkDelay::SLBgplsTopoUniLinkDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniLinkDelay)
}
SLBgplsTopoUniLinkDelay::SLBgplsTopoUniLinkDelay(const SLBgplsTopoUniLinkDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniLinkDelay)
}

inline void SLBgplsTopoUniLinkDelay::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
delay_ = 0u;
}

SLBgplsTopoUniLinkDelay::~SLBgplsTopoUniLinkDelay() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniLinkDelay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniLinkDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniLinkDelay::ArenaDtor(void* object) {
  SLBgplsTopoUniLinkDelay* _this = reinterpret_cast< SLBgplsTopoUniLinkDelay* >(object);
  (void)_this;
}
void SLBgplsTopoUniLinkDelay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniLinkDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniLinkDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniLinkDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  delay_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniLinkDelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniLinkDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniLinkDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Delay = 1;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_delay(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniLinkDelay)
  return target;
}

size_t SLBgplsTopoUniLinkDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniLinkDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Delay = 1;
  if (this->_internal_delay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_delay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniLinkDelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniLinkDelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniLinkDelay::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniLinkDelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniLinkDelay *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniLinkDelay &>(from));
}


void SLBgplsTopoUniLinkDelay::MergeFrom(const SLBgplsTopoUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniLinkDelay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_delay() != 0) {
    _internal_set_delay(from._internal_delay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniLinkDelay::CopyFrom(const SLBgplsTopoUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniLinkDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniLinkDelay::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniLinkDelay::InternalSwap(SLBgplsTopoUniLinkDelay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniLinkDelay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[64]);
}

// ===================================================================

class SLBgplsTopoMinMaxUniLinkDelay::_Internal {
 public:
};

SLBgplsTopoMinMaxUniLinkDelay::SLBgplsTopoMinMaxUniLinkDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
}
SLBgplsTopoMinMaxUniLinkDelay::SLBgplsTopoMinMaxUniLinkDelay(const SLBgplsTopoMinMaxUniLinkDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
}

inline void SLBgplsTopoMinMaxUniLinkDelay::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

SLBgplsTopoMinMaxUniLinkDelay::~SLBgplsTopoMinMaxUniLinkDelay() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoMinMaxUniLinkDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoMinMaxUniLinkDelay::ArenaDtor(void* object) {
  SLBgplsTopoMinMaxUniLinkDelay* _this = reinterpret_cast< SLBgplsTopoMinMaxUniLinkDelay* >(object);
  (void)_this;
}
void SLBgplsTopoMinMaxUniLinkDelay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoMinMaxUniLinkDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoMinMaxUniLinkDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoMinMaxUniLinkDelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoMinMaxUniLinkDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Min = 1;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(), target);
  }

  // uint32 Max = 2;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  return target;
}

size_t SLBgplsTopoMinMaxUniLinkDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Min = 1;
  if (this->_internal_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
  }

  // uint32 Max = 2;
  if (this->_internal_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoMinMaxUniLinkDelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoMinMaxUniLinkDelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoMinMaxUniLinkDelay::GetClassData() const { return &_class_data_; }

void SLBgplsTopoMinMaxUniLinkDelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoMinMaxUniLinkDelay *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoMinMaxUniLinkDelay &>(from));
}


void SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(const SLBgplsTopoMinMaxUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _internal_set_max(from._internal_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoMinMaxUniLinkDelay::CopyFrom(const SLBgplsTopoMinMaxUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoMinMaxUniLinkDelay::IsInitialized() const {
  return true;
}

void SLBgplsTopoMinMaxUniLinkDelay::InternalSwap(SLBgplsTopoMinMaxUniLinkDelay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoMinMaxUniLinkDelay, max_)
      + sizeof(SLBgplsTopoMinMaxUniLinkDelay::max_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoMinMaxUniLinkDelay, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoMinMaxUniLinkDelay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[65]);
}

// ===================================================================

class SLBgplsTopoUniDelayVar::_Internal {
 public:
};

SLBgplsTopoUniDelayVar::SLBgplsTopoUniDelayVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniDelayVar)
}
SLBgplsTopoUniDelayVar::SLBgplsTopoUniDelayVar(const SLBgplsTopoUniDelayVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  variation_ = from.variation_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniDelayVar)
}

inline void SLBgplsTopoUniDelayVar::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
variation_ = 0u;
}

SLBgplsTopoUniDelayVar::~SLBgplsTopoUniDelayVar() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniDelayVar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniDelayVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniDelayVar::ArenaDtor(void* object) {
  SLBgplsTopoUniDelayVar* _this = reinterpret_cast< SLBgplsTopoUniDelayVar* >(object);
  (void)_this;
}
void SLBgplsTopoUniDelayVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniDelayVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniDelayVar::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniDelayVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  variation_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniDelayVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          variation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniDelayVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniDelayVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Variation = 1;
  if (this->_internal_variation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_variation(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniDelayVar)
  return target;
}

size_t SLBgplsTopoUniDelayVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniDelayVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Variation = 1;
  if (this->_internal_variation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_variation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniDelayVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniDelayVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniDelayVar::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniDelayVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniDelayVar *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniDelayVar &>(from));
}


void SLBgplsTopoUniDelayVar::MergeFrom(const SLBgplsTopoUniDelayVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniDelayVar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_variation() != 0) {
    _internal_set_variation(from._internal_variation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniDelayVar::CopyFrom(const SLBgplsTopoUniDelayVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniDelayVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniDelayVar::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniDelayVar::InternalSwap(SLBgplsTopoUniDelayVar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(variation_, other->variation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniDelayVar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[66]);
}

// ===================================================================

class SLBgplsTopoUniLinkLoss::_Internal {
 public:
};

SLBgplsTopoUniLinkLoss::SLBgplsTopoUniLinkLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniLinkLoss)
}
SLBgplsTopoUniLinkLoss::SLBgplsTopoUniLinkLoss(const SLBgplsTopoUniLinkLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  loss_ = from.loss_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniLinkLoss)
}

inline void SLBgplsTopoUniLinkLoss::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
loss_ = 0u;
}

SLBgplsTopoUniLinkLoss::~SLBgplsTopoUniLinkLoss() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniLinkLoss)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniLinkLoss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniLinkLoss::ArenaDtor(void* object) {
  SLBgplsTopoUniLinkLoss* _this = reinterpret_cast< SLBgplsTopoUniLinkLoss* >(object);
  (void)_this;
}
void SLBgplsTopoUniLinkLoss::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniLinkLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniLinkLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniLinkLoss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  loss_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniLinkLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Loss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniLinkLoss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniLinkLoss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Loss = 1;
  if (this->_internal_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_loss(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniLinkLoss)
  return target;
}

size_t SLBgplsTopoUniLinkLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniLinkLoss)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Loss = 1;
  if (this->_internal_loss() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_loss());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniLinkLoss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniLinkLoss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniLinkLoss::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniLinkLoss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniLinkLoss *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniLinkLoss &>(from));
}


void SLBgplsTopoUniLinkLoss::MergeFrom(const SLBgplsTopoUniLinkLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniLinkLoss)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_loss() != 0) {
    _internal_set_loss(from._internal_loss());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniLinkLoss::CopyFrom(const SLBgplsTopoUniLinkLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniLinkLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniLinkLoss::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniLinkLoss::InternalSwap(SLBgplsTopoUniLinkLoss* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(loss_, other->loss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniLinkLoss::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[67]);
}

// ===================================================================

class SLBgplsTopoUniResBandwidth::_Internal {
 public:
};

SLBgplsTopoUniResBandwidth::SLBgplsTopoUniResBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniResBandwidth)
}
SLBgplsTopoUniResBandwidth::SLBgplsTopoUniResBandwidth(const SLBgplsTopoUniResBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniResBandwidth)
}

inline void SLBgplsTopoUniResBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoUniResBandwidth::~SLBgplsTopoUniResBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniResBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniResBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniResBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoUniResBandwidth* _this = reinterpret_cast< SLBgplsTopoUniResBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoUniResBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniResBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniResBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniResBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniResBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniResBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniResBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniResBandwidth)
  return target;
}

size_t SLBgplsTopoUniResBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniResBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniResBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniResBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniResBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniResBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniResBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniResBandwidth &>(from));
}


void SLBgplsTopoUniResBandwidth::MergeFrom(const SLBgplsTopoUniResBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniResBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniResBandwidth::CopyFrom(const SLBgplsTopoUniResBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniResBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniResBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniResBandwidth::InternalSwap(SLBgplsTopoUniResBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniResBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[68]);
}

// ===================================================================

class SLBgplsTopoUniAvailBandwidth::_Internal {
 public:
};

SLBgplsTopoUniAvailBandwidth::SLBgplsTopoUniAvailBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniAvailBandwidth)
}
SLBgplsTopoUniAvailBandwidth::SLBgplsTopoUniAvailBandwidth(const SLBgplsTopoUniAvailBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniAvailBandwidth)
}

inline void SLBgplsTopoUniAvailBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoUniAvailBandwidth::~SLBgplsTopoUniAvailBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniAvailBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniAvailBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniAvailBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoUniAvailBandwidth* _this = reinterpret_cast< SLBgplsTopoUniAvailBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoUniAvailBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniAvailBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniAvailBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniAvailBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniAvailBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniAvailBandwidth)
  return target;
}

size_t SLBgplsTopoUniAvailBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniAvailBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniAvailBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniAvailBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniAvailBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniAvailBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniAvailBandwidth &>(from));
}


void SLBgplsTopoUniAvailBandwidth::MergeFrom(const SLBgplsTopoUniAvailBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniAvailBandwidth::CopyFrom(const SLBgplsTopoUniAvailBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniAvailBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniAvailBandwidth::InternalSwap(SLBgplsTopoUniAvailBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniAvailBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[69]);
}

// ===================================================================

class SLBgplsTopoUniUtilBandwidth::_Internal {
 public:
};

SLBgplsTopoUniUtilBandwidth::SLBgplsTopoUniUtilBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniUtilBandwidth)
}
SLBgplsTopoUniUtilBandwidth::SLBgplsTopoUniUtilBandwidth(const SLBgplsTopoUniUtilBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniUtilBandwidth)
}

inline void SLBgplsTopoUniUtilBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoUniUtilBandwidth::~SLBgplsTopoUniUtilBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniUtilBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniUtilBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniUtilBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoUniUtilBandwidth* _this = reinterpret_cast< SLBgplsTopoUniUtilBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoUniUtilBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniUtilBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniUtilBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniUtilBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniUtilBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniUtilBandwidth)
  return target;
}

size_t SLBgplsTopoUniUtilBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniUtilBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniUtilBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniUtilBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniUtilBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniUtilBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniUtilBandwidth &>(from));
}


void SLBgplsTopoUniUtilBandwidth::MergeFrom(const SLBgplsTopoUniUtilBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniUtilBandwidth::CopyFrom(const SLBgplsTopoUniUtilBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniUtilBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniUtilBandwidth::InternalSwap(SLBgplsTopoUniUtilBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniUtilBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[70]);
}

// ===================================================================

class SLBgplsTopoPrefixIgpFlags::_Internal {
 public:
};

SLBgplsTopoPrefixIgpFlags::SLBgplsTopoPrefixIgpFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixIgpFlags)
}
SLBgplsTopoPrefixIgpFlags::SLBgplsTopoPrefixIgpFlags(const SLBgplsTopoPrefixIgpFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixIgpFlags)
}

inline void SLBgplsTopoPrefixIgpFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoPrefixIgpFlags::~SLBgplsTopoPrefixIgpFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixIgpFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixIgpFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixIgpFlags::ArenaDtor(void* object) {
  SLBgplsTopoPrefixIgpFlags* _this = reinterpret_cast< SLBgplsTopoPrefixIgpFlags* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixIgpFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixIgpFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixIgpFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixIgpFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixIgpFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixIgpFlags)
  return target;
}

size_t SLBgplsTopoPrefixIgpFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixIgpFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixIgpFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixIgpFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixIgpFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixIgpFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixIgpFlags &>(from));
}


void SLBgplsTopoPrefixIgpFlags::MergeFrom(const SLBgplsTopoPrefixIgpFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixIgpFlags::CopyFrom(const SLBgplsTopoPrefixIgpFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixIgpFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixIgpFlags::InternalSwap(SLBgplsTopoPrefixIgpFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixIgpFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[71]);
}

// ===================================================================

class SLBgplsTopoPrefixIgpRouteTag::_Internal {
 public:
};

SLBgplsTopoPrefixIgpRouteTag::SLBgplsTopoPrefixIgpRouteTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixIgpRouteTag)
}
SLBgplsTopoPrefixIgpRouteTag::SLBgplsTopoPrefixIgpRouteTag(const SLBgplsTopoPrefixIgpRouteTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixIgpRouteTag)
}

inline void SLBgplsTopoPrefixIgpRouteTag::SharedCtor() {
tag_ = 0u;
}

SLBgplsTopoPrefixIgpRouteTag::~SLBgplsTopoPrefixIgpRouteTag() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixIgpRouteTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoPrefixIgpRouteTag::ArenaDtor(void* object) {
  SLBgplsTopoPrefixIgpRouteTag* _this = reinterpret_cast< SLBgplsTopoPrefixIgpRouteTag* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixIgpRouteTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixIgpRouteTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixIgpRouteTag::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixIgpRouteTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixIgpRouteTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Tag = 1;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  return target;
}

size_t SLBgplsTopoPrefixIgpRouteTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Tag = 1;
  if (this->_internal_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixIgpRouteTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixIgpRouteTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixIgpRouteTag::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixIgpRouteTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixIgpRouteTag *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixIgpRouteTag &>(from));
}


void SLBgplsTopoPrefixIgpRouteTag::MergeFrom(const SLBgplsTopoPrefixIgpRouteTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixIgpRouteTag::CopyFrom(const SLBgplsTopoPrefixIgpRouteTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixIgpRouteTag::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixIgpRouteTag::InternalSwap(SLBgplsTopoPrefixIgpRouteTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixIgpRouteTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[72]);
}

// ===================================================================

class SLBgplsTopoPrefixIgpExtRouteTag::_Internal {
 public:
};

SLBgplsTopoPrefixIgpExtRouteTag::SLBgplsTopoPrefixIgpExtRouteTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
}
SLBgplsTopoPrefixIgpExtRouteTag::SLBgplsTopoPrefixIgpExtRouteTag(const SLBgplsTopoPrefixIgpExtRouteTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
}

inline void SLBgplsTopoPrefixIgpExtRouteTag::SharedCtor() {
tag_ = 0u;
}

SLBgplsTopoPrefixIgpExtRouteTag::~SLBgplsTopoPrefixIgpExtRouteTag() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixIgpExtRouteTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoPrefixIgpExtRouteTag::ArenaDtor(void* object) {
  SLBgplsTopoPrefixIgpExtRouteTag* _this = reinterpret_cast< SLBgplsTopoPrefixIgpExtRouteTag* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixIgpExtRouteTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixIgpExtRouteTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixIgpExtRouteTag::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixIgpExtRouteTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixIgpExtRouteTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Tag = 1;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  return target;
}

size_t SLBgplsTopoPrefixIgpExtRouteTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Tag = 1;
  if (this->_internal_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixIgpExtRouteTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixIgpExtRouteTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixIgpExtRouteTag::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixIgpExtRouteTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixIgpExtRouteTag *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixIgpExtRouteTag &>(from));
}


void SLBgplsTopoPrefixIgpExtRouteTag::MergeFrom(const SLBgplsTopoPrefixIgpExtRouteTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixIgpExtRouteTag::CopyFrom(const SLBgplsTopoPrefixIgpExtRouteTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixIgpExtRouteTag::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixIgpExtRouteTag::InternalSwap(SLBgplsTopoPrefixIgpExtRouteTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixIgpExtRouteTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[73]);
}

// ===================================================================

class SLBgplsTopoPrefixMetric::_Internal {
 public:
};

SLBgplsTopoPrefixMetric::SLBgplsTopoPrefixMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixMetric)
}
SLBgplsTopoPrefixMetric::SLBgplsTopoPrefixMetric(const SLBgplsTopoPrefixMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixMetric)
}

inline void SLBgplsTopoPrefixMetric::SharedCtor() {
metric_ = 0u;
}

SLBgplsTopoPrefixMetric::~SLBgplsTopoPrefixMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoPrefixMetric::ArenaDtor(void* object) {
  SLBgplsTopoPrefixMetric* _this = reinterpret_cast< SLBgplsTopoPrefixMetric* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixMetric)
  return target;
}

size_t SLBgplsTopoPrefixMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixMetric::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixMetric &>(from));
}


void SLBgplsTopoPrefixMetric::MergeFrom(const SLBgplsTopoPrefixMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixMetric::CopyFrom(const SLBgplsTopoPrefixMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixMetric::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixMetric::InternalSwap(SLBgplsTopoPrefixMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metric_, other->metric_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[74]);
}

// ===================================================================

class SLBgplsTopoPrefixOspfFwdAddr::_Internal {
 public:
};

SLBgplsTopoPrefixOspfFwdAddr::SLBgplsTopoPrefixOspfFwdAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
}
SLBgplsTopoPrefixOspfFwdAddr::SLBgplsTopoPrefixOspfFwdAddr(const SLBgplsTopoPrefixOspfFwdAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isospffwdaddrdipv4_ = from.isospffwdaddrdipv4_;
  clear_has_OspfFwdAddr();
  switch (from.OspfFwdAddr_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
}

inline void SLBgplsTopoPrefixOspfFwdAddr::SharedCtor() {
isospffwdaddrdipv4_ = 0u;
clear_has_OspfFwdAddr();
}

SLBgplsTopoPrefixOspfFwdAddr::~SLBgplsTopoPrefixOspfFwdAddr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixOspfFwdAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_OspfFwdAddr()) {
    clear_OspfFwdAddr();
  }
}

void SLBgplsTopoPrefixOspfFwdAddr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixOspfFwdAddr* _this = reinterpret_cast< SLBgplsTopoPrefixOspfFwdAddr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixOspfFwdAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixOspfFwdAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixOspfFwdAddr::clear_OspfFwdAddr() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  switch (OspfFwdAddr_case()) {
    case kIpv4Addr: {
      // No need to clear
      break;
    }
    case kIpv6Addr: {
      OspfFwdAddr_.ipv6addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OSPFFWDADDR_NOT_SET;
}


void SLBgplsTopoPrefixOspfFwdAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isospffwdaddrdipv4_ = 0u;
  clear_OspfFwdAddr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixOspfFwdAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Ipv4Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_ipv4addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6Addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipv6addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsOspfFwdAddrdIpv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          isospffwdaddrdipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixOspfFwdAddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Ipv4Addr = 1;
  if (_internal_has_ipv4addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ipv4addr(), target);
  }

  // bytes Ipv6Addr = 2;
  if (_internal_has_ipv6addr()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ipv6addr(), target);
  }

  // uint32 IsOspfFwdAddrdIpv4 = 3;
  if (this->_internal_isospffwdaddrdipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_isospffwdaddrdipv4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  return target;
}

size_t SLBgplsTopoPrefixOspfFwdAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 IsOspfFwdAddrdIpv4 = 3;
  if (this->_internal_isospffwdaddrdipv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isospffwdaddrdipv4());
  }

  switch (OspfFwdAddr_case()) {
    // uint32 Ipv4Addr = 1;
    case kIpv4Addr: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4addr());
      break;
    }
    // bytes Ipv6Addr = 2;
    case kIpv6Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6addr());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixOspfFwdAddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixOspfFwdAddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixOspfFwdAddr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixOspfFwdAddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixOspfFwdAddr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixOspfFwdAddr &>(from));
}


void SLBgplsTopoPrefixOspfFwdAddr::MergeFrom(const SLBgplsTopoPrefixOspfFwdAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isospffwdaddrdipv4() != 0) {
    _internal_set_isospffwdaddrdipv4(from._internal_isospffwdaddrdipv4());
  }
  switch (from.OspfFwdAddr_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixOspfFwdAddr::CopyFrom(const SLBgplsTopoPrefixOspfFwdAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixOspfFwdAddr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixOspfFwdAddr::InternalSwap(SLBgplsTopoPrefixOspfFwdAddr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(isospffwdaddrdipv4_, other->isospffwdaddrdipv4_);
  swap(OspfFwdAddr_, other->OspfFwdAddr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixOspfFwdAddr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[75]);
}

// ===================================================================

class SLBgplsTopoPrefixOpaqueAttr::_Internal {
 public:
};

SLBgplsTopoPrefixOpaqueAttr::SLBgplsTopoPrefixOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixOpaqueAttr)
}
SLBgplsTopoPrefixOpaqueAttr::SLBgplsTopoPrefixOpaqueAttr(const SLBgplsTopoPrefixOpaqueAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opaqueattr().empty()) {
    opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaqueattr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixOpaqueAttr)
}

inline void SLBgplsTopoPrefixOpaqueAttr::SharedCtor() {
opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoPrefixOpaqueAttr::~SLBgplsTopoPrefixOpaqueAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixOpaqueAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaqueattr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixOpaqueAttr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixOpaqueAttr* _this = reinterpret_cast< SLBgplsTopoPrefixOpaqueAttr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixOpaqueAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixOpaqueAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixOpaqueAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaqueattr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixOpaqueAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes OpaqueAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaqueattr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixOpaqueAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaqueattr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  return target;
}

size_t SLBgplsTopoPrefixOpaqueAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaqueattr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixOpaqueAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixOpaqueAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixOpaqueAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixOpaqueAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixOpaqueAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixOpaqueAttr &>(from));
}


void SLBgplsTopoPrefixOpaqueAttr::MergeFrom(const SLBgplsTopoPrefixOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_opaqueattr().empty()) {
    _internal_set_opaqueattr(from._internal_opaqueattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixOpaqueAttr::CopyFrom(const SLBgplsTopoPrefixOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixOpaqueAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixOpaqueAttr::InternalSwap(SLBgplsTopoPrefixOpaqueAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaqueattr_, lhs_arena,
      &other->opaqueattr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixOpaqueAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[76]);
}

// ===================================================================

class SLBgplsTopoPrefixSid::_Internal {
 public:
};

SLBgplsTopoPrefixSid::SLBgplsTopoPrefixSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixSid)
}
SLBgplsTopoPrefixSid::SLBgplsTopoPrefixSid(const SLBgplsTopoPrefixSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefixsidformat_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(prefixsidformat_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixSid)
}

inline void SLBgplsTopoPrefixSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&algorithm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixsidformat_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(prefixsidformat_));
}

SLBgplsTopoPrefixSid::~SLBgplsTopoPrefixSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixSid::ArenaDtor(void* object) {
  SLBgplsTopoPrefixSid* _this = reinterpret_cast< SLBgplsTopoPrefixSid* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefixsidformat_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(prefixsidformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LabelIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          labelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prefixsidformat(static_cast<::service_layer::SLBgplsTopoPrefixSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_algorithm(), target);
  }

  // uint32 LabelIndex = 3;
  if (this->_internal_labelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_labelindex(), target);
  }

  // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
  if (this->_internal_prefixsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_prefixsidformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixSid)
  return target;
}

size_t SLBgplsTopoPrefixSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 LabelIndex = 3;
  if (this->_internal_labelindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_labelindex());
  }

  // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
  if (this->_internal_prefixsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prefixsidformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixSid &>(from));
}


void SLBgplsTopoPrefixSid::MergeFrom(const SLBgplsTopoPrefixSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_labelindex() != 0) {
    _internal_set_labelindex(from._internal_labelindex());
  }
  if (from._internal_prefixsidformat() != 0) {
    _internal_set_prefixsidformat(from._internal_prefixsidformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixSid::CopyFrom(const SLBgplsTopoPrefixSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixSid::InternalSwap(SLBgplsTopoPrefixSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixSid, prefixsidformat_)
      + sizeof(SLBgplsTopoPrefixSid::prefixsidformat_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixSid, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[77]);
}

// ===================================================================

class SLBgplsTopoPrefixRange::_Internal {
 public:
};

SLBgplsTopoPrefixRange::SLBgplsTopoPrefixRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixRange)
}
SLBgplsTopoPrefixRange::SLBgplsTopoPrefixRange(const SLBgplsTopoPrefixRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  sidflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sidflags().empty()) {
    sidflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sidflags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&rangesize_, &from.rangesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&rangesize_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixRange)
}

inline void SLBgplsTopoPrefixRange::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sidflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rangesize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&rangesize_)) + sizeof(index_));
}

SLBgplsTopoPrefixRange::~SLBgplsTopoPrefixRange() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sidflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixRange::ArenaDtor(void* object) {
  SLBgplsTopoPrefixRange* _this = reinterpret_cast< SLBgplsTopoPrefixRange* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixRange::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  sidflags_.ClearToEmpty();
  ::memset(&rangesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&rangesize_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RangeSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rangesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SidFlags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sidflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rangesize(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  // uint32 Index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // bytes SidFlags = 5;
  if (!this->_internal_sidflags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sidflags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixRange)
  return target;
}

size_t SLBgplsTopoPrefixRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // bytes SidFlags = 5;
  if (!this->_internal_sidflags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sidflags());
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangesize());
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 Index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixRange::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixRange *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixRange &>(from));
}


void SLBgplsTopoPrefixRange::MergeFrom(const SLBgplsTopoPrefixRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (!from._internal_sidflags().empty()) {
    _internal_set_sidflags(from._internal_sidflags());
  }
  if (from._internal_rangesize() != 0) {
    _internal_set_rangesize(from._internal_rangesize());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixRange::CopyFrom(const SLBgplsTopoPrefixRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixRange::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixRange::InternalSwap(SLBgplsTopoPrefixRange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sidflags_, lhs_arena,
      &other->sidflags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixRange, index_)
      + sizeof(SLBgplsTopoPrefixRange::index_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixRange, rangesize_)>(
          reinterpret_cast<char*>(&rangesize_),
          reinterpret_cast<char*>(&other->rangesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[78]);
}

// ===================================================================

class SLBgplsTopoPrefixSrv6Loc::_Internal {
 public:
};

SLBgplsTopoPrefixSrv6Loc::SLBgplsTopoPrefixSrv6Loc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixSrv6Loc)
}
SLBgplsTopoPrefixSrv6Loc::SLBgplsTopoPrefixSrv6Loc(const SLBgplsTopoPrefixSrv6Loc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(metric_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixSrv6Loc)
}

inline void SLBgplsTopoPrefixSrv6Loc::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&algorithm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(metric_));
}

SLBgplsTopoPrefixSrv6Loc::~SLBgplsTopoPrefixSrv6Loc() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixSrv6Loc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixSrv6Loc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixSrv6Loc::ArenaDtor(void* object) {
  SLBgplsTopoPrefixSrv6Loc* _this = reinterpret_cast< SLBgplsTopoPrefixSrv6Loc* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixSrv6Loc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixSrv6Loc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixSrv6Loc::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixSrv6Loc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metric_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixSrv6Loc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Metric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixSrv6Loc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixSrv6Loc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_algorithm(), target);
  }

  // uint32 Metric = 3;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixSrv6Loc)
  return target;
}

size_t SLBgplsTopoPrefixSrv6Loc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixSrv6Loc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 Metric = 3;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixSrv6Loc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixSrv6Loc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixSrv6Loc::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixSrv6Loc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixSrv6Loc *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixSrv6Loc &>(from));
}


void SLBgplsTopoPrefixSrv6Loc::MergeFrom(const SLBgplsTopoPrefixSrv6Loc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixSrv6Loc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixSrv6Loc::CopyFrom(const SLBgplsTopoPrefixSrv6Loc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixSrv6Loc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixSrv6Loc::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixSrv6Loc::InternalSwap(SLBgplsTopoPrefixSrv6Loc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixSrv6Loc, metric_)
      + sizeof(SLBgplsTopoPrefixSrv6Loc::metric_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixSrv6Loc, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixSrv6Loc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[79]);
}

// ===================================================================

class SLBgplsTopoPrefixAttrFlags::_Internal {
 public:
};

SLBgplsTopoPrefixAttrFlags::SLBgplsTopoPrefixAttrFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixAttrFlags)
}
SLBgplsTopoPrefixAttrFlags::SLBgplsTopoPrefixAttrFlags(const SLBgplsTopoPrefixAttrFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixAttrFlags)
}

inline void SLBgplsTopoPrefixAttrFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoPrefixAttrFlags::~SLBgplsTopoPrefixAttrFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixAttrFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixAttrFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixAttrFlags::ArenaDtor(void* object) {
  SLBgplsTopoPrefixAttrFlags* _this = reinterpret_cast< SLBgplsTopoPrefixAttrFlags* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixAttrFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixAttrFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixAttrFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixAttrFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixAttrFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixAttrFlags)
  return target;
}

size_t SLBgplsTopoPrefixAttrFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixAttrFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixAttrFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixAttrFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixAttrFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixAttrFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixAttrFlags &>(from));
}


void SLBgplsTopoPrefixAttrFlags::MergeFrom(const SLBgplsTopoPrefixAttrFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixAttrFlags::CopyFrom(const SLBgplsTopoPrefixAttrFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixAttrFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixAttrFlags::InternalSwap(SLBgplsTopoPrefixAttrFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixAttrFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[80]);
}

// ===================================================================

class SLBgplsTopoPrefixSrcRouterId::_Internal {
 public:
};

SLBgplsTopoPrefixSrcRouterId::SLBgplsTopoPrefixSrcRouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixSrcRouterId)
}
SLBgplsTopoPrefixSrcRouterId::SLBgplsTopoPrefixSrcRouterId(const SLBgplsTopoPrefixSrcRouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  issrcrouteridipv4_ = from.issrcrouteridipv4_;
  clear_has_SrcRouterId();
  switch (from.SrcRouterId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixSrcRouterId)
}

inline void SLBgplsTopoPrefixSrcRouterId::SharedCtor() {
issrcrouteridipv4_ = 0u;
clear_has_SrcRouterId();
}

SLBgplsTopoPrefixSrcRouterId::~SLBgplsTopoPrefixSrcRouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixSrcRouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixSrcRouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_SrcRouterId()) {
    clear_SrcRouterId();
  }
}

void SLBgplsTopoPrefixSrcRouterId::ArenaDtor(void* object) {
  SLBgplsTopoPrefixSrcRouterId* _this = reinterpret_cast< SLBgplsTopoPrefixSrcRouterId* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixSrcRouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixSrcRouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixSrcRouterId::clear_SrcRouterId() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  switch (SrcRouterId_case()) {
    case kIpv4Addr: {
      // No need to clear
      break;
    }
    case kIpv6Addr: {
      SrcRouterId_.ipv6addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SRCROUTERID_NOT_SET;
}


void SLBgplsTopoPrefixSrcRouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issrcrouteridipv4_ = 0u;
  clear_SrcRouterId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixSrcRouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Ipv4Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_ipv4addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6Addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipv6addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsSrcRouterIdIpv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          issrcrouteridipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixSrcRouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Ipv4Addr = 1;
  if (_internal_has_ipv4addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ipv4addr(), target);
  }

  // bytes Ipv6Addr = 2;
  if (_internal_has_ipv6addr()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ipv6addr(), target);
  }

  // uint32 IsSrcRouterIdIpv4 = 3;
  if (this->_internal_issrcrouteridipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_issrcrouteridipv4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixSrcRouterId)
  return target;
}

size_t SLBgplsTopoPrefixSrcRouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 IsSrcRouterIdIpv4 = 3;
  if (this->_internal_issrcrouteridipv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_issrcrouteridipv4());
  }

  switch (SrcRouterId_case()) {
    // uint32 Ipv4Addr = 1;
    case kIpv4Addr: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4addr());
      break;
    }
    // bytes Ipv6Addr = 2;
    case kIpv6Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6addr());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixSrcRouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixSrcRouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixSrcRouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixSrcRouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixSrcRouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixSrcRouterId &>(from));
}


void SLBgplsTopoPrefixSrcRouterId::MergeFrom(const SLBgplsTopoPrefixSrcRouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issrcrouteridipv4() != 0) {
    _internal_set_issrcrouteridipv4(from._internal_issrcrouteridipv4());
  }
  switch (from.SrcRouterId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixSrcRouterId::CopyFrom(const SLBgplsTopoPrefixSrcRouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixSrcRouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixSrcRouterId::InternalSwap(SLBgplsTopoPrefixSrcRouterId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(issrcrouteridipv4_, other->issrcrouteridipv4_);
  swap(SrcRouterId_, other->SrcRouterId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixSrcRouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[81]);
}

// ===================================================================

class SLBgplsTopoL2BundleMemberAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoLinkMaxBandwidth& maxbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& maxresvbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkProtecionType& protectiontype(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxlinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvariation(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
};

const ::service_layer::SLBgplsTopoLinkMaxBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::maxbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->maxbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::maxresvbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->maxresvbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&
SLBgplsTopoL2BundleMemberAttr::_Internal::tedefmetric(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->tedefmetric_;
}
const ::service_layer::SLBgplsTopoLinkProtecionType&
SLBgplsTopoL2BundleMemberAttr::_Internal::protectiontype(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->protectiontype_;
}
const ::service_layer::SLBgplsTopoUniLinkDelay&
SLBgplsTopoL2BundleMemberAttr::_Internal::unilinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->unilinkdelay_;
}
const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&
SLBgplsTopoL2BundleMemberAttr::_Internal::minmaxlinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->minmaxlinkdelay_;
}
const ::service_layer::SLBgplsTopoUniDelayVar&
SLBgplsTopoL2BundleMemberAttr::_Internal::unidelayvariation(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->unidelayvariation_;
}
const ::service_layer::SLBgplsTopoUniLinkLoss&
SLBgplsTopoL2BundleMemberAttr::_Internal::unilinkloss(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->unilinkloss_;
}
const ::service_layer::SLBgplsTopoUniResBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::uniresbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->uniresbandwidth_;
}
const ::service_layer::SLBgplsTopoUniAvailBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::uniavailbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->uniavailbandwidth_;
}
const ::service_layer::SLBgplsTopoUniUtilBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::uniutilbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->uniutilbandwidth_;
}
SLBgplsTopoL2BundleMemberAttr::SLBgplsTopoL2BundleMemberAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extadmingroup_(arena),
  unresvbandwidth_(arena),
  adjsid_(arena),
  lanadjsid_(arena),
  asla_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoL2BundleMemberAttr)
}
SLBgplsTopoL2BundleMemberAttr::SLBgplsTopoL2BundleMemberAttr(const SLBgplsTopoL2BundleMemberAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extadmingroup_(from.extadmingroup_),
      unresvbandwidth_(from.unresvbandwidth_),
      adjsid_(from.adjsid_),
      lanadjsid_(from.lanadjsid_),
      asla_(from.asla_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maxbandwidth()) {
    maxbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxBandwidth(*from.maxbandwidth_);
  } else {
    maxbandwidth_ = nullptr;
  }
  if (from._internal_has_maxresvbandwidth()) {
    maxresvbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxResvBandwidth(*from.maxresvbandwidth_);
  } else {
    maxresvbandwidth_ = nullptr;
  }
  if (from._internal_has_tedefmetric()) {
    tedefmetric_ = new ::service_layer::SLBgplsTopoLinkTeDefaultMetric(*from.tedefmetric_);
  } else {
    tedefmetric_ = nullptr;
  }
  if (from._internal_has_protectiontype()) {
    protectiontype_ = new ::service_layer::SLBgplsTopoLinkProtecionType(*from.protectiontype_);
  } else {
    protectiontype_ = nullptr;
  }
  if (from._internal_has_unilinkdelay()) {
    unilinkdelay_ = new ::service_layer::SLBgplsTopoUniLinkDelay(*from.unilinkdelay_);
  } else {
    unilinkdelay_ = nullptr;
  }
  if (from._internal_has_minmaxlinkdelay()) {
    minmaxlinkdelay_ = new ::service_layer::SLBgplsTopoMinMaxUniLinkDelay(*from.minmaxlinkdelay_);
  } else {
    minmaxlinkdelay_ = nullptr;
  }
  if (from._internal_has_unidelayvariation()) {
    unidelayvariation_ = new ::service_layer::SLBgplsTopoUniDelayVar(*from.unidelayvariation_);
  } else {
    unidelayvariation_ = nullptr;
  }
  if (from._internal_has_unilinkloss()) {
    unilinkloss_ = new ::service_layer::SLBgplsTopoUniLinkLoss(*from.unilinkloss_);
  } else {
    unilinkloss_ = nullptr;
  }
  if (from._internal_has_uniresbandwidth()) {
    uniresbandwidth_ = new ::service_layer::SLBgplsTopoUniResBandwidth(*from.uniresbandwidth_);
  } else {
    uniresbandwidth_ = nullptr;
  }
  if (from._internal_has_uniavailbandwidth()) {
    uniavailbandwidth_ = new ::service_layer::SLBgplsTopoUniAvailBandwidth(*from.uniavailbandwidth_);
  } else {
    uniavailbandwidth_ = nullptr;
  }
  if (from._internal_has_uniutilbandwidth()) {
    uniutilbandwidth_ = new ::service_layer::SLBgplsTopoUniUtilBandwidth(*from.uniutilbandwidth_);
  } else {
    uniutilbandwidth_ = nullptr;
  }
  memberdesc_ = from.memberdesc_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoL2BundleMemberAttr)
}

inline void SLBgplsTopoL2BundleMemberAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maxbandwidth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memberdesc_) -
    reinterpret_cast<char*>(&maxbandwidth_)) + sizeof(memberdesc_));
}

SLBgplsTopoL2BundleMemberAttr::~SLBgplsTopoL2BundleMemberAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoL2BundleMemberAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoL2BundleMemberAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete maxbandwidth_;
  if (this != internal_default_instance()) delete maxresvbandwidth_;
  if (this != internal_default_instance()) delete tedefmetric_;
  if (this != internal_default_instance()) delete protectiontype_;
  if (this != internal_default_instance()) delete unilinkdelay_;
  if (this != internal_default_instance()) delete minmaxlinkdelay_;
  if (this != internal_default_instance()) delete unidelayvariation_;
  if (this != internal_default_instance()) delete unilinkloss_;
  if (this != internal_default_instance()) delete uniresbandwidth_;
  if (this != internal_default_instance()) delete uniavailbandwidth_;
  if (this != internal_default_instance()) delete uniutilbandwidth_;
}

void SLBgplsTopoL2BundleMemberAttr::ArenaDtor(void* object) {
  SLBgplsTopoL2BundleMemberAttr* _this = reinterpret_cast< SLBgplsTopoL2BundleMemberAttr* >(object);
  (void)_this;
}
void SLBgplsTopoL2BundleMemberAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoL2BundleMemberAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoL2BundleMemberAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extadmingroup_.Clear();
  unresvbandwidth_.Clear();
  adjsid_.Clear();
  lanadjsid_.Clear();
  asla_.Clear();
  if (GetArenaForAllocation() == nullptr && maxbandwidth_ != nullptr) {
    delete maxbandwidth_;
  }
  maxbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxresvbandwidth_ != nullptr) {
    delete maxresvbandwidth_;
  }
  maxresvbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protectiontype_ != nullptr) {
    delete protectiontype_;
  }
  protectiontype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minmaxlinkdelay_ != nullptr) {
    delete minmaxlinkdelay_;
  }
  minmaxlinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unidelayvariation_ != nullptr) {
    delete unidelayvariation_;
  }
  unidelayvariation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
  memberdesc_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoL2BundleMemberAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MemberDesc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          memberdesc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extadmingroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxresvbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unresvbandwidth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tedefmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkProtecionType ProtectionType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectiontype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanadjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_minmaxlinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_unidelayvariation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkloss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniresbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniavailbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniutilbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_asla(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoL2BundleMemberAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MemberDesc = 1;
  if (this->_internal_memberdesc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_memberdesc(), target);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 2;
  if (this->_internal_has_maxbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::maxbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extadmingroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_extadmingroup(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
  if (this->_internal_has_maxresvbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::maxresvbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unresvbandwidth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_unresvbandwidth(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
  if (this->_internal_has_tedefmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tedefmetric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkProtecionType ProtectionType = 7;
  if (this->_internal_has_protectiontype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::protectiontype(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_adjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanadjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lanadjsid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
  if (this->_internal_has_unilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::unilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
  if (this->_internal_has_minmaxlinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::minmaxlinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
  if (this->_internal_has_unidelayvariation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::unidelayvariation(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
  if (this->_internal_has_unilinkloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::unilinkloss(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
  if (this->_internal_has_uniresbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::uniresbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
  if (this->_internal_has_uniavailbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::uniavailbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
  if (this->_internal_has_uniutilbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::uniutilbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asla_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_asla(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoL2BundleMemberAttr)
  return target;
}

size_t SLBgplsTopoL2BundleMemberAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 3;
  total_size += 1UL * this->_internal_extadmingroup_size();
  for (const auto& msg : this->extadmingroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
  total_size += 1UL * this->_internal_unresvbandwidth_size();
  for (const auto& msg : this->unresvbandwidth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
  total_size += 1UL * this->_internal_adjsid_size();
  for (const auto& msg : this->adjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
  total_size += 1UL * this->_internal_lanadjsid_size();
  for (const auto& msg : this->lanadjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
  total_size += 2UL * this->_internal_asla_size();
  for (const auto& msg : this->asla_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 2;
  if (this->_internal_has_maxbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
  if (this->_internal_has_maxresvbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxresvbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
  if (this->_internal_has_tedefmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tedefmetric_);
  }

  // .service_layer.SLBgplsTopoLinkProtecionType ProtectionType = 7;
  if (this->_internal_has_protectiontype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectiontype_);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
  if (this->_internal_has_unilinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkdelay_);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
  if (this->_internal_has_minmaxlinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minmaxlinkdelay_);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
  if (this->_internal_has_unidelayvariation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unidelayvariation_);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
  if (this->_internal_has_unilinkloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkloss_);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
  if (this->_internal_has_uniresbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniresbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
  if (this->_internal_has_uniavailbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniavailbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
  if (this->_internal_has_uniutilbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniutilbandwidth_);
  }

  // uint32 MemberDesc = 1;
  if (this->_internal_memberdesc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_memberdesc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoL2BundleMemberAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoL2BundleMemberAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoL2BundleMemberAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoL2BundleMemberAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoL2BundleMemberAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoL2BundleMemberAttr &>(from));
}


void SLBgplsTopoL2BundleMemberAttr::MergeFrom(const SLBgplsTopoL2BundleMemberAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extadmingroup_.MergeFrom(from.extadmingroup_);
  unresvbandwidth_.MergeFrom(from.unresvbandwidth_);
  adjsid_.MergeFrom(from.adjsid_);
  lanadjsid_.MergeFrom(from.lanadjsid_);
  asla_.MergeFrom(from.asla_);
  if (from._internal_has_maxbandwidth()) {
    _internal_mutable_maxbandwidth()->::service_layer::SLBgplsTopoLinkMaxBandwidth::MergeFrom(from._internal_maxbandwidth());
  }
  if (from._internal_has_maxresvbandwidth()) {
    _internal_mutable_maxresvbandwidth()->::service_layer::SLBgplsTopoLinkMaxResvBandwidth::MergeFrom(from._internal_maxresvbandwidth());
  }
  if (from._internal_has_tedefmetric()) {
    _internal_mutable_tedefmetric()->::service_layer::SLBgplsTopoLinkTeDefaultMetric::MergeFrom(from._internal_tedefmetric());
  }
  if (from._internal_has_protectiontype()) {
    _internal_mutable_protectiontype()->::service_layer::SLBgplsTopoLinkProtecionType::MergeFrom(from._internal_protectiontype());
  }
  if (from._internal_has_unilinkdelay()) {
    _internal_mutable_unilinkdelay()->::service_layer::SLBgplsTopoUniLinkDelay::MergeFrom(from._internal_unilinkdelay());
  }
  if (from._internal_has_minmaxlinkdelay()) {
    _internal_mutable_minmaxlinkdelay()->::service_layer::SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(from._internal_minmaxlinkdelay());
  }
  if (from._internal_has_unidelayvariation()) {
    _internal_mutable_unidelayvariation()->::service_layer::SLBgplsTopoUniDelayVar::MergeFrom(from._internal_unidelayvariation());
  }
  if (from._internal_has_unilinkloss()) {
    _internal_mutable_unilinkloss()->::service_layer::SLBgplsTopoUniLinkLoss::MergeFrom(from._internal_unilinkloss());
  }
  if (from._internal_has_uniresbandwidth()) {
    _internal_mutable_uniresbandwidth()->::service_layer::SLBgplsTopoUniResBandwidth::MergeFrom(from._internal_uniresbandwidth());
  }
  if (from._internal_has_uniavailbandwidth()) {
    _internal_mutable_uniavailbandwidth()->::service_layer::SLBgplsTopoUniAvailBandwidth::MergeFrom(from._internal_uniavailbandwidth());
  }
  if (from._internal_has_uniutilbandwidth()) {
    _internal_mutable_uniutilbandwidth()->::service_layer::SLBgplsTopoUniUtilBandwidth::MergeFrom(from._internal_uniutilbandwidth());
  }
  if (from._internal_memberdesc() != 0) {
    _internal_set_memberdesc(from._internal_memberdesc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoL2BundleMemberAttr::CopyFrom(const SLBgplsTopoL2BundleMemberAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoL2BundleMemberAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoL2BundleMemberAttr::InternalSwap(SLBgplsTopoL2BundleMemberAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extadmingroup_.InternalSwap(&other->extadmingroup_);
  unresvbandwidth_.InternalSwap(&other->unresvbandwidth_);
  adjsid_.InternalSwap(&other->adjsid_);
  lanadjsid_.InternalSwap(&other->lanadjsid_);
  asla_.InternalSwap(&other->asla_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoL2BundleMemberAttr, memberdesc_)
      + sizeof(SLBgplsTopoL2BundleMemberAttr::memberdesc_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoL2BundleMemberAttr, maxbandwidth_)>(
          reinterpret_cast<char*>(&maxbandwidth_),
          reinterpret_cast<char*>(&other->maxbandwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoL2BundleMemberAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[82]);
}

// ===================================================================

class SLBgplsTopoAslaAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkSrlg& srlg(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxlinkdelay(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvariation(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth(const SLBgplsTopoAslaAttr* msg);
};

const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&
SLBgplsTopoAslaAttr::_Internal::tedefmetric(const SLBgplsTopoAslaAttr* msg) {
  return *msg->tedefmetric_;
}
const ::service_layer::SLBgplsTopoLinkSrlg&
SLBgplsTopoAslaAttr::_Internal::srlg(const SLBgplsTopoAslaAttr* msg) {
  return *msg->srlg_;
}
const ::service_layer::SLBgplsTopoUniLinkDelay&
SLBgplsTopoAslaAttr::_Internal::unilinkdelay(const SLBgplsTopoAslaAttr* msg) {
  return *msg->unilinkdelay_;
}
const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&
SLBgplsTopoAslaAttr::_Internal::minmaxlinkdelay(const SLBgplsTopoAslaAttr* msg) {
  return *msg->minmaxlinkdelay_;
}
const ::service_layer::SLBgplsTopoUniDelayVar&
SLBgplsTopoAslaAttr::_Internal::unidelayvariation(const SLBgplsTopoAslaAttr* msg) {
  return *msg->unidelayvariation_;
}
const ::service_layer::SLBgplsTopoUniLinkLoss&
SLBgplsTopoAslaAttr::_Internal::unilinkloss(const SLBgplsTopoAslaAttr* msg) {
  return *msg->unilinkloss_;
}
const ::service_layer::SLBgplsTopoUniResBandwidth&
SLBgplsTopoAslaAttr::_Internal::uniresbandwidth(const SLBgplsTopoAslaAttr* msg) {
  return *msg->uniresbandwidth_;
}
const ::service_layer::SLBgplsTopoUniAvailBandwidth&
SLBgplsTopoAslaAttr::_Internal::uniavailbandwidth(const SLBgplsTopoAslaAttr* msg) {
  return *msg->uniavailbandwidth_;
}
const ::service_layer::SLBgplsTopoUniUtilBandwidth&
SLBgplsTopoAslaAttr::_Internal::uniutilbandwidth(const SLBgplsTopoAslaAttr* msg) {
  return *msg->uniutilbandwidth_;
}
SLBgplsTopoAslaAttr::SLBgplsTopoAslaAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extadmingroup_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoAslaAttr)
}
SLBgplsTopoAslaAttr::SLBgplsTopoAslaAttr(const SLBgplsTopoAslaAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extadmingroup_(from.extadmingroup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sabm().empty()) {
    sabm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sabm(), 
      GetArenaForAllocation());
  }
  udabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    udabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_udabm().empty()) {
    udabm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_udabm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tedefmetric()) {
    tedefmetric_ = new ::service_layer::SLBgplsTopoLinkTeDefaultMetric(*from.tedefmetric_);
  } else {
    tedefmetric_ = nullptr;
  }
  if (from._internal_has_srlg()) {
    srlg_ = new ::service_layer::SLBgplsTopoLinkSrlg(*from.srlg_);
  } else {
    srlg_ = nullptr;
  }
  if (from._internal_has_unilinkdelay()) {
    unilinkdelay_ = new ::service_layer::SLBgplsTopoUniLinkDelay(*from.unilinkdelay_);
  } else {
    unilinkdelay_ = nullptr;
  }
  if (from._internal_has_minmaxlinkdelay()) {
    minmaxlinkdelay_ = new ::service_layer::SLBgplsTopoMinMaxUniLinkDelay(*from.minmaxlinkdelay_);
  } else {
    minmaxlinkdelay_ = nullptr;
  }
  if (from._internal_has_unidelayvariation()) {
    unidelayvariation_ = new ::service_layer::SLBgplsTopoUniDelayVar(*from.unidelayvariation_);
  } else {
    unidelayvariation_ = nullptr;
  }
  if (from._internal_has_unilinkloss()) {
    unilinkloss_ = new ::service_layer::SLBgplsTopoUniLinkLoss(*from.unilinkloss_);
  } else {
    unilinkloss_ = nullptr;
  }
  if (from._internal_has_uniresbandwidth()) {
    uniresbandwidth_ = new ::service_layer::SLBgplsTopoUniResBandwidth(*from.uniresbandwidth_);
  } else {
    uniresbandwidth_ = nullptr;
  }
  if (from._internal_has_uniavailbandwidth()) {
    uniavailbandwidth_ = new ::service_layer::SLBgplsTopoUniAvailBandwidth(*from.uniavailbandwidth_);
  } else {
    uniavailbandwidth_ = nullptr;
  }
  if (from._internal_has_uniutilbandwidth()) {
    uniutilbandwidth_ = new ::service_layer::SLBgplsTopoUniUtilBandwidth(*from.uniutilbandwidth_);
  } else {
    uniutilbandwidth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoAslaAttr)
}

inline void SLBgplsTopoAslaAttr::SharedCtor() {
sabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
udabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  udabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tedefmetric_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uniutilbandwidth_) -
    reinterpret_cast<char*>(&tedefmetric_)) + sizeof(uniutilbandwidth_));
}

SLBgplsTopoAslaAttr::~SLBgplsTopoAslaAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoAslaAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoAslaAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sabm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udabm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tedefmetric_;
  if (this != internal_default_instance()) delete srlg_;
  if (this != internal_default_instance()) delete unilinkdelay_;
  if (this != internal_default_instance()) delete minmaxlinkdelay_;
  if (this != internal_default_instance()) delete unidelayvariation_;
  if (this != internal_default_instance()) delete unilinkloss_;
  if (this != internal_default_instance()) delete uniresbandwidth_;
  if (this != internal_default_instance()) delete uniavailbandwidth_;
  if (this != internal_default_instance()) delete uniutilbandwidth_;
}

void SLBgplsTopoAslaAttr::ArenaDtor(void* object) {
  SLBgplsTopoAslaAttr* _this = reinterpret_cast< SLBgplsTopoAslaAttr* >(object);
  (void)_this;
}
void SLBgplsTopoAslaAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoAslaAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoAslaAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoAslaAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extadmingroup_.Clear();
  sabm_.ClearToEmpty();
  udabm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srlg_ != nullptr) {
    delete srlg_;
  }
  srlg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minmaxlinkdelay_ != nullptr) {
    delete minmaxlinkdelay_;
  }
  minmaxlinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unidelayvariation_ != nullptr) {
    delete unidelayvariation_;
  }
  unidelayvariation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoAslaAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Sabm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sabm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Udabm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_udabm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extadmingroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tedefmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_srlg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_minmaxlinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unidelayvariation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkloss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniresbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniavailbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniutilbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoAslaAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoAslaAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Sabm = 1;
  if (!this->_internal_sabm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sabm(), target);
  }

  // bytes Udabm = 2;
  if (!this->_internal_udabm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_udabm(), target);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extadmingroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_extadmingroup(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
  if (this->_internal_has_tedefmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tedefmetric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
  if (this->_internal_has_srlg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::srlg(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
  if (this->_internal_has_unilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::unilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
  if (this->_internal_has_minmaxlinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::minmaxlinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
  if (this->_internal_has_unidelayvariation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::unidelayvariation(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
  if (this->_internal_has_unilinkloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::unilinkloss(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
  if (this->_internal_has_uniresbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::uniresbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
  if (this->_internal_has_uniavailbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::uniavailbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
  if (this->_internal_has_uniutilbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::uniutilbandwidth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoAslaAttr)
  return target;
}

size_t SLBgplsTopoAslaAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoAslaAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 3;
  total_size += 1UL * this->_internal_extadmingroup_size();
  for (const auto& msg : this->extadmingroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes Sabm = 1;
  if (!this->_internal_sabm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sabm());
  }

  // bytes Udabm = 2;
  if (!this->_internal_udabm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_udabm());
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
  if (this->_internal_has_tedefmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tedefmetric_);
  }

  // .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
  if (this->_internal_has_srlg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srlg_);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
  if (this->_internal_has_unilinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkdelay_);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
  if (this->_internal_has_minmaxlinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minmaxlinkdelay_);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
  if (this->_internal_has_unidelayvariation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unidelayvariation_);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
  if (this->_internal_has_unilinkloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkloss_);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
  if (this->_internal_has_uniresbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniresbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
  if (this->_internal_has_uniavailbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniavailbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
  if (this->_internal_has_uniutilbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniutilbandwidth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoAslaAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoAslaAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoAslaAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoAslaAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoAslaAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoAslaAttr &>(from));
}


void SLBgplsTopoAslaAttr::MergeFrom(const SLBgplsTopoAslaAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoAslaAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extadmingroup_.MergeFrom(from.extadmingroup_);
  if (!from._internal_sabm().empty()) {
    _internal_set_sabm(from._internal_sabm());
  }
  if (!from._internal_udabm().empty()) {
    _internal_set_udabm(from._internal_udabm());
  }
  if (from._internal_has_tedefmetric()) {
    _internal_mutable_tedefmetric()->::service_layer::SLBgplsTopoLinkTeDefaultMetric::MergeFrom(from._internal_tedefmetric());
  }
  if (from._internal_has_srlg()) {
    _internal_mutable_srlg()->::service_layer::SLBgplsTopoLinkSrlg::MergeFrom(from._internal_srlg());
  }
  if (from._internal_has_unilinkdelay()) {
    _internal_mutable_unilinkdelay()->::service_layer::SLBgplsTopoUniLinkDelay::MergeFrom(from._internal_unilinkdelay());
  }
  if (from._internal_has_minmaxlinkdelay()) {
    _internal_mutable_minmaxlinkdelay()->::service_layer::SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(from._internal_minmaxlinkdelay());
  }
  if (from._internal_has_unidelayvariation()) {
    _internal_mutable_unidelayvariation()->::service_layer::SLBgplsTopoUniDelayVar::MergeFrom(from._internal_unidelayvariation());
  }
  if (from._internal_has_unilinkloss()) {
    _internal_mutable_unilinkloss()->::service_layer::SLBgplsTopoUniLinkLoss::MergeFrom(from._internal_unilinkloss());
  }
  if (from._internal_has_uniresbandwidth()) {
    _internal_mutable_uniresbandwidth()->::service_layer::SLBgplsTopoUniResBandwidth::MergeFrom(from._internal_uniresbandwidth());
  }
  if (from._internal_has_uniavailbandwidth()) {
    _internal_mutable_uniavailbandwidth()->::service_layer::SLBgplsTopoUniAvailBandwidth::MergeFrom(from._internal_uniavailbandwidth());
  }
  if (from._internal_has_uniutilbandwidth()) {
    _internal_mutable_uniutilbandwidth()->::service_layer::SLBgplsTopoUniUtilBandwidth::MergeFrom(from._internal_uniutilbandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoAslaAttr::CopyFrom(const SLBgplsTopoAslaAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoAslaAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoAslaAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoAslaAttr::InternalSwap(SLBgplsTopoAslaAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extadmingroup_.InternalSwap(&other->extadmingroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sabm_, lhs_arena,
      &other->sabm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &udabm_, lhs_arena,
      &other->udabm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoAslaAttr, uniutilbandwidth_)
      + sizeof(SLBgplsTopoAslaAttr::uniutilbandwidth_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoAslaAttr, tedefmetric_)>(
          reinterpret_cast<char*>(&tedefmetric_),
          reinterpret_cast<char*>(&other->tedefmetric_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoAslaAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[83]);
}

// ===================================================================

class SlBgplsTopoSrBsid::_Internal {
 public:
};

SlBgplsTopoSrBsid::SlBgplsTopoSrBsid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SlBgplsTopoSrBsid)
}
SlBgplsTopoSrBsid::SlBgplsTopoSrBsid(const SlBgplsTopoSrBsid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isbindingsidmpls_ = from.isbindingsidmpls_;
  clear_has_BindingSid();
  switch (from.BindingSid_case()) {
    case kMplsBsid: {
      _internal_set_mplsbsid(from._internal_mplsbsid());
      break;
    }
    case kSrv6Bsid: {
      _internal_set_srv6bsid(from._internal_srv6bsid());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SlBgplsTopoSrBsid)
}

inline void SlBgplsTopoSrBsid::SharedCtor() {
isbindingsidmpls_ = 0u;
clear_has_BindingSid();
}

SlBgplsTopoSrBsid::~SlBgplsTopoSrBsid() {
  // @@protoc_insertion_point(destructor:service_layer.SlBgplsTopoSrBsid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlBgplsTopoSrBsid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_BindingSid()) {
    clear_BindingSid();
  }
}

void SlBgplsTopoSrBsid::ArenaDtor(void* object) {
  SlBgplsTopoSrBsid* _this = reinterpret_cast< SlBgplsTopoSrBsid* >(object);
  (void)_this;
}
void SlBgplsTopoSrBsid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlBgplsTopoSrBsid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlBgplsTopoSrBsid::clear_BindingSid() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SlBgplsTopoSrBsid)
  switch (BindingSid_case()) {
    case kMplsBsid: {
      // No need to clear
      break;
    }
    case kSrv6Bsid: {
      BindingSid_.srv6bsid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BINDINGSID_NOT_SET;
}


void SlBgplsTopoSrBsid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SlBgplsTopoSrBsid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isbindingsidmpls_ = 0u;
  clear_BindingSid();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlBgplsTopoSrBsid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MplsBsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_mplsbsid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Srv6Bsid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srv6bsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsBindingSidMpls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          isbindingsidmpls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlBgplsTopoSrBsid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SlBgplsTopoSrBsid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MplsBsid = 1;
  if (_internal_has_mplsbsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mplsbsid(), target);
  }

  // bytes Srv6Bsid = 2;
  if (_internal_has_srv6bsid()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_srv6bsid(), target);
  }

  // uint32 IsBindingSidMpls = 3;
  if (this->_internal_isbindingsidmpls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_isbindingsidmpls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SlBgplsTopoSrBsid)
  return target;
}

size_t SlBgplsTopoSrBsid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SlBgplsTopoSrBsid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 IsBindingSidMpls = 3;
  if (this->_internal_isbindingsidmpls() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isbindingsidmpls());
  }

  switch (BindingSid_case()) {
    // uint32 MplsBsid = 1;
    case kMplsBsid: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mplsbsid());
      break;
    }
    // bytes Srv6Bsid = 2;
    case kSrv6Bsid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_srv6bsid());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlBgplsTopoSrBsid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlBgplsTopoSrBsid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlBgplsTopoSrBsid::GetClassData() const { return &_class_data_; }

void SlBgplsTopoSrBsid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SlBgplsTopoSrBsid *>(to)->MergeFrom(
      static_cast<const SlBgplsTopoSrBsid &>(from));
}


void SlBgplsTopoSrBsid::MergeFrom(const SlBgplsTopoSrBsid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SlBgplsTopoSrBsid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isbindingsidmpls() != 0) {
    _internal_set_isbindingsidmpls(from._internal_isbindingsidmpls());
  }
  switch (from.BindingSid_case()) {
    case kMplsBsid: {
      _internal_set_mplsbsid(from._internal_mplsbsid());
      break;
    }
    case kSrv6Bsid: {
      _internal_set_srv6bsid(from._internal_srv6bsid());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlBgplsTopoSrBsid::CopyFrom(const SlBgplsTopoSrBsid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SlBgplsTopoSrBsid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlBgplsTopoSrBsid::IsInitialized() const {
  return true;
}

void SlBgplsTopoSrBsid::InternalSwap(SlBgplsTopoSrBsid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(isbindingsidmpls_, other->isbindingsidmpls_);
  swap(BindingSid_, other->BindingSid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlBgplsTopoSrBsid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[84]);
}

// ===================================================================

class SLBgplsTopoSrBindingSid::_Internal {
 public:
  static const ::service_layer::SlBgplsTopoSrBsid& bsid(const SLBgplsTopoSrBindingSid* msg);
  static const ::service_layer::SlBgplsTopoSrBsid& specifiedbsid(const SLBgplsTopoSrBindingSid* msg);
};

const ::service_layer::SlBgplsTopoSrBsid&
SLBgplsTopoSrBindingSid::_Internal::bsid(const SLBgplsTopoSrBindingSid* msg) {
  return *msg->bsid_;
}
const ::service_layer::SlBgplsTopoSrBsid&
SLBgplsTopoSrBindingSid::_Internal::specifiedbsid(const SLBgplsTopoSrBindingSid* msg) {
  return *msg->specifiedbsid_;
}
SLBgplsTopoSrBindingSid::SLBgplsTopoSrBindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrBindingSid)
}
SLBgplsTopoSrBindingSid::SLBgplsTopoSrBindingSid(const SLBgplsTopoSrBindingSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bsidflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bsidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bsidflags().empty()) {
    bsidflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bsidflags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bsid()) {
    bsid_ = new ::service_layer::SlBgplsTopoSrBsid(*from.bsid_);
  } else {
    bsid_ = nullptr;
  }
  if (from._internal_has_specifiedbsid()) {
    specifiedbsid_ = new ::service_layer::SlBgplsTopoSrBsid(*from.specifiedbsid_);
  } else {
    specifiedbsid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrBindingSid)
}

inline void SLBgplsTopoSrBindingSid::SharedCtor() {
bsidflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bsidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bsid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&specifiedbsid_) -
    reinterpret_cast<char*>(&bsid_)) + sizeof(specifiedbsid_));
}

SLBgplsTopoSrBindingSid::~SLBgplsTopoSrBindingSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrBindingSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrBindingSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bsidflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bsid_;
  if (this != internal_default_instance()) delete specifiedbsid_;
}

void SLBgplsTopoSrBindingSid::ArenaDtor(void* object) {
  SLBgplsTopoSrBindingSid* _this = reinterpret_cast< SLBgplsTopoSrBindingSid* >(object);
  (void)_this;
}
void SLBgplsTopoSrBindingSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrBindingSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrBindingSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrBindingSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bsidflags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && specifiedbsid_ != nullptr) {
    delete specifiedbsid_;
  }
  specifiedbsid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrBindingSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes BsidFlags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bsidflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_specifiedbsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrBindingSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrBindingSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes BsidFlags = 1;
  if (!this->_internal_bsidflags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bsidflags(), target);
  }

  // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
  if (this->_internal_has_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bsid(this), target, stream);
  }

  // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
  if (this->_internal_has_specifiedbsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::specifiedbsid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrBindingSid)
  return target;
}

size_t SLBgplsTopoSrBindingSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrBindingSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes BsidFlags = 1;
  if (!this->_internal_bsidflags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bsidflags());
  }

  // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
  if (this->_internal_has_bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bsid_);
  }

  // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
  if (this->_internal_has_specifiedbsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specifiedbsid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrBindingSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrBindingSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrBindingSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrBindingSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrBindingSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrBindingSid &>(from));
}


void SLBgplsTopoSrBindingSid::MergeFrom(const SLBgplsTopoSrBindingSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrBindingSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bsidflags().empty()) {
    _internal_set_bsidflags(from._internal_bsidflags());
  }
  if (from._internal_has_bsid()) {
    _internal_mutable_bsid()->::service_layer::SlBgplsTopoSrBsid::MergeFrom(from._internal_bsid());
  }
  if (from._internal_has_specifiedbsid()) {
    _internal_mutable_specifiedbsid()->::service_layer::SlBgplsTopoSrBsid::MergeFrom(from._internal_specifiedbsid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrBindingSid::CopyFrom(const SLBgplsTopoSrBindingSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrBindingSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrBindingSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrBindingSid::InternalSwap(SLBgplsTopoSrBindingSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bsidflags_, lhs_arena,
      &other->bsidflags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrBindingSid, specifiedbsid_)
      + sizeof(SLBgplsTopoSrBindingSid::specifiedbsid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrBindingSid, bsid_)>(
          reinterpret_cast<char*>(&bsid_),
          reinterpret_cast<char*>(&other->bsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrBindingSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[85]);
}

// ===================================================================

class SLBgplsTopoSrCpState::_Internal {
 public:
};

SLBgplsTopoSrCpState::SLBgplsTopoSrCpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrCpState)
}
SLBgplsTopoSrCpState::SLBgplsTopoSrCpState(const SLBgplsTopoSrCpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&preference_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(preference_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrCpState)
}

inline void SLBgplsTopoSrCpState::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&priority_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preference_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(preference_));
}

SLBgplsTopoSrCpState::~SLBgplsTopoSrCpState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrCpState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrCpState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrCpState::ArenaDtor(void* object) {
  SLBgplsTopoSrCpState* _this = reinterpret_cast< SLBgplsTopoSrCpState* >(object);
  (void)_this;
}
void SLBgplsTopoSrCpState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrCpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrCpState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrCpState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preference_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(preference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrCpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Preference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          preference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrCpState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrCpState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Priority = 1;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 Preference = 3;
  if (this->_internal_preference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_preference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrCpState)
  return target;
}

size_t SLBgplsTopoSrCpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrCpState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Priority = 1;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  // uint32 Preference = 3;
  if (this->_internal_preference() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_preference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrCpState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrCpState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrCpState::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrCpState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrCpState *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrCpState &>(from));
}


void SLBgplsTopoSrCpState::MergeFrom(const SLBgplsTopoSrCpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrCpState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from._internal_preference() != 0) {
    _internal_set_preference(from._internal_preference());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrCpState::CopyFrom(const SLBgplsTopoSrCpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrCpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrCpState::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrCpState::InternalSwap(SLBgplsTopoSrCpState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrCpState, preference_)
      + sizeof(SLBgplsTopoSrCpState::preference_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrCpState, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrCpState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[86]);
}

// ===================================================================

class SLBgplsTopoSrCpName::_Internal {
 public:
};

SLBgplsTopoSrCpName::SLBgplsTopoSrCpName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrCpName)
}
SLBgplsTopoSrCpName::SLBgplsTopoSrCpName(const SLBgplsTopoSrCpName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrCpName)
}

inline void SLBgplsTopoSrCpName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrCpName::~SLBgplsTopoSrCpName() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrCpName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrCpName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrCpName::ArenaDtor(void* object) {
  SLBgplsTopoSrCpName* _this = reinterpret_cast< SLBgplsTopoSrCpName* >(object);
  (void)_this;
}
void SLBgplsTopoSrCpName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrCpName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrCpName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrCpName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrCpName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgplsTopoSrCpName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrCpName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrCpName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgplsTopoSrCpName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrCpName)
  return target;
}

size_t SLBgplsTopoSrCpName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrCpName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrCpName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrCpName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrCpName::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrCpName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrCpName *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrCpName &>(from));
}


void SLBgplsTopoSrCpName::MergeFrom(const SLBgplsTopoSrCpName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrCpName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrCpName::CopyFrom(const SLBgplsTopoSrCpName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrCpName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrCpName::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrCpName::InternalSwap(SLBgplsTopoSrCpName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrCpName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[87]);
}

// ===================================================================

class SLBgplsTopoSrCpConstraints::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoSrAffinityConstraints& affinity(const SLBgplsTopoSrCpConstraints* msg);
  static const ::service_layer::SLBgplsTopoSrSrlgConstraints& srlg(const SLBgplsTopoSrCpConstraints* msg);
  static const ::service_layer::SLBgplsTopoSrBandwidthConstraint& bandwidth(const SLBgplsTopoSrCpConstraints* msg);
  static const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint& disjoint(const SLBgplsTopoSrCpConstraints* msg);
  static const ::service_layer::SLBgplsTopoSrBidirGroupConstraint& bidirgroup(const SLBgplsTopoSrCpConstraints* msg);
};

const ::service_layer::SLBgplsTopoSrAffinityConstraints&
SLBgplsTopoSrCpConstraints::_Internal::affinity(const SLBgplsTopoSrCpConstraints* msg) {
  return *msg->affinity_;
}
const ::service_layer::SLBgplsTopoSrSrlgConstraints&
SLBgplsTopoSrCpConstraints::_Internal::srlg(const SLBgplsTopoSrCpConstraints* msg) {
  return *msg->srlg_;
}
const ::service_layer::SLBgplsTopoSrBandwidthConstraint&
SLBgplsTopoSrCpConstraints::_Internal::bandwidth(const SLBgplsTopoSrCpConstraints* msg) {
  return *msg->bandwidth_;
}
const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint&
SLBgplsTopoSrCpConstraints::_Internal::disjoint(const SLBgplsTopoSrCpConstraints* msg) {
  return *msg->disjoint_;
}
const ::service_layer::SLBgplsTopoSrBidirGroupConstraint&
SLBgplsTopoSrCpConstraints::_Internal::bidirgroup(const SLBgplsTopoSrCpConstraints* msg) {
  return *msg->bidirgroup_;
}
SLBgplsTopoSrCpConstraints::SLBgplsTopoSrCpConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metric_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrCpConstraints)
}
SLBgplsTopoSrCpConstraints::SLBgplsTopoSrCpConstraints(const SLBgplsTopoSrCpConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metric_(from.metric_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bandwidth()) {
    bandwidth_ = new ::service_layer::SLBgplsTopoSrBandwidthConstraint(*from.bandwidth_);
  } else {
    bandwidth_ = nullptr;
  }
  if (from._internal_has_affinity()) {
    affinity_ = new ::service_layer::SLBgplsTopoSrAffinityConstraints(*from.affinity_);
  } else {
    affinity_ = nullptr;
  }
  if (from._internal_has_srlg()) {
    srlg_ = new ::service_layer::SLBgplsTopoSrSrlgConstraints(*from.srlg_);
  } else {
    srlg_ = nullptr;
  }
  if (from._internal_has_disjoint()) {
    disjoint_ = new ::service_layer::SLBgplsTopoSrDisjointGroupConstraint(*from.disjoint_);
  } else {
    disjoint_ = nullptr;
  }
  if (from._internal_has_bidirgroup()) {
    bidirgroup_ = new ::service_layer::SLBgplsTopoSrBidirGroupConstraint(*from.bidirgroup_);
  } else {
    bidirgroup_ = nullptr;
  }
  ::memcpy(&mtid_, &from.mtid_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrCpConstraints)
}

inline void SLBgplsTopoSrCpConstraints::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bandwidth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&bandwidth_)) + sizeof(algorithm_));
}

SLBgplsTopoSrCpConstraints::~SLBgplsTopoSrCpConstraints() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrCpConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrCpConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bandwidth_;
  if (this != internal_default_instance()) delete affinity_;
  if (this != internal_default_instance()) delete srlg_;
  if (this != internal_default_instance()) delete disjoint_;
  if (this != internal_default_instance()) delete bidirgroup_;
}

void SLBgplsTopoSrCpConstraints::ArenaDtor(void* object) {
  SLBgplsTopoSrCpConstraints* _this = reinterpret_cast< SLBgplsTopoSrCpConstraints* >(object);
  (void)_this;
}
void SLBgplsTopoSrCpConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrCpConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrCpConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrCpConstraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.Clear();
  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bandwidth_ != nullptr) {
    delete bandwidth_;
  }
  bandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && affinity_ != nullptr) {
    delete affinity_;
  }
  affinity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srlg_ != nullptr) {
    delete srlg_;
  }
  srlg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && disjoint_ != nullptr) {
    delete disjoint_;
  }
  disjoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bidirgroup_ != nullptr) {
    delete bidirgroup_;
  }
  bidirgroup_ = nullptr;
  ::memset(&mtid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&mtid_)) + sizeof(algorithm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrCpConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Mtid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrBandwidthConstraint Bandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrAffinityConstraints Affinity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_affinity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrSrlgConstraints Srlg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_srlg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrDisjointGroupConstraint Disjoint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_disjoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrBidirGroupConstraint BidirGroup = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bidirgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrMetricConstraint Metric = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrCpConstraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrCpConstraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 Mtid = 2;
  if (this->_internal_mtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mtid(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  // .service_layer.SLBgplsTopoSrBandwidthConstraint Bandwidth = 4;
  if (this->_internal_has_bandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrAffinityConstraints Affinity = 5;
  if (this->_internal_has_affinity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::affinity(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrSrlgConstraints Srlg = 6;
  if (this->_internal_has_srlg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::srlg(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrDisjointGroupConstraint Disjoint = 7;
  if (this->_internal_has_disjoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::disjoint(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrBidirGroupConstraint BidirGroup = 8;
  if (this->_internal_has_bidirgroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bidirgroup(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrMetricConstraint Metric = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metric_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_metric(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrCpConstraints)
  return target;
}

size_t SLBgplsTopoSrCpConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrCpConstraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoSrMetricConstraint Metric = 9;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->metric_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgplsTopoSrBandwidthConstraint Bandwidth = 4;
  if (this->_internal_has_bandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bandwidth_);
  }

  // .service_layer.SLBgplsTopoSrAffinityConstraints Affinity = 5;
  if (this->_internal_has_affinity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affinity_);
  }

  // .service_layer.SLBgplsTopoSrSrlgConstraints Srlg = 6;
  if (this->_internal_has_srlg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srlg_);
  }

  // .service_layer.SLBgplsTopoSrDisjointGroupConstraint Disjoint = 7;
  if (this->_internal_has_disjoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disjoint_);
  }

  // .service_layer.SLBgplsTopoSrBidirGroupConstraint BidirGroup = 8;
  if (this->_internal_has_bidirgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidirgroup_);
  }

  // uint32 Mtid = 2;
  if (this->_internal_mtid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtid());
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrCpConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrCpConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrCpConstraints::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrCpConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrCpConstraints *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrCpConstraints &>(from));
}


void SLBgplsTopoSrCpConstraints::MergeFrom(const SLBgplsTopoSrCpConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrCpConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metric_.MergeFrom(from.metric_);
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_bandwidth()) {
    _internal_mutable_bandwidth()->::service_layer::SLBgplsTopoSrBandwidthConstraint::MergeFrom(from._internal_bandwidth());
  }
  if (from._internal_has_affinity()) {
    _internal_mutable_affinity()->::service_layer::SLBgplsTopoSrAffinityConstraints::MergeFrom(from._internal_affinity());
  }
  if (from._internal_has_srlg()) {
    _internal_mutable_srlg()->::service_layer::SLBgplsTopoSrSrlgConstraints::MergeFrom(from._internal_srlg());
  }
  if (from._internal_has_disjoint()) {
    _internal_mutable_disjoint()->::service_layer::SLBgplsTopoSrDisjointGroupConstraint::MergeFrom(from._internal_disjoint());
  }
  if (from._internal_has_bidirgroup()) {
    _internal_mutable_bidirgroup()->::service_layer::SLBgplsTopoSrBidirGroupConstraint::MergeFrom(from._internal_bidirgroup());
  }
  if (from._internal_mtid() != 0) {
    _internal_set_mtid(from._internal_mtid());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrCpConstraints::CopyFrom(const SLBgplsTopoSrCpConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrCpConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrCpConstraints::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrCpConstraints::InternalSwap(SLBgplsTopoSrCpConstraints* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metric_.InternalSwap(&other->metric_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrCpConstraints, algorithm_)
      + sizeof(SLBgplsTopoSrCpConstraints::algorithm_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrCpConstraints, bandwidth_)>(
          reinterpret_cast<char*>(&bandwidth_),
          reinterpret_cast<char*>(&other->bandwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrCpConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[88]);
}

// ===================================================================

class SLBgplsTopoSrSegList::_Internal {
 public:
};

SLBgplsTopoSrSegList::SLBgplsTopoSrSegList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrSegList)
}
SLBgplsTopoSrSegList::SLBgplsTopoSrSegList(const SLBgplsTopoSrSegList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mtid_, &from.mtid_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrSegList)
}

inline void SLBgplsTopoSrSegList::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(weight_));
}

SLBgplsTopoSrSegList::~SLBgplsTopoSrSegList() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrSegList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrSegList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrSegList::ArenaDtor(void* object) {
  SLBgplsTopoSrSegList* _this = reinterpret_cast< SLBgplsTopoSrSegList* >(object);
  (void)_this;
}
void SLBgplsTopoSrSegList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrSegList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrSegList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrSegList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  flags_.ClearToEmpty();
  ::memset(&mtid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&mtid_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrSegList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Mtid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrSegment Segments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrSegList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrSegList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 Mtid = 2;
  if (this->_internal_mtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mtid(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  // repeated .service_layer.SLBgplsTopoSrSegment Segments = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrSegList)
  return target;
}

size_t SLBgplsTopoSrSegList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrSegList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoSrSegment Segments = 5;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Mtid = 2;
  if (this->_internal_mtid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtid());
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrSegList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrSegList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrSegList::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrSegList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrSegList *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrSegList &>(from));
}


void SLBgplsTopoSrSegList::MergeFrom(const SLBgplsTopoSrSegList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrSegList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_mtid() != 0) {
    _internal_set_mtid(from._internal_mtid());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrSegList::CopyFrom(const SLBgplsTopoSrSegList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrSegList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrSegList::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrSegList::InternalSwap(SLBgplsTopoSrSegList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrSegList, weight_)
      + sizeof(SLBgplsTopoSrSegList::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrSegList, mtid_)>(
          reinterpret_cast<char*>(&mtid_),
          reinterpret_cast<char*>(&other->mtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrSegList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[89]);
}

// ===================================================================

class SLBgplsTopoSrSegmentDesc::_Internal {
 public:
};

SLBgplsTopoSrSegmentDesc::SLBgplsTopoSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrSegmentDesc)
}
SLBgplsTopoSrSegmentDesc::SLBgplsTopoSrSegmentDesc(const SLBgplsTopoSrSegmentDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipv6localnodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipv6localnodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6localnodeglobaladdr().empty()) {
    ipv6localnodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6localnodeglobaladdr(), 
      GetArenaForAllocation());
  }
  ipv6remotenodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipv6remotenodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6remotenodeglobaladdr().empty()) {
    ipv6remotenodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6remotenodeglobaladdr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&localnodeintfid_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(localnodeintfid_));
  clear_has_LocalNodeAddr();
  switch (from.LocalNodeAddr_case()) {
    case kIpv4LocalNodeAddr: {
      _internal_set_ipv4localnodeaddr(from._internal_ipv4localnodeaddr());
      break;
    }
    case kIpv6LocalNodeAddr: {
      _internal_set_ipv6localnodeaddr(from._internal_ipv6localnodeaddr());
      break;
    }
    case LOCALNODEADDR_NOT_SET: {
      break;
    }
  }
  clear_has_RemoteNodeAddr();
  switch (from.RemoteNodeAddr_case()) {
    case kIpv4RemoteNodeAddr: {
      _internal_set_ipv4remotenodeaddr(from._internal_ipv4remotenodeaddr());
      break;
    }
    case kIpv6RemoteNodeAddr: {
      _internal_set_ipv6remotenodeaddr(from._internal_ipv6remotenodeaddr());
      break;
    }
    case REMOTENODEADDR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrSegmentDesc)
}

inline void SLBgplsTopoSrSegmentDesc::SharedCtor() {
ipv6localnodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipv6localnodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ipv6remotenodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipv6remotenodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&algorithm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localnodeintfid_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(localnodeintfid_));
clear_has_LocalNodeAddr();
clear_has_RemoteNodeAddr();
}

SLBgplsTopoSrSegmentDesc::~SLBgplsTopoSrSegmentDesc() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrSegmentDesc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrSegmentDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipv6localnodeglobaladdr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6remotenodeglobaladdr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_LocalNodeAddr()) {
    clear_LocalNodeAddr();
  }
  if (has_RemoteNodeAddr()) {
    clear_RemoteNodeAddr();
  }
}

void SLBgplsTopoSrSegmentDesc::ArenaDtor(void* object) {
  SLBgplsTopoSrSegmentDesc* _this = reinterpret_cast< SLBgplsTopoSrSegmentDesc* >(object);
  (void)_this;
}
void SLBgplsTopoSrSegmentDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrSegmentDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrSegmentDesc::clear_LocalNodeAddr() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoSrSegmentDesc)
  switch (LocalNodeAddr_case()) {
    case kIpv4LocalNodeAddr: {
      // No need to clear
      break;
    }
    case kIpv6LocalNodeAddr: {
      LocalNodeAddr_.ipv6localnodeaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case LOCALNODEADDR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALNODEADDR_NOT_SET;
}

void SLBgplsTopoSrSegmentDesc::clear_RemoteNodeAddr() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoSrSegmentDesc)
  switch (RemoteNodeAddr_case()) {
    case kIpv4RemoteNodeAddr: {
      // No need to clear
      break;
    }
    case kIpv6RemoteNodeAddr: {
      RemoteNodeAddr_.ipv6remotenodeaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case REMOTENODEADDR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = REMOTENODEADDR_NOT_SET;
}


void SLBgplsTopoSrSegmentDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrSegmentDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv6localnodeglobaladdr_.ClearToEmpty();
  ipv6remotenodeglobaladdr_.ClearToEmpty();
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localnodeintfid_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(localnodeintfid_));
  clear_LocalNodeAddr();
  clear_RemoteNodeAddr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrSegmentDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Ipv4LocalNodeAddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_ipv4localnodeaddr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6LocalNodeAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ipv6localnodeaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsLocalNodeAddrIpv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          islocalnodeaddripv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Ipv4RemoteNodeAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_ipv4remotenodeaddr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6RemoteNodeAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ipv6remotenodeaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsRemoteNodeAddrIpv4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          isremotenodeaddripv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6LocalNodeGlobalAddr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ipv6localnodeglobaladdr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6RemoteNodeGlobalAddr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ipv6remotenodeglobaladdr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LocalNodeIntfId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          localnodeintfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteNodeIntfId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          remotenodeintfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrSegmentDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrSegmentDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_algorithm(), target);
  }

  // uint32 Ipv4LocalNodeAddr = 2;
  if (_internal_has_ipv4localnodeaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ipv4localnodeaddr(), target);
  }

  // bytes Ipv6LocalNodeAddr = 3;
  if (_internal_has_ipv6localnodeaddr()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ipv6localnodeaddr(), target);
  }

  // uint32 IsLocalNodeAddrIpv4 = 4;
  if (this->_internal_islocalnodeaddripv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_islocalnodeaddripv4(), target);
  }

  // uint32 Ipv4RemoteNodeAddr = 5;
  if (_internal_has_ipv4remotenodeaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ipv4remotenodeaddr(), target);
  }

  // bytes Ipv6RemoteNodeAddr = 6;
  if (_internal_has_ipv6remotenodeaddr()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ipv6remotenodeaddr(), target);
  }

  // uint32 IsRemoteNodeAddrIpv4 = 7;
  if (this->_internal_isremotenodeaddripv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_isremotenodeaddripv4(), target);
  }

  // bytes Ipv6LocalNodeGlobalAddr = 8;
  if (!this->_internal_ipv6localnodeglobaladdr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_ipv6localnodeglobaladdr(), target);
  }

  // bytes Ipv6RemoteNodeGlobalAddr = 9;
  if (!this->_internal_ipv6remotenodeglobaladdr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_ipv6remotenodeglobaladdr(), target);
  }

  // uint32 LocalNodeIntfId = 10;
  if (this->_internal_localnodeintfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_localnodeintfid(), target);
  }

  // uint32 RemoteNodeIntfId = 11;
  if (this->_internal_remotenodeintfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_remotenodeintfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrSegmentDesc)
  return target;
}

size_t SLBgplsTopoSrSegmentDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrSegmentDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Ipv6LocalNodeGlobalAddr = 8;
  if (!this->_internal_ipv6localnodeglobaladdr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6localnodeglobaladdr());
  }

  // bytes Ipv6RemoteNodeGlobalAddr = 9;
  if (!this->_internal_ipv6remotenodeglobaladdr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6remotenodeglobaladdr());
  }

  // uint32 Algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 IsLocalNodeAddrIpv4 = 4;
  if (this->_internal_islocalnodeaddripv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_islocalnodeaddripv4());
  }

  // uint32 RemoteNodeIntfId = 11;
  if (this->_internal_remotenodeintfid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remotenodeintfid());
  }

  // uint32 IsRemoteNodeAddrIpv4 = 7;
  if (this->_internal_isremotenodeaddripv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isremotenodeaddripv4());
  }

  // uint32 LocalNodeIntfId = 10;
  if (this->_internal_localnodeintfid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localnodeintfid());
  }

  switch (LocalNodeAddr_case()) {
    // uint32 Ipv4LocalNodeAddr = 2;
    case kIpv4LocalNodeAddr: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4localnodeaddr());
      break;
    }
    // bytes Ipv6LocalNodeAddr = 3;
    case kIpv6LocalNodeAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6localnodeaddr());
      break;
    }
    case LOCALNODEADDR_NOT_SET: {
      break;
    }
  }
  switch (RemoteNodeAddr_case()) {
    // uint32 Ipv4RemoteNodeAddr = 5;
    case kIpv4RemoteNodeAddr: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4remotenodeaddr());
      break;
    }
    // bytes Ipv6RemoteNodeAddr = 6;
    case kIpv6RemoteNodeAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6remotenodeaddr());
      break;
    }
    case REMOTENODEADDR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrSegmentDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrSegmentDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrSegmentDesc::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrSegmentDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrSegmentDesc *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrSegmentDesc &>(from));
}


void SLBgplsTopoSrSegmentDesc::MergeFrom(const SLBgplsTopoSrSegmentDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrSegmentDesc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipv6localnodeglobaladdr().empty()) {
    _internal_set_ipv6localnodeglobaladdr(from._internal_ipv6localnodeglobaladdr());
  }
  if (!from._internal_ipv6remotenodeglobaladdr().empty()) {
    _internal_set_ipv6remotenodeglobaladdr(from._internal_ipv6remotenodeglobaladdr());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_islocalnodeaddripv4() != 0) {
    _internal_set_islocalnodeaddripv4(from._internal_islocalnodeaddripv4());
  }
  if (from._internal_remotenodeintfid() != 0) {
    _internal_set_remotenodeintfid(from._internal_remotenodeintfid());
  }
  if (from._internal_isremotenodeaddripv4() != 0) {
    _internal_set_isremotenodeaddripv4(from._internal_isremotenodeaddripv4());
  }
  if (from._internal_localnodeintfid() != 0) {
    _internal_set_localnodeintfid(from._internal_localnodeintfid());
  }
  switch (from.LocalNodeAddr_case()) {
    case kIpv4LocalNodeAddr: {
      _internal_set_ipv4localnodeaddr(from._internal_ipv4localnodeaddr());
      break;
    }
    case kIpv6LocalNodeAddr: {
      _internal_set_ipv6localnodeaddr(from._internal_ipv6localnodeaddr());
      break;
    }
    case LOCALNODEADDR_NOT_SET: {
      break;
    }
  }
  switch (from.RemoteNodeAddr_case()) {
    case kIpv4RemoteNodeAddr: {
      _internal_set_ipv4remotenodeaddr(from._internal_ipv4remotenodeaddr());
      break;
    }
    case kIpv6RemoteNodeAddr: {
      _internal_set_ipv6remotenodeaddr(from._internal_ipv6remotenodeaddr());
      break;
    }
    case REMOTENODEADDR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrSegmentDesc::CopyFrom(const SLBgplsTopoSrSegmentDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrSegmentDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrSegmentDesc::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrSegmentDesc::InternalSwap(SLBgplsTopoSrSegmentDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6localnodeglobaladdr_, lhs_arena,
      &other->ipv6localnodeglobaladdr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6remotenodeglobaladdr_, lhs_arena,
      &other->ipv6remotenodeglobaladdr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrSegmentDesc, localnodeintfid_)
      + sizeof(SLBgplsTopoSrSegmentDesc::localnodeintfid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrSegmentDesc, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
  swap(LocalNodeAddr_, other->LocalNodeAddr_);
  swap(RemoteNodeAddr_, other->RemoteNodeAddr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrSegmentDesc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[90]);
}

// ===================================================================

class SLBgplsTopoSrSegment::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoSrSegmentDesc& segmentdesc(const SLBgplsTopoSrSegment* msg);
  static const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& endpointbehaviour(const SLBgplsTopoSrSegment* msg);
  static const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct(const SLBgplsTopoSrSegment* msg);
};

const ::service_layer::SLBgplsTopoSrSegmentDesc&
SLBgplsTopoSrSegment::_Internal::segmentdesc(const SLBgplsTopoSrSegment* msg) {
  return *msg->segmentdesc_;
}
const ::service_layer::SLBgplsTopoSrv6EndPointBehavior&
SLBgplsTopoSrSegment::_Internal::endpointbehaviour(const SLBgplsTopoSrSegment* msg) {
  return *msg->endpointbehaviour_;
}
const ::service_layer::SLBgplsTopoSrv6SidStruct&
SLBgplsTopoSrSegment::_Internal::sidstruct(const SLBgplsTopoSrSegment* msg) {
  return *msg->sidstruct_;
}
SLBgplsTopoSrSegment::SLBgplsTopoSrSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrSegment)
}
SLBgplsTopoSrSegment::SLBgplsTopoSrSegment(const SLBgplsTopoSrSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_segmentdesc()) {
    segmentdesc_ = new ::service_layer::SLBgplsTopoSrSegmentDesc(*from.segmentdesc_);
  } else {
    segmentdesc_ = nullptr;
  }
  if (from._internal_has_endpointbehaviour()) {
    endpointbehaviour_ = new ::service_layer::SLBgplsTopoSrv6EndPointBehavior(*from.endpointbehaviour_);
  } else {
    endpointbehaviour_ = nullptr;
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLBgplsTopoSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&issidmpls_) -
    reinterpret_cast<char*>(&type_)) + sizeof(issidmpls_));
  clear_has_Sid();
  switch (from.Sid_case()) {
    case kMplsLabel: {
      _internal_set_mplslabel(from._internal_mplslabel());
      break;
    }
    case kSrv6Sid: {
      _internal_set_srv6sid(from._internal_srv6sid());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrSegment)
}

inline void SLBgplsTopoSrSegment::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segmentdesc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&issidmpls_) -
    reinterpret_cast<char*>(&segmentdesc_)) + sizeof(issidmpls_));
clear_has_Sid();
}

SLBgplsTopoSrSegment::~SLBgplsTopoSrSegment() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete segmentdesc_;
  if (this != internal_default_instance()) delete endpointbehaviour_;
  if (this != internal_default_instance()) delete sidstruct_;
  if (has_Sid()) {
    clear_Sid();
  }
}

void SLBgplsTopoSrSegment::ArenaDtor(void* object) {
  SLBgplsTopoSrSegment* _this = reinterpret_cast< SLBgplsTopoSrSegment* >(object);
  (void)_this;
}
void SLBgplsTopoSrSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrSegment::clear_Sid() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoSrSegment)
  switch (Sid_case()) {
    case kMplsLabel: {
      // No need to clear
      break;
    }
    case kSrv6Sid: {
      Sid_.srv6sid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SID_NOT_SET;
}


void SLBgplsTopoSrSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && segmentdesc_ != nullptr) {
    delete segmentdesc_;
  }
  segmentdesc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issidmpls_) -
      reinterpret_cast<char*>(&type_)) + sizeof(issidmpls_));
  clear_Sid();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoSrSegmentType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLBgplsTopoSrSegmentType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MplsLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_mplslabel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Srv6Sid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_srv6sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsSidMpls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          issidmpls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrSegmentDesc SegmentDesc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_segmentdesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpointbehaviour(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoSrSegmentType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 MplsLabel = 3;
  if (_internal_has_mplslabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mplslabel(), target);
  }

  // bytes Srv6Sid = 4;
  if (_internal_has_srv6sid()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_srv6sid(), target);
  }

  // uint32 IsSidMpls = 5;
  if (this->_internal_issidmpls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_issidmpls(), target);
  }

  // .service_layer.SLBgplsTopoSrSegmentDesc SegmentDesc = 6;
  if (this->_internal_has_segmentdesc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::segmentdesc(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 7;
  if (this->_internal_has_endpointbehaviour()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::endpointbehaviour(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 8;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrSegment)
  return target;
}

size_t SLBgplsTopoSrSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgplsTopoSrSegmentDesc SegmentDesc = 6;
  if (this->_internal_has_segmentdesc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segmentdesc_);
  }

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 7;
  if (this->_internal_has_endpointbehaviour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpointbehaviour_);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 8;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  // .service_layer.SLBgplsTopoSrSegmentType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 IsSidMpls = 5;
  if (this->_internal_issidmpls() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_issidmpls());
  }

  switch (Sid_case()) {
    // uint32 MplsLabel = 3;
    case kMplsLabel: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mplslabel());
      break;
    }
    // bytes Srv6Sid = 4;
    case kSrv6Sid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_srv6sid());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrSegment::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrSegment *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrSegment &>(from));
}


void SLBgplsTopoSrSegment::MergeFrom(const SLBgplsTopoSrSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrSegment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_segmentdesc()) {
    _internal_mutable_segmentdesc()->::service_layer::SLBgplsTopoSrSegmentDesc::MergeFrom(from._internal_segmentdesc());
  }
  if (from._internal_has_endpointbehaviour()) {
    _internal_mutable_endpointbehaviour()->::service_layer::SLBgplsTopoSrv6EndPointBehavior::MergeFrom(from._internal_endpointbehaviour());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLBgplsTopoSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_issidmpls() != 0) {
    _internal_set_issidmpls(from._internal_issidmpls());
  }
  switch (from.Sid_case()) {
    case kMplsLabel: {
      _internal_set_mplslabel(from._internal_mplslabel());
      break;
    }
    case kSrv6Sid: {
      _internal_set_srv6sid(from._internal_srv6sid());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrSegment::CopyFrom(const SLBgplsTopoSrSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrSegment::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrSegment::InternalSwap(SLBgplsTopoSrSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrSegment, issidmpls_)
      + sizeof(SLBgplsTopoSrSegment::issidmpls_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrSegment, segmentdesc_)>(
          reinterpret_cast<char*>(&segmentdesc_),
          reinterpret_cast<char*>(&other->segmentdesc_));
  swap(Sid_, other->Sid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[91]);
}

// ===================================================================

class SLBgplsSrSegListMetric::_Internal {
 public:
};

SLBgplsSrSegListMetric::SLBgplsSrSegListMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsSrSegListMetric)
}
SLBgplsSrSegListMetric::SLBgplsSrSegListMetric(const SLBgplsSrSegListMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsSrSegListMetric)
}

inline void SLBgplsSrSegListMetric::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

SLBgplsSrSegListMetric::~SLBgplsSrSegListMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsSrSegListMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsSrSegListMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsSrSegListMetric::ArenaDtor(void* object) {
  SLBgplsSrSegListMetric* _this = reinterpret_cast< SLBgplsSrSegListMetric* >(object);
  (void)_this;
}
void SLBgplsSrSegListMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsSrSegListMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsSrSegListMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsSrSegListMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsSrSegListMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Margin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsSrSegListMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsSrSegListMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 Margin = 3;
  if (this->_internal_margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_margin(), target);
  }

  // uint32 Bound = 4;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bound(), target);
  }

  // uint32 Value = 5;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsSrSegListMetric)
  return target;
}

size_t SLBgplsSrSegListMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsSrSegListMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Margin = 3;
  if (this->_internal_margin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_margin());
  }

  // uint32 Bound = 4;
  if (this->_internal_bound() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bound());
  }

  // uint32 Value = 5;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsSrSegListMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsSrSegListMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsSrSegListMetric::GetClassData() const { return &_class_data_; }

void SLBgplsSrSegListMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsSrSegListMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsSrSegListMetric &>(from));
}


void SLBgplsSrSegListMetric::MergeFrom(const SLBgplsSrSegListMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsSrSegListMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_margin() != 0) {
    _internal_set_margin(from._internal_margin());
  }
  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsSrSegListMetric::CopyFrom(const SLBgplsSrSegListMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsSrSegListMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsSrSegListMetric::IsInitialized() const {
  return true;
}

void SLBgplsSrSegListMetric::InternalSwap(SLBgplsSrSegListMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsSrSegListMetric, value_)
      + sizeof(SLBgplsSrSegListMetric::value_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsSrSegListMetric, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsSrSegListMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[92]);
}

// ===================================================================

class SLBgplsTopoSrAffinityConstraints::_Internal {
 public:
};

SLBgplsTopoSrAffinityConstraints::SLBgplsTopoSrAffinityConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exclanyeag_(arena),
  inclanyeag_(arena),
  inclalleag_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrAffinityConstraints)
}
SLBgplsTopoSrAffinityConstraints::SLBgplsTopoSrAffinityConstraints(const SLBgplsTopoSrAffinityConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exclanyeag_(from.exclanyeag_),
      inclanyeag_(from.inclanyeag_),
      inclalleag_(from.inclalleag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrAffinityConstraints)
}

inline void SLBgplsTopoSrAffinityConstraints::SharedCtor() {
}

SLBgplsTopoSrAffinityConstraints::~SLBgplsTopoSrAffinityConstraints() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrAffinityConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrAffinityConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrAffinityConstraints::ArenaDtor(void* object) {
  SLBgplsTopoSrAffinityConstraints* _this = reinterpret_cast< SLBgplsTopoSrAffinityConstraints* >(object);
  (void)_this;
}
void SLBgplsTopoSrAffinityConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrAffinityConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrAffinityConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrAffinityConstraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exclanyeag_.Clear();
  inclanyeag_.Clear();
  inclalleag_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrAffinityConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 ExclAnyEag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_exclanyeag(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_exclanyeag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 InclAnyEag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inclanyeag(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_inclanyeag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 InclAllEag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inclalleag(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_inclalleag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrAffinityConstraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrAffinityConstraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ExclAnyEag = 1;
  {
    int byte_size = _exclanyeag_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_exclanyeag(), byte_size, target);
    }
  }

  // repeated uint32 InclAnyEag = 2;
  {
    int byte_size = _inclanyeag_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_inclanyeag(), byte_size, target);
    }
  }

  // repeated uint32 InclAllEag = 3;
  {
    int byte_size = _inclalleag_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_inclalleag(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrAffinityConstraints)
  return target;
}

size_t SLBgplsTopoSrAffinityConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrAffinityConstraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ExclAnyEag = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->exclanyeag_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exclanyeag_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 InclAnyEag = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inclanyeag_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inclanyeag_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 InclAllEag = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inclalleag_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inclalleag_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrAffinityConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrAffinityConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrAffinityConstraints::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrAffinityConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrAffinityConstraints *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrAffinityConstraints &>(from));
}


void SLBgplsTopoSrAffinityConstraints::MergeFrom(const SLBgplsTopoSrAffinityConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrAffinityConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  exclanyeag_.MergeFrom(from.exclanyeag_);
  inclanyeag_.MergeFrom(from.inclanyeag_);
  inclalleag_.MergeFrom(from.inclalleag_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrAffinityConstraints::CopyFrom(const SLBgplsTopoSrAffinityConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrAffinityConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrAffinityConstraints::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrAffinityConstraints::InternalSwap(SLBgplsTopoSrAffinityConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exclanyeag_.InternalSwap(&other->exclanyeag_);
  inclanyeag_.InternalSwap(&other->inclanyeag_);
  inclalleag_.InternalSwap(&other->inclalleag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrAffinityConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[93]);
}

// ===================================================================

class SLBgplsTopoSrSrlgConstraints::_Internal {
 public:
};

SLBgplsTopoSrSrlgConstraints::SLBgplsTopoSrSrlgConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  srlgvalues_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrSrlgConstraints)
}
SLBgplsTopoSrSrlgConstraints::SLBgplsTopoSrSrlgConstraints(const SLBgplsTopoSrSrlgConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      srlgvalues_(from.srlgvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrSrlgConstraints)
}

inline void SLBgplsTopoSrSrlgConstraints::SharedCtor() {
}

SLBgplsTopoSrSrlgConstraints::~SLBgplsTopoSrSrlgConstraints() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrSrlgConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrSrlgConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrSrlgConstraints::ArenaDtor(void* object) {
  SLBgplsTopoSrSrlgConstraints* _this = reinterpret_cast< SLBgplsTopoSrSrlgConstraints* >(object);
  (void)_this;
}
void SLBgplsTopoSrSrlgConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrSrlgConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrSrlgConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrSrlgConstraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srlgvalues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrSrlgConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 SrlgValues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srlgvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_srlgvalues(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrSrlgConstraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrSrlgConstraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 SrlgValues = 1;
  {
    int byte_size = _srlgvalues_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_srlgvalues(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrSrlgConstraints)
  return target;
}

size_t SLBgplsTopoSrSrlgConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrSrlgConstraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 SrlgValues = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->srlgvalues_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _srlgvalues_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrSrlgConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrSrlgConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrSrlgConstraints::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrSrlgConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrSrlgConstraints *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrSrlgConstraints &>(from));
}


void SLBgplsTopoSrSrlgConstraints::MergeFrom(const SLBgplsTopoSrSrlgConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrSrlgConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  srlgvalues_.MergeFrom(from.srlgvalues_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrSrlgConstraints::CopyFrom(const SLBgplsTopoSrSrlgConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrSrlgConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrSrlgConstraints::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrSrlgConstraints::InternalSwap(SLBgplsTopoSrSrlgConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  srlgvalues_.InternalSwap(&other->srlgvalues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrSrlgConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[94]);
}

// ===================================================================

class SLBgplsTopoSrBandwidthConstraint::_Internal {
 public:
};

SLBgplsTopoSrBandwidthConstraint::SLBgplsTopoSrBandwidthConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrBandwidthConstraint)
}
SLBgplsTopoSrBandwidthConstraint::SLBgplsTopoSrBandwidthConstraint(const SLBgplsTopoSrBandwidthConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrBandwidthConstraint)
}

inline void SLBgplsTopoSrBandwidthConstraint::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrBandwidthConstraint::~SLBgplsTopoSrBandwidthConstraint() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrBandwidthConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrBandwidthConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrBandwidthConstraint::ArenaDtor(void* object) {
  SLBgplsTopoSrBandwidthConstraint* _this = reinterpret_cast< SLBgplsTopoSrBandwidthConstraint* >(object);
  (void)_this;
}
void SLBgplsTopoSrBandwidthConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrBandwidthConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrBandwidthConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrBandwidthConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrBandwidthConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrBandwidthConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrBandwidthConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrBandwidthConstraint)
  return target;
}

size_t SLBgplsTopoSrBandwidthConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrBandwidthConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrBandwidthConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrBandwidthConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrBandwidthConstraint::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrBandwidthConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrBandwidthConstraint *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrBandwidthConstraint &>(from));
}


void SLBgplsTopoSrBandwidthConstraint::MergeFrom(const SLBgplsTopoSrBandwidthConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrBandwidthConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrBandwidthConstraint::CopyFrom(const SLBgplsTopoSrBandwidthConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrBandwidthConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrBandwidthConstraint::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrBandwidthConstraint::InternalSwap(SLBgplsTopoSrBandwidthConstraint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrBandwidthConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[95]);
}

// ===================================================================

class SLBgplsTopoSrDisjointGroupConstraint::_Internal {
 public:
};

SLBgplsTopoSrDisjointGroupConstraint::SLBgplsTopoSrDisjointGroupConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
}
SLBgplsTopoSrDisjointGroupConstraint::SLBgplsTopoSrDisjointGroupConstraint(const SLBgplsTopoSrDisjointGroupConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    requestflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestflags().empty()) {
    requestflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requestflags(), 
      GetArenaForAllocation());
  }
  statusflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    statusflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statusflags().empty()) {
    statusflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statusflags(), 
      GetArenaForAllocation());
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
}

inline void SLBgplsTopoSrDisjointGroupConstraint::SharedCtor() {
requestflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  requestflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
statusflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  statusflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
groupid_ = 0u;
}

SLBgplsTopoSrDisjointGroupConstraint::~SLBgplsTopoSrDisjointGroupConstraint() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrDisjointGroupConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  requestflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statusflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrDisjointGroupConstraint::ArenaDtor(void* object) {
  SLBgplsTopoSrDisjointGroupConstraint* _this = reinterpret_cast< SLBgplsTopoSrDisjointGroupConstraint* >(object);
  (void)_this;
}
void SLBgplsTopoSrDisjointGroupConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrDisjointGroupConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrDisjointGroupConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestflags_.ClearToEmpty();
  statusflags_.ClearToEmpty();
  groupid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrDisjointGroupConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RequestFlags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requestflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes StatusFlags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_statusflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrDisjointGroupConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RequestFlags = 1;
  if (!this->_internal_requestflags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_requestflags(), target);
  }

  // bytes StatusFlags = 2;
  if (!this->_internal_statusflags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_statusflags(), target);
  }

  // uint32 GroupId = 3;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  return target;
}

size_t SLBgplsTopoSrDisjointGroupConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RequestFlags = 1;
  if (!this->_internal_requestflags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_requestflags());
  }

  // bytes StatusFlags = 2;
  if (!this->_internal_statusflags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_statusflags());
  }

  // uint32 GroupId = 3;
  if (this->_internal_groupid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrDisjointGroupConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrDisjointGroupConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrDisjointGroupConstraint::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrDisjointGroupConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrDisjointGroupConstraint *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrDisjointGroupConstraint &>(from));
}


void SLBgplsTopoSrDisjointGroupConstraint::MergeFrom(const SLBgplsTopoSrDisjointGroupConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requestflags().empty()) {
    _internal_set_requestflags(from._internal_requestflags());
  }
  if (!from._internal_statusflags().empty()) {
    _internal_set_statusflags(from._internal_statusflags());
  }
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrDisjointGroupConstraint::CopyFrom(const SLBgplsTopoSrDisjointGroupConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrDisjointGroupConstraint::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrDisjointGroupConstraint::InternalSwap(SLBgplsTopoSrDisjointGroupConstraint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &requestflags_, lhs_arena,
      &other->requestflags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &statusflags_, lhs_arena,
      &other->statusflags_, rhs_arena
  );
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrDisjointGroupConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[96]);
}

// ===================================================================

class SLBgplsTopoSrv6BindingSid::_Internal {
 public:
  static const ::service_layer::SlBgplsTopoSrBsid& bsid(const SLBgplsTopoSrv6BindingSid* msg);
  static const ::service_layer::SlBgplsTopoSrBsid& specifiedbsid(const SLBgplsTopoSrv6BindingSid* msg);
  static const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& endpointbehaviour(const SLBgplsTopoSrv6BindingSid* msg);
  static const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct(const SLBgplsTopoSrv6BindingSid* msg);
};

const ::service_layer::SlBgplsTopoSrBsid&
SLBgplsTopoSrv6BindingSid::_Internal::bsid(const SLBgplsTopoSrv6BindingSid* msg) {
  return *msg->bsid_;
}
const ::service_layer::SlBgplsTopoSrBsid&
SLBgplsTopoSrv6BindingSid::_Internal::specifiedbsid(const SLBgplsTopoSrv6BindingSid* msg) {
  return *msg->specifiedbsid_;
}
const ::service_layer::SLBgplsTopoSrv6EndPointBehavior&
SLBgplsTopoSrv6BindingSid::_Internal::endpointbehaviour(const SLBgplsTopoSrv6BindingSid* msg) {
  return *msg->endpointbehaviour_;
}
const ::service_layer::SLBgplsTopoSrv6SidStruct&
SLBgplsTopoSrv6BindingSid::_Internal::sidstruct(const SLBgplsTopoSrv6BindingSid* msg) {
  return *msg->sidstruct_;
}
SLBgplsTopoSrv6BindingSid::SLBgplsTopoSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6BindingSid)
}
SLBgplsTopoSrv6BindingSid::SLBgplsTopoSrv6BindingSid(const SLBgplsTopoSrv6BindingSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bsid()) {
    bsid_ = new ::service_layer::SlBgplsTopoSrBsid(*from.bsid_);
  } else {
    bsid_ = nullptr;
  }
  if (from._internal_has_specifiedbsid()) {
    specifiedbsid_ = new ::service_layer::SlBgplsTopoSrBsid(*from.specifiedbsid_);
  } else {
    specifiedbsid_ = nullptr;
  }
  if (from._internal_has_endpointbehaviour()) {
    endpointbehaviour_ = new ::service_layer::SLBgplsTopoSrv6EndPointBehavior(*from.endpointbehaviour_);
  } else {
    endpointbehaviour_ = nullptr;
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLBgplsTopoSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6BindingSid)
}

inline void SLBgplsTopoSrv6BindingSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bsid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sidstruct_) -
    reinterpret_cast<char*>(&bsid_)) + sizeof(sidstruct_));
}

SLBgplsTopoSrv6BindingSid::~SLBgplsTopoSrv6BindingSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6BindingSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6BindingSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bsid_;
  if (this != internal_default_instance()) delete specifiedbsid_;
  if (this != internal_default_instance()) delete endpointbehaviour_;
  if (this != internal_default_instance()) delete sidstruct_;
}

void SLBgplsTopoSrv6BindingSid::ArenaDtor(void* object) {
  SLBgplsTopoSrv6BindingSid* _this = reinterpret_cast< SLBgplsTopoSrv6BindingSid* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6BindingSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6BindingSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6BindingSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6BindingSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && specifiedbsid_ != nullptr) {
    delete specifiedbsid_;
  }
  specifiedbsid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6BindingSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_specifiedbsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpointbehaviour(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6BindingSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6BindingSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
  if (this->_internal_has_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bsid(this), target, stream);
  }

  // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
  if (this->_internal_has_specifiedbsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::specifiedbsid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 4;
  if (this->_internal_has_endpointbehaviour()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::endpointbehaviour(this), target, stream);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 5;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6BindingSid)
  return target;
}

size_t SLBgplsTopoSrv6BindingSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6BindingSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
  if (this->_internal_has_bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bsid_);
  }

  // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
  if (this->_internal_has_specifiedbsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specifiedbsid_);
  }

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 4;
  if (this->_internal_has_endpointbehaviour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpointbehaviour_);
  }

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 5;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6BindingSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6BindingSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6BindingSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6BindingSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6BindingSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6BindingSid &>(from));
}


void SLBgplsTopoSrv6BindingSid::MergeFrom(const SLBgplsTopoSrv6BindingSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6BindingSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_bsid()) {
    _internal_mutable_bsid()->::service_layer::SlBgplsTopoSrBsid::MergeFrom(from._internal_bsid());
  }
  if (from._internal_has_specifiedbsid()) {
    _internal_mutable_specifiedbsid()->::service_layer::SlBgplsTopoSrBsid::MergeFrom(from._internal_specifiedbsid());
  }
  if (from._internal_has_endpointbehaviour()) {
    _internal_mutable_endpointbehaviour()->::service_layer::SLBgplsTopoSrv6EndPointBehavior::MergeFrom(from._internal_endpointbehaviour());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLBgplsTopoSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6BindingSid::CopyFrom(const SLBgplsTopoSrv6BindingSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6BindingSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6BindingSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6BindingSid::InternalSwap(SLBgplsTopoSrv6BindingSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6BindingSid, sidstruct_)
      + sizeof(SLBgplsTopoSrv6BindingSid::sidstruct_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6BindingSid, bsid_)>(
          reinterpret_cast<char*>(&bsid_),
          reinterpret_cast<char*>(&other->bsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6BindingSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[97]);
}

// ===================================================================

class SLBgplsTopoSrPolicyName::_Internal {
 public:
};

SLBgplsTopoSrPolicyName::SLBgplsTopoSrPolicyName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrPolicyName)
}
SLBgplsTopoSrPolicyName::SLBgplsTopoSrPolicyName(const SLBgplsTopoSrPolicyName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrPolicyName)
}

inline void SLBgplsTopoSrPolicyName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrPolicyName::~SLBgplsTopoSrPolicyName() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrPolicyName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrPolicyName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrPolicyName::ArenaDtor(void* object) {
  SLBgplsTopoSrPolicyName* _this = reinterpret_cast< SLBgplsTopoSrPolicyName* >(object);
  (void)_this;
}
void SLBgplsTopoSrPolicyName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrPolicyName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrPolicyName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrPolicyName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrPolicyName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgplsTopoSrPolicyName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrPolicyName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrPolicyName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgplsTopoSrPolicyName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrPolicyName)
  return target;
}

size_t SLBgplsTopoSrPolicyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrPolicyName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrPolicyName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrPolicyName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrPolicyName::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrPolicyName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrPolicyName *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrPolicyName &>(from));
}


void SLBgplsTopoSrPolicyName::MergeFrom(const SLBgplsTopoSrPolicyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrPolicyName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrPolicyName::CopyFrom(const SLBgplsTopoSrPolicyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrPolicyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrPolicyName::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrPolicyName::InternalSwap(SLBgplsTopoSrPolicyName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrPolicyName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[98]);
}

// ===================================================================

class SLBgplsTopoSrBidirGroupConstraint::_Internal {
 public:
};

SLBgplsTopoSrBidirGroupConstraint::SLBgplsTopoSrBidirGroupConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrBidirGroupConstraint)
}
SLBgplsTopoSrBidirGroupConstraint::SLBgplsTopoSrBidirGroupConstraint(const SLBgplsTopoSrBidirGroupConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrBidirGroupConstraint)
}

inline void SLBgplsTopoSrBidirGroupConstraint::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
groupid_ = 0u;
}

SLBgplsTopoSrBidirGroupConstraint::~SLBgplsTopoSrBidirGroupConstraint() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrBidirGroupConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrBidirGroupConstraint::ArenaDtor(void* object) {
  SLBgplsTopoSrBidirGroupConstraint* _this = reinterpret_cast< SLBgplsTopoSrBidirGroupConstraint* >(object);
  (void)_this;
}
void SLBgplsTopoSrBidirGroupConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrBidirGroupConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrBidirGroupConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  groupid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrBidirGroupConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrBidirGroupConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 GroupId = 2;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  return target;
}

size_t SLBgplsTopoSrBidirGroupConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 GroupId = 2;
  if (this->_internal_groupid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrBidirGroupConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrBidirGroupConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrBidirGroupConstraint::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrBidirGroupConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrBidirGroupConstraint *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrBidirGroupConstraint &>(from));
}


void SLBgplsTopoSrBidirGroupConstraint::MergeFrom(const SLBgplsTopoSrBidirGroupConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrBidirGroupConstraint::CopyFrom(const SLBgplsTopoSrBidirGroupConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrBidirGroupConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrBidirGroupConstraint::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrBidirGroupConstraint::InternalSwap(SLBgplsTopoSrBidirGroupConstraint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrBidirGroupConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[99]);
}

// ===================================================================

class SLBgplsTopoSrMetricConstraint::_Internal {
 public:
};

SLBgplsTopoSrMetricConstraint::SLBgplsTopoSrMetricConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrMetricConstraint)
}
SLBgplsTopoSrMetricConstraint::SLBgplsTopoSrMetricConstraint(const SLBgplsTopoSrMetricConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bound_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrMetricConstraint)
}

inline void SLBgplsTopoSrMetricConstraint::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bound_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bound_));
}

SLBgplsTopoSrMetricConstraint::~SLBgplsTopoSrMetricConstraint() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrMetricConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrMetricConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrMetricConstraint::ArenaDtor(void* object) {
  SLBgplsTopoSrMetricConstraint* _this = reinterpret_cast< SLBgplsTopoSrMetricConstraint* >(object);
  (void)_this;
}
void SLBgplsTopoSrMetricConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrMetricConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrMetricConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrMetricConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bound_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrMetricConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Margin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrMetricConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrMetricConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 Margin = 3;
  if (this->_internal_margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_margin(), target);
  }

  // uint32 Bound = 4;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrMetricConstraint)
  return target;
}

size_t SLBgplsTopoSrMetricConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrMetricConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Margin = 3;
  if (this->_internal_margin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_margin());
  }

  // uint32 Bound = 4;
  if (this->_internal_bound() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bound());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrMetricConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrMetricConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrMetricConstraint::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrMetricConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrMetricConstraint *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrMetricConstraint &>(from));
}


void SLBgplsTopoSrMetricConstraint::MergeFrom(const SLBgplsTopoSrMetricConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrMetricConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_margin() != 0) {
    _internal_set_margin(from._internal_margin());
  }
  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrMetricConstraint::CopyFrom(const SLBgplsTopoSrMetricConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrMetricConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrMetricConstraint::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrMetricConstraint::InternalSwap(SLBgplsTopoSrMetricConstraint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrMetricConstraint, bound_)
      + sizeof(SLBgplsTopoSrMetricConstraint::bound_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrMetricConstraint, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrMetricConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[100]);
}

// ===================================================================

class SLBgplsTopoSrCpSegListBandwidthState::_Internal {
 public:
};

SLBgplsTopoSrCpSegListBandwidthState::SLBgplsTopoSrCpSegListBandwidthState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
}
SLBgplsTopoSrCpSegListBandwidthState::SLBgplsTopoSrCpSegListBandwidthState(const SLBgplsTopoSrCpSegListBandwidthState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
}

inline void SLBgplsTopoSrCpSegListBandwidthState::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrCpSegListBandwidthState::~SLBgplsTopoSrCpSegListBandwidthState() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrCpSegListBandwidthState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrCpSegListBandwidthState::ArenaDtor(void* object) {
  SLBgplsTopoSrCpSegListBandwidthState* _this = reinterpret_cast< SLBgplsTopoSrCpSegListBandwidthState* >(object);
  (void)_this;
}
void SLBgplsTopoSrCpSegListBandwidthState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrCpSegListBandwidthState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrCpSegListBandwidthState::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrCpSegListBandwidthState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrCpSegListBandwidthState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  return target;
}

size_t SLBgplsTopoSrCpSegListBandwidthState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrCpSegListBandwidthState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrCpSegListBandwidthState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrCpSegListBandwidthState::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrCpSegListBandwidthState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrCpSegListBandwidthState *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrCpSegListBandwidthState &>(from));
}


void SLBgplsTopoSrCpSegListBandwidthState::MergeFrom(const SLBgplsTopoSrCpSegListBandwidthState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrCpSegListBandwidthState::CopyFrom(const SLBgplsTopoSrCpSegListBandwidthState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrCpSegListBandwidthState::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrCpSegListBandwidthState::InternalSwap(SLBgplsTopoSrCpSegListBandwidthState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrCpSegListBandwidthState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[101]);
}

// ===================================================================

class SLBgplsTopoSrSegListId::_Internal {
 public:
};

SLBgplsTopoSrSegListId::SLBgplsTopoSrSegListId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrSegListId)
}
SLBgplsTopoSrSegListId::SLBgplsTopoSrSegListId(const SLBgplsTopoSrSegListId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seglistid_ = from.seglistid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrSegListId)
}

inline void SLBgplsTopoSrSegListId::SharedCtor() {
seglistid_ = 0u;
}

SLBgplsTopoSrSegListId::~SLBgplsTopoSrSegListId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrSegListId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrSegListId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrSegListId::ArenaDtor(void* object) {
  SLBgplsTopoSrSegListId* _this = reinterpret_cast< SLBgplsTopoSrSegListId* >(object);
  (void)_this;
}
void SLBgplsTopoSrSegListId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrSegListId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrSegListId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrSegListId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seglistid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrSegListId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SegListId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seglistid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrSegListId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrSegListId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SegListId = 1;
  if (this->_internal_seglistid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seglistid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrSegListId)
  return target;
}

size_t SLBgplsTopoSrSegListId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrSegListId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SegListId = 1;
  if (this->_internal_seglistid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seglistid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrSegListId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrSegListId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrSegListId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrSegListId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrSegListId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrSegListId &>(from));
}


void SLBgplsTopoSrSegListId::MergeFrom(const SLBgplsTopoSrSegListId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrSegListId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seglistid() != 0) {
    _internal_set_seglistid(from._internal_seglistid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrSegListId::CopyFrom(const SLBgplsTopoSrSegListId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrSegListId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrSegListId::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrSegListId::InternalSwap(SLBgplsTopoSrSegListId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seglistid_, other->seglistid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrSegListId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[102]);
}

// ===================================================================

class SLBgplsTopoSrv6EndPointBehavior::_Internal {
 public:
};

SLBgplsTopoSrv6EndPointBehavior::SLBgplsTopoSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6EndPointBehavior)
}
SLBgplsTopoSrv6EndPointBehavior::SLBgplsTopoSrv6EndPointBehavior(const SLBgplsTopoSrv6EndPointBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&endpointbehavior_, &from.endpointbehavior_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6EndPointBehavior)
}

inline void SLBgplsTopoSrv6EndPointBehavior::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endpointbehavior_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(algorithm_));
}

SLBgplsTopoSrv6EndPointBehavior::~SLBgplsTopoSrv6EndPointBehavior() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6EndPointBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrv6EndPointBehavior::ArenaDtor(void* object) {
  SLBgplsTopoSrv6EndPointBehavior* _this = reinterpret_cast< SLBgplsTopoSrv6EndPointBehavior* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6EndPointBehavior::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6EndPointBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6EndPointBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&endpointbehavior_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(algorithm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6EndPointBehavior::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 EndPointBehavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          endpointbehavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6EndPointBehavior::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 EndPointBehavior = 1;
  if (this->_internal_endpointbehavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_endpointbehavior(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  return target;
}

size_t SLBgplsTopoSrv6EndPointBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 EndPointBehavior = 1;
  if (this->_internal_endpointbehavior() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_endpointbehavior());
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6EndPointBehavior::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6EndPointBehavior::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6EndPointBehavior::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6EndPointBehavior::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6EndPointBehavior *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6EndPointBehavior &>(from));
}


void SLBgplsTopoSrv6EndPointBehavior::MergeFrom(const SLBgplsTopoSrv6EndPointBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_endpointbehavior() != 0) {
    _internal_set_endpointbehavior(from._internal_endpointbehavior());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6EndPointBehavior::CopyFrom(const SLBgplsTopoSrv6EndPointBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6EndPointBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6EndPointBehavior::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6EndPointBehavior::InternalSwap(SLBgplsTopoSrv6EndPointBehavior* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6EndPointBehavior, algorithm_)
      + sizeof(SLBgplsTopoSrv6EndPointBehavior::algorithm_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6EndPointBehavior, endpointbehavior_)>(
          reinterpret_cast<char*>(&endpointbehavior_),
          reinterpret_cast<char*>(&other->endpointbehavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6EndPointBehavior::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[103]);
}

// ===================================================================

class SLBgplsTopoSrv6BgpPeerNodeSid::_Internal {
 public:
};

SLBgplsTopoSrv6BgpPeerNodeSid::SLBgplsTopoSrv6BgpPeerNodeSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
}
SLBgplsTopoSrv6BgpPeerNodeSid::SLBgplsTopoSrv6BgpPeerNodeSid(const SLBgplsTopoSrv6BgpPeerNodeSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&peerbgpid_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(peerbgpid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
}

inline void SLBgplsTopoSrv6BgpPeerNodeSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peerbgpid_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(peerbgpid_));
}

SLBgplsTopoSrv6BgpPeerNodeSid::~SLBgplsTopoSrv6BgpPeerNodeSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6BgpPeerNodeSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrv6BgpPeerNodeSid::ArenaDtor(void* object) {
  SLBgplsTopoSrv6BgpPeerNodeSid* _this = reinterpret_cast< SLBgplsTopoSrv6BgpPeerNodeSid* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6BgpPeerNodeSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6BgpPeerNodeSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6BgpPeerNodeSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peerbgpid_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(peerbgpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6BgpPeerNodeSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PeerAS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          peeras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PeerBgpId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          peerbgpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6BgpPeerNodeSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 Weight = 2;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weight(), target);
  }

  // uint32 PeerAS = 3;
  if (this->_internal_peeras() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_peeras(), target);
  }

  // uint32 PeerBgpId = 4;
  if (this->_internal_peerbgpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peerbgpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  return target;
}

size_t SLBgplsTopoSrv6BgpPeerNodeSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Weight = 2;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  // uint32 PeerAS = 3;
  if (this->_internal_peeras() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_peeras());
  }

  // uint32 PeerBgpId = 4;
  if (this->_internal_peerbgpid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_peerbgpid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6BgpPeerNodeSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6BgpPeerNodeSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6BgpPeerNodeSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6BgpPeerNodeSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6BgpPeerNodeSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6BgpPeerNodeSid &>(from));
}


void SLBgplsTopoSrv6BgpPeerNodeSid::MergeFrom(const SLBgplsTopoSrv6BgpPeerNodeSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_peeras() != 0) {
    _internal_set_peeras(from._internal_peeras());
  }
  if (from._internal_peerbgpid() != 0) {
    _internal_set_peerbgpid(from._internal_peerbgpid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6BgpPeerNodeSid::CopyFrom(const SLBgplsTopoSrv6BgpPeerNodeSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6BgpPeerNodeSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6BgpPeerNodeSid::InternalSwap(SLBgplsTopoSrv6BgpPeerNodeSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6BgpPeerNodeSid, peerbgpid_)
      + sizeof(SLBgplsTopoSrv6BgpPeerNodeSid::peerbgpid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6BgpPeerNodeSid, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6BgpPeerNodeSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[104]);
}

// ===================================================================

class SLBgplsTopoSrv6SidStruct::_Internal {
 public:
};

SLBgplsTopoSrv6SidStruct::SLBgplsTopoSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrv6SidStruct)
}
SLBgplsTopoSrv6SidStruct::SLBgplsTopoSrv6SidStruct(const SLBgplsTopoSrv6SidStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&locatorblocklen_, &from.locatorblocklen_,
    static_cast<size_t>(reinterpret_cast<char*>(&arglen_) -
    reinterpret_cast<char*>(&locatorblocklen_)) + sizeof(arglen_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrv6SidStruct)
}

inline void SLBgplsTopoSrv6SidStruct::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locatorblocklen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arglen_) -
    reinterpret_cast<char*>(&locatorblocklen_)) + sizeof(arglen_));
}

SLBgplsTopoSrv6SidStruct::~SLBgplsTopoSrv6SidStruct() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrv6SidStruct)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrv6SidStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrv6SidStruct::ArenaDtor(void* object) {
  SLBgplsTopoSrv6SidStruct* _this = reinterpret_cast< SLBgplsTopoSrv6SidStruct* >(object);
  (void)_this;
}
void SLBgplsTopoSrv6SidStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrv6SidStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrv6SidStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrv6SidStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&locatorblocklen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arglen_) -
      reinterpret_cast<char*>(&locatorblocklen_)) + sizeof(arglen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrv6SidStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocatorBlockLen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          locatorblocklen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LocatorNodeLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          locatornodelen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FunctionLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          functionlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ArgLen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          arglen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrv6SidStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrv6SidStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocatorBlockLen = 1;
  if (this->_internal_locatorblocklen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_locatorblocklen(), target);
  }

  // uint32 LocatorNodeLen = 2;
  if (this->_internal_locatornodelen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locatornodelen(), target);
  }

  // uint32 FunctionLen = 3;
  if (this->_internal_functionlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_functionlen(), target);
  }

  // uint32 ArgLen = 4;
  if (this->_internal_arglen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_arglen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrv6SidStruct)
  return target;
}

size_t SLBgplsTopoSrv6SidStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrv6SidStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 LocatorBlockLen = 1;
  if (this->_internal_locatorblocklen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_locatorblocklen());
  }

  // uint32 LocatorNodeLen = 2;
  if (this->_internal_locatornodelen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_locatornodelen());
  }

  // uint32 FunctionLen = 3;
  if (this->_internal_functionlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_functionlen());
  }

  // uint32 ArgLen = 4;
  if (this->_internal_arglen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_arglen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrv6SidStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrv6SidStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrv6SidStruct::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrv6SidStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrv6SidStruct *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrv6SidStruct &>(from));
}


void SLBgplsTopoSrv6SidStruct::MergeFrom(const SLBgplsTopoSrv6SidStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrv6SidStruct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_locatorblocklen() != 0) {
    _internal_set_locatorblocklen(from._internal_locatorblocklen());
  }
  if (from._internal_locatornodelen() != 0) {
    _internal_set_locatornodelen(from._internal_locatornodelen());
  }
  if (from._internal_functionlen() != 0) {
    _internal_set_functionlen(from._internal_functionlen());
  }
  if (from._internal_arglen() != 0) {
    _internal_set_arglen(from._internal_arglen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrv6SidStruct::CopyFrom(const SLBgplsTopoSrv6SidStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrv6SidStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrv6SidStruct::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrv6SidStruct::InternalSwap(SLBgplsTopoSrv6SidStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6SidStruct, arglen_)
      + sizeof(SLBgplsTopoSrv6SidStruct::arglen_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrv6SidStruct, locatorblocklen_)>(
          reinterpret_cast<char*>(&locatorblocklen_),
          reinterpret_cast<char*>(&other->locatorblocklen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrv6SidStruct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[105]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoGetUpdMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoGetUpdMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoGetUpdMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNlriFilter* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNlriFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNlriFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUpdMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUpdMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUpdMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoErrorStatus* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoErrorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoErrorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUpd* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUpd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUpd >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoEntry* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNlri* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNlri >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNlri >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNode* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNode >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLink* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLink >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefix* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6Sid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6Sid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6Sid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrPolicy* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6SidDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6SidDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6SidDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrPolicyDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrPolicyDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoOspfNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoOspfNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoOspfNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoOspfv3NodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoOspfv3NodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoOspfv3NodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoIsisNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoIsisNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoIsisNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoBgpNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoBgpNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoBgpNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrPolicyNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrPolicyNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrPolicyFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrPolicyFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6SidAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6SidAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6SidAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrPolicyAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrPolicyAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBplsTopoLinkLocRemId* Arena::CreateMaybeMessage< ::service_layer::SLBplsTopoLinkLocRemId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBplsTopoLinkLocRemId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoMtId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoMtId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoMtId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeMsd* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeMsd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeMsd >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMsd* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMsd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMsd >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeFlagBits* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeFlagBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeFlagBits >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeOpaqueAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeOpaqueAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeOpaqueAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsNodeName* Arena::CreateMaybeMessage< ::service_layer::SLBgplsNodeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsNodeName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoIsisAreaId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoIsisAreaId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoIsisAreaId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLocalIpv4RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLocalIpv4RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLocalIpv4RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLocalIpv6RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLocalIpv6RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLocalIpv6RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoRemoteIpv4RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoRemoteIpv6RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrgb* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrgb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrgb >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrgbIsisFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrgbIsisFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrgbIsisFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrAlgorithm* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrAlgorithm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrAlgorithm >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrlb* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrlb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrlb >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoFad* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoFad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoFad >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixFAPM* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixFAPM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixFAPM >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoFadUnsuppTlv* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoFadUnsuppTlv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoFadUnsuppTlv >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoExtAdminGroup* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoExtAdminGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoExtAdminGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMaxBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMaxBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMaxBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMaxResvBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMaxResvBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkUnresvBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkTeDefaultMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkTeDefaultMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkTeDefaultMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkProtecionType* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkProtecionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkProtecionType >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMplsProtoMask* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMplsProtoMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMplsProtoMask >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkIgpMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkIgpMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkIgpMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkSrlg* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkSrlg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkSrlg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkOpaqueAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkOpaqueAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkOpaqueAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkName* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoAdjSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoAdjSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoAdjSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLanAdjSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLanAdjSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLanAdjSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6EndXSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6EndXSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6EndXSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpLsTopoNeighborId* Arena::CreateMaybeMessage< ::service_layer::SLBgpLsTopoNeighborId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpLsTopoNeighborId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6LanEndXSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6LanEndXSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6LanEndXSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniLinkDelay* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniLinkDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniLinkDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoMinMaxUniLinkDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoMinMaxUniLinkDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniDelayVar* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniDelayVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniDelayVar >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniLinkLoss* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniLinkLoss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniLinkLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniResBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniResBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniResBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniAvailBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniAvailBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniAvailBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniUtilBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniUtilBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniUtilBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixIgpFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixIgpFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixIgpFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixIgpRouteTag* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixOspfFwdAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixOspfFwdAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixOpaqueAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixOpaqueAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixOpaqueAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixRange* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixRange >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixSrv6Loc* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixSrv6Loc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixSrv6Loc >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixAttrFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixAttrFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixAttrFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixSrcRouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixSrcRouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixSrcRouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoL2BundleMemberAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoL2BundleMemberAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoL2BundleMemberAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoAslaAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoAslaAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoAslaAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SlBgplsTopoSrBsid* Arena::CreateMaybeMessage< ::service_layer::SlBgplsTopoSrBsid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SlBgplsTopoSrBsid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrBindingSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrBindingSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrBindingSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrCpState* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrCpState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrCpState >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrCpName* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrCpName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrCpName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrCpConstraints* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrCpConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrCpConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrSegList* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrSegList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrSegList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrSegmentDesc* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrSegmentDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrSegmentDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrSegment* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsSrSegListMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsSrSegListMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsSrSegListMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrAffinityConstraints* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrAffinityConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrAffinityConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrSrlgConstraints* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrSrlgConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrSrlgConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrBandwidthConstraint* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrBandwidthConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrBandwidthConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrDisjointGroupConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrDisjointGroupConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6BindingSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6BindingSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6BindingSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrPolicyName* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrPolicyName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrBidirGroupConstraint* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrBidirGroupConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrBidirGroupConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrMetricConstraint* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrMetricConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrMetricConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrCpSegListBandwidthState* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrCpSegListBandwidthState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrCpSegListBandwidthState >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrSegListId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrSegListId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrSegListId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6EndPointBehavior* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6EndPointBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6EndPointBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrv6SidStruct* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6SidStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrv6SidStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
