// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bgpls_topology.proto

#include "sl_bgpls_topology.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLBgplsTopoNotifReqMsg::SLBgplsTopoNotifReqMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_(){}
struct SLBgplsTopoNotifReqMsgDefaultTypeInternal {
  constexpr SLBgplsTopoNotifReqMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNotifReqMsgDefaultTypeInternal() {}
  union {
    SLBgplsTopoNotifReqMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNotifReqMsgDefaultTypeInternal _SLBgplsTopoNotifReqMsg_default_instance_;
constexpr SLBgplsTopoNlriMatch::SLBgplsTopoNlriMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instanceid_(nullptr)
  , protocol_(0)

  , nlritype_(0)
{}
struct SLBgplsTopoNlriMatchDefaultTypeInternal {
  constexpr SLBgplsTopoNlriMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNlriMatchDefaultTypeInternal() {}
  union {
    SLBgplsTopoNlriMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNlriMatchDefaultTypeInternal _SLBgplsTopoNlriMatch_default_instance_;
constexpr SLBgplsTopoNotifMsg::SLBgplsTopoNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLBgplsTopoNotifMsgDefaultTypeInternal {
  constexpr SLBgplsTopoNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNotifMsgDefaultTypeInternal() {}
  union {
    SLBgplsTopoNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNotifMsgDefaultTypeInternal _SLBgplsTopoNotifMsg_default_instance_;
constexpr SLBgplsTopoStartMarker::SLBgplsTopoStartMarker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLBgplsTopoStartMarkerDefaultTypeInternal {
  constexpr SLBgplsTopoStartMarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoStartMarkerDefaultTypeInternal() {}
  union {
    SLBgplsTopoStartMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoStartMarkerDefaultTypeInternal _SLBgplsTopoStartMarker_default_instance_;
constexpr SLBgplsTopoEndMarker::SLBgplsTopoEndMarker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLBgplsTopoEndMarkerDefaultTypeInternal {
  constexpr SLBgplsTopoEndMarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoEndMarkerDefaultTypeInternal() {}
  union {
    SLBgplsTopoEndMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoEndMarkerDefaultTypeInternal _SLBgplsTopoEndMarker_default_instance_;
constexpr SLBgplsTopoNotif::SLBgplsTopoNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct SLBgplsTopoNotifDefaultTypeInternal {
  constexpr SLBgplsTopoNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNotifDefaultTypeInternal() {}
  union {
    SLBgplsTopoNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNotifDefaultTypeInternal _SLBgplsTopoNotif_default_instance_;
constexpr SLBgplsTopoEntry::SLBgplsTopoEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , operation_(0)
{}
struct SLBgplsTopoEntryDefaultTypeInternal {
  constexpr SLBgplsTopoEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoEntryDefaultTypeInternal() {}
  union {
    SLBgplsTopoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoEntryDefaultTypeInternal _SLBgplsTopoEntry_default_instance_;
constexpr SLBgplsTopoData::SLBgplsTopoData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instanceid_(nullptr)
  , protocol_(0)

  , _oneof_case_{}{}
struct SLBgplsTopoDataDefaultTypeInternal {
  constexpr SLBgplsTopoDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoDataDefaultTypeInternal() {}
  union {
    SLBgplsTopoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoDataDefaultTypeInternal _SLBgplsTopoData_default_instance_;
constexpr SLBgplsTopoInstanceId::SLBgplsTopoInstanceId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(uint64_t{0u}){}
struct SLBgplsTopoInstanceIdDefaultTypeInternal {
  constexpr SLBgplsTopoInstanceIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoInstanceIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoInstanceId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoInstanceIdDefaultTypeInternal _SLBgplsTopoInstanceId_default_instance_;
constexpr SLBgplsTopoNodeData::SLBgplsTopoNodeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(nullptr)
  , nodeattr_(nullptr){}
struct SLBgplsTopoNodeDataDefaultTypeInternal {
  constexpr SLBgplsTopoNodeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeDataDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeDataDefaultTypeInternal _SLBgplsTopoNodeData_default_instance_;
constexpr SLBgplsTopoLinkData::SLBgplsTopoLinkData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_(nullptr)
  , linkattr_(nullptr){}
struct SLBgplsTopoLinkDataDefaultTypeInternal {
  constexpr SLBgplsTopoLinkDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkDataDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkDataDefaultTypeInternal _SLBgplsTopoLinkData_default_instance_;
constexpr SLBgplsTopoPrefixData::SLBgplsTopoPrefixData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefix_(nullptr)
  , prefixattr_(nullptr){}
struct SLBgplsTopoPrefixDataDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixDataDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixDataDefaultTypeInternal _SLBgplsTopoPrefixData_default_instance_;
constexpr SLBgplsTopoNode::SLBgplsTopoNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asn_(0u)
  , _oneof_case_{}{}
struct SLBgplsTopoNodeDefaultTypeInternal {
  constexpr SLBgplsTopoNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeDefaultTypeInternal() {}
  union {
    SLBgplsTopoNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeDefaultTypeInternal _SLBgplsTopoNode_default_instance_;
constexpr SLBgplsTopoLink::SLBgplsTopoLink(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localnodedescr_(nullptr)
  , remotenodedescr_(nullptr)
  , linkdescr_(nullptr){}
struct SLBgplsTopoLinkDefaultTypeInternal {
  constexpr SLBgplsTopoLinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkDefaultTypeInternal() {}
  union {
    SLBgplsTopoLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkDefaultTypeInternal _SLBgplsTopoLink_default_instance_;
constexpr SLBgplsTopoPrefix::SLBgplsTopoPrefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodedescr_(nullptr)
  , prefixdescr_(nullptr){}
struct SLBgplsTopoPrefixDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixDefaultTypeInternal _SLBgplsTopoPrefix_default_instance_;
constexpr SLBgplsTopoLinkDescr::SLBgplsTopoLinkDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localipv4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remoteipv4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remoteipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtid_(nullptr)
  , localid_(0u)
  , remoteid_(0u){}
struct SLBgplsTopoLinkDescrDefaultTypeInternal {
  constexpr SLBgplsTopoLinkDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkDescrDefaultTypeInternal _SLBgplsTopoLinkDescr_default_instance_;
constexpr SLBgplsTopoPrefixDescr::SLBgplsTopoPrefixDescr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtid_(nullptr)
  , ospfroutetype_(0)

  , prefixlength_(0u){}
struct SLBgplsTopoPrefixDescrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixDescrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixDescrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixDescr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixDescrDefaultTypeInternal _SLBgplsTopoPrefixDescr_default_instance_;
constexpr SLBgplsTopoOspfNodeId::SLBgplsTopoOspfNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dridentifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , areaid_(0u)
  , isasscoped_(0u){}
struct SLBgplsTopoOspfNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoOspfNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoOspfNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoOspfNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoOspfNodeIdDefaultTypeInternal _SLBgplsTopoOspfNodeId_default_instance_;
constexpr SLBgplsTopoOspfv3NodeId::SLBgplsTopoOspfv3NodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , areaid_(0u)
  , asscoped_(0u)
  , dridentifier_(0u){}
struct SLBgplsTopoOspfv3NodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoOspfv3NodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoOspfv3NodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoOspfv3NodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoOspfv3NodeIdDefaultTypeInternal _SLBgplsTopoOspfv3NodeId_default_instance_;
constexpr SLBgplsTopoIsisNodeId::SLBgplsTopoIsisNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : systemid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , psnid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoIsisNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoIsisNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoIsisNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoIsisNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoIsisNodeIdDefaultTypeInternal _SLBgplsTopoIsisNodeId_default_instance_;
constexpr SLBgplsTopoBgpNodeId::SLBgplsTopoBgpNodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memberasn_(0u){}
struct SLBgplsTopoBgpNodeIdDefaultTypeInternal {
  constexpr SLBgplsTopoBgpNodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoBgpNodeIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoBgpNodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoBgpNodeIdDefaultTypeInternal _SLBgplsTopoBgpNodeId_default_instance_;
constexpr SLBgplsTopoNodeAttr::SLBgplsTopoNodeAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mtid_()
  , nodemsd_()
  , isisareaid_()
  , localipv4_()
  , localipv6_()
  , srgb_()
  , srlb_()
  , fad_()
  , unknownattr_()
  , nodeflagbits_(nullptr)
  , opaquenodeattr_(nullptr)
  , nodename_(nullptr)
  , srgbisisflags_(nullptr)
  , sralgorithm_(nullptr){}
struct SLBgplsTopoNodeAttrDefaultTypeInternal {
  constexpr SLBgplsTopoNodeAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeAttrDefaultTypeInternal _SLBgplsTopoNodeAttr_default_instance_;
constexpr SLBgplsTopoLinkAttr::SLBgplsTopoLinkAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linkmsd_()
  , localipv4routerid_()
  , localipv6routerid_()
  , remoteipv4routerid_()
  , remoteipv6routerid_()
  , unresvbandwidth_()
  , srlg_()
  , adjsid_()
  , lanadjsid_()
  , bgppeernodesid_()
  , bgppeeradjsid_()
  , bgppeersetsid_()
  , asla_()
  , l2bundlememberattr_()
  , extadmingroup_()
  , unknownattr_()
  , linklocremid_(nullptr)
  , admingroup_(nullptr)
  , maxbandwidth_(nullptr)
  , maxresvbandwidth_(nullptr)
  , tedefmetric_(nullptr)
  , protectiontype_(nullptr)
  , mplsprotomask_(nullptr)
  , igpmetric_(nullptr)
  , opaqueattr_(nullptr)
  , linkname_(nullptr)
  , unilinkdelay_(nullptr)
  , minmaxunilinkdelay_(nullptr)
  , unidelayvar_(nullptr)
  , unilinkloss_(nullptr)
  , uniresbandwidth_(nullptr)
  , uniavailbandwidth_(nullptr)
  , uniutilbandwidth_(nullptr){}
struct SLBgplsTopoLinkAttrDefaultTypeInternal {
  constexpr SLBgplsTopoLinkAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkAttrDefaultTypeInternal _SLBgplsTopoLinkAttr_default_instance_;
constexpr SLBgplsTopoPrefixAttr::SLBgplsTopoPrefixAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fapm_()
  , igproutetag_()
  , igpextroutetag_()
  , sid_()
  , unknownattr_()
  , igpflags_(nullptr)
  , metric_(nullptr)
  , ospffwdaddr_(nullptr)
  , opaqueattr_(nullptr)
  , range_(nullptr)
  , attrflags_(nullptr)
  , srcrouterid_(nullptr){}
struct SLBgplsTopoPrefixAttrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixAttrDefaultTypeInternal _SLBgplsTopoPrefixAttr_default_instance_;
constexpr SLBplsTopoLinkLocRemId::SLBplsTopoLinkLocRemId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localid_(0u)
  , remoteid_(0u){}
struct SLBplsTopoLinkLocRemIdDefaultTypeInternal {
  constexpr SLBplsTopoLinkLocRemIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBplsTopoLinkLocRemIdDefaultTypeInternal() {}
  union {
    SLBplsTopoLinkLocRemId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBplsTopoLinkLocRemIdDefaultTypeInternal _SLBplsTopoLinkLocRemId_default_instance_;
constexpr SLBgplsTopoMtId::SLBgplsTopoMtId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mtid_(0u){}
struct SLBgplsTopoMtIdDefaultTypeInternal {
  constexpr SLBgplsTopoMtIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoMtIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoMtId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoMtIdDefaultTypeInternal _SLBgplsTopoMtId_default_instance_;
constexpr SLBgplsTopoNodeMsd::SLBgplsTopoNodeMsd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , value_(0u){}
struct SLBgplsTopoNodeMsdDefaultTypeInternal {
  constexpr SLBgplsTopoNodeMsdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeMsdDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeMsd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeMsdDefaultTypeInternal _SLBgplsTopoNodeMsd_default_instance_;
constexpr SLBgplsTopoLinkMsd::SLBgplsTopoLinkMsd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , value_(0u){}
struct SLBgplsTopoLinkMsdDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMsdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMsdDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMsd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMsdDefaultTypeInternal _SLBgplsTopoLinkMsd_default_instance_;
constexpr SLBgplsTopoNodeFlagBits::SLBgplsTopoNodeFlagBits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoNodeFlagBitsDefaultTypeInternal {
  constexpr SLBgplsTopoNodeFlagBitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeFlagBitsDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeFlagBits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeFlagBitsDefaultTypeInternal _SLBgplsTopoNodeFlagBits_default_instance_;
constexpr SLBgplsTopoNodeOpaqueAttr::SLBgplsTopoNodeOpaqueAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaqueattr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal {
  constexpr SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoNodeOpaqueAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal _SLBgplsTopoNodeOpaqueAttr_default_instance_;
constexpr SLBgplsNodeName::SLBgplsNodeName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsNodeNameDefaultTypeInternal {
  constexpr SLBgplsNodeNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsNodeNameDefaultTypeInternal() {}
  union {
    SLBgplsNodeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsNodeNameDefaultTypeInternal _SLBgplsNodeName_default_instance_;
constexpr SLBgplsTopoIsisAreaId::SLBgplsTopoIsisAreaId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : areaid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoIsisAreaIdDefaultTypeInternal {
  constexpr SLBgplsTopoIsisAreaIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoIsisAreaIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoIsisAreaId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoIsisAreaIdDefaultTypeInternal _SLBgplsTopoIsisAreaId_default_instance_;
constexpr SLBgplsTopoLocalIpv4RouterId::SLBgplsTopoLocalIpv4RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoLocalIpv4RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal _SLBgplsTopoLocalIpv4RouterId_default_instance_;
constexpr SLBgplsTopoLocalIpv6RouterId::SLBgplsTopoLocalIpv6RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoLocalIpv6RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal _SLBgplsTopoLocalIpv6RouterId_default_instance_;
constexpr SLBgplsTopoRemoteIpv4RouterId::SLBgplsTopoRemoteIpv4RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoRemoteIpv4RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal _SLBgplsTopoRemoteIpv4RouterId_default_instance_;
constexpr SLBgplsTopoRemoteIpv6RouterId::SLBgplsTopoRemoteIpv6RouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoRemoteIpv6RouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal _SLBgplsTopoRemoteIpv6RouterId_default_instance_;
constexpr SLBgplsTopoSrgb::SLBgplsTopoSrgb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startlabel_(0u)
  , rangesize_(0u){}
struct SLBgplsTopoSrgbDefaultTypeInternal {
  constexpr SLBgplsTopoSrgbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrgbDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrgb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrgbDefaultTypeInternal _SLBgplsTopoSrgb_default_instance_;
constexpr SLBgplsTopoSrgbIsisFlags::SLBgplsTopoSrgbIsisFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrgbIsisFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal _SLBgplsTopoSrgbIsisFlags_default_instance_;
constexpr SLBgplsTopoSrAlgorithm::SLBgplsTopoSrAlgorithm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : algorithms_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoSrAlgorithmDefaultTypeInternal {
  constexpr SLBgplsTopoSrAlgorithmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrAlgorithmDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrAlgorithm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrAlgorithmDefaultTypeInternal _SLBgplsTopoSrAlgorithm_default_instance_;
constexpr SLBgplsTopoSrlb::SLBgplsTopoSrlb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startlabel_(0u)
  , rangesize_(0u){}
struct SLBgplsTopoSrlbDefaultTypeInternal {
  constexpr SLBgplsTopoSrlbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoSrlbDefaultTypeInternal() {}
  union {
    SLBgplsTopoSrlb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoSrlbDefaultTypeInternal _SLBgplsTopoSrlb_default_instance_;
constexpr SLBgplsTopoFad::SLBgplsTopoFad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : excanyaff_()
  , _excanyaff_cached_byte_size_(0)
  , incanyaff_()
  , _incanyaff_cached_byte_size_(0)
  , incallaff_()
  , _incallaff_cached_byte_size_(0)
  , excsrlg_()
  , _excsrlg_cached_byte_size_(0)
  , excanyrevaff_()
  , _excanyrevaff_cached_byte_size_(0)
  , incanyrevaff_()
  , _incanyrevaff_cached_byte_size_(0)
  , incallrevaff_()
  , _incallrevaff_cached_byte_size_(0)
  , algorithm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metrictype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , calctype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , excminbw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unsupptlv_(nullptr)
  , excmaxdelay_(0u){}
struct SLBgplsTopoFadDefaultTypeInternal {
  constexpr SLBgplsTopoFadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoFadDefaultTypeInternal() {}
  union {
    SLBgplsTopoFad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoFadDefaultTypeInternal _SLBgplsTopoFad_default_instance_;
constexpr SLBgplsTopoPrefixFAPM::SLBgplsTopoPrefixFAPM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flexalgo_(0u)
  , metric_(0u){}
struct SLBgplsTopoPrefixFAPMDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixFAPMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixFAPMDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixFAPM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixFAPMDefaultTypeInternal _SLBgplsTopoPrefixFAPM_default_instance_;
constexpr SLBgplsTopoFadUnsuppTlv::SLBgplsTopoFadUnsuppTlv(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(0)
{}
struct SLBgplsTopoFadUnsuppTlvDefaultTypeInternal {
  constexpr SLBgplsTopoFadUnsuppTlvDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoFadUnsuppTlvDefaultTypeInternal() {}
  union {
    SLBgplsTopoFadUnsuppTlv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoFadUnsuppTlvDefaultTypeInternal _SLBgplsTopoFadUnsuppTlv_default_instance_;
constexpr SLBgplsTopoAdminGroup::SLBgplsTopoAdminGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(0u){}
struct SLBgplsTopoAdminGroupDefaultTypeInternal {
  constexpr SLBgplsTopoAdminGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoAdminGroupDefaultTypeInternal() {}
  union {
    SLBgplsTopoAdminGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoAdminGroupDefaultTypeInternal _SLBgplsTopoAdminGroup_default_instance_;
constexpr SLBgplsTopoLinkMaxBandwidth::SLBgplsTopoLinkMaxBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMaxBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal _SLBgplsTopoLinkMaxBandwidth_default_instance_;
constexpr SLBgplsTopoLinkMaxResvBandwidth::SLBgplsTopoLinkMaxResvBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMaxResvBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal _SLBgplsTopoLinkMaxResvBandwidth_default_instance_;
constexpr SLBgplsTopoLinkUnresvBandwidth::SLBgplsTopoLinkUnresvBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(0u){}
struct SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkUnresvBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal _SLBgplsTopoLinkUnresvBandwidth_default_instance_;
constexpr SLBgplsTopoLinkTeDefaultMetric::SLBgplsTopoLinkTeDefaultMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_(0u){}
struct SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal {
  constexpr SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkTeDefaultMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal _SLBgplsTopoLinkTeDefaultMetric_default_instance_;
constexpr SLBgplsTopoLinkProtectionType::SLBgplsTopoLinkProtectionType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mask_(0u){}
struct SLBgplsTopoLinkProtectionTypeDefaultTypeInternal {
  constexpr SLBgplsTopoLinkProtectionTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkProtectionTypeDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkProtectionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkProtectionTypeDefaultTypeInternal _SLBgplsTopoLinkProtectionType_default_instance_;
constexpr SLBgplsTopoLinkMplsProtoMask::SLBgplsTopoLinkMplsProtoMask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal {
  constexpr SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkMplsProtoMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal _SLBgplsTopoLinkMplsProtoMask_default_instance_;
constexpr SLBgplsTopoLinkIgpMetric::SLBgplsTopoLinkIgpMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkIgpMetricDefaultTypeInternal {
  constexpr SLBgplsTopoLinkIgpMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkIgpMetricDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkIgpMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkIgpMetricDefaultTypeInternal _SLBgplsTopoLinkIgpMetric_default_instance_;
constexpr SLBgplsTopoLinkSrlg::SLBgplsTopoLinkSrlg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srlgval_(0u){}
struct SLBgplsTopoLinkSrlgDefaultTypeInternal {
  constexpr SLBgplsTopoLinkSrlgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkSrlgDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkSrlg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkSrlgDefaultTypeInternal _SLBgplsTopoLinkSrlg_default_instance_;
constexpr SLBgplsTopoLinkOpaqueAttr::SLBgplsTopoLinkOpaqueAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaqueattr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal {
  constexpr SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkOpaqueAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal _SLBgplsTopoLinkOpaqueAttr_default_instance_;
constexpr SLBgplsTopoLinkName::SLBgplsTopoLinkName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoLinkNameDefaultTypeInternal {
  constexpr SLBgplsTopoLinkNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLinkNameDefaultTypeInternal() {}
  union {
    SLBgplsTopoLinkName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLinkNameDefaultTypeInternal _SLBgplsTopoLinkName_default_instance_;
constexpr SLBgplsTopoAdjSid::SLBgplsTopoAdjSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , labelindex_(0u)
  , adjsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoAdjSidDefaultTypeInternal {
  constexpr SLBgplsTopoAdjSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoAdjSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoAdjSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoAdjSidDefaultTypeInternal _SLBgplsTopoAdjSid_default_instance_;
constexpr SLBgplsTopoLanAdjSid::SLBgplsTopoLanAdjSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , neighbor_(nullptr)
  , labelindex_(0u)
  , adjsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoLanAdjSidDefaultTypeInternal {
  constexpr SLBgplsTopoLanAdjSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoLanAdjSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoLanAdjSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoLanAdjSidDefaultTypeInternal _SLBgplsTopoLanAdjSid_default_instance_;
constexpr SLBgplsTopoBgpPeerNodeSid::SLBgplsTopoBgpPeerNodeSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgpsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoBgpPeerNodeSidDefaultTypeInternal {
  constexpr SLBgplsTopoBgpPeerNodeSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoBgpPeerNodeSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoBgpPeerNodeSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoBgpPeerNodeSidDefaultTypeInternal _SLBgplsTopoBgpPeerNodeSid_default_instance_;
constexpr SLBgplsTopoBgpPeerAdjSid::SLBgplsTopoBgpPeerAdjSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgpsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoBgpPeerAdjSidDefaultTypeInternal {
  constexpr SLBgplsTopoBgpPeerAdjSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoBgpPeerAdjSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoBgpPeerAdjSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoBgpPeerAdjSidDefaultTypeInternal _SLBgplsTopoBgpPeerAdjSid_default_instance_;
constexpr SLBgplsTopoBgpPeerSetSid::SLBgplsTopoBgpPeerSetSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgpsidformat_(0)

  , weight_(0u){}
struct SLBgplsTopoBgpPeerSetSidDefaultTypeInternal {
  constexpr SLBgplsTopoBgpPeerSetSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoBgpPeerSetSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoBgpPeerSetSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoBgpPeerSetSidDefaultTypeInternal _SLBgplsTopoBgpPeerSetSid_default_instance_;
constexpr SLBgpLsTopoNeighborId::SLBgpLsTopoNeighborId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLBgpLsTopoNeighborIdDefaultTypeInternal {
  constexpr SLBgpLsTopoNeighborIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgpLsTopoNeighborIdDefaultTypeInternal() {}
  union {
    SLBgpLsTopoNeighborId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgpLsTopoNeighborIdDefaultTypeInternal _SLBgpLsTopoNeighborId_default_instance_;
constexpr SLBgplsTopoUniLinkDelay::SLBgplsTopoUniLinkDelay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delay_(0u){}
struct SLBgplsTopoUniLinkDelayDefaultTypeInternal {
  constexpr SLBgplsTopoUniLinkDelayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniLinkDelayDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniLinkDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniLinkDelayDefaultTypeInternal _SLBgplsTopoUniLinkDelay_default_instance_;
constexpr SLBgplsTopoMinMaxUniLinkDelay::SLBgplsTopoMinMaxUniLinkDelay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_(0u)
  , max_(0u){}
struct SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal {
  constexpr SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal() {}
  union {
    SLBgplsTopoMinMaxUniLinkDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal _SLBgplsTopoMinMaxUniLinkDelay_default_instance_;
constexpr SLBgplsTopoUniDelayVar::SLBgplsTopoUniDelayVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , variation_(0u){}
struct SLBgplsTopoUniDelayVarDefaultTypeInternal {
  constexpr SLBgplsTopoUniDelayVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniDelayVarDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniDelayVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniDelayVarDefaultTypeInternal _SLBgplsTopoUniDelayVar_default_instance_;
constexpr SLBgplsTopoUniLinkLoss::SLBgplsTopoUniLinkLoss(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loss_(0u){}
struct SLBgplsTopoUniLinkLossDefaultTypeInternal {
  constexpr SLBgplsTopoUniLinkLossDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniLinkLossDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniLinkLoss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniLinkLossDefaultTypeInternal _SLBgplsTopoUniLinkLoss_default_instance_;
constexpr SLBgplsTopoUniResBandwidth::SLBgplsTopoUniResBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoUniResBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoUniResBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniResBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniResBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniResBandwidthDefaultTypeInternal _SLBgplsTopoUniResBandwidth_default_instance_;
constexpr SLBgplsTopoUniAvailBandwidth::SLBgplsTopoUniAvailBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoUniAvailBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoUniAvailBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniAvailBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniAvailBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniAvailBandwidthDefaultTypeInternal _SLBgplsTopoUniAvailBandwidth_default_instance_;
constexpr SLBgplsTopoUniUtilBandwidth::SLBgplsTopoUniUtilBandwidth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bandwidth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoUniUtilBandwidthDefaultTypeInternal {
  constexpr SLBgplsTopoUniUtilBandwidthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUniUtilBandwidthDefaultTypeInternal() {}
  union {
    SLBgplsTopoUniUtilBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUniUtilBandwidthDefaultTypeInternal _SLBgplsTopoUniUtilBandwidth_default_instance_;
constexpr SLBgplsTopoAslaAttr::SLBgplsTopoAslaAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srlg_()
  , extadmingroup_()
  , unknownattr_()
  , sabm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , udabm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , admingroup_(nullptr)
  , tedefmetric_(nullptr)
  , unilinkdelay_(nullptr)
  , minmaxlinkdelay_(nullptr)
  , unidelayvariation_(nullptr)
  , unilinkloss_(nullptr)
  , uniresbandwidth_(nullptr)
  , uniavailbandwidth_(nullptr)
  , uniutilbandwidth_(nullptr){}
struct SLBgplsTopoAslaAttrDefaultTypeInternal {
  constexpr SLBgplsTopoAslaAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoAslaAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoAslaAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoAslaAttrDefaultTypeInternal _SLBgplsTopoAslaAttr_default_instance_;
constexpr SLBgplsTopoPrefixIgpFlags::SLBgplsTopoPrefixIgpFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixIgpFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal _SLBgplsTopoPrefixIgpFlags_default_instance_;
constexpr SLBgplsTopoPrefixIgpRouteTag::SLBgplsTopoPrefixIgpRouteTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(0u){}
struct SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixIgpRouteTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal _SLBgplsTopoPrefixIgpRouteTag_default_instance_;
constexpr SLBgplsTopoPrefixIgpExtRouteTag::SLBgplsTopoPrefixIgpExtRouteTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(uint64_t{0u}){}
struct SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixIgpExtRouteTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal _SLBgplsTopoPrefixIgpExtRouteTag_default_instance_;
constexpr SLBgplsTopoPrefixMetric::SLBgplsTopoPrefixMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_(0u){}
struct SLBgplsTopoPrefixMetricDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixMetricDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixMetricDefaultTypeInternal _SLBgplsTopoPrefixMetric_default_instance_;
constexpr SLBgplsTopoPrefixOspfFwdAddr::SLBgplsTopoPrefixOspfFwdAddr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixOspfFwdAddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal _SLBgplsTopoPrefixOspfFwdAddr_default_instance_;
constexpr SLBgplsTopoPrefixOpaqueAttr::SLBgplsTopoPrefixOpaqueAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaqueattr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixOpaqueAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal _SLBgplsTopoPrefixOpaqueAttr_default_instance_;
constexpr SLBgplsTopoPrefixSid::SLBgplsTopoPrefixSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , algorithm_(0u)
  , labelindex_(0u)
  , prefixsidformat_(0)
{}
struct SLBgplsTopoPrefixSidDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixSidDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixSidDefaultTypeInternal _SLBgplsTopoPrefixSid_default_instance_;
constexpr SLBgplsTopoPrefixRange::SLBgplsTopoPrefixRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sidflags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rangesize_(0u)
  , algorithm_(0u)
  , index_(0u){}
struct SLBgplsTopoPrefixRangeDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixRangeDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixRangeDefaultTypeInternal _SLBgplsTopoPrefixRange_default_instance_;
constexpr SLBgplsTopoPrefixAttrFlags::SLBgplsTopoPrefixAttrFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixAttrFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal _SLBgplsTopoPrefixAttrFlags_default_instance_;
constexpr SLBgplsTopoPrefixSrcRouterId::SLBgplsTopoPrefixSrcRouterId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal {
  constexpr SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal() {}
  union {
    SLBgplsTopoPrefixSrcRouterId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal _SLBgplsTopoPrefixSrcRouterId_default_instance_;
constexpr SLBgplsTopoL2BundleMemberAttr::SLBgplsTopoL2BundleMemberAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unresvbandwidth_()
  , adjsid_()
  , lanadjsid_()
  , asla_()
  , extadmingroup_()
  , unknownattr_()
  , admingroup_(nullptr)
  , maxbandwidth_(nullptr)
  , maxresvbandwidth_(nullptr)
  , tedefmetric_(nullptr)
  , protectiontype_(nullptr)
  , unilinkdelay_(nullptr)
  , minmaxlinkdelay_(nullptr)
  , unidelayvariation_(nullptr)
  , unilinkloss_(nullptr)
  , uniresbandwidth_(nullptr)
  , uniavailbandwidth_(nullptr)
  , uniutilbandwidth_(nullptr)
  , memberdesc_(0u){}
struct SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal {
  constexpr SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoL2BundleMemberAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal _SLBgplsTopoL2BundleMemberAttr_default_instance_;
constexpr SLBgplsTopoExtAdminGroup::SLBgplsTopoExtAdminGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(0u){}
struct SLBgplsTopoExtAdminGroupDefaultTypeInternal {
  constexpr SLBgplsTopoExtAdminGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoExtAdminGroupDefaultTypeInternal() {}
  union {
    SLBgplsTopoExtAdminGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoExtAdminGroupDefaultTypeInternal _SLBgplsTopoExtAdminGroup_default_instance_;
constexpr SLBgplsTopoUnknownAttr::SLBgplsTopoUnknownAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rawtlv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tlvtype_(0u)
  , tlvlen_(0u){}
struct SLBgplsTopoUnknownAttrDefaultTypeInternal {
  constexpr SLBgplsTopoUnknownAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBgplsTopoUnknownAttrDefaultTypeInternal() {}
  union {
    SLBgplsTopoUnknownAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBgplsTopoUnknownAttrDefaultTypeInternal _SLBgplsTopoUnknownAttr_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fbgpls_5ftopology_2eproto[81];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fbgpls_5ftopology_2eproto = nullptr;

const uint32_t TableStruct_sl_5fbgpls_5ftopology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotifReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotifReqMsg, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriMatch, instanceid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriMatch, protocol_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNlriMatch, nlritype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotifMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotifMsg, Event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoStartMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEndMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNotif, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, operation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoEntry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoData, instanceid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoData, protocol_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoData, Data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoInstanceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoInstanceId, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeData, node_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeData, nodeattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkData, link_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkData, linkattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixData, prefix_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixData, prefixattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNode, asn_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNode, NodeId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, localnodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, remotenodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLink, linkdescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefix, nodedescr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefix, prefixdescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, localid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, remoteid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, localipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, remoteipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, localipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, remoteipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkDescr, mtid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, ospfroutetype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, prefixlength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixDescr, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, areaid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, isasscoped_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfNodeId, dridentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, areaid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, asscoped_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoOspfv3NodeId, dridentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisNodeId, systemid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisNodeId, psnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpNodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpNodeId, routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpNodeId, memberasn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, mtid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, nodemsd_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, nodeflagbits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, opaquenodeattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, nodename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, isisareaid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, localipv4_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, localipv6_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, srgbisisflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, srgb_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, sralgorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, srlb_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, fad_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeAttr, unknownattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, linklocremid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, linkmsd_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, localipv4routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, localipv6routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, remoteipv4routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, remoteipv6routerid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, admingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, maxbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, maxresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, tedefmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, protectiontype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, mplsprotomask_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, igpmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, srlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, opaqueattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, linkname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, adjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, lanadjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, bgppeernodesid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, bgppeeradjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, bgppeersetsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, minmaxunilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unidelayvar_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unilinkloss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, uniresbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, uniavailbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, uniutilbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, asla_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, l2bundlememberattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, extadmingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkAttr, unknownattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, fapm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, igpflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, igproutetag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, igpextroutetag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, metric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, ospffwdaddr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, opaqueattr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, range_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, attrflags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, srcrouterid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttr, unknownattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBplsTopoLinkLocRemId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBplsTopoLinkLocRemId, localid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBplsTopoLinkLocRemId, remoteid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMtId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMtId, mtid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeMsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeMsd, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeMsd, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMsd, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMsd, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeFlagBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeFlagBits, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeOpaqueAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoNodeOpaqueAttr, opaqueattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsNodeName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsNodeName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisAreaId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoIsisAreaId, areaid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv4RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv4RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv6RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLocalIpv6RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv4RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv4RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv6RouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoRemoteIpv6RouterId, routerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgb, startlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgb, rangesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgbIsisFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrgbIsisFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAlgorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrAlgorithm, algorithms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrlb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrlb, startlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoSrlb, rangesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, metrictype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, calctype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, priority_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excanyaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incanyaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incallaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excsrlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, unsupptlv_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excminbw_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excmaxdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, excanyrevaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incanyrevaff_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFad, incallrevaff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, flexalgo_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixFAPM, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFadUnsuppTlv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFadUnsuppTlv, protocol_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoFadUnsuppTlv, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdminGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdminGroup, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxResvBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMaxResvBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkUnresvBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkUnresvBandwidth, priority_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkUnresvBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkTeDefaultMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkTeDefaultMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkProtectionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkProtectionType, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMplsProtoMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkMplsProtoMask, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkIgpMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkIgpMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkSrlg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkSrlg, srlgval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkOpaqueAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkOpaqueAttr, opaqueattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLinkName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, labelindex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, adjsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAdjSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, neighbor_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, labelindex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, adjsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoLanAdjSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerNodeSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerNodeSid, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerNodeSid, bgpsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerNodeSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerNodeSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerAdjSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerAdjSid, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerAdjSid, bgpsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerAdjSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerAdjSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerSetSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerSetSid, sid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerSetSid, bgpsidformat_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerSetSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoBgpPeerSetSid, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgpLsTopoNeighborId, NeighborId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkDelay, delay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkDelay, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, min_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, max_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoMinMaxUniLinkDelay, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniDelayVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniDelayVar, variation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniDelayVar, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkLoss, loss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniLinkLoss, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniResBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniResBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniAvailBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniAvailBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniUtilBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUniUtilBandwidth, bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, sabm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, udabm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, admingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, tedefmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, srlg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, minmaxlinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unidelayvariation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unilinkloss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, uniresbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, uniavailbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, uniutilbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, extadmingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoAslaAttr, unknownattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpRouteTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpRouteTag, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpExtRouteTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixIgpExtRouteTag, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOspfFwdAddr, OspfFwdAddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOpaqueAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixOpaqueAttr, opaqueattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, labelindex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSid, prefixsidformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, rangesize_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, index_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixRange, sidflags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttrFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixAttrFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoPrefixSrcRouterId, SrcRouterId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, memberdesc_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, admingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, maxbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, maxresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unresvbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, tedefmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, protectiontype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, adjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, lanadjsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unilinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, minmaxlinkdelay_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unidelayvariation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unilinkloss_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, uniresbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, uniavailbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, uniutilbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, asla_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, extadmingroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoL2BundleMemberAttr, unknownattr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoExtAdminGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoExtAdminGroup, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUnknownAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUnknownAttr, tlvtype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUnknownAttr, tlvlen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLBgplsTopoUnknownAttr, rawtlv_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLBgplsTopoNotifReqMsg)},
  { 7, -1, -1, sizeof(::service_layer::SLBgplsTopoNlriMatch)},
  { 16, -1, -1, sizeof(::service_layer::SLBgplsTopoNotifMsg)},
  { 27, -1, -1, sizeof(::service_layer::SLBgplsTopoStartMarker)},
  { 33, -1, -1, sizeof(::service_layer::SLBgplsTopoEndMarker)},
  { 39, -1, -1, sizeof(::service_layer::SLBgplsTopoNotif)},
  { 46, -1, -1, sizeof(::service_layer::SLBgplsTopoEntry)},
  { 54, -1, -1, sizeof(::service_layer::SLBgplsTopoData)},
  { 66, -1, -1, sizeof(::service_layer::SLBgplsTopoInstanceId)},
  { 73, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeData)},
  { 81, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkData)},
  { 89, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixData)},
  { 97, -1, -1, sizeof(::service_layer::SLBgplsTopoNode)},
  { 109, -1, -1, sizeof(::service_layer::SLBgplsTopoLink)},
  { 118, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefix)},
  { 126, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkDescr)},
  { 139, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixDescr)},
  { 149, -1, -1, sizeof(::service_layer::SLBgplsTopoOspfNodeId)},
  { 159, -1, -1, sizeof(::service_layer::SLBgplsTopoOspfv3NodeId)},
  { 169, -1, -1, sizeof(::service_layer::SLBgplsTopoIsisNodeId)},
  { 177, -1, -1, sizeof(::service_layer::SLBgplsTopoBgpNodeId)},
  { 185, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeAttr)},
  { 205, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkAttr)},
  { 244, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixAttr)},
  { 262, -1, -1, sizeof(::service_layer::SLBplsTopoLinkLocRemId)},
  { 270, -1, -1, sizeof(::service_layer::SLBgplsTopoMtId)},
  { 277, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeMsd)},
  { 285, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMsd)},
  { 293, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeFlagBits)},
  { 300, -1, -1, sizeof(::service_layer::SLBgplsTopoNodeOpaqueAttr)},
  { 307, -1, -1, sizeof(::service_layer::SLBgplsNodeName)},
  { 314, -1, -1, sizeof(::service_layer::SLBgplsTopoIsisAreaId)},
  { 321, -1, -1, sizeof(::service_layer::SLBgplsTopoLocalIpv4RouterId)},
  { 328, -1, -1, sizeof(::service_layer::SLBgplsTopoLocalIpv6RouterId)},
  { 335, -1, -1, sizeof(::service_layer::SLBgplsTopoRemoteIpv4RouterId)},
  { 342, -1, -1, sizeof(::service_layer::SLBgplsTopoRemoteIpv6RouterId)},
  { 349, -1, -1, sizeof(::service_layer::SLBgplsTopoSrgb)},
  { 357, -1, -1, sizeof(::service_layer::SLBgplsTopoSrgbIsisFlags)},
  { 364, -1, -1, sizeof(::service_layer::SLBgplsTopoSrAlgorithm)},
  { 371, -1, -1, sizeof(::service_layer::SLBgplsTopoSrlb)},
  { 379, -1, -1, sizeof(::service_layer::SLBgplsTopoFad)},
  { 400, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixFAPM)},
  { 409, -1, -1, sizeof(::service_layer::SLBgplsTopoFadUnsuppTlv)},
  { 417, -1, -1, sizeof(::service_layer::SLBgplsTopoAdminGroup)},
  { 424, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMaxBandwidth)},
  { 431, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMaxResvBandwidth)},
  { 438, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkUnresvBandwidth)},
  { 446, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkTeDefaultMetric)},
  { 453, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkProtectionType)},
  { 460, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkMplsProtoMask)},
  { 467, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkIgpMetric)},
  { 474, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkSrlg)},
  { 481, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkOpaqueAttr)},
  { 488, -1, -1, sizeof(::service_layer::SLBgplsTopoLinkName)},
  { 495, -1, -1, sizeof(::service_layer::SLBgplsTopoAdjSid)},
  { 505, -1, -1, sizeof(::service_layer::SLBgplsTopoLanAdjSid)},
  { 516, -1, -1, sizeof(::service_layer::SLBgplsTopoBgpPeerNodeSid)},
  { 526, -1, -1, sizeof(::service_layer::SLBgplsTopoBgpPeerAdjSid)},
  { 536, -1, -1, sizeof(::service_layer::SLBgplsTopoBgpPeerSetSid)},
  { 546, -1, -1, sizeof(::service_layer::SLBgpLsTopoNeighborId)},
  { 555, -1, -1, sizeof(::service_layer::SLBgplsTopoUniLinkDelay)},
  { 563, -1, -1, sizeof(::service_layer::SLBgplsTopoMinMaxUniLinkDelay)},
  { 572, -1, -1, sizeof(::service_layer::SLBgplsTopoUniDelayVar)},
  { 580, -1, -1, sizeof(::service_layer::SLBgplsTopoUniLinkLoss)},
  { 588, -1, -1, sizeof(::service_layer::SLBgplsTopoUniResBandwidth)},
  { 595, -1, -1, sizeof(::service_layer::SLBgplsTopoUniAvailBandwidth)},
  { 602, -1, -1, sizeof(::service_layer::SLBgplsTopoUniUtilBandwidth)},
  { 609, -1, -1, sizeof(::service_layer::SLBgplsTopoAslaAttr)},
  { 629, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixIgpFlags)},
  { 636, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixIgpRouteTag)},
  { 643, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixIgpExtRouteTag)},
  { 650, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixMetric)},
  { 657, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixOspfFwdAddr)},
  { 666, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixOpaqueAttr)},
  { 673, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixSid)},
  { 683, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixRange)},
  { 694, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixAttrFlags)},
  { 701, -1, -1, sizeof(::service_layer::SLBgplsTopoPrefixSrcRouterId)},
  { 710, -1, -1, sizeof(::service_layer::SLBgplsTopoL2BundleMemberAttr)},
  { 735, -1, -1, sizeof(::service_layer::SLBgplsTopoExtAdminGroup)},
  { 742, -1, -1, sizeof(::service_layer::SLBgplsTopoUnknownAttr)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNotifReqMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNlriMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoStartMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoEndMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoInstanceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixDescr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoOspfNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoOspfv3NodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoIsisNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoBgpNodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBplsTopoLinkLocRemId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoMtId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeMsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeFlagBits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoNodeOpaqueAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsNodeName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoIsisAreaId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLocalIpv4RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLocalIpv6RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoRemoteIpv4RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoRemoteIpv6RouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrgb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrgbIsisFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrAlgorithm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoSrlb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoFad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixFAPM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoFadUnsuppTlv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoAdminGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMaxBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMaxResvBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkUnresvBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkTeDefaultMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkProtectionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkMplsProtoMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkIgpMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkSrlg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkOpaqueAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLinkName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoAdjSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoLanAdjSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoBgpPeerNodeSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoBgpPeerAdjSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoBgpPeerSetSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgpLsTopoNeighborId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniLinkDelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoMinMaxUniLinkDelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniDelayVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniLinkLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniResBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniAvailBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUniUtilBandwidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoAslaAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixIgpFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixIgpRouteTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixIgpExtRouteTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixOspfFwdAddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixOpaqueAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixAttrFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoPrefixSrcRouterId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoL2BundleMemberAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoExtAdminGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLBgplsTopoUnknownAttr_default_instance_),
};

const char descriptor_table_protodef_sl_5fbgpls_5ftopology_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027sl_bgpls_topology.proto\022\rservice_layer"
  "\032\025sl_common_types.proto\"L\n\026SLBgplsTopoNo"
  "tifReqMsg\0222\n\005Match\030\001 \003(\0132#.service_layer"
  ".SLBgplsTopoNlriMatch\"\274\001\n\024SLBgplsTopoNlr"
  "iMatch\0228\n\nInstanceId\030\001 \001(\0132$.service_lay"
  "er.SLBgplsTopoInstanceId\0224\n\010Protocol\030\002 \001"
  "(\0162\".service_layer.SLBgplsTopoProtocol\0224"
  "\n\010NlriType\030\003 \001(\0162\".service_layer.SLBgpls"
  "TopoNlriType\"\356\001\n\023SLBgplsTopoNotifMsg\0221\n\t"
  "ErrStatus\030\001 \001(\0132\034.service_layer.SLErrorS"
  "tatusH\000\022/\n\004Data\030\002 \001(\0132\037.service_layer.SL"
  "BgplsTopoNotifH\000\0226\n\005Start\030\003 \001(\0132%.servic"
  "e_layer.SLBgplsTopoStartMarkerH\000\0222\n\003End\030"
  "\004 \001(\0132#.service_layer.SLBgplsTopoEndMark"
  "erH\000B\007\n\005Event\"\030\n\026SLBgplsTopoStartMarker\""
  "\026\n\024SLBgplsTopoEndMarker\"D\n\020SLBgplsTopoNo"
  "tif\0220\n\007Entries\030\001 \003(\0132\037.service_layer.SLB"
  "gplsTopoEntry\"x\n\020SLBgplsTopoEntry\0226\n\tOpe"
  "ration\030\001 \001(\0162#.service_layer.SLBgplsTopo"
  "Operation\022,\n\004Data\030\002 \001(\0132\036.service_layer."
  "SLBgplsTopoData\"\251\002\n\017SLBgplsTopoData\0228\n\nI"
  "nstanceId\030\001 \001(\0132$.service_layer.SLBgplsT"
  "opoInstanceId\0224\n\010Protocol\030\002 \001(\0162\".servic"
  "e_layer.SLBgplsTopoProtocol\0222\n\004Node\030\003 \001("
  "\0132\".service_layer.SLBgplsTopoNodeDataH\000\022"
  "2\n\004Link\030\004 \001(\0132\".service_layer.SLBgplsTop"
  "oLinkDataH\000\0226\n\006Prefix\030\005 \001(\0132$.service_la"
  "yer.SLBgplsTopoPrefixDataH\000B\006\n\004Data\"+\n\025S"
  "LBgplsTopoInstanceId\022\022\n\nIdentifier\030\001 \001(\004"
  "\"y\n\023SLBgplsTopoNodeData\022,\n\004Node\030\001 \001(\0132\036."
  "service_layer.SLBgplsTopoNode\0224\n\010NodeAtt"
  "r\030\002 \001(\0132\".service_layer.SLBgplsTopoNodeA"
  "ttr\"y\n\023SLBgplsTopoLinkData\022,\n\004Link\030\001 \001(\013"
  "2\036.service_layer.SLBgplsTopoLink\0224\n\010Link"
  "Attr\030\002 \001(\0132\".service_layer.SLBgplsTopoLi"
  "nkAttr\"\203\001\n\025SLBgplsTopoPrefixData\0220\n\006Pref"
  "ix\030\001 \001(\0132 .service_layer.SLBgplsTopoPref"
  "ix\0228\n\nPrefixAttr\030\002 \001(\0132$.service_layer.S"
  "LBgplsTopoPrefixAttr\"\232\002\n\017SLBgplsTopoNode"
  "\022\013\n\003Asn\030\001 \001(\r\022:\n\nOspfNodeId\030\002 \001(\0132$.serv"
  "ice_layer.SLBgplsTopoOspfNodeIdH\000\022>\n\014Osp"
  "fv3NodeId\030\003 \001(\0132&.service_layer.SLBgplsT"
  "opoOspfv3NodeIdH\000\022:\n\nIsisNodeId\030\004 \001(\0132$."
  "service_layer.SLBgplsTopoIsisNodeIdH\000\0228\n"
  "\tBgpNodeId\030\005 \001(\0132#.service_layer.SLBgpls"
  "TopoBgpNodeIdH\000B\010\n\006NodeId\"\272\001\n\017SLBgplsTop"
  "oLink\0226\n\016LocalNodeDescr\030\001 \001(\0132\036.service_"
  "layer.SLBgplsTopoNode\0227\n\017RemoteNodeDescr"
  "\030\002 \001(\0132\036.service_layer.SLBgplsTopoNode\0226"
  "\n\tLinkDescr\030\003 \001(\0132#.service_layer.SLBgpl"
  "sTopoLinkDescr\"\202\001\n\021SLBgplsTopoPrefix\0221\n\t"
  "NodeDescr\030\001 \001(\0132\036.service_layer.SLBgplsT"
  "opoNode\022:\n\013PrefixDescr\030\002 \001(\0132%.service_l"
  "ayer.SLBgplsTopoPrefixDescr\"\265\001\n\024SLBgplsT"
  "opoLinkDescr\022\017\n\007LocalId\030\001 \001(\r\022\020\n\010RemoteI"
  "d\030\002 \001(\r\022\021\n\tLocalIpv4\030\003 \001(\014\022\022\n\nRemoteIpv4"
  "\030\004 \001(\014\022\021\n\tLocalIpv6\030\005 \001(\014\022\022\n\nRemoteIpv6\030"
  "\006 \001(\014\022,\n\004MtId\030\007 \001(\0132\036.service_layer.SLBg"
  "plsTopoMtId\"\254\001\n\026SLBgplsTopoPrefixDescr\022,"
  "\n\004MtId\030\001 \001(\0132\036.service_layer.SLBgplsTopo"
  "MtId\022>\n\rOspfRouteType\030\002 \001(\0162\'.service_la"
  "yer.SLBgplsTopoOspfRouteType\022\024\n\014PrefixLe"
  "ngth\030\003 \001(\r\022\016\n\006Prefix\030\004 \001(\014\"c\n\025SLBgplsTop"
  "oOspfNodeId\022\016\n\006AreaId\030\001 \001(\r\022\022\n\nIsAsScope"
  "d\030\002 \001(\r\022\020\n\010RouterId\030\003 \001(\014\022\024\n\014DrIdentifie"
  "r\030\004 \001(\014\"c\n\027SLBgplsTopoOspfv3NodeId\022\016\n\006Ar"
  "eaId\030\001 \001(\r\022\020\n\010AsScoped\030\002 \001(\r\022\020\n\010RouterId"
  "\030\003 \001(\014\022\024\n\014DrIdentifier\030\004 \001(\r\"8\n\025SLBgplsT"
  "opoIsisNodeId\022\020\n\010SystemId\030\001 \001(\014\022\r\n\005PsnId"
  "\030\002 \001(\014\";\n\024SLBgplsTopoBgpNodeId\022\020\n\010Router"
  "Id\030\001 \001(\014\022\021\n\tMemberAsn\030\002 \001(\r\"\243\006\n\023SLBgplsT"
  "opoNodeAttr\022,\n\004MtId\030\001 \003(\0132\036.service_laye"
  "r.SLBgplsTopoMtId\0222\n\007NodeMsd\030\002 \003(\0132!.ser"
  "vice_layer.SLBgplsTopoNodeMsd\022<\n\014NodeFla"
  "gBits\030\003 \001(\0132&.service_layer.SLBgplsTopoN"
  "odeFlagBits\022@\n\016OpaqueNodeAttr\030\004 \001(\0132(.se"
  "rvice_layer.SLBgplsTopoNodeOpaqueAttr\0220\n"
  "\010NodeName\030\005 \001(\0132\036.service_layer.SLBgplsN"
  "odeName\0228\n\nIsisAreaId\030\006 \003(\0132$.service_la"
  "yer.SLBgplsTopoIsisAreaId\022>\n\tLocalIpv4\030\007"
  " \003(\0132+.service_layer.SLBgplsTopoLocalIpv"
  "4RouterId\022>\n\tLocalIpv6\030\010 \003(\0132+.service_l"
  "ayer.SLBgplsTopoLocalIpv6RouterId\022>\n\rSrg"
  "bIsisFlags\030\t \001(\0132\'.service_layer.SLBgpls"
  "TopoSrgbIsisFlags\022,\n\004Srgb\030\n \003(\0132\036.servic"
  "e_layer.SLBgplsTopoSrgb\022:\n\013SrAlgorithm\030\013"
  " \001(\0132%.service_layer.SLBgplsTopoSrAlgori"
  "thm\022,\n\004Srlb\030\014 \003(\0132\036.service_layer.SLBgpl"
  "sTopoSrlb\022*\n\003Fad\030\r \003(\0132\035.service_layer.S"
  "LBgplsTopoFad\022:\n\013UnknownAttr\030\016 \003(\0132%.ser"
  "vice_layer.SLBgplsTopoUnknownAttr\"\336\020\n\023SL"
  "BgplsTopoLinkAttr\022;\n\014LinkLocRemId\030\001 \001(\0132"
  "%.service_layer.SLBplsTopoLinkLocRemId\0222"
  "\n\007LinkMsd\030\002 \003(\0132!.service_layer.SLBgplsT"
  "opoLinkMsd\022F\n\021LocalIpv4RouterId\030\003 \003(\0132+."
  "service_layer.SLBgplsTopoLocalIpv4Router"
  "Id\022F\n\021LocalIpv6RouterId\030\004 \003(\0132+.service_"
  "layer.SLBgplsTopoLocalIpv6RouterId\022H\n\022Re"
  "moteIpv4RouterId\030\005 \003(\0132,.service_layer.S"
  "LBgplsTopoRemoteIpv4RouterId\022H\n\022RemoteIp"
  "v6RouterId\030\006 \003(\0132,.service_layer.SLBgpls"
  "TopoRemoteIpv6RouterId\0228\n\nAdminGroup\030\007 \001"
  "(\0132$.service_layer.SLBgplsTopoAdminGroup"
  "\022@\n\014MaxBandwidth\030\010 \001(\0132*.service_layer.S"
  "LBgplsTopoLinkMaxBandwidth\022H\n\020MaxResvBan"
  "dwidth\030\t \001(\0132..service_layer.SLBgplsTopo"
  "LinkMaxResvBandwidth\022F\n\017UnresvBandwidth\030"
  "\n \003(\0132-.service_layer.SLBgplsTopoLinkUnr"
  "esvBandwidth\022B\n\013TeDefMetric\030\013 \001(\0132-.serv"
  "ice_layer.SLBgplsTopoLinkTeDefaultMetric"
  "\022D\n\016ProtectionType\030\014 \001(\0132,.service_layer"
  ".SLBgplsTopoLinkProtectionType\022B\n\rMplsPr"
  "otoMask\030\r \001(\0132+.service_layer.SLBgplsTop"
  "oLinkMplsProtoMask\022:\n\tIgpMetric\030\016 \001(\0132\'."
  "service_layer.SLBgplsTopoLinkIgpMetric\0220"
  "\n\004Srlg\030\017 \003(\0132\".service_layer.SLBgplsTopo"
  "LinkSrlg\022<\n\nOpaqueAttr\030\020 \001(\0132(.service_l"
  "ayer.SLBgplsTopoLinkOpaqueAttr\0224\n\010LinkNa"
  "me\030\021 \001(\0132\".service_layer.SLBgplsTopoLink"
  "Name\0220\n\006AdjSid\030\022 \003(\0132 .service_layer.SLB"
  "gplsTopoAdjSid\0226\n\tLanAdjSid\030\023 \003(\0132#.serv"
  "ice_layer.SLBgplsTopoLanAdjSid\022@\n\016BgpPee"
  "rNodeSid\030\024 \003(\0132(.service_layer.SLBgplsTo"
  "poBgpPeerNodeSid\022>\n\rBgpPeerAdjSid\030\025 \003(\0132"
  "\'.service_layer.SLBgplsTopoBgpPeerAdjSid"
  "\022>\n\rBgpPeerSetSid\030\026 \003(\0132\'.service_layer."
  "SLBgplsTopoBgpPeerSetSid\022<\n\014UniLinkDelay"
  "\030\027 \001(\0132&.service_layer.SLBgplsTopoUniLin"
  "kDelay\022H\n\022MinMaxUniLinkDelay\030\030 \001(\0132,.ser"
  "vice_layer.SLBgplsTopoMinMaxUniLinkDelay"
  "\022:\n\013UniDelayVar\030\031 \001(\0132%.service_layer.SL"
  "BgplsTopoUniDelayVar\022:\n\013UniLinkLoss\030\032 \001("
  "\0132%.service_layer.SLBgplsTopoUniLinkLoss"
  "\022B\n\017UniResBandwidth\030\033 \001(\0132).service_laye"
  "r.SLBgplsTopoUniResBandwidth\022F\n\021UniAvail"
  "Bandwidth\030\034 \001(\0132+.service_layer.SLBgplsT"
  "opoUniAvailBandwidth\022D\n\020UniUtilBandwidth"
  "\030\035 \001(\0132*.service_layer.SLBgplsTopoUniUti"
  "lBandwidth\0220\n\004Asla\030\036 \003(\0132\".service_layer"
  ".SLBgplsTopoAslaAttr\022H\n\022L2BundleMemberAt"
  "tr\030\037 \003(\0132,.service_layer.SLBgplsTopoL2Bu"
  "ndleMemberAttr\022>\n\rExtAdminGroup\030  \003(\0132\'."
  "service_layer.SLBgplsTopoExtAdminGroup\022:"
  "\n\013UnknownAttr\030! \003(\0132%.service_layer.SLBg"
  "plsTopoUnknownAttr\"\357\005\n\025SLBgplsTopoPrefix"
  "Attr\0222\n\004Fapm\030\001 \003(\0132$.service_layer.SLBgp"
  "lsTopoPrefixFAPM\022:\n\010IgpFlags\030\002 \001(\0132(.ser"
  "vice_layer.SLBgplsTopoPrefixIgpFlags\022@\n\013"
  "IgpRouteTag\030\003 \003(\0132+.service_layer.SLBgpl"
  "sTopoPrefixIgpRouteTag\022F\n\016IgpExtRouteTag"
  "\030\004 \003(\0132..service_layer.SLBgplsTopoPrefix"
  "IgpExtRouteTag\0226\n\006Metric\030\005 \001(\0132&.service"
  "_layer.SLBgplsTopoPrefixMetric\022@\n\013OspfFw"
  "dAddr\030\006 \001(\0132+.service_layer.SLBgplsTopoP"
  "refixOspfFwdAddr\022>\n\nOpaqueAttr\030\007 \001(\0132*.s"
  "ervice_layer.SLBgplsTopoPrefixOpaqueAttr"
  "\0220\n\003Sid\030\010 \003(\0132#.service_layer.SLBgplsTop"
  "oPrefixSid\0224\n\005Range\030\t \001(\0132%.service_laye"
  "r.SLBgplsTopoPrefixRange\022<\n\tAttrFlags\030\n "
  "\001(\0132).service_layer.SLBgplsTopoPrefixAtt"
  "rFlags\022@\n\013SrcRouterId\030\013 \001(\0132+.service_la"
  "yer.SLBgplsTopoPrefixSrcRouterId\022:\n\013Unkn"
  "ownAttr\030\014 \003(\0132%.service_layer.SLBgplsTop"
  "oUnknownAttr\";\n\026SLBplsTopoLinkLocRemId\022\017"
  "\n\007LocalId\030\001 \001(\r\022\020\n\010RemoteId\030\002 \001(\r\"\037\n\017SLB"
  "gplsTopoMtId\022\014\n\004MtId\030\001 \001(\r\"1\n\022SLBgplsTop"
  "oNodeMsd\022\014\n\004Type\030\001 \001(\r\022\r\n\005Value\030\002 \001(\r\"1\n"
  "\022SLBgplsTopoLinkMsd\022\014\n\004Type\030\001 \001(\r\022\r\n\005Val"
  "ue\030\002 \001(\r\"(\n\027SLBgplsTopoNodeFlagBits\022\r\n\005F"
  "lags\030\001 \001(\014\"/\n\031SLBgplsTopoNodeOpaqueAttr\022"
  "\022\n\nOpaqueAttr\030\001 \001(\014\"\037\n\017SLBgplsNodeName\022\014"
  "\n\004Name\030\001 \001(\t\"\'\n\025SLBgplsTopoIsisAreaId\022\016\n"
  "\006AreaId\030\001 \001(\014\"0\n\034SLBgplsTopoLocalIpv4Rou"
  "terId\022\020\n\010RouterId\030\001 \001(\014\"0\n\034SLBgplsTopoLo"
  "calIpv6RouterId\022\020\n\010RouterId\030\001 \001(\014\"1\n\035SLB"
  "gplsTopoRemoteIpv4RouterId\022\020\n\010RouterId\030\001"
  " \001(\014\"1\n\035SLBgplsTopoRemoteIpv6RouterId\022\020\n"
  "\010RouterId\030\001 \001(\014\"8\n\017SLBgplsTopoSrgb\022\022\n\nSt"
  "artLabel\030\001 \001(\r\022\021\n\tRangeSize\030\002 \001(\r\")\n\030SLB"
  "gplsTopoSrgbIsisFlags\022\r\n\005Flags\030\001 \001(\014\",\n\026"
  "SLBgplsTopoSrAlgorithm\022\022\n\nAlgorithms\030\001 \001"
  "(\014\"8\n\017SLBgplsTopoSrlb\022\022\n\nStartLabel\030\001 \001("
  "\r\022\021\n\tRangeSize\030\002 \001(\r\"\330\002\n\016SLBgplsTopoFad\022"
  "\021\n\tAlgorithm\030\001 \001(\014\022\022\n\nMetricType\030\002 \001(\014\022\020"
  "\n\010CalcType\030\003 \001(\014\022\020\n\010Priority\030\004 \001(\014\022\021\n\tEx"
  "cAnyAff\030\005 \003(\r\022\021\n\tIncAnyAff\030\006 \003(\r\022\021\n\tIncA"
  "llAff\030\007 \003(\r\022\r\n\005Flags\030\010 \001(\014\022\017\n\007ExcSrlg\030\t "
  "\003(\r\0229\n\tUnsuppTlv\030\017 \001(\0132&.service_layer.S"
  "LBgplsTopoFadUnsuppTlv\022\020\n\010ExcMinBw\030\016 \001(\014"
  "\022\023\n\013ExcMaxDelay\030\r \001(\r\022\024\n\014ExcAnyRevAff\030\n "
  "\003(\r\022\024\n\014IncAnyRevAff\030\013 \003(\r\022\024\n\014IncAllRevAf"
  "f\030\014 \003(\r\"H\n\025SLBgplsTopoPrefixFAPM\022\020\n\010Flex"
  "Algo\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\014\022\016\n\006Metric\030\003 \001("
  "\r\"^\n\027SLBgplsTopoFadUnsuppTlv\0224\n\010Protocol"
  "\030\001 \001(\0162\".service_layer.SLBgplsTopoProtoc"
  "ol\022\r\n\005Types\030\002 \001(\014\"&\n\025SLBgplsTopoAdminGro"
  "up\022\r\n\005Group\030\001 \001(\r\"0\n\033SLBgplsTopoLinkMaxB"
  "andwidth\022\021\n\tBandwidth\030\001 \001(\014\"4\n\037SLBgplsTo"
  "poLinkMaxResvBandwidth\022\021\n\tBandwidth\030\001 \001("
  "\014\"E\n\036SLBgplsTopoLinkUnresvBandwidth\022\020\n\010P"
  "riority\030\001 \001(\r\022\021\n\tBandwidth\030\002 \001(\014\"0\n\036SLBg"
  "plsTopoLinkTeDefaultMetric\022\016\n\006Metric\030\001 \001"
  "(\r\"-\n\035SLBgplsTopoLinkProtectionType\022\014\n\004M"
  "ask\030\001 \001(\r\",\n\034SLBgplsTopoLinkMplsProtoMas"
  "k\022\014\n\004Mask\030\001 \001(\014\"*\n\030SLBgplsTopoLinkIgpMet"
  "ric\022\016\n\006Metric\030\001 \001(\014\"&\n\023SLBgplsTopoLinkSr"
  "lg\022\017\n\007SrlgVal\030\001 \001(\r\"/\n\031SLBgplsTopoLinkOp"
  "aqueAttr\022\022\n\nOpaqueAttr\030\001 \001(\014\"#\n\023SLBgplsT"
  "opoLinkName\022\014\n\004Name\030\001 \001(\t\"\201\001\n\021SLBgplsTop"
  "oAdjSid\022\022\n\nLabelIndex\030\001 \001(\r\0229\n\014AdjSidFor"
  "mat\030\002 \001(\0162#.service_layer.SLBgplsTopoSid"
  "Format\022\r\n\005Flags\030\003 \001(\014\022\016\n\006Weight\030\004 \001(\r\"\274\001"
  "\n\024SLBgplsTopoLanAdjSid\0226\n\010Neighbor\030\001 \001(\013"
  "2$.service_layer.SLBgpLsTopoNeighborId\022\022"
  "\n\nLabelIndex\030\002 \001(\r\0229\n\014AdjSidFormat\030\003 \001(\016"
  "2#.service_layer.SLBgplsTopoSidFormat\022\r\n"
  "\005Flags\030\004 \001(\014\022\016\n\006Weight\030\005 \001(\r\"\202\001\n\031SLBgpls"
  "TopoBgpPeerNodeSid\022\013\n\003Sid\030\001 \001(\014\0229\n\014BgpSi"
  "dFormat\030\002 \001(\0162#.service_layer.SLBgplsTop"
  "oSidFormat\022\r\n\005Flags\030\003 \001(\014\022\016\n\006Weight\030\004 \001("
  "\r\"\201\001\n\030SLBgplsTopoBgpPeerAdjSid\022\013\n\003Sid\030\001 "
  "\001(\014\0229\n\014BgpSidFormat\030\002 \001(\0162#.service_laye"
  "r.SLBgplsTopoSidFormat\022\r\n\005Flags\030\003 \001(\014\022\016\n"
  "\006Weight\030\004 \001(\r\"\201\001\n\030SLBgplsTopoBgpPeerSetS"
  "id\022\013\n\003Sid\030\001 \001(\014\0229\n\014BgpSidFormat\030\002 \001(\0162#."
  "service_layer.SLBgplsTopoSidFormat\022\r\n\005Fl"
  "ags\030\003 \001(\014\022\016\n\006Weight\030\004 \001(\r\"M\n\025SLBgpLsTopo"
  "NeighborId\022\022\n\010Ipv4Addr\030\001 \001(\014H\000\022\022\n\010System"
  "Id\030\002 \001(\014H\000B\014\n\nNeighborId\"7\n\027SLBgplsTopoU"
  "niLinkDelay\022\r\n\005Delay\030\001 \001(\r\022\r\n\005Flags\030\002 \001("
  "\014\"H\n\035SLBgplsTopoMinMaxUniLinkDelay\022\013\n\003Mi"
  "n\030\001 \001(\r\022\013\n\003Max\030\002 \001(\r\022\r\n\005Flags\030\003 \001(\014\":\n\026S"
  "LBgplsTopoUniDelayVar\022\021\n\tVariation\030\001 \001(\r"
  "\022\r\n\005Flags\030\002 \001(\014\"5\n\026SLBgplsTopoUniLinkLos"
  "s\022\014\n\004Loss\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\014\"/\n\032SLBgpl"
  "sTopoUniResBandwidth\022\021\n\tBandwidth\030\001 \001(\014\""
  "1\n\034SLBgplsTopoUniAvailBandwidth\022\021\n\tBandw"
  "idth\030\001 \001(\014\"0\n\033SLBgplsTopoUniUtilBandwidt"
  "h\022\021\n\tBandwidth\030\001 \001(\014\"\263\006\n\023SLBgplsTopoAsla"
  "Attr\022\014\n\004Sabm\030\001 \001(\014\022\r\n\005Udabm\030\002 \001(\014\0228\n\nAdm"
  "inGroup\030\003 \001(\0132$.service_layer.SLBgplsTop"
  "oAdminGroup\022B\n\013TeDefMetric\030\004 \001(\0132-.servi"
  "ce_layer.SLBgplsTopoLinkTeDefaultMetric\022"
  "0\n\004Srlg\030\005 \003(\0132\".service_layer.SLBgplsTop"
  "oLinkSrlg\022<\n\014UniLinkDelay\030\006 \001(\0132&.servic"
  "e_layer.SLBgplsTopoUniLinkDelay\022E\n\017MinMa"
  "xLinkDelay\030\007 \001(\0132,.service_layer.SLBgpls"
  "TopoMinMaxUniLinkDelay\022@\n\021UniDelayVariat"
  "ion\030\010 \001(\0132%.service_layer.SLBgplsTopoUni"
  "DelayVar\022:\n\013UniLinkLoss\030\t \001(\0132%.service_"
  "layer.SLBgplsTopoUniLinkLoss\022B\n\017UniResBa"
  "ndwidth\030\n \001(\0132).service_layer.SLBgplsTop"
  "oUniResBandwidth\022F\n\021UniAvailBandwidth\030\013 "
  "\001(\0132+.service_layer.SLBgplsTopoUniAvailB"
  "andwidth\022D\n\020UniUtilBandwidth\030\014 \001(\0132*.ser"
  "vice_layer.SLBgplsTopoUniUtilBandwidth\022>"
  "\n\rExtAdminGroup\030\r \003(\0132\'.service_layer.SL"
  "BgplsTopoExtAdminGroup\022:\n\013UnknownAttr\030\016 "
  "\003(\0132%.service_layer.SLBgplsTopoUnknownAt"
  "tr\"*\n\031SLBgplsTopoPrefixIgpFlags\022\r\n\005Flags"
  "\030\001 \001(\014\"+\n\034SLBgplsTopoPrefixIgpRouteTag\022\013"
  "\n\003Tag\030\001 \001(\r\".\n\037SLBgplsTopoPrefixIgpExtRo"
  "uteTag\022\013\n\003Tag\030\001 \001(\004\")\n\027SLBgplsTopoPrefix"
  "Metric\022\016\n\006Metric\030\001 \001(\r\"U\n\034SLBgplsTopoPre"
  "fixOspfFwdAddr\022\022\n\010Ipv4Addr\030\001 \001(\014H\000\022\022\n\010Ip"
  "v6Addr\030\002 \001(\014H\000B\r\n\013OspfFwdAddr\"1\n\033SLBgpls"
  "TopoPrefixOpaqueAttr\022\022\n\nOpaqueAttr\030\001 \001(\014"
  "\"\220\001\n\024SLBgplsTopoPrefixSid\022\r\n\005Flags\030\001 \001(\014"
  "\022\021\n\tAlgorithm\030\002 \001(\r\022\022\n\nLabelIndex\030\003 \001(\r\022"
  "B\n\017PrefixSidFormat\030\004 \001(\0162).service_layer"
  ".SLBgplsTopoPrefixSidFormat\"n\n\026SLBgplsTo"
  "poPrefixRange\022\r\n\005Flags\030\001 \001(\014\022\021\n\tRangeSiz"
  "e\030\002 \001(\r\022\021\n\tAlgorithm\030\003 \001(\r\022\r\n\005Index\030\004 \001("
  "\r\022\020\n\010SidFlags\030\005 \001(\014\"+\n\032SLBgplsTopoPrefix"
  "AttrFlags\022\r\n\005Flags\030\001 \001(\014\"U\n\034SLBgplsTopoP"
  "refixSrcRouterId\022\022\n\010Ipv4Addr\030\001 \001(\014H\000\022\022\n\010"
  "Ipv6Addr\030\002 \001(\014H\000B\r\n\013SrcRouterId\"\270\t\n\035SLBg"
  "plsTopoL2BundleMemberAttr\022\022\n\nMemberDesc\030"
  "\001 \001(\r\0228\n\nAdminGroup\030\002 \001(\0132$.service_laye"
  "r.SLBgplsTopoAdminGroup\022@\n\014MaxBandwidth\030"
  "\003 \001(\0132*.service_layer.SLBgplsTopoLinkMax"
  "Bandwidth\022H\n\020MaxResvBandwidth\030\004 \001(\0132..se"
  "rvice_layer.SLBgplsTopoLinkMaxResvBandwi"
  "dth\022F\n\017UnresvBandwidth\030\005 \003(\0132-.service_l"
  "ayer.SLBgplsTopoLinkUnresvBandwidth\022B\n\013T"
  "eDefMetric\030\006 \001(\0132-.service_layer.SLBgpls"
  "TopoLinkTeDefaultMetric\022D\n\016ProtectionTyp"
  "e\030\007 \001(\0132,.service_layer.SLBgplsTopoLinkP"
  "rotectionType\0220\n\006AdjSid\030\010 \003(\0132 .service_"
  "layer.SLBgplsTopoAdjSid\0226\n\tLanAdjSid\030\t \003"
  "(\0132#.service_layer.SLBgplsTopoLanAdjSid\022"
  "<\n\014UniLinkDelay\030\n \001(\0132&.service_layer.SL"
  "BgplsTopoUniLinkDelay\022E\n\017MinMaxLinkDelay"
  "\030\013 \001(\0132,.service_layer.SLBgplsTopoMinMax"
  "UniLinkDelay\022@\n\021UniDelayVariation\030\014 \001(\0132"
  "%.service_layer.SLBgplsTopoUniDelayVar\022:"
  "\n\013UniLinkLoss\030\r \001(\0132%.service_layer.SLBg"
  "plsTopoUniLinkLoss\022B\n\017UniResBandwidth\030\016 "
  "\001(\0132).service_layer.SLBgplsTopoUniResBan"
  "dwidth\022F\n\021UniAvailBandwidth\030\017 \001(\0132+.serv"
  "ice_layer.SLBgplsTopoUniAvailBandwidth\022D"
  "\n\020UniUtilBandwidth\030\020 \001(\0132*.service_layer"
  ".SLBgplsTopoUniUtilBandwidth\0220\n\004Asla\030\021 \003"
  "(\0132\".service_layer.SLBgplsTopoAslaAttr\022>"
  "\n\rExtAdminGroup\030\022 \003(\0132\'.service_layer.SL"
  "BgplsTopoExtAdminGroup\022:\n\013UnknownAttr\030\023 "
  "\003(\0132%.service_layer.SLBgplsTopoUnknownAt"
  "tr\")\n\030SLBgplsTopoExtAdminGroup\022\r\n\005Group\030"
  "\001 \001(\r\"I\n\026SLBgplsTopoUnknownAttr\022\017\n\007TlvTy"
  "pe\030\001 \001(\r\022\016\n\006TlvLen\030\002 \001(\r\022\016\n\006RawTlv\030\003 \001(\014"
  "*\204\001\n\024SLBgplsTopoOperation\022$\n SL_BGPLS_TO"
  "PO_OPERATION_RESERVED\020\000\022\"\n\036SL_BGPLS_TOPO"
  "_OPERATION_UPDATE\020\001\022\"\n\036SL_BGPLS_TOPO_OPE"
  "RATION_DELETE\020\002*\321\001\n\023SLBgplsTopoNlriType\022"
  "$\n SL_BGPLS_TOPO_NLRI_TYPE_RESERVED\020\000\022 \n"
  "\034SL_BGPLS_TOPO_NLRI_TYPE_NODE\020\001\022 \n\034SL_BG"
  "PLS_TOPO_NLRI_TYPE_LINK\020\002\022\'\n#SL_BGPLS_TO"
  "PO_NLRI_TYPE_IPV4_PREFIX\020\003\022\'\n#SL_BGPLS_T"
  "OPO_NLRI_TYPE_IPV6_PREFIX\020\004*\361\002\n\023SLBgplsT"
  "opoProtocol\022#\n\037SL_BGPLS_TOPO_PROTOCOL_RE"
  "SERVED\020\000\022\"\n\036SL_BGPLS_TOPO_PROTOCOL_ISIS_"
  "L1\020\001\022\"\n\036SL_BGPLS_TOPO_PROTOCOL_ISIS_L2\020\002"
  "\022!\n\035SL_BGPLS_TOPO_PROTOCOL_OSPFv2\020\003\022!\n\035S"
  "L_BGPLS_TOPO_PROTOCOL_DIRECT\020\004\022!\n\035SL_BGP"
  "LS_TOPO_PROTOCOL_STATIC\020\005\022!\n\035SL_BGPLS_TO"
  "PO_PROTOCOL_OSPFv3\020\006\022\036\n\032SL_BGPLS_TOPO_PR"
  "OTOCOL_BGP\020\007\022\"\n\036SL_BGPLS_TOPO_PROTOCOL_R"
  "SVP_TE\020\010\022\035\n\031SL_BGPLS_TOPO_PROTOCOL_SR\020\t*"
  "\316\002\n\030SLBgplsTopoOspfRouteType\022*\n&SL_BGPLS"
  "_TOPO_OSPF_ROUTE_TYPE_RESERVED\020\000\022,\n(SL_B"
  "GPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA\020\001\022,"
  "\n(SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AR"
  "EA\020\002\022*\n&SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EX"
  "TERN_1\020\003\022*\n&SL_BGPLS_TOPO_OSPF_ROUTE_TYP"
  "E_EXTERN_2\020\004\022(\n$SL_BGPLS_TOPO_OSPF_ROUTE"
  "_TYPE_NSSA_1\020\005\022(\n$SL_BGPLS_TOPO_OSPF_ROU"
  "TE_TYPE_NSSA_2\020\006*\253\001\n\024SLBgplsTopoSidForma"
  "t\022%\n!SL_BGPLS_TOPO_SID_FORMAT_RESERVED\020\000"
  "\022\"\n\036SL_BGPLS_TOPO_SID_FORMAT_LABEL\020\001\022\"\n\036"
  "SL_BGPLS_TOPO_SID_FORMAT_INDEX\020\002\022$\n SL_B"
  "GPLS_TOPO_SID_FORMAT_V6_ADDR\020\003*\240\001\n\032SLBgp"
  "lsTopoPrefixSidFormat\022,\n(SL_BGPLS_TOPO_P"
  "REFIX_SID_FORMAT_RESERVED\020\000\022)\n%SL_BGPLS_"
  "TOPO_PREFIX_SID_FORMAT_LABEL\020\001\022)\n%SL_BGP"
  "LS_TOPO_PREFIX_SID_FORMAT_INDEX\020\0022t\n\013SLB"
  "gplsTopo\022e\n\026SLBgplsTopoNotifStream\022%.ser"
  "vice_layer.SLBgplsTopoNotifReqMsg\032\".serv"
  "ice_layer.SLBgplsTopoNotifMsg0\001BQZOgithu"
  "b.com/Cisco-service-layer/service-layer-"
  "objmodel/grpc/protos;service_layerb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fbgpls_5ftopology_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fbgpls_5ftopology_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbgpls_5ftopology_2eproto = {
  false, false, 14002, descriptor_table_protodef_sl_5fbgpls_5ftopology_2eproto, "sl_bgpls_topology.proto", 
  &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once, descriptor_table_sl_5fbgpls_5ftopology_2eproto_deps, 1, 81,
  schemas, file_default_instances, TableStruct_sl_5fbgpls_5ftopology_2eproto::offsets,
  file_level_metadata_sl_5fbgpls_5ftopology_2eproto, file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto, file_level_service_descriptors_sl_5fbgpls_5ftopology_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter() {
  return &descriptor_table_sl_5fbgpls_5ftopology_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fbgpls_5ftopology_2eproto(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[0];
}
bool SLBgplsTopoOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoNlriType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[1];
}
bool SLBgplsTopoNlriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[2];
}
bool SLBgplsTopoProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOspfRouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[3];
}
bool SLBgplsTopoOspfRouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSidFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[4];
}
bool SLBgplsTopoSidFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoPrefixSidFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fbgpls_5ftopology_2eproto);
  return file_level_enum_descriptors_sl_5fbgpls_5ftopology_2eproto[5];
}
bool SLBgplsTopoPrefixSidFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLBgplsTopoNotifReqMsg::_Internal {
 public:
};

SLBgplsTopoNotifReqMsg::SLBgplsTopoNotifReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNotifReqMsg)
}
SLBgplsTopoNotifReqMsg::SLBgplsTopoNotifReqMsg(const SLBgplsTopoNotifReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_(from.match_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNotifReqMsg)
}

inline void SLBgplsTopoNotifReqMsg::SharedCtor() {
}

SLBgplsTopoNotifReqMsg::~SLBgplsTopoNotifReqMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNotifReqMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNotifReqMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoNotifReqMsg::ArenaDtor(void* object) {
  SLBgplsTopoNotifReqMsg* _this = reinterpret_cast< SLBgplsTopoNotifReqMsg* >(object);
  (void)_this;
}
void SLBgplsTopoNotifReqMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNotifReqMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNotifReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNotifReqMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNotifReqMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoNlriMatch Match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNotifReqMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNotifReqMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoNlriMatch Match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_match(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNotifReqMsg)
  return target;
}

size_t SLBgplsTopoNotifReqMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNotifReqMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoNlriMatch Match = 1;
  total_size += 1UL * this->_internal_match_size();
  for (const auto& msg : this->match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNotifReqMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNotifReqMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNotifReqMsg::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNotifReqMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNotifReqMsg *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNotifReqMsg &>(from));
}


void SLBgplsTopoNotifReqMsg::MergeFrom(const SLBgplsTopoNotifReqMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNotifReqMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNotifReqMsg::CopyFrom(const SLBgplsTopoNotifReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNotifReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNotifReqMsg::IsInitialized() const {
  return true;
}

void SLBgplsTopoNotifReqMsg::InternalSwap(SLBgplsTopoNotifReqMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_.InternalSwap(&other->match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNotifReqMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[0]);
}

// ===================================================================

class SLBgplsTopoNlriMatch::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoInstanceId& instanceid(const SLBgplsTopoNlriMatch* msg);
};

const ::service_layer::SLBgplsTopoInstanceId&
SLBgplsTopoNlriMatch::_Internal::instanceid(const SLBgplsTopoNlriMatch* msg) {
  return *msg->instanceid_;
}
SLBgplsTopoNlriMatch::SLBgplsTopoNlriMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNlriMatch)
}
SLBgplsTopoNlriMatch::SLBgplsTopoNlriMatch(const SLBgplsTopoNlriMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instanceid()) {
    instanceid_ = new ::service_layer::SLBgplsTopoInstanceId(*from.instanceid_);
  } else {
    instanceid_ = nullptr;
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&nlritype_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(nlritype_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNlriMatch)
}

inline void SLBgplsTopoNlriMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&instanceid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nlritype_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(nlritype_));
}

SLBgplsTopoNlriMatch::~SLBgplsTopoNlriMatch() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNlriMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNlriMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete instanceid_;
}

void SLBgplsTopoNlriMatch::ArenaDtor(void* object) {
  SLBgplsTopoNlriMatch* _this = reinterpret_cast< SLBgplsTopoNlriMatch* >(object);
  (void)_this;
}
void SLBgplsTopoNlriMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNlriMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNlriMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNlriMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && instanceid_ != nullptr) {
    delete instanceid_;
  }
  instanceid_ = nullptr;
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nlritype_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(nlritype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNlriMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instanceid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoProtocol Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::service_layer::SLBgplsTopoProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNlriType NlriType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nlritype(static_cast<::service_layer::SLBgplsTopoNlriType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNlriMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNlriMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
  if (this->_internal_has_instanceid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instanceid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protocol(), target);
  }

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  if (this->_internal_nlritype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nlritype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNlriMatch)
  return target;
}

size_t SLBgplsTopoNlriMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNlriMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
  if (this->_internal_has_instanceid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instanceid_);
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  if (this->_internal_nlritype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nlritype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNlriMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNlriMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNlriMatch::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNlriMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNlriMatch *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNlriMatch &>(from));
}


void SLBgplsTopoNlriMatch::MergeFrom(const SLBgplsTopoNlriMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNlriMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instanceid()) {
    _internal_mutable_instanceid()->::service_layer::SLBgplsTopoInstanceId::MergeFrom(from._internal_instanceid());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_nlritype() != 0) {
    _internal_set_nlritype(from._internal_nlritype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNlriMatch::CopyFrom(const SLBgplsTopoNlriMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNlriMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNlriMatch::IsInitialized() const {
  return true;
}

void SLBgplsTopoNlriMatch::InternalSwap(SLBgplsTopoNlriMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNlriMatch, nlritype_)
      + sizeof(SLBgplsTopoNlriMatch::nlritype_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNlriMatch, instanceid_)>(
          reinterpret_cast<char*>(&instanceid_),
          reinterpret_cast<char*>(&other->instanceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNlriMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[1]);
}

// ===================================================================

class SLBgplsTopoNotifMsg::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLBgplsTopoNotifMsg* msg);
  static const ::service_layer::SLBgplsTopoNotif& data(const SLBgplsTopoNotifMsg* msg);
  static const ::service_layer::SLBgplsTopoStartMarker& start(const SLBgplsTopoNotifMsg* msg);
  static const ::service_layer::SLBgplsTopoEndMarker& end(const SLBgplsTopoNotifMsg* msg);
};

const ::service_layer::SLErrorStatus&
SLBgplsTopoNotifMsg::_Internal::errstatus(const SLBgplsTopoNotifMsg* msg) {
  return *msg->Event_.errstatus_;
}
const ::service_layer::SLBgplsTopoNotif&
SLBgplsTopoNotifMsg::_Internal::data(const SLBgplsTopoNotifMsg* msg) {
  return *msg->Event_.data_;
}
const ::service_layer::SLBgplsTopoStartMarker&
SLBgplsTopoNotifMsg::_Internal::start(const SLBgplsTopoNotifMsg* msg) {
  return *msg->Event_.start_;
}
const ::service_layer::SLBgplsTopoEndMarker&
SLBgplsTopoNotifMsg::_Internal::end(const SLBgplsTopoNotifMsg* msg) {
  return *msg->Event_.end_;
}
void SLBgplsTopoNotifMsg::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNotifMsg.ErrStatus)
}
void SLBgplsTopoNotifMsg::clear_errstatus() {
  if (_internal_has_errstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.errstatus_;
    }
    clear_has_Event();
  }
}
void SLBgplsTopoNotifMsg::set_allocated_data(::service_layer::SLBgplsTopoNotif* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNotif>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    Event_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNotifMsg.Data)
}
void SLBgplsTopoNotifMsg::set_allocated_start(::service_layer::SLBgplsTopoStartMarker* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoStartMarker>::GetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    Event_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNotifMsg.Start)
}
void SLBgplsTopoNotifMsg::set_allocated_end(::service_layer::SLBgplsTopoEndMarker* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoEndMarker>::GetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    Event_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNotifMsg.End)
}
SLBgplsTopoNotifMsg::SLBgplsTopoNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNotifMsg)
}
SLBgplsTopoNotifMsg::SLBgplsTopoNotifMsg(const SLBgplsTopoNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Event();
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kData: {
      _internal_mutable_data()->::service_layer::SLBgplsTopoNotif::MergeFrom(from._internal_data());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::service_layer::SLBgplsTopoStartMarker::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::service_layer::SLBgplsTopoEndMarker::MergeFrom(from._internal_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNotifMsg)
}

inline void SLBgplsTopoNotifMsg::SharedCtor() {
clear_has_Event();
}

SLBgplsTopoNotifMsg::~SLBgplsTopoNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNotifMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNotifMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLBgplsTopoNotifMsg::ArenaDtor(void* object) {
  SLBgplsTopoNotifMsg* _this = reinterpret_cast< SLBgplsTopoNotifMsg* >(object);
  (void)_this;
}
void SLBgplsTopoNotifMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNotifMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNotifMsg::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoNotifMsg)
  switch (Event_case()) {
    case kErrStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.errstatus_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.data_;
      }
      break;
    }
    case kStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.end_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLBgplsTopoNotifMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNotifMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNotifMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNotif Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoStartMarker Start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoEndMarker End = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNotifMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNotifMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNotif Data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .service_layer.SLBgplsTopoStartMarker Start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start(this), target, stream);
  }

  // .service_layer.SLBgplsTopoEndMarker End = 4;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNotifMsg)
  return target;
}

size_t SLBgplsTopoNotifMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNotifMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Event_case()) {
    // .service_layer.SLErrorStatus ErrStatus = 1;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.errstatus_);
      break;
    }
    // .service_layer.SLBgplsTopoNotif Data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.data_);
      break;
    }
    // .service_layer.SLBgplsTopoStartMarker Start = 3;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.start_);
      break;
    }
    // .service_layer.SLBgplsTopoEndMarker End = 4;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.end_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNotifMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNotifMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNotifMsg::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNotifMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNotifMsg *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNotifMsg &>(from));
}


void SLBgplsTopoNotifMsg::MergeFrom(const SLBgplsTopoNotifMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kData: {
      _internal_mutable_data()->::service_layer::SLBgplsTopoNotif::MergeFrom(from._internal_data());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::service_layer::SLBgplsTopoStartMarker::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::service_layer::SLBgplsTopoEndMarker::MergeFrom(from._internal_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNotifMsg::CopyFrom(const SLBgplsTopoNotifMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNotifMsg::IsInitialized() const {
  return true;
}

void SLBgplsTopoNotifMsg::InternalSwap(SLBgplsTopoNotifMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNotifMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[2]);
}

// ===================================================================

class SLBgplsTopoStartMarker::_Internal {
 public:
};

SLBgplsTopoStartMarker::SLBgplsTopoStartMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoStartMarker)
}
SLBgplsTopoStartMarker::SLBgplsTopoStartMarker(const SLBgplsTopoStartMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoStartMarker)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoStartMarker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoStartMarker::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoStartMarker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[3]);
}

// ===================================================================

class SLBgplsTopoEndMarker::_Internal {
 public:
};

SLBgplsTopoEndMarker::SLBgplsTopoEndMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoEndMarker)
}
SLBgplsTopoEndMarker::SLBgplsTopoEndMarker(const SLBgplsTopoEndMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoEndMarker)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoEndMarker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoEndMarker::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoEndMarker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[4]);
}

// ===================================================================

class SLBgplsTopoNotif::_Internal {
 public:
};

SLBgplsTopoNotif::SLBgplsTopoNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNotif)
}
SLBgplsTopoNotif::SLBgplsTopoNotif(const SLBgplsTopoNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNotif)
}

inline void SLBgplsTopoNotif::SharedCtor() {
}

SLBgplsTopoNotif::~SLBgplsTopoNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNotif)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoNotif::ArenaDtor(void* object) {
  SLBgplsTopoNotif* _this = reinterpret_cast< SLBgplsTopoNotif* >(object);
  (void)_this;
}
void SLBgplsTopoNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNotif)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNotif::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNotif)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNotif)
  return target;
}

size_t SLBgplsTopoNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNotif)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNotif::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNotif::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNotif::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNotif::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNotif *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNotif &>(from));
}


void SLBgplsTopoNotif::MergeFrom(const SLBgplsTopoNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNotif)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNotif::CopyFrom(const SLBgplsTopoNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNotif::IsInitialized() const {
  return true;
}

void SLBgplsTopoNotif::InternalSwap(SLBgplsTopoNotif* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNotif::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[5]);
}

// ===================================================================

class SLBgplsTopoEntry::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoData& data(const SLBgplsTopoEntry* msg);
};

const ::service_layer::SLBgplsTopoData&
SLBgplsTopoEntry::_Internal::data(const SLBgplsTopoEntry* msg) {
  return *msg->data_;
}
SLBgplsTopoEntry::SLBgplsTopoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoEntry)
}
SLBgplsTopoEntry::SLBgplsTopoEntry(const SLBgplsTopoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::service_layer::SLBgplsTopoData(*from.data_);
  } else {
    data_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoEntry)
}

inline void SLBgplsTopoEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&data_)) + sizeof(operation_));
}

SLBgplsTopoEntry::~SLBgplsTopoEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SLBgplsTopoEntry::ArenaDtor(void* object) {
  SLBgplsTopoEntry* _this = reinterpret_cast< SLBgplsTopoEntry* >(object);
  (void)_this;
}
void SLBgplsTopoEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoOperation Operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::service_layer::SLBgplsTopoOperation>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoData Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoOperation Operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .service_layer.SLBgplsTopoData Data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoEntry)
  return target;
}

size_t SLBgplsTopoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoData Data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .service_layer.SLBgplsTopoOperation Operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoEntry::GetClassData() const { return &_class_data_; }

void SLBgplsTopoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoEntry *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoEntry &>(from));
}


void SLBgplsTopoEntry::MergeFrom(const SLBgplsTopoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::service_layer::SLBgplsTopoData::MergeFrom(from._internal_data());
  }
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoEntry::CopyFrom(const SLBgplsTopoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoEntry::IsInitialized() const {
  return true;
}

void SLBgplsTopoEntry::InternalSwap(SLBgplsTopoEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoEntry, operation_)
      + sizeof(SLBgplsTopoEntry::operation_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoEntry, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[6]);
}

// ===================================================================

class SLBgplsTopoData::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoInstanceId& instanceid(const SLBgplsTopoData* msg);
  static const ::service_layer::SLBgplsTopoNodeData& node(const SLBgplsTopoData* msg);
  static const ::service_layer::SLBgplsTopoLinkData& link(const SLBgplsTopoData* msg);
  static const ::service_layer::SLBgplsTopoPrefixData& prefix(const SLBgplsTopoData* msg);
};

const ::service_layer::SLBgplsTopoInstanceId&
SLBgplsTopoData::_Internal::instanceid(const SLBgplsTopoData* msg) {
  return *msg->instanceid_;
}
const ::service_layer::SLBgplsTopoNodeData&
SLBgplsTopoData::_Internal::node(const SLBgplsTopoData* msg) {
  return *msg->Data_.node_;
}
const ::service_layer::SLBgplsTopoLinkData&
SLBgplsTopoData::_Internal::link(const SLBgplsTopoData* msg) {
  return *msg->Data_.link_;
}
const ::service_layer::SLBgplsTopoPrefixData&
SLBgplsTopoData::_Internal::prefix(const SLBgplsTopoData* msg) {
  return *msg->Data_.prefix_;
}
void SLBgplsTopoData::set_allocated_node(::service_layer::SLBgplsTopoNodeData* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Data();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNodeData>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    Data_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoData.Node)
}
void SLBgplsTopoData::set_allocated_link(::service_layer::SLBgplsTopoLinkData* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Data();
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkData>::GetOwningArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    set_has_link();
    Data_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoData.Link)
}
void SLBgplsTopoData::set_allocated_prefix(::service_layer::SLBgplsTopoPrefixData* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Data();
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixData>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    set_has_prefix();
    Data_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoData.Prefix)
}
SLBgplsTopoData::SLBgplsTopoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoData)
}
SLBgplsTopoData::SLBgplsTopoData(const SLBgplsTopoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instanceid()) {
    instanceid_ = new ::service_layer::SLBgplsTopoInstanceId(*from.instanceid_);
  } else {
    instanceid_ = nullptr;
  }
  protocol_ = from.protocol_;
  clear_has_Data();
  switch (from.Data_case()) {
    case kNode: {
      _internal_mutable_node()->::service_layer::SLBgplsTopoNodeData::MergeFrom(from._internal_node());
      break;
    }
    case kLink: {
      _internal_mutable_link()->::service_layer::SLBgplsTopoLinkData::MergeFrom(from._internal_link());
      break;
    }
    case kPrefix: {
      _internal_mutable_prefix()->::service_layer::SLBgplsTopoPrefixData::MergeFrom(from._internal_prefix());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoData)
}

inline void SLBgplsTopoData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&instanceid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(protocol_));
clear_has_Data();
}

SLBgplsTopoData::~SLBgplsTopoData() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete instanceid_;
  if (has_Data()) {
    clear_Data();
  }
}

void SLBgplsTopoData::ArenaDtor(void* object) {
  SLBgplsTopoData* _this = reinterpret_cast< SLBgplsTopoData* >(object);
  (void)_this;
}
void SLBgplsTopoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoData::clear_Data() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoData)
  switch (Data_case()) {
    case kNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete Data_.node_;
      }
      break;
    }
    case kLink: {
      if (GetArenaForAllocation() == nullptr) {
        delete Data_.link_;
      }
      break;
    }
    case kPrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete Data_.prefix_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SLBgplsTopoData::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && instanceid_ != nullptr) {
    delete instanceid_;
  }
  instanceid_ = nullptr;
  protocol_ = 0;
  clear_Data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instanceid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoProtocol Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::service_layer::SLBgplsTopoProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeData Node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkData Link = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixData Prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
  if (this->_internal_has_instanceid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instanceid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protocol(), target);
  }

  // .service_layer.SLBgplsTopoNodeData Node = 3;
  if (_internal_has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::node(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkData Link = 4;
  if (_internal_has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::link(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixData Prefix = 5;
  if (_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::prefix(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoData)
  return target;
}

size_t SLBgplsTopoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
  if (this->_internal_has_instanceid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instanceid_);
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  switch (Data_case()) {
    // .service_layer.SLBgplsTopoNodeData Node = 3;
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.node_);
      break;
    }
    // .service_layer.SLBgplsTopoLinkData Link = 4;
    case kLink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.link_);
      break;
    }
    // .service_layer.SLBgplsTopoPrefixData Prefix = 5;
    case kPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.prefix_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoData::GetClassData() const { return &_class_data_; }

void SLBgplsTopoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoData *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoData &>(from));
}


void SLBgplsTopoData::MergeFrom(const SLBgplsTopoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instanceid()) {
    _internal_mutable_instanceid()->::service_layer::SLBgplsTopoInstanceId::MergeFrom(from._internal_instanceid());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  switch (from.Data_case()) {
    case kNode: {
      _internal_mutable_node()->::service_layer::SLBgplsTopoNodeData::MergeFrom(from._internal_node());
      break;
    }
    case kLink: {
      _internal_mutable_link()->::service_layer::SLBgplsTopoLinkData::MergeFrom(from._internal_link());
      break;
    }
    case kPrefix: {
      _internal_mutable_prefix()->::service_layer::SLBgplsTopoPrefixData::MergeFrom(from._internal_prefix());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoData::CopyFrom(const SLBgplsTopoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoData::IsInitialized() const {
  return true;
}

void SLBgplsTopoData::InternalSwap(SLBgplsTopoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoData, protocol_)
      + sizeof(SLBgplsTopoData::protocol_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoData, instanceid_)>(
          reinterpret_cast<char*>(&instanceid_),
          reinterpret_cast<char*>(&other->instanceid_));
  swap(Data_, other->Data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[7]);
}

// ===================================================================

class SLBgplsTopoInstanceId::_Internal {
 public:
};

SLBgplsTopoInstanceId::SLBgplsTopoInstanceId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoInstanceId)
}
SLBgplsTopoInstanceId::SLBgplsTopoInstanceId(const SLBgplsTopoInstanceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoInstanceId)
}

inline void SLBgplsTopoInstanceId::SharedCtor() {
identifier_ = uint64_t{0u};
}

SLBgplsTopoInstanceId::~SLBgplsTopoInstanceId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoInstanceId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoInstanceId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoInstanceId::ArenaDtor(void* object) {
  SLBgplsTopoInstanceId* _this = reinterpret_cast< SLBgplsTopoInstanceId* >(object);
  (void)_this;
}
void SLBgplsTopoInstanceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoInstanceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoInstanceId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoInstanceId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoInstanceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoInstanceId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoInstanceId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Identifier = 1;
  if (this->_internal_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoInstanceId)
  return target;
}

size_t SLBgplsTopoInstanceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoInstanceId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Identifier = 1;
  if (this->_internal_identifier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoInstanceId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoInstanceId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoInstanceId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoInstanceId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoInstanceId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoInstanceId &>(from));
}


void SLBgplsTopoInstanceId::MergeFrom(const SLBgplsTopoInstanceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoInstanceId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoInstanceId::CopyFrom(const SLBgplsTopoInstanceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoInstanceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoInstanceId::IsInitialized() const {
  return true;
}

void SLBgplsTopoInstanceId::InternalSwap(SLBgplsTopoInstanceId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(identifier_, other->identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoInstanceId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[8]);
}

// ===================================================================

class SLBgplsTopoNodeData::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNode& node(const SLBgplsTopoNodeData* msg);
  static const ::service_layer::SLBgplsTopoNodeAttr& nodeattr(const SLBgplsTopoNodeData* msg);
};

const ::service_layer::SLBgplsTopoNode&
SLBgplsTopoNodeData::_Internal::node(const SLBgplsTopoNodeData* msg) {
  return *msg->node_;
}
const ::service_layer::SLBgplsTopoNodeAttr&
SLBgplsTopoNodeData::_Internal::nodeattr(const SLBgplsTopoNodeData* msg) {
  return *msg->nodeattr_;
}
SLBgplsTopoNodeData::SLBgplsTopoNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeData)
}
SLBgplsTopoNodeData::SLBgplsTopoNodeData(const SLBgplsTopoNodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::service_layer::SLBgplsTopoNode(*from.node_);
  } else {
    node_ = nullptr;
  }
  if (from._internal_has_nodeattr()) {
    nodeattr_ = new ::service_layer::SLBgplsTopoNodeAttr(*from.nodeattr_);
  } else {
    nodeattr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeData)
}

inline void SLBgplsTopoNodeData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nodeattr_) -
    reinterpret_cast<char*>(&node_)) + sizeof(nodeattr_));
}

SLBgplsTopoNodeData::~SLBgplsTopoNodeData() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete nodeattr_;
}

void SLBgplsTopoNodeData::ArenaDtor(void* object) {
  SLBgplsTopoNodeData* _this = reinterpret_cast< SLBgplsTopoNodeData* >(object);
  (void)_this;
}
void SLBgplsTopoNodeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nodeattr_ != nullptr) {
    delete nodeattr_;
  }
  nodeattr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNode Node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNode Node = 1;
  if (this->_internal_has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 2;
  if (this->_internal_has_nodeattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nodeattr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeData)
  return target;
}

size_t SLBgplsTopoNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNode Node = 1;
  if (this->_internal_has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 2;
  if (this->_internal_has_nodeattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeattr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeData::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeData *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeData &>(from));
}


void SLBgplsTopoNodeData::MergeFrom(const SLBgplsTopoNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node()) {
    _internal_mutable_node()->::service_layer::SLBgplsTopoNode::MergeFrom(from._internal_node());
  }
  if (from._internal_has_nodeattr()) {
    _internal_mutable_nodeattr()->::service_layer::SLBgplsTopoNodeAttr::MergeFrom(from._internal_nodeattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeData::CopyFrom(const SLBgplsTopoNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeData::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeData::InternalSwap(SLBgplsTopoNodeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeData, nodeattr_)
      + sizeof(SLBgplsTopoNodeData::nodeattr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeData, node_)>(
          reinterpret_cast<char*>(&node_),
          reinterpret_cast<char*>(&other->node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[9]);
}

// ===================================================================

class SLBgplsTopoLinkData::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoLink& link(const SLBgplsTopoLinkData* msg);
  static const ::service_layer::SLBgplsTopoLinkAttr& linkattr(const SLBgplsTopoLinkData* msg);
};

const ::service_layer::SLBgplsTopoLink&
SLBgplsTopoLinkData::_Internal::link(const SLBgplsTopoLinkData* msg) {
  return *msg->link_;
}
const ::service_layer::SLBgplsTopoLinkAttr&
SLBgplsTopoLinkData::_Internal::linkattr(const SLBgplsTopoLinkData* msg) {
  return *msg->linkattr_;
}
SLBgplsTopoLinkData::SLBgplsTopoLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkData)
}
SLBgplsTopoLinkData::SLBgplsTopoLinkData(const SLBgplsTopoLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::service_layer::SLBgplsTopoLink(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_linkattr()) {
    linkattr_ = new ::service_layer::SLBgplsTopoLinkAttr(*from.linkattr_);
  } else {
    linkattr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkData)
}

inline void SLBgplsTopoLinkData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&link_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linkattr_) -
    reinterpret_cast<char*>(&link_)) + sizeof(linkattr_));
}

SLBgplsTopoLinkData::~SLBgplsTopoLinkData() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete linkattr_;
}

void SLBgplsTopoLinkData::ArenaDtor(void* object) {
  SLBgplsTopoLinkData* _this = reinterpret_cast< SLBgplsTopoLinkData* >(object);
  (void)_this;
}
void SLBgplsTopoLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linkattr_ != nullptr) {
    delete linkattr_;
  }
  linkattr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoLink Link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoLink Link = 1;
  if (this->_internal_has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
  if (this->_internal_has_linkattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linkattr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkData)
  return target;
}

size_t SLBgplsTopoLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoLink Link = 1;
  if (this->_internal_has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
  if (this->_internal_has_linkattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linkattr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkData::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkData *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkData &>(from));
}


void SLBgplsTopoLinkData::MergeFrom(const SLBgplsTopoLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_link()) {
    _internal_mutable_link()->::service_layer::SLBgplsTopoLink::MergeFrom(from._internal_link());
  }
  if (from._internal_has_linkattr()) {
    _internal_mutable_linkattr()->::service_layer::SLBgplsTopoLinkAttr::MergeFrom(from._internal_linkattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkData::CopyFrom(const SLBgplsTopoLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkData::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkData::InternalSwap(SLBgplsTopoLinkData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkData, linkattr_)
      + sizeof(SLBgplsTopoLinkData::linkattr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkData, link_)>(
          reinterpret_cast<char*>(&link_),
          reinterpret_cast<char*>(&other->link_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[10]);
}

// ===================================================================

class SLBgplsTopoPrefixData::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoPrefix& prefix(const SLBgplsTopoPrefixData* msg);
  static const ::service_layer::SLBgplsTopoPrefixAttr& prefixattr(const SLBgplsTopoPrefixData* msg);
};

const ::service_layer::SLBgplsTopoPrefix&
SLBgplsTopoPrefixData::_Internal::prefix(const SLBgplsTopoPrefixData* msg) {
  return *msg->prefix_;
}
const ::service_layer::SLBgplsTopoPrefixAttr&
SLBgplsTopoPrefixData::_Internal::prefixattr(const SLBgplsTopoPrefixData* msg) {
  return *msg->prefixattr_;
}
SLBgplsTopoPrefixData::SLBgplsTopoPrefixData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixData)
}
SLBgplsTopoPrefixData::SLBgplsTopoPrefixData(const SLBgplsTopoPrefixData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::service_layer::SLBgplsTopoPrefix(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_prefixattr()) {
    prefixattr_ = new ::service_layer::SLBgplsTopoPrefixAttr(*from.prefixattr_);
  } else {
    prefixattr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixData)
}

inline void SLBgplsTopoPrefixData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixattr_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(prefixattr_));
}

SLBgplsTopoPrefixData::~SLBgplsTopoPrefixData() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete prefixattr_;
}

void SLBgplsTopoPrefixData::ArenaDtor(void* object) {
  SLBgplsTopoPrefixData* _this = reinterpret_cast< SLBgplsTopoPrefixData* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixData::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && prefixattr_ != nullptr) {
    delete prefixattr_;
  }
  prefixattr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoPrefix Prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefixattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoPrefix Prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 2;
  if (this->_internal_has_prefixattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefixattr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixData)
  return target;
}

size_t SLBgplsTopoPrefixData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoPrefix Prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 2;
  if (this->_internal_has_prefixattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefixattr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixData::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixData *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixData &>(from));
}


void SLBgplsTopoPrefixData::MergeFrom(const SLBgplsTopoPrefixData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::service_layer::SLBgplsTopoPrefix::MergeFrom(from._internal_prefix());
  }
  if (from._internal_has_prefixattr()) {
    _internal_mutable_prefixattr()->::service_layer::SLBgplsTopoPrefixAttr::MergeFrom(from._internal_prefixattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixData::CopyFrom(const SLBgplsTopoPrefixData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixData::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixData::InternalSwap(SLBgplsTopoPrefixData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixData, prefixattr_)
      + sizeof(SLBgplsTopoPrefixData::prefixattr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixData, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[11]);
}

// ===================================================================

class SLBgplsTopoNode::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoOspfNodeId& ospfnodeid(const SLBgplsTopoNode* msg);
  static const ::service_layer::SLBgplsTopoOspfv3NodeId& ospfv3nodeid(const SLBgplsTopoNode* msg);
  static const ::service_layer::SLBgplsTopoIsisNodeId& isisnodeid(const SLBgplsTopoNode* msg);
  static const ::service_layer::SLBgplsTopoBgpNodeId& bgpnodeid(const SLBgplsTopoNode* msg);
};

const ::service_layer::SLBgplsTopoOspfNodeId&
SLBgplsTopoNode::_Internal::ospfnodeid(const SLBgplsTopoNode* msg) {
  return *msg->NodeId_.ospfnodeid_;
}
const ::service_layer::SLBgplsTopoOspfv3NodeId&
SLBgplsTopoNode::_Internal::ospfv3nodeid(const SLBgplsTopoNode* msg) {
  return *msg->NodeId_.ospfv3nodeid_;
}
const ::service_layer::SLBgplsTopoIsisNodeId&
SLBgplsTopoNode::_Internal::isisnodeid(const SLBgplsTopoNode* msg) {
  return *msg->NodeId_.isisnodeid_;
}
const ::service_layer::SLBgplsTopoBgpNodeId&
SLBgplsTopoNode::_Internal::bgpnodeid(const SLBgplsTopoNode* msg) {
  return *msg->NodeId_.bgpnodeid_;
}
void SLBgplsTopoNode::set_allocated_ospfnodeid(::service_layer::SLBgplsTopoOspfNodeId* ospfnodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (ospfnodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoOspfNodeId>::GetOwningArena(ospfnodeid);
    if (message_arena != submessage_arena) {
      ospfnodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ospfnodeid, submessage_arena);
    }
    set_has_ospfnodeid();
    NodeId_.ospfnodeid_ = ospfnodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNode.OspfNodeId)
}
void SLBgplsTopoNode::set_allocated_ospfv3nodeid(::service_layer::SLBgplsTopoOspfv3NodeId* ospfv3nodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (ospfv3nodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoOspfv3NodeId>::GetOwningArena(ospfv3nodeid);
    if (message_arena != submessage_arena) {
      ospfv3nodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ospfv3nodeid, submessage_arena);
    }
    set_has_ospfv3nodeid();
    NodeId_.ospfv3nodeid_ = ospfv3nodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNode.Ospfv3NodeId)
}
void SLBgplsTopoNode::set_allocated_isisnodeid(::service_layer::SLBgplsTopoIsisNodeId* isisnodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (isisnodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoIsisNodeId>::GetOwningArena(isisnodeid);
    if (message_arena != submessage_arena) {
      isisnodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, isisnodeid, submessage_arena);
    }
    set_has_isisnodeid();
    NodeId_.isisnodeid_ = isisnodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNode.IsisNodeId)
}
void SLBgplsTopoNode::set_allocated_bgpnodeid(::service_layer::SLBgplsTopoBgpNodeId* bgpnodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_NodeId();
  if (bgpnodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoBgpNodeId>::GetOwningArena(bgpnodeid);
    if (message_arena != submessage_arena) {
      bgpnodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgpnodeid, submessage_arena);
    }
    set_has_bgpnodeid();
    NodeId_.bgpnodeid_ = bgpnodeid;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNode.BgpNodeId)
}
SLBgplsTopoNode::SLBgplsTopoNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNode)
}
SLBgplsTopoNode::SLBgplsTopoNode(const SLBgplsTopoNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asn_ = from.asn_;
  clear_has_NodeId();
  switch (from.NodeId_case()) {
    case kOspfNodeId: {
      _internal_mutable_ospfnodeid()->::service_layer::SLBgplsTopoOspfNodeId::MergeFrom(from._internal_ospfnodeid());
      break;
    }
    case kOspfv3NodeId: {
      _internal_mutable_ospfv3nodeid()->::service_layer::SLBgplsTopoOspfv3NodeId::MergeFrom(from._internal_ospfv3nodeid());
      break;
    }
    case kIsisNodeId: {
      _internal_mutable_isisnodeid()->::service_layer::SLBgplsTopoIsisNodeId::MergeFrom(from._internal_isisnodeid());
      break;
    }
    case kBgpNodeId: {
      _internal_mutable_bgpnodeid()->::service_layer::SLBgplsTopoBgpNodeId::MergeFrom(from._internal_bgpnodeid());
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNode)
}

inline void SLBgplsTopoNode::SharedCtor() {
asn_ = 0u;
clear_has_NodeId();
}

SLBgplsTopoNode::~SLBgplsTopoNode() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_NodeId()) {
    clear_NodeId();
  }
}

void SLBgplsTopoNode::ArenaDtor(void* object) {
  SLBgplsTopoNode* _this = reinterpret_cast< SLBgplsTopoNode* >(object);
  (void)_this;
}
void SLBgplsTopoNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNode::clear_NodeId() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoNode)
  switch (NodeId_case()) {
    case kOspfNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.ospfnodeid_;
      }
      break;
    }
    case kOspfv3NodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.ospfv3nodeid_;
      }
      break;
    }
    case kIsisNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.isisnodeid_;
      }
      break;
    }
    case kBgpNodeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete NodeId_.bgpnodeid_;
      }
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODEID_NOT_SET;
}


void SLBgplsTopoNode::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asn_ = 0u;
  clear_NodeId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ospfnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ospfv3nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_isisnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Asn = 1;
  if (this->_internal_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
  if (_internal_has_ospfnodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ospfnodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
  if (_internal_has_ospfv3nodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ospfv3nodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
  if (_internal_has_isisnodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::isisnodeid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
  if (_internal_has_bgpnodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bgpnodeid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNode)
  return target;
}

size_t SLBgplsTopoNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Asn = 1;
  if (this->_internal_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_asn());
  }

  switch (NodeId_case()) {
    // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
    case kOspfNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.ospfnodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
    case kOspfv3NodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.ospfv3nodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
    case kIsisNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.isisnodeid_);
      break;
    }
    // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
    case kBgpNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NodeId_.bgpnodeid_);
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNode::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNode *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNode &>(from));
}


void SLBgplsTopoNode::MergeFrom(const SLBgplsTopoNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  switch (from.NodeId_case()) {
    case kOspfNodeId: {
      _internal_mutable_ospfnodeid()->::service_layer::SLBgplsTopoOspfNodeId::MergeFrom(from._internal_ospfnodeid());
      break;
    }
    case kOspfv3NodeId: {
      _internal_mutable_ospfv3nodeid()->::service_layer::SLBgplsTopoOspfv3NodeId::MergeFrom(from._internal_ospfv3nodeid());
      break;
    }
    case kIsisNodeId: {
      _internal_mutable_isisnodeid()->::service_layer::SLBgplsTopoIsisNodeId::MergeFrom(from._internal_isisnodeid());
      break;
    }
    case kBgpNodeId: {
      _internal_mutable_bgpnodeid()->::service_layer::SLBgplsTopoBgpNodeId::MergeFrom(from._internal_bgpnodeid());
      break;
    }
    case NODEID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNode::CopyFrom(const SLBgplsTopoNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNode::IsInitialized() const {
  return true;
}

void SLBgplsTopoNode::InternalSwap(SLBgplsTopoNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(asn_, other->asn_);
  swap(NodeId_, other->NodeId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[12]);
}

// ===================================================================

class SLBgplsTopoLink::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNode& localnodedescr(const SLBgplsTopoLink* msg);
  static const ::service_layer::SLBgplsTopoNode& remotenodedescr(const SLBgplsTopoLink* msg);
  static const ::service_layer::SLBgplsTopoLinkDescr& linkdescr(const SLBgplsTopoLink* msg);
};

const ::service_layer::SLBgplsTopoNode&
SLBgplsTopoLink::_Internal::localnodedescr(const SLBgplsTopoLink* msg) {
  return *msg->localnodedescr_;
}
const ::service_layer::SLBgplsTopoNode&
SLBgplsTopoLink::_Internal::remotenodedescr(const SLBgplsTopoLink* msg) {
  return *msg->remotenodedescr_;
}
const ::service_layer::SLBgplsTopoLinkDescr&
SLBgplsTopoLink::_Internal::linkdescr(const SLBgplsTopoLink* msg) {
  return *msg->linkdescr_;
}
SLBgplsTopoLink::SLBgplsTopoLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLink)
}
SLBgplsTopoLink::SLBgplsTopoLink(const SLBgplsTopoLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_localnodedescr()) {
    localnodedescr_ = new ::service_layer::SLBgplsTopoNode(*from.localnodedescr_);
  } else {
    localnodedescr_ = nullptr;
  }
  if (from._internal_has_remotenodedescr()) {
    remotenodedescr_ = new ::service_layer::SLBgplsTopoNode(*from.remotenodedescr_);
  } else {
    remotenodedescr_ = nullptr;
  }
  if (from._internal_has_linkdescr()) {
    linkdescr_ = new ::service_layer::SLBgplsTopoLinkDescr(*from.linkdescr_);
  } else {
    linkdescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLink)
}

inline void SLBgplsTopoLink::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&localnodedescr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linkdescr_) -
    reinterpret_cast<char*>(&localnodedescr_)) + sizeof(linkdescr_));
}

SLBgplsTopoLink::~SLBgplsTopoLink() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLink)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete localnodedescr_;
  if (this != internal_default_instance()) delete remotenodedescr_;
  if (this != internal_default_instance()) delete linkdescr_;
}

void SLBgplsTopoLink::ArenaDtor(void* object) {
  SLBgplsTopoLink* _this = reinterpret_cast< SLBgplsTopoLink* >(object);
  (void)_this;
}
void SLBgplsTopoLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLink::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && localnodedescr_ != nullptr) {
    delete localnodedescr_;
  }
  localnodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && remotenodedescr_ != nullptr) {
    delete remotenodedescr_;
  }
  remotenodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linkdescr_ != nullptr) {
    delete linkdescr_;
  }
  linkdescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNode LocalNodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localnodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNode RemoteNodeDescr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remotenodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkdescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNode LocalNodeDescr = 1;
  if (this->_internal_has_localnodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::localnodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNode RemoteNodeDescr = 2;
  if (this->_internal_has_remotenodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remotenodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
  if (this->_internal_has_linkdescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linkdescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLink)
  return target;
}

size_t SLBgplsTopoLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNode LocalNodeDescr = 1;
  if (this->_internal_has_localnodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localnodedescr_);
  }

  // .service_layer.SLBgplsTopoNode RemoteNodeDescr = 2;
  if (this->_internal_has_remotenodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remotenodedescr_);
  }

  // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
  if (this->_internal_has_linkdescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linkdescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLink::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLink *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLink &>(from));
}


void SLBgplsTopoLink::MergeFrom(const SLBgplsTopoLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLink)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_localnodedescr()) {
    _internal_mutable_localnodedescr()->::service_layer::SLBgplsTopoNode::MergeFrom(from._internal_localnodedescr());
  }
  if (from._internal_has_remotenodedescr()) {
    _internal_mutable_remotenodedescr()->::service_layer::SLBgplsTopoNode::MergeFrom(from._internal_remotenodedescr());
  }
  if (from._internal_has_linkdescr()) {
    _internal_mutable_linkdescr()->::service_layer::SLBgplsTopoLinkDescr::MergeFrom(from._internal_linkdescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLink::CopyFrom(const SLBgplsTopoLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLink::IsInitialized() const {
  return true;
}

void SLBgplsTopoLink::InternalSwap(SLBgplsTopoLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLink, linkdescr_)
      + sizeof(SLBgplsTopoLink::linkdescr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLink, localnodedescr_)>(
          reinterpret_cast<char*>(&localnodedescr_),
          reinterpret_cast<char*>(&other->localnodedescr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLink::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[13]);
}

// ===================================================================

class SLBgplsTopoPrefix::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNode& nodedescr(const SLBgplsTopoPrefix* msg);
  static const ::service_layer::SLBgplsTopoPrefixDescr& prefixdescr(const SLBgplsTopoPrefix* msg);
};

const ::service_layer::SLBgplsTopoNode&
SLBgplsTopoPrefix::_Internal::nodedescr(const SLBgplsTopoPrefix* msg) {
  return *msg->nodedescr_;
}
const ::service_layer::SLBgplsTopoPrefixDescr&
SLBgplsTopoPrefix::_Internal::prefixdescr(const SLBgplsTopoPrefix* msg) {
  return *msg->prefixdescr_;
}
SLBgplsTopoPrefix::SLBgplsTopoPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefix)
}
SLBgplsTopoPrefix::SLBgplsTopoPrefix(const SLBgplsTopoPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodedescr()) {
    nodedescr_ = new ::service_layer::SLBgplsTopoNode(*from.nodedescr_);
  } else {
    nodedescr_ = nullptr;
  }
  if (from._internal_has_prefixdescr()) {
    prefixdescr_ = new ::service_layer::SLBgplsTopoPrefixDescr(*from.prefixdescr_);
  } else {
    prefixdescr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefix)
}

inline void SLBgplsTopoPrefix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodedescr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixdescr_) -
    reinterpret_cast<char*>(&nodedescr_)) + sizeof(prefixdescr_));
}

SLBgplsTopoPrefix::~SLBgplsTopoPrefix() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodedescr_;
  if (this != internal_default_instance()) delete prefixdescr_;
}

void SLBgplsTopoPrefix::ArenaDtor(void* object) {
  SLBgplsTopoPrefix* _this = reinterpret_cast< SLBgplsTopoPrefix* >(object);
  (void)_this;
}
void SLBgplsTopoPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && prefixdescr_ != nullptr) {
    delete prefixdescr_;
  }
  prefixdescr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoNode NodeDescr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodedescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefixdescr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNode NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodedescr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
  if (this->_internal_has_prefixdescr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefixdescr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefix)
  return target;
}

size_t SLBgplsTopoPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoNode NodeDescr = 1;
  if (this->_internal_has_nodedescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodedescr_);
  }

  // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
  if (this->_internal_has_prefixdescr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefixdescr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefix::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefix *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefix &>(from));
}


void SLBgplsTopoPrefix::MergeFrom(const SLBgplsTopoPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodedescr()) {
    _internal_mutable_nodedescr()->::service_layer::SLBgplsTopoNode::MergeFrom(from._internal_nodedescr());
  }
  if (from._internal_has_prefixdescr()) {
    _internal_mutable_prefixdescr()->::service_layer::SLBgplsTopoPrefixDescr::MergeFrom(from._internal_prefixdescr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefix::CopyFrom(const SLBgplsTopoPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefix::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefix::InternalSwap(SLBgplsTopoPrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefix, prefixdescr_)
      + sizeof(SLBgplsTopoPrefix::prefixdescr_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefix, nodedescr_)>(
          reinterpret_cast<char*>(&nodedescr_),
          reinterpret_cast<char*>(&other->nodedescr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[14]);
}

// ===================================================================

class SLBgplsTopoLinkDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoMtId& mtid(const SLBgplsTopoLinkDescr* msg);
};

const ::service_layer::SLBgplsTopoMtId&
SLBgplsTopoLinkDescr::_Internal::mtid(const SLBgplsTopoLinkDescr* msg) {
  return *msg->mtid_;
}
SLBgplsTopoLinkDescr::SLBgplsTopoLinkDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkDescr)
}
SLBgplsTopoLinkDescr::SLBgplsTopoLinkDescr(const SLBgplsTopoLinkDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  localipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localipv4().empty()) {
    localipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localipv4(), 
      GetArenaForAllocation());
  }
  remoteipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remoteipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remoteipv4().empty()) {
    remoteipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remoteipv4(), 
      GetArenaForAllocation());
  }
  localipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localipv6().empty()) {
    localipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localipv6(), 
      GetArenaForAllocation());
  }
  remoteipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remoteipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remoteipv6().empty()) {
    remoteipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remoteipv6(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mtid()) {
    mtid_ = new ::service_layer::SLBgplsTopoMtId(*from.mtid_);
  } else {
    mtid_ = nullptr;
  }
  ::memcpy(&localid_, &from.localid_,
    static_cast<size_t>(reinterpret_cast<char*>(&remoteid_) -
    reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkDescr)
}

inline void SLBgplsTopoLinkDescr::SharedCtor() {
localipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remoteipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remoteipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
localipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remoteipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remoteipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remoteid_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(remoteid_));
}

SLBgplsTopoLinkDescr::~SLBgplsTopoLinkDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  localipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mtid_;
}

void SLBgplsTopoLinkDescr::ArenaDtor(void* object) {
  SLBgplsTopoLinkDescr* _this = reinterpret_cast< SLBgplsTopoLinkDescr* >(object);
  (void)_this;
}
void SLBgplsTopoLinkDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  localipv4_.ClearToEmpty();
  remoteipv4_.ClearToEmpty();
  localipv6_.ClearToEmpty();
  remoteipv6_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
  ::memset(&localid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remoteid_) -
      reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocalId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          localid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          remoteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes LocalIpv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_localipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RemoteIpv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_remoteipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes LocalIpv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_localipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RemoteIpv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_remoteipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMtId MtId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_localid(), target);
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remoteid(), target);
  }

  // bytes LocalIpv4 = 3;
  if (!this->_internal_localipv4().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_localipv4(), target);
  }

  // bytes RemoteIpv4 = 4;
  if (!this->_internal_remoteipv4().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_remoteipv4(), target);
  }

  // bytes LocalIpv6 = 5;
  if (!this->_internal_localipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_localipv6(), target);
  }

  // bytes RemoteIpv6 = 6;
  if (!this->_internal_remoteipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_remoteipv6(), target);
  }

  // .service_layer.SLBgplsTopoMtId MtId = 7;
  if (this->_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mtid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkDescr)
  return target;
}

size_t SLBgplsTopoLinkDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes LocalIpv4 = 3;
  if (!this->_internal_localipv4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_localipv4());
  }

  // bytes RemoteIpv4 = 4;
  if (!this->_internal_remoteipv4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remoteipv4());
  }

  // bytes LocalIpv6 = 5;
  if (!this->_internal_localipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_localipv6());
  }

  // bytes RemoteIpv6 = 6;
  if (!this->_internal_remoteipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remoteipv6());
  }

  // .service_layer.SLBgplsTopoMtId MtId = 7;
  if (this->_internal_has_mtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtid_);
  }

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localid());
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remoteid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkDescr &>(from));
}


void SLBgplsTopoLinkDescr::MergeFrom(const SLBgplsTopoLinkDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_localipv4().empty()) {
    _internal_set_localipv4(from._internal_localipv4());
  }
  if (!from._internal_remoteipv4().empty()) {
    _internal_set_remoteipv4(from._internal_remoteipv4());
  }
  if (!from._internal_localipv6().empty()) {
    _internal_set_localipv6(from._internal_localipv6());
  }
  if (!from._internal_remoteipv6().empty()) {
    _internal_set_remoteipv6(from._internal_remoteipv6());
  }
  if (from._internal_has_mtid()) {
    _internal_mutable_mtid()->::service_layer::SLBgplsTopoMtId::MergeFrom(from._internal_mtid());
  }
  if (from._internal_localid() != 0) {
    _internal_set_localid(from._internal_localid());
  }
  if (from._internal_remoteid() != 0) {
    _internal_set_remoteid(from._internal_remoteid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkDescr::CopyFrom(const SLBgplsTopoLinkDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkDescr::InternalSwap(SLBgplsTopoLinkDescr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localipv4_, lhs_arena,
      &other->localipv4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remoteipv4_, lhs_arena,
      &other->remoteipv4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localipv6_, lhs_arena,
      &other->localipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remoteipv6_, lhs_arena,
      &other->remoteipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkDescr, remoteid_)
      + sizeof(SLBgplsTopoLinkDescr::remoteid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkDescr, mtid_)>(
          reinterpret_cast<char*>(&mtid_),
          reinterpret_cast<char*>(&other->mtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[15]);
}

// ===================================================================

class SLBgplsTopoPrefixDescr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoMtId& mtid(const SLBgplsTopoPrefixDescr* msg);
};

const ::service_layer::SLBgplsTopoMtId&
SLBgplsTopoPrefixDescr::_Internal::mtid(const SLBgplsTopoPrefixDescr* msg) {
  return *msg->mtid_;
}
SLBgplsTopoPrefixDescr::SLBgplsTopoPrefixDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixDescr)
}
SLBgplsTopoPrefixDescr::SLBgplsTopoPrefixDescr(const SLBgplsTopoPrefixDescr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mtid()) {
    mtid_ = new ::service_layer::SLBgplsTopoMtId(*from.mtid_);
  } else {
    mtid_ = nullptr;
  }
  ::memcpy(&ospfroutetype_, &from.ospfroutetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefixlength_) -
    reinterpret_cast<char*>(&ospfroutetype_)) + sizeof(prefixlength_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixDescr)
}

inline void SLBgplsTopoPrefixDescr::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixlength_) -
    reinterpret_cast<char*>(&mtid_)) + sizeof(prefixlength_));
}

SLBgplsTopoPrefixDescr::~SLBgplsTopoPrefixDescr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixDescr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixDescr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mtid_;
}

void SLBgplsTopoPrefixDescr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixDescr* _this = reinterpret_cast< SLBgplsTopoPrefixDescr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixDescr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixDescr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixDescr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixDescr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
  ::memset(&ospfroutetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefixlength_) -
      reinterpret_cast<char*>(&ospfroutetype_)) + sizeof(prefixlength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixDescr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoMtId MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ospfroutetype(static_cast<::service_layer::SLBgplsTopoOspfRouteType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 PrefixLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prefixlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixDescr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixDescr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  if (this->_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mtid(this), target, stream);
  }

  // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
  if (this->_internal_ospfroutetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ospfroutetype(), target);
  }

  // uint32 PrefixLength = 3;
  if (this->_internal_prefixlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefixlength(), target);
  }

  // bytes Prefix = 4;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixDescr)
  return target;
}

size_t SLBgplsTopoPrefixDescr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixDescr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Prefix = 4;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  if (this->_internal_has_mtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtid_);
  }

  // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
  if (this->_internal_ospfroutetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ospfroutetype());
  }

  // uint32 PrefixLength = 3;
  if (this->_internal_prefixlength() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prefixlength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixDescr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixDescr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixDescr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixDescr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixDescr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixDescr &>(from));
}


void SLBgplsTopoPrefixDescr::MergeFrom(const SLBgplsTopoPrefixDescr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixDescr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_has_mtid()) {
    _internal_mutable_mtid()->::service_layer::SLBgplsTopoMtId::MergeFrom(from._internal_mtid());
  }
  if (from._internal_ospfroutetype() != 0) {
    _internal_set_ospfroutetype(from._internal_ospfroutetype());
  }
  if (from._internal_prefixlength() != 0) {
    _internal_set_prefixlength(from._internal_prefixlength());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixDescr::CopyFrom(const SLBgplsTopoPrefixDescr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixDescr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixDescr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixDescr::InternalSwap(SLBgplsTopoPrefixDescr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixDescr, prefixlength_)
      + sizeof(SLBgplsTopoPrefixDescr::prefixlength_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixDescr, mtid_)>(
          reinterpret_cast<char*>(&mtid_),
          reinterpret_cast<char*>(&other->mtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixDescr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[16]);
}

// ===================================================================

class SLBgplsTopoOspfNodeId::_Internal {
 public:
};

SLBgplsTopoOspfNodeId::SLBgplsTopoOspfNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoOspfNodeId)
}
SLBgplsTopoOspfNodeId::SLBgplsTopoOspfNodeId(const SLBgplsTopoOspfNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  dridentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dridentifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dridentifier().empty()) {
    dridentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dridentifier(), 
      GetArenaForAllocation());
  }
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isasscoped_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(isasscoped_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoOspfNodeId)
}

inline void SLBgplsTopoOspfNodeId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dridentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dridentifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&areaid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isasscoped_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(isasscoped_));
}

SLBgplsTopoOspfNodeId::~SLBgplsTopoOspfNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoOspfNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoOspfNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dridentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoOspfNodeId::ArenaDtor(void* object) {
  SLBgplsTopoOspfNodeId* _this = reinterpret_cast< SLBgplsTopoOspfNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoOspfNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoOspfNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoOspfNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoOspfNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  dridentifier_.ClearToEmpty();
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isasscoped_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(isasscoped_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoOspfNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 AreaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 IsAsScoped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          isasscoped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes DrIdentifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dridentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoOspfNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoOspfNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areaid(), target);
  }

  // uint32 IsAsScoped = 2;
  if (this->_internal_isasscoped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_isasscoped(), target);
  }

  // bytes RouterId = 3;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_routerid(), target);
  }

  // bytes DrIdentifier = 4;
  if (!this->_internal_dridentifier().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_dridentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoOspfNodeId)
  return target;
}

size_t SLBgplsTopoOspfNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoOspfNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 3;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  // bytes DrIdentifier = 4;
  if (!this->_internal_dridentifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dridentifier());
  }

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areaid());
  }

  // uint32 IsAsScoped = 2;
  if (this->_internal_isasscoped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_isasscoped());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoOspfNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoOspfNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoOspfNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoOspfNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoOspfNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoOspfNodeId &>(from));
}


void SLBgplsTopoOspfNodeId::MergeFrom(const SLBgplsTopoOspfNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoOspfNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (!from._internal_dridentifier().empty()) {
    _internal_set_dridentifier(from._internal_dridentifier());
  }
  if (from._internal_areaid() != 0) {
    _internal_set_areaid(from._internal_areaid());
  }
  if (from._internal_isasscoped() != 0) {
    _internal_set_isasscoped(from._internal_isasscoped());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoOspfNodeId::CopyFrom(const SLBgplsTopoOspfNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoOspfNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoOspfNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoOspfNodeId::InternalSwap(SLBgplsTopoOspfNodeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dridentifier_, lhs_arena,
      &other->dridentifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfNodeId, isasscoped_)
      + sizeof(SLBgplsTopoOspfNodeId::isasscoped_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfNodeId, areaid_)>(
          reinterpret_cast<char*>(&areaid_),
          reinterpret_cast<char*>(&other->areaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoOspfNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[17]);
}

// ===================================================================

class SLBgplsTopoOspfv3NodeId::_Internal {
 public:
};

SLBgplsTopoOspfv3NodeId::SLBgplsTopoOspfv3NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoOspfv3NodeId)
}
SLBgplsTopoOspfv3NodeId::SLBgplsTopoOspfv3NodeId(const SLBgplsTopoOspfv3NodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dridentifier_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoOspfv3NodeId)
}

inline void SLBgplsTopoOspfv3NodeId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&areaid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dridentifier_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
}

SLBgplsTopoOspfv3NodeId::~SLBgplsTopoOspfv3NodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoOspfv3NodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoOspfv3NodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoOspfv3NodeId::ArenaDtor(void* object) {
  SLBgplsTopoOspfv3NodeId* _this = reinterpret_cast< SLBgplsTopoOspfv3NodeId* >(object);
  (void)_this;
}
void SLBgplsTopoOspfv3NodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoOspfv3NodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoOspfv3NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoOspfv3NodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dridentifier_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(dridentifier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoOspfv3NodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 AreaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AsScoped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          asscoped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DrIdentifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dridentifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoOspfv3NodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoOspfv3NodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areaid(), target);
  }

  // uint32 AsScoped = 2;
  if (this->_internal_asscoped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asscoped(), target);
  }

  // bytes RouterId = 3;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_routerid(), target);
  }

  // uint32 DrIdentifier = 4;
  if (this->_internal_dridentifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dridentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoOspfv3NodeId)
  return target;
}

size_t SLBgplsTopoOspfv3NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoOspfv3NodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 3;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  // uint32 AreaId = 1;
  if (this->_internal_areaid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areaid());
  }

  // uint32 AsScoped = 2;
  if (this->_internal_asscoped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_asscoped());
  }

  // uint32 DrIdentifier = 4;
  if (this->_internal_dridentifier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dridentifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoOspfv3NodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoOspfv3NodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoOspfv3NodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoOspfv3NodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoOspfv3NodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoOspfv3NodeId &>(from));
}


void SLBgplsTopoOspfv3NodeId::MergeFrom(const SLBgplsTopoOspfv3NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoOspfv3NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (from._internal_areaid() != 0) {
    _internal_set_areaid(from._internal_areaid());
  }
  if (from._internal_asscoped() != 0) {
    _internal_set_asscoped(from._internal_asscoped());
  }
  if (from._internal_dridentifier() != 0) {
    _internal_set_dridentifier(from._internal_dridentifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoOspfv3NodeId::CopyFrom(const SLBgplsTopoOspfv3NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoOspfv3NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoOspfv3NodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoOspfv3NodeId::InternalSwap(SLBgplsTopoOspfv3NodeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfv3NodeId, dridentifier_)
      + sizeof(SLBgplsTopoOspfv3NodeId::dridentifier_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoOspfv3NodeId, areaid_)>(
          reinterpret_cast<char*>(&areaid_),
          reinterpret_cast<char*>(&other->areaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoOspfv3NodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[18]);
}

// ===================================================================

class SLBgplsTopoIsisNodeId::_Internal {
 public:
};

SLBgplsTopoIsisNodeId::SLBgplsTopoIsisNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoIsisNodeId)
}
SLBgplsTopoIsisNodeId::SLBgplsTopoIsisNodeId(const SLBgplsTopoIsisNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    systemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_systemid().empty()) {
    systemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_systemid(), 
      GetArenaForAllocation());
  }
  psnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    psnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_psnid().empty()) {
    psnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_psnid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoIsisNodeId)
}

inline void SLBgplsTopoIsisNodeId::SharedCtor() {
systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  systemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
psnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  psnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoIsisNodeId::~SLBgplsTopoIsisNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoIsisNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoIsisNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  systemid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psnid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoIsisNodeId::ArenaDtor(void* object) {
  SLBgplsTopoIsisNodeId* _this = reinterpret_cast< SLBgplsTopoIsisNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoIsisNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoIsisNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoIsisNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoIsisNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  systemid_.ClearToEmpty();
  psnid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoIsisNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes SystemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_systemid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes PsnId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_psnid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoIsisNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoIsisNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SystemId = 1;
  if (!this->_internal_systemid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_systemid(), target);
  }

  // bytes PsnId = 2;
  if (!this->_internal_psnid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_psnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoIsisNodeId)
  return target;
}

size_t SLBgplsTopoIsisNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoIsisNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SystemId = 1;
  if (!this->_internal_systemid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_systemid());
  }

  // bytes PsnId = 2;
  if (!this->_internal_psnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_psnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoIsisNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoIsisNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoIsisNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoIsisNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoIsisNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoIsisNodeId &>(from));
}


void SLBgplsTopoIsisNodeId::MergeFrom(const SLBgplsTopoIsisNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoIsisNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_systemid().empty()) {
    _internal_set_systemid(from._internal_systemid());
  }
  if (!from._internal_psnid().empty()) {
    _internal_set_psnid(from._internal_psnid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoIsisNodeId::CopyFrom(const SLBgplsTopoIsisNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoIsisNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoIsisNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoIsisNodeId::InternalSwap(SLBgplsTopoIsisNodeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &systemid_, lhs_arena,
      &other->systemid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &psnid_, lhs_arena,
      &other->psnid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoIsisNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[19]);
}

// ===================================================================

class SLBgplsTopoBgpNodeId::_Internal {
 public:
};

SLBgplsTopoBgpNodeId::SLBgplsTopoBgpNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoBgpNodeId)
}
SLBgplsTopoBgpNodeId::SLBgplsTopoBgpNodeId(const SLBgplsTopoBgpNodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  memberasn_ = from.memberasn_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoBgpNodeId)
}

inline void SLBgplsTopoBgpNodeId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memberasn_ = 0u;
}

SLBgplsTopoBgpNodeId::~SLBgplsTopoBgpNodeId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoBgpNodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoBgpNodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoBgpNodeId::ArenaDtor(void* object) {
  SLBgplsTopoBgpNodeId* _this = reinterpret_cast< SLBgplsTopoBgpNodeId* >(object);
  (void)_this;
}
void SLBgplsTopoBgpNodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoBgpNodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoBgpNodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoBgpNodeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  memberasn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoBgpNodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MemberAsn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          memberasn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoBgpNodeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoBgpNodeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  // uint32 MemberAsn = 2;
  if (this->_internal_memberasn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_memberasn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoBgpNodeId)
  return target;
}

size_t SLBgplsTopoBgpNodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoBgpNodeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  // uint32 MemberAsn = 2;
  if (this->_internal_memberasn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_memberasn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoBgpNodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoBgpNodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoBgpNodeId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoBgpNodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoBgpNodeId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoBgpNodeId &>(from));
}


void SLBgplsTopoBgpNodeId::MergeFrom(const SLBgplsTopoBgpNodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoBgpNodeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  if (from._internal_memberasn() != 0) {
    _internal_set_memberasn(from._internal_memberasn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoBgpNodeId::CopyFrom(const SLBgplsTopoBgpNodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoBgpNodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoBgpNodeId::IsInitialized() const {
  return true;
}

void SLBgplsTopoBgpNodeId::InternalSwap(SLBgplsTopoBgpNodeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
  swap(memberasn_, other->memberasn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoBgpNodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[20]);
}

// ===================================================================

class SLBgplsTopoNodeAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoNodeFlagBits& nodeflagbits(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsTopoNodeOpaqueAttr& opaquenodeattr(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsNodeName& nodename(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsTopoSrgbIsisFlags& srgbisisflags(const SLBgplsTopoNodeAttr* msg);
  static const ::service_layer::SLBgplsTopoSrAlgorithm& sralgorithm(const SLBgplsTopoNodeAttr* msg);
};

const ::service_layer::SLBgplsTopoNodeFlagBits&
SLBgplsTopoNodeAttr::_Internal::nodeflagbits(const SLBgplsTopoNodeAttr* msg) {
  return *msg->nodeflagbits_;
}
const ::service_layer::SLBgplsTopoNodeOpaqueAttr&
SLBgplsTopoNodeAttr::_Internal::opaquenodeattr(const SLBgplsTopoNodeAttr* msg) {
  return *msg->opaquenodeattr_;
}
const ::service_layer::SLBgplsNodeName&
SLBgplsTopoNodeAttr::_Internal::nodename(const SLBgplsTopoNodeAttr* msg) {
  return *msg->nodename_;
}
const ::service_layer::SLBgplsTopoSrgbIsisFlags&
SLBgplsTopoNodeAttr::_Internal::srgbisisflags(const SLBgplsTopoNodeAttr* msg) {
  return *msg->srgbisisflags_;
}
const ::service_layer::SLBgplsTopoSrAlgorithm&
SLBgplsTopoNodeAttr::_Internal::sralgorithm(const SLBgplsTopoNodeAttr* msg) {
  return *msg->sralgorithm_;
}
SLBgplsTopoNodeAttr::SLBgplsTopoNodeAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mtid_(arena),
  nodemsd_(arena),
  isisareaid_(arena),
  localipv4_(arena),
  localipv6_(arena),
  srgb_(arena),
  srlb_(arena),
  fad_(arena),
  unknownattr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeAttr)
}
SLBgplsTopoNodeAttr::SLBgplsTopoNodeAttr(const SLBgplsTopoNodeAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mtid_(from.mtid_),
      nodemsd_(from.nodemsd_),
      isisareaid_(from.isisareaid_),
      localipv4_(from.localipv4_),
      localipv6_(from.localipv6_),
      srgb_(from.srgb_),
      srlb_(from.srlb_),
      fad_(from.fad_),
      unknownattr_(from.unknownattr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodeflagbits()) {
    nodeflagbits_ = new ::service_layer::SLBgplsTopoNodeFlagBits(*from.nodeflagbits_);
  } else {
    nodeflagbits_ = nullptr;
  }
  if (from._internal_has_opaquenodeattr()) {
    opaquenodeattr_ = new ::service_layer::SLBgplsTopoNodeOpaqueAttr(*from.opaquenodeattr_);
  } else {
    opaquenodeattr_ = nullptr;
  }
  if (from._internal_has_nodename()) {
    nodename_ = new ::service_layer::SLBgplsNodeName(*from.nodename_);
  } else {
    nodename_ = nullptr;
  }
  if (from._internal_has_srgbisisflags()) {
    srgbisisflags_ = new ::service_layer::SLBgplsTopoSrgbIsisFlags(*from.srgbisisflags_);
  } else {
    srgbisisflags_ = nullptr;
  }
  if (from._internal_has_sralgorithm()) {
    sralgorithm_ = new ::service_layer::SLBgplsTopoSrAlgorithm(*from.sralgorithm_);
  } else {
    sralgorithm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeAttr)
}

inline void SLBgplsTopoNodeAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodeflagbits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sralgorithm_) -
    reinterpret_cast<char*>(&nodeflagbits_)) + sizeof(sralgorithm_));
}

SLBgplsTopoNodeAttr::~SLBgplsTopoNodeAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodeflagbits_;
  if (this != internal_default_instance()) delete opaquenodeattr_;
  if (this != internal_default_instance()) delete nodename_;
  if (this != internal_default_instance()) delete srgbisisflags_;
  if (this != internal_default_instance()) delete sralgorithm_;
}

void SLBgplsTopoNodeAttr::ArenaDtor(void* object) {
  SLBgplsTopoNodeAttr* _this = reinterpret_cast< SLBgplsTopoNodeAttr* >(object);
  (void)_this;
}
void SLBgplsTopoNodeAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtid_.Clear();
  nodemsd_.Clear();
  isisareaid_.Clear();
  localipv4_.Clear();
  localipv6_.Clear();
  srgb_.Clear();
  srlb_.Clear();
  fad_.Clear();
  unknownattr_.Clear();
  if (GetArenaForAllocation() == nullptr && nodeflagbits_ != nullptr) {
    delete nodeflagbits_;
  }
  nodeflagbits_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opaquenodeattr_ != nullptr) {
    delete opaquenodeattr_;
  }
  opaquenodeattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nodename_ != nullptr) {
    delete nodename_;
  }
  nodename_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srgbisisflags_ != nullptr) {
    delete srgbisisflags_;
  }
  srgbisisflags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sralgorithm_ != nullptr) {
    delete sralgorithm_;
  }
  sralgorithm_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mtid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodemsd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeflagbits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaquenodeattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsNodeName NodeName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_isisareaid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv6(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_srgbisisflags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srgb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sralgorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srlb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoFad Fad = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unknownattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mtid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mtid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodemsd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nodemsd(i), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
  if (this->_internal_has_nodeflagbits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nodeflagbits(this), target, stream);
  }

  // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
  if (this->_internal_has_opaquenodeattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::opaquenodeattr(this), target, stream);
  }

  // .service_layer.SLBgplsNodeName NodeName = 5;
  if (this->_internal_has_nodename()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nodename(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_isisareaid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_isisareaid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv4_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_localipv4(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv6_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_localipv6(i), target, stream);
  }

  // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
  if (this->_internal_has_srgbisisflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::srgbisisflags(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srgb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_srgb(i), target, stream);
  }

  // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
  if (this->_internal_has_sralgorithm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::sralgorithm(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srlb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_srlb(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoFad Fad = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_fad(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unknownattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_unknownattr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeAttr)
  return target;
}

size_t SLBgplsTopoNodeAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
  total_size += 1UL * this->_internal_mtid_size();
  for (const auto& msg : this->mtid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
  total_size += 1UL * this->_internal_nodemsd_size();
  for (const auto& msg : this->nodemsd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
  total_size += 1UL * this->_internal_isisareaid_size();
  for (const auto& msg : this->isisareaid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
  total_size += 1UL * this->_internal_localipv4_size();
  for (const auto& msg : this->localipv4_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
  total_size += 1UL * this->_internal_localipv6_size();
  for (const auto& msg : this->localipv6_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
  total_size += 1UL * this->_internal_srgb_size();
  for (const auto& msg : this->srgb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
  total_size += 1UL * this->_internal_srlb_size();
  for (const auto& msg : this->srlb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoFad Fad = 13;
  total_size += 1UL * this->_internal_fad_size();
  for (const auto& msg : this->fad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
  total_size += 1UL * this->_internal_unknownattr_size();
  for (const auto& msg : this->unknownattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
  if (this->_internal_has_nodeflagbits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeflagbits_);
  }

  // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
  if (this->_internal_has_opaquenodeattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opaquenodeattr_);
  }

  // .service_layer.SLBgplsNodeName NodeName = 5;
  if (this->_internal_has_nodename()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodename_);
  }

  // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
  if (this->_internal_has_srgbisisflags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srgbisisflags_);
  }

  // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
  if (this->_internal_has_sralgorithm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sralgorithm_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeAttr &>(from));
}


void SLBgplsTopoNodeAttr::MergeFrom(const SLBgplsTopoNodeAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mtid_.MergeFrom(from.mtid_);
  nodemsd_.MergeFrom(from.nodemsd_);
  isisareaid_.MergeFrom(from.isisareaid_);
  localipv4_.MergeFrom(from.localipv4_);
  localipv6_.MergeFrom(from.localipv6_);
  srgb_.MergeFrom(from.srgb_);
  srlb_.MergeFrom(from.srlb_);
  fad_.MergeFrom(from.fad_);
  unknownattr_.MergeFrom(from.unknownattr_);
  if (from._internal_has_nodeflagbits()) {
    _internal_mutable_nodeflagbits()->::service_layer::SLBgplsTopoNodeFlagBits::MergeFrom(from._internal_nodeflagbits());
  }
  if (from._internal_has_opaquenodeattr()) {
    _internal_mutable_opaquenodeattr()->::service_layer::SLBgplsTopoNodeOpaqueAttr::MergeFrom(from._internal_opaquenodeattr());
  }
  if (from._internal_has_nodename()) {
    _internal_mutable_nodename()->::service_layer::SLBgplsNodeName::MergeFrom(from._internal_nodename());
  }
  if (from._internal_has_srgbisisflags()) {
    _internal_mutable_srgbisisflags()->::service_layer::SLBgplsTopoSrgbIsisFlags::MergeFrom(from._internal_srgbisisflags());
  }
  if (from._internal_has_sralgorithm()) {
    _internal_mutable_sralgorithm()->::service_layer::SLBgplsTopoSrAlgorithm::MergeFrom(from._internal_sralgorithm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeAttr::CopyFrom(const SLBgplsTopoNodeAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeAttr::InternalSwap(SLBgplsTopoNodeAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mtid_.InternalSwap(&other->mtid_);
  nodemsd_.InternalSwap(&other->nodemsd_);
  isisareaid_.InternalSwap(&other->isisareaid_);
  localipv4_.InternalSwap(&other->localipv4_);
  localipv6_.InternalSwap(&other->localipv6_);
  srgb_.InternalSwap(&other->srgb_);
  srlb_.InternalSwap(&other->srlb_);
  fad_.InternalSwap(&other->fad_);
  unknownattr_.InternalSwap(&other->unknownattr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeAttr, sralgorithm_)
      + sizeof(SLBgplsTopoNodeAttr::sralgorithm_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeAttr, nodeflagbits_)>(
          reinterpret_cast<char*>(&nodeflagbits_),
          reinterpret_cast<char*>(&other->nodeflagbits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[21]);
}

// ===================================================================

class SLBgplsTopoLinkAttr::_Internal {
 public:
  static const ::service_layer::SLBplsTopoLinkLocRemId& linklocremid(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoAdminGroup& admingroup(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxBandwidth& maxbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& maxresvbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkProtectionType& protectiontype(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMplsProtoMask& mplsprotomask(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkIgpMetric& igpmetric(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkOpaqueAttr& opaqueattr(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkName& linkname(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxunilinkdelay(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvar(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth(const SLBgplsTopoLinkAttr* msg);
  static const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth(const SLBgplsTopoLinkAttr* msg);
};

const ::service_layer::SLBplsTopoLinkLocRemId&
SLBgplsTopoLinkAttr::_Internal::linklocremid(const SLBgplsTopoLinkAttr* msg) {
  return *msg->linklocremid_;
}
const ::service_layer::SLBgplsTopoAdminGroup&
SLBgplsTopoLinkAttr::_Internal::admingroup(const SLBgplsTopoLinkAttr* msg) {
  return *msg->admingroup_;
}
const ::service_layer::SLBgplsTopoLinkMaxBandwidth&
SLBgplsTopoLinkAttr::_Internal::maxbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->maxbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth&
SLBgplsTopoLinkAttr::_Internal::maxresvbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->maxresvbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&
SLBgplsTopoLinkAttr::_Internal::tedefmetric(const SLBgplsTopoLinkAttr* msg) {
  return *msg->tedefmetric_;
}
const ::service_layer::SLBgplsTopoLinkProtectionType&
SLBgplsTopoLinkAttr::_Internal::protectiontype(const SLBgplsTopoLinkAttr* msg) {
  return *msg->protectiontype_;
}
const ::service_layer::SLBgplsTopoLinkMplsProtoMask&
SLBgplsTopoLinkAttr::_Internal::mplsprotomask(const SLBgplsTopoLinkAttr* msg) {
  return *msg->mplsprotomask_;
}
const ::service_layer::SLBgplsTopoLinkIgpMetric&
SLBgplsTopoLinkAttr::_Internal::igpmetric(const SLBgplsTopoLinkAttr* msg) {
  return *msg->igpmetric_;
}
const ::service_layer::SLBgplsTopoLinkOpaqueAttr&
SLBgplsTopoLinkAttr::_Internal::opaqueattr(const SLBgplsTopoLinkAttr* msg) {
  return *msg->opaqueattr_;
}
const ::service_layer::SLBgplsTopoLinkName&
SLBgplsTopoLinkAttr::_Internal::linkname(const SLBgplsTopoLinkAttr* msg) {
  return *msg->linkname_;
}
const ::service_layer::SLBgplsTopoUniLinkDelay&
SLBgplsTopoLinkAttr::_Internal::unilinkdelay(const SLBgplsTopoLinkAttr* msg) {
  return *msg->unilinkdelay_;
}
const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&
SLBgplsTopoLinkAttr::_Internal::minmaxunilinkdelay(const SLBgplsTopoLinkAttr* msg) {
  return *msg->minmaxunilinkdelay_;
}
const ::service_layer::SLBgplsTopoUniDelayVar&
SLBgplsTopoLinkAttr::_Internal::unidelayvar(const SLBgplsTopoLinkAttr* msg) {
  return *msg->unidelayvar_;
}
const ::service_layer::SLBgplsTopoUniLinkLoss&
SLBgplsTopoLinkAttr::_Internal::unilinkloss(const SLBgplsTopoLinkAttr* msg) {
  return *msg->unilinkloss_;
}
const ::service_layer::SLBgplsTopoUniResBandwidth&
SLBgplsTopoLinkAttr::_Internal::uniresbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->uniresbandwidth_;
}
const ::service_layer::SLBgplsTopoUniAvailBandwidth&
SLBgplsTopoLinkAttr::_Internal::uniavailbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->uniavailbandwidth_;
}
const ::service_layer::SLBgplsTopoUniUtilBandwidth&
SLBgplsTopoLinkAttr::_Internal::uniutilbandwidth(const SLBgplsTopoLinkAttr* msg) {
  return *msg->uniutilbandwidth_;
}
SLBgplsTopoLinkAttr::SLBgplsTopoLinkAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  linkmsd_(arena),
  localipv4routerid_(arena),
  localipv6routerid_(arena),
  remoteipv4routerid_(arena),
  remoteipv6routerid_(arena),
  unresvbandwidth_(arena),
  srlg_(arena),
  adjsid_(arena),
  lanadjsid_(arena),
  bgppeernodesid_(arena),
  bgppeeradjsid_(arena),
  bgppeersetsid_(arena),
  asla_(arena),
  l2bundlememberattr_(arena),
  extadmingroup_(arena),
  unknownattr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkAttr)
}
SLBgplsTopoLinkAttr::SLBgplsTopoLinkAttr(const SLBgplsTopoLinkAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linkmsd_(from.linkmsd_),
      localipv4routerid_(from.localipv4routerid_),
      localipv6routerid_(from.localipv6routerid_),
      remoteipv4routerid_(from.remoteipv4routerid_),
      remoteipv6routerid_(from.remoteipv6routerid_),
      unresvbandwidth_(from.unresvbandwidth_),
      srlg_(from.srlg_),
      adjsid_(from.adjsid_),
      lanadjsid_(from.lanadjsid_),
      bgppeernodesid_(from.bgppeernodesid_),
      bgppeeradjsid_(from.bgppeeradjsid_),
      bgppeersetsid_(from.bgppeersetsid_),
      asla_(from.asla_),
      l2bundlememberattr_(from.l2bundlememberattr_),
      extadmingroup_(from.extadmingroup_),
      unknownattr_(from.unknownattr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linklocremid()) {
    linklocremid_ = new ::service_layer::SLBplsTopoLinkLocRemId(*from.linklocremid_);
  } else {
    linklocremid_ = nullptr;
  }
  if (from._internal_has_admingroup()) {
    admingroup_ = new ::service_layer::SLBgplsTopoAdminGroup(*from.admingroup_);
  } else {
    admingroup_ = nullptr;
  }
  if (from._internal_has_maxbandwidth()) {
    maxbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxBandwidth(*from.maxbandwidth_);
  } else {
    maxbandwidth_ = nullptr;
  }
  if (from._internal_has_maxresvbandwidth()) {
    maxresvbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxResvBandwidth(*from.maxresvbandwidth_);
  } else {
    maxresvbandwidth_ = nullptr;
  }
  if (from._internal_has_tedefmetric()) {
    tedefmetric_ = new ::service_layer::SLBgplsTopoLinkTeDefaultMetric(*from.tedefmetric_);
  } else {
    tedefmetric_ = nullptr;
  }
  if (from._internal_has_protectiontype()) {
    protectiontype_ = new ::service_layer::SLBgplsTopoLinkProtectionType(*from.protectiontype_);
  } else {
    protectiontype_ = nullptr;
  }
  if (from._internal_has_mplsprotomask()) {
    mplsprotomask_ = new ::service_layer::SLBgplsTopoLinkMplsProtoMask(*from.mplsprotomask_);
  } else {
    mplsprotomask_ = nullptr;
  }
  if (from._internal_has_igpmetric()) {
    igpmetric_ = new ::service_layer::SLBgplsTopoLinkIgpMetric(*from.igpmetric_);
  } else {
    igpmetric_ = nullptr;
  }
  if (from._internal_has_opaqueattr()) {
    opaqueattr_ = new ::service_layer::SLBgplsTopoLinkOpaqueAttr(*from.opaqueattr_);
  } else {
    opaqueattr_ = nullptr;
  }
  if (from._internal_has_linkname()) {
    linkname_ = new ::service_layer::SLBgplsTopoLinkName(*from.linkname_);
  } else {
    linkname_ = nullptr;
  }
  if (from._internal_has_unilinkdelay()) {
    unilinkdelay_ = new ::service_layer::SLBgplsTopoUniLinkDelay(*from.unilinkdelay_);
  } else {
    unilinkdelay_ = nullptr;
  }
  if (from._internal_has_minmaxunilinkdelay()) {
    minmaxunilinkdelay_ = new ::service_layer::SLBgplsTopoMinMaxUniLinkDelay(*from.minmaxunilinkdelay_);
  } else {
    minmaxunilinkdelay_ = nullptr;
  }
  if (from._internal_has_unidelayvar()) {
    unidelayvar_ = new ::service_layer::SLBgplsTopoUniDelayVar(*from.unidelayvar_);
  } else {
    unidelayvar_ = nullptr;
  }
  if (from._internal_has_unilinkloss()) {
    unilinkloss_ = new ::service_layer::SLBgplsTopoUniLinkLoss(*from.unilinkloss_);
  } else {
    unilinkloss_ = nullptr;
  }
  if (from._internal_has_uniresbandwidth()) {
    uniresbandwidth_ = new ::service_layer::SLBgplsTopoUniResBandwidth(*from.uniresbandwidth_);
  } else {
    uniresbandwidth_ = nullptr;
  }
  if (from._internal_has_uniavailbandwidth()) {
    uniavailbandwidth_ = new ::service_layer::SLBgplsTopoUniAvailBandwidth(*from.uniavailbandwidth_);
  } else {
    uniavailbandwidth_ = nullptr;
  }
  if (from._internal_has_uniutilbandwidth()) {
    uniutilbandwidth_ = new ::service_layer::SLBgplsTopoUniUtilBandwidth(*from.uniutilbandwidth_);
  } else {
    uniutilbandwidth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkAttr)
}

inline void SLBgplsTopoLinkAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linklocremid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uniutilbandwidth_) -
    reinterpret_cast<char*>(&linklocremid_)) + sizeof(uniutilbandwidth_));
}

SLBgplsTopoLinkAttr::~SLBgplsTopoLinkAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete linklocremid_;
  if (this != internal_default_instance()) delete admingroup_;
  if (this != internal_default_instance()) delete maxbandwidth_;
  if (this != internal_default_instance()) delete maxresvbandwidth_;
  if (this != internal_default_instance()) delete tedefmetric_;
  if (this != internal_default_instance()) delete protectiontype_;
  if (this != internal_default_instance()) delete mplsprotomask_;
  if (this != internal_default_instance()) delete igpmetric_;
  if (this != internal_default_instance()) delete opaqueattr_;
  if (this != internal_default_instance()) delete linkname_;
  if (this != internal_default_instance()) delete unilinkdelay_;
  if (this != internal_default_instance()) delete minmaxunilinkdelay_;
  if (this != internal_default_instance()) delete unidelayvar_;
  if (this != internal_default_instance()) delete unilinkloss_;
  if (this != internal_default_instance()) delete uniresbandwidth_;
  if (this != internal_default_instance()) delete uniavailbandwidth_;
  if (this != internal_default_instance()) delete uniutilbandwidth_;
}

void SLBgplsTopoLinkAttr::ArenaDtor(void* object) {
  SLBgplsTopoLinkAttr* _this = reinterpret_cast< SLBgplsTopoLinkAttr* >(object);
  (void)_this;
}
void SLBgplsTopoLinkAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linkmsd_.Clear();
  localipv4routerid_.Clear();
  localipv6routerid_.Clear();
  remoteipv4routerid_.Clear();
  remoteipv6routerid_.Clear();
  unresvbandwidth_.Clear();
  srlg_.Clear();
  adjsid_.Clear();
  lanadjsid_.Clear();
  bgppeernodesid_.Clear();
  bgppeeradjsid_.Clear();
  bgppeersetsid_.Clear();
  asla_.Clear();
  l2bundlememberattr_.Clear();
  extadmingroup_.Clear();
  unknownattr_.Clear();
  if (GetArenaForAllocation() == nullptr && linklocremid_ != nullptr) {
    delete linklocremid_;
  }
  linklocremid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && admingroup_ != nullptr) {
    delete admingroup_;
  }
  admingroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxbandwidth_ != nullptr) {
    delete maxbandwidth_;
  }
  maxbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxresvbandwidth_ != nullptr) {
    delete maxresvbandwidth_;
  }
  maxresvbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protectiontype_ != nullptr) {
    delete protectiontype_;
  }
  protectiontype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mplsprotomask_ != nullptr) {
    delete mplsprotomask_;
  }
  mplsprotomask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && igpmetric_ != nullptr) {
    delete igpmetric_;
  }
  igpmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opaqueattr_ != nullptr) {
    delete opaqueattr_;
  }
  opaqueattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linkname_ != nullptr) {
    delete linkname_;
  }
  linkname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minmaxunilinkdelay_ != nullptr) {
    delete minmaxunilinkdelay_;
  }
  minmaxunilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unidelayvar_ != nullptr) {
    delete unidelayvar_;
  }
  unidelayvar_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linklocremid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linkmsd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv4routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localipv6routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remoteipv4routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remoteipv6routerid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_admingroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxresvbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unresvbandwidth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tedefmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectiontype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplsprotomask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_igpmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srlg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaqueattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkName LinkName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lanadjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoBgpPeerNodeSid BgpPeerNodeSid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bgppeernodesid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoBgpPeerAdjSid BgpPeerAdjSid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bgppeeradjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoBgpPeerSetSid BgpPeerSetSid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bgppeersetsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_minmaxunilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_unidelayvar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkloss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniresbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniavailbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniutilbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_asla(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_l2bundlememberattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extadmingroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unknownattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
  if (this->_internal_has_linklocremid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linklocremid(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linkmsd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_linkmsd(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv4routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_localipv4routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localipv6routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_localipv6routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remoteipv4routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_remoteipv4routerid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remoteipv6routerid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_remoteipv6routerid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 7;
  if (this->_internal_has_admingroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::admingroup(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
  if (this->_internal_has_maxbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::maxbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
  if (this->_internal_has_maxresvbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::maxresvbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unresvbandwidth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_unresvbandwidth(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
  if (this->_internal_has_tedefmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tedefmetric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 12;
  if (this->_internal_has_protectiontype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::protectiontype(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
  if (this->_internal_has_mplsprotomask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::mplsprotomask(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
  if (this->_internal_has_igpmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::igpmetric(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srlg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_srlg(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
  if (this->_internal_has_opaqueattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::opaqueattr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkName LinkName = 17;
  if (this->_internal_has_linkname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::linkname(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_adjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanadjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_lanadjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoBgpPeerNodeSid BgpPeerNodeSid = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgppeernodesid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_bgppeernodesid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoBgpPeerAdjSid BgpPeerAdjSid = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgppeeradjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_bgppeeradjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoBgpPeerSetSid BgpPeerSetSid = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgppeersetsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_bgppeersetsid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 23;
  if (this->_internal_has_unilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::unilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 24;
  if (this->_internal_has_minmaxunilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::minmaxunilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 25;
  if (this->_internal_has_unidelayvar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::unidelayvar(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 26;
  if (this->_internal_has_unilinkloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::unilinkloss(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 27;
  if (this->_internal_has_uniresbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::uniresbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 28;
  if (this->_internal_has_uniavailbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::uniavailbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 29;
  if (this->_internal_has_uniutilbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::uniutilbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asla_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_asla(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_l2bundlememberattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_l2bundlememberattr(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extadmingroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_extadmingroup(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unknownattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_unknownattr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkAttr)
  return target;
}

size_t SLBgplsTopoLinkAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
  total_size += 1UL * this->_internal_linkmsd_size();
  for (const auto& msg : this->linkmsd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
  total_size += 1UL * this->_internal_localipv4routerid_size();
  for (const auto& msg : this->localipv4routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
  total_size += 1UL * this->_internal_localipv6routerid_size();
  for (const auto& msg : this->localipv6routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
  total_size += 1UL * this->_internal_remoteipv4routerid_size();
  for (const auto& msg : this->remoteipv4routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
  total_size += 1UL * this->_internal_remoteipv6routerid_size();
  for (const auto& msg : this->remoteipv6routerid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
  total_size += 1UL * this->_internal_unresvbandwidth_size();
  for (const auto& msg : this->unresvbandwidth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
  total_size += 1UL * this->_internal_srlg_size();
  for (const auto& msg : this->srlg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
  total_size += 2UL * this->_internal_adjsid_size();
  for (const auto& msg : this->adjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
  total_size += 2UL * this->_internal_lanadjsid_size();
  for (const auto& msg : this->lanadjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoBgpPeerNodeSid BgpPeerNodeSid = 20;
  total_size += 2UL * this->_internal_bgppeernodesid_size();
  for (const auto& msg : this->bgppeernodesid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoBgpPeerAdjSid BgpPeerAdjSid = 21;
  total_size += 2UL * this->_internal_bgppeeradjsid_size();
  for (const auto& msg : this->bgppeeradjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoBgpPeerSetSid BgpPeerSetSid = 22;
  total_size += 2UL * this->_internal_bgppeersetsid_size();
  for (const auto& msg : this->bgppeersetsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 30;
  total_size += 2UL * this->_internal_asla_size();
  for (const auto& msg : this->asla_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 31;
  total_size += 2UL * this->_internal_l2bundlememberattr_size();
  for (const auto& msg : this->l2bundlememberattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 32;
  total_size += 2UL * this->_internal_extadmingroup_size();
  for (const auto& msg : this->extadmingroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 33;
  total_size += 2UL * this->_internal_unknownattr_size();
  for (const auto& msg : this->unknownattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
  if (this->_internal_has_linklocremid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linklocremid_);
  }

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 7;
  if (this->_internal_has_admingroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *admingroup_);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
  if (this->_internal_has_maxbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
  if (this->_internal_has_maxresvbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxresvbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
  if (this->_internal_has_tedefmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tedefmetric_);
  }

  // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 12;
  if (this->_internal_has_protectiontype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectiontype_);
  }

  // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
  if (this->_internal_has_mplsprotomask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mplsprotomask_);
  }

  // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
  if (this->_internal_has_igpmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *igpmetric_);
  }

  // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
  if (this->_internal_has_opaqueattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opaqueattr_);
  }

  // .service_layer.SLBgplsTopoLinkName LinkName = 17;
  if (this->_internal_has_linkname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linkname_);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 23;
  if (this->_internal_has_unilinkdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkdelay_);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 24;
  if (this->_internal_has_minmaxunilinkdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minmaxunilinkdelay_);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 25;
  if (this->_internal_has_unidelayvar()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unidelayvar_);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 26;
  if (this->_internal_has_unilinkloss()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkloss_);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 27;
  if (this->_internal_has_uniresbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniresbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 28;
  if (this->_internal_has_uniavailbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniavailbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 29;
  if (this->_internal_has_uniutilbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniutilbandwidth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkAttr &>(from));
}


void SLBgplsTopoLinkAttr::MergeFrom(const SLBgplsTopoLinkAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  linkmsd_.MergeFrom(from.linkmsd_);
  localipv4routerid_.MergeFrom(from.localipv4routerid_);
  localipv6routerid_.MergeFrom(from.localipv6routerid_);
  remoteipv4routerid_.MergeFrom(from.remoteipv4routerid_);
  remoteipv6routerid_.MergeFrom(from.remoteipv6routerid_);
  unresvbandwidth_.MergeFrom(from.unresvbandwidth_);
  srlg_.MergeFrom(from.srlg_);
  adjsid_.MergeFrom(from.adjsid_);
  lanadjsid_.MergeFrom(from.lanadjsid_);
  bgppeernodesid_.MergeFrom(from.bgppeernodesid_);
  bgppeeradjsid_.MergeFrom(from.bgppeeradjsid_);
  bgppeersetsid_.MergeFrom(from.bgppeersetsid_);
  asla_.MergeFrom(from.asla_);
  l2bundlememberattr_.MergeFrom(from.l2bundlememberattr_);
  extadmingroup_.MergeFrom(from.extadmingroup_);
  unknownattr_.MergeFrom(from.unknownattr_);
  if (from._internal_has_linklocremid()) {
    _internal_mutable_linklocremid()->::service_layer::SLBplsTopoLinkLocRemId::MergeFrom(from._internal_linklocremid());
  }
  if (from._internal_has_admingroup()) {
    _internal_mutable_admingroup()->::service_layer::SLBgplsTopoAdminGroup::MergeFrom(from._internal_admingroup());
  }
  if (from._internal_has_maxbandwidth()) {
    _internal_mutable_maxbandwidth()->::service_layer::SLBgplsTopoLinkMaxBandwidth::MergeFrom(from._internal_maxbandwidth());
  }
  if (from._internal_has_maxresvbandwidth()) {
    _internal_mutable_maxresvbandwidth()->::service_layer::SLBgplsTopoLinkMaxResvBandwidth::MergeFrom(from._internal_maxresvbandwidth());
  }
  if (from._internal_has_tedefmetric()) {
    _internal_mutable_tedefmetric()->::service_layer::SLBgplsTopoLinkTeDefaultMetric::MergeFrom(from._internal_tedefmetric());
  }
  if (from._internal_has_protectiontype()) {
    _internal_mutable_protectiontype()->::service_layer::SLBgplsTopoLinkProtectionType::MergeFrom(from._internal_protectiontype());
  }
  if (from._internal_has_mplsprotomask()) {
    _internal_mutable_mplsprotomask()->::service_layer::SLBgplsTopoLinkMplsProtoMask::MergeFrom(from._internal_mplsprotomask());
  }
  if (from._internal_has_igpmetric()) {
    _internal_mutable_igpmetric()->::service_layer::SLBgplsTopoLinkIgpMetric::MergeFrom(from._internal_igpmetric());
  }
  if (from._internal_has_opaqueattr()) {
    _internal_mutable_opaqueattr()->::service_layer::SLBgplsTopoLinkOpaqueAttr::MergeFrom(from._internal_opaqueattr());
  }
  if (from._internal_has_linkname()) {
    _internal_mutable_linkname()->::service_layer::SLBgplsTopoLinkName::MergeFrom(from._internal_linkname());
  }
  if (from._internal_has_unilinkdelay()) {
    _internal_mutable_unilinkdelay()->::service_layer::SLBgplsTopoUniLinkDelay::MergeFrom(from._internal_unilinkdelay());
  }
  if (from._internal_has_minmaxunilinkdelay()) {
    _internal_mutable_minmaxunilinkdelay()->::service_layer::SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(from._internal_minmaxunilinkdelay());
  }
  if (from._internal_has_unidelayvar()) {
    _internal_mutable_unidelayvar()->::service_layer::SLBgplsTopoUniDelayVar::MergeFrom(from._internal_unidelayvar());
  }
  if (from._internal_has_unilinkloss()) {
    _internal_mutable_unilinkloss()->::service_layer::SLBgplsTopoUniLinkLoss::MergeFrom(from._internal_unilinkloss());
  }
  if (from._internal_has_uniresbandwidth()) {
    _internal_mutable_uniresbandwidth()->::service_layer::SLBgplsTopoUniResBandwidth::MergeFrom(from._internal_uniresbandwidth());
  }
  if (from._internal_has_uniavailbandwidth()) {
    _internal_mutable_uniavailbandwidth()->::service_layer::SLBgplsTopoUniAvailBandwidth::MergeFrom(from._internal_uniavailbandwidth());
  }
  if (from._internal_has_uniutilbandwidth()) {
    _internal_mutable_uniutilbandwidth()->::service_layer::SLBgplsTopoUniUtilBandwidth::MergeFrom(from._internal_uniutilbandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkAttr::CopyFrom(const SLBgplsTopoLinkAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkAttr::InternalSwap(SLBgplsTopoLinkAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linkmsd_.InternalSwap(&other->linkmsd_);
  localipv4routerid_.InternalSwap(&other->localipv4routerid_);
  localipv6routerid_.InternalSwap(&other->localipv6routerid_);
  remoteipv4routerid_.InternalSwap(&other->remoteipv4routerid_);
  remoteipv6routerid_.InternalSwap(&other->remoteipv6routerid_);
  unresvbandwidth_.InternalSwap(&other->unresvbandwidth_);
  srlg_.InternalSwap(&other->srlg_);
  adjsid_.InternalSwap(&other->adjsid_);
  lanadjsid_.InternalSwap(&other->lanadjsid_);
  bgppeernodesid_.InternalSwap(&other->bgppeernodesid_);
  bgppeeradjsid_.InternalSwap(&other->bgppeeradjsid_);
  bgppeersetsid_.InternalSwap(&other->bgppeersetsid_);
  asla_.InternalSwap(&other->asla_);
  l2bundlememberattr_.InternalSwap(&other->l2bundlememberattr_);
  extadmingroup_.InternalSwap(&other->extadmingroup_);
  unknownattr_.InternalSwap(&other->unknownattr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkAttr, uniutilbandwidth_)
      + sizeof(SLBgplsTopoLinkAttr::uniutilbandwidth_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkAttr, linklocremid_)>(
          reinterpret_cast<char*>(&linklocremid_),
          reinterpret_cast<char*>(&other->linklocremid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[22]);
}

// ===================================================================

class SLBgplsTopoPrefixAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoPrefixIgpFlags& igpflags(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixMetric& metric(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr& ospffwdaddr(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixOpaqueAttr& opaqueattr(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixRange& range(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixAttrFlags& attrflags(const SLBgplsTopoPrefixAttr* msg);
  static const ::service_layer::SLBgplsTopoPrefixSrcRouterId& srcrouterid(const SLBgplsTopoPrefixAttr* msg);
};

const ::service_layer::SLBgplsTopoPrefixIgpFlags&
SLBgplsTopoPrefixAttr::_Internal::igpflags(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->igpflags_;
}
const ::service_layer::SLBgplsTopoPrefixMetric&
SLBgplsTopoPrefixAttr::_Internal::metric(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->metric_;
}
const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr&
SLBgplsTopoPrefixAttr::_Internal::ospffwdaddr(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->ospffwdaddr_;
}
const ::service_layer::SLBgplsTopoPrefixOpaqueAttr&
SLBgplsTopoPrefixAttr::_Internal::opaqueattr(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->opaqueattr_;
}
const ::service_layer::SLBgplsTopoPrefixRange&
SLBgplsTopoPrefixAttr::_Internal::range(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->range_;
}
const ::service_layer::SLBgplsTopoPrefixAttrFlags&
SLBgplsTopoPrefixAttr::_Internal::attrflags(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->attrflags_;
}
const ::service_layer::SLBgplsTopoPrefixSrcRouterId&
SLBgplsTopoPrefixAttr::_Internal::srcrouterid(const SLBgplsTopoPrefixAttr* msg) {
  return *msg->srcrouterid_;
}
SLBgplsTopoPrefixAttr::SLBgplsTopoPrefixAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fapm_(arena),
  igproutetag_(arena),
  igpextroutetag_(arena),
  sid_(arena),
  unknownattr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixAttr)
}
SLBgplsTopoPrefixAttr::SLBgplsTopoPrefixAttr(const SLBgplsTopoPrefixAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fapm_(from.fapm_),
      igproutetag_(from.igproutetag_),
      igpextroutetag_(from.igpextroutetag_),
      sid_(from.sid_),
      unknownattr_(from.unknownattr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_igpflags()) {
    igpflags_ = new ::service_layer::SLBgplsTopoPrefixIgpFlags(*from.igpflags_);
  } else {
    igpflags_ = nullptr;
  }
  if (from._internal_has_metric()) {
    metric_ = new ::service_layer::SLBgplsTopoPrefixMetric(*from.metric_);
  } else {
    metric_ = nullptr;
  }
  if (from._internal_has_ospffwdaddr()) {
    ospffwdaddr_ = new ::service_layer::SLBgplsTopoPrefixOspfFwdAddr(*from.ospffwdaddr_);
  } else {
    ospffwdaddr_ = nullptr;
  }
  if (from._internal_has_opaqueattr()) {
    opaqueattr_ = new ::service_layer::SLBgplsTopoPrefixOpaqueAttr(*from.opaqueattr_);
  } else {
    opaqueattr_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::service_layer::SLBgplsTopoPrefixRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_attrflags()) {
    attrflags_ = new ::service_layer::SLBgplsTopoPrefixAttrFlags(*from.attrflags_);
  } else {
    attrflags_ = nullptr;
  }
  if (from._internal_has_srcrouterid()) {
    srcrouterid_ = new ::service_layer::SLBgplsTopoPrefixSrcRouterId(*from.srcrouterid_);
  } else {
    srcrouterid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixAttr)
}

inline void SLBgplsTopoPrefixAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&igpflags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srcrouterid_) -
    reinterpret_cast<char*>(&igpflags_)) + sizeof(srcrouterid_));
}

SLBgplsTopoPrefixAttr::~SLBgplsTopoPrefixAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete igpflags_;
  if (this != internal_default_instance()) delete metric_;
  if (this != internal_default_instance()) delete ospffwdaddr_;
  if (this != internal_default_instance()) delete opaqueattr_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete attrflags_;
  if (this != internal_default_instance()) delete srcrouterid_;
}

void SLBgplsTopoPrefixAttr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixAttr* _this = reinterpret_cast< SLBgplsTopoPrefixAttr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fapm_.Clear();
  igproutetag_.Clear();
  igpextroutetag_.Clear();
  sid_.Clear();
  unknownattr_.Clear();
  if (GetArenaForAllocation() == nullptr && igpflags_ != nullptr) {
    delete igpflags_;
  }
  igpflags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metric_ != nullptr) {
    delete metric_;
  }
  metric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ospffwdaddr_ != nullptr) {
    delete ospffwdaddr_;
  }
  ospffwdaddr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opaqueattr_ != nullptr) {
    delete opaqueattr_;
  }
  opaqueattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attrflags_ != nullptr) {
    delete attrflags_;
  }
  attrflags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && srcrouterid_ != nullptr) {
    delete srcrouterid_;
  }
  srcrouterid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fapm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_igpflags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_igproutetag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_igpextroutetag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ospffwdaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaqueattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoPrefixSid Sid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixRange Range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrflags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcrouterid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unknownattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fapm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fapm(i), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
  if (this->_internal_has_igpflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::igpflags(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_igproutetag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_igproutetag(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_igpextroutetag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_igpextroutetag(i), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
  if (this->_internal_has_metric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
  if (this->_internal_has_ospffwdaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ospffwdaddr(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
  if (this->_internal_has_opaqueattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::opaqueattr(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoPrefixSid Sid = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_sid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixRange Range = 9;
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::range(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 10;
  if (this->_internal_has_attrflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::attrflags(this), target, stream);
  }

  // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 11;
  if (this->_internal_has_srcrouterid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::srcrouterid(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unknownattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_unknownattr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixAttr)
  return target;
}

size_t SLBgplsTopoPrefixAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
  total_size += 1UL * this->_internal_fapm_size();
  for (const auto& msg : this->fapm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
  total_size += 1UL * this->_internal_igproutetag_size();
  for (const auto& msg : this->igproutetag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
  total_size += 1UL * this->_internal_igpextroutetag_size();
  for (const auto& msg : this->igpextroutetag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoPrefixSid Sid = 8;
  total_size += 1UL * this->_internal_sid_size();
  for (const auto& msg : this->sid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 12;
  total_size += 1UL * this->_internal_unknownattr_size();
  for (const auto& msg : this->unknownattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
  if (this->_internal_has_igpflags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *igpflags_);
  }

  // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
  if (this->_internal_has_metric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metric_);
  }

  // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
  if (this->_internal_has_ospffwdaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ospffwdaddr_);
  }

  // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
  if (this->_internal_has_opaqueattr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opaqueattr_);
  }

  // .service_layer.SLBgplsTopoPrefixRange Range = 9;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 10;
  if (this->_internal_has_attrflags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attrflags_);
  }

  // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 11;
  if (this->_internal_has_srcrouterid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srcrouterid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixAttr &>(from));
}


void SLBgplsTopoPrefixAttr::MergeFrom(const SLBgplsTopoPrefixAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fapm_.MergeFrom(from.fapm_);
  igproutetag_.MergeFrom(from.igproutetag_);
  igpextroutetag_.MergeFrom(from.igpextroutetag_);
  sid_.MergeFrom(from.sid_);
  unknownattr_.MergeFrom(from.unknownattr_);
  if (from._internal_has_igpflags()) {
    _internal_mutable_igpflags()->::service_layer::SLBgplsTopoPrefixIgpFlags::MergeFrom(from._internal_igpflags());
  }
  if (from._internal_has_metric()) {
    _internal_mutable_metric()->::service_layer::SLBgplsTopoPrefixMetric::MergeFrom(from._internal_metric());
  }
  if (from._internal_has_ospffwdaddr()) {
    _internal_mutable_ospffwdaddr()->::service_layer::SLBgplsTopoPrefixOspfFwdAddr::MergeFrom(from._internal_ospffwdaddr());
  }
  if (from._internal_has_opaqueattr()) {
    _internal_mutable_opaqueattr()->::service_layer::SLBgplsTopoPrefixOpaqueAttr::MergeFrom(from._internal_opaqueattr());
  }
  if (from._internal_has_range()) {
    _internal_mutable_range()->::service_layer::SLBgplsTopoPrefixRange::MergeFrom(from._internal_range());
  }
  if (from._internal_has_attrflags()) {
    _internal_mutable_attrflags()->::service_layer::SLBgplsTopoPrefixAttrFlags::MergeFrom(from._internal_attrflags());
  }
  if (from._internal_has_srcrouterid()) {
    _internal_mutable_srcrouterid()->::service_layer::SLBgplsTopoPrefixSrcRouterId::MergeFrom(from._internal_srcrouterid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixAttr::CopyFrom(const SLBgplsTopoPrefixAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixAttr::InternalSwap(SLBgplsTopoPrefixAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fapm_.InternalSwap(&other->fapm_);
  igproutetag_.InternalSwap(&other->igproutetag_);
  igpextroutetag_.InternalSwap(&other->igpextroutetag_);
  sid_.InternalSwap(&other->sid_);
  unknownattr_.InternalSwap(&other->unknownattr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixAttr, srcrouterid_)
      + sizeof(SLBgplsTopoPrefixAttr::srcrouterid_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixAttr, igpflags_)>(
          reinterpret_cast<char*>(&igpflags_),
          reinterpret_cast<char*>(&other->igpflags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[23]);
}

// ===================================================================

class SLBplsTopoLinkLocRemId::_Internal {
 public:
};

SLBplsTopoLinkLocRemId::SLBplsTopoLinkLocRemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBplsTopoLinkLocRemId)
}
SLBplsTopoLinkLocRemId::SLBplsTopoLinkLocRemId(const SLBplsTopoLinkLocRemId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&localid_, &from.localid_,
    static_cast<size_t>(reinterpret_cast<char*>(&remoteid_) -
    reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBplsTopoLinkLocRemId)
}

inline void SLBplsTopoLinkLocRemId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&localid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remoteid_) -
    reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
}

SLBplsTopoLinkLocRemId::~SLBplsTopoLinkLocRemId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBplsTopoLinkLocRemId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBplsTopoLinkLocRemId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBplsTopoLinkLocRemId::ArenaDtor(void* object) {
  SLBplsTopoLinkLocRemId* _this = reinterpret_cast< SLBplsTopoLinkLocRemId* >(object);
  (void)_this;
}
void SLBplsTopoLinkLocRemId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBplsTopoLinkLocRemId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBplsTopoLinkLocRemId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBplsTopoLinkLocRemId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&localid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remoteid_) -
      reinterpret_cast<char*>(&localid_)) + sizeof(remoteid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBplsTopoLinkLocRemId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocalId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          localid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          remoteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBplsTopoLinkLocRemId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBplsTopoLinkLocRemId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_localid(), target);
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remoteid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBplsTopoLinkLocRemId)
  return target;
}

size_t SLBplsTopoLinkLocRemId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBplsTopoLinkLocRemId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 LocalId = 1;
  if (this->_internal_localid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localid());
  }

  // uint32 RemoteId = 2;
  if (this->_internal_remoteid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remoteid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBplsTopoLinkLocRemId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBplsTopoLinkLocRemId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBplsTopoLinkLocRemId::GetClassData() const { return &_class_data_; }

void SLBplsTopoLinkLocRemId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBplsTopoLinkLocRemId *>(to)->MergeFrom(
      static_cast<const SLBplsTopoLinkLocRemId &>(from));
}


void SLBplsTopoLinkLocRemId::MergeFrom(const SLBplsTopoLinkLocRemId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBplsTopoLinkLocRemId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_localid() != 0) {
    _internal_set_localid(from._internal_localid());
  }
  if (from._internal_remoteid() != 0) {
    _internal_set_remoteid(from._internal_remoteid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBplsTopoLinkLocRemId::CopyFrom(const SLBplsTopoLinkLocRemId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBplsTopoLinkLocRemId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBplsTopoLinkLocRemId::IsInitialized() const {
  return true;
}

void SLBplsTopoLinkLocRemId::InternalSwap(SLBplsTopoLinkLocRemId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBplsTopoLinkLocRemId, remoteid_)
      + sizeof(SLBplsTopoLinkLocRemId::remoteid_)
      - PROTOBUF_FIELD_OFFSET(SLBplsTopoLinkLocRemId, localid_)>(
          reinterpret_cast<char*>(&localid_),
          reinterpret_cast<char*>(&other->localid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBplsTopoLinkLocRemId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[24]);
}

// ===================================================================

class SLBgplsTopoMtId::_Internal {
 public:
};

SLBgplsTopoMtId::SLBgplsTopoMtId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoMtId)
}
SLBgplsTopoMtId::SLBgplsTopoMtId(const SLBgplsTopoMtId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mtid_ = from.mtid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoMtId)
}

inline void SLBgplsTopoMtId::SharedCtor() {
mtid_ = 0u;
}

SLBgplsTopoMtId::~SLBgplsTopoMtId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoMtId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoMtId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoMtId::ArenaDtor(void* object) {
  SLBgplsTopoMtId* _this = reinterpret_cast< SLBgplsTopoMtId* >(object);
  (void)_this;
}
void SLBgplsTopoMtId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoMtId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoMtId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoMtId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoMtId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MtId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoMtId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoMtId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MtId = 1;
  if (this->_internal_mtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mtid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoMtId)
  return target;
}

size_t SLBgplsTopoMtId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoMtId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 MtId = 1;
  if (this->_internal_mtid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoMtId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoMtId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoMtId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoMtId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoMtId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoMtId &>(from));
}


void SLBgplsTopoMtId::MergeFrom(const SLBgplsTopoMtId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoMtId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mtid() != 0) {
    _internal_set_mtid(from._internal_mtid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoMtId::CopyFrom(const SLBgplsTopoMtId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoMtId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoMtId::IsInitialized() const {
  return true;
}

void SLBgplsTopoMtId::InternalSwap(SLBgplsTopoMtId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mtid_, other->mtid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoMtId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[25]);
}

// ===================================================================

class SLBgplsTopoNodeMsd::_Internal {
 public:
};

SLBgplsTopoNodeMsd::SLBgplsTopoNodeMsd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeMsd)
}
SLBgplsTopoNodeMsd::SLBgplsTopoNodeMsd(const SLBgplsTopoNodeMsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeMsd)
}

inline void SLBgplsTopoNodeMsd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

SLBgplsTopoNodeMsd::~SLBgplsTopoNodeMsd() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeMsd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeMsd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoNodeMsd::ArenaDtor(void* object) {
  SLBgplsTopoNodeMsd* _this = reinterpret_cast< SLBgplsTopoNodeMsd* >(object);
  (void)_this;
}
void SLBgplsTopoNodeMsd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeMsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeMsd::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeMsd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeMsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeMsd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeMsd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeMsd)
  return target;
}

size_t SLBgplsTopoNodeMsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeMsd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeMsd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeMsd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeMsd::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeMsd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeMsd *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeMsd &>(from));
}


void SLBgplsTopoNodeMsd::MergeFrom(const SLBgplsTopoNodeMsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeMsd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeMsd::CopyFrom(const SLBgplsTopoNodeMsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeMsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeMsd::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeMsd::InternalSwap(SLBgplsTopoNodeMsd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeMsd, value_)
      + sizeof(SLBgplsTopoNodeMsd::value_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoNodeMsd, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeMsd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[26]);
}

// ===================================================================

class SLBgplsTopoLinkMsd::_Internal {
 public:
};

SLBgplsTopoLinkMsd::SLBgplsTopoLinkMsd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMsd)
}
SLBgplsTopoLinkMsd::SLBgplsTopoLinkMsd(const SLBgplsTopoLinkMsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMsd)
}

inline void SLBgplsTopoLinkMsd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

SLBgplsTopoLinkMsd::~SLBgplsTopoLinkMsd() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMsd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMsd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkMsd::ArenaDtor(void* object) {
  SLBgplsTopoLinkMsd* _this = reinterpret_cast< SLBgplsTopoLinkMsd* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMsd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMsd::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMsd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMsd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMsd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMsd)
  return target;
}

size_t SLBgplsTopoLinkMsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMsd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMsd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMsd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMsd::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMsd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMsd *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMsd &>(from));
}


void SLBgplsTopoLinkMsd::MergeFrom(const SLBgplsTopoLinkMsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMsd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMsd::CopyFrom(const SLBgplsTopoLinkMsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMsd::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMsd::InternalSwap(SLBgplsTopoLinkMsd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkMsd, value_)
      + sizeof(SLBgplsTopoLinkMsd::value_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLinkMsd, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMsd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[27]);
}

// ===================================================================

class SLBgplsTopoNodeFlagBits::_Internal {
 public:
};

SLBgplsTopoNodeFlagBits::SLBgplsTopoNodeFlagBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeFlagBits)
}
SLBgplsTopoNodeFlagBits::SLBgplsTopoNodeFlagBits(const SLBgplsTopoNodeFlagBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeFlagBits)
}

inline void SLBgplsTopoNodeFlagBits::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoNodeFlagBits::~SLBgplsTopoNodeFlagBits() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeFlagBits)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeFlagBits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoNodeFlagBits::ArenaDtor(void* object) {
  SLBgplsTopoNodeFlagBits* _this = reinterpret_cast< SLBgplsTopoNodeFlagBits* >(object);
  (void)_this;
}
void SLBgplsTopoNodeFlagBits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeFlagBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeFlagBits::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeFlagBits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeFlagBits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeFlagBits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeFlagBits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeFlagBits)
  return target;
}

size_t SLBgplsTopoNodeFlagBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeFlagBits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeFlagBits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeFlagBits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeFlagBits::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeFlagBits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeFlagBits *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeFlagBits &>(from));
}


void SLBgplsTopoNodeFlagBits::MergeFrom(const SLBgplsTopoNodeFlagBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeFlagBits)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeFlagBits::CopyFrom(const SLBgplsTopoNodeFlagBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeFlagBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeFlagBits::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeFlagBits::InternalSwap(SLBgplsTopoNodeFlagBits* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeFlagBits::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[28]);
}

// ===================================================================

class SLBgplsTopoNodeOpaqueAttr::_Internal {
 public:
};

SLBgplsTopoNodeOpaqueAttr::SLBgplsTopoNodeOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoNodeOpaqueAttr)
}
SLBgplsTopoNodeOpaqueAttr::SLBgplsTopoNodeOpaqueAttr(const SLBgplsTopoNodeOpaqueAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opaqueattr().empty()) {
    opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaqueattr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoNodeOpaqueAttr)
}

inline void SLBgplsTopoNodeOpaqueAttr::SharedCtor() {
opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoNodeOpaqueAttr::~SLBgplsTopoNodeOpaqueAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoNodeOpaqueAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoNodeOpaqueAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaqueattr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoNodeOpaqueAttr::ArenaDtor(void* object) {
  SLBgplsTopoNodeOpaqueAttr* _this = reinterpret_cast< SLBgplsTopoNodeOpaqueAttr* >(object);
  (void)_this;
}
void SLBgplsTopoNodeOpaqueAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoNodeOpaqueAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoNodeOpaqueAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaqueattr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoNodeOpaqueAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes OpaqueAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaqueattr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoNodeOpaqueAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaqueattr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoNodeOpaqueAttr)
  return target;
}

size_t SLBgplsTopoNodeOpaqueAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaqueattr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoNodeOpaqueAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoNodeOpaqueAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoNodeOpaqueAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoNodeOpaqueAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoNodeOpaqueAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoNodeOpaqueAttr &>(from));
}


void SLBgplsTopoNodeOpaqueAttr::MergeFrom(const SLBgplsTopoNodeOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_opaqueattr().empty()) {
    _internal_set_opaqueattr(from._internal_opaqueattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoNodeOpaqueAttr::CopyFrom(const SLBgplsTopoNodeOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoNodeOpaqueAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoNodeOpaqueAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoNodeOpaqueAttr::InternalSwap(SLBgplsTopoNodeOpaqueAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaqueattr_, lhs_arena,
      &other->opaqueattr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoNodeOpaqueAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[29]);
}

// ===================================================================

class SLBgplsNodeName::_Internal {
 public:
};

SLBgplsNodeName::SLBgplsNodeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsNodeName)
}
SLBgplsNodeName::SLBgplsNodeName(const SLBgplsNodeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsNodeName)
}

inline void SLBgplsNodeName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsNodeName::~SLBgplsNodeName() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsNodeName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsNodeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsNodeName::ArenaDtor(void* object) {
  SLBgplsNodeName* _this = reinterpret_cast< SLBgplsNodeName* >(object);
  (void)_this;
}
void SLBgplsNodeName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsNodeName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsNodeName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsNodeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsNodeName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgplsNodeName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsNodeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsNodeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgplsNodeName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsNodeName)
  return target;
}

size_t SLBgplsNodeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsNodeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsNodeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsNodeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsNodeName::GetClassData() const { return &_class_data_; }

void SLBgplsNodeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsNodeName *>(to)->MergeFrom(
      static_cast<const SLBgplsNodeName &>(from));
}


void SLBgplsNodeName::MergeFrom(const SLBgplsNodeName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsNodeName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsNodeName::CopyFrom(const SLBgplsNodeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsNodeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsNodeName::IsInitialized() const {
  return true;
}

void SLBgplsNodeName::InternalSwap(SLBgplsNodeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsNodeName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[30]);
}

// ===================================================================

class SLBgplsTopoIsisAreaId::_Internal {
 public:
};

SLBgplsTopoIsisAreaId::SLBgplsTopoIsisAreaId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoIsisAreaId)
}
SLBgplsTopoIsisAreaId::SLBgplsTopoIsisAreaId(const SLBgplsTopoIsisAreaId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  areaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    areaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_areaid().empty()) {
    areaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_areaid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoIsisAreaId)
}

inline void SLBgplsTopoIsisAreaId::SharedCtor() {
areaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  areaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoIsisAreaId::~SLBgplsTopoIsisAreaId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoIsisAreaId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoIsisAreaId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  areaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoIsisAreaId::ArenaDtor(void* object) {
  SLBgplsTopoIsisAreaId* _this = reinterpret_cast< SLBgplsTopoIsisAreaId* >(object);
  (void)_this;
}
void SLBgplsTopoIsisAreaId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoIsisAreaId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoIsisAreaId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoIsisAreaId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areaid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoIsisAreaId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes AreaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_areaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoIsisAreaId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoIsisAreaId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AreaId = 1;
  if (!this->_internal_areaid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_areaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoIsisAreaId)
  return target;
}

size_t SLBgplsTopoIsisAreaId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoIsisAreaId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes AreaId = 1;
  if (!this->_internal_areaid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_areaid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoIsisAreaId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoIsisAreaId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoIsisAreaId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoIsisAreaId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoIsisAreaId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoIsisAreaId &>(from));
}


void SLBgplsTopoIsisAreaId::MergeFrom(const SLBgplsTopoIsisAreaId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoIsisAreaId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_areaid().empty()) {
    _internal_set_areaid(from._internal_areaid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoIsisAreaId::CopyFrom(const SLBgplsTopoIsisAreaId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoIsisAreaId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoIsisAreaId::IsInitialized() const {
  return true;
}

void SLBgplsTopoIsisAreaId::InternalSwap(SLBgplsTopoIsisAreaId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &areaid_, lhs_arena,
      &other->areaid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoIsisAreaId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[31]);
}

// ===================================================================

class SLBgplsTopoLocalIpv4RouterId::_Internal {
 public:
};

SLBgplsTopoLocalIpv4RouterId::SLBgplsTopoLocalIpv4RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLocalIpv4RouterId)
}
SLBgplsTopoLocalIpv4RouterId::SLBgplsTopoLocalIpv4RouterId(const SLBgplsTopoLocalIpv4RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLocalIpv4RouterId)
}

inline void SLBgplsTopoLocalIpv4RouterId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLocalIpv4RouterId::~SLBgplsTopoLocalIpv4RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLocalIpv4RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLocalIpv4RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLocalIpv4RouterId::ArenaDtor(void* object) {
  SLBgplsTopoLocalIpv4RouterId* _this = reinterpret_cast< SLBgplsTopoLocalIpv4RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoLocalIpv4RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLocalIpv4RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLocalIpv4RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLocalIpv4RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLocalIpv4RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLocalIpv4RouterId)
  return target;
}

size_t SLBgplsTopoLocalIpv4RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLocalIpv4RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLocalIpv4RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLocalIpv4RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLocalIpv4RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLocalIpv4RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLocalIpv4RouterId &>(from));
}


void SLBgplsTopoLocalIpv4RouterId::MergeFrom(const SLBgplsTopoLocalIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLocalIpv4RouterId::CopyFrom(const SLBgplsTopoLocalIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLocalIpv4RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLocalIpv4RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoLocalIpv4RouterId::InternalSwap(SLBgplsTopoLocalIpv4RouterId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLocalIpv4RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[32]);
}

// ===================================================================

class SLBgplsTopoLocalIpv6RouterId::_Internal {
 public:
};

SLBgplsTopoLocalIpv6RouterId::SLBgplsTopoLocalIpv6RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLocalIpv6RouterId)
}
SLBgplsTopoLocalIpv6RouterId::SLBgplsTopoLocalIpv6RouterId(const SLBgplsTopoLocalIpv6RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLocalIpv6RouterId)
}

inline void SLBgplsTopoLocalIpv6RouterId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLocalIpv6RouterId::~SLBgplsTopoLocalIpv6RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLocalIpv6RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLocalIpv6RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLocalIpv6RouterId::ArenaDtor(void* object) {
  SLBgplsTopoLocalIpv6RouterId* _this = reinterpret_cast< SLBgplsTopoLocalIpv6RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoLocalIpv6RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLocalIpv6RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLocalIpv6RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLocalIpv6RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLocalIpv6RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLocalIpv6RouterId)
  return target;
}

size_t SLBgplsTopoLocalIpv6RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLocalIpv6RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLocalIpv6RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLocalIpv6RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLocalIpv6RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLocalIpv6RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLocalIpv6RouterId &>(from));
}


void SLBgplsTopoLocalIpv6RouterId::MergeFrom(const SLBgplsTopoLocalIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLocalIpv6RouterId::CopyFrom(const SLBgplsTopoLocalIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLocalIpv6RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLocalIpv6RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoLocalIpv6RouterId::InternalSwap(SLBgplsTopoLocalIpv6RouterId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLocalIpv6RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[33]);
}

// ===================================================================

class SLBgplsTopoRemoteIpv4RouterId::_Internal {
 public:
};

SLBgplsTopoRemoteIpv4RouterId::SLBgplsTopoRemoteIpv4RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoRemoteIpv4RouterId)
}
SLBgplsTopoRemoteIpv4RouterId::SLBgplsTopoRemoteIpv4RouterId(const SLBgplsTopoRemoteIpv4RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoRemoteIpv4RouterId)
}

inline void SLBgplsTopoRemoteIpv4RouterId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoRemoteIpv4RouterId::~SLBgplsTopoRemoteIpv4RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoRemoteIpv4RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoRemoteIpv4RouterId::ArenaDtor(void* object) {
  SLBgplsTopoRemoteIpv4RouterId* _this = reinterpret_cast< SLBgplsTopoRemoteIpv4RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoRemoteIpv4RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoRemoteIpv4RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoRemoteIpv4RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoRemoteIpv4RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoRemoteIpv4RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  return target;
}

size_t SLBgplsTopoRemoteIpv4RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoRemoteIpv4RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoRemoteIpv4RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoRemoteIpv4RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoRemoteIpv4RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoRemoteIpv4RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoRemoteIpv4RouterId &>(from));
}


void SLBgplsTopoRemoteIpv4RouterId::MergeFrom(const SLBgplsTopoRemoteIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoRemoteIpv4RouterId::CopyFrom(const SLBgplsTopoRemoteIpv4RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoRemoteIpv4RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoRemoteIpv4RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoRemoteIpv4RouterId::InternalSwap(SLBgplsTopoRemoteIpv4RouterId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoRemoteIpv4RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[34]);
}

// ===================================================================

class SLBgplsTopoRemoteIpv6RouterId::_Internal {
 public:
};

SLBgplsTopoRemoteIpv6RouterId::SLBgplsTopoRemoteIpv6RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoRemoteIpv6RouterId)
}
SLBgplsTopoRemoteIpv6RouterId::SLBgplsTopoRemoteIpv6RouterId(const SLBgplsTopoRemoteIpv6RouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routerid().empty()) {
    routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoRemoteIpv6RouterId)
}

inline void SLBgplsTopoRemoteIpv6RouterId::SharedCtor() {
routerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoRemoteIpv6RouterId::~SLBgplsTopoRemoteIpv6RouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoRemoteIpv6RouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoRemoteIpv6RouterId::ArenaDtor(void* object) {
  SLBgplsTopoRemoteIpv6RouterId* _this = reinterpret_cast< SLBgplsTopoRemoteIpv6RouterId* >(object);
  (void)_this;
}
void SLBgplsTopoRemoteIpv6RouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoRemoteIpv6RouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoRemoteIpv6RouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoRemoteIpv6RouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes RouterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoRemoteIpv6RouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_routerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  return target;
}

size_t SLBgplsTopoRemoteIpv6RouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RouterId = 1;
  if (!this->_internal_routerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoRemoteIpv6RouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoRemoteIpv6RouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoRemoteIpv6RouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoRemoteIpv6RouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoRemoteIpv6RouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoRemoteIpv6RouterId &>(from));
}


void SLBgplsTopoRemoteIpv6RouterId::MergeFrom(const SLBgplsTopoRemoteIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_routerid().empty()) {
    _internal_set_routerid(from._internal_routerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoRemoteIpv6RouterId::CopyFrom(const SLBgplsTopoRemoteIpv6RouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoRemoteIpv6RouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoRemoteIpv6RouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoRemoteIpv6RouterId::InternalSwap(SLBgplsTopoRemoteIpv6RouterId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerid_, lhs_arena,
      &other->routerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoRemoteIpv6RouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[35]);
}

// ===================================================================

class SLBgplsTopoSrgb::_Internal {
 public:
};

SLBgplsTopoSrgb::SLBgplsTopoSrgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrgb)
}
SLBgplsTopoSrgb::SLBgplsTopoSrgb(const SLBgplsTopoSrgb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startlabel_, &from.startlabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrgb)
}

inline void SLBgplsTopoSrgb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startlabel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
}

SLBgplsTopoSrgb::~SLBgplsTopoSrgb() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrgb)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrgb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrgb::ArenaDtor(void* object) {
  SLBgplsTopoSrgb* _this = reinterpret_cast< SLBgplsTopoSrgb* >(object);
  (void)_this;
}
void SLBgplsTopoSrgb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrgb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrgb::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrgb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangesize_) -
      reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrgb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 StartLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          startlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RangeSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rangesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrgb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrgb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startlabel(), target);
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rangesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrgb)
  return target;
}

size_t SLBgplsTopoSrgb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrgb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startlabel());
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrgb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrgb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrgb::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrgb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrgb *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrgb &>(from));
}


void SLBgplsTopoSrgb::MergeFrom(const SLBgplsTopoSrgb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrgb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_startlabel() != 0) {
    _internal_set_startlabel(from._internal_startlabel());
  }
  if (from._internal_rangesize() != 0) {
    _internal_set_rangesize(from._internal_rangesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrgb::CopyFrom(const SLBgplsTopoSrgb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrgb::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrgb::InternalSwap(SLBgplsTopoSrgb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrgb, rangesize_)
      + sizeof(SLBgplsTopoSrgb::rangesize_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrgb, startlabel_)>(
          reinterpret_cast<char*>(&startlabel_),
          reinterpret_cast<char*>(&other->startlabel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrgb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[36]);
}

// ===================================================================

class SLBgplsTopoSrgbIsisFlags::_Internal {
 public:
};

SLBgplsTopoSrgbIsisFlags::SLBgplsTopoSrgbIsisFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrgbIsisFlags)
}
SLBgplsTopoSrgbIsisFlags::SLBgplsTopoSrgbIsisFlags(const SLBgplsTopoSrgbIsisFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrgbIsisFlags)
}

inline void SLBgplsTopoSrgbIsisFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrgbIsisFlags::~SLBgplsTopoSrgbIsisFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrgbIsisFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrgbIsisFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrgbIsisFlags::ArenaDtor(void* object) {
  SLBgplsTopoSrgbIsisFlags* _this = reinterpret_cast< SLBgplsTopoSrgbIsisFlags* >(object);
  (void)_this;
}
void SLBgplsTopoSrgbIsisFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrgbIsisFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrgbIsisFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrgbIsisFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrgbIsisFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrgbIsisFlags)
  return target;
}

size_t SLBgplsTopoSrgbIsisFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrgbIsisFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrgbIsisFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrgbIsisFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrgbIsisFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrgbIsisFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrgbIsisFlags &>(from));
}


void SLBgplsTopoSrgbIsisFlags::MergeFrom(const SLBgplsTopoSrgbIsisFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrgbIsisFlags::CopyFrom(const SLBgplsTopoSrgbIsisFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrgbIsisFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrgbIsisFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrgbIsisFlags::InternalSwap(SLBgplsTopoSrgbIsisFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrgbIsisFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[37]);
}

// ===================================================================

class SLBgplsTopoSrAlgorithm::_Internal {
 public:
};

SLBgplsTopoSrAlgorithm::SLBgplsTopoSrAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrAlgorithm)
}
SLBgplsTopoSrAlgorithm::SLBgplsTopoSrAlgorithm(const SLBgplsTopoSrAlgorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithms().empty()) {
    algorithms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algorithms(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrAlgorithm)
}

inline void SLBgplsTopoSrAlgorithm::SharedCtor() {
algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoSrAlgorithm::~SLBgplsTopoSrAlgorithm() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrAlgorithm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrAlgorithm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  algorithms_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoSrAlgorithm::ArenaDtor(void* object) {
  SLBgplsTopoSrAlgorithm* _this = reinterpret_cast< SLBgplsTopoSrAlgorithm* >(object);
  (void)_this;
}
void SLBgplsTopoSrAlgorithm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrAlgorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrAlgorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrAlgorithm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithms_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrAlgorithm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Algorithms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_algorithms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrAlgorithm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrAlgorithm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Algorithms = 1;
  if (!this->_internal_algorithms().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_algorithms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrAlgorithm)
  return target;
}

size_t SLBgplsTopoSrAlgorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrAlgorithm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Algorithms = 1;
  if (!this->_internal_algorithms().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_algorithms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrAlgorithm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrAlgorithm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrAlgorithm::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrAlgorithm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrAlgorithm *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrAlgorithm &>(from));
}


void SLBgplsTopoSrAlgorithm::MergeFrom(const SLBgplsTopoSrAlgorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrAlgorithm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_algorithms().empty()) {
    _internal_set_algorithms(from._internal_algorithms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrAlgorithm::CopyFrom(const SLBgplsTopoSrAlgorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrAlgorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrAlgorithm::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrAlgorithm::InternalSwap(SLBgplsTopoSrAlgorithm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &algorithms_, lhs_arena,
      &other->algorithms_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrAlgorithm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[38]);
}

// ===================================================================

class SLBgplsTopoSrlb::_Internal {
 public:
};

SLBgplsTopoSrlb::SLBgplsTopoSrlb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoSrlb)
}
SLBgplsTopoSrlb::SLBgplsTopoSrlb(const SLBgplsTopoSrlb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startlabel_, &from.startlabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoSrlb)
}

inline void SLBgplsTopoSrlb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startlabel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rangesize_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
}

SLBgplsTopoSrlb::~SLBgplsTopoSrlb() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoSrlb)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoSrlb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoSrlb::ArenaDtor(void* object) {
  SLBgplsTopoSrlb* _this = reinterpret_cast< SLBgplsTopoSrlb* >(object);
  (void)_this;
}
void SLBgplsTopoSrlb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoSrlb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoSrlb::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoSrlb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangesize_) -
      reinterpret_cast<char*>(&startlabel_)) + sizeof(rangesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoSrlb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 StartLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          startlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RangeSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rangesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoSrlb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoSrlb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startlabel(), target);
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rangesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoSrlb)
  return target;
}

size_t SLBgplsTopoSrlb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoSrlb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->_internal_startlabel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startlabel());
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoSrlb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoSrlb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoSrlb::GetClassData() const { return &_class_data_; }

void SLBgplsTopoSrlb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoSrlb *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoSrlb &>(from));
}


void SLBgplsTopoSrlb::MergeFrom(const SLBgplsTopoSrlb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoSrlb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_startlabel() != 0) {
    _internal_set_startlabel(from._internal_startlabel());
  }
  if (from._internal_rangesize() != 0) {
    _internal_set_rangesize(from._internal_rangesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoSrlb::CopyFrom(const SLBgplsTopoSrlb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoSrlb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoSrlb::IsInitialized() const {
  return true;
}

void SLBgplsTopoSrlb::InternalSwap(SLBgplsTopoSrlb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrlb, rangesize_)
      + sizeof(SLBgplsTopoSrlb::rangesize_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoSrlb, startlabel_)>(
          reinterpret_cast<char*>(&startlabel_),
          reinterpret_cast<char*>(&other->startlabel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoSrlb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[39]);
}

// ===================================================================

class SLBgplsTopoFad::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoFadUnsuppTlv& unsupptlv(const SLBgplsTopoFad* msg);
};

const ::service_layer::SLBgplsTopoFadUnsuppTlv&
SLBgplsTopoFad::_Internal::unsupptlv(const SLBgplsTopoFad* msg) {
  return *msg->unsupptlv_;
}
SLBgplsTopoFad::SLBgplsTopoFad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  excanyaff_(arena),
  incanyaff_(arena),
  incallaff_(arena),
  excsrlg_(arena),
  excanyrevaff_(arena),
  incanyrevaff_(arena),
  incallrevaff_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoFad)
}
SLBgplsTopoFad::SLBgplsTopoFad(const SLBgplsTopoFad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      excanyaff_(from.excanyaff_),
      incanyaff_(from.incanyaff_),
      incallaff_(from.incallaff_),
      excsrlg_(from.excsrlg_),
      excanyrevaff_(from.excanyrevaff_),
      incanyrevaff_(from.incanyrevaff_),
      incallrevaff_(from.incallrevaff_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm().empty()) {
    algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algorithm(), 
      GetArenaForAllocation());
  }
  metrictype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metrictype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metrictype().empty()) {
    metrictype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metrictype(), 
      GetArenaForAllocation());
  }
  calctype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    calctype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_calctype().empty()) {
    calctype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_calctype(), 
      GetArenaForAllocation());
  }
  priority_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    priority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priority().empty()) {
    priority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_priority(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  excminbw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    excminbw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_excminbw().empty()) {
    excminbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_excminbw(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_unsupptlv()) {
    unsupptlv_ = new ::service_layer::SLBgplsTopoFadUnsuppTlv(*from.unsupptlv_);
  } else {
    unsupptlv_ = nullptr;
  }
  excmaxdelay_ = from.excmaxdelay_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoFad)
}

inline void SLBgplsTopoFad::SharedCtor() {
algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metrictype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metrictype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
calctype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  calctype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
priority_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  priority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
excminbw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  excminbw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unsupptlv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&excmaxdelay_) -
    reinterpret_cast<char*>(&unsupptlv_)) + sizeof(excmaxdelay_));
}

SLBgplsTopoFad::~SLBgplsTopoFad() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoFad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoFad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metrictype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calctype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excminbw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unsupptlv_;
}

void SLBgplsTopoFad::ArenaDtor(void* object) {
  SLBgplsTopoFad* _this = reinterpret_cast< SLBgplsTopoFad* >(object);
  (void)_this;
}
void SLBgplsTopoFad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoFad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoFad::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoFad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excanyaff_.Clear();
  incanyaff_.Clear();
  incallaff_.Clear();
  excsrlg_.Clear();
  excanyrevaff_.Clear();
  incanyrevaff_.Clear();
  incallrevaff_.Clear();
  algorithm_.ClearToEmpty();
  metrictype_.ClearToEmpty();
  calctype_.ClearToEmpty();
  priority_.ClearToEmpty();
  flags_.ClearToEmpty();
  excminbw_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && unsupptlv_ != nullptr) {
    delete unsupptlv_;
  }
  unsupptlv_ = nullptr;
  excmaxdelay_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoFad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes MetricType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metrictype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes CalcType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_calctype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_priority();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ExcAnyAff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excanyaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_excanyaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAnyAff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incanyaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_incanyaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAllAff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incallaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_incallaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ExcSrlg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excsrlg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_excsrlg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ExcAnyRevAff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excanyrevaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_excanyrevaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAnyRevAff = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incanyrevaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_incanyrevaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 IncAllRevAff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incallrevaff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_incallrevaff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ExcMaxDelay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          excmaxdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ExcMinBw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_excminbw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsupptlv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoFad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoFad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Algorithm = 1;
  if (!this->_internal_algorithm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_algorithm(), target);
  }

  // bytes MetricType = 2;
  if (!this->_internal_metrictype().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metrictype(), target);
  }

  // bytes CalcType = 3;
  if (!this->_internal_calctype().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_calctype(), target);
  }

  // bytes Priority = 4;
  if (!this->_internal_priority().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_priority(), target);
  }

  // repeated uint32 ExcAnyAff = 5;
  {
    int byte_size = _excanyaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_excanyaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAnyAff = 6;
  {
    int byte_size = _incanyaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_incanyaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAllAff = 7;
  {
    int byte_size = _incallaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_incallaff(), byte_size, target);
    }
  }

  // bytes Flags = 8;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_flags(), target);
  }

  // repeated uint32 ExcSrlg = 9;
  {
    int byte_size = _excsrlg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_excsrlg(), byte_size, target);
    }
  }

  // repeated uint32 ExcAnyRevAff = 10;
  {
    int byte_size = _excanyrevaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_excanyrevaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAnyRevAff = 11;
  {
    int byte_size = _incanyrevaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_incanyrevaff(), byte_size, target);
    }
  }

  // repeated uint32 IncAllRevAff = 12;
  {
    int byte_size = _incallrevaff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_incallrevaff(), byte_size, target);
    }
  }

  // uint32 ExcMaxDelay = 13;
  if (this->_internal_excmaxdelay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_excmaxdelay(), target);
  }

  // bytes ExcMinBw = 14;
  if (!this->_internal_excminbw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_excminbw(), target);
  }

  // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
  if (this->_internal_has_unsupptlv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::unsupptlv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoFad)
  return target;
}

size_t SLBgplsTopoFad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoFad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ExcAnyAff = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excanyaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excanyaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAnyAff = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incanyaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incanyaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAllAff = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incallaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incallaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ExcSrlg = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excsrlg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excsrlg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ExcAnyRevAff = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excanyrevaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excanyrevaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAnyRevAff = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incanyrevaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incanyrevaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 IncAllRevAff = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incallrevaff_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incallrevaff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes Algorithm = 1;
  if (!this->_internal_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_algorithm());
  }

  // bytes MetricType = 2;
  if (!this->_internal_metrictype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metrictype());
  }

  // bytes CalcType = 3;
  if (!this->_internal_calctype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_calctype());
  }

  // bytes Priority = 4;
  if (!this->_internal_priority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_priority());
  }

  // bytes Flags = 8;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // bytes ExcMinBw = 14;
  if (!this->_internal_excminbw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_excminbw());
  }

  // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
  if (this->_internal_has_unsupptlv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unsupptlv_);
  }

  // uint32 ExcMaxDelay = 13;
  if (this->_internal_excmaxdelay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_excmaxdelay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoFad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoFad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoFad::GetClassData() const { return &_class_data_; }

void SLBgplsTopoFad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoFad *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoFad &>(from));
}


void SLBgplsTopoFad::MergeFrom(const SLBgplsTopoFad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoFad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  excanyaff_.MergeFrom(from.excanyaff_);
  incanyaff_.MergeFrom(from.incanyaff_);
  incallaff_.MergeFrom(from.incallaff_);
  excsrlg_.MergeFrom(from.excsrlg_);
  excanyrevaff_.MergeFrom(from.excanyrevaff_);
  incanyrevaff_.MergeFrom(from.incanyrevaff_);
  incallrevaff_.MergeFrom(from.incallrevaff_);
  if (!from._internal_algorithm().empty()) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (!from._internal_metrictype().empty()) {
    _internal_set_metrictype(from._internal_metrictype());
  }
  if (!from._internal_calctype().empty()) {
    _internal_set_calctype(from._internal_calctype());
  }
  if (!from._internal_priority().empty()) {
    _internal_set_priority(from._internal_priority());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (!from._internal_excminbw().empty()) {
    _internal_set_excminbw(from._internal_excminbw());
  }
  if (from._internal_has_unsupptlv()) {
    _internal_mutable_unsupptlv()->::service_layer::SLBgplsTopoFadUnsuppTlv::MergeFrom(from._internal_unsupptlv());
  }
  if (from._internal_excmaxdelay() != 0) {
    _internal_set_excmaxdelay(from._internal_excmaxdelay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoFad::CopyFrom(const SLBgplsTopoFad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoFad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoFad::IsInitialized() const {
  return true;
}

void SLBgplsTopoFad::InternalSwap(SLBgplsTopoFad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  excanyaff_.InternalSwap(&other->excanyaff_);
  incanyaff_.InternalSwap(&other->incanyaff_);
  incallaff_.InternalSwap(&other->incallaff_);
  excsrlg_.InternalSwap(&other->excsrlg_);
  excanyrevaff_.InternalSwap(&other->excanyrevaff_);
  incanyrevaff_.InternalSwap(&other->incanyrevaff_);
  incallrevaff_.InternalSwap(&other->incallrevaff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &algorithm_, lhs_arena,
      &other->algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metrictype_, lhs_arena,
      &other->metrictype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &calctype_, lhs_arena,
      &other->calctype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &priority_, lhs_arena,
      &other->priority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &excminbw_, lhs_arena,
      &other->excminbw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoFad, excmaxdelay_)
      + sizeof(SLBgplsTopoFad::excmaxdelay_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoFad, unsupptlv_)>(
          reinterpret_cast<char*>(&unsupptlv_),
          reinterpret_cast<char*>(&other->unsupptlv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoFad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[40]);
}

// ===================================================================

class SLBgplsTopoPrefixFAPM::_Internal {
 public:
};

SLBgplsTopoPrefixFAPM::SLBgplsTopoPrefixFAPM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixFAPM)
}
SLBgplsTopoPrefixFAPM::SLBgplsTopoPrefixFAPM(const SLBgplsTopoPrefixFAPM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&flexalgo_, &from.flexalgo_,
    static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&flexalgo_)) + sizeof(metric_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixFAPM)
}

inline void SLBgplsTopoPrefixFAPM::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flexalgo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&flexalgo_)) + sizeof(metric_));
}

SLBgplsTopoPrefixFAPM::~SLBgplsTopoPrefixFAPM() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixFAPM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixFAPM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixFAPM::ArenaDtor(void* object) {
  SLBgplsTopoPrefixFAPM* _this = reinterpret_cast< SLBgplsTopoPrefixFAPM* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixFAPM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixFAPM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixFAPM::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixFAPM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&flexalgo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metric_) -
      reinterpret_cast<char*>(&flexalgo_)) + sizeof(metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixFAPM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 FlexAlgo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flexalgo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Metric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixFAPM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixFAPM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FlexAlgo = 1;
  if (this->_internal_flexalgo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flexalgo(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // uint32 Metric = 3;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixFAPM)
  return target;
}

size_t SLBgplsTopoPrefixFAPM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixFAPM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 FlexAlgo = 1;
  if (this->_internal_flexalgo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flexalgo());
  }

  // uint32 Metric = 3;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixFAPM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixFAPM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixFAPM::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixFAPM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixFAPM *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixFAPM &>(from));
}


void SLBgplsTopoPrefixFAPM::MergeFrom(const SLBgplsTopoPrefixFAPM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixFAPM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_flexalgo() != 0) {
    _internal_set_flexalgo(from._internal_flexalgo());
  }
  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixFAPM::CopyFrom(const SLBgplsTopoPrefixFAPM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixFAPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixFAPM::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixFAPM::InternalSwap(SLBgplsTopoPrefixFAPM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixFAPM, metric_)
      + sizeof(SLBgplsTopoPrefixFAPM::metric_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixFAPM, flexalgo_)>(
          reinterpret_cast<char*>(&flexalgo_),
          reinterpret_cast<char*>(&other->flexalgo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixFAPM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[41]);
}

// ===================================================================

class SLBgplsTopoFadUnsuppTlv::_Internal {
 public:
};

SLBgplsTopoFadUnsuppTlv::SLBgplsTopoFadUnsuppTlv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoFadUnsuppTlv)
}
SLBgplsTopoFadUnsuppTlv::SLBgplsTopoFadUnsuppTlv(const SLBgplsTopoFadUnsuppTlv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_types().empty()) {
    types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_types(), 
      GetArenaForAllocation());
  }
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoFadUnsuppTlv)
}

inline void SLBgplsTopoFadUnsuppTlv::SharedCtor() {
types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_ = 0;
}

SLBgplsTopoFadUnsuppTlv::~SLBgplsTopoFadUnsuppTlv() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoFadUnsuppTlv)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoFadUnsuppTlv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  types_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoFadUnsuppTlv::ArenaDtor(void* object) {
  SLBgplsTopoFadUnsuppTlv* _this = reinterpret_cast< SLBgplsTopoFadUnsuppTlv* >(object);
  (void)_this;
}
void SLBgplsTopoFadUnsuppTlv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoFadUnsuppTlv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoFadUnsuppTlv::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.ClearToEmpty();
  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoFadUnsuppTlv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgplsTopoProtocol Protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::service_layer::SLBgplsTopoProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_types();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoFadUnsuppTlv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgplsTopoProtocol Protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // bytes Types = 2;
  if (!this->_internal_types().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_types(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoFadUnsuppTlv)
  return target;
}

size_t SLBgplsTopoFadUnsuppTlv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Types = 2;
  if (!this->_internal_types().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_types());
  }

  // .service_layer.SLBgplsTopoProtocol Protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoFadUnsuppTlv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoFadUnsuppTlv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoFadUnsuppTlv::GetClassData() const { return &_class_data_; }

void SLBgplsTopoFadUnsuppTlv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoFadUnsuppTlv *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoFadUnsuppTlv &>(from));
}


void SLBgplsTopoFadUnsuppTlv::MergeFrom(const SLBgplsTopoFadUnsuppTlv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_types().empty()) {
    _internal_set_types(from._internal_types());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoFadUnsuppTlv::CopyFrom(const SLBgplsTopoFadUnsuppTlv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoFadUnsuppTlv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoFadUnsuppTlv::IsInitialized() const {
  return true;
}

void SLBgplsTopoFadUnsuppTlv::InternalSwap(SLBgplsTopoFadUnsuppTlv* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &types_, lhs_arena,
      &other->types_, rhs_arena
  );
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoFadUnsuppTlv::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[42]);
}

// ===================================================================

class SLBgplsTopoAdminGroup::_Internal {
 public:
};

SLBgplsTopoAdminGroup::SLBgplsTopoAdminGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoAdminGroup)
}
SLBgplsTopoAdminGroup::SLBgplsTopoAdminGroup(const SLBgplsTopoAdminGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_ = from.group_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoAdminGroup)
}

inline void SLBgplsTopoAdminGroup::SharedCtor() {
group_ = 0u;
}

SLBgplsTopoAdminGroup::~SLBgplsTopoAdminGroup() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoAdminGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoAdminGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoAdminGroup::ArenaDtor(void* object) {
  SLBgplsTopoAdminGroup* _this = reinterpret_cast< SLBgplsTopoAdminGroup* >(object);
  (void)_this;
}
void SLBgplsTopoAdminGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoAdminGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoAdminGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoAdminGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoAdminGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoAdminGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoAdminGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Group = 1;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoAdminGroup)
  return target;
}

size_t SLBgplsTopoAdminGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoAdminGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Group = 1;
  if (this->_internal_group() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoAdminGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoAdminGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoAdminGroup::GetClassData() const { return &_class_data_; }

void SLBgplsTopoAdminGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoAdminGroup *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoAdminGroup &>(from));
}


void SLBgplsTopoAdminGroup::MergeFrom(const SLBgplsTopoAdminGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoAdminGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group() != 0) {
    _internal_set_group(from._internal_group());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoAdminGroup::CopyFrom(const SLBgplsTopoAdminGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoAdminGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoAdminGroup::IsInitialized() const {
  return true;
}

void SLBgplsTopoAdminGroup::InternalSwap(SLBgplsTopoAdminGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoAdminGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[43]);
}

// ===================================================================

class SLBgplsTopoLinkMaxBandwidth::_Internal {
 public:
};

SLBgplsTopoLinkMaxBandwidth::SLBgplsTopoLinkMaxBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMaxBandwidth)
}
SLBgplsTopoLinkMaxBandwidth::SLBgplsTopoLinkMaxBandwidth(const SLBgplsTopoLinkMaxBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMaxBandwidth)
}

inline void SLBgplsTopoLinkMaxBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkMaxBandwidth::~SLBgplsTopoLinkMaxBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMaxBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMaxBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkMaxBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoLinkMaxBandwidth* _this = reinterpret_cast< SLBgplsTopoLinkMaxBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMaxBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMaxBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMaxBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMaxBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMaxBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMaxBandwidth)
  return target;
}

size_t SLBgplsTopoLinkMaxBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMaxBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMaxBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMaxBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMaxBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMaxBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMaxBandwidth &>(from));
}


void SLBgplsTopoLinkMaxBandwidth::MergeFrom(const SLBgplsTopoLinkMaxBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMaxBandwidth::CopyFrom(const SLBgplsTopoLinkMaxBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMaxBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMaxBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMaxBandwidth::InternalSwap(SLBgplsTopoLinkMaxBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMaxBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[44]);
}

// ===================================================================

class SLBgplsTopoLinkMaxResvBandwidth::_Internal {
 public:
};

SLBgplsTopoLinkMaxResvBandwidth::SLBgplsTopoLinkMaxResvBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
}
SLBgplsTopoLinkMaxResvBandwidth::SLBgplsTopoLinkMaxResvBandwidth(const SLBgplsTopoLinkMaxResvBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
}

inline void SLBgplsTopoLinkMaxResvBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkMaxResvBandwidth::~SLBgplsTopoLinkMaxResvBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMaxResvBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkMaxResvBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoLinkMaxResvBandwidth* _this = reinterpret_cast< SLBgplsTopoLinkMaxResvBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMaxResvBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMaxResvBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMaxResvBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMaxResvBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMaxResvBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  return target;
}

size_t SLBgplsTopoLinkMaxResvBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMaxResvBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMaxResvBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMaxResvBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMaxResvBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMaxResvBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMaxResvBandwidth &>(from));
}


void SLBgplsTopoLinkMaxResvBandwidth::MergeFrom(const SLBgplsTopoLinkMaxResvBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMaxResvBandwidth::CopyFrom(const SLBgplsTopoLinkMaxResvBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMaxResvBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMaxResvBandwidth::InternalSwap(SLBgplsTopoLinkMaxResvBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMaxResvBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[45]);
}

// ===================================================================

class SLBgplsTopoLinkUnresvBandwidth::_Internal {
 public:
};

SLBgplsTopoLinkUnresvBandwidth::SLBgplsTopoLinkUnresvBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkUnresvBandwidth)
}
SLBgplsTopoLinkUnresvBandwidth::SLBgplsTopoLinkUnresvBandwidth(const SLBgplsTopoLinkUnresvBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkUnresvBandwidth)
}

inline void SLBgplsTopoLinkUnresvBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
priority_ = 0u;
}

SLBgplsTopoLinkUnresvBandwidth::~SLBgplsTopoLinkUnresvBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkUnresvBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkUnresvBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoLinkUnresvBandwidth* _this = reinterpret_cast< SLBgplsTopoLinkUnresvBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoLinkUnresvBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkUnresvBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkUnresvBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  priority_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkUnresvBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkUnresvBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Priority = 1;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // bytes Bandwidth = 2;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  return target;
}

size_t SLBgplsTopoLinkUnresvBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 2;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  // uint32 Priority = 1;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkUnresvBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkUnresvBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkUnresvBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkUnresvBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkUnresvBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkUnresvBandwidth &>(from));
}


void SLBgplsTopoLinkUnresvBandwidth::MergeFrom(const SLBgplsTopoLinkUnresvBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkUnresvBandwidth::CopyFrom(const SLBgplsTopoLinkUnresvBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkUnresvBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkUnresvBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkUnresvBandwidth::InternalSwap(SLBgplsTopoLinkUnresvBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkUnresvBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[46]);
}

// ===================================================================

class SLBgplsTopoLinkTeDefaultMetric::_Internal {
 public:
};

SLBgplsTopoLinkTeDefaultMetric::SLBgplsTopoLinkTeDefaultMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkTeDefaultMetric)
}
SLBgplsTopoLinkTeDefaultMetric::SLBgplsTopoLinkTeDefaultMetric(const SLBgplsTopoLinkTeDefaultMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkTeDefaultMetric)
}

inline void SLBgplsTopoLinkTeDefaultMetric::SharedCtor() {
metric_ = 0u;
}

SLBgplsTopoLinkTeDefaultMetric::~SLBgplsTopoLinkTeDefaultMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkTeDefaultMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkTeDefaultMetric::ArenaDtor(void* object) {
  SLBgplsTopoLinkTeDefaultMetric* _this = reinterpret_cast< SLBgplsTopoLinkTeDefaultMetric* >(object);
  (void)_this;
}
void SLBgplsTopoLinkTeDefaultMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkTeDefaultMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkTeDefaultMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkTeDefaultMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkTeDefaultMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  return target;
}

size_t SLBgplsTopoLinkTeDefaultMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkTeDefaultMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkTeDefaultMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkTeDefaultMetric::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkTeDefaultMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkTeDefaultMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkTeDefaultMetric &>(from));
}


void SLBgplsTopoLinkTeDefaultMetric::MergeFrom(const SLBgplsTopoLinkTeDefaultMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkTeDefaultMetric::CopyFrom(const SLBgplsTopoLinkTeDefaultMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkTeDefaultMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkTeDefaultMetric::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkTeDefaultMetric::InternalSwap(SLBgplsTopoLinkTeDefaultMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metric_, other->metric_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkTeDefaultMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[47]);
}

// ===================================================================

class SLBgplsTopoLinkProtectionType::_Internal {
 public:
};

SLBgplsTopoLinkProtectionType::SLBgplsTopoLinkProtectionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkProtectionType)
}
SLBgplsTopoLinkProtectionType::SLBgplsTopoLinkProtectionType(const SLBgplsTopoLinkProtectionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkProtectionType)
}

inline void SLBgplsTopoLinkProtectionType::SharedCtor() {
mask_ = 0u;
}

SLBgplsTopoLinkProtectionType::~SLBgplsTopoLinkProtectionType() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkProtectionType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkProtectionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkProtectionType::ArenaDtor(void* object) {
  SLBgplsTopoLinkProtectionType* _this = reinterpret_cast< SLBgplsTopoLinkProtectionType* >(object);
  (void)_this;
}
void SLBgplsTopoLinkProtectionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkProtectionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkProtectionType::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkProtectionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkProtectionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkProtectionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkProtectionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Mask = 1;
  if (this->_internal_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkProtectionType)
  return target;
}

size_t SLBgplsTopoLinkProtectionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkProtectionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Mask = 1;
  if (this->_internal_mask() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkProtectionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkProtectionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkProtectionType::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkProtectionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkProtectionType *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkProtectionType &>(from));
}


void SLBgplsTopoLinkProtectionType::MergeFrom(const SLBgplsTopoLinkProtectionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkProtectionType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mask() != 0) {
    _internal_set_mask(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkProtectionType::CopyFrom(const SLBgplsTopoLinkProtectionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkProtectionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkProtectionType::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkProtectionType::InternalSwap(SLBgplsTopoLinkProtectionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkProtectionType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[48]);
}

// ===================================================================

class SLBgplsTopoLinkMplsProtoMask::_Internal {
 public:
};

SLBgplsTopoLinkMplsProtoMask::SLBgplsTopoLinkMplsProtoMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkMplsProtoMask)
}
SLBgplsTopoLinkMplsProtoMask::SLBgplsTopoLinkMplsProtoMask(const SLBgplsTopoLinkMplsProtoMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask().empty()) {
    mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mask(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkMplsProtoMask)
}

inline void SLBgplsTopoLinkMplsProtoMask::SharedCtor() {
mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkMplsProtoMask::~SLBgplsTopoLinkMplsProtoMask() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkMplsProtoMask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkMplsProtoMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkMplsProtoMask::ArenaDtor(void* object) {
  SLBgplsTopoLinkMplsProtoMask* _this = reinterpret_cast< SLBgplsTopoLinkMplsProtoMask* >(object);
  (void)_this;
}
void SLBgplsTopoLinkMplsProtoMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkMplsProtoMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkMplsProtoMask::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkMplsProtoMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkMplsProtoMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Mask = 1;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkMplsProtoMask)
  return target;
}

size_t SLBgplsTopoLinkMplsProtoMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Mask = 1;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkMplsProtoMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkMplsProtoMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkMplsProtoMask::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkMplsProtoMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkMplsProtoMask *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkMplsProtoMask &>(from));
}


void SLBgplsTopoLinkMplsProtoMask::MergeFrom(const SLBgplsTopoLinkMplsProtoMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mask().empty()) {
    _internal_set_mask(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkMplsProtoMask::CopyFrom(const SLBgplsTopoLinkMplsProtoMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkMplsProtoMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkMplsProtoMask::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkMplsProtoMask::InternalSwap(SLBgplsTopoLinkMplsProtoMask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mask_, lhs_arena,
      &other->mask_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkMplsProtoMask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[49]);
}

// ===================================================================

class SLBgplsTopoLinkIgpMetric::_Internal {
 public:
};

SLBgplsTopoLinkIgpMetric::SLBgplsTopoLinkIgpMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkIgpMetric)
}
SLBgplsTopoLinkIgpMetric::SLBgplsTopoLinkIgpMetric(const SLBgplsTopoLinkIgpMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric().empty()) {
    metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkIgpMetric)
}

inline void SLBgplsTopoLinkIgpMetric::SharedCtor() {
metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkIgpMetric::~SLBgplsTopoLinkIgpMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkIgpMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkIgpMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkIgpMetric::ArenaDtor(void* object) {
  SLBgplsTopoLinkIgpMetric* _this = reinterpret_cast< SLBgplsTopoLinkIgpMetric* >(object);
  (void)_this;
}
void SLBgplsTopoLinkIgpMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkIgpMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkIgpMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkIgpMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkIgpMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkIgpMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkIgpMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Metric = 1;
  if (!this->_internal_metric().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkIgpMetric)
  return target;
}

size_t SLBgplsTopoLinkIgpMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkIgpMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Metric = 1;
  if (!this->_internal_metric().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkIgpMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkIgpMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkIgpMetric::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkIgpMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkIgpMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkIgpMetric &>(from));
}


void SLBgplsTopoLinkIgpMetric::MergeFrom(const SLBgplsTopoLinkIgpMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkIgpMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metric().empty()) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkIgpMetric::CopyFrom(const SLBgplsTopoLinkIgpMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkIgpMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkIgpMetric::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkIgpMetric::InternalSwap(SLBgplsTopoLinkIgpMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metric_, lhs_arena,
      &other->metric_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkIgpMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[50]);
}

// ===================================================================

class SLBgplsTopoLinkSrlg::_Internal {
 public:
};

SLBgplsTopoLinkSrlg::SLBgplsTopoLinkSrlg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkSrlg)
}
SLBgplsTopoLinkSrlg::SLBgplsTopoLinkSrlg(const SLBgplsTopoLinkSrlg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srlgval_ = from.srlgval_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkSrlg)
}

inline void SLBgplsTopoLinkSrlg::SharedCtor() {
srlgval_ = 0u;
}

SLBgplsTopoLinkSrlg::~SLBgplsTopoLinkSrlg() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkSrlg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkSrlg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoLinkSrlg::ArenaDtor(void* object) {
  SLBgplsTopoLinkSrlg* _this = reinterpret_cast< SLBgplsTopoLinkSrlg* >(object);
  (void)_this;
}
void SLBgplsTopoLinkSrlg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkSrlg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkSrlg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkSrlg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srlgval_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkSrlg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SrlgVal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srlgval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkSrlg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkSrlg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SrlgVal = 1;
  if (this->_internal_srlgval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srlgval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkSrlg)
  return target;
}

size_t SLBgplsTopoLinkSrlg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkSrlg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SrlgVal = 1;
  if (this->_internal_srlgval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_srlgval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkSrlg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkSrlg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkSrlg::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkSrlg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkSrlg *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkSrlg &>(from));
}


void SLBgplsTopoLinkSrlg::MergeFrom(const SLBgplsTopoLinkSrlg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkSrlg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srlgval() != 0) {
    _internal_set_srlgval(from._internal_srlgval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkSrlg::CopyFrom(const SLBgplsTopoLinkSrlg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkSrlg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkSrlg::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkSrlg::InternalSwap(SLBgplsTopoLinkSrlg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(srlgval_, other->srlgval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkSrlg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[51]);
}

// ===================================================================

class SLBgplsTopoLinkOpaqueAttr::_Internal {
 public:
};

SLBgplsTopoLinkOpaqueAttr::SLBgplsTopoLinkOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkOpaqueAttr)
}
SLBgplsTopoLinkOpaqueAttr::SLBgplsTopoLinkOpaqueAttr(const SLBgplsTopoLinkOpaqueAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opaqueattr().empty()) {
    opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaqueattr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkOpaqueAttr)
}

inline void SLBgplsTopoLinkOpaqueAttr::SharedCtor() {
opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkOpaqueAttr::~SLBgplsTopoLinkOpaqueAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkOpaqueAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkOpaqueAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaqueattr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkOpaqueAttr::ArenaDtor(void* object) {
  SLBgplsTopoLinkOpaqueAttr* _this = reinterpret_cast< SLBgplsTopoLinkOpaqueAttr* >(object);
  (void)_this;
}
void SLBgplsTopoLinkOpaqueAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkOpaqueAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkOpaqueAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaqueattr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkOpaqueAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes OpaqueAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaqueattr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkOpaqueAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaqueattr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkOpaqueAttr)
  return target;
}

size_t SLBgplsTopoLinkOpaqueAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaqueattr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkOpaqueAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkOpaqueAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkOpaqueAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkOpaqueAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkOpaqueAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkOpaqueAttr &>(from));
}


void SLBgplsTopoLinkOpaqueAttr::MergeFrom(const SLBgplsTopoLinkOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_opaqueattr().empty()) {
    _internal_set_opaqueattr(from._internal_opaqueattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkOpaqueAttr::CopyFrom(const SLBgplsTopoLinkOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkOpaqueAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkOpaqueAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkOpaqueAttr::InternalSwap(SLBgplsTopoLinkOpaqueAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaqueattr_, lhs_arena,
      &other->opaqueattr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkOpaqueAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[52]);
}

// ===================================================================

class SLBgplsTopoLinkName::_Internal {
 public:
};

SLBgplsTopoLinkName::SLBgplsTopoLinkName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLinkName)
}
SLBgplsTopoLinkName::SLBgplsTopoLinkName(const SLBgplsTopoLinkName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLinkName)
}

inline void SLBgplsTopoLinkName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoLinkName::~SLBgplsTopoLinkName() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLinkName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLinkName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoLinkName::ArenaDtor(void* object) {
  SLBgplsTopoLinkName* _this = reinterpret_cast< SLBgplsTopoLinkName* >(object);
  (void)_this;
}
void SLBgplsTopoLinkName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLinkName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLinkName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLinkName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLinkName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLBgplsTopoLinkName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLinkName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLinkName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLBgplsTopoLinkName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLinkName)
  return target;
}

size_t SLBgplsTopoLinkName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLinkName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLinkName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLinkName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLinkName::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLinkName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLinkName *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLinkName &>(from));
}


void SLBgplsTopoLinkName::MergeFrom(const SLBgplsTopoLinkName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLinkName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLinkName::CopyFrom(const SLBgplsTopoLinkName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLinkName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLinkName::IsInitialized() const {
  return true;
}

void SLBgplsTopoLinkName::InternalSwap(SLBgplsTopoLinkName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLinkName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[53]);
}

// ===================================================================

class SLBgplsTopoAdjSid::_Internal {
 public:
};

SLBgplsTopoAdjSid::SLBgplsTopoAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoAdjSid)
}
SLBgplsTopoAdjSid::SLBgplsTopoAdjSid(const SLBgplsTopoAdjSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&labelindex_, &from.labelindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoAdjSid)
}

inline void SLBgplsTopoAdjSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&labelindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
}

SLBgplsTopoAdjSid::~SLBgplsTopoAdjSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoAdjSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoAdjSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoAdjSid::ArenaDtor(void* object) {
  SLBgplsTopoAdjSid* _this = reinterpret_cast< SLBgplsTopoAdjSid* >(object);
  (void)_this;
}
void SLBgplsTopoAdjSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoAdjSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoAdjSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoAdjSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&labelindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoAdjSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LabelIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          labelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adjsidformat(static_cast<::service_layer::SLBgplsTopoSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoAdjSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoAdjSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LabelIndex = 1;
  if (this->_internal_labelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_labelindex(), target);
  }

  // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 2;
  if (this->_internal_adjsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_adjsidformat(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoAdjSid)
  return target;
}

size_t SLBgplsTopoAdjSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoAdjSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 LabelIndex = 1;
  if (this->_internal_labelindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_labelindex());
  }

  // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 2;
  if (this->_internal_adjsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adjsidformat());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoAdjSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoAdjSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoAdjSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoAdjSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoAdjSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoAdjSid &>(from));
}


void SLBgplsTopoAdjSid::MergeFrom(const SLBgplsTopoAdjSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoAdjSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_labelindex() != 0) {
    _internal_set_labelindex(from._internal_labelindex());
  }
  if (from._internal_adjsidformat() != 0) {
    _internal_set_adjsidformat(from._internal_adjsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoAdjSid::CopyFrom(const SLBgplsTopoAdjSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoAdjSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoAdjSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoAdjSid::InternalSwap(SLBgplsTopoAdjSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoAdjSid, weight_)
      + sizeof(SLBgplsTopoAdjSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoAdjSid, labelindex_)>(
          reinterpret_cast<char*>(&labelindex_),
          reinterpret_cast<char*>(&other->labelindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoAdjSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[54]);
}

// ===================================================================

class SLBgplsTopoLanAdjSid::_Internal {
 public:
  static const ::service_layer::SLBgpLsTopoNeighborId& neighbor(const SLBgplsTopoLanAdjSid* msg);
};

const ::service_layer::SLBgpLsTopoNeighborId&
SLBgplsTopoLanAdjSid::_Internal::neighbor(const SLBgplsTopoLanAdjSid* msg) {
  return *msg->neighbor_;
}
SLBgplsTopoLanAdjSid::SLBgplsTopoLanAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoLanAdjSid)
}
SLBgplsTopoLanAdjSid::SLBgplsTopoLanAdjSid(const SLBgplsTopoLanAdjSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_neighbor()) {
    neighbor_ = new ::service_layer::SLBgpLsTopoNeighborId(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  ::memcpy(&labelindex_, &from.labelindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoLanAdjSid)
}

inline void SLBgplsTopoLanAdjSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&neighbor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&neighbor_)) + sizeof(weight_));
}

SLBgplsTopoLanAdjSid::~SLBgplsTopoLanAdjSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoLanAdjSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoLanAdjSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete neighbor_;
}

void SLBgplsTopoLanAdjSid::ArenaDtor(void* object) {
  SLBgplsTopoLanAdjSid* _this = reinterpret_cast< SLBgplsTopoLanAdjSid* >(object);
  (void)_this;
}
void SLBgplsTopoLanAdjSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoLanAdjSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoLanAdjSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoLanAdjSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && neighbor_ != nullptr) {
    delete neighbor_;
  }
  neighbor_ = nullptr;
  ::memset(&labelindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&labelindex_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoLanAdjSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LabelIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          labelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adjsidformat(static_cast<::service_layer::SLBgplsTopoSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoLanAdjSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoLanAdjSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  if (this->_internal_has_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::neighbor(this), target, stream);
  }

  // uint32 LabelIndex = 2;
  if (this->_internal_labelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_labelindex(), target);
  }

  // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 3;
  if (this->_internal_adjsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_adjsidformat(), target);
  }

  // bytes Flags = 4;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_flags(), target);
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoLanAdjSid)
  return target;
}

size_t SLBgplsTopoLanAdjSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoLanAdjSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 4;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  if (this->_internal_has_neighbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }

  // uint32 LabelIndex = 2;
  if (this->_internal_labelindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_labelindex());
  }

  // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 3;
  if (this->_internal_adjsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adjsidformat());
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoLanAdjSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoLanAdjSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoLanAdjSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoLanAdjSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoLanAdjSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoLanAdjSid &>(from));
}


void SLBgplsTopoLanAdjSid::MergeFrom(const SLBgplsTopoLanAdjSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoLanAdjSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_has_neighbor()) {
    _internal_mutable_neighbor()->::service_layer::SLBgpLsTopoNeighborId::MergeFrom(from._internal_neighbor());
  }
  if (from._internal_labelindex() != 0) {
    _internal_set_labelindex(from._internal_labelindex());
  }
  if (from._internal_adjsidformat() != 0) {
    _internal_set_adjsidformat(from._internal_adjsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoLanAdjSid::CopyFrom(const SLBgplsTopoLanAdjSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoLanAdjSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoLanAdjSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoLanAdjSid::InternalSwap(SLBgplsTopoLanAdjSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoLanAdjSid, weight_)
      + sizeof(SLBgplsTopoLanAdjSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoLanAdjSid, neighbor_)>(
          reinterpret_cast<char*>(&neighbor_),
          reinterpret_cast<char*>(&other->neighbor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoLanAdjSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[55]);
}

// ===================================================================

class SLBgplsTopoBgpPeerNodeSid::_Internal {
 public:
};

SLBgplsTopoBgpPeerNodeSid::SLBgplsTopoBgpPeerNodeSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoBgpPeerNodeSid)
}
SLBgplsTopoBgpPeerNodeSid::SLBgplsTopoBgpPeerNodeSid(const SLBgplsTopoBgpPeerNodeSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bgpsidformat_, &from.bgpsidformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoBgpPeerNodeSid)
}

inline void SLBgplsTopoBgpPeerNodeSid::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bgpsidformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
}

SLBgplsTopoBgpPeerNodeSid::~SLBgplsTopoBgpPeerNodeSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoBgpPeerNodeSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoBgpPeerNodeSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoBgpPeerNodeSid::ArenaDtor(void* object) {
  SLBgplsTopoBgpPeerNodeSid* _this = reinterpret_cast< SLBgplsTopoBgpPeerNodeSid* >(object);
  (void)_this;
}
void SLBgplsTopoBgpPeerNodeSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoBgpPeerNodeSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoBgpPeerNodeSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoBgpPeerNodeSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  flags_.ClearToEmpty();
  ::memset(&bgpsidformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoBgpPeerNodeSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bgpsidformat(static_cast<::service_layer::SLBgplsTopoSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoBgpPeerNodeSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoBgpPeerNodeSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  if (this->_internal_bgpsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bgpsidformat(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoBgpPeerNodeSid)
  return target;
}

size_t SLBgplsTopoBgpPeerNodeSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoBgpPeerNodeSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  if (this->_internal_bgpsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bgpsidformat());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoBgpPeerNodeSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoBgpPeerNodeSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoBgpPeerNodeSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoBgpPeerNodeSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoBgpPeerNodeSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoBgpPeerNodeSid &>(from));
}


void SLBgplsTopoBgpPeerNodeSid::MergeFrom(const SLBgplsTopoBgpPeerNodeSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoBgpPeerNodeSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_bgpsidformat() != 0) {
    _internal_set_bgpsidformat(from._internal_bgpsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoBgpPeerNodeSid::CopyFrom(const SLBgplsTopoBgpPeerNodeSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoBgpPeerNodeSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoBgpPeerNodeSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoBgpPeerNodeSid::InternalSwap(SLBgplsTopoBgpPeerNodeSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpPeerNodeSid, weight_)
      + sizeof(SLBgplsTopoBgpPeerNodeSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpPeerNodeSid, bgpsidformat_)>(
          reinterpret_cast<char*>(&bgpsidformat_),
          reinterpret_cast<char*>(&other->bgpsidformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoBgpPeerNodeSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[56]);
}

// ===================================================================

class SLBgplsTopoBgpPeerAdjSid::_Internal {
 public:
};

SLBgplsTopoBgpPeerAdjSid::SLBgplsTopoBgpPeerAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoBgpPeerAdjSid)
}
SLBgplsTopoBgpPeerAdjSid::SLBgplsTopoBgpPeerAdjSid(const SLBgplsTopoBgpPeerAdjSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bgpsidformat_, &from.bgpsidformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoBgpPeerAdjSid)
}

inline void SLBgplsTopoBgpPeerAdjSid::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bgpsidformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
}

SLBgplsTopoBgpPeerAdjSid::~SLBgplsTopoBgpPeerAdjSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoBgpPeerAdjSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoBgpPeerAdjSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoBgpPeerAdjSid::ArenaDtor(void* object) {
  SLBgplsTopoBgpPeerAdjSid* _this = reinterpret_cast< SLBgplsTopoBgpPeerAdjSid* >(object);
  (void)_this;
}
void SLBgplsTopoBgpPeerAdjSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoBgpPeerAdjSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoBgpPeerAdjSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoBgpPeerAdjSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  flags_.ClearToEmpty();
  ::memset(&bgpsidformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoBgpPeerAdjSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bgpsidformat(static_cast<::service_layer::SLBgplsTopoSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoBgpPeerAdjSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoBgpPeerAdjSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  if (this->_internal_bgpsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bgpsidformat(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoBgpPeerAdjSid)
  return target;
}

size_t SLBgplsTopoBgpPeerAdjSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoBgpPeerAdjSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  if (this->_internal_bgpsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bgpsidformat());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoBgpPeerAdjSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoBgpPeerAdjSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoBgpPeerAdjSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoBgpPeerAdjSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoBgpPeerAdjSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoBgpPeerAdjSid &>(from));
}


void SLBgplsTopoBgpPeerAdjSid::MergeFrom(const SLBgplsTopoBgpPeerAdjSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoBgpPeerAdjSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_bgpsidformat() != 0) {
    _internal_set_bgpsidformat(from._internal_bgpsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoBgpPeerAdjSid::CopyFrom(const SLBgplsTopoBgpPeerAdjSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoBgpPeerAdjSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoBgpPeerAdjSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoBgpPeerAdjSid::InternalSwap(SLBgplsTopoBgpPeerAdjSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpPeerAdjSid, weight_)
      + sizeof(SLBgplsTopoBgpPeerAdjSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpPeerAdjSid, bgpsidformat_)>(
          reinterpret_cast<char*>(&bgpsidformat_),
          reinterpret_cast<char*>(&other->bgpsidformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoBgpPeerAdjSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[57]);
}

// ===================================================================

class SLBgplsTopoBgpPeerSetSid::_Internal {
 public:
};

SLBgplsTopoBgpPeerSetSid::SLBgplsTopoBgpPeerSetSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoBgpPeerSetSid)
}
SLBgplsTopoBgpPeerSetSid::SLBgplsTopoBgpPeerSetSid(const SLBgplsTopoBgpPeerSetSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sid(), 
      GetArenaForAllocation());
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bgpsidformat_, &from.bgpsidformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoBgpPeerSetSid)
}

inline void SLBgplsTopoBgpPeerSetSid::SharedCtor() {
sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bgpsidformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
}

SLBgplsTopoBgpPeerSetSid::~SLBgplsTopoBgpPeerSetSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoBgpPeerSetSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoBgpPeerSetSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoBgpPeerSetSid::ArenaDtor(void* object) {
  SLBgplsTopoBgpPeerSetSid* _this = reinterpret_cast< SLBgplsTopoBgpPeerSetSid* >(object);
  (void)_this;
}
void SLBgplsTopoBgpPeerSetSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoBgpPeerSetSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoBgpPeerSetSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoBgpPeerSetSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  flags_.ClearToEmpty();
  ::memset(&bgpsidformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&bgpsidformat_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoBgpPeerSetSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bgpsidformat(static_cast<::service_layer::SLBgplsTopoSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoBgpPeerSetSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoBgpPeerSetSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  if (this->_internal_bgpsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bgpsidformat(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoBgpPeerSetSid)
  return target;
}

size_t SLBgplsTopoBgpPeerSetSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoBgpPeerSetSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sid());
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  if (this->_internal_bgpsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bgpsidformat());
  }

  // uint32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoBgpPeerSetSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoBgpPeerSetSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoBgpPeerSetSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoBgpPeerSetSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoBgpPeerSetSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoBgpPeerSetSid &>(from));
}


void SLBgplsTopoBgpPeerSetSid::MergeFrom(const SLBgplsTopoBgpPeerSetSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoBgpPeerSetSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_bgpsidformat() != 0) {
    _internal_set_bgpsidformat(from._internal_bgpsidformat());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoBgpPeerSetSid::CopyFrom(const SLBgplsTopoBgpPeerSetSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoBgpPeerSetSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoBgpPeerSetSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoBgpPeerSetSid::InternalSwap(SLBgplsTopoBgpPeerSetSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpPeerSetSid, weight_)
      + sizeof(SLBgplsTopoBgpPeerSetSid::weight_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoBgpPeerSetSid, bgpsidformat_)>(
          reinterpret_cast<char*>(&bgpsidformat_),
          reinterpret_cast<char*>(&other->bgpsidformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoBgpPeerSetSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[58]);
}

// ===================================================================

class SLBgpLsTopoNeighborId::_Internal {
 public:
};

SLBgpLsTopoNeighborId::SLBgpLsTopoNeighborId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgpLsTopoNeighborId)
}
SLBgpLsTopoNeighborId::SLBgpLsTopoNeighborId(const SLBgpLsTopoNeighborId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_NeighborId();
  switch (from.NeighborId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kSystemId: {
      _internal_set_systemid(from._internal_systemid());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgpLsTopoNeighborId)
}

inline void SLBgpLsTopoNeighborId::SharedCtor() {
clear_has_NeighborId();
}

SLBgpLsTopoNeighborId::~SLBgpLsTopoNeighborId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgpLsTopoNeighborId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgpLsTopoNeighborId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_NeighborId()) {
    clear_NeighborId();
  }
}

void SLBgpLsTopoNeighborId::ArenaDtor(void* object) {
  SLBgpLsTopoNeighborId* _this = reinterpret_cast< SLBgpLsTopoNeighborId* >(object);
  (void)_this;
}
void SLBgpLsTopoNeighborId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgpLsTopoNeighborId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgpLsTopoNeighborId::clear_NeighborId() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgpLsTopoNeighborId)
  switch (NeighborId_case()) {
    case kIpv4Addr: {
      NeighborId_.ipv4addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSystemId: {
      NeighborId_.systemid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NEIGHBORID_NOT_SET;
}


void SLBgpLsTopoNeighborId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgpLsTopoNeighborId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_NeighborId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgpLsTopoNeighborId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Ipv4Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ipv4addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SystemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_systemid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgpLsTopoNeighborId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgpLsTopoNeighborId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Ipv4Addr = 1;
  if (_internal_has_ipv4addr()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ipv4addr(), target);
  }

  // bytes SystemId = 2;
  if (_internal_has_systemid()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_systemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgpLsTopoNeighborId)
  return target;
}

size_t SLBgpLsTopoNeighborId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgpLsTopoNeighborId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (NeighborId_case()) {
    // bytes Ipv4Addr = 1;
    case kIpv4Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv4addr());
      break;
    }
    // bytes SystemId = 2;
    case kSystemId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_systemid());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgpLsTopoNeighborId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgpLsTopoNeighborId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgpLsTopoNeighborId::GetClassData() const { return &_class_data_; }

void SLBgpLsTopoNeighborId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgpLsTopoNeighborId *>(to)->MergeFrom(
      static_cast<const SLBgpLsTopoNeighborId &>(from));
}


void SLBgpLsTopoNeighborId::MergeFrom(const SLBgpLsTopoNeighborId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgpLsTopoNeighborId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.NeighborId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kSystemId: {
      _internal_set_systemid(from._internal_systemid());
      break;
    }
    case NEIGHBORID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgpLsTopoNeighborId::CopyFrom(const SLBgpLsTopoNeighborId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgpLsTopoNeighborId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgpLsTopoNeighborId::IsInitialized() const {
  return true;
}

void SLBgpLsTopoNeighborId::InternalSwap(SLBgpLsTopoNeighborId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(NeighborId_, other->NeighborId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgpLsTopoNeighborId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[59]);
}

// ===================================================================

class SLBgplsTopoUniLinkDelay::_Internal {
 public:
};

SLBgplsTopoUniLinkDelay::SLBgplsTopoUniLinkDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniLinkDelay)
}
SLBgplsTopoUniLinkDelay::SLBgplsTopoUniLinkDelay(const SLBgplsTopoUniLinkDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniLinkDelay)
}

inline void SLBgplsTopoUniLinkDelay::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
delay_ = 0u;
}

SLBgplsTopoUniLinkDelay::~SLBgplsTopoUniLinkDelay() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniLinkDelay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniLinkDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniLinkDelay::ArenaDtor(void* object) {
  SLBgplsTopoUniLinkDelay* _this = reinterpret_cast< SLBgplsTopoUniLinkDelay* >(object);
  (void)_this;
}
void SLBgplsTopoUniLinkDelay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniLinkDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniLinkDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniLinkDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  delay_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniLinkDelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniLinkDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniLinkDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Delay = 1;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_delay(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniLinkDelay)
  return target;
}

size_t SLBgplsTopoUniLinkDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniLinkDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Delay = 1;
  if (this->_internal_delay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_delay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniLinkDelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniLinkDelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniLinkDelay::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniLinkDelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniLinkDelay *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniLinkDelay &>(from));
}


void SLBgplsTopoUniLinkDelay::MergeFrom(const SLBgplsTopoUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniLinkDelay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_delay() != 0) {
    _internal_set_delay(from._internal_delay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniLinkDelay::CopyFrom(const SLBgplsTopoUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniLinkDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniLinkDelay::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniLinkDelay::InternalSwap(SLBgplsTopoUniLinkDelay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniLinkDelay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[60]);
}

// ===================================================================

class SLBgplsTopoMinMaxUniLinkDelay::_Internal {
 public:
};

SLBgplsTopoMinMaxUniLinkDelay::SLBgplsTopoMinMaxUniLinkDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
}
SLBgplsTopoMinMaxUniLinkDelay::SLBgplsTopoMinMaxUniLinkDelay(const SLBgplsTopoMinMaxUniLinkDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
}

inline void SLBgplsTopoMinMaxUniLinkDelay::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

SLBgplsTopoMinMaxUniLinkDelay::~SLBgplsTopoMinMaxUniLinkDelay() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoMinMaxUniLinkDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoMinMaxUniLinkDelay::ArenaDtor(void* object) {
  SLBgplsTopoMinMaxUniLinkDelay* _this = reinterpret_cast< SLBgplsTopoMinMaxUniLinkDelay* >(object);
  (void)_this;
}
void SLBgplsTopoMinMaxUniLinkDelay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoMinMaxUniLinkDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoMinMaxUniLinkDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoMinMaxUniLinkDelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoMinMaxUniLinkDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Min = 1;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(), target);
  }

  // uint32 Max = 2;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(), target);
  }

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  return target;
}

size_t SLBgplsTopoMinMaxUniLinkDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 3;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Min = 1;
  if (this->_internal_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
  }

  // uint32 Max = 2;
  if (this->_internal_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoMinMaxUniLinkDelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoMinMaxUniLinkDelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoMinMaxUniLinkDelay::GetClassData() const { return &_class_data_; }

void SLBgplsTopoMinMaxUniLinkDelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoMinMaxUniLinkDelay *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoMinMaxUniLinkDelay &>(from));
}


void SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(const SLBgplsTopoMinMaxUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _internal_set_max(from._internal_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoMinMaxUniLinkDelay::CopyFrom(const SLBgplsTopoMinMaxUniLinkDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoMinMaxUniLinkDelay::IsInitialized() const {
  return true;
}

void SLBgplsTopoMinMaxUniLinkDelay::InternalSwap(SLBgplsTopoMinMaxUniLinkDelay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoMinMaxUniLinkDelay, max_)
      + sizeof(SLBgplsTopoMinMaxUniLinkDelay::max_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoMinMaxUniLinkDelay, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoMinMaxUniLinkDelay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[61]);
}

// ===================================================================

class SLBgplsTopoUniDelayVar::_Internal {
 public:
};

SLBgplsTopoUniDelayVar::SLBgplsTopoUniDelayVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniDelayVar)
}
SLBgplsTopoUniDelayVar::SLBgplsTopoUniDelayVar(const SLBgplsTopoUniDelayVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  variation_ = from.variation_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniDelayVar)
}

inline void SLBgplsTopoUniDelayVar::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
variation_ = 0u;
}

SLBgplsTopoUniDelayVar::~SLBgplsTopoUniDelayVar() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniDelayVar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniDelayVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniDelayVar::ArenaDtor(void* object) {
  SLBgplsTopoUniDelayVar* _this = reinterpret_cast< SLBgplsTopoUniDelayVar* >(object);
  (void)_this;
}
void SLBgplsTopoUniDelayVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniDelayVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniDelayVar::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniDelayVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  variation_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniDelayVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          variation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniDelayVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniDelayVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Variation = 1;
  if (this->_internal_variation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_variation(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniDelayVar)
  return target;
}

size_t SLBgplsTopoUniDelayVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniDelayVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Variation = 1;
  if (this->_internal_variation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_variation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniDelayVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniDelayVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniDelayVar::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniDelayVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniDelayVar *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniDelayVar &>(from));
}


void SLBgplsTopoUniDelayVar::MergeFrom(const SLBgplsTopoUniDelayVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniDelayVar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_variation() != 0) {
    _internal_set_variation(from._internal_variation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniDelayVar::CopyFrom(const SLBgplsTopoUniDelayVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniDelayVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniDelayVar::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniDelayVar::InternalSwap(SLBgplsTopoUniDelayVar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(variation_, other->variation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniDelayVar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[62]);
}

// ===================================================================

class SLBgplsTopoUniLinkLoss::_Internal {
 public:
};

SLBgplsTopoUniLinkLoss::SLBgplsTopoUniLinkLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniLinkLoss)
}
SLBgplsTopoUniLinkLoss::SLBgplsTopoUniLinkLoss(const SLBgplsTopoUniLinkLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  loss_ = from.loss_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniLinkLoss)
}

inline void SLBgplsTopoUniLinkLoss::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
loss_ = 0u;
}

SLBgplsTopoUniLinkLoss::~SLBgplsTopoUniLinkLoss() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniLinkLoss)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniLinkLoss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniLinkLoss::ArenaDtor(void* object) {
  SLBgplsTopoUniLinkLoss* _this = reinterpret_cast< SLBgplsTopoUniLinkLoss* >(object);
  (void)_this;
}
void SLBgplsTopoUniLinkLoss::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniLinkLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniLinkLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniLinkLoss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  loss_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniLinkLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Loss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniLinkLoss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniLinkLoss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Loss = 1;
  if (this->_internal_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_loss(), target);
  }

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniLinkLoss)
  return target;
}

size_t SLBgplsTopoUniLinkLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniLinkLoss)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Loss = 1;
  if (this->_internal_loss() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_loss());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniLinkLoss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniLinkLoss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniLinkLoss::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniLinkLoss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniLinkLoss *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniLinkLoss &>(from));
}


void SLBgplsTopoUniLinkLoss::MergeFrom(const SLBgplsTopoUniLinkLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniLinkLoss)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_loss() != 0) {
    _internal_set_loss(from._internal_loss());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniLinkLoss::CopyFrom(const SLBgplsTopoUniLinkLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniLinkLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniLinkLoss::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniLinkLoss::InternalSwap(SLBgplsTopoUniLinkLoss* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  swap(loss_, other->loss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniLinkLoss::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[63]);
}

// ===================================================================

class SLBgplsTopoUniResBandwidth::_Internal {
 public:
};

SLBgplsTopoUniResBandwidth::SLBgplsTopoUniResBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniResBandwidth)
}
SLBgplsTopoUniResBandwidth::SLBgplsTopoUniResBandwidth(const SLBgplsTopoUniResBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniResBandwidth)
}

inline void SLBgplsTopoUniResBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoUniResBandwidth::~SLBgplsTopoUniResBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniResBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniResBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniResBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoUniResBandwidth* _this = reinterpret_cast< SLBgplsTopoUniResBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoUniResBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniResBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniResBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniResBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniResBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniResBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniResBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniResBandwidth)
  return target;
}

size_t SLBgplsTopoUniResBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniResBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniResBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniResBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniResBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniResBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniResBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniResBandwidth &>(from));
}


void SLBgplsTopoUniResBandwidth::MergeFrom(const SLBgplsTopoUniResBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniResBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniResBandwidth::CopyFrom(const SLBgplsTopoUniResBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniResBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniResBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniResBandwidth::InternalSwap(SLBgplsTopoUniResBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniResBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[64]);
}

// ===================================================================

class SLBgplsTopoUniAvailBandwidth::_Internal {
 public:
};

SLBgplsTopoUniAvailBandwidth::SLBgplsTopoUniAvailBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniAvailBandwidth)
}
SLBgplsTopoUniAvailBandwidth::SLBgplsTopoUniAvailBandwidth(const SLBgplsTopoUniAvailBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniAvailBandwidth)
}

inline void SLBgplsTopoUniAvailBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoUniAvailBandwidth::~SLBgplsTopoUniAvailBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniAvailBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniAvailBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniAvailBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoUniAvailBandwidth* _this = reinterpret_cast< SLBgplsTopoUniAvailBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoUniAvailBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniAvailBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniAvailBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniAvailBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniAvailBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniAvailBandwidth)
  return target;
}

size_t SLBgplsTopoUniAvailBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniAvailBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniAvailBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniAvailBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniAvailBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniAvailBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniAvailBandwidth &>(from));
}


void SLBgplsTopoUniAvailBandwidth::MergeFrom(const SLBgplsTopoUniAvailBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniAvailBandwidth::CopyFrom(const SLBgplsTopoUniAvailBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniAvailBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniAvailBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniAvailBandwidth::InternalSwap(SLBgplsTopoUniAvailBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniAvailBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[65]);
}

// ===================================================================

class SLBgplsTopoUniUtilBandwidth::_Internal {
 public:
};

SLBgplsTopoUniUtilBandwidth::SLBgplsTopoUniUtilBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUniUtilBandwidth)
}
SLBgplsTopoUniUtilBandwidth::SLBgplsTopoUniUtilBandwidth(const SLBgplsTopoUniUtilBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bandwidth().empty()) {
    bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bandwidth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUniUtilBandwidth)
}

inline void SLBgplsTopoUniUtilBandwidth::SharedCtor() {
bandwidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoUniUtilBandwidth::~SLBgplsTopoUniUtilBandwidth() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUniUtilBandwidth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUniUtilBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bandwidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUniUtilBandwidth::ArenaDtor(void* object) {
  SLBgplsTopoUniUtilBandwidth* _this = reinterpret_cast< SLBgplsTopoUniUtilBandwidth* >(object);
  (void)_this;
}
void SLBgplsTopoUniUtilBandwidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUniUtilBandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUniUtilBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bandwidth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUniUtilBandwidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bandwidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUniUtilBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUniUtilBandwidth)
  return target;
}

size_t SLBgplsTopoUniUtilBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bandwidth = 1;
  if (!this->_internal_bandwidth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUniUtilBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUniUtilBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUniUtilBandwidth::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUniUtilBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUniUtilBandwidth *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUniUtilBandwidth &>(from));
}


void SLBgplsTopoUniUtilBandwidth::MergeFrom(const SLBgplsTopoUniUtilBandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bandwidth().empty()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUniUtilBandwidth::CopyFrom(const SLBgplsTopoUniUtilBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUniUtilBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUniUtilBandwidth::IsInitialized() const {
  return true;
}

void SLBgplsTopoUniUtilBandwidth::InternalSwap(SLBgplsTopoUniUtilBandwidth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bandwidth_, lhs_arena,
      &other->bandwidth_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUniUtilBandwidth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[66]);
}

// ===================================================================

class SLBgplsTopoAslaAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoAdminGroup& admingroup(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxlinkdelay(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvariation(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth(const SLBgplsTopoAslaAttr* msg);
  static const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth(const SLBgplsTopoAslaAttr* msg);
};

const ::service_layer::SLBgplsTopoAdminGroup&
SLBgplsTopoAslaAttr::_Internal::admingroup(const SLBgplsTopoAslaAttr* msg) {
  return *msg->admingroup_;
}
const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&
SLBgplsTopoAslaAttr::_Internal::tedefmetric(const SLBgplsTopoAslaAttr* msg) {
  return *msg->tedefmetric_;
}
const ::service_layer::SLBgplsTopoUniLinkDelay&
SLBgplsTopoAslaAttr::_Internal::unilinkdelay(const SLBgplsTopoAslaAttr* msg) {
  return *msg->unilinkdelay_;
}
const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&
SLBgplsTopoAslaAttr::_Internal::minmaxlinkdelay(const SLBgplsTopoAslaAttr* msg) {
  return *msg->minmaxlinkdelay_;
}
const ::service_layer::SLBgplsTopoUniDelayVar&
SLBgplsTopoAslaAttr::_Internal::unidelayvariation(const SLBgplsTopoAslaAttr* msg) {
  return *msg->unidelayvariation_;
}
const ::service_layer::SLBgplsTopoUniLinkLoss&
SLBgplsTopoAslaAttr::_Internal::unilinkloss(const SLBgplsTopoAslaAttr* msg) {
  return *msg->unilinkloss_;
}
const ::service_layer::SLBgplsTopoUniResBandwidth&
SLBgplsTopoAslaAttr::_Internal::uniresbandwidth(const SLBgplsTopoAslaAttr* msg) {
  return *msg->uniresbandwidth_;
}
const ::service_layer::SLBgplsTopoUniAvailBandwidth&
SLBgplsTopoAslaAttr::_Internal::uniavailbandwidth(const SLBgplsTopoAslaAttr* msg) {
  return *msg->uniavailbandwidth_;
}
const ::service_layer::SLBgplsTopoUniUtilBandwidth&
SLBgplsTopoAslaAttr::_Internal::uniutilbandwidth(const SLBgplsTopoAslaAttr* msg) {
  return *msg->uniutilbandwidth_;
}
SLBgplsTopoAslaAttr::SLBgplsTopoAslaAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  srlg_(arena),
  extadmingroup_(arena),
  unknownattr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoAslaAttr)
}
SLBgplsTopoAslaAttr::SLBgplsTopoAslaAttr(const SLBgplsTopoAslaAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      srlg_(from.srlg_),
      extadmingroup_(from.extadmingroup_),
      unknownattr_(from.unknownattr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sabm().empty()) {
    sabm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sabm(), 
      GetArenaForAllocation());
  }
  udabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    udabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_udabm().empty()) {
    udabm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_udabm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_admingroup()) {
    admingroup_ = new ::service_layer::SLBgplsTopoAdminGroup(*from.admingroup_);
  } else {
    admingroup_ = nullptr;
  }
  if (from._internal_has_tedefmetric()) {
    tedefmetric_ = new ::service_layer::SLBgplsTopoLinkTeDefaultMetric(*from.tedefmetric_);
  } else {
    tedefmetric_ = nullptr;
  }
  if (from._internal_has_unilinkdelay()) {
    unilinkdelay_ = new ::service_layer::SLBgplsTopoUniLinkDelay(*from.unilinkdelay_);
  } else {
    unilinkdelay_ = nullptr;
  }
  if (from._internal_has_minmaxlinkdelay()) {
    minmaxlinkdelay_ = new ::service_layer::SLBgplsTopoMinMaxUniLinkDelay(*from.minmaxlinkdelay_);
  } else {
    minmaxlinkdelay_ = nullptr;
  }
  if (from._internal_has_unidelayvariation()) {
    unidelayvariation_ = new ::service_layer::SLBgplsTopoUniDelayVar(*from.unidelayvariation_);
  } else {
    unidelayvariation_ = nullptr;
  }
  if (from._internal_has_unilinkloss()) {
    unilinkloss_ = new ::service_layer::SLBgplsTopoUniLinkLoss(*from.unilinkloss_);
  } else {
    unilinkloss_ = nullptr;
  }
  if (from._internal_has_uniresbandwidth()) {
    uniresbandwidth_ = new ::service_layer::SLBgplsTopoUniResBandwidth(*from.uniresbandwidth_);
  } else {
    uniresbandwidth_ = nullptr;
  }
  if (from._internal_has_uniavailbandwidth()) {
    uniavailbandwidth_ = new ::service_layer::SLBgplsTopoUniAvailBandwidth(*from.uniavailbandwidth_);
  } else {
    uniavailbandwidth_ = nullptr;
  }
  if (from._internal_has_uniutilbandwidth()) {
    uniutilbandwidth_ = new ::service_layer::SLBgplsTopoUniUtilBandwidth(*from.uniutilbandwidth_);
  } else {
    uniutilbandwidth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoAslaAttr)
}

inline void SLBgplsTopoAslaAttr::SharedCtor() {
sabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
udabm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  udabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&admingroup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uniutilbandwidth_) -
    reinterpret_cast<char*>(&admingroup_)) + sizeof(uniutilbandwidth_));
}

SLBgplsTopoAslaAttr::~SLBgplsTopoAslaAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoAslaAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoAslaAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sabm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udabm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete admingroup_;
  if (this != internal_default_instance()) delete tedefmetric_;
  if (this != internal_default_instance()) delete unilinkdelay_;
  if (this != internal_default_instance()) delete minmaxlinkdelay_;
  if (this != internal_default_instance()) delete unidelayvariation_;
  if (this != internal_default_instance()) delete unilinkloss_;
  if (this != internal_default_instance()) delete uniresbandwidth_;
  if (this != internal_default_instance()) delete uniavailbandwidth_;
  if (this != internal_default_instance()) delete uniutilbandwidth_;
}

void SLBgplsTopoAslaAttr::ArenaDtor(void* object) {
  SLBgplsTopoAslaAttr* _this = reinterpret_cast< SLBgplsTopoAslaAttr* >(object);
  (void)_this;
}
void SLBgplsTopoAslaAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoAslaAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoAslaAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoAslaAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srlg_.Clear();
  extadmingroup_.Clear();
  unknownattr_.Clear();
  sabm_.ClearToEmpty();
  udabm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && admingroup_ != nullptr) {
    delete admingroup_;
  }
  admingroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minmaxlinkdelay_ != nullptr) {
    delete minmaxlinkdelay_;
  }
  minmaxlinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unidelayvariation_ != nullptr) {
    delete unidelayvariation_;
  }
  unidelayvariation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoAslaAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Sabm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sabm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Udabm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_udabm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_admingroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tedefmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srlg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_minmaxlinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unidelayvariation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkloss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniresbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniavailbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniutilbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extadmingroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unknownattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoAslaAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoAslaAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Sabm = 1;
  if (!this->_internal_sabm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sabm(), target);
  }

  // bytes Udabm = 2;
  if (!this->_internal_udabm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_udabm(), target);
  }

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 3;
  if (this->_internal_has_admingroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::admingroup(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
  if (this->_internal_has_tedefmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tedefmetric(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srlg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_srlg(i), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
  if (this->_internal_has_unilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::unilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
  if (this->_internal_has_minmaxlinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::minmaxlinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
  if (this->_internal_has_unidelayvariation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::unidelayvariation(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
  if (this->_internal_has_unilinkloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::unilinkloss(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
  if (this->_internal_has_uniresbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::uniresbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
  if (this->_internal_has_uniavailbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::uniavailbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
  if (this->_internal_has_uniutilbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::uniutilbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extadmingroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_extadmingroup(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unknownattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_unknownattr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoAslaAttr)
  return target;
}

size_t SLBgplsTopoAslaAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoAslaAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
  total_size += 1UL * this->_internal_srlg_size();
  for (const auto& msg : this->srlg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 13;
  total_size += 1UL * this->_internal_extadmingroup_size();
  for (const auto& msg : this->extadmingroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
  total_size += 1UL * this->_internal_unknownattr_size();
  for (const auto& msg : this->unknownattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes Sabm = 1;
  if (!this->_internal_sabm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sabm());
  }

  // bytes Udabm = 2;
  if (!this->_internal_udabm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_udabm());
  }

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 3;
  if (this->_internal_has_admingroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *admingroup_);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
  if (this->_internal_has_tedefmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tedefmetric_);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
  if (this->_internal_has_unilinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkdelay_);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
  if (this->_internal_has_minmaxlinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minmaxlinkdelay_);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
  if (this->_internal_has_unidelayvariation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unidelayvariation_);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
  if (this->_internal_has_unilinkloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkloss_);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
  if (this->_internal_has_uniresbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniresbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
  if (this->_internal_has_uniavailbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniavailbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
  if (this->_internal_has_uniutilbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniutilbandwidth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoAslaAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoAslaAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoAslaAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoAslaAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoAslaAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoAslaAttr &>(from));
}


void SLBgplsTopoAslaAttr::MergeFrom(const SLBgplsTopoAslaAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoAslaAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  srlg_.MergeFrom(from.srlg_);
  extadmingroup_.MergeFrom(from.extadmingroup_);
  unknownattr_.MergeFrom(from.unknownattr_);
  if (!from._internal_sabm().empty()) {
    _internal_set_sabm(from._internal_sabm());
  }
  if (!from._internal_udabm().empty()) {
    _internal_set_udabm(from._internal_udabm());
  }
  if (from._internal_has_admingroup()) {
    _internal_mutable_admingroup()->::service_layer::SLBgplsTopoAdminGroup::MergeFrom(from._internal_admingroup());
  }
  if (from._internal_has_tedefmetric()) {
    _internal_mutable_tedefmetric()->::service_layer::SLBgplsTopoLinkTeDefaultMetric::MergeFrom(from._internal_tedefmetric());
  }
  if (from._internal_has_unilinkdelay()) {
    _internal_mutable_unilinkdelay()->::service_layer::SLBgplsTopoUniLinkDelay::MergeFrom(from._internal_unilinkdelay());
  }
  if (from._internal_has_minmaxlinkdelay()) {
    _internal_mutable_minmaxlinkdelay()->::service_layer::SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(from._internal_minmaxlinkdelay());
  }
  if (from._internal_has_unidelayvariation()) {
    _internal_mutable_unidelayvariation()->::service_layer::SLBgplsTopoUniDelayVar::MergeFrom(from._internal_unidelayvariation());
  }
  if (from._internal_has_unilinkloss()) {
    _internal_mutable_unilinkloss()->::service_layer::SLBgplsTopoUniLinkLoss::MergeFrom(from._internal_unilinkloss());
  }
  if (from._internal_has_uniresbandwidth()) {
    _internal_mutable_uniresbandwidth()->::service_layer::SLBgplsTopoUniResBandwidth::MergeFrom(from._internal_uniresbandwidth());
  }
  if (from._internal_has_uniavailbandwidth()) {
    _internal_mutable_uniavailbandwidth()->::service_layer::SLBgplsTopoUniAvailBandwidth::MergeFrom(from._internal_uniavailbandwidth());
  }
  if (from._internal_has_uniutilbandwidth()) {
    _internal_mutable_uniutilbandwidth()->::service_layer::SLBgplsTopoUniUtilBandwidth::MergeFrom(from._internal_uniutilbandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoAslaAttr::CopyFrom(const SLBgplsTopoAslaAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoAslaAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoAslaAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoAslaAttr::InternalSwap(SLBgplsTopoAslaAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  srlg_.InternalSwap(&other->srlg_);
  extadmingroup_.InternalSwap(&other->extadmingroup_);
  unknownattr_.InternalSwap(&other->unknownattr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sabm_, lhs_arena,
      &other->sabm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &udabm_, lhs_arena,
      &other->udabm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoAslaAttr, uniutilbandwidth_)
      + sizeof(SLBgplsTopoAslaAttr::uniutilbandwidth_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoAslaAttr, admingroup_)>(
          reinterpret_cast<char*>(&admingroup_),
          reinterpret_cast<char*>(&other->admingroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoAslaAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[67]);
}

// ===================================================================

class SLBgplsTopoPrefixIgpFlags::_Internal {
 public:
};

SLBgplsTopoPrefixIgpFlags::SLBgplsTopoPrefixIgpFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixIgpFlags)
}
SLBgplsTopoPrefixIgpFlags::SLBgplsTopoPrefixIgpFlags(const SLBgplsTopoPrefixIgpFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixIgpFlags)
}

inline void SLBgplsTopoPrefixIgpFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoPrefixIgpFlags::~SLBgplsTopoPrefixIgpFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixIgpFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixIgpFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixIgpFlags::ArenaDtor(void* object) {
  SLBgplsTopoPrefixIgpFlags* _this = reinterpret_cast< SLBgplsTopoPrefixIgpFlags* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixIgpFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixIgpFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixIgpFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixIgpFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixIgpFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixIgpFlags)
  return target;
}

size_t SLBgplsTopoPrefixIgpFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixIgpFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixIgpFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixIgpFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixIgpFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixIgpFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixIgpFlags &>(from));
}


void SLBgplsTopoPrefixIgpFlags::MergeFrom(const SLBgplsTopoPrefixIgpFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixIgpFlags::CopyFrom(const SLBgplsTopoPrefixIgpFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixIgpFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixIgpFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixIgpFlags::InternalSwap(SLBgplsTopoPrefixIgpFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixIgpFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[68]);
}

// ===================================================================

class SLBgplsTopoPrefixIgpRouteTag::_Internal {
 public:
};

SLBgplsTopoPrefixIgpRouteTag::SLBgplsTopoPrefixIgpRouteTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixIgpRouteTag)
}
SLBgplsTopoPrefixIgpRouteTag::SLBgplsTopoPrefixIgpRouteTag(const SLBgplsTopoPrefixIgpRouteTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixIgpRouteTag)
}

inline void SLBgplsTopoPrefixIgpRouteTag::SharedCtor() {
tag_ = 0u;
}

SLBgplsTopoPrefixIgpRouteTag::~SLBgplsTopoPrefixIgpRouteTag() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixIgpRouteTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoPrefixIgpRouteTag::ArenaDtor(void* object) {
  SLBgplsTopoPrefixIgpRouteTag* _this = reinterpret_cast< SLBgplsTopoPrefixIgpRouteTag* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixIgpRouteTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixIgpRouteTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixIgpRouteTag::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixIgpRouteTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixIgpRouteTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Tag = 1;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  return target;
}

size_t SLBgplsTopoPrefixIgpRouteTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Tag = 1;
  if (this->_internal_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixIgpRouteTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixIgpRouteTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixIgpRouteTag::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixIgpRouteTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixIgpRouteTag *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixIgpRouteTag &>(from));
}


void SLBgplsTopoPrefixIgpRouteTag::MergeFrom(const SLBgplsTopoPrefixIgpRouteTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixIgpRouteTag::CopyFrom(const SLBgplsTopoPrefixIgpRouteTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixIgpRouteTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixIgpRouteTag::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixIgpRouteTag::InternalSwap(SLBgplsTopoPrefixIgpRouteTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixIgpRouteTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[69]);
}

// ===================================================================

class SLBgplsTopoPrefixIgpExtRouteTag::_Internal {
 public:
};

SLBgplsTopoPrefixIgpExtRouteTag::SLBgplsTopoPrefixIgpExtRouteTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
}
SLBgplsTopoPrefixIgpExtRouteTag::SLBgplsTopoPrefixIgpExtRouteTag(const SLBgplsTopoPrefixIgpExtRouteTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
}

inline void SLBgplsTopoPrefixIgpExtRouteTag::SharedCtor() {
tag_ = uint64_t{0u};
}

SLBgplsTopoPrefixIgpExtRouteTag::~SLBgplsTopoPrefixIgpExtRouteTag() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixIgpExtRouteTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoPrefixIgpExtRouteTag::ArenaDtor(void* object) {
  SLBgplsTopoPrefixIgpExtRouteTag* _this = reinterpret_cast< SLBgplsTopoPrefixIgpExtRouteTag* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixIgpExtRouteTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixIgpExtRouteTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixIgpExtRouteTag::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixIgpExtRouteTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixIgpExtRouteTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Tag = 1;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  return target;
}

size_t SLBgplsTopoPrefixIgpExtRouteTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Tag = 1;
  if (this->_internal_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixIgpExtRouteTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixIgpExtRouteTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixIgpExtRouteTag::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixIgpExtRouteTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixIgpExtRouteTag *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixIgpExtRouteTag &>(from));
}


void SLBgplsTopoPrefixIgpExtRouteTag::MergeFrom(const SLBgplsTopoPrefixIgpExtRouteTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixIgpExtRouteTag::CopyFrom(const SLBgplsTopoPrefixIgpExtRouteTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixIgpExtRouteTag::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixIgpExtRouteTag::InternalSwap(SLBgplsTopoPrefixIgpExtRouteTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixIgpExtRouteTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[70]);
}

// ===================================================================

class SLBgplsTopoPrefixMetric::_Internal {
 public:
};

SLBgplsTopoPrefixMetric::SLBgplsTopoPrefixMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixMetric)
}
SLBgplsTopoPrefixMetric::SLBgplsTopoPrefixMetric(const SLBgplsTopoPrefixMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixMetric)
}

inline void SLBgplsTopoPrefixMetric::SharedCtor() {
metric_ = 0u;
}

SLBgplsTopoPrefixMetric::~SLBgplsTopoPrefixMetric() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoPrefixMetric::ArenaDtor(void* object) {
  SLBgplsTopoPrefixMetric* _this = reinterpret_cast< SLBgplsTopoPrefixMetric* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixMetric)
  return target;
}

size_t SLBgplsTopoPrefixMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Metric = 1;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixMetric::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixMetric *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixMetric &>(from));
}


void SLBgplsTopoPrefixMetric::MergeFrom(const SLBgplsTopoPrefixMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixMetric::CopyFrom(const SLBgplsTopoPrefixMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixMetric::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixMetric::InternalSwap(SLBgplsTopoPrefixMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metric_, other->metric_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[71]);
}

// ===================================================================

class SLBgplsTopoPrefixOspfFwdAddr::_Internal {
 public:
};

SLBgplsTopoPrefixOspfFwdAddr::SLBgplsTopoPrefixOspfFwdAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
}
SLBgplsTopoPrefixOspfFwdAddr::SLBgplsTopoPrefixOspfFwdAddr(const SLBgplsTopoPrefixOspfFwdAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_OspfFwdAddr();
  switch (from.OspfFwdAddr_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
}

inline void SLBgplsTopoPrefixOspfFwdAddr::SharedCtor() {
clear_has_OspfFwdAddr();
}

SLBgplsTopoPrefixOspfFwdAddr::~SLBgplsTopoPrefixOspfFwdAddr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixOspfFwdAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_OspfFwdAddr()) {
    clear_OspfFwdAddr();
  }
}

void SLBgplsTopoPrefixOspfFwdAddr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixOspfFwdAddr* _this = reinterpret_cast< SLBgplsTopoPrefixOspfFwdAddr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixOspfFwdAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixOspfFwdAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixOspfFwdAddr::clear_OspfFwdAddr() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  switch (OspfFwdAddr_case()) {
    case kIpv4Addr: {
      OspfFwdAddr_.ipv4addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kIpv6Addr: {
      OspfFwdAddr_.ipv6addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OSPFFWDADDR_NOT_SET;
}


void SLBgplsTopoPrefixOspfFwdAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_OspfFwdAddr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixOspfFwdAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Ipv4Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ipv4addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6Addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipv6addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixOspfFwdAddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Ipv4Addr = 1;
  if (_internal_has_ipv4addr()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ipv4addr(), target);
  }

  // bytes Ipv6Addr = 2;
  if (_internal_has_ipv6addr()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ipv6addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  return target;
}

size_t SLBgplsTopoPrefixOspfFwdAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (OspfFwdAddr_case()) {
    // bytes Ipv4Addr = 1;
    case kIpv4Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv4addr());
      break;
    }
    // bytes Ipv6Addr = 2;
    case kIpv6Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6addr());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixOspfFwdAddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixOspfFwdAddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixOspfFwdAddr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixOspfFwdAddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixOspfFwdAddr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixOspfFwdAddr &>(from));
}


void SLBgplsTopoPrefixOspfFwdAddr::MergeFrom(const SLBgplsTopoPrefixOspfFwdAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.OspfFwdAddr_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case OSPFFWDADDR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixOspfFwdAddr::CopyFrom(const SLBgplsTopoPrefixOspfFwdAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixOspfFwdAddr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixOspfFwdAddr::InternalSwap(SLBgplsTopoPrefixOspfFwdAddr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(OspfFwdAddr_, other->OspfFwdAddr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixOspfFwdAddr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[72]);
}

// ===================================================================

class SLBgplsTopoPrefixOpaqueAttr::_Internal {
 public:
};

SLBgplsTopoPrefixOpaqueAttr::SLBgplsTopoPrefixOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixOpaqueAttr)
}
SLBgplsTopoPrefixOpaqueAttr::SLBgplsTopoPrefixOpaqueAttr(const SLBgplsTopoPrefixOpaqueAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opaqueattr().empty()) {
    opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaqueattr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixOpaqueAttr)
}

inline void SLBgplsTopoPrefixOpaqueAttr::SharedCtor() {
opaqueattr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoPrefixOpaqueAttr::~SLBgplsTopoPrefixOpaqueAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixOpaqueAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaqueattr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixOpaqueAttr::ArenaDtor(void* object) {
  SLBgplsTopoPrefixOpaqueAttr* _this = reinterpret_cast< SLBgplsTopoPrefixOpaqueAttr* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixOpaqueAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixOpaqueAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixOpaqueAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaqueattr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixOpaqueAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes OpaqueAttr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaqueattr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixOpaqueAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaqueattr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  return target;
}

size_t SLBgplsTopoPrefixOpaqueAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes OpaqueAttr = 1;
  if (!this->_internal_opaqueattr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaqueattr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixOpaqueAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixOpaqueAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixOpaqueAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixOpaqueAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixOpaqueAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixOpaqueAttr &>(from));
}


void SLBgplsTopoPrefixOpaqueAttr::MergeFrom(const SLBgplsTopoPrefixOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_opaqueattr().empty()) {
    _internal_set_opaqueattr(from._internal_opaqueattr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixOpaqueAttr::CopyFrom(const SLBgplsTopoPrefixOpaqueAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixOpaqueAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixOpaqueAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixOpaqueAttr::InternalSwap(SLBgplsTopoPrefixOpaqueAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaqueattr_, lhs_arena,
      &other->opaqueattr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixOpaqueAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[73]);
}

// ===================================================================

class SLBgplsTopoPrefixSid::_Internal {
 public:
};

SLBgplsTopoPrefixSid::SLBgplsTopoPrefixSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixSid)
}
SLBgplsTopoPrefixSid::SLBgplsTopoPrefixSid(const SLBgplsTopoPrefixSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefixsidformat_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(prefixsidformat_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixSid)
}

inline void SLBgplsTopoPrefixSid::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&algorithm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixsidformat_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(prefixsidformat_));
}

SLBgplsTopoPrefixSid::~SLBgplsTopoPrefixSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixSid::ArenaDtor(void* object) {
  SLBgplsTopoPrefixSid* _this = reinterpret_cast< SLBgplsTopoPrefixSid* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefixsidformat_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(prefixsidformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LabelIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          labelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prefixsidformat(static_cast<::service_layer::SLBgplsTopoPrefixSidFormat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_algorithm(), target);
  }

  // uint32 LabelIndex = 3;
  if (this->_internal_labelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_labelindex(), target);
  }

  // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
  if (this->_internal_prefixsidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_prefixsidformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixSid)
  return target;
}

size_t SLBgplsTopoPrefixSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // uint32 Algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 LabelIndex = 3;
  if (this->_internal_labelindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_labelindex());
  }

  // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
  if (this->_internal_prefixsidformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prefixsidformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixSid::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixSid *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixSid &>(from));
}


void SLBgplsTopoPrefixSid::MergeFrom(const SLBgplsTopoPrefixSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_labelindex() != 0) {
    _internal_set_labelindex(from._internal_labelindex());
  }
  if (from._internal_prefixsidformat() != 0) {
    _internal_set_prefixsidformat(from._internal_prefixsidformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixSid::CopyFrom(const SLBgplsTopoPrefixSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixSid::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixSid::InternalSwap(SLBgplsTopoPrefixSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixSid, prefixsidformat_)
      + sizeof(SLBgplsTopoPrefixSid::prefixsidformat_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixSid, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[74]);
}

// ===================================================================

class SLBgplsTopoPrefixRange::_Internal {
 public:
};

SLBgplsTopoPrefixRange::SLBgplsTopoPrefixRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixRange)
}
SLBgplsTopoPrefixRange::SLBgplsTopoPrefixRange(const SLBgplsTopoPrefixRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  sidflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sidflags().empty()) {
    sidflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sidflags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&rangesize_, &from.rangesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&rangesize_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixRange)
}

inline void SLBgplsTopoPrefixRange::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sidflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rangesize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&rangesize_)) + sizeof(index_));
}

SLBgplsTopoPrefixRange::~SLBgplsTopoPrefixRange() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sidflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixRange::ArenaDtor(void* object) {
  SLBgplsTopoPrefixRange* _this = reinterpret_cast< SLBgplsTopoPrefixRange* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixRange::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  sidflags_.ClearToEmpty();
  ::memset(&rangesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&rangesize_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RangeSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rangesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SidFlags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sidflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rangesize(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  // uint32 Index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // bytes SidFlags = 5;
  if (!this->_internal_sidflags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sidflags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixRange)
  return target;
}

size_t SLBgplsTopoPrefixRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // bytes SidFlags = 5;
  if (!this->_internal_sidflags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sidflags());
  }

  // uint32 RangeSize = 2;
  if (this->_internal_rangesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangesize());
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 Index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixRange::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixRange *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixRange &>(from));
}


void SLBgplsTopoPrefixRange::MergeFrom(const SLBgplsTopoPrefixRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  if (!from._internal_sidflags().empty()) {
    _internal_set_sidflags(from._internal_sidflags());
  }
  if (from._internal_rangesize() != 0) {
    _internal_set_rangesize(from._internal_rangesize());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixRange::CopyFrom(const SLBgplsTopoPrefixRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixRange::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixRange::InternalSwap(SLBgplsTopoPrefixRange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sidflags_, lhs_arena,
      &other->sidflags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixRange, index_)
      + sizeof(SLBgplsTopoPrefixRange::index_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoPrefixRange, rangesize_)>(
          reinterpret_cast<char*>(&rangesize_),
          reinterpret_cast<char*>(&other->rangesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[75]);
}

// ===================================================================

class SLBgplsTopoPrefixAttrFlags::_Internal {
 public:
};

SLBgplsTopoPrefixAttrFlags::SLBgplsTopoPrefixAttrFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixAttrFlags)
}
SLBgplsTopoPrefixAttrFlags::SLBgplsTopoPrefixAttrFlags(const SLBgplsTopoPrefixAttrFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixAttrFlags)
}

inline void SLBgplsTopoPrefixAttrFlags::SharedCtor() {
flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLBgplsTopoPrefixAttrFlags::~SLBgplsTopoPrefixAttrFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixAttrFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixAttrFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoPrefixAttrFlags::ArenaDtor(void* object) {
  SLBgplsTopoPrefixAttrFlags* _this = reinterpret_cast< SLBgplsTopoPrefixAttrFlags* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixAttrFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixAttrFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixAttrFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixAttrFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixAttrFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixAttrFlags)
  return target;
}

size_t SLBgplsTopoPrefixAttrFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Flags = 1;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixAttrFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixAttrFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixAttrFlags::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixAttrFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixAttrFlags *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixAttrFlags &>(from));
}


void SLBgplsTopoPrefixAttrFlags::MergeFrom(const SLBgplsTopoPrefixAttrFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flags().empty()) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixAttrFlags::CopyFrom(const SLBgplsTopoPrefixAttrFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixAttrFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixAttrFlags::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixAttrFlags::InternalSwap(SLBgplsTopoPrefixAttrFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flags_, lhs_arena,
      &other->flags_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixAttrFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[76]);
}

// ===================================================================

class SLBgplsTopoPrefixSrcRouterId::_Internal {
 public:
};

SLBgplsTopoPrefixSrcRouterId::SLBgplsTopoPrefixSrcRouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoPrefixSrcRouterId)
}
SLBgplsTopoPrefixSrcRouterId::SLBgplsTopoPrefixSrcRouterId(const SLBgplsTopoPrefixSrcRouterId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_SrcRouterId();
  switch (from.SrcRouterId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoPrefixSrcRouterId)
}

inline void SLBgplsTopoPrefixSrcRouterId::SharedCtor() {
clear_has_SrcRouterId();
}

SLBgplsTopoPrefixSrcRouterId::~SLBgplsTopoPrefixSrcRouterId() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoPrefixSrcRouterId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoPrefixSrcRouterId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_SrcRouterId()) {
    clear_SrcRouterId();
  }
}

void SLBgplsTopoPrefixSrcRouterId::ArenaDtor(void* object) {
  SLBgplsTopoPrefixSrcRouterId* _this = reinterpret_cast< SLBgplsTopoPrefixSrcRouterId* >(object);
  (void)_this;
}
void SLBgplsTopoPrefixSrcRouterId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoPrefixSrcRouterId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoPrefixSrcRouterId::clear_SrcRouterId() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  switch (SrcRouterId_case()) {
    case kIpv4Addr: {
      SrcRouterId_.ipv4addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kIpv6Addr: {
      SrcRouterId_.ipv6addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SRCROUTERID_NOT_SET;
}


void SLBgplsTopoPrefixSrcRouterId::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_SrcRouterId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoPrefixSrcRouterId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Ipv4Addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ipv4addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6Addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipv6addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoPrefixSrcRouterId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Ipv4Addr = 1;
  if (_internal_has_ipv4addr()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ipv4addr(), target);
  }

  // bytes Ipv6Addr = 2;
  if (_internal_has_ipv6addr()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ipv6addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoPrefixSrcRouterId)
  return target;
}

size_t SLBgplsTopoPrefixSrcRouterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (SrcRouterId_case()) {
    // bytes Ipv4Addr = 1;
    case kIpv4Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv4addr());
      break;
    }
    // bytes Ipv6Addr = 2;
    case kIpv6Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6addr());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoPrefixSrcRouterId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoPrefixSrcRouterId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoPrefixSrcRouterId::GetClassData() const { return &_class_data_; }

void SLBgplsTopoPrefixSrcRouterId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoPrefixSrcRouterId *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoPrefixSrcRouterId &>(from));
}


void SLBgplsTopoPrefixSrcRouterId::MergeFrom(const SLBgplsTopoPrefixSrcRouterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.SrcRouterId_case()) {
    case kIpv4Addr: {
      _internal_set_ipv4addr(from._internal_ipv4addr());
      break;
    }
    case kIpv6Addr: {
      _internal_set_ipv6addr(from._internal_ipv6addr());
      break;
    }
    case SRCROUTERID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoPrefixSrcRouterId::CopyFrom(const SLBgplsTopoPrefixSrcRouterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoPrefixSrcRouterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoPrefixSrcRouterId::IsInitialized() const {
  return true;
}

void SLBgplsTopoPrefixSrcRouterId::InternalSwap(SLBgplsTopoPrefixSrcRouterId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(SrcRouterId_, other->SrcRouterId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoPrefixSrcRouterId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[77]);
}

// ===================================================================

class SLBgplsTopoL2BundleMemberAttr::_Internal {
 public:
  static const ::service_layer::SLBgplsTopoAdminGroup& admingroup(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxBandwidth& maxbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& maxresvbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoLinkProtectionType& protectiontype(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxlinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvariation(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
  static const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg);
};

const ::service_layer::SLBgplsTopoAdminGroup&
SLBgplsTopoL2BundleMemberAttr::_Internal::admingroup(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->admingroup_;
}
const ::service_layer::SLBgplsTopoLinkMaxBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::maxbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->maxbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::maxresvbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->maxresvbandwidth_;
}
const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&
SLBgplsTopoL2BundleMemberAttr::_Internal::tedefmetric(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->tedefmetric_;
}
const ::service_layer::SLBgplsTopoLinkProtectionType&
SLBgplsTopoL2BundleMemberAttr::_Internal::protectiontype(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->protectiontype_;
}
const ::service_layer::SLBgplsTopoUniLinkDelay&
SLBgplsTopoL2BundleMemberAttr::_Internal::unilinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->unilinkdelay_;
}
const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&
SLBgplsTopoL2BundleMemberAttr::_Internal::minmaxlinkdelay(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->minmaxlinkdelay_;
}
const ::service_layer::SLBgplsTopoUniDelayVar&
SLBgplsTopoL2BundleMemberAttr::_Internal::unidelayvariation(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->unidelayvariation_;
}
const ::service_layer::SLBgplsTopoUniLinkLoss&
SLBgplsTopoL2BundleMemberAttr::_Internal::unilinkloss(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->unilinkloss_;
}
const ::service_layer::SLBgplsTopoUniResBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::uniresbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->uniresbandwidth_;
}
const ::service_layer::SLBgplsTopoUniAvailBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::uniavailbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->uniavailbandwidth_;
}
const ::service_layer::SLBgplsTopoUniUtilBandwidth&
SLBgplsTopoL2BundleMemberAttr::_Internal::uniutilbandwidth(const SLBgplsTopoL2BundleMemberAttr* msg) {
  return *msg->uniutilbandwidth_;
}
SLBgplsTopoL2BundleMemberAttr::SLBgplsTopoL2BundleMemberAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unresvbandwidth_(arena),
  adjsid_(arena),
  lanadjsid_(arena),
  asla_(arena),
  extadmingroup_(arena),
  unknownattr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoL2BundleMemberAttr)
}
SLBgplsTopoL2BundleMemberAttr::SLBgplsTopoL2BundleMemberAttr(const SLBgplsTopoL2BundleMemberAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unresvbandwidth_(from.unresvbandwidth_),
      adjsid_(from.adjsid_),
      lanadjsid_(from.lanadjsid_),
      asla_(from.asla_),
      extadmingroup_(from.extadmingroup_),
      unknownattr_(from.unknownattr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_admingroup()) {
    admingroup_ = new ::service_layer::SLBgplsTopoAdminGroup(*from.admingroup_);
  } else {
    admingroup_ = nullptr;
  }
  if (from._internal_has_maxbandwidth()) {
    maxbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxBandwidth(*from.maxbandwidth_);
  } else {
    maxbandwidth_ = nullptr;
  }
  if (from._internal_has_maxresvbandwidth()) {
    maxresvbandwidth_ = new ::service_layer::SLBgplsTopoLinkMaxResvBandwidth(*from.maxresvbandwidth_);
  } else {
    maxresvbandwidth_ = nullptr;
  }
  if (from._internal_has_tedefmetric()) {
    tedefmetric_ = new ::service_layer::SLBgplsTopoLinkTeDefaultMetric(*from.tedefmetric_);
  } else {
    tedefmetric_ = nullptr;
  }
  if (from._internal_has_protectiontype()) {
    protectiontype_ = new ::service_layer::SLBgplsTopoLinkProtectionType(*from.protectiontype_);
  } else {
    protectiontype_ = nullptr;
  }
  if (from._internal_has_unilinkdelay()) {
    unilinkdelay_ = new ::service_layer::SLBgplsTopoUniLinkDelay(*from.unilinkdelay_);
  } else {
    unilinkdelay_ = nullptr;
  }
  if (from._internal_has_minmaxlinkdelay()) {
    minmaxlinkdelay_ = new ::service_layer::SLBgplsTopoMinMaxUniLinkDelay(*from.minmaxlinkdelay_);
  } else {
    minmaxlinkdelay_ = nullptr;
  }
  if (from._internal_has_unidelayvariation()) {
    unidelayvariation_ = new ::service_layer::SLBgplsTopoUniDelayVar(*from.unidelayvariation_);
  } else {
    unidelayvariation_ = nullptr;
  }
  if (from._internal_has_unilinkloss()) {
    unilinkloss_ = new ::service_layer::SLBgplsTopoUniLinkLoss(*from.unilinkloss_);
  } else {
    unilinkloss_ = nullptr;
  }
  if (from._internal_has_uniresbandwidth()) {
    uniresbandwidth_ = new ::service_layer::SLBgplsTopoUniResBandwidth(*from.uniresbandwidth_);
  } else {
    uniresbandwidth_ = nullptr;
  }
  if (from._internal_has_uniavailbandwidth()) {
    uniavailbandwidth_ = new ::service_layer::SLBgplsTopoUniAvailBandwidth(*from.uniavailbandwidth_);
  } else {
    uniavailbandwidth_ = nullptr;
  }
  if (from._internal_has_uniutilbandwidth()) {
    uniutilbandwidth_ = new ::service_layer::SLBgplsTopoUniUtilBandwidth(*from.uniutilbandwidth_);
  } else {
    uniutilbandwidth_ = nullptr;
  }
  memberdesc_ = from.memberdesc_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoL2BundleMemberAttr)
}

inline void SLBgplsTopoL2BundleMemberAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&admingroup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memberdesc_) -
    reinterpret_cast<char*>(&admingroup_)) + sizeof(memberdesc_));
}

SLBgplsTopoL2BundleMemberAttr::~SLBgplsTopoL2BundleMemberAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoL2BundleMemberAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoL2BundleMemberAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete admingroup_;
  if (this != internal_default_instance()) delete maxbandwidth_;
  if (this != internal_default_instance()) delete maxresvbandwidth_;
  if (this != internal_default_instance()) delete tedefmetric_;
  if (this != internal_default_instance()) delete protectiontype_;
  if (this != internal_default_instance()) delete unilinkdelay_;
  if (this != internal_default_instance()) delete minmaxlinkdelay_;
  if (this != internal_default_instance()) delete unidelayvariation_;
  if (this != internal_default_instance()) delete unilinkloss_;
  if (this != internal_default_instance()) delete uniresbandwidth_;
  if (this != internal_default_instance()) delete uniavailbandwidth_;
  if (this != internal_default_instance()) delete uniutilbandwidth_;
}

void SLBgplsTopoL2BundleMemberAttr::ArenaDtor(void* object) {
  SLBgplsTopoL2BundleMemberAttr* _this = reinterpret_cast< SLBgplsTopoL2BundleMemberAttr* >(object);
  (void)_this;
}
void SLBgplsTopoL2BundleMemberAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoL2BundleMemberAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoL2BundleMemberAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unresvbandwidth_.Clear();
  adjsid_.Clear();
  lanadjsid_.Clear();
  asla_.Clear();
  extadmingroup_.Clear();
  unknownattr_.Clear();
  if (GetArenaForAllocation() == nullptr && admingroup_ != nullptr) {
    delete admingroup_;
  }
  admingroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxbandwidth_ != nullptr) {
    delete maxbandwidth_;
  }
  maxbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxresvbandwidth_ != nullptr) {
    delete maxresvbandwidth_;
  }
  maxresvbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protectiontype_ != nullptr) {
    delete protectiontype_;
  }
  protectiontype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minmaxlinkdelay_ != nullptr) {
    delete minmaxlinkdelay_;
  }
  minmaxlinkdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unidelayvariation_ != nullptr) {
    delete unidelayvariation_;
  }
  unidelayvariation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
  memberdesc_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoL2BundleMemberAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MemberDesc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          memberdesc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_admingroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxresvbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unresvbandwidth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tedefmetric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectiontype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanadjsid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_minmaxlinkdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_unidelayvariation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unilinkloss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniresbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniavailbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniutilbandwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_asla(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extadmingroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unknownattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoL2BundleMemberAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MemberDesc = 1;
  if (this->_internal_memberdesc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_memberdesc(), target);
  }

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 2;
  if (this->_internal_has_admingroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::admingroup(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 3;
  if (this->_internal_has_maxbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::maxbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
  if (this->_internal_has_maxresvbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::maxresvbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unresvbandwidth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_unresvbandwidth(i), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
  if (this->_internal_has_tedefmetric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tedefmetric(this), target, stream);
  }

  // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 7;
  if (this->_internal_has_protectiontype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::protectiontype(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_adjsid(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanadjsid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lanadjsid(i), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
  if (this->_internal_has_unilinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::unilinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
  if (this->_internal_has_minmaxlinkdelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::minmaxlinkdelay(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
  if (this->_internal_has_unidelayvariation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::unidelayvariation(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
  if (this->_internal_has_unilinkloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::unilinkloss(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
  if (this->_internal_has_uniresbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::uniresbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
  if (this->_internal_has_uniavailbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::uniavailbandwidth(this), target, stream);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
  if (this->_internal_has_uniutilbandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::uniutilbandwidth(this), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asla_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_asla(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extadmingroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_extadmingroup(i), target, stream);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unknownattr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_unknownattr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoL2BundleMemberAttr)
  return target;
}

size_t SLBgplsTopoL2BundleMemberAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
  total_size += 1UL * this->_internal_unresvbandwidth_size();
  for (const auto& msg : this->unresvbandwidth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
  total_size += 1UL * this->_internal_adjsid_size();
  for (const auto& msg : this->adjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
  total_size += 1UL * this->_internal_lanadjsid_size();
  for (const auto& msg : this->lanadjsid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
  total_size += 2UL * this->_internal_asla_size();
  for (const auto& msg : this->asla_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 18;
  total_size += 2UL * this->_internal_extadmingroup_size();
  for (const auto& msg : this->extadmingroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 19;
  total_size += 2UL * this->_internal_unknownattr_size();
  for (const auto& msg : this->unknownattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 2;
  if (this->_internal_has_admingroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *admingroup_);
  }

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 3;
  if (this->_internal_has_maxbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
  if (this->_internal_has_maxresvbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxresvbandwidth_);
  }

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
  if (this->_internal_has_tedefmetric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tedefmetric_);
  }

  // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 7;
  if (this->_internal_has_protectiontype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectiontype_);
  }

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
  if (this->_internal_has_unilinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkdelay_);
  }

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
  if (this->_internal_has_minmaxlinkdelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minmaxlinkdelay_);
  }

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
  if (this->_internal_has_unidelayvariation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unidelayvariation_);
  }

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
  if (this->_internal_has_unilinkloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unilinkloss_);
  }

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
  if (this->_internal_has_uniresbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniresbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
  if (this->_internal_has_uniavailbandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniavailbandwidth_);
  }

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
  if (this->_internal_has_uniutilbandwidth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniutilbandwidth_);
  }

  // uint32 MemberDesc = 1;
  if (this->_internal_memberdesc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_memberdesc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoL2BundleMemberAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoL2BundleMemberAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoL2BundleMemberAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoL2BundleMemberAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoL2BundleMemberAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoL2BundleMemberAttr &>(from));
}


void SLBgplsTopoL2BundleMemberAttr::MergeFrom(const SLBgplsTopoL2BundleMemberAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unresvbandwidth_.MergeFrom(from.unresvbandwidth_);
  adjsid_.MergeFrom(from.adjsid_);
  lanadjsid_.MergeFrom(from.lanadjsid_);
  asla_.MergeFrom(from.asla_);
  extadmingroup_.MergeFrom(from.extadmingroup_);
  unknownattr_.MergeFrom(from.unknownattr_);
  if (from._internal_has_admingroup()) {
    _internal_mutable_admingroup()->::service_layer::SLBgplsTopoAdminGroup::MergeFrom(from._internal_admingroup());
  }
  if (from._internal_has_maxbandwidth()) {
    _internal_mutable_maxbandwidth()->::service_layer::SLBgplsTopoLinkMaxBandwidth::MergeFrom(from._internal_maxbandwidth());
  }
  if (from._internal_has_maxresvbandwidth()) {
    _internal_mutable_maxresvbandwidth()->::service_layer::SLBgplsTopoLinkMaxResvBandwidth::MergeFrom(from._internal_maxresvbandwidth());
  }
  if (from._internal_has_tedefmetric()) {
    _internal_mutable_tedefmetric()->::service_layer::SLBgplsTopoLinkTeDefaultMetric::MergeFrom(from._internal_tedefmetric());
  }
  if (from._internal_has_protectiontype()) {
    _internal_mutable_protectiontype()->::service_layer::SLBgplsTopoLinkProtectionType::MergeFrom(from._internal_protectiontype());
  }
  if (from._internal_has_unilinkdelay()) {
    _internal_mutable_unilinkdelay()->::service_layer::SLBgplsTopoUniLinkDelay::MergeFrom(from._internal_unilinkdelay());
  }
  if (from._internal_has_minmaxlinkdelay()) {
    _internal_mutable_minmaxlinkdelay()->::service_layer::SLBgplsTopoMinMaxUniLinkDelay::MergeFrom(from._internal_minmaxlinkdelay());
  }
  if (from._internal_has_unidelayvariation()) {
    _internal_mutable_unidelayvariation()->::service_layer::SLBgplsTopoUniDelayVar::MergeFrom(from._internal_unidelayvariation());
  }
  if (from._internal_has_unilinkloss()) {
    _internal_mutable_unilinkloss()->::service_layer::SLBgplsTopoUniLinkLoss::MergeFrom(from._internal_unilinkloss());
  }
  if (from._internal_has_uniresbandwidth()) {
    _internal_mutable_uniresbandwidth()->::service_layer::SLBgplsTopoUniResBandwidth::MergeFrom(from._internal_uniresbandwidth());
  }
  if (from._internal_has_uniavailbandwidth()) {
    _internal_mutable_uniavailbandwidth()->::service_layer::SLBgplsTopoUniAvailBandwidth::MergeFrom(from._internal_uniavailbandwidth());
  }
  if (from._internal_has_uniutilbandwidth()) {
    _internal_mutable_uniutilbandwidth()->::service_layer::SLBgplsTopoUniUtilBandwidth::MergeFrom(from._internal_uniutilbandwidth());
  }
  if (from._internal_memberdesc() != 0) {
    _internal_set_memberdesc(from._internal_memberdesc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoL2BundleMemberAttr::CopyFrom(const SLBgplsTopoL2BundleMemberAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoL2BundleMemberAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoL2BundleMemberAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoL2BundleMemberAttr::InternalSwap(SLBgplsTopoL2BundleMemberAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unresvbandwidth_.InternalSwap(&other->unresvbandwidth_);
  adjsid_.InternalSwap(&other->adjsid_);
  lanadjsid_.InternalSwap(&other->lanadjsid_);
  asla_.InternalSwap(&other->asla_);
  extadmingroup_.InternalSwap(&other->extadmingroup_);
  unknownattr_.InternalSwap(&other->unknownattr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoL2BundleMemberAttr, memberdesc_)
      + sizeof(SLBgplsTopoL2BundleMemberAttr::memberdesc_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoL2BundleMemberAttr, admingroup_)>(
          reinterpret_cast<char*>(&admingroup_),
          reinterpret_cast<char*>(&other->admingroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoL2BundleMemberAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[78]);
}

// ===================================================================

class SLBgplsTopoExtAdminGroup::_Internal {
 public:
};

SLBgplsTopoExtAdminGroup::SLBgplsTopoExtAdminGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoExtAdminGroup)
}
SLBgplsTopoExtAdminGroup::SLBgplsTopoExtAdminGroup(const SLBgplsTopoExtAdminGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_ = from.group_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoExtAdminGroup)
}

inline void SLBgplsTopoExtAdminGroup::SharedCtor() {
group_ = 0u;
}

SLBgplsTopoExtAdminGroup::~SLBgplsTopoExtAdminGroup() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoExtAdminGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoExtAdminGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBgplsTopoExtAdminGroup::ArenaDtor(void* object) {
  SLBgplsTopoExtAdminGroup* _this = reinterpret_cast< SLBgplsTopoExtAdminGroup* >(object);
  (void)_this;
}
void SLBgplsTopoExtAdminGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoExtAdminGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoExtAdminGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoExtAdminGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoExtAdminGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoExtAdminGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoExtAdminGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Group = 1;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoExtAdminGroup)
  return target;
}

size_t SLBgplsTopoExtAdminGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoExtAdminGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Group = 1;
  if (this->_internal_group() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoExtAdminGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoExtAdminGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoExtAdminGroup::GetClassData() const { return &_class_data_; }

void SLBgplsTopoExtAdminGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoExtAdminGroup *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoExtAdminGroup &>(from));
}


void SLBgplsTopoExtAdminGroup::MergeFrom(const SLBgplsTopoExtAdminGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoExtAdminGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group() != 0) {
    _internal_set_group(from._internal_group());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoExtAdminGroup::CopyFrom(const SLBgplsTopoExtAdminGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoExtAdminGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoExtAdminGroup::IsInitialized() const {
  return true;
}

void SLBgplsTopoExtAdminGroup::InternalSwap(SLBgplsTopoExtAdminGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoExtAdminGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[79]);
}

// ===================================================================

class SLBgplsTopoUnknownAttr::_Internal {
 public:
};

SLBgplsTopoUnknownAttr::SLBgplsTopoUnknownAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLBgplsTopoUnknownAttr)
}
SLBgplsTopoUnknownAttr::SLBgplsTopoUnknownAttr(const SLBgplsTopoUnknownAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rawtlv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rawtlv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rawtlv().empty()) {
    rawtlv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rawtlv(), 
      GetArenaForAllocation());
  }
  ::memcpy(&tlvtype_, &from.tlvtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&tlvlen_) -
    reinterpret_cast<char*>(&tlvtype_)) + sizeof(tlvlen_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLBgplsTopoUnknownAttr)
}

inline void SLBgplsTopoUnknownAttr::SharedCtor() {
rawtlv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rawtlv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlvtype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tlvlen_) -
    reinterpret_cast<char*>(&tlvtype_)) + sizeof(tlvlen_));
}

SLBgplsTopoUnknownAttr::~SLBgplsTopoUnknownAttr() {
  // @@protoc_insertion_point(destructor:service_layer.SLBgplsTopoUnknownAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBgplsTopoUnknownAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rawtlv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLBgplsTopoUnknownAttr::ArenaDtor(void* object) {
  SLBgplsTopoUnknownAttr* _this = reinterpret_cast< SLBgplsTopoUnknownAttr* >(object);
  (void)_this;
}
void SLBgplsTopoUnknownAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBgplsTopoUnknownAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBgplsTopoUnknownAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLBgplsTopoUnknownAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rawtlv_.ClearToEmpty();
  ::memset(&tlvtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlvlen_) -
      reinterpret_cast<char*>(&tlvtype_)) + sizeof(tlvlen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBgplsTopoUnknownAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 TlvType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tlvtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TlvLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tlvlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RawTlv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rawtlv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBgplsTopoUnknownAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLBgplsTopoUnknownAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 TlvType = 1;
  if (this->_internal_tlvtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tlvtype(), target);
  }

  // uint32 TlvLen = 2;
  if (this->_internal_tlvlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tlvlen(), target);
  }

  // bytes RawTlv = 3;
  if (!this->_internal_rawtlv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rawtlv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLBgplsTopoUnknownAttr)
  return target;
}

size_t SLBgplsTopoUnknownAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLBgplsTopoUnknownAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes RawTlv = 3;
  if (!this->_internal_rawtlv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rawtlv());
  }

  // uint32 TlvType = 1;
  if (this->_internal_tlvtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tlvtype());
  }

  // uint32 TlvLen = 2;
  if (this->_internal_tlvlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tlvlen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBgplsTopoUnknownAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBgplsTopoUnknownAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBgplsTopoUnknownAttr::GetClassData() const { return &_class_data_; }

void SLBgplsTopoUnknownAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBgplsTopoUnknownAttr *>(to)->MergeFrom(
      static_cast<const SLBgplsTopoUnknownAttr &>(from));
}


void SLBgplsTopoUnknownAttr::MergeFrom(const SLBgplsTopoUnknownAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLBgplsTopoUnknownAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rawtlv().empty()) {
    _internal_set_rawtlv(from._internal_rawtlv());
  }
  if (from._internal_tlvtype() != 0) {
    _internal_set_tlvtype(from._internal_tlvtype());
  }
  if (from._internal_tlvlen() != 0) {
    _internal_set_tlvlen(from._internal_tlvlen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBgplsTopoUnknownAttr::CopyFrom(const SLBgplsTopoUnknownAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLBgplsTopoUnknownAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBgplsTopoUnknownAttr::IsInitialized() const {
  return true;
}

void SLBgplsTopoUnknownAttr::InternalSwap(SLBgplsTopoUnknownAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rawtlv_, lhs_arena,
      &other->rawtlv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBgplsTopoUnknownAttr, tlvlen_)
      + sizeof(SLBgplsTopoUnknownAttr::tlvlen_)
      - PROTOBUF_FIELD_OFFSET(SLBgplsTopoUnknownAttr, tlvtype_)>(
          reinterpret_cast<char*>(&tlvtype_),
          reinterpret_cast<char*>(&other->tlvtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBgplsTopoUnknownAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fbgpls_5ftopology_2eproto_getter, &descriptor_table_sl_5fbgpls_5ftopology_2eproto_once,
      file_level_metadata_sl_5fbgpls_5ftopology_2eproto[80]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNotifReqMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNotifReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNotifReqMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNlriMatch* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNlriMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNlriMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoStartMarker* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoStartMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoStartMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoEndMarker* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoEndMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoEndMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNotif* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoEntry* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoData* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoData >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoInstanceId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoInstanceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoInstanceId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeData* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkData* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixData* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixData >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNode* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNode >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLink* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLink >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefix* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixDescr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixDescr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixDescr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoOspfNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoOspfNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoOspfNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoOspfv3NodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoOspfv3NodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoOspfv3NodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoIsisNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoIsisNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoIsisNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoBgpNodeId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoBgpNodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoBgpNodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBplsTopoLinkLocRemId* Arena::CreateMaybeMessage< ::service_layer::SLBplsTopoLinkLocRemId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBplsTopoLinkLocRemId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoMtId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoMtId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoMtId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeMsd* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeMsd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeMsd >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMsd* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMsd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMsd >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeFlagBits* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeFlagBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeFlagBits >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoNodeOpaqueAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeOpaqueAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoNodeOpaqueAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsNodeName* Arena::CreateMaybeMessage< ::service_layer::SLBgplsNodeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsNodeName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoIsisAreaId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoIsisAreaId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoIsisAreaId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLocalIpv4RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLocalIpv4RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLocalIpv4RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLocalIpv6RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLocalIpv6RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLocalIpv6RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoRemoteIpv4RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoRemoteIpv6RouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrgb* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrgb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrgb >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrgbIsisFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrgbIsisFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrgbIsisFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrAlgorithm* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrAlgorithm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrAlgorithm >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoSrlb* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoSrlb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoSrlb >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoFad* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoFad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoFad >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixFAPM* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixFAPM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixFAPM >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoFadUnsuppTlv* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoFadUnsuppTlv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoFadUnsuppTlv >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoAdminGroup* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoAdminGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoAdminGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMaxBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMaxBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMaxBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMaxResvBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMaxResvBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkUnresvBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkTeDefaultMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkTeDefaultMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkTeDefaultMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkProtectionType* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkProtectionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkProtectionType >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkMplsProtoMask* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkMplsProtoMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkMplsProtoMask >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkIgpMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkIgpMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkIgpMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkSrlg* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkSrlg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkSrlg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkOpaqueAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkOpaqueAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkOpaqueAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLinkName* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLinkName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoAdjSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoAdjSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoAdjSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoLanAdjSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoLanAdjSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoLanAdjSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoBgpPeerNodeSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoBgpPeerNodeSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoBgpPeerNodeSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoBgpPeerAdjSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoBgpPeerAdjSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoBgpPeerAdjSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoBgpPeerSetSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoBgpPeerSetSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoBgpPeerSetSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgpLsTopoNeighborId* Arena::CreateMaybeMessage< ::service_layer::SLBgpLsTopoNeighborId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgpLsTopoNeighborId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniLinkDelay* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniLinkDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniLinkDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoMinMaxUniLinkDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoMinMaxUniLinkDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniDelayVar* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniDelayVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniDelayVar >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniLinkLoss* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniLinkLoss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniLinkLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniResBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniResBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniResBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniAvailBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniAvailBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniAvailBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUniUtilBandwidth* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUniUtilBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUniUtilBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoAslaAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoAslaAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoAslaAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixIgpFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixIgpFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixIgpFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixIgpRouteTag* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixMetric* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixOspfFwdAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixOspfFwdAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixOpaqueAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixOpaqueAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixOpaqueAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixSid* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixRange* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixRange >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixAttrFlags* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixAttrFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixAttrFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoPrefixSrcRouterId* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixSrcRouterId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoPrefixSrcRouterId >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoL2BundleMemberAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoL2BundleMemberAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoL2BundleMemberAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoExtAdminGroup* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoExtAdminGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoExtAdminGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLBgplsTopoUnknownAttr* Arena::CreateMaybeMessage< ::service_layer::SLBgplsTopoUnknownAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLBgplsTopoUnknownAttr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
