// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_bgpls_topology.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fbgpls_5ftopology_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fbgpls_5ftopology_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fbgpls_5ftopology_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fbgpls_5ftopology_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[117]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fbgpls_5ftopology_2eproto;
namespace service_layer {
class SLBgpLsTopoNeighborId;
struct SLBgpLsTopoNeighborIdDefaultTypeInternal;
extern SLBgpLsTopoNeighborIdDefaultTypeInternal _SLBgpLsTopoNeighborId_default_instance_;
class SLBgplsNodeName;
struct SLBgplsNodeNameDefaultTypeInternal;
extern SLBgplsNodeNameDefaultTypeInternal _SLBgplsNodeName_default_instance_;
class SLBgplsSrSegListMetric;
struct SLBgplsSrSegListMetricDefaultTypeInternal;
extern SLBgplsSrSegListMetricDefaultTypeInternal _SLBgplsSrSegListMetric_default_instance_;
class SLBgplsTopoAdjSid;
struct SLBgplsTopoAdjSidDefaultTypeInternal;
extern SLBgplsTopoAdjSidDefaultTypeInternal _SLBgplsTopoAdjSid_default_instance_;
class SLBgplsTopoAdminGroup;
struct SLBgplsTopoAdminGroupDefaultTypeInternal;
extern SLBgplsTopoAdminGroupDefaultTypeInternal _SLBgplsTopoAdminGroup_default_instance_;
class SLBgplsTopoAslaAttr;
struct SLBgplsTopoAslaAttrDefaultTypeInternal;
extern SLBgplsTopoAslaAttrDefaultTypeInternal _SLBgplsTopoAslaAttr_default_instance_;
class SLBgplsTopoBgpNodeId;
struct SLBgplsTopoBgpNodeIdDefaultTypeInternal;
extern SLBgplsTopoBgpNodeIdDefaultTypeInternal _SLBgplsTopoBgpNodeId_default_instance_;
class SLBgplsTopoBgpPeerAdjSid;
struct SLBgplsTopoBgpPeerAdjSidDefaultTypeInternal;
extern SLBgplsTopoBgpPeerAdjSidDefaultTypeInternal _SLBgplsTopoBgpPeerAdjSid_default_instance_;
class SLBgplsTopoBgpPeerNodeSid;
struct SLBgplsTopoBgpPeerNodeSidDefaultTypeInternal;
extern SLBgplsTopoBgpPeerNodeSidDefaultTypeInternal _SLBgplsTopoBgpPeerNodeSid_default_instance_;
class SLBgplsTopoBgpPeerSetSid;
struct SLBgplsTopoBgpPeerSetSidDefaultTypeInternal;
extern SLBgplsTopoBgpPeerSetSidDefaultTypeInternal _SLBgplsTopoBgpPeerSetSid_default_instance_;
class SLBgplsTopoData;
struct SLBgplsTopoDataDefaultTypeInternal;
extern SLBgplsTopoDataDefaultTypeInternal _SLBgplsTopoData_default_instance_;
class SLBgplsTopoEndMarker;
struct SLBgplsTopoEndMarkerDefaultTypeInternal;
extern SLBgplsTopoEndMarkerDefaultTypeInternal _SLBgplsTopoEndMarker_default_instance_;
class SLBgplsTopoEntry;
struct SLBgplsTopoEntryDefaultTypeInternal;
extern SLBgplsTopoEntryDefaultTypeInternal _SLBgplsTopoEntry_default_instance_;
class SLBgplsTopoExtAdminGroup;
struct SLBgplsTopoExtAdminGroupDefaultTypeInternal;
extern SLBgplsTopoExtAdminGroupDefaultTypeInternal _SLBgplsTopoExtAdminGroup_default_instance_;
class SLBgplsTopoFad;
struct SLBgplsTopoFadDefaultTypeInternal;
extern SLBgplsTopoFadDefaultTypeInternal _SLBgplsTopoFad_default_instance_;
class SLBgplsTopoFadUnsuppTlv;
struct SLBgplsTopoFadUnsuppTlvDefaultTypeInternal;
extern SLBgplsTopoFadUnsuppTlvDefaultTypeInternal _SLBgplsTopoFadUnsuppTlv_default_instance_;
class SLBgplsTopoInstanceId;
struct SLBgplsTopoInstanceIdDefaultTypeInternal;
extern SLBgplsTopoInstanceIdDefaultTypeInternal _SLBgplsTopoInstanceId_default_instance_;
class SLBgplsTopoIsisAreaId;
struct SLBgplsTopoIsisAreaIdDefaultTypeInternal;
extern SLBgplsTopoIsisAreaIdDefaultTypeInternal _SLBgplsTopoIsisAreaId_default_instance_;
class SLBgplsTopoIsisNodeId;
struct SLBgplsTopoIsisNodeIdDefaultTypeInternal;
extern SLBgplsTopoIsisNodeIdDefaultTypeInternal _SLBgplsTopoIsisNodeId_default_instance_;
class SLBgplsTopoL2BundleMemberAttr;
struct SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal;
extern SLBgplsTopoL2BundleMemberAttrDefaultTypeInternal _SLBgplsTopoL2BundleMemberAttr_default_instance_;
class SLBgplsTopoLanAdjSid;
struct SLBgplsTopoLanAdjSidDefaultTypeInternal;
extern SLBgplsTopoLanAdjSidDefaultTypeInternal _SLBgplsTopoLanAdjSid_default_instance_;
class SLBgplsTopoLink;
struct SLBgplsTopoLinkDefaultTypeInternal;
extern SLBgplsTopoLinkDefaultTypeInternal _SLBgplsTopoLink_default_instance_;
class SLBgplsTopoLinkAttr;
struct SLBgplsTopoLinkAttrDefaultTypeInternal;
extern SLBgplsTopoLinkAttrDefaultTypeInternal _SLBgplsTopoLinkAttr_default_instance_;
class SLBgplsTopoLinkData;
struct SLBgplsTopoLinkDataDefaultTypeInternal;
extern SLBgplsTopoLinkDataDefaultTypeInternal _SLBgplsTopoLinkData_default_instance_;
class SLBgplsTopoLinkDescr;
struct SLBgplsTopoLinkDescrDefaultTypeInternal;
extern SLBgplsTopoLinkDescrDefaultTypeInternal _SLBgplsTopoLinkDescr_default_instance_;
class SLBgplsTopoLinkIgpMetric;
struct SLBgplsTopoLinkIgpMetricDefaultTypeInternal;
extern SLBgplsTopoLinkIgpMetricDefaultTypeInternal _SLBgplsTopoLinkIgpMetric_default_instance_;
class SLBgplsTopoLinkMaxBandwidth;
struct SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal;
extern SLBgplsTopoLinkMaxBandwidthDefaultTypeInternal _SLBgplsTopoLinkMaxBandwidth_default_instance_;
class SLBgplsTopoLinkMaxResvBandwidth;
struct SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal;
extern SLBgplsTopoLinkMaxResvBandwidthDefaultTypeInternal _SLBgplsTopoLinkMaxResvBandwidth_default_instance_;
class SLBgplsTopoLinkMplsProtoMask;
struct SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal;
extern SLBgplsTopoLinkMplsProtoMaskDefaultTypeInternal _SLBgplsTopoLinkMplsProtoMask_default_instance_;
class SLBgplsTopoLinkMsd;
struct SLBgplsTopoLinkMsdDefaultTypeInternal;
extern SLBgplsTopoLinkMsdDefaultTypeInternal _SLBgplsTopoLinkMsd_default_instance_;
class SLBgplsTopoLinkName;
struct SLBgplsTopoLinkNameDefaultTypeInternal;
extern SLBgplsTopoLinkNameDefaultTypeInternal _SLBgplsTopoLinkName_default_instance_;
class SLBgplsTopoLinkOpaqueAttr;
struct SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal;
extern SLBgplsTopoLinkOpaqueAttrDefaultTypeInternal _SLBgplsTopoLinkOpaqueAttr_default_instance_;
class SLBgplsTopoLinkProtectionType;
struct SLBgplsTopoLinkProtectionTypeDefaultTypeInternal;
extern SLBgplsTopoLinkProtectionTypeDefaultTypeInternal _SLBgplsTopoLinkProtectionType_default_instance_;
class SLBgplsTopoLinkSrlg;
struct SLBgplsTopoLinkSrlgDefaultTypeInternal;
extern SLBgplsTopoLinkSrlgDefaultTypeInternal _SLBgplsTopoLinkSrlg_default_instance_;
class SLBgplsTopoLinkTeDefaultMetric;
struct SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal;
extern SLBgplsTopoLinkTeDefaultMetricDefaultTypeInternal _SLBgplsTopoLinkTeDefaultMetric_default_instance_;
class SLBgplsTopoLinkUnresvBandwidth;
struct SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal;
extern SLBgplsTopoLinkUnresvBandwidthDefaultTypeInternal _SLBgplsTopoLinkUnresvBandwidth_default_instance_;
class SLBgplsTopoLocalIpv4RouterId;
struct SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal;
extern SLBgplsTopoLocalIpv4RouterIdDefaultTypeInternal _SLBgplsTopoLocalIpv4RouterId_default_instance_;
class SLBgplsTopoLocalIpv6RouterId;
struct SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal;
extern SLBgplsTopoLocalIpv6RouterIdDefaultTypeInternal _SLBgplsTopoLocalIpv6RouterId_default_instance_;
class SLBgplsTopoMinMaxUniLinkDelay;
struct SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal;
extern SLBgplsTopoMinMaxUniLinkDelayDefaultTypeInternal _SLBgplsTopoMinMaxUniLinkDelay_default_instance_;
class SLBgplsTopoMtId;
struct SLBgplsTopoMtIdDefaultTypeInternal;
extern SLBgplsTopoMtIdDefaultTypeInternal _SLBgplsTopoMtId_default_instance_;
class SLBgplsTopoNlriMatch;
struct SLBgplsTopoNlriMatchDefaultTypeInternal;
extern SLBgplsTopoNlriMatchDefaultTypeInternal _SLBgplsTopoNlriMatch_default_instance_;
class SLBgplsTopoNode;
struct SLBgplsTopoNodeDefaultTypeInternal;
extern SLBgplsTopoNodeDefaultTypeInternal _SLBgplsTopoNode_default_instance_;
class SLBgplsTopoNodeAttr;
struct SLBgplsTopoNodeAttrDefaultTypeInternal;
extern SLBgplsTopoNodeAttrDefaultTypeInternal _SLBgplsTopoNodeAttr_default_instance_;
class SLBgplsTopoNodeData;
struct SLBgplsTopoNodeDataDefaultTypeInternal;
extern SLBgplsTopoNodeDataDefaultTypeInternal _SLBgplsTopoNodeData_default_instance_;
class SLBgplsTopoNodeFlagBits;
struct SLBgplsTopoNodeFlagBitsDefaultTypeInternal;
extern SLBgplsTopoNodeFlagBitsDefaultTypeInternal _SLBgplsTopoNodeFlagBits_default_instance_;
class SLBgplsTopoNodeMsd;
struct SLBgplsTopoNodeMsdDefaultTypeInternal;
extern SLBgplsTopoNodeMsdDefaultTypeInternal _SLBgplsTopoNodeMsd_default_instance_;
class SLBgplsTopoNodeOpaqueAttr;
struct SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal;
extern SLBgplsTopoNodeOpaqueAttrDefaultTypeInternal _SLBgplsTopoNodeOpaqueAttr_default_instance_;
class SLBgplsTopoNotif;
struct SLBgplsTopoNotifDefaultTypeInternal;
extern SLBgplsTopoNotifDefaultTypeInternal _SLBgplsTopoNotif_default_instance_;
class SLBgplsTopoNotifMsg;
struct SLBgplsTopoNotifMsgDefaultTypeInternal;
extern SLBgplsTopoNotifMsgDefaultTypeInternal _SLBgplsTopoNotifMsg_default_instance_;
class SLBgplsTopoNotifReqMsg;
struct SLBgplsTopoNotifReqMsgDefaultTypeInternal;
extern SLBgplsTopoNotifReqMsgDefaultTypeInternal _SLBgplsTopoNotifReqMsg_default_instance_;
class SLBgplsTopoOspfNodeId;
struct SLBgplsTopoOspfNodeIdDefaultTypeInternal;
extern SLBgplsTopoOspfNodeIdDefaultTypeInternal _SLBgplsTopoOspfNodeId_default_instance_;
class SLBgplsTopoOspfv3NodeId;
struct SLBgplsTopoOspfv3NodeIdDefaultTypeInternal;
extern SLBgplsTopoOspfv3NodeIdDefaultTypeInternal _SLBgplsTopoOspfv3NodeId_default_instance_;
class SLBgplsTopoPrefix;
struct SLBgplsTopoPrefixDefaultTypeInternal;
extern SLBgplsTopoPrefixDefaultTypeInternal _SLBgplsTopoPrefix_default_instance_;
class SLBgplsTopoPrefixAttr;
struct SLBgplsTopoPrefixAttrDefaultTypeInternal;
extern SLBgplsTopoPrefixAttrDefaultTypeInternal _SLBgplsTopoPrefixAttr_default_instance_;
class SLBgplsTopoPrefixAttrFlags;
struct SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal;
extern SLBgplsTopoPrefixAttrFlagsDefaultTypeInternal _SLBgplsTopoPrefixAttrFlags_default_instance_;
class SLBgplsTopoPrefixData;
struct SLBgplsTopoPrefixDataDefaultTypeInternal;
extern SLBgplsTopoPrefixDataDefaultTypeInternal _SLBgplsTopoPrefixData_default_instance_;
class SLBgplsTopoPrefixDescr;
struct SLBgplsTopoPrefixDescrDefaultTypeInternal;
extern SLBgplsTopoPrefixDescrDefaultTypeInternal _SLBgplsTopoPrefixDescr_default_instance_;
class SLBgplsTopoPrefixFAPM;
struct SLBgplsTopoPrefixFAPMDefaultTypeInternal;
extern SLBgplsTopoPrefixFAPMDefaultTypeInternal _SLBgplsTopoPrefixFAPM_default_instance_;
class SLBgplsTopoPrefixIgpExtRouteTag;
struct SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal;
extern SLBgplsTopoPrefixIgpExtRouteTagDefaultTypeInternal _SLBgplsTopoPrefixIgpExtRouteTag_default_instance_;
class SLBgplsTopoPrefixIgpFlags;
struct SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal;
extern SLBgplsTopoPrefixIgpFlagsDefaultTypeInternal _SLBgplsTopoPrefixIgpFlags_default_instance_;
class SLBgplsTopoPrefixIgpRouteTag;
struct SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal;
extern SLBgplsTopoPrefixIgpRouteTagDefaultTypeInternal _SLBgplsTopoPrefixIgpRouteTag_default_instance_;
class SLBgplsTopoPrefixMetric;
struct SLBgplsTopoPrefixMetricDefaultTypeInternal;
extern SLBgplsTopoPrefixMetricDefaultTypeInternal _SLBgplsTopoPrefixMetric_default_instance_;
class SLBgplsTopoPrefixOpaqueAttr;
struct SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal;
extern SLBgplsTopoPrefixOpaqueAttrDefaultTypeInternal _SLBgplsTopoPrefixOpaqueAttr_default_instance_;
class SLBgplsTopoPrefixOspfFwdAddr;
struct SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal;
extern SLBgplsTopoPrefixOspfFwdAddrDefaultTypeInternal _SLBgplsTopoPrefixOspfFwdAddr_default_instance_;
class SLBgplsTopoPrefixRange;
struct SLBgplsTopoPrefixRangeDefaultTypeInternal;
extern SLBgplsTopoPrefixRangeDefaultTypeInternal _SLBgplsTopoPrefixRange_default_instance_;
class SLBgplsTopoPrefixSid;
struct SLBgplsTopoPrefixSidDefaultTypeInternal;
extern SLBgplsTopoPrefixSidDefaultTypeInternal _SLBgplsTopoPrefixSid_default_instance_;
class SLBgplsTopoPrefixSrcRouterId;
struct SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal;
extern SLBgplsTopoPrefixSrcRouterIdDefaultTypeInternal _SLBgplsTopoPrefixSrcRouterId_default_instance_;
class SLBgplsTopoPrefixSrv6Loc;
struct SLBgplsTopoPrefixSrv6LocDefaultTypeInternal;
extern SLBgplsTopoPrefixSrv6LocDefaultTypeInternal _SLBgplsTopoPrefixSrv6Loc_default_instance_;
class SLBgplsTopoRemoteIpv4RouterId;
struct SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal;
extern SLBgplsTopoRemoteIpv4RouterIdDefaultTypeInternal _SLBgplsTopoRemoteIpv4RouterId_default_instance_;
class SLBgplsTopoRemoteIpv6RouterId;
struct SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal;
extern SLBgplsTopoRemoteIpv6RouterIdDefaultTypeInternal _SLBgplsTopoRemoteIpv6RouterId_default_instance_;
class SLBgplsTopoSrAffinityConstraints;
struct SLBgplsTopoSrAffinityConstraintsDefaultTypeInternal;
extern SLBgplsTopoSrAffinityConstraintsDefaultTypeInternal _SLBgplsTopoSrAffinityConstraints_default_instance_;
class SLBgplsTopoSrAlgorithm;
struct SLBgplsTopoSrAlgorithmDefaultTypeInternal;
extern SLBgplsTopoSrAlgorithmDefaultTypeInternal _SLBgplsTopoSrAlgorithm_default_instance_;
class SLBgplsTopoSrBandwidthConstraint;
struct SLBgplsTopoSrBandwidthConstraintDefaultTypeInternal;
extern SLBgplsTopoSrBandwidthConstraintDefaultTypeInternal _SLBgplsTopoSrBandwidthConstraint_default_instance_;
class SLBgplsTopoSrBidirGroupConstraint;
struct SLBgplsTopoSrBidirGroupConstraintDefaultTypeInternal;
extern SLBgplsTopoSrBidirGroupConstraintDefaultTypeInternal _SLBgplsTopoSrBidirGroupConstraint_default_instance_;
class SLBgplsTopoSrBindingSid;
struct SLBgplsTopoSrBindingSidDefaultTypeInternal;
extern SLBgplsTopoSrBindingSidDefaultTypeInternal _SLBgplsTopoSrBindingSid_default_instance_;
class SLBgplsTopoSrCpConstraints;
struct SLBgplsTopoSrCpConstraintsDefaultTypeInternal;
extern SLBgplsTopoSrCpConstraintsDefaultTypeInternal _SLBgplsTopoSrCpConstraints_default_instance_;
class SLBgplsTopoSrCpName;
struct SLBgplsTopoSrCpNameDefaultTypeInternal;
extern SLBgplsTopoSrCpNameDefaultTypeInternal _SLBgplsTopoSrCpName_default_instance_;
class SLBgplsTopoSrCpSegListBandwidthState;
struct SLBgplsTopoSrCpSegListBandwidthStateDefaultTypeInternal;
extern SLBgplsTopoSrCpSegListBandwidthStateDefaultTypeInternal _SLBgplsTopoSrCpSegListBandwidthState_default_instance_;
class SLBgplsTopoSrCpState;
struct SLBgplsTopoSrCpStateDefaultTypeInternal;
extern SLBgplsTopoSrCpStateDefaultTypeInternal _SLBgplsTopoSrCpState_default_instance_;
class SLBgplsTopoSrDisjointGroupConstraint;
struct SLBgplsTopoSrDisjointGroupConstraintDefaultTypeInternal;
extern SLBgplsTopoSrDisjointGroupConstraintDefaultTypeInternal _SLBgplsTopoSrDisjointGroupConstraint_default_instance_;
class SLBgplsTopoSrMetricConstraint;
struct SLBgplsTopoSrMetricConstraintDefaultTypeInternal;
extern SLBgplsTopoSrMetricConstraintDefaultTypeInternal _SLBgplsTopoSrMetricConstraint_default_instance_;
class SLBgplsTopoSrPolicy;
struct SLBgplsTopoSrPolicyDefaultTypeInternal;
extern SLBgplsTopoSrPolicyDefaultTypeInternal _SLBgplsTopoSrPolicy_default_instance_;
class SLBgplsTopoSrPolicyAttr;
struct SLBgplsTopoSrPolicyAttrDefaultTypeInternal;
extern SLBgplsTopoSrPolicyAttrDefaultTypeInternal _SLBgplsTopoSrPolicyAttr_default_instance_;
class SLBgplsTopoSrPolicyData;
struct SLBgplsTopoSrPolicyDataDefaultTypeInternal;
extern SLBgplsTopoSrPolicyDataDefaultTypeInternal _SLBgplsTopoSrPolicyData_default_instance_;
class SLBgplsTopoSrPolicyDescr;
struct SLBgplsTopoSrPolicyDescrDefaultTypeInternal;
extern SLBgplsTopoSrPolicyDescrDefaultTypeInternal _SLBgplsTopoSrPolicyDescr_default_instance_;
class SLBgplsTopoSrPolicyFlags;
struct SLBgplsTopoSrPolicyFlagsDefaultTypeInternal;
extern SLBgplsTopoSrPolicyFlagsDefaultTypeInternal _SLBgplsTopoSrPolicyFlags_default_instance_;
class SLBgplsTopoSrPolicyName;
struct SLBgplsTopoSrPolicyNameDefaultTypeInternal;
extern SLBgplsTopoSrPolicyNameDefaultTypeInternal _SLBgplsTopoSrPolicyName_default_instance_;
class SLBgplsTopoSrPolicyNodeId;
struct SLBgplsTopoSrPolicyNodeIdDefaultTypeInternal;
extern SLBgplsTopoSrPolicyNodeIdDefaultTypeInternal _SLBgplsTopoSrPolicyNodeId_default_instance_;
class SLBgplsTopoSrSegList;
struct SLBgplsTopoSrSegListDefaultTypeInternal;
extern SLBgplsTopoSrSegListDefaultTypeInternal _SLBgplsTopoSrSegList_default_instance_;
class SLBgplsTopoSrSegListId;
struct SLBgplsTopoSrSegListIdDefaultTypeInternal;
extern SLBgplsTopoSrSegListIdDefaultTypeInternal _SLBgplsTopoSrSegListId_default_instance_;
class SLBgplsTopoSrSegment;
struct SLBgplsTopoSrSegmentDefaultTypeInternal;
extern SLBgplsTopoSrSegmentDefaultTypeInternal _SLBgplsTopoSrSegment_default_instance_;
class SLBgplsTopoSrSegmentDesc;
struct SLBgplsTopoSrSegmentDescDefaultTypeInternal;
extern SLBgplsTopoSrSegmentDescDefaultTypeInternal _SLBgplsTopoSrSegmentDesc_default_instance_;
class SLBgplsTopoSrSrlgConstraints;
struct SLBgplsTopoSrSrlgConstraintsDefaultTypeInternal;
extern SLBgplsTopoSrSrlgConstraintsDefaultTypeInternal _SLBgplsTopoSrSrlgConstraints_default_instance_;
class SLBgplsTopoSrgb;
struct SLBgplsTopoSrgbDefaultTypeInternal;
extern SLBgplsTopoSrgbDefaultTypeInternal _SLBgplsTopoSrgb_default_instance_;
class SLBgplsTopoSrgbIsisFlags;
struct SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal;
extern SLBgplsTopoSrgbIsisFlagsDefaultTypeInternal _SLBgplsTopoSrgbIsisFlags_default_instance_;
class SLBgplsTopoSrlb;
struct SLBgplsTopoSrlbDefaultTypeInternal;
extern SLBgplsTopoSrlbDefaultTypeInternal _SLBgplsTopoSrlb_default_instance_;
class SLBgplsTopoSrv6BgpPeerNodeSid;
struct SLBgplsTopoSrv6BgpPeerNodeSidDefaultTypeInternal;
extern SLBgplsTopoSrv6BgpPeerNodeSidDefaultTypeInternal _SLBgplsTopoSrv6BgpPeerNodeSid_default_instance_;
class SLBgplsTopoSrv6BindingSid;
struct SLBgplsTopoSrv6BindingSidDefaultTypeInternal;
extern SLBgplsTopoSrv6BindingSidDefaultTypeInternal _SLBgplsTopoSrv6BindingSid_default_instance_;
class SLBgplsTopoSrv6CapFlags;
struct SLBgplsTopoSrv6CapFlagsDefaultTypeInternal;
extern SLBgplsTopoSrv6CapFlagsDefaultTypeInternal _SLBgplsTopoSrv6CapFlags_default_instance_;
class SLBgplsTopoSrv6EndPointBehavior;
struct SLBgplsTopoSrv6EndPointBehaviorDefaultTypeInternal;
extern SLBgplsTopoSrv6EndPointBehaviorDefaultTypeInternal _SLBgplsTopoSrv6EndPointBehavior_default_instance_;
class SLBgplsTopoSrv6EndXSid;
struct SLBgplsTopoSrv6EndXSidDefaultTypeInternal;
extern SLBgplsTopoSrv6EndXSidDefaultTypeInternal _SLBgplsTopoSrv6EndXSid_default_instance_;
class SLBgplsTopoSrv6LanEndXSid;
struct SLBgplsTopoSrv6LanEndXSidDefaultTypeInternal;
extern SLBgplsTopoSrv6LanEndXSidDefaultTypeInternal _SLBgplsTopoSrv6LanEndXSid_default_instance_;
class SLBgplsTopoSrv6Sid;
struct SLBgplsTopoSrv6SidDefaultTypeInternal;
extern SLBgplsTopoSrv6SidDefaultTypeInternal _SLBgplsTopoSrv6Sid_default_instance_;
class SLBgplsTopoSrv6SidAttr;
struct SLBgplsTopoSrv6SidAttrDefaultTypeInternal;
extern SLBgplsTopoSrv6SidAttrDefaultTypeInternal _SLBgplsTopoSrv6SidAttr_default_instance_;
class SLBgplsTopoSrv6SidData;
struct SLBgplsTopoSrv6SidDataDefaultTypeInternal;
extern SLBgplsTopoSrv6SidDataDefaultTypeInternal _SLBgplsTopoSrv6SidData_default_instance_;
class SLBgplsTopoSrv6SidDescr;
struct SLBgplsTopoSrv6SidDescrDefaultTypeInternal;
extern SLBgplsTopoSrv6SidDescrDefaultTypeInternal _SLBgplsTopoSrv6SidDescr_default_instance_;
class SLBgplsTopoSrv6SidStruct;
struct SLBgplsTopoSrv6SidStructDefaultTypeInternal;
extern SLBgplsTopoSrv6SidStructDefaultTypeInternal _SLBgplsTopoSrv6SidStruct_default_instance_;
class SLBgplsTopoStartMarker;
struct SLBgplsTopoStartMarkerDefaultTypeInternal;
extern SLBgplsTopoStartMarkerDefaultTypeInternal _SLBgplsTopoStartMarker_default_instance_;
class SLBgplsTopoUniAvailBandwidth;
struct SLBgplsTopoUniAvailBandwidthDefaultTypeInternal;
extern SLBgplsTopoUniAvailBandwidthDefaultTypeInternal _SLBgplsTopoUniAvailBandwidth_default_instance_;
class SLBgplsTopoUniDelayVar;
struct SLBgplsTopoUniDelayVarDefaultTypeInternal;
extern SLBgplsTopoUniDelayVarDefaultTypeInternal _SLBgplsTopoUniDelayVar_default_instance_;
class SLBgplsTopoUniLinkDelay;
struct SLBgplsTopoUniLinkDelayDefaultTypeInternal;
extern SLBgplsTopoUniLinkDelayDefaultTypeInternal _SLBgplsTopoUniLinkDelay_default_instance_;
class SLBgplsTopoUniLinkLoss;
struct SLBgplsTopoUniLinkLossDefaultTypeInternal;
extern SLBgplsTopoUniLinkLossDefaultTypeInternal _SLBgplsTopoUniLinkLoss_default_instance_;
class SLBgplsTopoUniResBandwidth;
struct SLBgplsTopoUniResBandwidthDefaultTypeInternal;
extern SLBgplsTopoUniResBandwidthDefaultTypeInternal _SLBgplsTopoUniResBandwidth_default_instance_;
class SLBgplsTopoUniUtilBandwidth;
struct SLBgplsTopoUniUtilBandwidthDefaultTypeInternal;
extern SLBgplsTopoUniUtilBandwidthDefaultTypeInternal _SLBgplsTopoUniUtilBandwidth_default_instance_;
class SLBgplsTopoUnknownAttr;
struct SLBgplsTopoUnknownAttrDefaultTypeInternal;
extern SLBgplsTopoUnknownAttrDefaultTypeInternal _SLBgplsTopoUnknownAttr_default_instance_;
class SLBplsTopoLinkLocRemId;
struct SLBplsTopoLinkLocRemIdDefaultTypeInternal;
extern SLBplsTopoLinkLocRemIdDefaultTypeInternal _SLBplsTopoLinkLocRemId_default_instance_;
class SlBgplsTopoSrBsid;
struct SlBgplsTopoSrBsidDefaultTypeInternal;
extern SlBgplsTopoSrBsidDefaultTypeInternal _SlBgplsTopoSrBsid_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLBgpLsTopoNeighborId* Arena::CreateMaybeMessage<::service_layer::SLBgpLsTopoNeighborId>(Arena*);
template<> ::service_layer::SLBgplsNodeName* Arena::CreateMaybeMessage<::service_layer::SLBgplsNodeName>(Arena*);
template<> ::service_layer::SLBgplsSrSegListMetric* Arena::CreateMaybeMessage<::service_layer::SLBgplsSrSegListMetric>(Arena*);
template<> ::service_layer::SLBgplsTopoAdjSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoAdjSid>(Arena*);
template<> ::service_layer::SLBgplsTopoAdminGroup* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoAdminGroup>(Arena*);
template<> ::service_layer::SLBgplsTopoAslaAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoAslaAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoBgpNodeId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoBgpNodeId>(Arena*);
template<> ::service_layer::SLBgplsTopoBgpPeerAdjSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoBgpPeerAdjSid>(Arena*);
template<> ::service_layer::SLBgplsTopoBgpPeerNodeSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoBgpPeerNodeSid>(Arena*);
template<> ::service_layer::SLBgplsTopoBgpPeerSetSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoBgpPeerSetSid>(Arena*);
template<> ::service_layer::SLBgplsTopoData* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoData>(Arena*);
template<> ::service_layer::SLBgplsTopoEndMarker* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoEndMarker>(Arena*);
template<> ::service_layer::SLBgplsTopoEntry* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoEntry>(Arena*);
template<> ::service_layer::SLBgplsTopoExtAdminGroup* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoExtAdminGroup>(Arena*);
template<> ::service_layer::SLBgplsTopoFad* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoFad>(Arena*);
template<> ::service_layer::SLBgplsTopoFadUnsuppTlv* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoFadUnsuppTlv>(Arena*);
template<> ::service_layer::SLBgplsTopoInstanceId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoInstanceId>(Arena*);
template<> ::service_layer::SLBgplsTopoIsisAreaId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoIsisAreaId>(Arena*);
template<> ::service_layer::SLBgplsTopoIsisNodeId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoIsisNodeId>(Arena*);
template<> ::service_layer::SLBgplsTopoL2BundleMemberAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoL2BundleMemberAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoLanAdjSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLanAdjSid>(Arena*);
template<> ::service_layer::SLBgplsTopoLink* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLink>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkData* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkData>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkDescr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkDescr>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkIgpMetric* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkIgpMetric>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkMaxBandwidth* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMaxBandwidth>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMaxResvBandwidth>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkMplsProtoMask* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMplsProtoMask>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkMsd* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMsd>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkName* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkName>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkOpaqueAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkOpaqueAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkProtectionType* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkProtectionType>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkSrlg* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkSrlg>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkTeDefaultMetric* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkTeDefaultMetric>(Arena*);
template<> ::service_layer::SLBgplsTopoLinkUnresvBandwidth* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLinkUnresvBandwidth>(Arena*);
template<> ::service_layer::SLBgplsTopoLocalIpv4RouterId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLocalIpv4RouterId>(Arena*);
template<> ::service_layer::SLBgplsTopoLocalIpv6RouterId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoLocalIpv6RouterId>(Arena*);
template<> ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>(Arena*);
template<> ::service_layer::SLBgplsTopoMtId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoMtId>(Arena*);
template<> ::service_layer::SLBgplsTopoNlriMatch* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNlriMatch>(Arena*);
template<> ::service_layer::SLBgplsTopoNode* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(Arena*);
template<> ::service_layer::SLBgplsTopoNodeAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNodeAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoNodeData* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNodeData>(Arena*);
template<> ::service_layer::SLBgplsTopoNodeFlagBits* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNodeFlagBits>(Arena*);
template<> ::service_layer::SLBgplsTopoNodeMsd* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNodeMsd>(Arena*);
template<> ::service_layer::SLBgplsTopoNodeOpaqueAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNodeOpaqueAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoNotif* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNotif>(Arena*);
template<> ::service_layer::SLBgplsTopoNotifMsg* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNotifMsg>(Arena*);
template<> ::service_layer::SLBgplsTopoNotifReqMsg* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoNotifReqMsg>(Arena*);
template<> ::service_layer::SLBgplsTopoOspfNodeId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoOspfNodeId>(Arena*);
template<> ::service_layer::SLBgplsTopoOspfv3NodeId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoOspfv3NodeId>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefix* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefix>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixAttrFlags* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixAttrFlags>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixData* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixData>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixDescr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixDescr>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixFAPM* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixFAPM>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixIgpExtRouteTag>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixIgpFlags* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixIgpFlags>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixIgpRouteTag* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixIgpRouteTag>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixMetric* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixMetric>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixOpaqueAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixOpaqueAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixOspfFwdAddr>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixRange* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixRange>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixSid>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixSrcRouterId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixSrcRouterId>(Arena*);
template<> ::service_layer::SLBgplsTopoPrefixSrv6Loc* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixSrv6Loc>(Arena*);
template<> ::service_layer::SLBgplsTopoRemoteIpv4RouterId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoRemoteIpv4RouterId>(Arena*);
template<> ::service_layer::SLBgplsTopoRemoteIpv6RouterId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoRemoteIpv6RouterId>(Arena*);
template<> ::service_layer::SLBgplsTopoSrAffinityConstraints* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrAffinityConstraints>(Arena*);
template<> ::service_layer::SLBgplsTopoSrAlgorithm* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrAlgorithm>(Arena*);
template<> ::service_layer::SLBgplsTopoSrBandwidthConstraint* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrBandwidthConstraint>(Arena*);
template<> ::service_layer::SLBgplsTopoSrBidirGroupConstraint* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrBidirGroupConstraint>(Arena*);
template<> ::service_layer::SLBgplsTopoSrBindingSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrBindingSid>(Arena*);
template<> ::service_layer::SLBgplsTopoSrCpConstraints* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpConstraints>(Arena*);
template<> ::service_layer::SLBgplsTopoSrCpName* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpName>(Arena*);
template<> ::service_layer::SLBgplsTopoSrCpSegListBandwidthState* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpSegListBandwidthState>(Arena*);
template<> ::service_layer::SLBgplsTopoSrCpState* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpState>(Arena*);
template<> ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrDisjointGroupConstraint>(Arena*);
template<> ::service_layer::SLBgplsTopoSrMetricConstraint* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrMetricConstraint>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicy* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicy>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicyAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicyData* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyData>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicyDescr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyDescr>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicyFlags* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyFlags>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicyName* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyName>(Arena*);
template<> ::service_layer::SLBgplsTopoSrPolicyNodeId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyNodeId>(Arena*);
template<> ::service_layer::SLBgplsTopoSrSegList* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrSegList>(Arena*);
template<> ::service_layer::SLBgplsTopoSrSegListId* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrSegListId>(Arena*);
template<> ::service_layer::SLBgplsTopoSrSegment* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrSegment>(Arena*);
template<> ::service_layer::SLBgplsTopoSrSegmentDesc* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrSegmentDesc>(Arena*);
template<> ::service_layer::SLBgplsTopoSrSrlgConstraints* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrSrlgConstraints>(Arena*);
template<> ::service_layer::SLBgplsTopoSrgb* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrgb>(Arena*);
template<> ::service_layer::SLBgplsTopoSrgbIsisFlags* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrgbIsisFlags>(Arena*);
template<> ::service_layer::SLBgplsTopoSrlb* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrlb>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6BindingSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6BindingSid>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6CapFlags* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6CapFlags>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6EndPointBehavior* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6EndPointBehavior>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6EndXSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6EndXSid>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6LanEndXSid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6LanEndXSid>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6Sid* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6Sid>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6SidAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidAttr>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6SidData* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidData>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6SidDescr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidDescr>(Arena*);
template<> ::service_layer::SLBgplsTopoSrv6SidStruct* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidStruct>(Arena*);
template<> ::service_layer::SLBgplsTopoStartMarker* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoStartMarker>(Arena*);
template<> ::service_layer::SLBgplsTopoUniAvailBandwidth* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUniAvailBandwidth>(Arena*);
template<> ::service_layer::SLBgplsTopoUniDelayVar* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUniDelayVar>(Arena*);
template<> ::service_layer::SLBgplsTopoUniLinkDelay* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkDelay>(Arena*);
template<> ::service_layer::SLBgplsTopoUniLinkLoss* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkLoss>(Arena*);
template<> ::service_layer::SLBgplsTopoUniResBandwidth* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUniResBandwidth>(Arena*);
template<> ::service_layer::SLBgplsTopoUniUtilBandwidth* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUniUtilBandwidth>(Arena*);
template<> ::service_layer::SLBgplsTopoUnknownAttr* Arena::CreateMaybeMessage<::service_layer::SLBgplsTopoUnknownAttr>(Arena*);
template<> ::service_layer::SLBplsTopoLinkLocRemId* Arena::CreateMaybeMessage<::service_layer::SLBplsTopoLinkLocRemId>(Arena*);
template<> ::service_layer::SlBgplsTopoSrBsid* Arena::CreateMaybeMessage<::service_layer::SlBgplsTopoSrBsid>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLBgplsTopoOperation : int {
  SL_BGPLS_TOPO_OPERATION_RESERVED = 0,
  SL_BGPLS_TOPO_OPERATION_UPDATE = 1,
  SL_BGPLS_TOPO_OPERATION_DELETE = 2,
  SLBgplsTopoOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoOperation_IsValid(int value);
constexpr SLBgplsTopoOperation SLBgplsTopoOperation_MIN = SL_BGPLS_TOPO_OPERATION_RESERVED;
constexpr SLBgplsTopoOperation SLBgplsTopoOperation_MAX = SL_BGPLS_TOPO_OPERATION_DELETE;
constexpr int SLBgplsTopoOperation_ARRAYSIZE = SLBgplsTopoOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOperation_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoOperation_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoOperation>(
    SLBgplsTopoOperation_descriptor(), name, value);
}
enum SLBgplsTopoNlriType : int {
  SL_BGPLS_TOPO_NLRI_TYPE_RESERVED = 0,
  SL_BGPLS_TOPO_NLRI_TYPE_NODE = 1,
  SL_BGPLS_TOPO_NLRI_TYPE_LINK = 2,
  SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX = 3,
  SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX = 4,
  SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH = 5,
  SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID = 6,
  SLBgplsTopoNlriType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoNlriType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoNlriType_IsValid(int value);
constexpr SLBgplsTopoNlriType SLBgplsTopoNlriType_MIN = SL_BGPLS_TOPO_NLRI_TYPE_RESERVED;
constexpr SLBgplsTopoNlriType SLBgplsTopoNlriType_MAX = SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID;
constexpr int SLBgplsTopoNlriType_ARRAYSIZE = SLBgplsTopoNlriType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoNlriType_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoNlriType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoNlriType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoNlriType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoNlriType_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoNlriType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoNlriType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoNlriType>(
    SLBgplsTopoNlriType_descriptor(), name, value);
}
enum SLBgplsTopoProtocol : int {
  SL_BGPLS_TOPO_PROTOCOL_RESERVED = 0,
  SL_BGPLS_TOPO_PROTOCOL_ISIS_L1 = 1,
  SL_BGPLS_TOPO_PROTOCOL_ISIS_L2 = 2,
  SL_BGPLS_TOPO_PROTOCOL_OSPFv2 = 3,
  SL_BGPLS_TOPO_PROTOCOL_DIRECT = 4,
  SL_BGPLS_TOPO_PROTOCOL_STATIC = 5,
  SL_BGPLS_TOPO_PROTOCOL_OSPFv3 = 6,
  SL_BGPLS_TOPO_PROTOCOL_BGP = 7,
  SL_BGPLS_TOPO_PROTOCOL_RSVP_TE = 8,
  SL_BGPLS_TOPO_PROTOCOL_SR = 9,
  SLBgplsTopoProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoProtocol_IsValid(int value);
constexpr SLBgplsTopoProtocol SLBgplsTopoProtocol_MIN = SL_BGPLS_TOPO_PROTOCOL_RESERVED;
constexpr SLBgplsTopoProtocol SLBgplsTopoProtocol_MAX = SL_BGPLS_TOPO_PROTOCOL_SR;
constexpr int SLBgplsTopoProtocol_ARRAYSIZE = SLBgplsTopoProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoProtocol_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoProtocol_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoProtocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoProtocol>(
    SLBgplsTopoProtocol_descriptor(), name, value);
}
enum SLBgplsTopoOspfRouteType : int {
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED = 0,
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA = 1,
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA = 2,
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1 = 3,
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2 = 4,
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1 = 5,
  SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2 = 6,
  SLBgplsTopoOspfRouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoOspfRouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoOspfRouteType_IsValid(int value);
constexpr SLBgplsTopoOspfRouteType SLBgplsTopoOspfRouteType_MIN = SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED;
constexpr SLBgplsTopoOspfRouteType SLBgplsTopoOspfRouteType_MAX = SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2;
constexpr int SLBgplsTopoOspfRouteType_ARRAYSIZE = SLBgplsTopoOspfRouteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOspfRouteType_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoOspfRouteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoOspfRouteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoOspfRouteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoOspfRouteType_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoOspfRouteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoOspfRouteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoOspfRouteType>(
    SLBgplsTopoOspfRouteType_descriptor(), name, value);
}
enum SLBgplsTopoSrPolicyProtocolOrigin : int {
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED = 0,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP = 1,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY = 2,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG = 3,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE = 10,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE = 20,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE = 30,
  SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC = 40,
  SLBgplsTopoSrPolicyProtocolOrigin_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoSrPolicyProtocolOrigin_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoSrPolicyProtocolOrigin_IsValid(int value);
constexpr SLBgplsTopoSrPolicyProtocolOrigin SLBgplsTopoSrPolicyProtocolOrigin_MIN = SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED;
constexpr SLBgplsTopoSrPolicyProtocolOrigin SLBgplsTopoSrPolicyProtocolOrigin_MAX = SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC;
constexpr int SLBgplsTopoSrPolicyProtocolOrigin_ARRAYSIZE = SLBgplsTopoSrPolicyProtocolOrigin_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSrPolicyProtocolOrigin_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoSrPolicyProtocolOrigin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoSrPolicyProtocolOrigin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoSrPolicyProtocolOrigin_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoSrPolicyProtocolOrigin_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoSrPolicyProtocolOrigin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoSrPolicyProtocolOrigin* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoSrPolicyProtocolOrigin>(
    SLBgplsTopoSrPolicyProtocolOrigin_descriptor(), name, value);
}
enum SLBgplsTopoSidFormat : int {
  SL_BGPLS_TOPO_SID_FORMAT_RESERVED = 0,
  SL_BGPLS_TOPO_SID_FORMAT_LABEL = 1,
  SL_BGPLS_TOPO_SID_FORMAT_INDEX = 2,
  SL_BGPLS_TOPO_SID_FORMAT_V6_ADDR = 3,
  SLBgplsTopoSidFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoSidFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoSidFormat_IsValid(int value);
constexpr SLBgplsTopoSidFormat SLBgplsTopoSidFormat_MIN = SL_BGPLS_TOPO_SID_FORMAT_RESERVED;
constexpr SLBgplsTopoSidFormat SLBgplsTopoSidFormat_MAX = SL_BGPLS_TOPO_SID_FORMAT_V6_ADDR;
constexpr int SLBgplsTopoSidFormat_ARRAYSIZE = SLBgplsTopoSidFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSidFormat_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoSidFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoSidFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoSidFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoSidFormat_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoSidFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoSidFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoSidFormat>(
    SLBgplsTopoSidFormat_descriptor(), name, value);
}
enum SLBgplsTopoPrefixSidFormat : int {
  SL_BGPLS_TOPO_PREFIX_SID_FORMAT_RESERVED = 0,
  SL_BGPLS_TOPO_PREFIX_SID_FORMAT_LABEL = 1,
  SL_BGPLS_TOPO_PREFIX_SID_FORMAT_INDEX = 2,
  SLBgplsTopoPrefixSidFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoPrefixSidFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoPrefixSidFormat_IsValid(int value);
constexpr SLBgplsTopoPrefixSidFormat SLBgplsTopoPrefixSidFormat_MIN = SL_BGPLS_TOPO_PREFIX_SID_FORMAT_RESERVED;
constexpr SLBgplsTopoPrefixSidFormat SLBgplsTopoPrefixSidFormat_MAX = SL_BGPLS_TOPO_PREFIX_SID_FORMAT_INDEX;
constexpr int SLBgplsTopoPrefixSidFormat_ARRAYSIZE = SLBgplsTopoPrefixSidFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoPrefixSidFormat_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoPrefixSidFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoPrefixSidFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoPrefixSidFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoPrefixSidFormat_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoPrefixSidFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoPrefixSidFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoPrefixSidFormat>(
    SLBgplsTopoPrefixSidFormat_descriptor(), name, value);
}
enum SLBgplsTopoSrSegmentType : int {
  SL_BGPLS_TOPO_SR_SEG_TYPE_RESERVED = 0,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_LABEL = 1,
  SL_BGPLS_TOPO_SR_SEG_TYPE_SRV6_SID_V6 = 2,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_PFX_SID_V4 = 3,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_PFX_SID_V6 = 4,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID = 5,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR = 6,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID = 7,
  SL_BGPLS_TOPO_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR = 8,
  SL_BGPLS_TOPO_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR = 9,
  SL_BGPLS_TOPO_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID = 10,
  SL_BGPLS_TOPO_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR = 11,
  SLBgplsTopoSrSegmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLBgplsTopoSrSegmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLBgplsTopoSrSegmentType_IsValid(int value);
constexpr SLBgplsTopoSrSegmentType SLBgplsTopoSrSegmentType_MIN = SL_BGPLS_TOPO_SR_SEG_TYPE_RESERVED;
constexpr SLBgplsTopoSrSegmentType SLBgplsTopoSrSegmentType_MAX = SL_BGPLS_TOPO_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR;
constexpr int SLBgplsTopoSrSegmentType_ARRAYSIZE = SLBgplsTopoSrSegmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSrSegmentType_descriptor();
template<typename T>
inline const std::string& SLBgplsTopoSrSegmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLBgplsTopoSrSegmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLBgplsTopoSrSegmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLBgplsTopoSrSegmentType_descriptor(), enum_t_value);
}
inline bool SLBgplsTopoSrSegmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLBgplsTopoSrSegmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLBgplsTopoSrSegmentType>(
    SLBgplsTopoSrSegmentType_descriptor(), name, value);
}
// ===================================================================

class SLBgplsTopoNotifReqMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNotifReqMsg) */ {
 public:
  inline SLBgplsTopoNotifReqMsg() : SLBgplsTopoNotifReqMsg(nullptr) {}
  ~SLBgplsTopoNotifReqMsg() override;
  explicit constexpr SLBgplsTopoNotifReqMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNotifReqMsg(const SLBgplsTopoNotifReqMsg& from);
  SLBgplsTopoNotifReqMsg(SLBgplsTopoNotifReqMsg&& from) noexcept
    : SLBgplsTopoNotifReqMsg() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNotifReqMsg& operator=(const SLBgplsTopoNotifReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNotifReqMsg& operator=(SLBgplsTopoNotifReqMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNotifReqMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNotifReqMsg* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNotifReqMsg*>(
               &_SLBgplsTopoNotifReqMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLBgplsTopoNotifReqMsg& a, SLBgplsTopoNotifReqMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNotifReqMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNotifReqMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNotifReqMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNotifReqMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNotifReqMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNotifReqMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNotifReqMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNotifReqMsg";
  }
  protected:
  explicit SLBgplsTopoNotifReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
  };
  // repeated .service_layer.SLBgplsTopoNlriMatch Match = 1;
  int match_size() const;
  private:
  int _internal_match_size() const;
  public:
  void clear_match();
  ::service_layer::SLBgplsTopoNlriMatch* mutable_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNlriMatch >*
      mutable_match();
  private:
  const ::service_layer::SLBgplsTopoNlriMatch& _internal_match(int index) const;
  ::service_layer::SLBgplsTopoNlriMatch* _internal_add_match();
  public:
  const ::service_layer::SLBgplsTopoNlriMatch& match(int index) const;
  ::service_layer::SLBgplsTopoNlriMatch* add_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNlriMatch >&
      match() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNotifReqMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNlriMatch > match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNlriMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNlriMatch) */ {
 public:
  inline SLBgplsTopoNlriMatch() : SLBgplsTopoNlriMatch(nullptr) {}
  ~SLBgplsTopoNlriMatch() override;
  explicit constexpr SLBgplsTopoNlriMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNlriMatch(const SLBgplsTopoNlriMatch& from);
  SLBgplsTopoNlriMatch(SLBgplsTopoNlriMatch&& from) noexcept
    : SLBgplsTopoNlriMatch() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNlriMatch& operator=(const SLBgplsTopoNlriMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNlriMatch& operator=(SLBgplsTopoNlriMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNlriMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNlriMatch* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNlriMatch*>(
               &_SLBgplsTopoNlriMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLBgplsTopoNlriMatch& a, SLBgplsTopoNlriMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNlriMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNlriMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNlriMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNlriMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNlriMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNlriMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNlriMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNlriMatch";
  }
  protected:
  explicit SLBgplsTopoNlriMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kNlriTypeFieldNumber = 3,
  };
  // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  const ::service_layer::SLBgplsTopoInstanceId& instanceid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoInstanceId* release_instanceid();
  ::service_layer::SLBgplsTopoInstanceId* mutable_instanceid();
  void set_allocated_instanceid(::service_layer::SLBgplsTopoInstanceId* instanceid);
  private:
  const ::service_layer::SLBgplsTopoInstanceId& _internal_instanceid() const;
  ::service_layer::SLBgplsTopoInstanceId* _internal_mutable_instanceid();
  public:
  void unsafe_arena_set_allocated_instanceid(
      ::service_layer::SLBgplsTopoInstanceId* instanceid);
  ::service_layer::SLBgplsTopoInstanceId* unsafe_arena_release_instanceid();

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  void clear_protocol();
  ::service_layer::SLBgplsTopoProtocol protocol() const;
  void set_protocol(::service_layer::SLBgplsTopoProtocol value);
  private:
  ::service_layer::SLBgplsTopoProtocol _internal_protocol() const;
  void _internal_set_protocol(::service_layer::SLBgplsTopoProtocol value);
  public:

  // .service_layer.SLBgplsTopoNlriType NlriType = 3;
  void clear_nlritype();
  ::service_layer::SLBgplsTopoNlriType nlritype() const;
  void set_nlritype(::service_layer::SLBgplsTopoNlriType value);
  private:
  ::service_layer::SLBgplsTopoNlriType _internal_nlritype() const;
  void _internal_set_nlritype(::service_layer::SLBgplsTopoNlriType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNlriMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoInstanceId* instanceid_;
  int protocol_;
  int nlritype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNotifMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNotifMsg) */ {
 public:
  inline SLBgplsTopoNotifMsg() : SLBgplsTopoNotifMsg(nullptr) {}
  ~SLBgplsTopoNotifMsg() override;
  explicit constexpr SLBgplsTopoNotifMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNotifMsg(const SLBgplsTopoNotifMsg& from);
  SLBgplsTopoNotifMsg(SLBgplsTopoNotifMsg&& from) noexcept
    : SLBgplsTopoNotifMsg() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNotifMsg& operator=(const SLBgplsTopoNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNotifMsg& operator=(SLBgplsTopoNotifMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNotifMsg& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kErrStatus = 1,
    kData = 2,
    kStart = 3,
    kEnd = 4,
    EVENT_NOT_SET = 0,
  };

  static inline const SLBgplsTopoNotifMsg* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNotifMsg*>(
               &_SLBgplsTopoNotifMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLBgplsTopoNotifMsg& a, SLBgplsTopoNotifMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNotifMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNotifMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNotifMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNotifMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNotifMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNotifMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNotifMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNotifMsg";
  }
  protected:
  explicit SLBgplsTopoNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kDataFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLBgplsTopoNotif Data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::service_layer::SLBgplsTopoNotif& data() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNotif* release_data();
  ::service_layer::SLBgplsTopoNotif* mutable_data();
  void set_allocated_data(::service_layer::SLBgplsTopoNotif* data);
  private:
  const ::service_layer::SLBgplsTopoNotif& _internal_data() const;
  ::service_layer::SLBgplsTopoNotif* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::service_layer::SLBgplsTopoNotif* data);
  ::service_layer::SLBgplsTopoNotif* unsafe_arena_release_data();

  // .service_layer.SLBgplsTopoStartMarker Start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::service_layer::SLBgplsTopoStartMarker& start() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoStartMarker* release_start();
  ::service_layer::SLBgplsTopoStartMarker* mutable_start();
  void set_allocated_start(::service_layer::SLBgplsTopoStartMarker* start);
  private:
  const ::service_layer::SLBgplsTopoStartMarker& _internal_start() const;
  ::service_layer::SLBgplsTopoStartMarker* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::service_layer::SLBgplsTopoStartMarker* start);
  ::service_layer::SLBgplsTopoStartMarker* unsafe_arena_release_start();

  // .service_layer.SLBgplsTopoEndMarker End = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::service_layer::SLBgplsTopoEndMarker& end() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoEndMarker* release_end();
  ::service_layer::SLBgplsTopoEndMarker* mutable_end();
  void set_allocated_end(::service_layer::SLBgplsTopoEndMarker* end);
  private:
  const ::service_layer::SLBgplsTopoEndMarker& _internal_end() const;
  ::service_layer::SLBgplsTopoEndMarker* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::service_layer::SLBgplsTopoEndMarker* end);
  ::service_layer::SLBgplsTopoEndMarker* unsafe_arena_release_end();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNotifMsg)
 private:
  class _Internal;
  void set_has_errstatus();
  void set_has_data();
  void set_has_start();
  void set_has_end();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLBgplsTopoNotif* data_;
    ::service_layer::SLBgplsTopoStartMarker* start_;
    ::service_layer::SLBgplsTopoEndMarker* end_;
  } Event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoStartMarker final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoStartMarker) */ {
 public:
  inline SLBgplsTopoStartMarker() : SLBgplsTopoStartMarker(nullptr) {}
  explicit constexpr SLBgplsTopoStartMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoStartMarker(const SLBgplsTopoStartMarker& from);
  SLBgplsTopoStartMarker(SLBgplsTopoStartMarker&& from) noexcept
    : SLBgplsTopoStartMarker() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoStartMarker& operator=(const SLBgplsTopoStartMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoStartMarker& operator=(SLBgplsTopoStartMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoStartMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoStartMarker* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoStartMarker*>(
               &_SLBgplsTopoStartMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLBgplsTopoStartMarker& a, SLBgplsTopoStartMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoStartMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoStartMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoStartMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoStartMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLBgplsTopoStartMarker& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLBgplsTopoStartMarker& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoStartMarker";
  }
  protected:
  explicit SLBgplsTopoStartMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoStartMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoEndMarker final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoEndMarker) */ {
 public:
  inline SLBgplsTopoEndMarker() : SLBgplsTopoEndMarker(nullptr) {}
  explicit constexpr SLBgplsTopoEndMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoEndMarker(const SLBgplsTopoEndMarker& from);
  SLBgplsTopoEndMarker(SLBgplsTopoEndMarker&& from) noexcept
    : SLBgplsTopoEndMarker() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoEndMarker& operator=(const SLBgplsTopoEndMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoEndMarker& operator=(SLBgplsTopoEndMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoEndMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoEndMarker* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoEndMarker*>(
               &_SLBgplsTopoEndMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLBgplsTopoEndMarker& a, SLBgplsTopoEndMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoEndMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoEndMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoEndMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoEndMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLBgplsTopoEndMarker& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLBgplsTopoEndMarker& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoEndMarker";
  }
  protected:
  explicit SLBgplsTopoEndMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoEndMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNotif final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNotif) */ {
 public:
  inline SLBgplsTopoNotif() : SLBgplsTopoNotif(nullptr) {}
  ~SLBgplsTopoNotif() override;
  explicit constexpr SLBgplsTopoNotif(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNotif(const SLBgplsTopoNotif& from);
  SLBgplsTopoNotif(SLBgplsTopoNotif&& from) noexcept
    : SLBgplsTopoNotif() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNotif& operator=(const SLBgplsTopoNotif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNotif& operator=(SLBgplsTopoNotif&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNotif& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNotif* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNotif*>(
               &_SLBgplsTopoNotif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLBgplsTopoNotif& a, SLBgplsTopoNotif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNotif* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNotif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNotif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNotif>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNotif& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNotif& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNotif* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNotif";
  }
  protected:
  explicit SLBgplsTopoNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .service_layer.SLBgplsTopoEntry Entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLBgplsTopoEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoEntry >*
      mutable_entries();
  private:
  const ::service_layer::SLBgplsTopoEntry& _internal_entries(int index) const;
  ::service_layer::SLBgplsTopoEntry* _internal_add_entries();
  public:
  const ::service_layer::SLBgplsTopoEntry& entries(int index) const;
  ::service_layer::SLBgplsTopoEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNotif)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoEntry) */ {
 public:
  inline SLBgplsTopoEntry() : SLBgplsTopoEntry(nullptr) {}
  ~SLBgplsTopoEntry() override;
  explicit constexpr SLBgplsTopoEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoEntry(const SLBgplsTopoEntry& from);
  SLBgplsTopoEntry(SLBgplsTopoEntry&& from) noexcept
    : SLBgplsTopoEntry() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoEntry& operator=(const SLBgplsTopoEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoEntry& operator=(SLBgplsTopoEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoEntry* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoEntry*>(
               &_SLBgplsTopoEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLBgplsTopoEntry& a, SLBgplsTopoEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoEntry";
  }
  protected:
  explicit SLBgplsTopoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // .service_layer.SLBgplsTopoData Data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::service_layer::SLBgplsTopoData& data() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoData* release_data();
  ::service_layer::SLBgplsTopoData* mutable_data();
  void set_allocated_data(::service_layer::SLBgplsTopoData* data);
  private:
  const ::service_layer::SLBgplsTopoData& _internal_data() const;
  ::service_layer::SLBgplsTopoData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::service_layer::SLBgplsTopoData* data);
  ::service_layer::SLBgplsTopoData* unsafe_arena_release_data();

  // .service_layer.SLBgplsTopoOperation Operation = 1;
  void clear_operation();
  ::service_layer::SLBgplsTopoOperation operation() const;
  void set_operation(::service_layer::SLBgplsTopoOperation value);
  private:
  ::service_layer::SLBgplsTopoOperation _internal_operation() const;
  void _internal_set_operation(::service_layer::SLBgplsTopoOperation value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoData* data_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoData) */ {
 public:
  inline SLBgplsTopoData() : SLBgplsTopoData(nullptr) {}
  ~SLBgplsTopoData() override;
  explicit constexpr SLBgplsTopoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoData(const SLBgplsTopoData& from);
  SLBgplsTopoData(SLBgplsTopoData&& from) noexcept
    : SLBgplsTopoData() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoData& operator=(const SLBgplsTopoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoData& operator=(SLBgplsTopoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoData& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kNode = 3,
    kLink = 4,
    kPrefix = 5,
    kSrv6Sid = 6,
    kSrPolicy = 7,
    DATA_NOT_SET = 0,
  };

  static inline const SLBgplsTopoData* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoData*>(
               &_SLBgplsTopoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLBgplsTopoData& a, SLBgplsTopoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoData";
  }
  protected:
  explicit SLBgplsTopoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kNodeFieldNumber = 3,
    kLinkFieldNumber = 4,
    kPrefixFieldNumber = 5,
    kSrv6SidFieldNumber = 6,
    kSrPolicyFieldNumber = 7,
  };
  // .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  const ::service_layer::SLBgplsTopoInstanceId& instanceid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoInstanceId* release_instanceid();
  ::service_layer::SLBgplsTopoInstanceId* mutable_instanceid();
  void set_allocated_instanceid(::service_layer::SLBgplsTopoInstanceId* instanceid);
  private:
  const ::service_layer::SLBgplsTopoInstanceId& _internal_instanceid() const;
  ::service_layer::SLBgplsTopoInstanceId* _internal_mutable_instanceid();
  public:
  void unsafe_arena_set_allocated_instanceid(
      ::service_layer::SLBgplsTopoInstanceId* instanceid);
  ::service_layer::SLBgplsTopoInstanceId* unsafe_arena_release_instanceid();

  // .service_layer.SLBgplsTopoProtocol Protocol = 2;
  void clear_protocol();
  ::service_layer::SLBgplsTopoProtocol protocol() const;
  void set_protocol(::service_layer::SLBgplsTopoProtocol value);
  private:
  ::service_layer::SLBgplsTopoProtocol _internal_protocol() const;
  void _internal_set_protocol(::service_layer::SLBgplsTopoProtocol value);
  public:

  // .service_layer.SLBgplsTopoNodeData Node = 3;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::service_layer::SLBgplsTopoNodeData& node() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNodeData* release_node();
  ::service_layer::SLBgplsTopoNodeData* mutable_node();
  void set_allocated_node(::service_layer::SLBgplsTopoNodeData* node);
  private:
  const ::service_layer::SLBgplsTopoNodeData& _internal_node() const;
  ::service_layer::SLBgplsTopoNodeData* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::service_layer::SLBgplsTopoNodeData* node);
  ::service_layer::SLBgplsTopoNodeData* unsafe_arena_release_node();

  // .service_layer.SLBgplsTopoLinkData Link = 4;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::service_layer::SLBgplsTopoLinkData& link() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkData* release_link();
  ::service_layer::SLBgplsTopoLinkData* mutable_link();
  void set_allocated_link(::service_layer::SLBgplsTopoLinkData* link);
  private:
  const ::service_layer::SLBgplsTopoLinkData& _internal_link() const;
  ::service_layer::SLBgplsTopoLinkData* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::service_layer::SLBgplsTopoLinkData* link);
  ::service_layer::SLBgplsTopoLinkData* unsafe_arena_release_link();

  // .service_layer.SLBgplsTopoPrefixData Prefix = 5;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::service_layer::SLBgplsTopoPrefixData& prefix() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixData* release_prefix();
  ::service_layer::SLBgplsTopoPrefixData* mutable_prefix();
  void set_allocated_prefix(::service_layer::SLBgplsTopoPrefixData* prefix);
  private:
  const ::service_layer::SLBgplsTopoPrefixData& _internal_prefix() const;
  ::service_layer::SLBgplsTopoPrefixData* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::service_layer::SLBgplsTopoPrefixData* prefix);
  ::service_layer::SLBgplsTopoPrefixData* unsafe_arena_release_prefix();

  // .service_layer.SLBgplsTopoSrv6SidData Srv6Sid = 6;
  bool has_srv6sid() const;
  private:
  bool _internal_has_srv6sid() const;
  public:
  void clear_srv6sid();
  const ::service_layer::SLBgplsTopoSrv6SidData& srv6sid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidData* release_srv6sid();
  ::service_layer::SLBgplsTopoSrv6SidData* mutable_srv6sid();
  void set_allocated_srv6sid(::service_layer::SLBgplsTopoSrv6SidData* srv6sid);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidData& _internal_srv6sid() const;
  ::service_layer::SLBgplsTopoSrv6SidData* _internal_mutable_srv6sid();
  public:
  void unsafe_arena_set_allocated_srv6sid(
      ::service_layer::SLBgplsTopoSrv6SidData* srv6sid);
  ::service_layer::SLBgplsTopoSrv6SidData* unsafe_arena_release_srv6sid();

  // .service_layer.SLBgplsTopoSrPolicyData SrPolicy = 7;
  bool has_srpolicy() const;
  private:
  bool _internal_has_srpolicy() const;
  public:
  void clear_srpolicy();
  const ::service_layer::SLBgplsTopoSrPolicyData& srpolicy() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicyData* release_srpolicy();
  ::service_layer::SLBgplsTopoSrPolicyData* mutable_srpolicy();
  void set_allocated_srpolicy(::service_layer::SLBgplsTopoSrPolicyData* srpolicy);
  private:
  const ::service_layer::SLBgplsTopoSrPolicyData& _internal_srpolicy() const;
  ::service_layer::SLBgplsTopoSrPolicyData* _internal_mutable_srpolicy();
  public:
  void unsafe_arena_set_allocated_srpolicy(
      ::service_layer::SLBgplsTopoSrPolicyData* srpolicy);
  ::service_layer::SLBgplsTopoSrPolicyData* unsafe_arena_release_srpolicy();

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoData)
 private:
  class _Internal;
  void set_has_node();
  void set_has_link();
  void set_has_prefix();
  void set_has_srv6sid();
  void set_has_srpolicy();

  inline bool has_Data() const;
  inline void clear_has_Data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoInstanceId* instanceid_;
  int protocol_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgplsTopoNodeData* node_;
    ::service_layer::SLBgplsTopoLinkData* link_;
    ::service_layer::SLBgplsTopoPrefixData* prefix_;
    ::service_layer::SLBgplsTopoSrv6SidData* srv6sid_;
    ::service_layer::SLBgplsTopoSrPolicyData* srpolicy_;
  } Data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoInstanceId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoInstanceId) */ {
 public:
  inline SLBgplsTopoInstanceId() : SLBgplsTopoInstanceId(nullptr) {}
  ~SLBgplsTopoInstanceId() override;
  explicit constexpr SLBgplsTopoInstanceId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoInstanceId(const SLBgplsTopoInstanceId& from);
  SLBgplsTopoInstanceId(SLBgplsTopoInstanceId&& from) noexcept
    : SLBgplsTopoInstanceId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoInstanceId& operator=(const SLBgplsTopoInstanceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoInstanceId& operator=(SLBgplsTopoInstanceId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoInstanceId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoInstanceId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoInstanceId*>(
               &_SLBgplsTopoInstanceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLBgplsTopoInstanceId& a, SLBgplsTopoInstanceId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoInstanceId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoInstanceId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoInstanceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoInstanceId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoInstanceId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoInstanceId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoInstanceId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoInstanceId";
  }
  protected:
  explicit SLBgplsTopoInstanceId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
  };
  // uint64 Identifier = 1;
  void clear_identifier();
  uint64_t identifier() const;
  void set_identifier(uint64_t value);
  private:
  uint64_t _internal_identifier() const;
  void _internal_set_identifier(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoInstanceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNodeData) */ {
 public:
  inline SLBgplsTopoNodeData() : SLBgplsTopoNodeData(nullptr) {}
  ~SLBgplsTopoNodeData() override;
  explicit constexpr SLBgplsTopoNodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNodeData(const SLBgplsTopoNodeData& from);
  SLBgplsTopoNodeData(SLBgplsTopoNodeData&& from) noexcept
    : SLBgplsTopoNodeData() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNodeData& operator=(const SLBgplsTopoNodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNodeData& operator=(SLBgplsTopoNodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNodeData* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNodeData*>(
               &_SLBgplsTopoNodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLBgplsTopoNodeData& a, SLBgplsTopoNodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNodeData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNodeData";
  }
  protected:
  explicit SLBgplsTopoNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kNodeAttrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoNode Node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::service_layer::SLBgplsTopoNode& node() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNode* release_node();
  ::service_layer::SLBgplsTopoNode* mutable_node();
  void set_allocated_node(::service_layer::SLBgplsTopoNode* node);
  private:
  const ::service_layer::SLBgplsTopoNode& _internal_node() const;
  ::service_layer::SLBgplsTopoNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::service_layer::SLBgplsTopoNode* node);
  ::service_layer::SLBgplsTopoNode* unsafe_arena_release_node();

  // .service_layer.SLBgplsTopoNodeAttr NodeAttr = 2;
  bool has_nodeattr() const;
  private:
  bool _internal_has_nodeattr() const;
  public:
  void clear_nodeattr();
  const ::service_layer::SLBgplsTopoNodeAttr& nodeattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNodeAttr* release_nodeattr();
  ::service_layer::SLBgplsTopoNodeAttr* mutable_nodeattr();
  void set_allocated_nodeattr(::service_layer::SLBgplsTopoNodeAttr* nodeattr);
  private:
  const ::service_layer::SLBgplsTopoNodeAttr& _internal_nodeattr() const;
  ::service_layer::SLBgplsTopoNodeAttr* _internal_mutable_nodeattr();
  public:
  void unsafe_arena_set_allocated_nodeattr(
      ::service_layer::SLBgplsTopoNodeAttr* nodeattr);
  ::service_layer::SLBgplsTopoNodeAttr* unsafe_arena_release_nodeattr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoNode* node_;
  ::service_layer::SLBgplsTopoNodeAttr* nodeattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkData) */ {
 public:
  inline SLBgplsTopoLinkData() : SLBgplsTopoLinkData(nullptr) {}
  ~SLBgplsTopoLinkData() override;
  explicit constexpr SLBgplsTopoLinkData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkData(const SLBgplsTopoLinkData& from);
  SLBgplsTopoLinkData(SLBgplsTopoLinkData&& from) noexcept
    : SLBgplsTopoLinkData() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkData& operator=(const SLBgplsTopoLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkData& operator=(SLBgplsTopoLinkData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkData* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkData*>(
               &_SLBgplsTopoLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLBgplsTopoLinkData& a, SLBgplsTopoLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkData";
  }
  protected:
  explicit SLBgplsTopoLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kLinkAttrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoLink Link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::service_layer::SLBgplsTopoLink& link() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLink* release_link();
  ::service_layer::SLBgplsTopoLink* mutable_link();
  void set_allocated_link(::service_layer::SLBgplsTopoLink* link);
  private:
  const ::service_layer::SLBgplsTopoLink& _internal_link() const;
  ::service_layer::SLBgplsTopoLink* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::service_layer::SLBgplsTopoLink* link);
  ::service_layer::SLBgplsTopoLink* unsafe_arena_release_link();

  // .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
  bool has_linkattr() const;
  private:
  bool _internal_has_linkattr() const;
  public:
  void clear_linkattr();
  const ::service_layer::SLBgplsTopoLinkAttr& linkattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkAttr* release_linkattr();
  ::service_layer::SLBgplsTopoLinkAttr* mutable_linkattr();
  void set_allocated_linkattr(::service_layer::SLBgplsTopoLinkAttr* linkattr);
  private:
  const ::service_layer::SLBgplsTopoLinkAttr& _internal_linkattr() const;
  ::service_layer::SLBgplsTopoLinkAttr* _internal_mutable_linkattr();
  public:
  void unsafe_arena_set_allocated_linkattr(
      ::service_layer::SLBgplsTopoLinkAttr* linkattr);
  ::service_layer::SLBgplsTopoLinkAttr* unsafe_arena_release_linkattr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoLink* link_;
  ::service_layer::SLBgplsTopoLinkAttr* linkattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixData) */ {
 public:
  inline SLBgplsTopoPrefixData() : SLBgplsTopoPrefixData(nullptr) {}
  ~SLBgplsTopoPrefixData() override;
  explicit constexpr SLBgplsTopoPrefixData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixData(const SLBgplsTopoPrefixData& from);
  SLBgplsTopoPrefixData(SLBgplsTopoPrefixData&& from) noexcept
    : SLBgplsTopoPrefixData() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixData& operator=(const SLBgplsTopoPrefixData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixData& operator=(SLBgplsTopoPrefixData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixData* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixData*>(
               &_SLBgplsTopoPrefixData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SLBgplsTopoPrefixData& a, SLBgplsTopoPrefixData& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixData";
  }
  protected:
  explicit SLBgplsTopoPrefixData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kPrefixAttrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoPrefix Prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::service_layer::SLBgplsTopoPrefix& prefix() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefix* release_prefix();
  ::service_layer::SLBgplsTopoPrefix* mutable_prefix();
  void set_allocated_prefix(::service_layer::SLBgplsTopoPrefix* prefix);
  private:
  const ::service_layer::SLBgplsTopoPrefix& _internal_prefix() const;
  ::service_layer::SLBgplsTopoPrefix* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::service_layer::SLBgplsTopoPrefix* prefix);
  ::service_layer::SLBgplsTopoPrefix* unsafe_arena_release_prefix();

  // .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 2;
  bool has_prefixattr() const;
  private:
  bool _internal_has_prefixattr() const;
  public:
  void clear_prefixattr();
  const ::service_layer::SLBgplsTopoPrefixAttr& prefixattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixAttr* release_prefixattr();
  ::service_layer::SLBgplsTopoPrefixAttr* mutable_prefixattr();
  void set_allocated_prefixattr(::service_layer::SLBgplsTopoPrefixAttr* prefixattr);
  private:
  const ::service_layer::SLBgplsTopoPrefixAttr& _internal_prefixattr() const;
  ::service_layer::SLBgplsTopoPrefixAttr* _internal_mutable_prefixattr();
  public:
  void unsafe_arena_set_allocated_prefixattr(
      ::service_layer::SLBgplsTopoPrefixAttr* prefixattr);
  ::service_layer::SLBgplsTopoPrefixAttr* unsafe_arena_release_prefixattr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoPrefix* prefix_;
  ::service_layer::SLBgplsTopoPrefixAttr* prefixattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6SidData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6SidData) */ {
 public:
  inline SLBgplsTopoSrv6SidData() : SLBgplsTopoSrv6SidData(nullptr) {}
  ~SLBgplsTopoSrv6SidData() override;
  explicit constexpr SLBgplsTopoSrv6SidData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6SidData(const SLBgplsTopoSrv6SidData& from);
  SLBgplsTopoSrv6SidData(SLBgplsTopoSrv6SidData&& from) noexcept
    : SLBgplsTopoSrv6SidData() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6SidData& operator=(const SLBgplsTopoSrv6SidData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6SidData& operator=(SLBgplsTopoSrv6SidData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6SidData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6SidData* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6SidData*>(
               &_SLBgplsTopoSrv6SidData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SLBgplsTopoSrv6SidData& a, SLBgplsTopoSrv6SidData& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6SidData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6SidData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6SidData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6SidData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6SidData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6SidData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6SidData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6SidData";
  }
  protected:
  explicit SLBgplsTopoSrv6SidData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrv6SidFieldNumber = 1,
    kSrv6SidAttrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoSrv6Sid Srv6Sid = 1;
  bool has_srv6sid() const;
  private:
  bool _internal_has_srv6sid() const;
  public:
  void clear_srv6sid();
  const ::service_layer::SLBgplsTopoSrv6Sid& srv6sid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6Sid* release_srv6sid();
  ::service_layer::SLBgplsTopoSrv6Sid* mutable_srv6sid();
  void set_allocated_srv6sid(::service_layer::SLBgplsTopoSrv6Sid* srv6sid);
  private:
  const ::service_layer::SLBgplsTopoSrv6Sid& _internal_srv6sid() const;
  ::service_layer::SLBgplsTopoSrv6Sid* _internal_mutable_srv6sid();
  public:
  void unsafe_arena_set_allocated_srv6sid(
      ::service_layer::SLBgplsTopoSrv6Sid* srv6sid);
  ::service_layer::SLBgplsTopoSrv6Sid* unsafe_arena_release_srv6sid();

  // .service_layer.SLBgplsTopoSrv6SidAttr Srv6SidAttr = 2;
  bool has_srv6sidattr() const;
  private:
  bool _internal_has_srv6sidattr() const;
  public:
  void clear_srv6sidattr();
  const ::service_layer::SLBgplsTopoSrv6SidAttr& srv6sidattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidAttr* release_srv6sidattr();
  ::service_layer::SLBgplsTopoSrv6SidAttr* mutable_srv6sidattr();
  void set_allocated_srv6sidattr(::service_layer::SLBgplsTopoSrv6SidAttr* srv6sidattr);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidAttr& _internal_srv6sidattr() const;
  ::service_layer::SLBgplsTopoSrv6SidAttr* _internal_mutable_srv6sidattr();
  public:
  void unsafe_arena_set_allocated_srv6sidattr(
      ::service_layer::SLBgplsTopoSrv6SidAttr* srv6sidattr);
  ::service_layer::SLBgplsTopoSrv6SidAttr* unsafe_arena_release_srv6sidattr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6SidData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoSrv6Sid* srv6sid_;
  ::service_layer::SLBgplsTopoSrv6SidAttr* srv6sidattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicyData) */ {
 public:
  inline SLBgplsTopoSrPolicyData() : SLBgplsTopoSrPolicyData(nullptr) {}
  ~SLBgplsTopoSrPolicyData() override;
  explicit constexpr SLBgplsTopoSrPolicyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicyData(const SLBgplsTopoSrPolicyData& from);
  SLBgplsTopoSrPolicyData(SLBgplsTopoSrPolicyData&& from) noexcept
    : SLBgplsTopoSrPolicyData() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicyData& operator=(const SLBgplsTopoSrPolicyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicyData& operator=(SLBgplsTopoSrPolicyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrPolicyData* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicyData*>(
               &_SLBgplsTopoSrPolicyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SLBgplsTopoSrPolicyData& a, SLBgplsTopoSrPolicyData& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicyData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicyData";
  }
  protected:
  explicit SLBgplsTopoSrPolicyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrPolicyFieldNumber = 1,
    kSrPolicyAttrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoSrPolicy SrPolicy = 1;
  bool has_srpolicy() const;
  private:
  bool _internal_has_srpolicy() const;
  public:
  void clear_srpolicy();
  const ::service_layer::SLBgplsTopoSrPolicy& srpolicy() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicy* release_srpolicy();
  ::service_layer::SLBgplsTopoSrPolicy* mutable_srpolicy();
  void set_allocated_srpolicy(::service_layer::SLBgplsTopoSrPolicy* srpolicy);
  private:
  const ::service_layer::SLBgplsTopoSrPolicy& _internal_srpolicy() const;
  ::service_layer::SLBgplsTopoSrPolicy* _internal_mutable_srpolicy();
  public:
  void unsafe_arena_set_allocated_srpolicy(
      ::service_layer::SLBgplsTopoSrPolicy* srpolicy);
  ::service_layer::SLBgplsTopoSrPolicy* unsafe_arena_release_srpolicy();

  // .service_layer.SLBgplsTopoSrPolicyAttr SrPolicyAttr = 2;
  bool has_srpolicyattr() const;
  private:
  bool _internal_has_srpolicyattr() const;
  public:
  void clear_srpolicyattr();
  const ::service_layer::SLBgplsTopoSrPolicyAttr& srpolicyattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicyAttr* release_srpolicyattr();
  ::service_layer::SLBgplsTopoSrPolicyAttr* mutable_srpolicyattr();
  void set_allocated_srpolicyattr(::service_layer::SLBgplsTopoSrPolicyAttr* srpolicyattr);
  private:
  const ::service_layer::SLBgplsTopoSrPolicyAttr& _internal_srpolicyattr() const;
  ::service_layer::SLBgplsTopoSrPolicyAttr* _internal_mutable_srpolicyattr();
  public:
  void unsafe_arena_set_allocated_srpolicyattr(
      ::service_layer::SLBgplsTopoSrPolicyAttr* srpolicyattr);
  ::service_layer::SLBgplsTopoSrPolicyAttr* unsafe_arena_release_srpolicyattr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoSrPolicy* srpolicy_;
  ::service_layer::SLBgplsTopoSrPolicyAttr* srpolicyattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNode) */ {
 public:
  inline SLBgplsTopoNode() : SLBgplsTopoNode(nullptr) {}
  ~SLBgplsTopoNode() override;
  explicit constexpr SLBgplsTopoNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNode(const SLBgplsTopoNode& from);
  SLBgplsTopoNode(SLBgplsTopoNode&& from) noexcept
    : SLBgplsTopoNode() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNode& operator=(const SLBgplsTopoNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNode& operator=(SLBgplsTopoNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNode& default_instance() {
    return *internal_default_instance();
  }
  enum NodeIdCase {
    kOspfNodeId = 2,
    kOspfv3NodeId = 3,
    kIsisNodeId = 4,
    kBgpNodeId = 5,
    kSrPolicyNodeId = 6,
    NODEID_NOT_SET = 0,
  };

  static inline const SLBgplsTopoNode* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNode*>(
               &_SLBgplsTopoNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SLBgplsTopoNode& a, SLBgplsTopoNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNode";
  }
  protected:
  explicit SLBgplsTopoNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 1,
    kOspfNodeIdFieldNumber = 2,
    kOspfv3NodeIdFieldNumber = 3,
    kIsisNodeIdFieldNumber = 4,
    kBgpNodeIdFieldNumber = 5,
    kSrPolicyNodeIdFieldNumber = 6,
  };
  // uint32 Asn = 1;
  void clear_asn();
  uint32_t asn() const;
  void set_asn(uint32_t value);
  private:
  uint32_t _internal_asn() const;
  void _internal_set_asn(uint32_t value);
  public:

  // .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
  bool has_ospfnodeid() const;
  private:
  bool _internal_has_ospfnodeid() const;
  public:
  void clear_ospfnodeid();
  const ::service_layer::SLBgplsTopoOspfNodeId& ospfnodeid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoOspfNodeId* release_ospfnodeid();
  ::service_layer::SLBgplsTopoOspfNodeId* mutable_ospfnodeid();
  void set_allocated_ospfnodeid(::service_layer::SLBgplsTopoOspfNodeId* ospfnodeid);
  private:
  const ::service_layer::SLBgplsTopoOspfNodeId& _internal_ospfnodeid() const;
  ::service_layer::SLBgplsTopoOspfNodeId* _internal_mutable_ospfnodeid();
  public:
  void unsafe_arena_set_allocated_ospfnodeid(
      ::service_layer::SLBgplsTopoOspfNodeId* ospfnodeid);
  ::service_layer::SLBgplsTopoOspfNodeId* unsafe_arena_release_ospfnodeid();

  // .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
  bool has_ospfv3nodeid() const;
  private:
  bool _internal_has_ospfv3nodeid() const;
  public:
  void clear_ospfv3nodeid();
  const ::service_layer::SLBgplsTopoOspfv3NodeId& ospfv3nodeid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoOspfv3NodeId* release_ospfv3nodeid();
  ::service_layer::SLBgplsTopoOspfv3NodeId* mutable_ospfv3nodeid();
  void set_allocated_ospfv3nodeid(::service_layer::SLBgplsTopoOspfv3NodeId* ospfv3nodeid);
  private:
  const ::service_layer::SLBgplsTopoOspfv3NodeId& _internal_ospfv3nodeid() const;
  ::service_layer::SLBgplsTopoOspfv3NodeId* _internal_mutable_ospfv3nodeid();
  public:
  void unsafe_arena_set_allocated_ospfv3nodeid(
      ::service_layer::SLBgplsTopoOspfv3NodeId* ospfv3nodeid);
  ::service_layer::SLBgplsTopoOspfv3NodeId* unsafe_arena_release_ospfv3nodeid();

  // .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
  bool has_isisnodeid() const;
  private:
  bool _internal_has_isisnodeid() const;
  public:
  void clear_isisnodeid();
  const ::service_layer::SLBgplsTopoIsisNodeId& isisnodeid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoIsisNodeId* release_isisnodeid();
  ::service_layer::SLBgplsTopoIsisNodeId* mutable_isisnodeid();
  void set_allocated_isisnodeid(::service_layer::SLBgplsTopoIsisNodeId* isisnodeid);
  private:
  const ::service_layer::SLBgplsTopoIsisNodeId& _internal_isisnodeid() const;
  ::service_layer::SLBgplsTopoIsisNodeId* _internal_mutable_isisnodeid();
  public:
  void unsafe_arena_set_allocated_isisnodeid(
      ::service_layer::SLBgplsTopoIsisNodeId* isisnodeid);
  ::service_layer::SLBgplsTopoIsisNodeId* unsafe_arena_release_isisnodeid();

  // .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
  bool has_bgpnodeid() const;
  private:
  bool _internal_has_bgpnodeid() const;
  public:
  void clear_bgpnodeid();
  const ::service_layer::SLBgplsTopoBgpNodeId& bgpnodeid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoBgpNodeId* release_bgpnodeid();
  ::service_layer::SLBgplsTopoBgpNodeId* mutable_bgpnodeid();
  void set_allocated_bgpnodeid(::service_layer::SLBgplsTopoBgpNodeId* bgpnodeid);
  private:
  const ::service_layer::SLBgplsTopoBgpNodeId& _internal_bgpnodeid() const;
  ::service_layer::SLBgplsTopoBgpNodeId* _internal_mutable_bgpnodeid();
  public:
  void unsafe_arena_set_allocated_bgpnodeid(
      ::service_layer::SLBgplsTopoBgpNodeId* bgpnodeid);
  ::service_layer::SLBgplsTopoBgpNodeId* unsafe_arena_release_bgpnodeid();

  // .service_layer.SLBgplsTopoSrPolicyNodeId SrPolicyNodeId = 6;
  bool has_srpolicynodeid() const;
  private:
  bool _internal_has_srpolicynodeid() const;
  public:
  void clear_srpolicynodeid();
  const ::service_layer::SLBgplsTopoSrPolicyNodeId& srpolicynodeid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicyNodeId* release_srpolicynodeid();
  ::service_layer::SLBgplsTopoSrPolicyNodeId* mutable_srpolicynodeid();
  void set_allocated_srpolicynodeid(::service_layer::SLBgplsTopoSrPolicyNodeId* srpolicynodeid);
  private:
  const ::service_layer::SLBgplsTopoSrPolicyNodeId& _internal_srpolicynodeid() const;
  ::service_layer::SLBgplsTopoSrPolicyNodeId* _internal_mutable_srpolicynodeid();
  public:
  void unsafe_arena_set_allocated_srpolicynodeid(
      ::service_layer::SLBgplsTopoSrPolicyNodeId* srpolicynodeid);
  ::service_layer::SLBgplsTopoSrPolicyNodeId* unsafe_arena_release_srpolicynodeid();

  void clear_NodeId();
  NodeIdCase NodeId_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNode)
 private:
  class _Internal;
  void set_has_ospfnodeid();
  void set_has_ospfv3nodeid();
  void set_has_isisnodeid();
  void set_has_bgpnodeid();
  void set_has_srpolicynodeid();

  inline bool has_NodeId() const;
  inline void clear_has_NodeId();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t asn_;
  union NodeIdUnion {
    constexpr NodeIdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLBgplsTopoOspfNodeId* ospfnodeid_;
    ::service_layer::SLBgplsTopoOspfv3NodeId* ospfv3nodeid_;
    ::service_layer::SLBgplsTopoIsisNodeId* isisnodeid_;
    ::service_layer::SLBgplsTopoBgpNodeId* bgpnodeid_;
    ::service_layer::SLBgplsTopoSrPolicyNodeId* srpolicynodeid_;
  } NodeId_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLink) */ {
 public:
  inline SLBgplsTopoLink() : SLBgplsTopoLink(nullptr) {}
  ~SLBgplsTopoLink() override;
  explicit constexpr SLBgplsTopoLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLink(const SLBgplsTopoLink& from);
  SLBgplsTopoLink(SLBgplsTopoLink&& from) noexcept
    : SLBgplsTopoLink() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLink& operator=(const SLBgplsTopoLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLink& operator=(SLBgplsTopoLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLink* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLink*>(
               &_SLBgplsTopoLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SLBgplsTopoLink& a, SLBgplsTopoLink& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLink& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLink";
  }
  protected:
  explicit SLBgplsTopoLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeDescrFieldNumber = 1,
    kRemoteNodeDescrFieldNumber = 2,
    kLinkDescrFieldNumber = 3,
  };
  // .service_layer.SLBgplsTopoNode LocalNodeDescr = 1;
  bool has_localnodedescr() const;
  private:
  bool _internal_has_localnodedescr() const;
  public:
  void clear_localnodedescr();
  const ::service_layer::SLBgplsTopoNode& localnodedescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNode* release_localnodedescr();
  ::service_layer::SLBgplsTopoNode* mutable_localnodedescr();
  void set_allocated_localnodedescr(::service_layer::SLBgplsTopoNode* localnodedescr);
  private:
  const ::service_layer::SLBgplsTopoNode& _internal_localnodedescr() const;
  ::service_layer::SLBgplsTopoNode* _internal_mutable_localnodedescr();
  public:
  void unsafe_arena_set_allocated_localnodedescr(
      ::service_layer::SLBgplsTopoNode* localnodedescr);
  ::service_layer::SLBgplsTopoNode* unsafe_arena_release_localnodedescr();

  // .service_layer.SLBgplsTopoNode RemoteNodeDescr = 2;
  bool has_remotenodedescr() const;
  private:
  bool _internal_has_remotenodedescr() const;
  public:
  void clear_remotenodedescr();
  const ::service_layer::SLBgplsTopoNode& remotenodedescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNode* release_remotenodedescr();
  ::service_layer::SLBgplsTopoNode* mutable_remotenodedescr();
  void set_allocated_remotenodedescr(::service_layer::SLBgplsTopoNode* remotenodedescr);
  private:
  const ::service_layer::SLBgplsTopoNode& _internal_remotenodedescr() const;
  ::service_layer::SLBgplsTopoNode* _internal_mutable_remotenodedescr();
  public:
  void unsafe_arena_set_allocated_remotenodedescr(
      ::service_layer::SLBgplsTopoNode* remotenodedescr);
  ::service_layer::SLBgplsTopoNode* unsafe_arena_release_remotenodedescr();

  // .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
  bool has_linkdescr() const;
  private:
  bool _internal_has_linkdescr() const;
  public:
  void clear_linkdescr();
  const ::service_layer::SLBgplsTopoLinkDescr& linkdescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkDescr* release_linkdescr();
  ::service_layer::SLBgplsTopoLinkDescr* mutable_linkdescr();
  void set_allocated_linkdescr(::service_layer::SLBgplsTopoLinkDescr* linkdescr);
  private:
  const ::service_layer::SLBgplsTopoLinkDescr& _internal_linkdescr() const;
  ::service_layer::SLBgplsTopoLinkDescr* _internal_mutable_linkdescr();
  public:
  void unsafe_arena_set_allocated_linkdescr(
      ::service_layer::SLBgplsTopoLinkDescr* linkdescr);
  ::service_layer::SLBgplsTopoLinkDescr* unsafe_arena_release_linkdescr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoNode* localnodedescr_;
  ::service_layer::SLBgplsTopoNode* remotenodedescr_;
  ::service_layer::SLBgplsTopoLinkDescr* linkdescr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefix) */ {
 public:
  inline SLBgplsTopoPrefix() : SLBgplsTopoPrefix(nullptr) {}
  ~SLBgplsTopoPrefix() override;
  explicit constexpr SLBgplsTopoPrefix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefix(const SLBgplsTopoPrefix& from);
  SLBgplsTopoPrefix(SLBgplsTopoPrefix&& from) noexcept
    : SLBgplsTopoPrefix() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefix& operator=(const SLBgplsTopoPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefix& operator=(SLBgplsTopoPrefix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefix* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefix*>(
               &_SLBgplsTopoPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SLBgplsTopoPrefix& a, SLBgplsTopoPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefix& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefix";
  }
  protected:
  explicit SLBgplsTopoPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeDescrFieldNumber = 1,
    kPrefixDescrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoNode NodeDescr = 1;
  bool has_nodedescr() const;
  private:
  bool _internal_has_nodedescr() const;
  public:
  void clear_nodedescr();
  const ::service_layer::SLBgplsTopoNode& nodedescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNode* release_nodedescr();
  ::service_layer::SLBgplsTopoNode* mutable_nodedescr();
  void set_allocated_nodedescr(::service_layer::SLBgplsTopoNode* nodedescr);
  private:
  const ::service_layer::SLBgplsTopoNode& _internal_nodedescr() const;
  ::service_layer::SLBgplsTopoNode* _internal_mutable_nodedescr();
  public:
  void unsafe_arena_set_allocated_nodedescr(
      ::service_layer::SLBgplsTopoNode* nodedescr);
  ::service_layer::SLBgplsTopoNode* unsafe_arena_release_nodedescr();

  // .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
  bool has_prefixdescr() const;
  private:
  bool _internal_has_prefixdescr() const;
  public:
  void clear_prefixdescr();
  const ::service_layer::SLBgplsTopoPrefixDescr& prefixdescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixDescr* release_prefixdescr();
  ::service_layer::SLBgplsTopoPrefixDescr* mutable_prefixdescr();
  void set_allocated_prefixdescr(::service_layer::SLBgplsTopoPrefixDescr* prefixdescr);
  private:
  const ::service_layer::SLBgplsTopoPrefixDescr& _internal_prefixdescr() const;
  ::service_layer::SLBgplsTopoPrefixDescr* _internal_mutable_prefixdescr();
  public:
  void unsafe_arena_set_allocated_prefixdescr(
      ::service_layer::SLBgplsTopoPrefixDescr* prefixdescr);
  ::service_layer::SLBgplsTopoPrefixDescr* unsafe_arena_release_prefixdescr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoNode* nodedescr_;
  ::service_layer::SLBgplsTopoPrefixDescr* prefixdescr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6Sid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6Sid) */ {
 public:
  inline SLBgplsTopoSrv6Sid() : SLBgplsTopoSrv6Sid(nullptr) {}
  ~SLBgplsTopoSrv6Sid() override;
  explicit constexpr SLBgplsTopoSrv6Sid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6Sid(const SLBgplsTopoSrv6Sid& from);
  SLBgplsTopoSrv6Sid(SLBgplsTopoSrv6Sid&& from) noexcept
    : SLBgplsTopoSrv6Sid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6Sid& operator=(const SLBgplsTopoSrv6Sid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6Sid& operator=(SLBgplsTopoSrv6Sid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6Sid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6Sid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6Sid*>(
               &_SLBgplsTopoSrv6Sid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SLBgplsTopoSrv6Sid& a, SLBgplsTopoSrv6Sid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6Sid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6Sid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6Sid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6Sid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6Sid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6Sid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6Sid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6Sid";
  }
  protected:
  explicit SLBgplsTopoSrv6Sid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeDescrFieldNumber = 1,
    kSrv6SidDescrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoNode NodeDescr = 1;
  bool has_nodedescr() const;
  private:
  bool _internal_has_nodedescr() const;
  public:
  void clear_nodedescr();
  const ::service_layer::SLBgplsTopoNode& nodedescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNode* release_nodedescr();
  ::service_layer::SLBgplsTopoNode* mutable_nodedescr();
  void set_allocated_nodedescr(::service_layer::SLBgplsTopoNode* nodedescr);
  private:
  const ::service_layer::SLBgplsTopoNode& _internal_nodedescr() const;
  ::service_layer::SLBgplsTopoNode* _internal_mutable_nodedescr();
  public:
  void unsafe_arena_set_allocated_nodedescr(
      ::service_layer::SLBgplsTopoNode* nodedescr);
  ::service_layer::SLBgplsTopoNode* unsafe_arena_release_nodedescr();

  // .service_layer.SLBgplsTopoSrv6SidDescr Srv6SidDescr = 2;
  bool has_srv6siddescr() const;
  private:
  bool _internal_has_srv6siddescr() const;
  public:
  void clear_srv6siddescr();
  const ::service_layer::SLBgplsTopoSrv6SidDescr& srv6siddescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidDescr* release_srv6siddescr();
  ::service_layer::SLBgplsTopoSrv6SidDescr* mutable_srv6siddescr();
  void set_allocated_srv6siddescr(::service_layer::SLBgplsTopoSrv6SidDescr* srv6siddescr);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidDescr& _internal_srv6siddescr() const;
  ::service_layer::SLBgplsTopoSrv6SidDescr* _internal_mutable_srv6siddescr();
  public:
  void unsafe_arena_set_allocated_srv6siddescr(
      ::service_layer::SLBgplsTopoSrv6SidDescr* srv6siddescr);
  ::service_layer::SLBgplsTopoSrv6SidDescr* unsafe_arena_release_srv6siddescr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6Sid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoNode* nodedescr_;
  ::service_layer::SLBgplsTopoSrv6SidDescr* srv6siddescr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicy) */ {
 public:
  inline SLBgplsTopoSrPolicy() : SLBgplsTopoSrPolicy(nullptr) {}
  ~SLBgplsTopoSrPolicy() override;
  explicit constexpr SLBgplsTopoSrPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicy(const SLBgplsTopoSrPolicy& from);
  SLBgplsTopoSrPolicy(SLBgplsTopoSrPolicy&& from) noexcept
    : SLBgplsTopoSrPolicy() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicy& operator=(const SLBgplsTopoSrPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicy& operator=(SLBgplsTopoSrPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrPolicy* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicy*>(
               &_SLBgplsTopoSrPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SLBgplsTopoSrPolicy& a, SLBgplsTopoSrPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicy";
  }
  protected:
  explicit SLBgplsTopoSrPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeDescrFieldNumber = 1,
    kSrPolicyDescrFieldNumber = 2,
  };
  // .service_layer.SLBgplsTopoNode NodeDescr = 1;
  bool has_nodedescr() const;
  private:
  bool _internal_has_nodedescr() const;
  public:
  void clear_nodedescr();
  const ::service_layer::SLBgplsTopoNode& nodedescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNode* release_nodedescr();
  ::service_layer::SLBgplsTopoNode* mutable_nodedescr();
  void set_allocated_nodedescr(::service_layer::SLBgplsTopoNode* nodedescr);
  private:
  const ::service_layer::SLBgplsTopoNode& _internal_nodedescr() const;
  ::service_layer::SLBgplsTopoNode* _internal_mutable_nodedescr();
  public:
  void unsafe_arena_set_allocated_nodedescr(
      ::service_layer::SLBgplsTopoNode* nodedescr);
  ::service_layer::SLBgplsTopoNode* unsafe_arena_release_nodedescr();

  // .service_layer.SLBgplsTopoSrPolicyDescr SrPolicyDescr = 2;
  bool has_srpolicydescr() const;
  private:
  bool _internal_has_srpolicydescr() const;
  public:
  void clear_srpolicydescr();
  const ::service_layer::SLBgplsTopoSrPolicyDescr& srpolicydescr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicyDescr* release_srpolicydescr();
  ::service_layer::SLBgplsTopoSrPolicyDescr* mutable_srpolicydescr();
  void set_allocated_srpolicydescr(::service_layer::SLBgplsTopoSrPolicyDescr* srpolicydescr);
  private:
  const ::service_layer::SLBgplsTopoSrPolicyDescr& _internal_srpolicydescr() const;
  ::service_layer::SLBgplsTopoSrPolicyDescr* _internal_mutable_srpolicydescr();
  public:
  void unsafe_arena_set_allocated_srpolicydescr(
      ::service_layer::SLBgplsTopoSrPolicyDescr* srpolicydescr);
  ::service_layer::SLBgplsTopoSrPolicyDescr* unsafe_arena_release_srpolicydescr();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoNode* nodedescr_;
  ::service_layer::SLBgplsTopoSrPolicyDescr* srpolicydescr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkDescr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkDescr) */ {
 public:
  inline SLBgplsTopoLinkDescr() : SLBgplsTopoLinkDescr(nullptr) {}
  ~SLBgplsTopoLinkDescr() override;
  explicit constexpr SLBgplsTopoLinkDescr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkDescr(const SLBgplsTopoLinkDescr& from);
  SLBgplsTopoLinkDescr(SLBgplsTopoLinkDescr&& from) noexcept
    : SLBgplsTopoLinkDescr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkDescr& operator=(const SLBgplsTopoLinkDescr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkDescr& operator=(SLBgplsTopoLinkDescr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkDescr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkDescr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkDescr*>(
               &_SLBgplsTopoLinkDescr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SLBgplsTopoLinkDescr& a, SLBgplsTopoLinkDescr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkDescr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkDescr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkDescr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkDescr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkDescr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkDescr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkDescr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkDescr";
  }
  protected:
  explicit SLBgplsTopoLinkDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIpv4FieldNumber = 3,
    kRemoteIpv4FieldNumber = 4,
    kLocalIpv6FieldNumber = 5,
    kRemoteIpv6FieldNumber = 6,
    kMtIdFieldNumber = 7,
    kLocalIdFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
  };
  // bytes LocalIpv4 = 3;
  void clear_localipv4();
  const std::string& localipv4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localipv4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localipv4();
  PROTOBUF_NODISCARD std::string* release_localipv4();
  void set_allocated_localipv4(std::string* localipv4);
  private:
  const std::string& _internal_localipv4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localipv4(const std::string& value);
  std::string* _internal_mutable_localipv4();
  public:

  // bytes RemoteIpv4 = 4;
  void clear_remoteipv4();
  const std::string& remoteipv4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remoteipv4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remoteipv4();
  PROTOBUF_NODISCARD std::string* release_remoteipv4();
  void set_allocated_remoteipv4(std::string* remoteipv4);
  private:
  const std::string& _internal_remoteipv4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remoteipv4(const std::string& value);
  std::string* _internal_mutable_remoteipv4();
  public:

  // bytes LocalIpv6 = 5;
  void clear_localipv6();
  const std::string& localipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localipv6();
  PROTOBUF_NODISCARD std::string* release_localipv6();
  void set_allocated_localipv6(std::string* localipv6);
  private:
  const std::string& _internal_localipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localipv6(const std::string& value);
  std::string* _internal_mutable_localipv6();
  public:

  // bytes RemoteIpv6 = 6;
  void clear_remoteipv6();
  const std::string& remoteipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remoteipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remoteipv6();
  PROTOBUF_NODISCARD std::string* release_remoteipv6();
  void set_allocated_remoteipv6(std::string* remoteipv6);
  private:
  const std::string& _internal_remoteipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remoteipv6(const std::string& value);
  std::string* _internal_mutable_remoteipv6();
  public:

  // .service_layer.SLBgplsTopoMtId MtId = 7;
  bool has_mtid() const;
  private:
  bool _internal_has_mtid() const;
  public:
  void clear_mtid();
  const ::service_layer::SLBgplsTopoMtId& mtid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoMtId* release_mtid();
  ::service_layer::SLBgplsTopoMtId* mutable_mtid();
  void set_allocated_mtid(::service_layer::SLBgplsTopoMtId* mtid);
  private:
  const ::service_layer::SLBgplsTopoMtId& _internal_mtid() const;
  ::service_layer::SLBgplsTopoMtId* _internal_mutable_mtid();
  public:
  void unsafe_arena_set_allocated_mtid(
      ::service_layer::SLBgplsTopoMtId* mtid);
  ::service_layer::SLBgplsTopoMtId* unsafe_arena_release_mtid();

  // uint32 LocalId = 1;
  void clear_localid();
  uint32_t localid() const;
  void set_localid(uint32_t value);
  private:
  uint32_t _internal_localid() const;
  void _internal_set_localid(uint32_t value);
  public:

  // uint32 RemoteId = 2;
  void clear_remoteid();
  uint32_t remoteid() const;
  void set_remoteid(uint32_t value);
  private:
  uint32_t _internal_remoteid() const;
  void _internal_set_remoteid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkDescr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remoteipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remoteipv6_;
  ::service_layer::SLBgplsTopoMtId* mtid_;
  uint32_t localid_;
  uint32_t remoteid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixDescr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixDescr) */ {
 public:
  inline SLBgplsTopoPrefixDescr() : SLBgplsTopoPrefixDescr(nullptr) {}
  ~SLBgplsTopoPrefixDescr() override;
  explicit constexpr SLBgplsTopoPrefixDescr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixDescr(const SLBgplsTopoPrefixDescr& from);
  SLBgplsTopoPrefixDescr(SLBgplsTopoPrefixDescr&& from) noexcept
    : SLBgplsTopoPrefixDescr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixDescr& operator=(const SLBgplsTopoPrefixDescr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixDescr& operator=(SLBgplsTopoPrefixDescr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixDescr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixDescr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixDescr*>(
               &_SLBgplsTopoPrefixDescr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SLBgplsTopoPrefixDescr& a, SLBgplsTopoPrefixDescr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixDescr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixDescr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixDescr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixDescr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixDescr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixDescr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixDescr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixDescr";
  }
  protected:
  explicit SLBgplsTopoPrefixDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 4,
    kMtIdFieldNumber = 1,
    kOspfRouteTypeFieldNumber = 2,
    kPrefixLengthFieldNumber = 3,
  };
  // bytes Prefix = 4;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  bool has_mtid() const;
  private:
  bool _internal_has_mtid() const;
  public:
  void clear_mtid();
  const ::service_layer::SLBgplsTopoMtId& mtid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoMtId* release_mtid();
  ::service_layer::SLBgplsTopoMtId* mutable_mtid();
  void set_allocated_mtid(::service_layer::SLBgplsTopoMtId* mtid);
  private:
  const ::service_layer::SLBgplsTopoMtId& _internal_mtid() const;
  ::service_layer::SLBgplsTopoMtId* _internal_mutable_mtid();
  public:
  void unsafe_arena_set_allocated_mtid(
      ::service_layer::SLBgplsTopoMtId* mtid);
  ::service_layer::SLBgplsTopoMtId* unsafe_arena_release_mtid();

  // .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
  void clear_ospfroutetype();
  ::service_layer::SLBgplsTopoOspfRouteType ospfroutetype() const;
  void set_ospfroutetype(::service_layer::SLBgplsTopoOspfRouteType value);
  private:
  ::service_layer::SLBgplsTopoOspfRouteType _internal_ospfroutetype() const;
  void _internal_set_ospfroutetype(::service_layer::SLBgplsTopoOspfRouteType value);
  public:

  // uint32 PrefixLength = 3;
  void clear_prefixlength();
  uint32_t prefixlength() const;
  void set_prefixlength(uint32_t value);
  private:
  uint32_t _internal_prefixlength() const;
  void _internal_set_prefixlength(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixDescr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::service_layer::SLBgplsTopoMtId* mtid_;
  int ospfroutetype_;
  uint32_t prefixlength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6SidDescr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6SidDescr) */ {
 public:
  inline SLBgplsTopoSrv6SidDescr() : SLBgplsTopoSrv6SidDescr(nullptr) {}
  ~SLBgplsTopoSrv6SidDescr() override;
  explicit constexpr SLBgplsTopoSrv6SidDescr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6SidDescr(const SLBgplsTopoSrv6SidDescr& from);
  SLBgplsTopoSrv6SidDescr(SLBgplsTopoSrv6SidDescr&& from) noexcept
    : SLBgplsTopoSrv6SidDescr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6SidDescr& operator=(const SLBgplsTopoSrv6SidDescr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6SidDescr& operator=(SLBgplsTopoSrv6SidDescr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6SidDescr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6SidDescr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6SidDescr*>(
               &_SLBgplsTopoSrv6SidDescr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SLBgplsTopoSrv6SidDescr& a, SLBgplsTopoSrv6SidDescr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6SidDescr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6SidDescr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6SidDescr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6SidDescr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6SidDescr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6SidDescr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6SidDescr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6SidDescr";
  }
  protected:
  explicit SLBgplsTopoSrv6SidDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrv6SidFieldNumber = 2,
    kMtIdFieldNumber = 1,
  };
  // bytes Srv6Sid = 2;
  void clear_srv6sid();
  const std::string& srv6sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6sid();
  PROTOBUF_NODISCARD std::string* release_srv6sid();
  void set_allocated_srv6sid(std::string* srv6sid);
  private:
  const std::string& _internal_srv6sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6sid(const std::string& value);
  std::string* _internal_mutable_srv6sid();
  public:

  // .service_layer.SLBgplsTopoMtId MtId = 1;
  bool has_mtid() const;
  private:
  bool _internal_has_mtid() const;
  public:
  void clear_mtid();
  const ::service_layer::SLBgplsTopoMtId& mtid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoMtId* release_mtid();
  ::service_layer::SLBgplsTopoMtId* mutable_mtid();
  void set_allocated_mtid(::service_layer::SLBgplsTopoMtId* mtid);
  private:
  const ::service_layer::SLBgplsTopoMtId& _internal_mtid() const;
  ::service_layer::SLBgplsTopoMtId* _internal_mutable_mtid();
  public:
  void unsafe_arena_set_allocated_mtid(
      ::service_layer::SLBgplsTopoMtId* mtid);
  ::service_layer::SLBgplsTopoMtId* unsafe_arena_release_mtid();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6SidDescr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6sid_;
  ::service_layer::SLBgplsTopoMtId* mtid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicyDescr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicyDescr) */ {
 public:
  inline SLBgplsTopoSrPolicyDescr() : SLBgplsTopoSrPolicyDescr(nullptr) {}
  ~SLBgplsTopoSrPolicyDescr() override;
  explicit constexpr SLBgplsTopoSrPolicyDescr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicyDescr(const SLBgplsTopoSrPolicyDescr& from);
  SLBgplsTopoSrPolicyDescr(SLBgplsTopoSrPolicyDescr&& from) noexcept
    : SLBgplsTopoSrPolicyDescr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicyDescr& operator=(const SLBgplsTopoSrPolicyDescr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicyDescr& operator=(SLBgplsTopoSrPolicyDescr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicyDescr& default_instance() {
    return *internal_default_instance();
  }
  enum EndpointAddressCase {
    kIpv4EndAddr = 3,
    kIpv6EndAddr = 4,
    ENDPOINTADDRESS_NOT_SET = 0,
  };

  enum OriginatorAddressCase {
    kIpv4OrigAddr = 7,
    kIpv6OrigAddr = 8,
    ORIGINATORADDRESS_NOT_SET = 0,
  };

  static inline const SLBgplsTopoSrPolicyDescr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicyDescr*>(
               &_SLBgplsTopoSrPolicyDescr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SLBgplsTopoSrPolicyDescr& a, SLBgplsTopoSrPolicyDescr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicyDescr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicyDescr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicyDescr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicyDescr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicyDescr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicyDescr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicyDescr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicyDescr";
  }
  protected:
  explicit SLBgplsTopoSrPolicyDescr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kProtoOriginFieldNumber = 1,
    kColorFieldNumber = 5,
    kOriginAsnFieldNumber = 6,
    kDiscriminatorFieldNumber = 9,
    kIpv4EndAddrFieldNumber = 3,
    kIpv6EndAddrFieldNumber = 4,
    kIpv4OrigAddrFieldNumber = 7,
    kIpv6OrigAddrFieldNumber = 8,
  };
  // .service_layer.SLBgplsTopoSrPolicyFlags Flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::service_layer::SLBgplsTopoSrPolicyFlags& flags() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicyFlags* release_flags();
  ::service_layer::SLBgplsTopoSrPolicyFlags* mutable_flags();
  void set_allocated_flags(::service_layer::SLBgplsTopoSrPolicyFlags* flags);
  private:
  const ::service_layer::SLBgplsTopoSrPolicyFlags& _internal_flags() const;
  ::service_layer::SLBgplsTopoSrPolicyFlags* _internal_mutable_flags();
  public:
  void unsafe_arena_set_allocated_flags(
      ::service_layer::SLBgplsTopoSrPolicyFlags* flags);
  ::service_layer::SLBgplsTopoSrPolicyFlags* unsafe_arena_release_flags();

  // .service_layer.SLBgplsTopoSrPolicyProtocolOrigin ProtoOrigin = 1;
  void clear_protoorigin();
  ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin protoorigin() const;
  void set_protoorigin(::service_layer::SLBgplsTopoSrPolicyProtocolOrigin value);
  private:
  ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin _internal_protoorigin() const;
  void _internal_set_protoorigin(::service_layer::SLBgplsTopoSrPolicyProtocolOrigin value);
  public:

  // uint32 Color = 5;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // uint32 OriginAsn = 6;
  void clear_originasn();
  uint32_t originasn() const;
  void set_originasn(uint32_t value);
  private:
  uint32_t _internal_originasn() const;
  void _internal_set_originasn(uint32_t value);
  public:

  // uint32 Discriminator = 9;
  void clear_discriminator();
  uint32_t discriminator() const;
  void set_discriminator(uint32_t value);
  private:
  uint32_t _internal_discriminator() const;
  void _internal_set_discriminator(uint32_t value);
  public:

  // bytes Ipv4EndAddr = 3;
  bool has_ipv4endaddr() const;
  private:
  bool _internal_has_ipv4endaddr() const;
  public:
  void clear_ipv4endaddr();
  const std::string& ipv4endaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4endaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4endaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4endaddr();
  void set_allocated_ipv4endaddr(std::string* ipv4endaddr);
  private:
  const std::string& _internal_ipv4endaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4endaddr(const std::string& value);
  std::string* _internal_mutable_ipv4endaddr();
  public:

  // bytes Ipv6EndAddr = 4;
  bool has_ipv6endaddr() const;
  private:
  bool _internal_has_ipv6endaddr() const;
  public:
  void clear_ipv6endaddr();
  const std::string& ipv6endaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6endaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6endaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6endaddr();
  void set_allocated_ipv6endaddr(std::string* ipv6endaddr);
  private:
  const std::string& _internal_ipv6endaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6endaddr(const std::string& value);
  std::string* _internal_mutable_ipv6endaddr();
  public:

  // bytes Ipv4OrigAddr = 7;
  bool has_ipv4origaddr() const;
  private:
  bool _internal_has_ipv4origaddr() const;
  public:
  void clear_ipv4origaddr();
  const std::string& ipv4origaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4origaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4origaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4origaddr();
  void set_allocated_ipv4origaddr(std::string* ipv4origaddr);
  private:
  const std::string& _internal_ipv4origaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4origaddr(const std::string& value);
  std::string* _internal_mutable_ipv4origaddr();
  public:

  // bytes Ipv6OrigAddr = 8;
  bool has_ipv6origaddr() const;
  private:
  bool _internal_has_ipv6origaddr() const;
  public:
  void clear_ipv6origaddr();
  const std::string& ipv6origaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6origaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6origaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6origaddr();
  void set_allocated_ipv6origaddr(std::string* ipv6origaddr);
  private:
  const std::string& _internal_ipv6origaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6origaddr(const std::string& value);
  std::string* _internal_mutable_ipv6origaddr();
  public:

  void clear_EndpointAddress();
  EndpointAddressCase EndpointAddress_case() const;
  void clear_OriginatorAddress();
  OriginatorAddressCase OriginatorAddress_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicyDescr)
 private:
  class _Internal;
  void set_has_ipv4endaddr();
  void set_has_ipv6endaddr();
  void set_has_ipv4origaddr();
  void set_has_ipv6origaddr();

  inline bool has_EndpointAddress() const;
  inline void clear_has_EndpointAddress();

  inline bool has_OriginatorAddress() const;
  inline void clear_has_OriginatorAddress();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLBgplsTopoSrPolicyFlags* flags_;
  int protoorigin_;
  uint32_t color_;
  uint32_t originasn_;
  uint32_t discriminator_;
  union EndpointAddressUnion {
    constexpr EndpointAddressUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4endaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6endaddr_;
  } EndpointAddress_;
  union OriginatorAddressUnion {
    constexpr OriginatorAddressUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4origaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6origaddr_;
  } OriginatorAddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoOspfNodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoOspfNodeId) */ {
 public:
  inline SLBgplsTopoOspfNodeId() : SLBgplsTopoOspfNodeId(nullptr) {}
  ~SLBgplsTopoOspfNodeId() override;
  explicit constexpr SLBgplsTopoOspfNodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoOspfNodeId(const SLBgplsTopoOspfNodeId& from);
  SLBgplsTopoOspfNodeId(SLBgplsTopoOspfNodeId&& from) noexcept
    : SLBgplsTopoOspfNodeId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoOspfNodeId& operator=(const SLBgplsTopoOspfNodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoOspfNodeId& operator=(SLBgplsTopoOspfNodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoOspfNodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoOspfNodeId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoOspfNodeId*>(
               &_SLBgplsTopoOspfNodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SLBgplsTopoOspfNodeId& a, SLBgplsTopoOspfNodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoOspfNodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoOspfNodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoOspfNodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoOspfNodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoOspfNodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoOspfNodeId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoOspfNodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoOspfNodeId";
  }
  protected:
  explicit SLBgplsTopoOspfNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 3,
    kDrIdentifierFieldNumber = 4,
    kAreaIdFieldNumber = 1,
    kIsAsScopedFieldNumber = 2,
  };
  // bytes RouterId = 3;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // bytes DrIdentifier = 4;
  void clear_dridentifier();
  const std::string& dridentifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dridentifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dridentifier();
  PROTOBUF_NODISCARD std::string* release_dridentifier();
  void set_allocated_dridentifier(std::string* dridentifier);
  private:
  const std::string& _internal_dridentifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dridentifier(const std::string& value);
  std::string* _internal_mutable_dridentifier();
  public:

  // uint32 AreaId = 1;
  void clear_areaid();
  uint32_t areaid() const;
  void set_areaid(uint32_t value);
  private:
  uint32_t _internal_areaid() const;
  void _internal_set_areaid(uint32_t value);
  public:

  // uint32 IsAsScoped = 2;
  void clear_isasscoped();
  uint32_t isasscoped() const;
  void set_isasscoped(uint32_t value);
  private:
  uint32_t _internal_isasscoped() const;
  void _internal_set_isasscoped(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoOspfNodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dridentifier_;
  uint32_t areaid_;
  uint32_t isasscoped_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoOspfv3NodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoOspfv3NodeId) */ {
 public:
  inline SLBgplsTopoOspfv3NodeId() : SLBgplsTopoOspfv3NodeId(nullptr) {}
  ~SLBgplsTopoOspfv3NodeId() override;
  explicit constexpr SLBgplsTopoOspfv3NodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoOspfv3NodeId(const SLBgplsTopoOspfv3NodeId& from);
  SLBgplsTopoOspfv3NodeId(SLBgplsTopoOspfv3NodeId&& from) noexcept
    : SLBgplsTopoOspfv3NodeId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoOspfv3NodeId& operator=(const SLBgplsTopoOspfv3NodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoOspfv3NodeId& operator=(SLBgplsTopoOspfv3NodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoOspfv3NodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoOspfv3NodeId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoOspfv3NodeId*>(
               &_SLBgplsTopoOspfv3NodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SLBgplsTopoOspfv3NodeId& a, SLBgplsTopoOspfv3NodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoOspfv3NodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoOspfv3NodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoOspfv3NodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoOspfv3NodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoOspfv3NodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoOspfv3NodeId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoOspfv3NodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoOspfv3NodeId";
  }
  protected:
  explicit SLBgplsTopoOspfv3NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 3,
    kAreaIdFieldNumber = 1,
    kAsScopedFieldNumber = 2,
    kDrIdentifierFieldNumber = 4,
  };
  // bytes RouterId = 3;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // uint32 AreaId = 1;
  void clear_areaid();
  uint32_t areaid() const;
  void set_areaid(uint32_t value);
  private:
  uint32_t _internal_areaid() const;
  void _internal_set_areaid(uint32_t value);
  public:

  // uint32 AsScoped = 2;
  void clear_asscoped();
  uint32_t asscoped() const;
  void set_asscoped(uint32_t value);
  private:
  uint32_t _internal_asscoped() const;
  void _internal_set_asscoped(uint32_t value);
  public:

  // uint32 DrIdentifier = 4;
  void clear_dridentifier();
  uint32_t dridentifier() const;
  void set_dridentifier(uint32_t value);
  private:
  uint32_t _internal_dridentifier() const;
  void _internal_set_dridentifier(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoOspfv3NodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  uint32_t areaid_;
  uint32_t asscoped_;
  uint32_t dridentifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoIsisNodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoIsisNodeId) */ {
 public:
  inline SLBgplsTopoIsisNodeId() : SLBgplsTopoIsisNodeId(nullptr) {}
  ~SLBgplsTopoIsisNodeId() override;
  explicit constexpr SLBgplsTopoIsisNodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoIsisNodeId(const SLBgplsTopoIsisNodeId& from);
  SLBgplsTopoIsisNodeId(SLBgplsTopoIsisNodeId&& from) noexcept
    : SLBgplsTopoIsisNodeId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoIsisNodeId& operator=(const SLBgplsTopoIsisNodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoIsisNodeId& operator=(SLBgplsTopoIsisNodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoIsisNodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoIsisNodeId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoIsisNodeId*>(
               &_SLBgplsTopoIsisNodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SLBgplsTopoIsisNodeId& a, SLBgplsTopoIsisNodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoIsisNodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoIsisNodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoIsisNodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoIsisNodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoIsisNodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoIsisNodeId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoIsisNodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoIsisNodeId";
  }
  protected:
  explicit SLBgplsTopoIsisNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemIdFieldNumber = 1,
    kPsnIdFieldNumber = 2,
  };
  // bytes SystemId = 1;
  void clear_systemid();
  const std::string& systemid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_systemid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_systemid();
  PROTOBUF_NODISCARD std::string* release_systemid();
  void set_allocated_systemid(std::string* systemid);
  private:
  const std::string& _internal_systemid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_systemid(const std::string& value);
  std::string* _internal_mutable_systemid();
  public:

  // bytes PsnId = 2;
  void clear_psnid();
  const std::string& psnid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_psnid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_psnid();
  PROTOBUF_NODISCARD std::string* release_psnid();
  void set_allocated_psnid(std::string* psnid);
  private:
  const std::string& _internal_psnid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_psnid(const std::string& value);
  std::string* _internal_mutable_psnid();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoIsisNodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psnid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoBgpNodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoBgpNodeId) */ {
 public:
  inline SLBgplsTopoBgpNodeId() : SLBgplsTopoBgpNodeId(nullptr) {}
  ~SLBgplsTopoBgpNodeId() override;
  explicit constexpr SLBgplsTopoBgpNodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoBgpNodeId(const SLBgplsTopoBgpNodeId& from);
  SLBgplsTopoBgpNodeId(SLBgplsTopoBgpNodeId&& from) noexcept
    : SLBgplsTopoBgpNodeId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoBgpNodeId& operator=(const SLBgplsTopoBgpNodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoBgpNodeId& operator=(SLBgplsTopoBgpNodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoBgpNodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoBgpNodeId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoBgpNodeId*>(
               &_SLBgplsTopoBgpNodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SLBgplsTopoBgpNodeId& a, SLBgplsTopoBgpNodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoBgpNodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoBgpNodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoBgpNodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoBgpNodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoBgpNodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoBgpNodeId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoBgpNodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoBgpNodeId";
  }
  protected:
  explicit SLBgplsTopoBgpNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 1,
    kMemberAsnFieldNumber = 2,
  };
  // bytes RouterId = 1;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // uint32 MemberAsn = 2;
  void clear_memberasn();
  uint32_t memberasn() const;
  void set_memberasn(uint32_t value);
  private:
  uint32_t _internal_memberasn() const;
  void _internal_set_memberasn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoBgpNodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  uint32_t memberasn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicyNodeId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicyNodeId) */ {
 public:
  inline SLBgplsTopoSrPolicyNodeId() : SLBgplsTopoSrPolicyNodeId(nullptr) {}
  ~SLBgplsTopoSrPolicyNodeId() override;
  explicit constexpr SLBgplsTopoSrPolicyNodeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicyNodeId(const SLBgplsTopoSrPolicyNodeId& from);
  SLBgplsTopoSrPolicyNodeId(SLBgplsTopoSrPolicyNodeId&& from) noexcept
    : SLBgplsTopoSrPolicyNodeId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicyNodeId& operator=(const SLBgplsTopoSrPolicyNodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicyNodeId& operator=(SLBgplsTopoSrPolicyNodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicyNodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrPolicyNodeId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicyNodeId*>(
               &_SLBgplsTopoSrPolicyNodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SLBgplsTopoSrPolicyNodeId& a, SLBgplsTopoSrPolicyNodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicyNodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicyNodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicyNodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicyNodeId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicyNodeId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicyNodeId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicyNodeId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicyNodeId";
  }
  protected:
  explicit SLBgplsTopoSrPolicyNodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 1,
    kIpv4RouterIdFieldNumber = 3,
    kIpv6RouterIdFieldNumber = 4,
    kMemberAsnFieldNumber = 2,
  };
  // bytes RouterId = 1;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // bytes Ipv4RouterId = 3;
  void clear_ipv4routerid();
  const std::string& ipv4routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4routerid();
  PROTOBUF_NODISCARD std::string* release_ipv4routerid();
  void set_allocated_ipv4routerid(std::string* ipv4routerid);
  private:
  const std::string& _internal_ipv4routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4routerid(const std::string& value);
  std::string* _internal_mutable_ipv4routerid();
  public:

  // bytes Ipv6RouterId = 4;
  void clear_ipv6routerid();
  const std::string& ipv6routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6routerid();
  PROTOBUF_NODISCARD std::string* release_ipv6routerid();
  void set_allocated_ipv6routerid(std::string* ipv6routerid);
  private:
  const std::string& _internal_ipv6routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6routerid(const std::string& value);
  std::string* _internal_mutable_ipv6routerid();
  public:

  // uint32 MemberAsn = 2;
  void clear_memberasn();
  uint32_t memberasn() const;
  void set_memberasn(uint32_t value);
  private:
  uint32_t _internal_memberasn() const;
  void _internal_set_memberasn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicyNodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4routerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6routerid_;
  uint32_t memberasn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicyFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicyFlags) */ {
 public:
  inline SLBgplsTopoSrPolicyFlags() : SLBgplsTopoSrPolicyFlags(nullptr) {}
  ~SLBgplsTopoSrPolicyFlags() override;
  explicit constexpr SLBgplsTopoSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicyFlags(const SLBgplsTopoSrPolicyFlags& from);
  SLBgplsTopoSrPolicyFlags(SLBgplsTopoSrPolicyFlags&& from) noexcept
    : SLBgplsTopoSrPolicyFlags() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicyFlags& operator=(const SLBgplsTopoSrPolicyFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicyFlags& operator=(SLBgplsTopoSrPolicyFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicyFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrPolicyFlags* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicyFlags*>(
               &_SLBgplsTopoSrPolicyFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SLBgplsTopoSrPolicyFlags& a, SLBgplsTopoSrPolicyFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicyFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicyFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicyFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicyFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicyFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicyFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicyFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicyFlags";
  }
  protected:
  explicit SLBgplsTopoSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicyFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNodeAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNodeAttr) */ {
 public:
  inline SLBgplsTopoNodeAttr() : SLBgplsTopoNodeAttr(nullptr) {}
  ~SLBgplsTopoNodeAttr() override;
  explicit constexpr SLBgplsTopoNodeAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNodeAttr(const SLBgplsTopoNodeAttr& from);
  SLBgplsTopoNodeAttr(SLBgplsTopoNodeAttr&& from) noexcept
    : SLBgplsTopoNodeAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNodeAttr& operator=(const SLBgplsTopoNodeAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNodeAttr& operator=(SLBgplsTopoNodeAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNodeAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNodeAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNodeAttr*>(
               &_SLBgplsTopoNodeAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SLBgplsTopoNodeAttr& a, SLBgplsTopoNodeAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNodeAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNodeAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNodeAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNodeAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNodeAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNodeAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNodeAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNodeAttr";
  }
  protected:
  explicit SLBgplsTopoNodeAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtIdFieldNumber = 1,
    kNodeMsdFieldNumber = 2,
    kIsisAreaIdFieldNumber = 6,
    kLocalIpv4FieldNumber = 7,
    kLocalIpv6FieldNumber = 8,
    kSrgbFieldNumber = 10,
    kSrlbFieldNumber = 12,
    kFadFieldNumber = 14,
    kUnknownAttrFieldNumber = 15,
    kNodeFlagBitsFieldNumber = 3,
    kOpaqueNodeAttrFieldNumber = 4,
    kNodeNameFieldNumber = 5,
    kSrgbIsisFlagsFieldNumber = 9,
    kSrAlgorithmFieldNumber = 11,
    kSrv6CapFlagsFieldNumber = 13,
  };
  // repeated .service_layer.SLBgplsTopoMtId MtId = 1;
  int mtid_size() const;
  private:
  int _internal_mtid_size() const;
  public:
  void clear_mtid();
  ::service_layer::SLBgplsTopoMtId* mutable_mtid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoMtId >*
      mutable_mtid();
  private:
  const ::service_layer::SLBgplsTopoMtId& _internal_mtid(int index) const;
  ::service_layer::SLBgplsTopoMtId* _internal_add_mtid();
  public:
  const ::service_layer::SLBgplsTopoMtId& mtid(int index) const;
  ::service_layer::SLBgplsTopoMtId* add_mtid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoMtId >&
      mtid() const;

  // repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
  int nodemsd_size() const;
  private:
  int _internal_nodemsd_size() const;
  public:
  void clear_nodemsd();
  ::service_layer::SLBgplsTopoNodeMsd* mutable_nodemsd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNodeMsd >*
      mutable_nodemsd();
  private:
  const ::service_layer::SLBgplsTopoNodeMsd& _internal_nodemsd(int index) const;
  ::service_layer::SLBgplsTopoNodeMsd* _internal_add_nodemsd();
  public:
  const ::service_layer::SLBgplsTopoNodeMsd& nodemsd(int index) const;
  ::service_layer::SLBgplsTopoNodeMsd* add_nodemsd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNodeMsd >&
      nodemsd() const;

  // repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
  int isisareaid_size() const;
  private:
  int _internal_isisareaid_size() const;
  public:
  void clear_isisareaid();
  ::service_layer::SLBgplsTopoIsisAreaId* mutable_isisareaid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoIsisAreaId >*
      mutable_isisareaid();
  private:
  const ::service_layer::SLBgplsTopoIsisAreaId& _internal_isisareaid(int index) const;
  ::service_layer::SLBgplsTopoIsisAreaId* _internal_add_isisareaid();
  public:
  const ::service_layer::SLBgplsTopoIsisAreaId& isisareaid(int index) const;
  ::service_layer::SLBgplsTopoIsisAreaId* add_isisareaid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoIsisAreaId >&
      isisareaid() const;

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
  int localipv4_size() const;
  private:
  int _internal_localipv4_size() const;
  public:
  void clear_localipv4();
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* mutable_localipv4(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >*
      mutable_localipv4();
  private:
  const ::service_layer::SLBgplsTopoLocalIpv4RouterId& _internal_localipv4(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* _internal_add_localipv4();
  public:
  const ::service_layer::SLBgplsTopoLocalIpv4RouterId& localipv4(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* add_localipv4();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >&
      localipv4() const;

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
  int localipv6_size() const;
  private:
  int _internal_localipv6_size() const;
  public:
  void clear_localipv6();
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* mutable_localipv6(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >*
      mutable_localipv6();
  private:
  const ::service_layer::SLBgplsTopoLocalIpv6RouterId& _internal_localipv6(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* _internal_add_localipv6();
  public:
  const ::service_layer::SLBgplsTopoLocalIpv6RouterId& localipv6(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* add_localipv6();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >&
      localipv6() const;

  // repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
  int srgb_size() const;
  private:
  int _internal_srgb_size() const;
  public:
  void clear_srgb();
  ::service_layer::SLBgplsTopoSrgb* mutable_srgb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrgb >*
      mutable_srgb();
  private:
  const ::service_layer::SLBgplsTopoSrgb& _internal_srgb(int index) const;
  ::service_layer::SLBgplsTopoSrgb* _internal_add_srgb();
  public:
  const ::service_layer::SLBgplsTopoSrgb& srgb(int index) const;
  ::service_layer::SLBgplsTopoSrgb* add_srgb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrgb >&
      srgb() const;

  // repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
  int srlb_size() const;
  private:
  int _internal_srlb_size() const;
  public:
  void clear_srlb();
  ::service_layer::SLBgplsTopoSrlb* mutable_srlb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrlb >*
      mutable_srlb();
  private:
  const ::service_layer::SLBgplsTopoSrlb& _internal_srlb(int index) const;
  ::service_layer::SLBgplsTopoSrlb* _internal_add_srlb();
  public:
  const ::service_layer::SLBgplsTopoSrlb& srlb(int index) const;
  ::service_layer::SLBgplsTopoSrlb* add_srlb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrlb >&
      srlb() const;

  // repeated .service_layer.SLBgplsTopoFad Fad = 14;
  int fad_size() const;
  private:
  int _internal_fad_size() const;
  public:
  void clear_fad();
  ::service_layer::SLBgplsTopoFad* mutable_fad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoFad >*
      mutable_fad();
  private:
  const ::service_layer::SLBgplsTopoFad& _internal_fad(int index) const;
  ::service_layer::SLBgplsTopoFad* _internal_add_fad();
  public:
  const ::service_layer::SLBgplsTopoFad& fad(int index) const;
  ::service_layer::SLBgplsTopoFad* add_fad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoFad >&
      fad() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 15;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
  bool has_nodeflagbits() const;
  private:
  bool _internal_has_nodeflagbits() const;
  public:
  void clear_nodeflagbits();
  const ::service_layer::SLBgplsTopoNodeFlagBits& nodeflagbits() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNodeFlagBits* release_nodeflagbits();
  ::service_layer::SLBgplsTopoNodeFlagBits* mutable_nodeflagbits();
  void set_allocated_nodeflagbits(::service_layer::SLBgplsTopoNodeFlagBits* nodeflagbits);
  private:
  const ::service_layer::SLBgplsTopoNodeFlagBits& _internal_nodeflagbits() const;
  ::service_layer::SLBgplsTopoNodeFlagBits* _internal_mutable_nodeflagbits();
  public:
  void unsafe_arena_set_allocated_nodeflagbits(
      ::service_layer::SLBgplsTopoNodeFlagBits* nodeflagbits);
  ::service_layer::SLBgplsTopoNodeFlagBits* unsafe_arena_release_nodeflagbits();

  // .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
  bool has_opaquenodeattr() const;
  private:
  bool _internal_has_opaquenodeattr() const;
  public:
  void clear_opaquenodeattr();
  const ::service_layer::SLBgplsTopoNodeOpaqueAttr& opaquenodeattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoNodeOpaqueAttr* release_opaquenodeattr();
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* mutable_opaquenodeattr();
  void set_allocated_opaquenodeattr(::service_layer::SLBgplsTopoNodeOpaqueAttr* opaquenodeattr);
  private:
  const ::service_layer::SLBgplsTopoNodeOpaqueAttr& _internal_opaquenodeattr() const;
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* _internal_mutable_opaquenodeattr();
  public:
  void unsafe_arena_set_allocated_opaquenodeattr(
      ::service_layer::SLBgplsTopoNodeOpaqueAttr* opaquenodeattr);
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* unsafe_arena_release_opaquenodeattr();

  // .service_layer.SLBgplsNodeName NodeName = 5;
  bool has_nodename() const;
  private:
  bool _internal_has_nodename() const;
  public:
  void clear_nodename();
  const ::service_layer::SLBgplsNodeName& nodename() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsNodeName* release_nodename();
  ::service_layer::SLBgplsNodeName* mutable_nodename();
  void set_allocated_nodename(::service_layer::SLBgplsNodeName* nodename);
  private:
  const ::service_layer::SLBgplsNodeName& _internal_nodename() const;
  ::service_layer::SLBgplsNodeName* _internal_mutable_nodename();
  public:
  void unsafe_arena_set_allocated_nodename(
      ::service_layer::SLBgplsNodeName* nodename);
  ::service_layer::SLBgplsNodeName* unsafe_arena_release_nodename();

  // .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
  bool has_srgbisisflags() const;
  private:
  bool _internal_has_srgbisisflags() const;
  public:
  void clear_srgbisisflags();
  const ::service_layer::SLBgplsTopoSrgbIsisFlags& srgbisisflags() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrgbIsisFlags* release_srgbisisflags();
  ::service_layer::SLBgplsTopoSrgbIsisFlags* mutable_srgbisisflags();
  void set_allocated_srgbisisflags(::service_layer::SLBgplsTopoSrgbIsisFlags* srgbisisflags);
  private:
  const ::service_layer::SLBgplsTopoSrgbIsisFlags& _internal_srgbisisflags() const;
  ::service_layer::SLBgplsTopoSrgbIsisFlags* _internal_mutable_srgbisisflags();
  public:
  void unsafe_arena_set_allocated_srgbisisflags(
      ::service_layer::SLBgplsTopoSrgbIsisFlags* srgbisisflags);
  ::service_layer::SLBgplsTopoSrgbIsisFlags* unsafe_arena_release_srgbisisflags();

  // .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
  bool has_sralgorithm() const;
  private:
  bool _internal_has_sralgorithm() const;
  public:
  void clear_sralgorithm();
  const ::service_layer::SLBgplsTopoSrAlgorithm& sralgorithm() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrAlgorithm* release_sralgorithm();
  ::service_layer::SLBgplsTopoSrAlgorithm* mutable_sralgorithm();
  void set_allocated_sralgorithm(::service_layer::SLBgplsTopoSrAlgorithm* sralgorithm);
  private:
  const ::service_layer::SLBgplsTopoSrAlgorithm& _internal_sralgorithm() const;
  ::service_layer::SLBgplsTopoSrAlgorithm* _internal_mutable_sralgorithm();
  public:
  void unsafe_arena_set_allocated_sralgorithm(
      ::service_layer::SLBgplsTopoSrAlgorithm* sralgorithm);
  ::service_layer::SLBgplsTopoSrAlgorithm* unsafe_arena_release_sralgorithm();

  // .service_layer.SLBgplsTopoSrv6CapFlags Srv6CapFlags = 13;
  bool has_srv6capflags() const;
  private:
  bool _internal_has_srv6capflags() const;
  public:
  void clear_srv6capflags();
  const ::service_layer::SLBgplsTopoSrv6CapFlags& srv6capflags() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6CapFlags* release_srv6capflags();
  ::service_layer::SLBgplsTopoSrv6CapFlags* mutable_srv6capflags();
  void set_allocated_srv6capflags(::service_layer::SLBgplsTopoSrv6CapFlags* srv6capflags);
  private:
  const ::service_layer::SLBgplsTopoSrv6CapFlags& _internal_srv6capflags() const;
  ::service_layer::SLBgplsTopoSrv6CapFlags* _internal_mutable_srv6capflags();
  public:
  void unsafe_arena_set_allocated_srv6capflags(
      ::service_layer::SLBgplsTopoSrv6CapFlags* srv6capflags);
  ::service_layer::SLBgplsTopoSrv6CapFlags* unsafe_arena_release_srv6capflags();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNodeAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoMtId > mtid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNodeMsd > nodemsd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoIsisAreaId > isisareaid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId > localipv4_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId > localipv6_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrgb > srgb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrlb > srlb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoFad > fad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::service_layer::SLBgplsTopoNodeFlagBits* nodeflagbits_;
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* opaquenodeattr_;
  ::service_layer::SLBgplsNodeName* nodename_;
  ::service_layer::SLBgplsTopoSrgbIsisFlags* srgbisisflags_;
  ::service_layer::SLBgplsTopoSrAlgorithm* sralgorithm_;
  ::service_layer::SLBgplsTopoSrv6CapFlags* srv6capflags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkAttr) */ {
 public:
  inline SLBgplsTopoLinkAttr() : SLBgplsTopoLinkAttr(nullptr) {}
  ~SLBgplsTopoLinkAttr() override;
  explicit constexpr SLBgplsTopoLinkAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkAttr(const SLBgplsTopoLinkAttr& from);
  SLBgplsTopoLinkAttr(SLBgplsTopoLinkAttr&& from) noexcept
    : SLBgplsTopoLinkAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkAttr& operator=(const SLBgplsTopoLinkAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkAttr& operator=(SLBgplsTopoLinkAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkAttr*>(
               &_SLBgplsTopoLinkAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SLBgplsTopoLinkAttr& a, SLBgplsTopoLinkAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkAttr";
  }
  protected:
  explicit SLBgplsTopoLinkAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkMsdFieldNumber = 2,
    kLocalIpv4RouterIdFieldNumber = 3,
    kLocalIpv6RouterIdFieldNumber = 4,
    kRemoteIpv4RouterIdFieldNumber = 5,
    kRemoteIpv6RouterIdFieldNumber = 6,
    kUnresvBandwidthFieldNumber = 10,
    kSrlgFieldNumber = 15,
    kAdjSidFieldNumber = 18,
    kLanAdjSidFieldNumber = 19,
    kBgpPeerNodeSidFieldNumber = 20,
    kBgpPeerAdjSidFieldNumber = 21,
    kBgpPeerSetSidFieldNumber = 22,
    kSrv6EndXSidFieldNumber = 23,
    kSrv6LanEndXSidFieldNumber = 24,
    kAslaFieldNumber = 32,
    kL2BundleMemberAttrFieldNumber = 33,
    kExtAdminGroupFieldNumber = 34,
    kUnknownAttrFieldNumber = 35,
    kLinkLocRemIdFieldNumber = 1,
    kAdminGroupFieldNumber = 7,
    kMaxBandwidthFieldNumber = 8,
    kMaxResvBandwidthFieldNumber = 9,
    kTeDefMetricFieldNumber = 11,
    kProtectionTypeFieldNumber = 12,
    kMplsProtoMaskFieldNumber = 13,
    kIgpMetricFieldNumber = 14,
    kOpaqueAttrFieldNumber = 16,
    kLinkNameFieldNumber = 17,
    kUniLinkDelayFieldNumber = 25,
    kMinMaxUniLinkDelayFieldNumber = 26,
    kUniDelayVarFieldNumber = 27,
    kUniLinkLossFieldNumber = 28,
    kUniResBandwidthFieldNumber = 29,
    kUniAvailBandwidthFieldNumber = 30,
    kUniUtilBandwidthFieldNumber = 31,
  };
  // repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
  int linkmsd_size() const;
  private:
  int _internal_linkmsd_size() const;
  public:
  void clear_linkmsd();
  ::service_layer::SLBgplsTopoLinkMsd* mutable_linkmsd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkMsd >*
      mutable_linkmsd();
  private:
  const ::service_layer::SLBgplsTopoLinkMsd& _internal_linkmsd(int index) const;
  ::service_layer::SLBgplsTopoLinkMsd* _internal_add_linkmsd();
  public:
  const ::service_layer::SLBgplsTopoLinkMsd& linkmsd(int index) const;
  ::service_layer::SLBgplsTopoLinkMsd* add_linkmsd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkMsd >&
      linkmsd() const;

  // repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
  int localipv4routerid_size() const;
  private:
  int _internal_localipv4routerid_size() const;
  public:
  void clear_localipv4routerid();
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* mutable_localipv4routerid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >*
      mutable_localipv4routerid();
  private:
  const ::service_layer::SLBgplsTopoLocalIpv4RouterId& _internal_localipv4routerid(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* _internal_add_localipv4routerid();
  public:
  const ::service_layer::SLBgplsTopoLocalIpv4RouterId& localipv4routerid(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* add_localipv4routerid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >&
      localipv4routerid() const;

  // repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
  int localipv6routerid_size() const;
  private:
  int _internal_localipv6routerid_size() const;
  public:
  void clear_localipv6routerid();
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* mutable_localipv6routerid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >*
      mutable_localipv6routerid();
  private:
  const ::service_layer::SLBgplsTopoLocalIpv6RouterId& _internal_localipv6routerid(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* _internal_add_localipv6routerid();
  public:
  const ::service_layer::SLBgplsTopoLocalIpv6RouterId& localipv6routerid(int index) const;
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* add_localipv6routerid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >&
      localipv6routerid() const;

  // repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
  int remoteipv4routerid_size() const;
  private:
  int _internal_remoteipv4routerid_size() const;
  public:
  void clear_remoteipv4routerid();
  ::service_layer::SLBgplsTopoRemoteIpv4RouterId* mutable_remoteipv4routerid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >*
      mutable_remoteipv4routerid();
  private:
  const ::service_layer::SLBgplsTopoRemoteIpv4RouterId& _internal_remoteipv4routerid(int index) const;
  ::service_layer::SLBgplsTopoRemoteIpv4RouterId* _internal_add_remoteipv4routerid();
  public:
  const ::service_layer::SLBgplsTopoRemoteIpv4RouterId& remoteipv4routerid(int index) const;
  ::service_layer::SLBgplsTopoRemoteIpv4RouterId* add_remoteipv4routerid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >&
      remoteipv4routerid() const;

  // repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
  int remoteipv6routerid_size() const;
  private:
  int _internal_remoteipv6routerid_size() const;
  public:
  void clear_remoteipv6routerid();
  ::service_layer::SLBgplsTopoRemoteIpv6RouterId* mutable_remoteipv6routerid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >*
      mutable_remoteipv6routerid();
  private:
  const ::service_layer::SLBgplsTopoRemoteIpv6RouterId& _internal_remoteipv6routerid(int index) const;
  ::service_layer::SLBgplsTopoRemoteIpv6RouterId* _internal_add_remoteipv6routerid();
  public:
  const ::service_layer::SLBgplsTopoRemoteIpv6RouterId& remoteipv6routerid(int index) const;
  ::service_layer::SLBgplsTopoRemoteIpv6RouterId* add_remoteipv6routerid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >&
      remoteipv6routerid() const;

  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
  int unresvbandwidth_size() const;
  private:
  int _internal_unresvbandwidth_size() const;
  public:
  void clear_unresvbandwidth();
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* mutable_unresvbandwidth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >*
      mutable_unresvbandwidth();
  private:
  const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& _internal_unresvbandwidth(int index) const;
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* _internal_add_unresvbandwidth();
  public:
  const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& unresvbandwidth(int index) const;
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* add_unresvbandwidth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >&
      unresvbandwidth() const;

  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
  int srlg_size() const;
  private:
  int _internal_srlg_size() const;
  public:
  void clear_srlg();
  ::service_layer::SLBgplsTopoLinkSrlg* mutable_srlg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >*
      mutable_srlg();
  private:
  const ::service_layer::SLBgplsTopoLinkSrlg& _internal_srlg(int index) const;
  ::service_layer::SLBgplsTopoLinkSrlg* _internal_add_srlg();
  public:
  const ::service_layer::SLBgplsTopoLinkSrlg& srlg(int index) const;
  ::service_layer::SLBgplsTopoLinkSrlg* add_srlg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >&
      srlg() const;

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
  int adjsid_size() const;
  private:
  int _internal_adjsid_size() const;
  public:
  void clear_adjsid();
  ::service_layer::SLBgplsTopoAdjSid* mutable_adjsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >*
      mutable_adjsid();
  private:
  const ::service_layer::SLBgplsTopoAdjSid& _internal_adjsid(int index) const;
  ::service_layer::SLBgplsTopoAdjSid* _internal_add_adjsid();
  public:
  const ::service_layer::SLBgplsTopoAdjSid& adjsid(int index) const;
  ::service_layer::SLBgplsTopoAdjSid* add_adjsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >&
      adjsid() const;

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
  int lanadjsid_size() const;
  private:
  int _internal_lanadjsid_size() const;
  public:
  void clear_lanadjsid();
  ::service_layer::SLBgplsTopoLanAdjSid* mutable_lanadjsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >*
      mutable_lanadjsid();
  private:
  const ::service_layer::SLBgplsTopoLanAdjSid& _internal_lanadjsid(int index) const;
  ::service_layer::SLBgplsTopoLanAdjSid* _internal_add_lanadjsid();
  public:
  const ::service_layer::SLBgplsTopoLanAdjSid& lanadjsid(int index) const;
  ::service_layer::SLBgplsTopoLanAdjSid* add_lanadjsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >&
      lanadjsid() const;

  // repeated .service_layer.SLBgplsTopoBgpPeerNodeSid BgpPeerNodeSid = 20;
  int bgppeernodesid_size() const;
  private:
  int _internal_bgppeernodesid_size() const;
  public:
  void clear_bgppeernodesid();
  ::service_layer::SLBgplsTopoBgpPeerNodeSid* mutable_bgppeernodesid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerNodeSid >*
      mutable_bgppeernodesid();
  private:
  const ::service_layer::SLBgplsTopoBgpPeerNodeSid& _internal_bgppeernodesid(int index) const;
  ::service_layer::SLBgplsTopoBgpPeerNodeSid* _internal_add_bgppeernodesid();
  public:
  const ::service_layer::SLBgplsTopoBgpPeerNodeSid& bgppeernodesid(int index) const;
  ::service_layer::SLBgplsTopoBgpPeerNodeSid* add_bgppeernodesid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerNodeSid >&
      bgppeernodesid() const;

  // repeated .service_layer.SLBgplsTopoBgpPeerAdjSid BgpPeerAdjSid = 21;
  int bgppeeradjsid_size() const;
  private:
  int _internal_bgppeeradjsid_size() const;
  public:
  void clear_bgppeeradjsid();
  ::service_layer::SLBgplsTopoBgpPeerAdjSid* mutable_bgppeeradjsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerAdjSid >*
      mutable_bgppeeradjsid();
  private:
  const ::service_layer::SLBgplsTopoBgpPeerAdjSid& _internal_bgppeeradjsid(int index) const;
  ::service_layer::SLBgplsTopoBgpPeerAdjSid* _internal_add_bgppeeradjsid();
  public:
  const ::service_layer::SLBgplsTopoBgpPeerAdjSid& bgppeeradjsid(int index) const;
  ::service_layer::SLBgplsTopoBgpPeerAdjSid* add_bgppeeradjsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerAdjSid >&
      bgppeeradjsid() const;

  // repeated .service_layer.SLBgplsTopoBgpPeerSetSid BgpPeerSetSid = 22;
  int bgppeersetsid_size() const;
  private:
  int _internal_bgppeersetsid_size() const;
  public:
  void clear_bgppeersetsid();
  ::service_layer::SLBgplsTopoBgpPeerSetSid* mutable_bgppeersetsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerSetSid >*
      mutable_bgppeersetsid();
  private:
  const ::service_layer::SLBgplsTopoBgpPeerSetSid& _internal_bgppeersetsid(int index) const;
  ::service_layer::SLBgplsTopoBgpPeerSetSid* _internal_add_bgppeersetsid();
  public:
  const ::service_layer::SLBgplsTopoBgpPeerSetSid& bgppeersetsid(int index) const;
  ::service_layer::SLBgplsTopoBgpPeerSetSid* add_bgppeersetsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerSetSid >&
      bgppeersetsid() const;

  // repeated .service_layer.SLBgplsTopoSrv6EndXSid Srv6EndXSid = 23;
  int srv6endxsid_size() const;
  private:
  int _internal_srv6endxsid_size() const;
  public:
  void clear_srv6endxsid();
  ::service_layer::SLBgplsTopoSrv6EndXSid* mutable_srv6endxsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6EndXSid >*
      mutable_srv6endxsid();
  private:
  const ::service_layer::SLBgplsTopoSrv6EndXSid& _internal_srv6endxsid(int index) const;
  ::service_layer::SLBgplsTopoSrv6EndXSid* _internal_add_srv6endxsid();
  public:
  const ::service_layer::SLBgplsTopoSrv6EndXSid& srv6endxsid(int index) const;
  ::service_layer::SLBgplsTopoSrv6EndXSid* add_srv6endxsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6EndXSid >&
      srv6endxsid() const;

  // repeated .service_layer.SLBgplsTopoSrv6LanEndXSid Srv6LanEndXSid = 24;
  int srv6lanendxsid_size() const;
  private:
  int _internal_srv6lanendxsid_size() const;
  public:
  void clear_srv6lanendxsid();
  ::service_layer::SLBgplsTopoSrv6LanEndXSid* mutable_srv6lanendxsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6LanEndXSid >*
      mutable_srv6lanendxsid();
  private:
  const ::service_layer::SLBgplsTopoSrv6LanEndXSid& _internal_srv6lanendxsid(int index) const;
  ::service_layer::SLBgplsTopoSrv6LanEndXSid* _internal_add_srv6lanendxsid();
  public:
  const ::service_layer::SLBgplsTopoSrv6LanEndXSid& srv6lanendxsid(int index) const;
  ::service_layer::SLBgplsTopoSrv6LanEndXSid* add_srv6lanendxsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6LanEndXSid >&
      srv6lanendxsid() const;

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 32;
  int asla_size() const;
  private:
  int _internal_asla_size() const;
  public:
  void clear_asla();
  ::service_layer::SLBgplsTopoAslaAttr* mutable_asla(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >*
      mutable_asla();
  private:
  const ::service_layer::SLBgplsTopoAslaAttr& _internal_asla(int index) const;
  ::service_layer::SLBgplsTopoAslaAttr* _internal_add_asla();
  public:
  const ::service_layer::SLBgplsTopoAslaAttr& asla(int index) const;
  ::service_layer::SLBgplsTopoAslaAttr* add_asla();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >&
      asla() const;

  // repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 33;
  int l2bundlememberattr_size() const;
  private:
  int _internal_l2bundlememberattr_size() const;
  public:
  void clear_l2bundlememberattr();
  ::service_layer::SLBgplsTopoL2BundleMemberAttr* mutable_l2bundlememberattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoL2BundleMemberAttr >*
      mutable_l2bundlememberattr();
  private:
  const ::service_layer::SLBgplsTopoL2BundleMemberAttr& _internal_l2bundlememberattr(int index) const;
  ::service_layer::SLBgplsTopoL2BundleMemberAttr* _internal_add_l2bundlememberattr();
  public:
  const ::service_layer::SLBgplsTopoL2BundleMemberAttr& l2bundlememberattr(int index) const;
  ::service_layer::SLBgplsTopoL2BundleMemberAttr* add_l2bundlememberattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoL2BundleMemberAttr >&
      l2bundlememberattr() const;

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 34;
  int extadmingroup_size() const;
  private:
  int _internal_extadmingroup_size() const;
  public:
  void clear_extadmingroup();
  ::service_layer::SLBgplsTopoExtAdminGroup* mutable_extadmingroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >*
      mutable_extadmingroup();
  private:
  const ::service_layer::SLBgplsTopoExtAdminGroup& _internal_extadmingroup(int index) const;
  ::service_layer::SLBgplsTopoExtAdminGroup* _internal_add_extadmingroup();
  public:
  const ::service_layer::SLBgplsTopoExtAdminGroup& extadmingroup(int index) const;
  ::service_layer::SLBgplsTopoExtAdminGroup* add_extadmingroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >&
      extadmingroup() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 35;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
  bool has_linklocremid() const;
  private:
  bool _internal_has_linklocremid() const;
  public:
  void clear_linklocremid();
  const ::service_layer::SLBplsTopoLinkLocRemId& linklocremid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBplsTopoLinkLocRemId* release_linklocremid();
  ::service_layer::SLBplsTopoLinkLocRemId* mutable_linklocremid();
  void set_allocated_linklocremid(::service_layer::SLBplsTopoLinkLocRemId* linklocremid);
  private:
  const ::service_layer::SLBplsTopoLinkLocRemId& _internal_linklocremid() const;
  ::service_layer::SLBplsTopoLinkLocRemId* _internal_mutable_linklocremid();
  public:
  void unsafe_arena_set_allocated_linklocremid(
      ::service_layer::SLBplsTopoLinkLocRemId* linklocremid);
  ::service_layer::SLBplsTopoLinkLocRemId* unsafe_arena_release_linklocremid();

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 7;
  bool has_admingroup() const;
  private:
  bool _internal_has_admingroup() const;
  public:
  void clear_admingroup();
  const ::service_layer::SLBgplsTopoAdminGroup& admingroup() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoAdminGroup* release_admingroup();
  ::service_layer::SLBgplsTopoAdminGroup* mutable_admingroup();
  void set_allocated_admingroup(::service_layer::SLBgplsTopoAdminGroup* admingroup);
  private:
  const ::service_layer::SLBgplsTopoAdminGroup& _internal_admingroup() const;
  ::service_layer::SLBgplsTopoAdminGroup* _internal_mutable_admingroup();
  public:
  void unsafe_arena_set_allocated_admingroup(
      ::service_layer::SLBgplsTopoAdminGroup* admingroup);
  ::service_layer::SLBgplsTopoAdminGroup* unsafe_arena_release_admingroup();

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
  bool has_maxbandwidth() const;
  private:
  bool _internal_has_maxbandwidth() const;
  public:
  void clear_maxbandwidth();
  const ::service_layer::SLBgplsTopoLinkMaxBandwidth& maxbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkMaxBandwidth* release_maxbandwidth();
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* mutable_maxbandwidth();
  void set_allocated_maxbandwidth(::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth);
  private:
  const ::service_layer::SLBgplsTopoLinkMaxBandwidth& _internal_maxbandwidth() const;
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* _internal_mutable_maxbandwidth();
  public:
  void unsafe_arena_set_allocated_maxbandwidth(
      ::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth);
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* unsafe_arena_release_maxbandwidth();

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
  bool has_maxresvbandwidth() const;
  private:
  bool _internal_has_maxresvbandwidth() const;
  public:
  void clear_maxresvbandwidth();
  const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& maxresvbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* release_maxresvbandwidth();
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* mutable_maxresvbandwidth();
  void set_allocated_maxresvbandwidth(::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth);
  private:
  const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& _internal_maxresvbandwidth() const;
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* _internal_mutable_maxresvbandwidth();
  public:
  void unsafe_arena_set_allocated_maxresvbandwidth(
      ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth);
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* unsafe_arena_release_maxresvbandwidth();

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
  bool has_tedefmetric() const;
  private:
  bool _internal_has_tedefmetric() const;
  public:
  void clear_tedefmetric();
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkTeDefaultMetric* release_tedefmetric();
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* mutable_tedefmetric();
  void set_allocated_tedefmetric(::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric);
  private:
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& _internal_tedefmetric() const;
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* _internal_mutable_tedefmetric();
  public:
  void unsafe_arena_set_allocated_tedefmetric(
      ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric);
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* unsafe_arena_release_tedefmetric();

  // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 12;
  bool has_protectiontype() const;
  private:
  bool _internal_has_protectiontype() const;
  public:
  void clear_protectiontype();
  const ::service_layer::SLBgplsTopoLinkProtectionType& protectiontype() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkProtectionType* release_protectiontype();
  ::service_layer::SLBgplsTopoLinkProtectionType* mutable_protectiontype();
  void set_allocated_protectiontype(::service_layer::SLBgplsTopoLinkProtectionType* protectiontype);
  private:
  const ::service_layer::SLBgplsTopoLinkProtectionType& _internal_protectiontype() const;
  ::service_layer::SLBgplsTopoLinkProtectionType* _internal_mutable_protectiontype();
  public:
  void unsafe_arena_set_allocated_protectiontype(
      ::service_layer::SLBgplsTopoLinkProtectionType* protectiontype);
  ::service_layer::SLBgplsTopoLinkProtectionType* unsafe_arena_release_protectiontype();

  // .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
  bool has_mplsprotomask() const;
  private:
  bool _internal_has_mplsprotomask() const;
  public:
  void clear_mplsprotomask();
  const ::service_layer::SLBgplsTopoLinkMplsProtoMask& mplsprotomask() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkMplsProtoMask* release_mplsprotomask();
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* mutable_mplsprotomask();
  void set_allocated_mplsprotomask(::service_layer::SLBgplsTopoLinkMplsProtoMask* mplsprotomask);
  private:
  const ::service_layer::SLBgplsTopoLinkMplsProtoMask& _internal_mplsprotomask() const;
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* _internal_mutable_mplsprotomask();
  public:
  void unsafe_arena_set_allocated_mplsprotomask(
      ::service_layer::SLBgplsTopoLinkMplsProtoMask* mplsprotomask);
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* unsafe_arena_release_mplsprotomask();

  // .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
  bool has_igpmetric() const;
  private:
  bool _internal_has_igpmetric() const;
  public:
  void clear_igpmetric();
  const ::service_layer::SLBgplsTopoLinkIgpMetric& igpmetric() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkIgpMetric* release_igpmetric();
  ::service_layer::SLBgplsTopoLinkIgpMetric* mutable_igpmetric();
  void set_allocated_igpmetric(::service_layer::SLBgplsTopoLinkIgpMetric* igpmetric);
  private:
  const ::service_layer::SLBgplsTopoLinkIgpMetric& _internal_igpmetric() const;
  ::service_layer::SLBgplsTopoLinkIgpMetric* _internal_mutable_igpmetric();
  public:
  void unsafe_arena_set_allocated_igpmetric(
      ::service_layer::SLBgplsTopoLinkIgpMetric* igpmetric);
  ::service_layer::SLBgplsTopoLinkIgpMetric* unsafe_arena_release_igpmetric();

  // .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
  bool has_opaqueattr() const;
  private:
  bool _internal_has_opaqueattr() const;
  public:
  void clear_opaqueattr();
  const ::service_layer::SLBgplsTopoLinkOpaqueAttr& opaqueattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkOpaqueAttr* release_opaqueattr();
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* mutable_opaqueattr();
  void set_allocated_opaqueattr(::service_layer::SLBgplsTopoLinkOpaqueAttr* opaqueattr);
  private:
  const ::service_layer::SLBgplsTopoLinkOpaqueAttr& _internal_opaqueattr() const;
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* _internal_mutable_opaqueattr();
  public:
  void unsafe_arena_set_allocated_opaqueattr(
      ::service_layer::SLBgplsTopoLinkOpaqueAttr* opaqueattr);
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* unsafe_arena_release_opaqueattr();

  // .service_layer.SLBgplsTopoLinkName LinkName = 17;
  bool has_linkname() const;
  private:
  bool _internal_has_linkname() const;
  public:
  void clear_linkname();
  const ::service_layer::SLBgplsTopoLinkName& linkname() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkName* release_linkname();
  ::service_layer::SLBgplsTopoLinkName* mutable_linkname();
  void set_allocated_linkname(::service_layer::SLBgplsTopoLinkName* linkname);
  private:
  const ::service_layer::SLBgplsTopoLinkName& _internal_linkname() const;
  ::service_layer::SLBgplsTopoLinkName* _internal_mutable_linkname();
  public:
  void unsafe_arena_set_allocated_linkname(
      ::service_layer::SLBgplsTopoLinkName* linkname);
  ::service_layer::SLBgplsTopoLinkName* unsafe_arena_release_linkname();

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 25;
  bool has_unilinkdelay() const;
  private:
  bool _internal_has_unilinkdelay() const;
  public:
  void clear_unilinkdelay();
  const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniLinkDelay* release_unilinkdelay();
  ::service_layer::SLBgplsTopoUniLinkDelay* mutable_unilinkdelay();
  void set_allocated_unilinkdelay(::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay);
  private:
  const ::service_layer::SLBgplsTopoUniLinkDelay& _internal_unilinkdelay() const;
  ::service_layer::SLBgplsTopoUniLinkDelay* _internal_mutable_unilinkdelay();
  public:
  void unsafe_arena_set_allocated_unilinkdelay(
      ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay);
  ::service_layer::SLBgplsTopoUniLinkDelay* unsafe_arena_release_unilinkdelay();

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 26;
  bool has_minmaxunilinkdelay() const;
  private:
  bool _internal_has_minmaxunilinkdelay() const;
  public:
  void clear_minmaxunilinkdelay();
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxunilinkdelay() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* release_minmaxunilinkdelay();
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* mutable_minmaxunilinkdelay();
  void set_allocated_minmaxunilinkdelay(::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxunilinkdelay);
  private:
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& _internal_minmaxunilinkdelay() const;
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* _internal_mutable_minmaxunilinkdelay();
  public:
  void unsafe_arena_set_allocated_minmaxunilinkdelay(
      ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxunilinkdelay);
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* unsafe_arena_release_minmaxunilinkdelay();

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 27;
  bool has_unidelayvar() const;
  private:
  bool _internal_has_unidelayvar() const;
  public:
  void clear_unidelayvar();
  const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvar() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniDelayVar* release_unidelayvar();
  ::service_layer::SLBgplsTopoUniDelayVar* mutable_unidelayvar();
  void set_allocated_unidelayvar(::service_layer::SLBgplsTopoUniDelayVar* unidelayvar);
  private:
  const ::service_layer::SLBgplsTopoUniDelayVar& _internal_unidelayvar() const;
  ::service_layer::SLBgplsTopoUniDelayVar* _internal_mutable_unidelayvar();
  public:
  void unsafe_arena_set_allocated_unidelayvar(
      ::service_layer::SLBgplsTopoUniDelayVar* unidelayvar);
  ::service_layer::SLBgplsTopoUniDelayVar* unsafe_arena_release_unidelayvar();

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 28;
  bool has_unilinkloss() const;
  private:
  bool _internal_has_unilinkloss() const;
  public:
  void clear_unilinkloss();
  const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniLinkLoss* release_unilinkloss();
  ::service_layer::SLBgplsTopoUniLinkLoss* mutable_unilinkloss();
  void set_allocated_unilinkloss(::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss);
  private:
  const ::service_layer::SLBgplsTopoUniLinkLoss& _internal_unilinkloss() const;
  ::service_layer::SLBgplsTopoUniLinkLoss* _internal_mutable_unilinkloss();
  public:
  void unsafe_arena_set_allocated_unilinkloss(
      ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss);
  ::service_layer::SLBgplsTopoUniLinkLoss* unsafe_arena_release_unilinkloss();

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 29;
  bool has_uniresbandwidth() const;
  private:
  bool _internal_has_uniresbandwidth() const;
  public:
  void clear_uniresbandwidth();
  const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniResBandwidth* release_uniresbandwidth();
  ::service_layer::SLBgplsTopoUniResBandwidth* mutable_uniresbandwidth();
  void set_allocated_uniresbandwidth(::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniResBandwidth& _internal_uniresbandwidth() const;
  ::service_layer::SLBgplsTopoUniResBandwidth* _internal_mutable_uniresbandwidth();
  public:
  void unsafe_arena_set_allocated_uniresbandwidth(
      ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth);
  ::service_layer::SLBgplsTopoUniResBandwidth* unsafe_arena_release_uniresbandwidth();

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 30;
  bool has_uniavailbandwidth() const;
  private:
  bool _internal_has_uniavailbandwidth() const;
  public:
  void clear_uniavailbandwidth();
  const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniAvailBandwidth* release_uniavailbandwidth();
  ::service_layer::SLBgplsTopoUniAvailBandwidth* mutable_uniavailbandwidth();
  void set_allocated_uniavailbandwidth(::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniAvailBandwidth& _internal_uniavailbandwidth() const;
  ::service_layer::SLBgplsTopoUniAvailBandwidth* _internal_mutable_uniavailbandwidth();
  public:
  void unsafe_arena_set_allocated_uniavailbandwidth(
      ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth);
  ::service_layer::SLBgplsTopoUniAvailBandwidth* unsafe_arena_release_uniavailbandwidth();

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 31;
  bool has_uniutilbandwidth() const;
  private:
  bool _internal_has_uniutilbandwidth() const;
  public:
  void clear_uniutilbandwidth();
  const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniUtilBandwidth* release_uniutilbandwidth();
  ::service_layer::SLBgplsTopoUniUtilBandwidth* mutable_uniutilbandwidth();
  void set_allocated_uniutilbandwidth(::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniUtilBandwidth& _internal_uniutilbandwidth() const;
  ::service_layer::SLBgplsTopoUniUtilBandwidth* _internal_mutable_uniutilbandwidth();
  public:
  void unsafe_arena_set_allocated_uniutilbandwidth(
      ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth);
  ::service_layer::SLBgplsTopoUniUtilBandwidth* unsafe_arena_release_uniutilbandwidth();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkMsd > linkmsd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId > localipv4routerid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId > localipv6routerid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv4RouterId > remoteipv4routerid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv6RouterId > remoteipv6routerid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth > unresvbandwidth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg > srlg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid > adjsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid > lanadjsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerNodeSid > bgppeernodesid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerAdjSid > bgppeeradjsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerSetSid > bgppeersetsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6EndXSid > srv6endxsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6LanEndXSid > srv6lanendxsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr > asla_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoL2BundleMemberAttr > l2bundlememberattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup > extadmingroup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::service_layer::SLBplsTopoLinkLocRemId* linklocremid_;
  ::service_layer::SLBgplsTopoAdminGroup* admingroup_;
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth_;
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth_;
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric_;
  ::service_layer::SLBgplsTopoLinkProtectionType* protectiontype_;
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* mplsprotomask_;
  ::service_layer::SLBgplsTopoLinkIgpMetric* igpmetric_;
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* opaqueattr_;
  ::service_layer::SLBgplsTopoLinkName* linkname_;
  ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay_;
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxunilinkdelay_;
  ::service_layer::SLBgplsTopoUniDelayVar* unidelayvar_;
  ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss_;
  ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth_;
  ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth_;
  ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixAttr) */ {
 public:
  inline SLBgplsTopoPrefixAttr() : SLBgplsTopoPrefixAttr(nullptr) {}
  ~SLBgplsTopoPrefixAttr() override;
  explicit constexpr SLBgplsTopoPrefixAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixAttr(const SLBgplsTopoPrefixAttr& from);
  SLBgplsTopoPrefixAttr(SLBgplsTopoPrefixAttr&& from) noexcept
    : SLBgplsTopoPrefixAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixAttr& operator=(const SLBgplsTopoPrefixAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixAttr& operator=(SLBgplsTopoPrefixAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixAttr*>(
               &_SLBgplsTopoPrefixAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SLBgplsTopoPrefixAttr& a, SLBgplsTopoPrefixAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixAttr";
  }
  protected:
  explicit SLBgplsTopoPrefixAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFapmFieldNumber = 1,
    kIgpRouteTagFieldNumber = 3,
    kIgpExtRouteTagFieldNumber = 4,
    kSidFieldNumber = 8,
    kUnknownAttrFieldNumber = 13,
    kIgpFlagsFieldNumber = 2,
    kMetricFieldNumber = 5,
    kOspfFwdAddrFieldNumber = 6,
    kOpaqueAttrFieldNumber = 7,
    kRangeFieldNumber = 9,
    kSrv6LocFieldNumber = 10,
    kAttrFlagsFieldNumber = 11,
    kSrcRouterIdFieldNumber = 12,
  };
  // repeated .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
  int fapm_size() const;
  private:
  int _internal_fapm_size() const;
  public:
  void clear_fapm();
  ::service_layer::SLBgplsTopoPrefixFAPM* mutable_fapm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixFAPM >*
      mutable_fapm();
  private:
  const ::service_layer::SLBgplsTopoPrefixFAPM& _internal_fapm(int index) const;
  ::service_layer::SLBgplsTopoPrefixFAPM* _internal_add_fapm();
  public:
  const ::service_layer::SLBgplsTopoPrefixFAPM& fapm(int index) const;
  ::service_layer::SLBgplsTopoPrefixFAPM* add_fapm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixFAPM >&
      fapm() const;

  // repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
  int igproutetag_size() const;
  private:
  int _internal_igproutetag_size() const;
  public:
  void clear_igproutetag();
  ::service_layer::SLBgplsTopoPrefixIgpRouteTag* mutable_igproutetag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >*
      mutable_igproutetag();
  private:
  const ::service_layer::SLBgplsTopoPrefixIgpRouteTag& _internal_igproutetag(int index) const;
  ::service_layer::SLBgplsTopoPrefixIgpRouteTag* _internal_add_igproutetag();
  public:
  const ::service_layer::SLBgplsTopoPrefixIgpRouteTag& igproutetag(int index) const;
  ::service_layer::SLBgplsTopoPrefixIgpRouteTag* add_igproutetag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >&
      igproutetag() const;

  // repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
  int igpextroutetag_size() const;
  private:
  int _internal_igpextroutetag_size() const;
  public:
  void clear_igpextroutetag();
  ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* mutable_igpextroutetag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >*
      mutable_igpextroutetag();
  private:
  const ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag& _internal_igpextroutetag(int index) const;
  ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* _internal_add_igpextroutetag();
  public:
  const ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag& igpextroutetag(int index) const;
  ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* add_igpextroutetag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >&
      igpextroutetag() const;

  // repeated .service_layer.SLBgplsTopoPrefixSid Sid = 8;
  int sid_size() const;
  private:
  int _internal_sid_size() const;
  public:
  void clear_sid();
  ::service_layer::SLBgplsTopoPrefixSid* mutable_sid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixSid >*
      mutable_sid();
  private:
  const ::service_layer::SLBgplsTopoPrefixSid& _internal_sid(int index) const;
  ::service_layer::SLBgplsTopoPrefixSid* _internal_add_sid();
  public:
  const ::service_layer::SLBgplsTopoPrefixSid& sid(int index) const;
  ::service_layer::SLBgplsTopoPrefixSid* add_sid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixSid >&
      sid() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 13;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
  bool has_igpflags() const;
  private:
  bool _internal_has_igpflags() const;
  public:
  void clear_igpflags();
  const ::service_layer::SLBgplsTopoPrefixIgpFlags& igpflags() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixIgpFlags* release_igpflags();
  ::service_layer::SLBgplsTopoPrefixIgpFlags* mutable_igpflags();
  void set_allocated_igpflags(::service_layer::SLBgplsTopoPrefixIgpFlags* igpflags);
  private:
  const ::service_layer::SLBgplsTopoPrefixIgpFlags& _internal_igpflags() const;
  ::service_layer::SLBgplsTopoPrefixIgpFlags* _internal_mutable_igpflags();
  public:
  void unsafe_arena_set_allocated_igpflags(
      ::service_layer::SLBgplsTopoPrefixIgpFlags* igpflags);
  ::service_layer::SLBgplsTopoPrefixIgpFlags* unsafe_arena_release_igpflags();

  // .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::service_layer::SLBgplsTopoPrefixMetric& metric() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixMetric* release_metric();
  ::service_layer::SLBgplsTopoPrefixMetric* mutable_metric();
  void set_allocated_metric(::service_layer::SLBgplsTopoPrefixMetric* metric);
  private:
  const ::service_layer::SLBgplsTopoPrefixMetric& _internal_metric() const;
  ::service_layer::SLBgplsTopoPrefixMetric* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::service_layer::SLBgplsTopoPrefixMetric* metric);
  ::service_layer::SLBgplsTopoPrefixMetric* unsafe_arena_release_metric();

  // .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
  bool has_ospffwdaddr() const;
  private:
  bool _internal_has_ospffwdaddr() const;
  public:
  void clear_ospffwdaddr();
  const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr& ospffwdaddr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* release_ospffwdaddr();
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* mutable_ospffwdaddr();
  void set_allocated_ospffwdaddr(::service_layer::SLBgplsTopoPrefixOspfFwdAddr* ospffwdaddr);
  private:
  const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr& _internal_ospffwdaddr() const;
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* _internal_mutable_ospffwdaddr();
  public:
  void unsafe_arena_set_allocated_ospffwdaddr(
      ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* ospffwdaddr);
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* unsafe_arena_release_ospffwdaddr();

  // .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
  bool has_opaqueattr() const;
  private:
  bool _internal_has_opaqueattr() const;
  public:
  void clear_opaqueattr();
  const ::service_layer::SLBgplsTopoPrefixOpaqueAttr& opaqueattr() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixOpaqueAttr* release_opaqueattr();
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* mutable_opaqueattr();
  void set_allocated_opaqueattr(::service_layer::SLBgplsTopoPrefixOpaqueAttr* opaqueattr);
  private:
  const ::service_layer::SLBgplsTopoPrefixOpaqueAttr& _internal_opaqueattr() const;
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* _internal_mutable_opaqueattr();
  public:
  void unsafe_arena_set_allocated_opaqueattr(
      ::service_layer::SLBgplsTopoPrefixOpaqueAttr* opaqueattr);
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* unsafe_arena_release_opaqueattr();

  // .service_layer.SLBgplsTopoPrefixRange Range = 9;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::service_layer::SLBgplsTopoPrefixRange& range() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixRange* release_range();
  ::service_layer::SLBgplsTopoPrefixRange* mutable_range();
  void set_allocated_range(::service_layer::SLBgplsTopoPrefixRange* range);
  private:
  const ::service_layer::SLBgplsTopoPrefixRange& _internal_range() const;
  ::service_layer::SLBgplsTopoPrefixRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::service_layer::SLBgplsTopoPrefixRange* range);
  ::service_layer::SLBgplsTopoPrefixRange* unsafe_arena_release_range();

  // .service_layer.SLBgplsTopoPrefixSrv6Loc Srv6Loc = 10;
  bool has_srv6loc() const;
  private:
  bool _internal_has_srv6loc() const;
  public:
  void clear_srv6loc();
  const ::service_layer::SLBgplsTopoPrefixSrv6Loc& srv6loc() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixSrv6Loc* release_srv6loc();
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* mutable_srv6loc();
  void set_allocated_srv6loc(::service_layer::SLBgplsTopoPrefixSrv6Loc* srv6loc);
  private:
  const ::service_layer::SLBgplsTopoPrefixSrv6Loc& _internal_srv6loc() const;
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* _internal_mutable_srv6loc();
  public:
  void unsafe_arena_set_allocated_srv6loc(
      ::service_layer::SLBgplsTopoPrefixSrv6Loc* srv6loc);
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* unsafe_arena_release_srv6loc();

  // .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 11;
  bool has_attrflags() const;
  private:
  bool _internal_has_attrflags() const;
  public:
  void clear_attrflags();
  const ::service_layer::SLBgplsTopoPrefixAttrFlags& attrflags() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixAttrFlags* release_attrflags();
  ::service_layer::SLBgplsTopoPrefixAttrFlags* mutable_attrflags();
  void set_allocated_attrflags(::service_layer::SLBgplsTopoPrefixAttrFlags* attrflags);
  private:
  const ::service_layer::SLBgplsTopoPrefixAttrFlags& _internal_attrflags() const;
  ::service_layer::SLBgplsTopoPrefixAttrFlags* _internal_mutable_attrflags();
  public:
  void unsafe_arena_set_allocated_attrflags(
      ::service_layer::SLBgplsTopoPrefixAttrFlags* attrflags);
  ::service_layer::SLBgplsTopoPrefixAttrFlags* unsafe_arena_release_attrflags();

  // .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 12;
  bool has_srcrouterid() const;
  private:
  bool _internal_has_srcrouterid() const;
  public:
  void clear_srcrouterid();
  const ::service_layer::SLBgplsTopoPrefixSrcRouterId& srcrouterid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoPrefixSrcRouterId* release_srcrouterid();
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* mutable_srcrouterid();
  void set_allocated_srcrouterid(::service_layer::SLBgplsTopoPrefixSrcRouterId* srcrouterid);
  private:
  const ::service_layer::SLBgplsTopoPrefixSrcRouterId& _internal_srcrouterid() const;
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* _internal_mutable_srcrouterid();
  public:
  void unsafe_arena_set_allocated_srcrouterid(
      ::service_layer::SLBgplsTopoPrefixSrcRouterId* srcrouterid);
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* unsafe_arena_release_srcrouterid();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixFAPM > fapm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpRouteTag > igproutetag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag > igpextroutetag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixSid > sid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::service_layer::SLBgplsTopoPrefixIgpFlags* igpflags_;
  ::service_layer::SLBgplsTopoPrefixMetric* metric_;
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* ospffwdaddr_;
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* opaqueattr_;
  ::service_layer::SLBgplsTopoPrefixRange* range_;
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* srv6loc_;
  ::service_layer::SLBgplsTopoPrefixAttrFlags* attrflags_;
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* srcrouterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6SidAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6SidAttr) */ {
 public:
  inline SLBgplsTopoSrv6SidAttr() : SLBgplsTopoSrv6SidAttr(nullptr) {}
  ~SLBgplsTopoSrv6SidAttr() override;
  explicit constexpr SLBgplsTopoSrv6SidAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6SidAttr(const SLBgplsTopoSrv6SidAttr& from);
  SLBgplsTopoSrv6SidAttr(SLBgplsTopoSrv6SidAttr&& from) noexcept
    : SLBgplsTopoSrv6SidAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6SidAttr& operator=(const SLBgplsTopoSrv6SidAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6SidAttr& operator=(SLBgplsTopoSrv6SidAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6SidAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6SidAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6SidAttr*>(
               &_SLBgplsTopoSrv6SidAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SLBgplsTopoSrv6SidAttr& a, SLBgplsTopoSrv6SidAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6SidAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6SidAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6SidAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6SidAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6SidAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6SidAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6SidAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6SidAttr";
  }
  protected:
  explicit SLBgplsTopoSrv6SidAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpPeerNodeSidFieldNumber = 2,
    kUnknownAttrFieldNumber = 4,
    kEndPointBehaviorFieldNumber = 1,
    kSidStructFieldNumber = 3,
  };
  // repeated .service_layer.SLBgplsTopoSrv6BgpPeerNodeSid BgpPeerNodeSid = 2;
  int bgppeernodesid_size() const;
  private:
  int _internal_bgppeernodesid_size() const;
  public:
  void clear_bgppeernodesid();
  ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* mutable_bgppeernodesid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid >*
      mutable_bgppeernodesid();
  private:
  const ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid& _internal_bgppeernodesid(int index) const;
  ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* _internal_add_bgppeernodesid();
  public:
  const ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid& bgppeernodesid(int index) const;
  ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* add_bgppeernodesid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid >&
      bgppeernodesid() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 4;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehavior = 1;
  bool has_endpointbehavior() const;
  private:
  bool _internal_has_endpointbehavior() const;
  public:
  void clear_endpointbehavior();
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& endpointbehavior() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6EndPointBehavior* release_endpointbehavior();
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* mutable_endpointbehavior();
  void set_allocated_endpointbehavior(::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehavior);
  private:
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& _internal_endpointbehavior() const;
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* _internal_mutable_endpointbehavior();
  public:
  void unsafe_arena_set_allocated_endpointbehavior(
      ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehavior);
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* unsafe_arena_release_endpointbehavior();

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 3;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidStruct* release_sidstruct();
  ::service_layer::SLBgplsTopoSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLBgplsTopoSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  ::service_layer::SLBgplsTopoSrv6SidStruct* unsafe_arena_release_sidstruct();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6SidAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid > bgppeernodesid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehavior_;
  ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicyAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicyAttr) */ {
 public:
  inline SLBgplsTopoSrPolicyAttr() : SLBgplsTopoSrPolicyAttr(nullptr) {}
  ~SLBgplsTopoSrPolicyAttr() override;
  explicit constexpr SLBgplsTopoSrPolicyAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicyAttr(const SLBgplsTopoSrPolicyAttr& from);
  SLBgplsTopoSrPolicyAttr(SLBgplsTopoSrPolicyAttr&& from) noexcept
    : SLBgplsTopoSrPolicyAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicyAttr& operator=(const SLBgplsTopoSrPolicyAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicyAttr& operator=(SLBgplsTopoSrPolicyAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicyAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrPolicyAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicyAttr*>(
               &_SLBgplsTopoSrPolicyAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SLBgplsTopoSrPolicyAttr& a, SLBgplsTopoSrPolicyAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicyAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicyAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicyAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicyAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicyAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicyAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicyAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicyAttr";
  }
  protected:
  explicit SLBgplsTopoSrPolicyAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegListsFieldNumber = 5,
    kUnknownAttrFieldNumber = 8,
    kSrBsidFieldNumber = 1,
    kCpStateFieldNumber = 2,
    kCpNameFieldNumber = 3,
    kCpConstraintsFieldNumber = 4,
    kSrv6BsidFieldNumber = 6,
    kSrPolicyNameFieldNumber = 7,
  };
  // repeated .service_layer.SLBgplsTopoSrSegList SegLists = 5;
  int seglists_size() const;
  private:
  int _internal_seglists_size() const;
  public:
  void clear_seglists();
  ::service_layer::SLBgplsTopoSrSegList* mutable_seglists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegList >*
      mutable_seglists();
  private:
  const ::service_layer::SLBgplsTopoSrSegList& _internal_seglists(int index) const;
  ::service_layer::SLBgplsTopoSrSegList* _internal_add_seglists();
  public:
  const ::service_layer::SLBgplsTopoSrSegList& seglists(int index) const;
  ::service_layer::SLBgplsTopoSrSegList* add_seglists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegList >&
      seglists() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 8;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // .service_layer.SLBgplsTopoSrBindingSid SrBsid = 1;
  bool has_srbsid() const;
  private:
  bool _internal_has_srbsid() const;
  public:
  void clear_srbsid();
  const ::service_layer::SLBgplsTopoSrBindingSid& srbsid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrBindingSid* release_srbsid();
  ::service_layer::SLBgplsTopoSrBindingSid* mutable_srbsid();
  void set_allocated_srbsid(::service_layer::SLBgplsTopoSrBindingSid* srbsid);
  private:
  const ::service_layer::SLBgplsTopoSrBindingSid& _internal_srbsid() const;
  ::service_layer::SLBgplsTopoSrBindingSid* _internal_mutable_srbsid();
  public:
  void unsafe_arena_set_allocated_srbsid(
      ::service_layer::SLBgplsTopoSrBindingSid* srbsid);
  ::service_layer::SLBgplsTopoSrBindingSid* unsafe_arena_release_srbsid();

  // .service_layer.SLBgplsTopoSrCpState CpState = 2;
  bool has_cpstate() const;
  private:
  bool _internal_has_cpstate() const;
  public:
  void clear_cpstate();
  const ::service_layer::SLBgplsTopoSrCpState& cpstate() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrCpState* release_cpstate();
  ::service_layer::SLBgplsTopoSrCpState* mutable_cpstate();
  void set_allocated_cpstate(::service_layer::SLBgplsTopoSrCpState* cpstate);
  private:
  const ::service_layer::SLBgplsTopoSrCpState& _internal_cpstate() const;
  ::service_layer::SLBgplsTopoSrCpState* _internal_mutable_cpstate();
  public:
  void unsafe_arena_set_allocated_cpstate(
      ::service_layer::SLBgplsTopoSrCpState* cpstate);
  ::service_layer::SLBgplsTopoSrCpState* unsafe_arena_release_cpstate();

  // .service_layer.SLBgplsTopoSrCpName CpName = 3;
  bool has_cpname() const;
  private:
  bool _internal_has_cpname() const;
  public:
  void clear_cpname();
  const ::service_layer::SLBgplsTopoSrCpName& cpname() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrCpName* release_cpname();
  ::service_layer::SLBgplsTopoSrCpName* mutable_cpname();
  void set_allocated_cpname(::service_layer::SLBgplsTopoSrCpName* cpname);
  private:
  const ::service_layer::SLBgplsTopoSrCpName& _internal_cpname() const;
  ::service_layer::SLBgplsTopoSrCpName* _internal_mutable_cpname();
  public:
  void unsafe_arena_set_allocated_cpname(
      ::service_layer::SLBgplsTopoSrCpName* cpname);
  ::service_layer::SLBgplsTopoSrCpName* unsafe_arena_release_cpname();

  // .service_layer.SLBgplsTopoSrCpConstraints CpConstraints = 4;
  bool has_cpconstraints() const;
  private:
  bool _internal_has_cpconstraints() const;
  public:
  void clear_cpconstraints();
  const ::service_layer::SLBgplsTopoSrCpConstraints& cpconstraints() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrCpConstraints* release_cpconstraints();
  ::service_layer::SLBgplsTopoSrCpConstraints* mutable_cpconstraints();
  void set_allocated_cpconstraints(::service_layer::SLBgplsTopoSrCpConstraints* cpconstraints);
  private:
  const ::service_layer::SLBgplsTopoSrCpConstraints& _internal_cpconstraints() const;
  ::service_layer::SLBgplsTopoSrCpConstraints* _internal_mutable_cpconstraints();
  public:
  void unsafe_arena_set_allocated_cpconstraints(
      ::service_layer::SLBgplsTopoSrCpConstraints* cpconstraints);
  ::service_layer::SLBgplsTopoSrCpConstraints* unsafe_arena_release_cpconstraints();

  // .service_layer.SLBgplsTopoSrv6BindingSid Srv6Bsid = 6;
  bool has_srv6bsid() const;
  private:
  bool _internal_has_srv6bsid() const;
  public:
  void clear_srv6bsid();
  const ::service_layer::SLBgplsTopoSrv6BindingSid& srv6bsid() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6BindingSid* release_srv6bsid();
  ::service_layer::SLBgplsTopoSrv6BindingSid* mutable_srv6bsid();
  void set_allocated_srv6bsid(::service_layer::SLBgplsTopoSrv6BindingSid* srv6bsid);
  private:
  const ::service_layer::SLBgplsTopoSrv6BindingSid& _internal_srv6bsid() const;
  ::service_layer::SLBgplsTopoSrv6BindingSid* _internal_mutable_srv6bsid();
  public:
  void unsafe_arena_set_allocated_srv6bsid(
      ::service_layer::SLBgplsTopoSrv6BindingSid* srv6bsid);
  ::service_layer::SLBgplsTopoSrv6BindingSid* unsafe_arena_release_srv6bsid();

  // .service_layer.SLBgplsTopoSrPolicyName SrPolicyName = 7;
  bool has_srpolicyname() const;
  private:
  bool _internal_has_srpolicyname() const;
  public:
  void clear_srpolicyname();
  const ::service_layer::SLBgplsTopoSrPolicyName& srpolicyname() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrPolicyName* release_srpolicyname();
  ::service_layer::SLBgplsTopoSrPolicyName* mutable_srpolicyname();
  void set_allocated_srpolicyname(::service_layer::SLBgplsTopoSrPolicyName* srpolicyname);
  private:
  const ::service_layer::SLBgplsTopoSrPolicyName& _internal_srpolicyname() const;
  ::service_layer::SLBgplsTopoSrPolicyName* _internal_mutable_srpolicyname();
  public:
  void unsafe_arena_set_allocated_srpolicyname(
      ::service_layer::SLBgplsTopoSrPolicyName* srpolicyname);
  ::service_layer::SLBgplsTopoSrPolicyName* unsafe_arena_release_srpolicyname();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicyAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegList > seglists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::service_layer::SLBgplsTopoSrBindingSid* srbsid_;
  ::service_layer::SLBgplsTopoSrCpState* cpstate_;
  ::service_layer::SLBgplsTopoSrCpName* cpname_;
  ::service_layer::SLBgplsTopoSrCpConstraints* cpconstraints_;
  ::service_layer::SLBgplsTopoSrv6BindingSid* srv6bsid_;
  ::service_layer::SLBgplsTopoSrPolicyName* srpolicyname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBplsTopoLinkLocRemId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBplsTopoLinkLocRemId) */ {
 public:
  inline SLBplsTopoLinkLocRemId() : SLBplsTopoLinkLocRemId(nullptr) {}
  ~SLBplsTopoLinkLocRemId() override;
  explicit constexpr SLBplsTopoLinkLocRemId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBplsTopoLinkLocRemId(const SLBplsTopoLinkLocRemId& from);
  SLBplsTopoLinkLocRemId(SLBplsTopoLinkLocRemId&& from) noexcept
    : SLBplsTopoLinkLocRemId() {
    *this = ::std::move(from);
  }

  inline SLBplsTopoLinkLocRemId& operator=(const SLBplsTopoLinkLocRemId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBplsTopoLinkLocRemId& operator=(SLBplsTopoLinkLocRemId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBplsTopoLinkLocRemId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBplsTopoLinkLocRemId* internal_default_instance() {
    return reinterpret_cast<const SLBplsTopoLinkLocRemId*>(
               &_SLBplsTopoLinkLocRemId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SLBplsTopoLinkLocRemId& a, SLBplsTopoLinkLocRemId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBplsTopoLinkLocRemId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBplsTopoLinkLocRemId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBplsTopoLinkLocRemId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBplsTopoLinkLocRemId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBplsTopoLinkLocRemId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBplsTopoLinkLocRemId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBplsTopoLinkLocRemId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBplsTopoLinkLocRemId";
  }
  protected:
  explicit SLBplsTopoLinkLocRemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIdFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
  };
  // uint32 LocalId = 1;
  void clear_localid();
  uint32_t localid() const;
  void set_localid(uint32_t value);
  private:
  uint32_t _internal_localid() const;
  void _internal_set_localid(uint32_t value);
  public:

  // uint32 RemoteId = 2;
  void clear_remoteid();
  uint32_t remoteid() const;
  void set_remoteid(uint32_t value);
  private:
  uint32_t _internal_remoteid() const;
  void _internal_set_remoteid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBplsTopoLinkLocRemId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t localid_;
  uint32_t remoteid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoMtId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoMtId) */ {
 public:
  inline SLBgplsTopoMtId() : SLBgplsTopoMtId(nullptr) {}
  ~SLBgplsTopoMtId() override;
  explicit constexpr SLBgplsTopoMtId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoMtId(const SLBgplsTopoMtId& from);
  SLBgplsTopoMtId(SLBgplsTopoMtId&& from) noexcept
    : SLBgplsTopoMtId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoMtId& operator=(const SLBgplsTopoMtId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoMtId& operator=(SLBgplsTopoMtId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoMtId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoMtId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoMtId*>(
               &_SLBgplsTopoMtId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SLBgplsTopoMtId& a, SLBgplsTopoMtId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoMtId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoMtId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoMtId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoMtId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoMtId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoMtId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoMtId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoMtId";
  }
  protected:
  explicit SLBgplsTopoMtId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtIdFieldNumber = 1,
  };
  // uint32 MtId = 1;
  void clear_mtid();
  uint32_t mtid() const;
  void set_mtid(uint32_t value);
  private:
  uint32_t _internal_mtid() const;
  void _internal_set_mtid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoMtId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t mtid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNodeMsd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNodeMsd) */ {
 public:
  inline SLBgplsTopoNodeMsd() : SLBgplsTopoNodeMsd(nullptr) {}
  ~SLBgplsTopoNodeMsd() override;
  explicit constexpr SLBgplsTopoNodeMsd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNodeMsd(const SLBgplsTopoNodeMsd& from);
  SLBgplsTopoNodeMsd(SLBgplsTopoNodeMsd&& from) noexcept
    : SLBgplsTopoNodeMsd() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNodeMsd& operator=(const SLBgplsTopoNodeMsd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNodeMsd& operator=(SLBgplsTopoNodeMsd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNodeMsd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNodeMsd* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNodeMsd*>(
               &_SLBgplsTopoNodeMsd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SLBgplsTopoNodeMsd& a, SLBgplsTopoNodeMsd& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNodeMsd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNodeMsd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNodeMsd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNodeMsd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNodeMsd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNodeMsd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNodeMsd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNodeMsd";
  }
  protected:
  explicit SLBgplsTopoNodeMsd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 Type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 Value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNodeMsd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t type_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkMsd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkMsd) */ {
 public:
  inline SLBgplsTopoLinkMsd() : SLBgplsTopoLinkMsd(nullptr) {}
  ~SLBgplsTopoLinkMsd() override;
  explicit constexpr SLBgplsTopoLinkMsd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkMsd(const SLBgplsTopoLinkMsd& from);
  SLBgplsTopoLinkMsd(SLBgplsTopoLinkMsd&& from) noexcept
    : SLBgplsTopoLinkMsd() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkMsd& operator=(const SLBgplsTopoLinkMsd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkMsd& operator=(SLBgplsTopoLinkMsd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkMsd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkMsd* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkMsd*>(
               &_SLBgplsTopoLinkMsd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SLBgplsTopoLinkMsd& a, SLBgplsTopoLinkMsd& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkMsd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkMsd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkMsd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkMsd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkMsd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkMsd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkMsd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkMsd";
  }
  protected:
  explicit SLBgplsTopoLinkMsd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 Type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 Value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkMsd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t type_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNodeFlagBits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNodeFlagBits) */ {
 public:
  inline SLBgplsTopoNodeFlagBits() : SLBgplsTopoNodeFlagBits(nullptr) {}
  ~SLBgplsTopoNodeFlagBits() override;
  explicit constexpr SLBgplsTopoNodeFlagBits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNodeFlagBits(const SLBgplsTopoNodeFlagBits& from);
  SLBgplsTopoNodeFlagBits(SLBgplsTopoNodeFlagBits&& from) noexcept
    : SLBgplsTopoNodeFlagBits() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNodeFlagBits& operator=(const SLBgplsTopoNodeFlagBits& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNodeFlagBits& operator=(SLBgplsTopoNodeFlagBits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNodeFlagBits& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNodeFlagBits* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNodeFlagBits*>(
               &_SLBgplsTopoNodeFlagBits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SLBgplsTopoNodeFlagBits& a, SLBgplsTopoNodeFlagBits& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNodeFlagBits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNodeFlagBits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNodeFlagBits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNodeFlagBits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNodeFlagBits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNodeFlagBits& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNodeFlagBits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNodeFlagBits";
  }
  protected:
  explicit SLBgplsTopoNodeFlagBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNodeFlagBits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoNodeOpaqueAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoNodeOpaqueAttr) */ {
 public:
  inline SLBgplsTopoNodeOpaqueAttr() : SLBgplsTopoNodeOpaqueAttr(nullptr) {}
  ~SLBgplsTopoNodeOpaqueAttr() override;
  explicit constexpr SLBgplsTopoNodeOpaqueAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoNodeOpaqueAttr(const SLBgplsTopoNodeOpaqueAttr& from);
  SLBgplsTopoNodeOpaqueAttr(SLBgplsTopoNodeOpaqueAttr&& from) noexcept
    : SLBgplsTopoNodeOpaqueAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoNodeOpaqueAttr& operator=(const SLBgplsTopoNodeOpaqueAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoNodeOpaqueAttr& operator=(SLBgplsTopoNodeOpaqueAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoNodeOpaqueAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoNodeOpaqueAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoNodeOpaqueAttr*>(
               &_SLBgplsTopoNodeOpaqueAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SLBgplsTopoNodeOpaqueAttr& a, SLBgplsTopoNodeOpaqueAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoNodeOpaqueAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoNodeOpaqueAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoNodeOpaqueAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoNodeOpaqueAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoNodeOpaqueAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoNodeOpaqueAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoNodeOpaqueAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoNodeOpaqueAttr";
  }
  protected:
  explicit SLBgplsTopoNodeOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueAttrFieldNumber = 1,
  };
  // bytes OpaqueAttr = 1;
  void clear_opaqueattr();
  const std::string& opaqueattr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opaqueattr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opaqueattr();
  PROTOBUF_NODISCARD std::string* release_opaqueattr();
  void set_allocated_opaqueattr(std::string* opaqueattr);
  private:
  const std::string& _internal_opaqueattr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opaqueattr(const std::string& value);
  std::string* _internal_mutable_opaqueattr();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoNodeOpaqueAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaqueattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsNodeName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsNodeName) */ {
 public:
  inline SLBgplsNodeName() : SLBgplsNodeName(nullptr) {}
  ~SLBgplsNodeName() override;
  explicit constexpr SLBgplsNodeName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsNodeName(const SLBgplsNodeName& from);
  SLBgplsNodeName(SLBgplsNodeName&& from) noexcept
    : SLBgplsNodeName() {
    *this = ::std::move(from);
  }

  inline SLBgplsNodeName& operator=(const SLBgplsNodeName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsNodeName& operator=(SLBgplsNodeName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsNodeName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsNodeName* internal_default_instance() {
    return reinterpret_cast<const SLBgplsNodeName*>(
               &_SLBgplsNodeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SLBgplsNodeName& a, SLBgplsNodeName& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsNodeName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsNodeName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsNodeName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsNodeName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsNodeName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsNodeName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsNodeName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsNodeName";
  }
  protected:
  explicit SLBgplsNodeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsNodeName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoIsisAreaId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoIsisAreaId) */ {
 public:
  inline SLBgplsTopoIsisAreaId() : SLBgplsTopoIsisAreaId(nullptr) {}
  ~SLBgplsTopoIsisAreaId() override;
  explicit constexpr SLBgplsTopoIsisAreaId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoIsisAreaId(const SLBgplsTopoIsisAreaId& from);
  SLBgplsTopoIsisAreaId(SLBgplsTopoIsisAreaId&& from) noexcept
    : SLBgplsTopoIsisAreaId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoIsisAreaId& operator=(const SLBgplsTopoIsisAreaId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoIsisAreaId& operator=(SLBgplsTopoIsisAreaId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoIsisAreaId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoIsisAreaId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoIsisAreaId*>(
               &_SLBgplsTopoIsisAreaId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SLBgplsTopoIsisAreaId& a, SLBgplsTopoIsisAreaId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoIsisAreaId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoIsisAreaId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoIsisAreaId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoIsisAreaId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoIsisAreaId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoIsisAreaId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoIsisAreaId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoIsisAreaId";
  }
  protected:
  explicit SLBgplsTopoIsisAreaId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaIdFieldNumber = 1,
  };
  // bytes AreaId = 1;
  void clear_areaid();
  const std::string& areaid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_areaid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_areaid();
  PROTOBUF_NODISCARD std::string* release_areaid();
  void set_allocated_areaid(std::string* areaid);
  private:
  const std::string& _internal_areaid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_areaid(const std::string& value);
  std::string* _internal_mutable_areaid();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoIsisAreaId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr areaid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLocalIpv4RouterId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLocalIpv4RouterId) */ {
 public:
  inline SLBgplsTopoLocalIpv4RouterId() : SLBgplsTopoLocalIpv4RouterId(nullptr) {}
  ~SLBgplsTopoLocalIpv4RouterId() override;
  explicit constexpr SLBgplsTopoLocalIpv4RouterId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLocalIpv4RouterId(const SLBgplsTopoLocalIpv4RouterId& from);
  SLBgplsTopoLocalIpv4RouterId(SLBgplsTopoLocalIpv4RouterId&& from) noexcept
    : SLBgplsTopoLocalIpv4RouterId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLocalIpv4RouterId& operator=(const SLBgplsTopoLocalIpv4RouterId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLocalIpv4RouterId& operator=(SLBgplsTopoLocalIpv4RouterId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLocalIpv4RouterId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLocalIpv4RouterId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLocalIpv4RouterId*>(
               &_SLBgplsTopoLocalIpv4RouterId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SLBgplsTopoLocalIpv4RouterId& a, SLBgplsTopoLocalIpv4RouterId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLocalIpv4RouterId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLocalIpv4RouterId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLocalIpv4RouterId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLocalIpv4RouterId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLocalIpv4RouterId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLocalIpv4RouterId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLocalIpv4RouterId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLocalIpv4RouterId";
  }
  protected:
  explicit SLBgplsTopoLocalIpv4RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 1,
  };
  // bytes RouterId = 1;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLocalIpv4RouterId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLocalIpv6RouterId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLocalIpv6RouterId) */ {
 public:
  inline SLBgplsTopoLocalIpv6RouterId() : SLBgplsTopoLocalIpv6RouterId(nullptr) {}
  ~SLBgplsTopoLocalIpv6RouterId() override;
  explicit constexpr SLBgplsTopoLocalIpv6RouterId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLocalIpv6RouterId(const SLBgplsTopoLocalIpv6RouterId& from);
  SLBgplsTopoLocalIpv6RouterId(SLBgplsTopoLocalIpv6RouterId&& from) noexcept
    : SLBgplsTopoLocalIpv6RouterId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLocalIpv6RouterId& operator=(const SLBgplsTopoLocalIpv6RouterId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLocalIpv6RouterId& operator=(SLBgplsTopoLocalIpv6RouterId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLocalIpv6RouterId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLocalIpv6RouterId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLocalIpv6RouterId*>(
               &_SLBgplsTopoLocalIpv6RouterId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SLBgplsTopoLocalIpv6RouterId& a, SLBgplsTopoLocalIpv6RouterId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLocalIpv6RouterId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLocalIpv6RouterId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLocalIpv6RouterId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLocalIpv6RouterId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLocalIpv6RouterId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLocalIpv6RouterId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLocalIpv6RouterId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLocalIpv6RouterId";
  }
  protected:
  explicit SLBgplsTopoLocalIpv6RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 1,
  };
  // bytes RouterId = 1;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLocalIpv6RouterId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoRemoteIpv4RouterId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoRemoteIpv4RouterId) */ {
 public:
  inline SLBgplsTopoRemoteIpv4RouterId() : SLBgplsTopoRemoteIpv4RouterId(nullptr) {}
  ~SLBgplsTopoRemoteIpv4RouterId() override;
  explicit constexpr SLBgplsTopoRemoteIpv4RouterId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoRemoteIpv4RouterId(const SLBgplsTopoRemoteIpv4RouterId& from);
  SLBgplsTopoRemoteIpv4RouterId(SLBgplsTopoRemoteIpv4RouterId&& from) noexcept
    : SLBgplsTopoRemoteIpv4RouterId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoRemoteIpv4RouterId& operator=(const SLBgplsTopoRemoteIpv4RouterId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoRemoteIpv4RouterId& operator=(SLBgplsTopoRemoteIpv4RouterId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoRemoteIpv4RouterId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoRemoteIpv4RouterId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoRemoteIpv4RouterId*>(
               &_SLBgplsTopoRemoteIpv4RouterId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SLBgplsTopoRemoteIpv4RouterId& a, SLBgplsTopoRemoteIpv4RouterId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoRemoteIpv4RouterId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoRemoteIpv4RouterId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoRemoteIpv4RouterId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoRemoteIpv4RouterId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoRemoteIpv4RouterId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoRemoteIpv4RouterId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoRemoteIpv4RouterId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoRemoteIpv4RouterId";
  }
  protected:
  explicit SLBgplsTopoRemoteIpv4RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 1,
  };
  // bytes RouterId = 1;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoRemoteIpv4RouterId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoRemoteIpv6RouterId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoRemoteIpv6RouterId) */ {
 public:
  inline SLBgplsTopoRemoteIpv6RouterId() : SLBgplsTopoRemoteIpv6RouterId(nullptr) {}
  ~SLBgplsTopoRemoteIpv6RouterId() override;
  explicit constexpr SLBgplsTopoRemoteIpv6RouterId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoRemoteIpv6RouterId(const SLBgplsTopoRemoteIpv6RouterId& from);
  SLBgplsTopoRemoteIpv6RouterId(SLBgplsTopoRemoteIpv6RouterId&& from) noexcept
    : SLBgplsTopoRemoteIpv6RouterId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoRemoteIpv6RouterId& operator=(const SLBgplsTopoRemoteIpv6RouterId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoRemoteIpv6RouterId& operator=(SLBgplsTopoRemoteIpv6RouterId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoRemoteIpv6RouterId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoRemoteIpv6RouterId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoRemoteIpv6RouterId*>(
               &_SLBgplsTopoRemoteIpv6RouterId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SLBgplsTopoRemoteIpv6RouterId& a, SLBgplsTopoRemoteIpv6RouterId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoRemoteIpv6RouterId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoRemoteIpv6RouterId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoRemoteIpv6RouterId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoRemoteIpv6RouterId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoRemoteIpv6RouterId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoRemoteIpv6RouterId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoRemoteIpv6RouterId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoRemoteIpv6RouterId";
  }
  protected:
  explicit SLBgplsTopoRemoteIpv6RouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterIdFieldNumber = 1,
  };
  // bytes RouterId = 1;
  void clear_routerid();
  const std::string& routerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerid();
  PROTOBUF_NODISCARD std::string* release_routerid();
  void set_allocated_routerid(std::string* routerid);
  private:
  const std::string& _internal_routerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerid(const std::string& value);
  std::string* _internal_mutable_routerid();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoRemoteIpv6RouterId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrgb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrgb) */ {
 public:
  inline SLBgplsTopoSrgb() : SLBgplsTopoSrgb(nullptr) {}
  ~SLBgplsTopoSrgb() override;
  explicit constexpr SLBgplsTopoSrgb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrgb(const SLBgplsTopoSrgb& from);
  SLBgplsTopoSrgb(SLBgplsTopoSrgb&& from) noexcept
    : SLBgplsTopoSrgb() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrgb& operator=(const SLBgplsTopoSrgb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrgb& operator=(SLBgplsTopoSrgb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrgb& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrgb* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrgb*>(
               &_SLBgplsTopoSrgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SLBgplsTopoSrgb& a, SLBgplsTopoSrgb& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrgb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrgb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrgb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrgb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrgb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrgb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrgb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrgb";
  }
  protected:
  explicit SLBgplsTopoSrgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartLabelFieldNumber = 1,
    kRangeSizeFieldNumber = 2,
  };
  // uint32 StartLabel = 1;
  void clear_startlabel();
  uint32_t startlabel() const;
  void set_startlabel(uint32_t value);
  private:
  uint32_t _internal_startlabel() const;
  void _internal_set_startlabel(uint32_t value);
  public:

  // uint32 RangeSize = 2;
  void clear_rangesize();
  uint32_t rangesize() const;
  void set_rangesize(uint32_t value);
  private:
  uint32_t _internal_rangesize() const;
  void _internal_set_rangesize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrgb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t startlabel_;
  uint32_t rangesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrgbIsisFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrgbIsisFlags) */ {
 public:
  inline SLBgplsTopoSrgbIsisFlags() : SLBgplsTopoSrgbIsisFlags(nullptr) {}
  ~SLBgplsTopoSrgbIsisFlags() override;
  explicit constexpr SLBgplsTopoSrgbIsisFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrgbIsisFlags(const SLBgplsTopoSrgbIsisFlags& from);
  SLBgplsTopoSrgbIsisFlags(SLBgplsTopoSrgbIsisFlags&& from) noexcept
    : SLBgplsTopoSrgbIsisFlags() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrgbIsisFlags& operator=(const SLBgplsTopoSrgbIsisFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrgbIsisFlags& operator=(SLBgplsTopoSrgbIsisFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrgbIsisFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrgbIsisFlags* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrgbIsisFlags*>(
               &_SLBgplsTopoSrgbIsisFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SLBgplsTopoSrgbIsisFlags& a, SLBgplsTopoSrgbIsisFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrgbIsisFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrgbIsisFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrgbIsisFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrgbIsisFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrgbIsisFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrgbIsisFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrgbIsisFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrgbIsisFlags";
  }
  protected:
  explicit SLBgplsTopoSrgbIsisFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrgbIsisFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrAlgorithm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrAlgorithm) */ {
 public:
  inline SLBgplsTopoSrAlgorithm() : SLBgplsTopoSrAlgorithm(nullptr) {}
  ~SLBgplsTopoSrAlgorithm() override;
  explicit constexpr SLBgplsTopoSrAlgorithm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrAlgorithm(const SLBgplsTopoSrAlgorithm& from);
  SLBgplsTopoSrAlgorithm(SLBgplsTopoSrAlgorithm&& from) noexcept
    : SLBgplsTopoSrAlgorithm() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrAlgorithm& operator=(const SLBgplsTopoSrAlgorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrAlgorithm& operator=(SLBgplsTopoSrAlgorithm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrAlgorithm& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrAlgorithm* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrAlgorithm*>(
               &_SLBgplsTopoSrAlgorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SLBgplsTopoSrAlgorithm& a, SLBgplsTopoSrAlgorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrAlgorithm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrAlgorithm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrAlgorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrAlgorithm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrAlgorithm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrAlgorithm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrAlgorithm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrAlgorithm";
  }
  protected:
  explicit SLBgplsTopoSrAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmsFieldNumber = 1,
  };
  // bytes Algorithms = 1;
  void clear_algorithms();
  const std::string& algorithms() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithms(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithms();
  PROTOBUF_NODISCARD std::string* release_algorithms();
  void set_allocated_algorithms(std::string* algorithms);
  private:
  const std::string& _internal_algorithms() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithms(const std::string& value);
  std::string* _internal_mutable_algorithms();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrAlgorithm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrlb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrlb) */ {
 public:
  inline SLBgplsTopoSrlb() : SLBgplsTopoSrlb(nullptr) {}
  ~SLBgplsTopoSrlb() override;
  explicit constexpr SLBgplsTopoSrlb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrlb(const SLBgplsTopoSrlb& from);
  SLBgplsTopoSrlb(SLBgplsTopoSrlb&& from) noexcept
    : SLBgplsTopoSrlb() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrlb& operator=(const SLBgplsTopoSrlb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrlb& operator=(SLBgplsTopoSrlb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrlb& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrlb* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrlb*>(
               &_SLBgplsTopoSrlb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SLBgplsTopoSrlb& a, SLBgplsTopoSrlb& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrlb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrlb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrlb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrlb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrlb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrlb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrlb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrlb";
  }
  protected:
  explicit SLBgplsTopoSrlb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartLabelFieldNumber = 1,
    kRangeSizeFieldNumber = 2,
  };
  // uint32 StartLabel = 1;
  void clear_startlabel();
  uint32_t startlabel() const;
  void set_startlabel(uint32_t value);
  private:
  uint32_t _internal_startlabel() const;
  void _internal_set_startlabel(uint32_t value);
  public:

  // uint32 RangeSize = 2;
  void clear_rangesize();
  uint32_t rangesize() const;
  void set_rangesize(uint32_t value);
  private:
  uint32_t _internal_rangesize() const;
  void _internal_set_rangesize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrlb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t startlabel_;
  uint32_t rangesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6CapFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6CapFlags) */ {
 public:
  inline SLBgplsTopoSrv6CapFlags() : SLBgplsTopoSrv6CapFlags(nullptr) {}
  ~SLBgplsTopoSrv6CapFlags() override;
  explicit constexpr SLBgplsTopoSrv6CapFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6CapFlags(const SLBgplsTopoSrv6CapFlags& from);
  SLBgplsTopoSrv6CapFlags(SLBgplsTopoSrv6CapFlags&& from) noexcept
    : SLBgplsTopoSrv6CapFlags() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6CapFlags& operator=(const SLBgplsTopoSrv6CapFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6CapFlags& operator=(SLBgplsTopoSrv6CapFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6CapFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6CapFlags* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6CapFlags*>(
               &_SLBgplsTopoSrv6CapFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SLBgplsTopoSrv6CapFlags& a, SLBgplsTopoSrv6CapFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6CapFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6CapFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6CapFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6CapFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6CapFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6CapFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6CapFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6CapFlags";
  }
  protected:
  explicit SLBgplsTopoSrv6CapFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6CapFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoFad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoFad) */ {
 public:
  inline SLBgplsTopoFad() : SLBgplsTopoFad(nullptr) {}
  ~SLBgplsTopoFad() override;
  explicit constexpr SLBgplsTopoFad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoFad(const SLBgplsTopoFad& from);
  SLBgplsTopoFad(SLBgplsTopoFad&& from) noexcept
    : SLBgplsTopoFad() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoFad& operator=(const SLBgplsTopoFad& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoFad& operator=(SLBgplsTopoFad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoFad& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoFad* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoFad*>(
               &_SLBgplsTopoFad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SLBgplsTopoFad& a, SLBgplsTopoFad& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoFad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoFad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoFad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoFad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoFad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoFad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoFad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoFad";
  }
  protected:
  explicit SLBgplsTopoFad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcAnyAffFieldNumber = 5,
    kIncAnyAffFieldNumber = 6,
    kIncAllAffFieldNumber = 7,
    kExcSrlgFieldNumber = 9,
    kExcAnyRevAffFieldNumber = 10,
    kIncAnyRevAffFieldNumber = 11,
    kIncAllRevAffFieldNumber = 12,
    kAlgorithmFieldNumber = 1,
    kMetricTypeFieldNumber = 2,
    kCalcTypeFieldNumber = 3,
    kPriorityFieldNumber = 4,
    kFlagsFieldNumber = 8,
    kExcMinBwFieldNumber = 14,
    kUnsuppTlvFieldNumber = 15,
    kExcMaxDelayFieldNumber = 13,
  };
  // repeated uint32 ExcAnyAff = 5;
  int excanyaff_size() const;
  private:
  int _internal_excanyaff_size() const;
  public:
  void clear_excanyaff();
  private:
  uint32_t _internal_excanyaff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_excanyaff() const;
  void _internal_add_excanyaff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_excanyaff();
  public:
  uint32_t excanyaff(int index) const;
  void set_excanyaff(int index, uint32_t value);
  void add_excanyaff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      excanyaff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_excanyaff();

  // repeated uint32 IncAnyAff = 6;
  int incanyaff_size() const;
  private:
  int _internal_incanyaff_size() const;
  public:
  void clear_incanyaff();
  private:
  uint32_t _internal_incanyaff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_incanyaff() const;
  void _internal_add_incanyaff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_incanyaff();
  public:
  uint32_t incanyaff(int index) const;
  void set_incanyaff(int index, uint32_t value);
  void add_incanyaff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      incanyaff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_incanyaff();

  // repeated uint32 IncAllAff = 7;
  int incallaff_size() const;
  private:
  int _internal_incallaff_size() const;
  public:
  void clear_incallaff();
  private:
  uint32_t _internal_incallaff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_incallaff() const;
  void _internal_add_incallaff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_incallaff();
  public:
  uint32_t incallaff(int index) const;
  void set_incallaff(int index, uint32_t value);
  void add_incallaff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      incallaff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_incallaff();

  // repeated uint32 ExcSrlg = 9;
  int excsrlg_size() const;
  private:
  int _internal_excsrlg_size() const;
  public:
  void clear_excsrlg();
  private:
  uint32_t _internal_excsrlg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_excsrlg() const;
  void _internal_add_excsrlg(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_excsrlg();
  public:
  uint32_t excsrlg(int index) const;
  void set_excsrlg(int index, uint32_t value);
  void add_excsrlg(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      excsrlg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_excsrlg();

  // repeated uint32 ExcAnyRevAff = 10;
  int excanyrevaff_size() const;
  private:
  int _internal_excanyrevaff_size() const;
  public:
  void clear_excanyrevaff();
  private:
  uint32_t _internal_excanyrevaff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_excanyrevaff() const;
  void _internal_add_excanyrevaff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_excanyrevaff();
  public:
  uint32_t excanyrevaff(int index) const;
  void set_excanyrevaff(int index, uint32_t value);
  void add_excanyrevaff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      excanyrevaff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_excanyrevaff();

  // repeated uint32 IncAnyRevAff = 11;
  int incanyrevaff_size() const;
  private:
  int _internal_incanyrevaff_size() const;
  public:
  void clear_incanyrevaff();
  private:
  uint32_t _internal_incanyrevaff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_incanyrevaff() const;
  void _internal_add_incanyrevaff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_incanyrevaff();
  public:
  uint32_t incanyrevaff(int index) const;
  void set_incanyrevaff(int index, uint32_t value);
  void add_incanyrevaff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      incanyrevaff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_incanyrevaff();

  // repeated uint32 IncAllRevAff = 12;
  int incallrevaff_size() const;
  private:
  int _internal_incallrevaff_size() const;
  public:
  void clear_incallrevaff();
  private:
  uint32_t _internal_incallrevaff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_incallrevaff() const;
  void _internal_add_incallrevaff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_incallrevaff();
  public:
  uint32_t incallrevaff(int index) const;
  void set_incallrevaff(int index, uint32_t value);
  void add_incallrevaff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      incallrevaff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_incallrevaff();

  // bytes Algorithm = 1;
  void clear_algorithm();
  const std::string& algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithm();
  PROTOBUF_NODISCARD std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // bytes MetricType = 2;
  void clear_metrictype();
  const std::string& metrictype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metrictype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metrictype();
  PROTOBUF_NODISCARD std::string* release_metrictype();
  void set_allocated_metrictype(std::string* metrictype);
  private:
  const std::string& _internal_metrictype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metrictype(const std::string& value);
  std::string* _internal_mutable_metrictype();
  public:

  // bytes CalcType = 3;
  void clear_calctype();
  const std::string& calctype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calctype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calctype();
  PROTOBUF_NODISCARD std::string* release_calctype();
  void set_allocated_calctype(std::string* calctype);
  private:
  const std::string& _internal_calctype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calctype(const std::string& value);
  std::string* _internal_mutable_calctype();
  public:

  // bytes Priority = 4;
  void clear_priority();
  const std::string& priority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_priority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_priority();
  PROTOBUF_NODISCARD std::string* release_priority();
  void set_allocated_priority(std::string* priority);
  private:
  const std::string& _internal_priority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_priority(const std::string& value);
  std::string* _internal_mutable_priority();
  public:

  // bytes Flags = 8;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // bytes ExcMinBw = 14;
  void clear_excminbw();
  const std::string& excminbw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excminbw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excminbw();
  PROTOBUF_NODISCARD std::string* release_excminbw();
  void set_allocated_excminbw(std::string* excminbw);
  private:
  const std::string& _internal_excminbw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excminbw(const std::string& value);
  std::string* _internal_mutable_excminbw();
  public:

  // .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
  bool has_unsupptlv() const;
  private:
  bool _internal_has_unsupptlv() const;
  public:
  void clear_unsupptlv();
  const ::service_layer::SLBgplsTopoFadUnsuppTlv& unsupptlv() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoFadUnsuppTlv* release_unsupptlv();
  ::service_layer::SLBgplsTopoFadUnsuppTlv* mutable_unsupptlv();
  void set_allocated_unsupptlv(::service_layer::SLBgplsTopoFadUnsuppTlv* unsupptlv);
  private:
  const ::service_layer::SLBgplsTopoFadUnsuppTlv& _internal_unsupptlv() const;
  ::service_layer::SLBgplsTopoFadUnsuppTlv* _internal_mutable_unsupptlv();
  public:
  void unsafe_arena_set_allocated_unsupptlv(
      ::service_layer::SLBgplsTopoFadUnsuppTlv* unsupptlv);
  ::service_layer::SLBgplsTopoFadUnsuppTlv* unsafe_arena_release_unsupptlv();

  // uint32 ExcMaxDelay = 13;
  void clear_excmaxdelay();
  uint32_t excmaxdelay() const;
  void set_excmaxdelay(uint32_t value);
  private:
  uint32_t _internal_excmaxdelay() const;
  void _internal_set_excmaxdelay(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoFad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > excanyaff_;
  mutable std::atomic<int> _excanyaff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > incanyaff_;
  mutable std::atomic<int> _incanyaff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > incallaff_;
  mutable std::atomic<int> _incallaff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > excsrlg_;
  mutable std::atomic<int> _excsrlg_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > excanyrevaff_;
  mutable std::atomic<int> _excanyrevaff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > incanyrevaff_;
  mutable std::atomic<int> _incanyrevaff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > incallrevaff_;
  mutable std::atomic<int> _incallrevaff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metrictype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calctype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr priority_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excminbw_;
  ::service_layer::SLBgplsTopoFadUnsuppTlv* unsupptlv_;
  uint32_t excmaxdelay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixFAPM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixFAPM) */ {
 public:
  inline SLBgplsTopoPrefixFAPM() : SLBgplsTopoPrefixFAPM(nullptr) {}
  ~SLBgplsTopoPrefixFAPM() override;
  explicit constexpr SLBgplsTopoPrefixFAPM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixFAPM(const SLBgplsTopoPrefixFAPM& from);
  SLBgplsTopoPrefixFAPM(SLBgplsTopoPrefixFAPM&& from) noexcept
    : SLBgplsTopoPrefixFAPM() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixFAPM& operator=(const SLBgplsTopoPrefixFAPM& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixFAPM& operator=(SLBgplsTopoPrefixFAPM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixFAPM& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixFAPM* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixFAPM*>(
               &_SLBgplsTopoPrefixFAPM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SLBgplsTopoPrefixFAPM& a, SLBgplsTopoPrefixFAPM& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixFAPM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixFAPM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixFAPM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixFAPM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixFAPM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixFAPM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixFAPM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixFAPM";
  }
  protected:
  explicit SLBgplsTopoPrefixFAPM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kFlexAlgoFieldNumber = 1,
    kMetricFieldNumber = 3,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 FlexAlgo = 1;
  void clear_flexalgo();
  uint32_t flexalgo() const;
  void set_flexalgo(uint32_t value);
  private:
  uint32_t _internal_flexalgo() const;
  void _internal_set_flexalgo(uint32_t value);
  public:

  // uint32 Metric = 3;
  void clear_metric();
  uint32_t metric() const;
  void set_metric(uint32_t value);
  private:
  uint32_t _internal_metric() const;
  void _internal_set_metric(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixFAPM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t flexalgo_;
  uint32_t metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoFadUnsuppTlv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoFadUnsuppTlv) */ {
 public:
  inline SLBgplsTopoFadUnsuppTlv() : SLBgplsTopoFadUnsuppTlv(nullptr) {}
  ~SLBgplsTopoFadUnsuppTlv() override;
  explicit constexpr SLBgplsTopoFadUnsuppTlv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoFadUnsuppTlv(const SLBgplsTopoFadUnsuppTlv& from);
  SLBgplsTopoFadUnsuppTlv(SLBgplsTopoFadUnsuppTlv&& from) noexcept
    : SLBgplsTopoFadUnsuppTlv() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoFadUnsuppTlv& operator=(const SLBgplsTopoFadUnsuppTlv& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoFadUnsuppTlv& operator=(SLBgplsTopoFadUnsuppTlv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoFadUnsuppTlv& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoFadUnsuppTlv* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoFadUnsuppTlv*>(
               &_SLBgplsTopoFadUnsuppTlv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SLBgplsTopoFadUnsuppTlv& a, SLBgplsTopoFadUnsuppTlv& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoFadUnsuppTlv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoFadUnsuppTlv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoFadUnsuppTlv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoFadUnsuppTlv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoFadUnsuppTlv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoFadUnsuppTlv& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoFadUnsuppTlv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoFadUnsuppTlv";
  }
  protected:
  explicit SLBgplsTopoFadUnsuppTlv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kProtocolFieldNumber = 1,
  };
  // bytes Types = 2;
  void clear_types();
  const std::string& types() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_types(ArgT0&& arg0, ArgT... args);
  std::string* mutable_types();
  PROTOBUF_NODISCARD std::string* release_types();
  void set_allocated_types(std::string* types);
  private:
  const std::string& _internal_types() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_types(const std::string& value);
  std::string* _internal_mutable_types();
  public:

  // .service_layer.SLBgplsTopoProtocol Protocol = 1;
  void clear_protocol();
  ::service_layer::SLBgplsTopoProtocol protocol() const;
  void set_protocol(::service_layer::SLBgplsTopoProtocol value);
  private:
  ::service_layer::SLBgplsTopoProtocol _internal_protocol() const;
  void _internal_set_protocol(::service_layer::SLBgplsTopoProtocol value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoFadUnsuppTlv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr types_;
  int protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoAdminGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoAdminGroup) */ {
 public:
  inline SLBgplsTopoAdminGroup() : SLBgplsTopoAdminGroup(nullptr) {}
  ~SLBgplsTopoAdminGroup() override;
  explicit constexpr SLBgplsTopoAdminGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoAdminGroup(const SLBgplsTopoAdminGroup& from);
  SLBgplsTopoAdminGroup(SLBgplsTopoAdminGroup&& from) noexcept
    : SLBgplsTopoAdminGroup() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoAdminGroup& operator=(const SLBgplsTopoAdminGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoAdminGroup& operator=(SLBgplsTopoAdminGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoAdminGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoAdminGroup* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoAdminGroup*>(
               &_SLBgplsTopoAdminGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SLBgplsTopoAdminGroup& a, SLBgplsTopoAdminGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoAdminGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoAdminGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoAdminGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoAdminGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoAdminGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoAdminGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoAdminGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoAdminGroup";
  }
  protected:
  explicit SLBgplsTopoAdminGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // uint32 Group = 1;
  void clear_group();
  uint32_t group() const;
  void set_group(uint32_t value);
  private:
  uint32_t _internal_group() const;
  void _internal_set_group(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoAdminGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkMaxBandwidth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkMaxBandwidth) */ {
 public:
  inline SLBgplsTopoLinkMaxBandwidth() : SLBgplsTopoLinkMaxBandwidth(nullptr) {}
  ~SLBgplsTopoLinkMaxBandwidth() override;
  explicit constexpr SLBgplsTopoLinkMaxBandwidth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkMaxBandwidth(const SLBgplsTopoLinkMaxBandwidth& from);
  SLBgplsTopoLinkMaxBandwidth(SLBgplsTopoLinkMaxBandwidth&& from) noexcept
    : SLBgplsTopoLinkMaxBandwidth() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkMaxBandwidth& operator=(const SLBgplsTopoLinkMaxBandwidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkMaxBandwidth& operator=(SLBgplsTopoLinkMaxBandwidth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkMaxBandwidth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkMaxBandwidth* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkMaxBandwidth*>(
               &_SLBgplsTopoLinkMaxBandwidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SLBgplsTopoLinkMaxBandwidth& a, SLBgplsTopoLinkMaxBandwidth& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkMaxBandwidth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkMaxBandwidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkMaxBandwidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkMaxBandwidth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkMaxBandwidth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkMaxBandwidth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkMaxBandwidth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkMaxBandwidth";
  }
  protected:
  explicit SLBgplsTopoLinkMaxBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkMaxBandwidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkMaxResvBandwidth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkMaxResvBandwidth) */ {
 public:
  inline SLBgplsTopoLinkMaxResvBandwidth() : SLBgplsTopoLinkMaxResvBandwidth(nullptr) {}
  ~SLBgplsTopoLinkMaxResvBandwidth() override;
  explicit constexpr SLBgplsTopoLinkMaxResvBandwidth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkMaxResvBandwidth(const SLBgplsTopoLinkMaxResvBandwidth& from);
  SLBgplsTopoLinkMaxResvBandwidth(SLBgplsTopoLinkMaxResvBandwidth&& from) noexcept
    : SLBgplsTopoLinkMaxResvBandwidth() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkMaxResvBandwidth& operator=(const SLBgplsTopoLinkMaxResvBandwidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkMaxResvBandwidth& operator=(SLBgplsTopoLinkMaxResvBandwidth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkMaxResvBandwidth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkMaxResvBandwidth* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkMaxResvBandwidth*>(
               &_SLBgplsTopoLinkMaxResvBandwidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SLBgplsTopoLinkMaxResvBandwidth& a, SLBgplsTopoLinkMaxResvBandwidth& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkMaxResvBandwidth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkMaxResvBandwidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkMaxResvBandwidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkMaxResvBandwidth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkMaxResvBandwidth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkMaxResvBandwidth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkMaxResvBandwidth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkMaxResvBandwidth";
  }
  protected:
  explicit SLBgplsTopoLinkMaxResvBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkMaxResvBandwidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkUnresvBandwidth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkUnresvBandwidth) */ {
 public:
  inline SLBgplsTopoLinkUnresvBandwidth() : SLBgplsTopoLinkUnresvBandwidth(nullptr) {}
  ~SLBgplsTopoLinkUnresvBandwidth() override;
  explicit constexpr SLBgplsTopoLinkUnresvBandwidth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkUnresvBandwidth(const SLBgplsTopoLinkUnresvBandwidth& from);
  SLBgplsTopoLinkUnresvBandwidth(SLBgplsTopoLinkUnresvBandwidth&& from) noexcept
    : SLBgplsTopoLinkUnresvBandwidth() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkUnresvBandwidth& operator=(const SLBgplsTopoLinkUnresvBandwidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkUnresvBandwidth& operator=(SLBgplsTopoLinkUnresvBandwidth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkUnresvBandwidth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkUnresvBandwidth* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkUnresvBandwidth*>(
               &_SLBgplsTopoLinkUnresvBandwidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SLBgplsTopoLinkUnresvBandwidth& a, SLBgplsTopoLinkUnresvBandwidth& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkUnresvBandwidth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkUnresvBandwidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkUnresvBandwidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkUnresvBandwidth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkUnresvBandwidth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkUnresvBandwidth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkUnresvBandwidth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkUnresvBandwidth";
  }
  protected:
  explicit SLBgplsTopoLinkUnresvBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 2,
    kPriorityFieldNumber = 1,
  };
  // bytes Bandwidth = 2;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // uint32 Priority = 1;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkUnresvBandwidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  uint32_t priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkTeDefaultMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkTeDefaultMetric) */ {
 public:
  inline SLBgplsTopoLinkTeDefaultMetric() : SLBgplsTopoLinkTeDefaultMetric(nullptr) {}
  ~SLBgplsTopoLinkTeDefaultMetric() override;
  explicit constexpr SLBgplsTopoLinkTeDefaultMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkTeDefaultMetric(const SLBgplsTopoLinkTeDefaultMetric& from);
  SLBgplsTopoLinkTeDefaultMetric(SLBgplsTopoLinkTeDefaultMetric&& from) noexcept
    : SLBgplsTopoLinkTeDefaultMetric() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkTeDefaultMetric& operator=(const SLBgplsTopoLinkTeDefaultMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkTeDefaultMetric& operator=(SLBgplsTopoLinkTeDefaultMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkTeDefaultMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkTeDefaultMetric* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkTeDefaultMetric*>(
               &_SLBgplsTopoLinkTeDefaultMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SLBgplsTopoLinkTeDefaultMetric& a, SLBgplsTopoLinkTeDefaultMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkTeDefaultMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkTeDefaultMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkTeDefaultMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkTeDefaultMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkTeDefaultMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkTeDefaultMetric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkTeDefaultMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkTeDefaultMetric";
  }
  protected:
  explicit SLBgplsTopoLinkTeDefaultMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 1,
  };
  // uint32 Metric = 1;
  void clear_metric();
  uint32_t metric() const;
  void set_metric(uint32_t value);
  private:
  uint32_t _internal_metric() const;
  void _internal_set_metric(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkTeDefaultMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkProtectionType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkProtectionType) */ {
 public:
  inline SLBgplsTopoLinkProtectionType() : SLBgplsTopoLinkProtectionType(nullptr) {}
  ~SLBgplsTopoLinkProtectionType() override;
  explicit constexpr SLBgplsTopoLinkProtectionType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkProtectionType(const SLBgplsTopoLinkProtectionType& from);
  SLBgplsTopoLinkProtectionType(SLBgplsTopoLinkProtectionType&& from) noexcept
    : SLBgplsTopoLinkProtectionType() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkProtectionType& operator=(const SLBgplsTopoLinkProtectionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkProtectionType& operator=(SLBgplsTopoLinkProtectionType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkProtectionType& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkProtectionType* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkProtectionType*>(
               &_SLBgplsTopoLinkProtectionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SLBgplsTopoLinkProtectionType& a, SLBgplsTopoLinkProtectionType& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkProtectionType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkProtectionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkProtectionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkProtectionType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkProtectionType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkProtectionType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkProtectionType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkProtectionType";
  }
  protected:
  explicit SLBgplsTopoLinkProtectionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
  };
  // uint32 Mask = 1;
  void clear_mask();
  uint32_t mask() const;
  void set_mask(uint32_t value);
  private:
  uint32_t _internal_mask() const;
  void _internal_set_mask(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkProtectionType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkMplsProtoMask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkMplsProtoMask) */ {
 public:
  inline SLBgplsTopoLinkMplsProtoMask() : SLBgplsTopoLinkMplsProtoMask(nullptr) {}
  ~SLBgplsTopoLinkMplsProtoMask() override;
  explicit constexpr SLBgplsTopoLinkMplsProtoMask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkMplsProtoMask(const SLBgplsTopoLinkMplsProtoMask& from);
  SLBgplsTopoLinkMplsProtoMask(SLBgplsTopoLinkMplsProtoMask&& from) noexcept
    : SLBgplsTopoLinkMplsProtoMask() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkMplsProtoMask& operator=(const SLBgplsTopoLinkMplsProtoMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkMplsProtoMask& operator=(SLBgplsTopoLinkMplsProtoMask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkMplsProtoMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkMplsProtoMask* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkMplsProtoMask*>(
               &_SLBgplsTopoLinkMplsProtoMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SLBgplsTopoLinkMplsProtoMask& a, SLBgplsTopoLinkMplsProtoMask& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkMplsProtoMask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkMplsProtoMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkMplsProtoMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkMplsProtoMask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkMplsProtoMask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkMplsProtoMask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkMplsProtoMask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkMplsProtoMask";
  }
  protected:
  explicit SLBgplsTopoLinkMplsProtoMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
  };
  // bytes Mask = 1;
  void clear_mask();
  const std::string& mask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mask();
  PROTOBUF_NODISCARD std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkMplsProtoMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkIgpMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkIgpMetric) */ {
 public:
  inline SLBgplsTopoLinkIgpMetric() : SLBgplsTopoLinkIgpMetric(nullptr) {}
  ~SLBgplsTopoLinkIgpMetric() override;
  explicit constexpr SLBgplsTopoLinkIgpMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkIgpMetric(const SLBgplsTopoLinkIgpMetric& from);
  SLBgplsTopoLinkIgpMetric(SLBgplsTopoLinkIgpMetric&& from) noexcept
    : SLBgplsTopoLinkIgpMetric() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkIgpMetric& operator=(const SLBgplsTopoLinkIgpMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkIgpMetric& operator=(SLBgplsTopoLinkIgpMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkIgpMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkIgpMetric* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkIgpMetric*>(
               &_SLBgplsTopoLinkIgpMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SLBgplsTopoLinkIgpMetric& a, SLBgplsTopoLinkIgpMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkIgpMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkIgpMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkIgpMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkIgpMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkIgpMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkIgpMetric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkIgpMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkIgpMetric";
  }
  protected:
  explicit SLBgplsTopoLinkIgpMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 1,
  };
  // bytes Metric = 1;
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkIgpMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkSrlg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkSrlg) */ {
 public:
  inline SLBgplsTopoLinkSrlg() : SLBgplsTopoLinkSrlg(nullptr) {}
  ~SLBgplsTopoLinkSrlg() override;
  explicit constexpr SLBgplsTopoLinkSrlg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkSrlg(const SLBgplsTopoLinkSrlg& from);
  SLBgplsTopoLinkSrlg(SLBgplsTopoLinkSrlg&& from) noexcept
    : SLBgplsTopoLinkSrlg() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkSrlg& operator=(const SLBgplsTopoLinkSrlg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkSrlg& operator=(SLBgplsTopoLinkSrlg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkSrlg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkSrlg* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkSrlg*>(
               &_SLBgplsTopoLinkSrlg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SLBgplsTopoLinkSrlg& a, SLBgplsTopoLinkSrlg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkSrlg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkSrlg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkSrlg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkSrlg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkSrlg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkSrlg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkSrlg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkSrlg";
  }
  protected:
  explicit SLBgplsTopoLinkSrlg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrlgValFieldNumber = 1,
  };
  // uint32 SrlgVal = 1;
  void clear_srlgval();
  uint32_t srlgval() const;
  void set_srlgval(uint32_t value);
  private:
  uint32_t _internal_srlgval() const;
  void _internal_set_srlgval(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkSrlg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t srlgval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkOpaqueAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkOpaqueAttr) */ {
 public:
  inline SLBgplsTopoLinkOpaqueAttr() : SLBgplsTopoLinkOpaqueAttr(nullptr) {}
  ~SLBgplsTopoLinkOpaqueAttr() override;
  explicit constexpr SLBgplsTopoLinkOpaqueAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkOpaqueAttr(const SLBgplsTopoLinkOpaqueAttr& from);
  SLBgplsTopoLinkOpaqueAttr(SLBgplsTopoLinkOpaqueAttr&& from) noexcept
    : SLBgplsTopoLinkOpaqueAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkOpaqueAttr& operator=(const SLBgplsTopoLinkOpaqueAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkOpaqueAttr& operator=(SLBgplsTopoLinkOpaqueAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkOpaqueAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkOpaqueAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkOpaqueAttr*>(
               &_SLBgplsTopoLinkOpaqueAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SLBgplsTopoLinkOpaqueAttr& a, SLBgplsTopoLinkOpaqueAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkOpaqueAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkOpaqueAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkOpaqueAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkOpaqueAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkOpaqueAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkOpaqueAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkOpaqueAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkOpaqueAttr";
  }
  protected:
  explicit SLBgplsTopoLinkOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueAttrFieldNumber = 1,
  };
  // bytes OpaqueAttr = 1;
  void clear_opaqueattr();
  const std::string& opaqueattr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opaqueattr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opaqueattr();
  PROTOBUF_NODISCARD std::string* release_opaqueattr();
  void set_allocated_opaqueattr(std::string* opaqueattr);
  private:
  const std::string& _internal_opaqueattr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opaqueattr(const std::string& value);
  std::string* _internal_mutable_opaqueattr();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkOpaqueAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaqueattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLinkName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLinkName) */ {
 public:
  inline SLBgplsTopoLinkName() : SLBgplsTopoLinkName(nullptr) {}
  ~SLBgplsTopoLinkName() override;
  explicit constexpr SLBgplsTopoLinkName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLinkName(const SLBgplsTopoLinkName& from);
  SLBgplsTopoLinkName(SLBgplsTopoLinkName&& from) noexcept
    : SLBgplsTopoLinkName() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLinkName& operator=(const SLBgplsTopoLinkName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLinkName& operator=(SLBgplsTopoLinkName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLinkName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLinkName* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLinkName*>(
               &_SLBgplsTopoLinkName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SLBgplsTopoLinkName& a, SLBgplsTopoLinkName& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLinkName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLinkName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLinkName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLinkName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLinkName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLinkName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLinkName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLinkName";
  }
  protected:
  explicit SLBgplsTopoLinkName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLinkName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoAdjSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoAdjSid) */ {
 public:
  inline SLBgplsTopoAdjSid() : SLBgplsTopoAdjSid(nullptr) {}
  ~SLBgplsTopoAdjSid() override;
  explicit constexpr SLBgplsTopoAdjSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoAdjSid(const SLBgplsTopoAdjSid& from);
  SLBgplsTopoAdjSid(SLBgplsTopoAdjSid&& from) noexcept
    : SLBgplsTopoAdjSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoAdjSid& operator=(const SLBgplsTopoAdjSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoAdjSid& operator=(SLBgplsTopoAdjSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoAdjSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoAdjSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoAdjSid*>(
               &_SLBgplsTopoAdjSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SLBgplsTopoAdjSid& a, SLBgplsTopoAdjSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoAdjSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoAdjSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoAdjSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoAdjSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoAdjSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoAdjSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoAdjSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoAdjSid";
  }
  protected:
  explicit SLBgplsTopoAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 3,
    kLabelIndexFieldNumber = 1,
    kAdjSidFormatFieldNumber = 2,
    kWeightFieldNumber = 4,
  };
  // bytes Flags = 3;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 LabelIndex = 1;
  void clear_labelindex();
  uint32_t labelindex() const;
  void set_labelindex(uint32_t value);
  private:
  uint32_t _internal_labelindex() const;
  void _internal_set_labelindex(uint32_t value);
  public:

  // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 2;
  void clear_adjsidformat();
  ::service_layer::SLBgplsTopoSidFormat adjsidformat() const;
  void set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value);
  private:
  ::service_layer::SLBgplsTopoSidFormat _internal_adjsidformat() const;
  void _internal_set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value);
  public:

  // uint32 Weight = 4;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoAdjSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t labelindex_;
  int adjsidformat_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoLanAdjSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoLanAdjSid) */ {
 public:
  inline SLBgplsTopoLanAdjSid() : SLBgplsTopoLanAdjSid(nullptr) {}
  ~SLBgplsTopoLanAdjSid() override;
  explicit constexpr SLBgplsTopoLanAdjSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoLanAdjSid(const SLBgplsTopoLanAdjSid& from);
  SLBgplsTopoLanAdjSid(SLBgplsTopoLanAdjSid&& from) noexcept
    : SLBgplsTopoLanAdjSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoLanAdjSid& operator=(const SLBgplsTopoLanAdjSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoLanAdjSid& operator=(SLBgplsTopoLanAdjSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoLanAdjSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoLanAdjSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoLanAdjSid*>(
               &_SLBgplsTopoLanAdjSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SLBgplsTopoLanAdjSid& a, SLBgplsTopoLanAdjSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoLanAdjSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoLanAdjSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoLanAdjSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoLanAdjSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoLanAdjSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoLanAdjSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoLanAdjSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoLanAdjSid";
  }
  protected:
  explicit SLBgplsTopoLanAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 4,
    kNeighborFieldNumber = 1,
    kLabelIndexFieldNumber = 2,
    kAdjSidFormatFieldNumber = 3,
    kWeightFieldNumber = 5,
  };
  // bytes Flags = 4;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  bool has_neighbor() const;
  private:
  bool _internal_has_neighbor() const;
  public:
  void clear_neighbor();
  const ::service_layer::SLBgpLsTopoNeighborId& neighbor() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpLsTopoNeighborId* release_neighbor();
  ::service_layer::SLBgpLsTopoNeighborId* mutable_neighbor();
  void set_allocated_neighbor(::service_layer::SLBgpLsTopoNeighborId* neighbor);
  private:
  const ::service_layer::SLBgpLsTopoNeighborId& _internal_neighbor() const;
  ::service_layer::SLBgpLsTopoNeighborId* _internal_mutable_neighbor();
  public:
  void unsafe_arena_set_allocated_neighbor(
      ::service_layer::SLBgpLsTopoNeighborId* neighbor);
  ::service_layer::SLBgpLsTopoNeighborId* unsafe_arena_release_neighbor();

  // uint32 LabelIndex = 2;
  void clear_labelindex();
  uint32_t labelindex() const;
  void set_labelindex(uint32_t value);
  private:
  uint32_t _internal_labelindex() const;
  void _internal_set_labelindex(uint32_t value);
  public:

  // .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 3;
  void clear_adjsidformat();
  ::service_layer::SLBgplsTopoSidFormat adjsidformat() const;
  void set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value);
  private:
  ::service_layer::SLBgplsTopoSidFormat _internal_adjsidformat() const;
  void _internal_set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value);
  public:

  // uint32 Weight = 5;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoLanAdjSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::service_layer::SLBgpLsTopoNeighborId* neighbor_;
  uint32_t labelindex_;
  int adjsidformat_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoBgpPeerNodeSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoBgpPeerNodeSid) */ {
 public:
  inline SLBgplsTopoBgpPeerNodeSid() : SLBgplsTopoBgpPeerNodeSid(nullptr) {}
  ~SLBgplsTopoBgpPeerNodeSid() override;
  explicit constexpr SLBgplsTopoBgpPeerNodeSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoBgpPeerNodeSid(const SLBgplsTopoBgpPeerNodeSid& from);
  SLBgplsTopoBgpPeerNodeSid(SLBgplsTopoBgpPeerNodeSid&& from) noexcept
    : SLBgplsTopoBgpPeerNodeSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoBgpPeerNodeSid& operator=(const SLBgplsTopoBgpPeerNodeSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoBgpPeerNodeSid& operator=(SLBgplsTopoBgpPeerNodeSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoBgpPeerNodeSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoBgpPeerNodeSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoBgpPeerNodeSid*>(
               &_SLBgplsTopoBgpPeerNodeSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SLBgplsTopoBgpPeerNodeSid& a, SLBgplsTopoBgpPeerNodeSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoBgpPeerNodeSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoBgpPeerNodeSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoBgpPeerNodeSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoBgpPeerNodeSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoBgpPeerNodeSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoBgpPeerNodeSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoBgpPeerNodeSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoBgpPeerNodeSid";
  }
  protected:
  explicit SLBgplsTopoBgpPeerNodeSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kBgpSidFormatFieldNumber = 2,
    kWeightFieldNumber = 4,
  };
  // bytes Sid = 1;
  void clear_sid();
  const std::string& sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sid();
  PROTOBUF_NODISCARD std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // bytes Flags = 3;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  void clear_bgpsidformat();
  ::service_layer::SLBgplsTopoSidFormat bgpsidformat() const;
  void set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value);
  private:
  ::service_layer::SLBgplsTopoSidFormat _internal_bgpsidformat() const;
  void _internal_set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value);
  public:

  // uint32 Weight = 4;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoBgpPeerNodeSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  int bgpsidformat_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoBgpPeerAdjSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoBgpPeerAdjSid) */ {
 public:
  inline SLBgplsTopoBgpPeerAdjSid() : SLBgplsTopoBgpPeerAdjSid(nullptr) {}
  ~SLBgplsTopoBgpPeerAdjSid() override;
  explicit constexpr SLBgplsTopoBgpPeerAdjSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoBgpPeerAdjSid(const SLBgplsTopoBgpPeerAdjSid& from);
  SLBgplsTopoBgpPeerAdjSid(SLBgplsTopoBgpPeerAdjSid&& from) noexcept
    : SLBgplsTopoBgpPeerAdjSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoBgpPeerAdjSid& operator=(const SLBgplsTopoBgpPeerAdjSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoBgpPeerAdjSid& operator=(SLBgplsTopoBgpPeerAdjSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoBgpPeerAdjSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoBgpPeerAdjSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoBgpPeerAdjSid*>(
               &_SLBgplsTopoBgpPeerAdjSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SLBgplsTopoBgpPeerAdjSid& a, SLBgplsTopoBgpPeerAdjSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoBgpPeerAdjSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoBgpPeerAdjSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoBgpPeerAdjSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoBgpPeerAdjSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoBgpPeerAdjSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoBgpPeerAdjSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoBgpPeerAdjSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoBgpPeerAdjSid";
  }
  protected:
  explicit SLBgplsTopoBgpPeerAdjSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kBgpSidFormatFieldNumber = 2,
    kWeightFieldNumber = 4,
  };
  // bytes Sid = 1;
  void clear_sid();
  const std::string& sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sid();
  PROTOBUF_NODISCARD std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // bytes Flags = 3;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  void clear_bgpsidformat();
  ::service_layer::SLBgplsTopoSidFormat bgpsidformat() const;
  void set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value);
  private:
  ::service_layer::SLBgplsTopoSidFormat _internal_bgpsidformat() const;
  void _internal_set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value);
  public:

  // uint32 Weight = 4;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoBgpPeerAdjSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  int bgpsidformat_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoBgpPeerSetSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoBgpPeerSetSid) */ {
 public:
  inline SLBgplsTopoBgpPeerSetSid() : SLBgplsTopoBgpPeerSetSid(nullptr) {}
  ~SLBgplsTopoBgpPeerSetSid() override;
  explicit constexpr SLBgplsTopoBgpPeerSetSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoBgpPeerSetSid(const SLBgplsTopoBgpPeerSetSid& from);
  SLBgplsTopoBgpPeerSetSid(SLBgplsTopoBgpPeerSetSid&& from) noexcept
    : SLBgplsTopoBgpPeerSetSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoBgpPeerSetSid& operator=(const SLBgplsTopoBgpPeerSetSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoBgpPeerSetSid& operator=(SLBgplsTopoBgpPeerSetSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoBgpPeerSetSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoBgpPeerSetSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoBgpPeerSetSid*>(
               &_SLBgplsTopoBgpPeerSetSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SLBgplsTopoBgpPeerSetSid& a, SLBgplsTopoBgpPeerSetSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoBgpPeerSetSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoBgpPeerSetSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoBgpPeerSetSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoBgpPeerSetSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoBgpPeerSetSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoBgpPeerSetSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoBgpPeerSetSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoBgpPeerSetSid";
  }
  protected:
  explicit SLBgplsTopoBgpPeerSetSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kBgpSidFormatFieldNumber = 2,
    kWeightFieldNumber = 4,
  };
  // bytes Sid = 1;
  void clear_sid();
  const std::string& sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sid();
  PROTOBUF_NODISCARD std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // bytes Flags = 3;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
  void clear_bgpsidformat();
  ::service_layer::SLBgplsTopoSidFormat bgpsidformat() const;
  void set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value);
  private:
  ::service_layer::SLBgplsTopoSidFormat _internal_bgpsidformat() const;
  void _internal_set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value);
  public:

  // uint32 Weight = 4;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoBgpPeerSetSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  int bgpsidformat_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6EndXSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6EndXSid) */ {
 public:
  inline SLBgplsTopoSrv6EndXSid() : SLBgplsTopoSrv6EndXSid(nullptr) {}
  ~SLBgplsTopoSrv6EndXSid() override;
  explicit constexpr SLBgplsTopoSrv6EndXSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6EndXSid(const SLBgplsTopoSrv6EndXSid& from);
  SLBgplsTopoSrv6EndXSid(SLBgplsTopoSrv6EndXSid&& from) noexcept
    : SLBgplsTopoSrv6EndXSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6EndXSid& operator=(const SLBgplsTopoSrv6EndXSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6EndXSid& operator=(SLBgplsTopoSrv6EndXSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6EndXSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6EndXSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6EndXSid*>(
               &_SLBgplsTopoSrv6EndXSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SLBgplsTopoSrv6EndXSid& a, SLBgplsTopoSrv6EndXSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6EndXSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6EndXSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6EndXSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6EndXSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6EndXSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6EndXSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6EndXSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6EndXSid";
  }
  protected:
  explicit SLBgplsTopoSrv6EndXSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kSidStructFieldNumber = 6,
    kAlgorithmFieldNumber = 2,
    kWeightFieldNumber = 4,
    kEndPointBehaviorFieldNumber = 5,
  };
  // bytes Sid = 1;
  void clear_sid();
  const std::string& sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sid();
  PROTOBUF_NODISCARD std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // bytes Flags = 3;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 6;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidStruct* release_sidstruct();
  ::service_layer::SLBgplsTopoSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLBgplsTopoSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  ::service_layer::SLBgplsTopoSrv6SidStruct* unsafe_arena_release_sidstruct();

  // uint32 Algorithm = 2;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 Weight = 4;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // uint32 EndPointBehavior = 5;
  void clear_endpointbehavior();
  uint32_t endpointbehavior() const;
  void set_endpointbehavior(uint32_t value);
  private:
  uint32_t _internal_endpointbehavior() const;
  void _internal_set_endpointbehavior(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6EndXSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct_;
  uint32_t algorithm_;
  uint32_t weight_;
  uint32_t endpointbehavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgpLsTopoNeighborId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgpLsTopoNeighborId) */ {
 public:
  inline SLBgpLsTopoNeighborId() : SLBgpLsTopoNeighborId(nullptr) {}
  ~SLBgpLsTopoNeighborId() override;
  explicit constexpr SLBgpLsTopoNeighborId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgpLsTopoNeighborId(const SLBgpLsTopoNeighborId& from);
  SLBgpLsTopoNeighborId(SLBgpLsTopoNeighborId&& from) noexcept
    : SLBgpLsTopoNeighborId() {
    *this = ::std::move(from);
  }

  inline SLBgpLsTopoNeighborId& operator=(const SLBgpLsTopoNeighborId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgpLsTopoNeighborId& operator=(SLBgpLsTopoNeighborId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgpLsTopoNeighborId& default_instance() {
    return *internal_default_instance();
  }
  enum NeighborIdCase {
    kIpv4Addr = 1,
    kSystemId = 2,
    NEIGHBORID_NOT_SET = 0,
  };

  static inline const SLBgpLsTopoNeighborId* internal_default_instance() {
    return reinterpret_cast<const SLBgpLsTopoNeighborId*>(
               &_SLBgpLsTopoNeighborId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SLBgpLsTopoNeighborId& a, SLBgpLsTopoNeighborId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgpLsTopoNeighborId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgpLsTopoNeighborId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgpLsTopoNeighborId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgpLsTopoNeighborId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgpLsTopoNeighborId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgpLsTopoNeighborId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgpLsTopoNeighborId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgpLsTopoNeighborId";
  }
  protected:
  explicit SLBgpLsTopoNeighborId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv4AddrFieldNumber = 1,
    kSystemIdFieldNumber = 2,
  };
  // bytes Ipv4Addr = 1;
  bool has_ipv4addr() const;
  private:
  bool _internal_has_ipv4addr() const;
  public:
  void clear_ipv4addr();
  const std::string& ipv4addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4addr();
  PROTOBUF_NODISCARD std::string* release_ipv4addr();
  void set_allocated_ipv4addr(std::string* ipv4addr);
  private:
  const std::string& _internal_ipv4addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4addr(const std::string& value);
  std::string* _internal_mutable_ipv4addr();
  public:

  // bytes SystemId = 2;
  bool has_systemid() const;
  private:
  bool _internal_has_systemid() const;
  public:
  void clear_systemid();
  const std::string& systemid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_systemid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_systemid();
  PROTOBUF_NODISCARD std::string* release_systemid();
  void set_allocated_systemid(std::string* systemid);
  private:
  const std::string& _internal_systemid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_systemid(const std::string& value);
  std::string* _internal_mutable_systemid();
  public:

  void clear_NeighborId();
  NeighborIdCase NeighborId_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgpLsTopoNeighborId)
 private:
  class _Internal;
  void set_has_ipv4addr();
  void set_has_systemid();

  inline bool has_NeighborId() const;
  inline void clear_has_NeighborId();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union NeighborIdUnion {
    constexpr NeighborIdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemid_;
  } NeighborId_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6LanEndXSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6LanEndXSid) */ {
 public:
  inline SLBgplsTopoSrv6LanEndXSid() : SLBgplsTopoSrv6LanEndXSid(nullptr) {}
  ~SLBgplsTopoSrv6LanEndXSid() override;
  explicit constexpr SLBgplsTopoSrv6LanEndXSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6LanEndXSid(const SLBgplsTopoSrv6LanEndXSid& from);
  SLBgplsTopoSrv6LanEndXSid(SLBgplsTopoSrv6LanEndXSid&& from) noexcept
    : SLBgplsTopoSrv6LanEndXSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6LanEndXSid& operator=(const SLBgplsTopoSrv6LanEndXSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6LanEndXSid& operator=(SLBgplsTopoSrv6LanEndXSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6LanEndXSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6LanEndXSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6LanEndXSid*>(
               &_SLBgplsTopoSrv6LanEndXSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(SLBgplsTopoSrv6LanEndXSid& a, SLBgplsTopoSrv6LanEndXSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6LanEndXSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6LanEndXSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6LanEndXSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6LanEndXSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6LanEndXSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6LanEndXSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6LanEndXSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6LanEndXSid";
  }
  protected:
  explicit SLBgplsTopoSrv6LanEndXSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 2,
    kFlagsFieldNumber = 4,
    kNeighborFieldNumber = 1,
    kSidStructFieldNumber = 7,
    kAlgorithmFieldNumber = 3,
    kWeightFieldNumber = 5,
    kEndPointBehaviorFieldNumber = 6,
  };
  // bytes Sid = 2;
  void clear_sid();
  const std::string& sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sid();
  PROTOBUF_NODISCARD std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // bytes Flags = 4;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
  bool has_neighbor() const;
  private:
  bool _internal_has_neighbor() const;
  public:
  void clear_neighbor();
  const ::service_layer::SLBgpLsTopoNeighborId& neighbor() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgpLsTopoNeighborId* release_neighbor();
  ::service_layer::SLBgpLsTopoNeighborId* mutable_neighbor();
  void set_allocated_neighbor(::service_layer::SLBgpLsTopoNeighborId* neighbor);
  private:
  const ::service_layer::SLBgpLsTopoNeighborId& _internal_neighbor() const;
  ::service_layer::SLBgpLsTopoNeighborId* _internal_mutable_neighbor();
  public:
  void unsafe_arena_set_allocated_neighbor(
      ::service_layer::SLBgpLsTopoNeighborId* neighbor);
  ::service_layer::SLBgpLsTopoNeighborId* unsafe_arena_release_neighbor();

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidStruct* release_sidstruct();
  ::service_layer::SLBgplsTopoSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLBgplsTopoSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  ::service_layer::SLBgplsTopoSrv6SidStruct* unsafe_arena_release_sidstruct();

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 Weight = 5;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // uint32 EndPointBehavior = 6;
  void clear_endpointbehavior();
  uint32_t endpointbehavior() const;
  void set_endpointbehavior(uint32_t value);
  private:
  uint32_t _internal_endpointbehavior() const;
  void _internal_set_endpointbehavior(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6LanEndXSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::service_layer::SLBgpLsTopoNeighborId* neighbor_;
  ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct_;
  uint32_t algorithm_;
  uint32_t weight_;
  uint32_t endpointbehavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUniLinkDelay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUniLinkDelay) */ {
 public:
  inline SLBgplsTopoUniLinkDelay() : SLBgplsTopoUniLinkDelay(nullptr) {}
  ~SLBgplsTopoUniLinkDelay() override;
  explicit constexpr SLBgplsTopoUniLinkDelay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUniLinkDelay(const SLBgplsTopoUniLinkDelay& from);
  SLBgplsTopoUniLinkDelay(SLBgplsTopoUniLinkDelay&& from) noexcept
    : SLBgplsTopoUniLinkDelay() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUniLinkDelay& operator=(const SLBgplsTopoUniLinkDelay& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUniLinkDelay& operator=(SLBgplsTopoUniLinkDelay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUniLinkDelay& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUniLinkDelay* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUniLinkDelay*>(
               &_SLBgplsTopoUniLinkDelay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SLBgplsTopoUniLinkDelay& a, SLBgplsTopoUniLinkDelay& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUniLinkDelay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUniLinkDelay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUniLinkDelay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUniLinkDelay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUniLinkDelay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUniLinkDelay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUniLinkDelay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUniLinkDelay";
  }
  protected:
  explicit SLBgplsTopoUniLinkDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kDelayFieldNumber = 1,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Delay = 1;
  void clear_delay();
  uint32_t delay() const;
  void set_delay(uint32_t value);
  private:
  uint32_t _internal_delay() const;
  void _internal_set_delay(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUniLinkDelay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoMinMaxUniLinkDelay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoMinMaxUniLinkDelay) */ {
 public:
  inline SLBgplsTopoMinMaxUniLinkDelay() : SLBgplsTopoMinMaxUniLinkDelay(nullptr) {}
  ~SLBgplsTopoMinMaxUniLinkDelay() override;
  explicit constexpr SLBgplsTopoMinMaxUniLinkDelay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoMinMaxUniLinkDelay(const SLBgplsTopoMinMaxUniLinkDelay& from);
  SLBgplsTopoMinMaxUniLinkDelay(SLBgplsTopoMinMaxUniLinkDelay&& from) noexcept
    : SLBgplsTopoMinMaxUniLinkDelay() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoMinMaxUniLinkDelay& operator=(const SLBgplsTopoMinMaxUniLinkDelay& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoMinMaxUniLinkDelay& operator=(SLBgplsTopoMinMaxUniLinkDelay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoMinMaxUniLinkDelay& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoMinMaxUniLinkDelay* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoMinMaxUniLinkDelay*>(
               &_SLBgplsTopoMinMaxUniLinkDelay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SLBgplsTopoMinMaxUniLinkDelay& a, SLBgplsTopoMinMaxUniLinkDelay& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoMinMaxUniLinkDelay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoMinMaxUniLinkDelay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoMinMaxUniLinkDelay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoMinMaxUniLinkDelay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoMinMaxUniLinkDelay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoMinMaxUniLinkDelay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoMinMaxUniLinkDelay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoMinMaxUniLinkDelay";
  }
  protected:
  explicit SLBgplsTopoMinMaxUniLinkDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 3,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // bytes Flags = 3;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Min = 1;
  void clear_min();
  uint32_t min() const;
  void set_min(uint32_t value);
  private:
  uint32_t _internal_min() const;
  void _internal_set_min(uint32_t value);
  public:

  // uint32 Max = 2;
  void clear_max();
  uint32_t max() const;
  void set_max(uint32_t value);
  private:
  uint32_t _internal_max() const;
  void _internal_set_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoMinMaxUniLinkDelay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t min_;
  uint32_t max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUniDelayVar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUniDelayVar) */ {
 public:
  inline SLBgplsTopoUniDelayVar() : SLBgplsTopoUniDelayVar(nullptr) {}
  ~SLBgplsTopoUniDelayVar() override;
  explicit constexpr SLBgplsTopoUniDelayVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUniDelayVar(const SLBgplsTopoUniDelayVar& from);
  SLBgplsTopoUniDelayVar(SLBgplsTopoUniDelayVar&& from) noexcept
    : SLBgplsTopoUniDelayVar() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUniDelayVar& operator=(const SLBgplsTopoUniDelayVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUniDelayVar& operator=(SLBgplsTopoUniDelayVar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUniDelayVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUniDelayVar* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUniDelayVar*>(
               &_SLBgplsTopoUniDelayVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SLBgplsTopoUniDelayVar& a, SLBgplsTopoUniDelayVar& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUniDelayVar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUniDelayVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUniDelayVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUniDelayVar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUniDelayVar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUniDelayVar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUniDelayVar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUniDelayVar";
  }
  protected:
  explicit SLBgplsTopoUniDelayVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kVariationFieldNumber = 1,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Variation = 1;
  void clear_variation();
  uint32_t variation() const;
  void set_variation(uint32_t value);
  private:
  uint32_t _internal_variation() const;
  void _internal_set_variation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUniDelayVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t variation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUniLinkLoss final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUniLinkLoss) */ {
 public:
  inline SLBgplsTopoUniLinkLoss() : SLBgplsTopoUniLinkLoss(nullptr) {}
  ~SLBgplsTopoUniLinkLoss() override;
  explicit constexpr SLBgplsTopoUniLinkLoss(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUniLinkLoss(const SLBgplsTopoUniLinkLoss& from);
  SLBgplsTopoUniLinkLoss(SLBgplsTopoUniLinkLoss&& from) noexcept
    : SLBgplsTopoUniLinkLoss() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUniLinkLoss& operator=(const SLBgplsTopoUniLinkLoss& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUniLinkLoss& operator=(SLBgplsTopoUniLinkLoss&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUniLinkLoss& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUniLinkLoss* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUniLinkLoss*>(
               &_SLBgplsTopoUniLinkLoss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SLBgplsTopoUniLinkLoss& a, SLBgplsTopoUniLinkLoss& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUniLinkLoss* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUniLinkLoss* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUniLinkLoss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUniLinkLoss>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUniLinkLoss& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUniLinkLoss& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUniLinkLoss* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUniLinkLoss";
  }
  protected:
  explicit SLBgplsTopoUniLinkLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kLossFieldNumber = 1,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Loss = 1;
  void clear_loss();
  uint32_t loss() const;
  void set_loss(uint32_t value);
  private:
  uint32_t _internal_loss() const;
  void _internal_set_loss(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUniLinkLoss)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t loss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUniResBandwidth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUniResBandwidth) */ {
 public:
  inline SLBgplsTopoUniResBandwidth() : SLBgplsTopoUniResBandwidth(nullptr) {}
  ~SLBgplsTopoUniResBandwidth() override;
  explicit constexpr SLBgplsTopoUniResBandwidth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUniResBandwidth(const SLBgplsTopoUniResBandwidth& from);
  SLBgplsTopoUniResBandwidth(SLBgplsTopoUniResBandwidth&& from) noexcept
    : SLBgplsTopoUniResBandwidth() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUniResBandwidth& operator=(const SLBgplsTopoUniResBandwidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUniResBandwidth& operator=(SLBgplsTopoUniResBandwidth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUniResBandwidth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUniResBandwidth* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUniResBandwidth*>(
               &_SLBgplsTopoUniResBandwidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SLBgplsTopoUniResBandwidth& a, SLBgplsTopoUniResBandwidth& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUniResBandwidth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUniResBandwidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUniResBandwidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUniResBandwidth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUniResBandwidth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUniResBandwidth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUniResBandwidth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUniResBandwidth";
  }
  protected:
  explicit SLBgplsTopoUniResBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUniResBandwidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUniAvailBandwidth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUniAvailBandwidth) */ {
 public:
  inline SLBgplsTopoUniAvailBandwidth() : SLBgplsTopoUniAvailBandwidth(nullptr) {}
  ~SLBgplsTopoUniAvailBandwidth() override;
  explicit constexpr SLBgplsTopoUniAvailBandwidth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUniAvailBandwidth(const SLBgplsTopoUniAvailBandwidth& from);
  SLBgplsTopoUniAvailBandwidth(SLBgplsTopoUniAvailBandwidth&& from) noexcept
    : SLBgplsTopoUniAvailBandwidth() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUniAvailBandwidth& operator=(const SLBgplsTopoUniAvailBandwidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUniAvailBandwidth& operator=(SLBgplsTopoUniAvailBandwidth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUniAvailBandwidth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUniAvailBandwidth* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUniAvailBandwidth*>(
               &_SLBgplsTopoUniAvailBandwidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SLBgplsTopoUniAvailBandwidth& a, SLBgplsTopoUniAvailBandwidth& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUniAvailBandwidth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUniAvailBandwidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUniAvailBandwidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUniAvailBandwidth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUniAvailBandwidth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUniAvailBandwidth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUniAvailBandwidth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUniAvailBandwidth";
  }
  protected:
  explicit SLBgplsTopoUniAvailBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUniAvailBandwidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUniUtilBandwidth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUniUtilBandwidth) */ {
 public:
  inline SLBgplsTopoUniUtilBandwidth() : SLBgplsTopoUniUtilBandwidth(nullptr) {}
  ~SLBgplsTopoUniUtilBandwidth() override;
  explicit constexpr SLBgplsTopoUniUtilBandwidth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUniUtilBandwidth(const SLBgplsTopoUniUtilBandwidth& from);
  SLBgplsTopoUniUtilBandwidth(SLBgplsTopoUniUtilBandwidth&& from) noexcept
    : SLBgplsTopoUniUtilBandwidth() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUniUtilBandwidth& operator=(const SLBgplsTopoUniUtilBandwidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUniUtilBandwidth& operator=(SLBgplsTopoUniUtilBandwidth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUniUtilBandwidth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUniUtilBandwidth* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUniUtilBandwidth*>(
               &_SLBgplsTopoUniUtilBandwidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SLBgplsTopoUniUtilBandwidth& a, SLBgplsTopoUniUtilBandwidth& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUniUtilBandwidth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUniUtilBandwidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUniUtilBandwidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUniUtilBandwidth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUniUtilBandwidth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUniUtilBandwidth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUniUtilBandwidth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUniUtilBandwidth";
  }
  protected:
  explicit SLBgplsTopoUniUtilBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUniUtilBandwidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoAslaAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoAslaAttr) */ {
 public:
  inline SLBgplsTopoAslaAttr() : SLBgplsTopoAslaAttr(nullptr) {}
  ~SLBgplsTopoAslaAttr() override;
  explicit constexpr SLBgplsTopoAslaAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoAslaAttr(const SLBgplsTopoAslaAttr& from);
  SLBgplsTopoAslaAttr(SLBgplsTopoAslaAttr&& from) noexcept
    : SLBgplsTopoAslaAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoAslaAttr& operator=(const SLBgplsTopoAslaAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoAslaAttr& operator=(SLBgplsTopoAslaAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoAslaAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoAslaAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoAslaAttr*>(
               &_SLBgplsTopoAslaAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SLBgplsTopoAslaAttr& a, SLBgplsTopoAslaAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoAslaAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoAslaAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoAslaAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoAslaAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoAslaAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoAslaAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoAslaAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoAslaAttr";
  }
  protected:
  explicit SLBgplsTopoAslaAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrlgFieldNumber = 5,
    kExtAdminGroupFieldNumber = 13,
    kUnknownAttrFieldNumber = 14,
    kSabmFieldNumber = 1,
    kUdabmFieldNumber = 2,
    kAdminGroupFieldNumber = 3,
    kTeDefMetricFieldNumber = 4,
    kUniLinkDelayFieldNumber = 6,
    kMinMaxLinkDelayFieldNumber = 7,
    kUniDelayVariationFieldNumber = 8,
    kUniLinkLossFieldNumber = 9,
    kUniResBandwidthFieldNumber = 10,
    kUniAvailBandwidthFieldNumber = 11,
    kUniUtilBandwidthFieldNumber = 12,
  };
  // repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
  int srlg_size() const;
  private:
  int _internal_srlg_size() const;
  public:
  void clear_srlg();
  ::service_layer::SLBgplsTopoLinkSrlg* mutable_srlg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >*
      mutable_srlg();
  private:
  const ::service_layer::SLBgplsTopoLinkSrlg& _internal_srlg(int index) const;
  ::service_layer::SLBgplsTopoLinkSrlg* _internal_add_srlg();
  public:
  const ::service_layer::SLBgplsTopoLinkSrlg& srlg(int index) const;
  ::service_layer::SLBgplsTopoLinkSrlg* add_srlg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >&
      srlg() const;

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 13;
  int extadmingroup_size() const;
  private:
  int _internal_extadmingroup_size() const;
  public:
  void clear_extadmingroup();
  ::service_layer::SLBgplsTopoExtAdminGroup* mutable_extadmingroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >*
      mutable_extadmingroup();
  private:
  const ::service_layer::SLBgplsTopoExtAdminGroup& _internal_extadmingroup(int index) const;
  ::service_layer::SLBgplsTopoExtAdminGroup* _internal_add_extadmingroup();
  public:
  const ::service_layer::SLBgplsTopoExtAdminGroup& extadmingroup(int index) const;
  ::service_layer::SLBgplsTopoExtAdminGroup* add_extadmingroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >&
      extadmingroup() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // bytes Sabm = 1;
  void clear_sabm();
  const std::string& sabm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sabm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sabm();
  PROTOBUF_NODISCARD std::string* release_sabm();
  void set_allocated_sabm(std::string* sabm);
  private:
  const std::string& _internal_sabm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sabm(const std::string& value);
  std::string* _internal_mutable_sabm();
  public:

  // bytes Udabm = 2;
  void clear_udabm();
  const std::string& udabm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_udabm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_udabm();
  PROTOBUF_NODISCARD std::string* release_udabm();
  void set_allocated_udabm(std::string* udabm);
  private:
  const std::string& _internal_udabm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udabm(const std::string& value);
  std::string* _internal_mutable_udabm();
  public:

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 3;
  bool has_admingroup() const;
  private:
  bool _internal_has_admingroup() const;
  public:
  void clear_admingroup();
  const ::service_layer::SLBgplsTopoAdminGroup& admingroup() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoAdminGroup* release_admingroup();
  ::service_layer::SLBgplsTopoAdminGroup* mutable_admingroup();
  void set_allocated_admingroup(::service_layer::SLBgplsTopoAdminGroup* admingroup);
  private:
  const ::service_layer::SLBgplsTopoAdminGroup& _internal_admingroup() const;
  ::service_layer::SLBgplsTopoAdminGroup* _internal_mutable_admingroup();
  public:
  void unsafe_arena_set_allocated_admingroup(
      ::service_layer::SLBgplsTopoAdminGroup* admingroup);
  ::service_layer::SLBgplsTopoAdminGroup* unsafe_arena_release_admingroup();

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
  bool has_tedefmetric() const;
  private:
  bool _internal_has_tedefmetric() const;
  public:
  void clear_tedefmetric();
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkTeDefaultMetric* release_tedefmetric();
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* mutable_tedefmetric();
  void set_allocated_tedefmetric(::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric);
  private:
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& _internal_tedefmetric() const;
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* _internal_mutable_tedefmetric();
  public:
  void unsafe_arena_set_allocated_tedefmetric(
      ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric);
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* unsafe_arena_release_tedefmetric();

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
  bool has_unilinkdelay() const;
  private:
  bool _internal_has_unilinkdelay() const;
  public:
  void clear_unilinkdelay();
  const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniLinkDelay* release_unilinkdelay();
  ::service_layer::SLBgplsTopoUniLinkDelay* mutable_unilinkdelay();
  void set_allocated_unilinkdelay(::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay);
  private:
  const ::service_layer::SLBgplsTopoUniLinkDelay& _internal_unilinkdelay() const;
  ::service_layer::SLBgplsTopoUniLinkDelay* _internal_mutable_unilinkdelay();
  public:
  void unsafe_arena_set_allocated_unilinkdelay(
      ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay);
  ::service_layer::SLBgplsTopoUniLinkDelay* unsafe_arena_release_unilinkdelay();

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
  bool has_minmaxlinkdelay() const;
  private:
  bool _internal_has_minmaxlinkdelay() const;
  public:
  void clear_minmaxlinkdelay();
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxlinkdelay() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* release_minmaxlinkdelay();
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* mutable_minmaxlinkdelay();
  void set_allocated_minmaxlinkdelay(::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay);
  private:
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& _internal_minmaxlinkdelay() const;
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* _internal_mutable_minmaxlinkdelay();
  public:
  void unsafe_arena_set_allocated_minmaxlinkdelay(
      ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay);
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* unsafe_arena_release_minmaxlinkdelay();

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
  bool has_unidelayvariation() const;
  private:
  bool _internal_has_unidelayvariation() const;
  public:
  void clear_unidelayvariation();
  const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvariation() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniDelayVar* release_unidelayvariation();
  ::service_layer::SLBgplsTopoUniDelayVar* mutable_unidelayvariation();
  void set_allocated_unidelayvariation(::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation);
  private:
  const ::service_layer::SLBgplsTopoUniDelayVar& _internal_unidelayvariation() const;
  ::service_layer::SLBgplsTopoUniDelayVar* _internal_mutable_unidelayvariation();
  public:
  void unsafe_arena_set_allocated_unidelayvariation(
      ::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation);
  ::service_layer::SLBgplsTopoUniDelayVar* unsafe_arena_release_unidelayvariation();

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
  bool has_unilinkloss() const;
  private:
  bool _internal_has_unilinkloss() const;
  public:
  void clear_unilinkloss();
  const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniLinkLoss* release_unilinkloss();
  ::service_layer::SLBgplsTopoUniLinkLoss* mutable_unilinkloss();
  void set_allocated_unilinkloss(::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss);
  private:
  const ::service_layer::SLBgplsTopoUniLinkLoss& _internal_unilinkloss() const;
  ::service_layer::SLBgplsTopoUniLinkLoss* _internal_mutable_unilinkloss();
  public:
  void unsafe_arena_set_allocated_unilinkloss(
      ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss);
  ::service_layer::SLBgplsTopoUniLinkLoss* unsafe_arena_release_unilinkloss();

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
  bool has_uniresbandwidth() const;
  private:
  bool _internal_has_uniresbandwidth() const;
  public:
  void clear_uniresbandwidth();
  const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniResBandwidth* release_uniresbandwidth();
  ::service_layer::SLBgplsTopoUniResBandwidth* mutable_uniresbandwidth();
  void set_allocated_uniresbandwidth(::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniResBandwidth& _internal_uniresbandwidth() const;
  ::service_layer::SLBgplsTopoUniResBandwidth* _internal_mutable_uniresbandwidth();
  public:
  void unsafe_arena_set_allocated_uniresbandwidth(
      ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth);
  ::service_layer::SLBgplsTopoUniResBandwidth* unsafe_arena_release_uniresbandwidth();

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
  bool has_uniavailbandwidth() const;
  private:
  bool _internal_has_uniavailbandwidth() const;
  public:
  void clear_uniavailbandwidth();
  const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniAvailBandwidth* release_uniavailbandwidth();
  ::service_layer::SLBgplsTopoUniAvailBandwidth* mutable_uniavailbandwidth();
  void set_allocated_uniavailbandwidth(::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniAvailBandwidth& _internal_uniavailbandwidth() const;
  ::service_layer::SLBgplsTopoUniAvailBandwidth* _internal_mutable_uniavailbandwidth();
  public:
  void unsafe_arena_set_allocated_uniavailbandwidth(
      ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth);
  ::service_layer::SLBgplsTopoUniAvailBandwidth* unsafe_arena_release_uniavailbandwidth();

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
  bool has_uniutilbandwidth() const;
  private:
  bool _internal_has_uniutilbandwidth() const;
  public:
  void clear_uniutilbandwidth();
  const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniUtilBandwidth* release_uniutilbandwidth();
  ::service_layer::SLBgplsTopoUniUtilBandwidth* mutable_uniutilbandwidth();
  void set_allocated_uniutilbandwidth(::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniUtilBandwidth& _internal_uniutilbandwidth() const;
  ::service_layer::SLBgplsTopoUniUtilBandwidth* _internal_mutable_uniutilbandwidth();
  public:
  void unsafe_arena_set_allocated_uniutilbandwidth(
      ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth);
  ::service_layer::SLBgplsTopoUniUtilBandwidth* unsafe_arena_release_uniutilbandwidth();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoAslaAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg > srlg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup > extadmingroup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sabm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udabm_;
  ::service_layer::SLBgplsTopoAdminGroup* admingroup_;
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric_;
  ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay_;
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay_;
  ::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation_;
  ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss_;
  ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth_;
  ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth_;
  ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixIgpFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixIgpFlags) */ {
 public:
  inline SLBgplsTopoPrefixIgpFlags() : SLBgplsTopoPrefixIgpFlags(nullptr) {}
  ~SLBgplsTopoPrefixIgpFlags() override;
  explicit constexpr SLBgplsTopoPrefixIgpFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixIgpFlags(const SLBgplsTopoPrefixIgpFlags& from);
  SLBgplsTopoPrefixIgpFlags(SLBgplsTopoPrefixIgpFlags&& from) noexcept
    : SLBgplsTopoPrefixIgpFlags() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixIgpFlags& operator=(const SLBgplsTopoPrefixIgpFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixIgpFlags& operator=(SLBgplsTopoPrefixIgpFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixIgpFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixIgpFlags* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixIgpFlags*>(
               &_SLBgplsTopoPrefixIgpFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SLBgplsTopoPrefixIgpFlags& a, SLBgplsTopoPrefixIgpFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixIgpFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixIgpFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixIgpFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixIgpFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixIgpFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixIgpFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixIgpFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixIgpFlags";
  }
  protected:
  explicit SLBgplsTopoPrefixIgpFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixIgpFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixIgpRouteTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixIgpRouteTag) */ {
 public:
  inline SLBgplsTopoPrefixIgpRouteTag() : SLBgplsTopoPrefixIgpRouteTag(nullptr) {}
  ~SLBgplsTopoPrefixIgpRouteTag() override;
  explicit constexpr SLBgplsTopoPrefixIgpRouteTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixIgpRouteTag(const SLBgplsTopoPrefixIgpRouteTag& from);
  SLBgplsTopoPrefixIgpRouteTag(SLBgplsTopoPrefixIgpRouteTag&& from) noexcept
    : SLBgplsTopoPrefixIgpRouteTag() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixIgpRouteTag& operator=(const SLBgplsTopoPrefixIgpRouteTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixIgpRouteTag& operator=(SLBgplsTopoPrefixIgpRouteTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixIgpRouteTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixIgpRouteTag* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixIgpRouteTag*>(
               &_SLBgplsTopoPrefixIgpRouteTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SLBgplsTopoPrefixIgpRouteTag& a, SLBgplsTopoPrefixIgpRouteTag& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixIgpRouteTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixIgpRouteTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixIgpRouteTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixIgpRouteTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixIgpRouteTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixIgpRouteTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixIgpRouteTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixIgpRouteTag";
  }
  protected:
  explicit SLBgplsTopoPrefixIgpRouteTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // uint32 Tag = 1;
  void clear_tag();
  uint32_t tag() const;
  void set_tag(uint32_t value);
  private:
  uint32_t _internal_tag() const;
  void _internal_set_tag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixIgpRouteTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixIgpExtRouteTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixIgpExtRouteTag) */ {
 public:
  inline SLBgplsTopoPrefixIgpExtRouteTag() : SLBgplsTopoPrefixIgpExtRouteTag(nullptr) {}
  ~SLBgplsTopoPrefixIgpExtRouteTag() override;
  explicit constexpr SLBgplsTopoPrefixIgpExtRouteTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixIgpExtRouteTag(const SLBgplsTopoPrefixIgpExtRouteTag& from);
  SLBgplsTopoPrefixIgpExtRouteTag(SLBgplsTopoPrefixIgpExtRouteTag&& from) noexcept
    : SLBgplsTopoPrefixIgpExtRouteTag() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixIgpExtRouteTag& operator=(const SLBgplsTopoPrefixIgpExtRouteTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixIgpExtRouteTag& operator=(SLBgplsTopoPrefixIgpExtRouteTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixIgpExtRouteTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixIgpExtRouteTag* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixIgpExtRouteTag*>(
               &_SLBgplsTopoPrefixIgpExtRouteTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SLBgplsTopoPrefixIgpExtRouteTag& a, SLBgplsTopoPrefixIgpExtRouteTag& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixIgpExtRouteTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixIgpExtRouteTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixIgpExtRouteTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixIgpExtRouteTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixIgpExtRouteTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixIgpExtRouteTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixIgpExtRouteTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixIgpExtRouteTag";
  }
  protected:
  explicit SLBgplsTopoPrefixIgpExtRouteTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // uint64 Tag = 1;
  void clear_tag();
  uint64_t tag() const;
  void set_tag(uint64_t value);
  private:
  uint64_t _internal_tag() const;
  void _internal_set_tag(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixIgpExtRouteTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixMetric) */ {
 public:
  inline SLBgplsTopoPrefixMetric() : SLBgplsTopoPrefixMetric(nullptr) {}
  ~SLBgplsTopoPrefixMetric() override;
  explicit constexpr SLBgplsTopoPrefixMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixMetric(const SLBgplsTopoPrefixMetric& from);
  SLBgplsTopoPrefixMetric(SLBgplsTopoPrefixMetric&& from) noexcept
    : SLBgplsTopoPrefixMetric() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixMetric& operator=(const SLBgplsTopoPrefixMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixMetric& operator=(SLBgplsTopoPrefixMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixMetric* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixMetric*>(
               &_SLBgplsTopoPrefixMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SLBgplsTopoPrefixMetric& a, SLBgplsTopoPrefixMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixMetric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixMetric";
  }
  protected:
  explicit SLBgplsTopoPrefixMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 1,
  };
  // uint32 Metric = 1;
  void clear_metric();
  uint32_t metric() const;
  void set_metric(uint32_t value);
  private:
  uint32_t _internal_metric() const;
  void _internal_set_metric(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixOspfFwdAddr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixOspfFwdAddr) */ {
 public:
  inline SLBgplsTopoPrefixOspfFwdAddr() : SLBgplsTopoPrefixOspfFwdAddr(nullptr) {}
  ~SLBgplsTopoPrefixOspfFwdAddr() override;
  explicit constexpr SLBgplsTopoPrefixOspfFwdAddr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixOspfFwdAddr(const SLBgplsTopoPrefixOspfFwdAddr& from);
  SLBgplsTopoPrefixOspfFwdAddr(SLBgplsTopoPrefixOspfFwdAddr&& from) noexcept
    : SLBgplsTopoPrefixOspfFwdAddr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixOspfFwdAddr& operator=(const SLBgplsTopoPrefixOspfFwdAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixOspfFwdAddr& operator=(SLBgplsTopoPrefixOspfFwdAddr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixOspfFwdAddr& default_instance() {
    return *internal_default_instance();
  }
  enum OspfFwdAddrCase {
    kIpv4Addr = 1,
    kIpv6Addr = 2,
    OSPFFWDADDR_NOT_SET = 0,
  };

  static inline const SLBgplsTopoPrefixOspfFwdAddr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixOspfFwdAddr*>(
               &_SLBgplsTopoPrefixOspfFwdAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SLBgplsTopoPrefixOspfFwdAddr& a, SLBgplsTopoPrefixOspfFwdAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixOspfFwdAddr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixOspfFwdAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixOspfFwdAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixOspfFwdAddr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixOspfFwdAddr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixOspfFwdAddr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixOspfFwdAddr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixOspfFwdAddr";
  }
  protected:
  explicit SLBgplsTopoPrefixOspfFwdAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv4AddrFieldNumber = 1,
    kIpv6AddrFieldNumber = 2,
  };
  // bytes Ipv4Addr = 1;
  bool has_ipv4addr() const;
  private:
  bool _internal_has_ipv4addr() const;
  public:
  void clear_ipv4addr();
  const std::string& ipv4addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4addr();
  PROTOBUF_NODISCARD std::string* release_ipv4addr();
  void set_allocated_ipv4addr(std::string* ipv4addr);
  private:
  const std::string& _internal_ipv4addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4addr(const std::string& value);
  std::string* _internal_mutable_ipv4addr();
  public:

  // bytes Ipv6Addr = 2;
  bool has_ipv6addr() const;
  private:
  bool _internal_has_ipv6addr() const;
  public:
  void clear_ipv6addr();
  const std::string& ipv6addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6addr();
  PROTOBUF_NODISCARD std::string* release_ipv6addr();
  void set_allocated_ipv6addr(std::string* ipv6addr);
  private:
  const std::string& _internal_ipv6addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6addr(const std::string& value);
  std::string* _internal_mutable_ipv6addr();
  public:

  void clear_OspfFwdAddr();
  OspfFwdAddrCase OspfFwdAddr_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixOspfFwdAddr)
 private:
  class _Internal;
  void set_has_ipv4addr();
  void set_has_ipv6addr();

  inline bool has_OspfFwdAddr() const;
  inline void clear_has_OspfFwdAddr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OspfFwdAddrUnion {
    constexpr OspfFwdAddrUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6addr_;
  } OspfFwdAddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixOpaqueAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixOpaqueAttr) */ {
 public:
  inline SLBgplsTopoPrefixOpaqueAttr() : SLBgplsTopoPrefixOpaqueAttr(nullptr) {}
  ~SLBgplsTopoPrefixOpaqueAttr() override;
  explicit constexpr SLBgplsTopoPrefixOpaqueAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixOpaqueAttr(const SLBgplsTopoPrefixOpaqueAttr& from);
  SLBgplsTopoPrefixOpaqueAttr(SLBgplsTopoPrefixOpaqueAttr&& from) noexcept
    : SLBgplsTopoPrefixOpaqueAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixOpaqueAttr& operator=(const SLBgplsTopoPrefixOpaqueAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixOpaqueAttr& operator=(SLBgplsTopoPrefixOpaqueAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixOpaqueAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixOpaqueAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixOpaqueAttr*>(
               &_SLBgplsTopoPrefixOpaqueAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SLBgplsTopoPrefixOpaqueAttr& a, SLBgplsTopoPrefixOpaqueAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixOpaqueAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixOpaqueAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixOpaqueAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixOpaqueAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixOpaqueAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixOpaqueAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixOpaqueAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixOpaqueAttr";
  }
  protected:
  explicit SLBgplsTopoPrefixOpaqueAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueAttrFieldNumber = 1,
  };
  // bytes OpaqueAttr = 1;
  void clear_opaqueattr();
  const std::string& opaqueattr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opaqueattr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opaqueattr();
  PROTOBUF_NODISCARD std::string* release_opaqueattr();
  void set_allocated_opaqueattr(std::string* opaqueattr);
  private:
  const std::string& _internal_opaqueattr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opaqueattr(const std::string& value);
  std::string* _internal_mutable_opaqueattr();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixOpaqueAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaqueattr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixSid) */ {
 public:
  inline SLBgplsTopoPrefixSid() : SLBgplsTopoPrefixSid(nullptr) {}
  ~SLBgplsTopoPrefixSid() override;
  explicit constexpr SLBgplsTopoPrefixSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixSid(const SLBgplsTopoPrefixSid& from);
  SLBgplsTopoPrefixSid(SLBgplsTopoPrefixSid&& from) noexcept
    : SLBgplsTopoPrefixSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixSid& operator=(const SLBgplsTopoPrefixSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixSid& operator=(SLBgplsTopoPrefixSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixSid*>(
               &_SLBgplsTopoPrefixSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SLBgplsTopoPrefixSid& a, SLBgplsTopoPrefixSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixSid";
  }
  protected:
  explicit SLBgplsTopoPrefixSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kAlgorithmFieldNumber = 2,
    kLabelIndexFieldNumber = 3,
    kPrefixSidFormatFieldNumber = 4,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Algorithm = 2;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 LabelIndex = 3;
  void clear_labelindex();
  uint32_t labelindex() const;
  void set_labelindex(uint32_t value);
  private:
  uint32_t _internal_labelindex() const;
  void _internal_set_labelindex(uint32_t value);
  public:

  // .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
  void clear_prefixsidformat();
  ::service_layer::SLBgplsTopoPrefixSidFormat prefixsidformat() const;
  void set_prefixsidformat(::service_layer::SLBgplsTopoPrefixSidFormat value);
  private:
  ::service_layer::SLBgplsTopoPrefixSidFormat _internal_prefixsidformat() const;
  void _internal_set_prefixsidformat(::service_layer::SLBgplsTopoPrefixSidFormat value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t algorithm_;
  uint32_t labelindex_;
  int prefixsidformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixRange) */ {
 public:
  inline SLBgplsTopoPrefixRange() : SLBgplsTopoPrefixRange(nullptr) {}
  ~SLBgplsTopoPrefixRange() override;
  explicit constexpr SLBgplsTopoPrefixRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixRange(const SLBgplsTopoPrefixRange& from);
  SLBgplsTopoPrefixRange(SLBgplsTopoPrefixRange&& from) noexcept
    : SLBgplsTopoPrefixRange() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixRange& operator=(const SLBgplsTopoPrefixRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixRange& operator=(SLBgplsTopoPrefixRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixRange* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixRange*>(
               &_SLBgplsTopoPrefixRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SLBgplsTopoPrefixRange& a, SLBgplsTopoPrefixRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixRange";
  }
  protected:
  explicit SLBgplsTopoPrefixRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kSidFlagsFieldNumber = 5,
    kRangeSizeFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // bytes SidFlags = 5;
  void clear_sidflags();
  const std::string& sidflags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sidflags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sidflags();
  PROTOBUF_NODISCARD std::string* release_sidflags();
  void set_allocated_sidflags(std::string* sidflags);
  private:
  const std::string& _internal_sidflags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sidflags(const std::string& value);
  std::string* _internal_mutable_sidflags();
  public:

  // uint32 RangeSize = 2;
  void clear_rangesize();
  uint32_t rangesize() const;
  void set_rangesize(uint32_t value);
  private:
  uint32_t _internal_rangesize() const;
  void _internal_set_rangesize(uint32_t value);
  public:

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 Index = 4;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sidflags_;
  uint32_t rangesize_;
  uint32_t algorithm_;
  uint32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixSrv6Loc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixSrv6Loc) */ {
 public:
  inline SLBgplsTopoPrefixSrv6Loc() : SLBgplsTopoPrefixSrv6Loc(nullptr) {}
  ~SLBgplsTopoPrefixSrv6Loc() override;
  explicit constexpr SLBgplsTopoPrefixSrv6Loc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixSrv6Loc(const SLBgplsTopoPrefixSrv6Loc& from);
  SLBgplsTopoPrefixSrv6Loc(SLBgplsTopoPrefixSrv6Loc&& from) noexcept
    : SLBgplsTopoPrefixSrv6Loc() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixSrv6Loc& operator=(const SLBgplsTopoPrefixSrv6Loc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixSrv6Loc& operator=(SLBgplsTopoPrefixSrv6Loc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixSrv6Loc& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixSrv6Loc* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixSrv6Loc*>(
               &_SLBgplsTopoPrefixSrv6Loc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SLBgplsTopoPrefixSrv6Loc& a, SLBgplsTopoPrefixSrv6Loc& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixSrv6Loc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixSrv6Loc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixSrv6Loc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixSrv6Loc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixSrv6Loc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixSrv6Loc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixSrv6Loc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixSrv6Loc";
  }
  protected:
  explicit SLBgplsTopoPrefixSrv6Loc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kAlgorithmFieldNumber = 2,
    kMetricFieldNumber = 3,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Algorithm = 2;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 Metric = 3;
  void clear_metric();
  uint32_t metric() const;
  void set_metric(uint32_t value);
  private:
  uint32_t _internal_metric() const;
  void _internal_set_metric(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixSrv6Loc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t algorithm_;
  uint32_t metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixAttrFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixAttrFlags) */ {
 public:
  inline SLBgplsTopoPrefixAttrFlags() : SLBgplsTopoPrefixAttrFlags(nullptr) {}
  ~SLBgplsTopoPrefixAttrFlags() override;
  explicit constexpr SLBgplsTopoPrefixAttrFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixAttrFlags(const SLBgplsTopoPrefixAttrFlags& from);
  SLBgplsTopoPrefixAttrFlags(SLBgplsTopoPrefixAttrFlags&& from) noexcept
    : SLBgplsTopoPrefixAttrFlags() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixAttrFlags& operator=(const SLBgplsTopoPrefixAttrFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixAttrFlags& operator=(SLBgplsTopoPrefixAttrFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixAttrFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoPrefixAttrFlags* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixAttrFlags*>(
               &_SLBgplsTopoPrefixAttrFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SLBgplsTopoPrefixAttrFlags& a, SLBgplsTopoPrefixAttrFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixAttrFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixAttrFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixAttrFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixAttrFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixAttrFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixAttrFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixAttrFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixAttrFlags";
  }
  protected:
  explicit SLBgplsTopoPrefixAttrFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixAttrFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoPrefixSrcRouterId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoPrefixSrcRouterId) */ {
 public:
  inline SLBgplsTopoPrefixSrcRouterId() : SLBgplsTopoPrefixSrcRouterId(nullptr) {}
  ~SLBgplsTopoPrefixSrcRouterId() override;
  explicit constexpr SLBgplsTopoPrefixSrcRouterId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoPrefixSrcRouterId(const SLBgplsTopoPrefixSrcRouterId& from);
  SLBgplsTopoPrefixSrcRouterId(SLBgplsTopoPrefixSrcRouterId&& from) noexcept
    : SLBgplsTopoPrefixSrcRouterId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoPrefixSrcRouterId& operator=(const SLBgplsTopoPrefixSrcRouterId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoPrefixSrcRouterId& operator=(SLBgplsTopoPrefixSrcRouterId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoPrefixSrcRouterId& default_instance() {
    return *internal_default_instance();
  }
  enum SrcRouterIdCase {
    kIpv4Addr = 1,
    kIpv6Addr = 2,
    SRCROUTERID_NOT_SET = 0,
  };

  static inline const SLBgplsTopoPrefixSrcRouterId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoPrefixSrcRouterId*>(
               &_SLBgplsTopoPrefixSrcRouterId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(SLBgplsTopoPrefixSrcRouterId& a, SLBgplsTopoPrefixSrcRouterId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoPrefixSrcRouterId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoPrefixSrcRouterId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoPrefixSrcRouterId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoPrefixSrcRouterId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoPrefixSrcRouterId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoPrefixSrcRouterId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoPrefixSrcRouterId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoPrefixSrcRouterId";
  }
  protected:
  explicit SLBgplsTopoPrefixSrcRouterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv4AddrFieldNumber = 1,
    kIpv6AddrFieldNumber = 2,
  };
  // bytes Ipv4Addr = 1;
  bool has_ipv4addr() const;
  private:
  bool _internal_has_ipv4addr() const;
  public:
  void clear_ipv4addr();
  const std::string& ipv4addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4addr();
  PROTOBUF_NODISCARD std::string* release_ipv4addr();
  void set_allocated_ipv4addr(std::string* ipv4addr);
  private:
  const std::string& _internal_ipv4addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4addr(const std::string& value);
  std::string* _internal_mutable_ipv4addr();
  public:

  // bytes Ipv6Addr = 2;
  bool has_ipv6addr() const;
  private:
  bool _internal_has_ipv6addr() const;
  public:
  void clear_ipv6addr();
  const std::string& ipv6addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6addr();
  PROTOBUF_NODISCARD std::string* release_ipv6addr();
  void set_allocated_ipv6addr(std::string* ipv6addr);
  private:
  const std::string& _internal_ipv6addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6addr(const std::string& value);
  std::string* _internal_mutable_ipv6addr();
  public:

  void clear_SrcRouterId();
  SrcRouterIdCase SrcRouterId_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoPrefixSrcRouterId)
 private:
  class _Internal;
  void set_has_ipv4addr();
  void set_has_ipv6addr();

  inline bool has_SrcRouterId() const;
  inline void clear_has_SrcRouterId();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SrcRouterIdUnion {
    constexpr SrcRouterIdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6addr_;
  } SrcRouterId_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoL2BundleMemberAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoL2BundleMemberAttr) */ {
 public:
  inline SLBgplsTopoL2BundleMemberAttr() : SLBgplsTopoL2BundleMemberAttr(nullptr) {}
  ~SLBgplsTopoL2BundleMemberAttr() override;
  explicit constexpr SLBgplsTopoL2BundleMemberAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoL2BundleMemberAttr(const SLBgplsTopoL2BundleMemberAttr& from);
  SLBgplsTopoL2BundleMemberAttr(SLBgplsTopoL2BundleMemberAttr&& from) noexcept
    : SLBgplsTopoL2BundleMemberAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoL2BundleMemberAttr& operator=(const SLBgplsTopoL2BundleMemberAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoL2BundleMemberAttr& operator=(SLBgplsTopoL2BundleMemberAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoL2BundleMemberAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoL2BundleMemberAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoL2BundleMemberAttr*>(
               &_SLBgplsTopoL2BundleMemberAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SLBgplsTopoL2BundleMemberAttr& a, SLBgplsTopoL2BundleMemberAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoL2BundleMemberAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoL2BundleMemberAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoL2BundleMemberAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoL2BundleMemberAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoL2BundleMemberAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoL2BundleMemberAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoL2BundleMemberAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoL2BundleMemberAttr";
  }
  protected:
  explicit SLBgplsTopoL2BundleMemberAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnresvBandwidthFieldNumber = 5,
    kAdjSidFieldNumber = 8,
    kLanAdjSidFieldNumber = 9,
    kAslaFieldNumber = 17,
    kExtAdminGroupFieldNumber = 18,
    kUnknownAttrFieldNumber = 19,
    kAdminGroupFieldNumber = 2,
    kMaxBandwidthFieldNumber = 3,
    kMaxResvBandwidthFieldNumber = 4,
    kTeDefMetricFieldNumber = 6,
    kProtectionTypeFieldNumber = 7,
    kUniLinkDelayFieldNumber = 10,
    kMinMaxLinkDelayFieldNumber = 11,
    kUniDelayVariationFieldNumber = 12,
    kUniLinkLossFieldNumber = 13,
    kUniResBandwidthFieldNumber = 14,
    kUniAvailBandwidthFieldNumber = 15,
    kUniUtilBandwidthFieldNumber = 16,
    kMemberDescFieldNumber = 1,
  };
  // repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
  int unresvbandwidth_size() const;
  private:
  int _internal_unresvbandwidth_size() const;
  public:
  void clear_unresvbandwidth();
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* mutable_unresvbandwidth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >*
      mutable_unresvbandwidth();
  private:
  const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& _internal_unresvbandwidth(int index) const;
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* _internal_add_unresvbandwidth();
  public:
  const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& unresvbandwidth(int index) const;
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* add_unresvbandwidth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >&
      unresvbandwidth() const;

  // repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
  int adjsid_size() const;
  private:
  int _internal_adjsid_size() const;
  public:
  void clear_adjsid();
  ::service_layer::SLBgplsTopoAdjSid* mutable_adjsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >*
      mutable_adjsid();
  private:
  const ::service_layer::SLBgplsTopoAdjSid& _internal_adjsid(int index) const;
  ::service_layer::SLBgplsTopoAdjSid* _internal_add_adjsid();
  public:
  const ::service_layer::SLBgplsTopoAdjSid& adjsid(int index) const;
  ::service_layer::SLBgplsTopoAdjSid* add_adjsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >&
      adjsid() const;

  // repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
  int lanadjsid_size() const;
  private:
  int _internal_lanadjsid_size() const;
  public:
  void clear_lanadjsid();
  ::service_layer::SLBgplsTopoLanAdjSid* mutable_lanadjsid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >*
      mutable_lanadjsid();
  private:
  const ::service_layer::SLBgplsTopoLanAdjSid& _internal_lanadjsid(int index) const;
  ::service_layer::SLBgplsTopoLanAdjSid* _internal_add_lanadjsid();
  public:
  const ::service_layer::SLBgplsTopoLanAdjSid& lanadjsid(int index) const;
  ::service_layer::SLBgplsTopoLanAdjSid* add_lanadjsid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >&
      lanadjsid() const;

  // repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
  int asla_size() const;
  private:
  int _internal_asla_size() const;
  public:
  void clear_asla();
  ::service_layer::SLBgplsTopoAslaAttr* mutable_asla(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >*
      mutable_asla();
  private:
  const ::service_layer::SLBgplsTopoAslaAttr& _internal_asla(int index) const;
  ::service_layer::SLBgplsTopoAslaAttr* _internal_add_asla();
  public:
  const ::service_layer::SLBgplsTopoAslaAttr& asla(int index) const;
  ::service_layer::SLBgplsTopoAslaAttr* add_asla();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >&
      asla() const;

  // repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 18;
  int extadmingroup_size() const;
  private:
  int _internal_extadmingroup_size() const;
  public:
  void clear_extadmingroup();
  ::service_layer::SLBgplsTopoExtAdminGroup* mutable_extadmingroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >*
      mutable_extadmingroup();
  private:
  const ::service_layer::SLBgplsTopoExtAdminGroup& _internal_extadmingroup(int index) const;
  ::service_layer::SLBgplsTopoExtAdminGroup* _internal_add_extadmingroup();
  public:
  const ::service_layer::SLBgplsTopoExtAdminGroup& extadmingroup(int index) const;
  ::service_layer::SLBgplsTopoExtAdminGroup* add_extadmingroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >&
      extadmingroup() const;

  // repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 19;
  int unknownattr_size() const;
  private:
  int _internal_unknownattr_size() const;
  public:
  void clear_unknownattr();
  ::service_layer::SLBgplsTopoUnknownAttr* mutable_unknownattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
      mutable_unknownattr();
  private:
  const ::service_layer::SLBgplsTopoUnknownAttr& _internal_unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* _internal_add_unknownattr();
  public:
  const ::service_layer::SLBgplsTopoUnknownAttr& unknownattr(int index) const;
  ::service_layer::SLBgplsTopoUnknownAttr* add_unknownattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
      unknownattr() const;

  // .service_layer.SLBgplsTopoAdminGroup AdminGroup = 2;
  bool has_admingroup() const;
  private:
  bool _internal_has_admingroup() const;
  public:
  void clear_admingroup();
  const ::service_layer::SLBgplsTopoAdminGroup& admingroup() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoAdminGroup* release_admingroup();
  ::service_layer::SLBgplsTopoAdminGroup* mutable_admingroup();
  void set_allocated_admingroup(::service_layer::SLBgplsTopoAdminGroup* admingroup);
  private:
  const ::service_layer::SLBgplsTopoAdminGroup& _internal_admingroup() const;
  ::service_layer::SLBgplsTopoAdminGroup* _internal_mutable_admingroup();
  public:
  void unsafe_arena_set_allocated_admingroup(
      ::service_layer::SLBgplsTopoAdminGroup* admingroup);
  ::service_layer::SLBgplsTopoAdminGroup* unsafe_arena_release_admingroup();

  // .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 3;
  bool has_maxbandwidth() const;
  private:
  bool _internal_has_maxbandwidth() const;
  public:
  void clear_maxbandwidth();
  const ::service_layer::SLBgplsTopoLinkMaxBandwidth& maxbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkMaxBandwidth* release_maxbandwidth();
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* mutable_maxbandwidth();
  void set_allocated_maxbandwidth(::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth);
  private:
  const ::service_layer::SLBgplsTopoLinkMaxBandwidth& _internal_maxbandwidth() const;
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* _internal_mutable_maxbandwidth();
  public:
  void unsafe_arena_set_allocated_maxbandwidth(
      ::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth);
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* unsafe_arena_release_maxbandwidth();

  // .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
  bool has_maxresvbandwidth() const;
  private:
  bool _internal_has_maxresvbandwidth() const;
  public:
  void clear_maxresvbandwidth();
  const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& maxresvbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* release_maxresvbandwidth();
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* mutable_maxresvbandwidth();
  void set_allocated_maxresvbandwidth(::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth);
  private:
  const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& _internal_maxresvbandwidth() const;
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* _internal_mutable_maxresvbandwidth();
  public:
  void unsafe_arena_set_allocated_maxresvbandwidth(
      ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth);
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* unsafe_arena_release_maxresvbandwidth();

  // .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
  bool has_tedefmetric() const;
  private:
  bool _internal_has_tedefmetric() const;
  public:
  void clear_tedefmetric();
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& tedefmetric() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkTeDefaultMetric* release_tedefmetric();
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* mutable_tedefmetric();
  void set_allocated_tedefmetric(::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric);
  private:
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& _internal_tedefmetric() const;
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* _internal_mutable_tedefmetric();
  public:
  void unsafe_arena_set_allocated_tedefmetric(
      ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric);
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* unsafe_arena_release_tedefmetric();

  // .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 7;
  bool has_protectiontype() const;
  private:
  bool _internal_has_protectiontype() const;
  public:
  void clear_protectiontype();
  const ::service_layer::SLBgplsTopoLinkProtectionType& protectiontype() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoLinkProtectionType* release_protectiontype();
  ::service_layer::SLBgplsTopoLinkProtectionType* mutable_protectiontype();
  void set_allocated_protectiontype(::service_layer::SLBgplsTopoLinkProtectionType* protectiontype);
  private:
  const ::service_layer::SLBgplsTopoLinkProtectionType& _internal_protectiontype() const;
  ::service_layer::SLBgplsTopoLinkProtectionType* _internal_mutable_protectiontype();
  public:
  void unsafe_arena_set_allocated_protectiontype(
      ::service_layer::SLBgplsTopoLinkProtectionType* protectiontype);
  ::service_layer::SLBgplsTopoLinkProtectionType* unsafe_arena_release_protectiontype();

  // .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
  bool has_unilinkdelay() const;
  private:
  bool _internal_has_unilinkdelay() const;
  public:
  void clear_unilinkdelay();
  const ::service_layer::SLBgplsTopoUniLinkDelay& unilinkdelay() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniLinkDelay* release_unilinkdelay();
  ::service_layer::SLBgplsTopoUniLinkDelay* mutable_unilinkdelay();
  void set_allocated_unilinkdelay(::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay);
  private:
  const ::service_layer::SLBgplsTopoUniLinkDelay& _internal_unilinkdelay() const;
  ::service_layer::SLBgplsTopoUniLinkDelay* _internal_mutable_unilinkdelay();
  public:
  void unsafe_arena_set_allocated_unilinkdelay(
      ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay);
  ::service_layer::SLBgplsTopoUniLinkDelay* unsafe_arena_release_unilinkdelay();

  // .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
  bool has_minmaxlinkdelay() const;
  private:
  bool _internal_has_minmaxlinkdelay() const;
  public:
  void clear_minmaxlinkdelay();
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& minmaxlinkdelay() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* release_minmaxlinkdelay();
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* mutable_minmaxlinkdelay();
  void set_allocated_minmaxlinkdelay(::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay);
  private:
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& _internal_minmaxlinkdelay() const;
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* _internal_mutable_minmaxlinkdelay();
  public:
  void unsafe_arena_set_allocated_minmaxlinkdelay(
      ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay);
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* unsafe_arena_release_minmaxlinkdelay();

  // .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
  bool has_unidelayvariation() const;
  private:
  bool _internal_has_unidelayvariation() const;
  public:
  void clear_unidelayvariation();
  const ::service_layer::SLBgplsTopoUniDelayVar& unidelayvariation() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniDelayVar* release_unidelayvariation();
  ::service_layer::SLBgplsTopoUniDelayVar* mutable_unidelayvariation();
  void set_allocated_unidelayvariation(::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation);
  private:
  const ::service_layer::SLBgplsTopoUniDelayVar& _internal_unidelayvariation() const;
  ::service_layer::SLBgplsTopoUniDelayVar* _internal_mutable_unidelayvariation();
  public:
  void unsafe_arena_set_allocated_unidelayvariation(
      ::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation);
  ::service_layer::SLBgplsTopoUniDelayVar* unsafe_arena_release_unidelayvariation();

  // .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
  bool has_unilinkloss() const;
  private:
  bool _internal_has_unilinkloss() const;
  public:
  void clear_unilinkloss();
  const ::service_layer::SLBgplsTopoUniLinkLoss& unilinkloss() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniLinkLoss* release_unilinkloss();
  ::service_layer::SLBgplsTopoUniLinkLoss* mutable_unilinkloss();
  void set_allocated_unilinkloss(::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss);
  private:
  const ::service_layer::SLBgplsTopoUniLinkLoss& _internal_unilinkloss() const;
  ::service_layer::SLBgplsTopoUniLinkLoss* _internal_mutable_unilinkloss();
  public:
  void unsafe_arena_set_allocated_unilinkloss(
      ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss);
  ::service_layer::SLBgplsTopoUniLinkLoss* unsafe_arena_release_unilinkloss();

  // .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
  bool has_uniresbandwidth() const;
  private:
  bool _internal_has_uniresbandwidth() const;
  public:
  void clear_uniresbandwidth();
  const ::service_layer::SLBgplsTopoUniResBandwidth& uniresbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniResBandwidth* release_uniresbandwidth();
  ::service_layer::SLBgplsTopoUniResBandwidth* mutable_uniresbandwidth();
  void set_allocated_uniresbandwidth(::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniResBandwidth& _internal_uniresbandwidth() const;
  ::service_layer::SLBgplsTopoUniResBandwidth* _internal_mutable_uniresbandwidth();
  public:
  void unsafe_arena_set_allocated_uniresbandwidth(
      ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth);
  ::service_layer::SLBgplsTopoUniResBandwidth* unsafe_arena_release_uniresbandwidth();

  // .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
  bool has_uniavailbandwidth() const;
  private:
  bool _internal_has_uniavailbandwidth() const;
  public:
  void clear_uniavailbandwidth();
  const ::service_layer::SLBgplsTopoUniAvailBandwidth& uniavailbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniAvailBandwidth* release_uniavailbandwidth();
  ::service_layer::SLBgplsTopoUniAvailBandwidth* mutable_uniavailbandwidth();
  void set_allocated_uniavailbandwidth(::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniAvailBandwidth& _internal_uniavailbandwidth() const;
  ::service_layer::SLBgplsTopoUniAvailBandwidth* _internal_mutable_uniavailbandwidth();
  public:
  void unsafe_arena_set_allocated_uniavailbandwidth(
      ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth);
  ::service_layer::SLBgplsTopoUniAvailBandwidth* unsafe_arena_release_uniavailbandwidth();

  // .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
  bool has_uniutilbandwidth() const;
  private:
  bool _internal_has_uniutilbandwidth() const;
  public:
  void clear_uniutilbandwidth();
  const ::service_layer::SLBgplsTopoUniUtilBandwidth& uniutilbandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoUniUtilBandwidth* release_uniutilbandwidth();
  ::service_layer::SLBgplsTopoUniUtilBandwidth* mutable_uniutilbandwidth();
  void set_allocated_uniutilbandwidth(::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth);
  private:
  const ::service_layer::SLBgplsTopoUniUtilBandwidth& _internal_uniutilbandwidth() const;
  ::service_layer::SLBgplsTopoUniUtilBandwidth* _internal_mutable_uniutilbandwidth();
  public:
  void unsafe_arena_set_allocated_uniutilbandwidth(
      ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth);
  ::service_layer::SLBgplsTopoUniUtilBandwidth* unsafe_arena_release_uniutilbandwidth();

  // uint32 MemberDesc = 1;
  void clear_memberdesc();
  uint32_t memberdesc() const;
  void set_memberdesc(uint32_t value);
  private:
  uint32_t _internal_memberdesc() const;
  void _internal_set_memberdesc(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoL2BundleMemberAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth > unresvbandwidth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid > adjsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid > lanadjsid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr > asla_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup > extadmingroup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr > unknownattr_;
  ::service_layer::SLBgplsTopoAdminGroup* admingroup_;
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth_;
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth_;
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric_;
  ::service_layer::SLBgplsTopoLinkProtectionType* protectiontype_;
  ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay_;
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay_;
  ::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation_;
  ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss_;
  ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth_;
  ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth_;
  ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth_;
  uint32_t memberdesc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoExtAdminGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoExtAdminGroup) */ {
 public:
  inline SLBgplsTopoExtAdminGroup() : SLBgplsTopoExtAdminGroup(nullptr) {}
  ~SLBgplsTopoExtAdminGroup() override;
  explicit constexpr SLBgplsTopoExtAdminGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoExtAdminGroup(const SLBgplsTopoExtAdminGroup& from);
  SLBgplsTopoExtAdminGroup(SLBgplsTopoExtAdminGroup&& from) noexcept
    : SLBgplsTopoExtAdminGroup() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoExtAdminGroup& operator=(const SLBgplsTopoExtAdminGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoExtAdminGroup& operator=(SLBgplsTopoExtAdminGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoExtAdminGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoExtAdminGroup* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoExtAdminGroup*>(
               &_SLBgplsTopoExtAdminGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(SLBgplsTopoExtAdminGroup& a, SLBgplsTopoExtAdminGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoExtAdminGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoExtAdminGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoExtAdminGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoExtAdminGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoExtAdminGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoExtAdminGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoExtAdminGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoExtAdminGroup";
  }
  protected:
  explicit SLBgplsTopoExtAdminGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // uint32 Group = 1;
  void clear_group();
  uint32_t group() const;
  void set_group(uint32_t value);
  private:
  uint32_t _internal_group() const;
  void _internal_set_group(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoExtAdminGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SlBgplsTopoSrBsid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SlBgplsTopoSrBsid) */ {
 public:
  inline SlBgplsTopoSrBsid() : SlBgplsTopoSrBsid(nullptr) {}
  ~SlBgplsTopoSrBsid() override;
  explicit constexpr SlBgplsTopoSrBsid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlBgplsTopoSrBsid(const SlBgplsTopoSrBsid& from);
  SlBgplsTopoSrBsid(SlBgplsTopoSrBsid&& from) noexcept
    : SlBgplsTopoSrBsid() {
    *this = ::std::move(from);
  }

  inline SlBgplsTopoSrBsid& operator=(const SlBgplsTopoSrBsid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlBgplsTopoSrBsid& operator=(SlBgplsTopoSrBsid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlBgplsTopoSrBsid& default_instance() {
    return *internal_default_instance();
  }
  enum BindingSidCase {
    kMplsBsid = 1,
    kSrv6Bsid = 2,
    BINDINGSID_NOT_SET = 0,
  };

  static inline const SlBgplsTopoSrBsid* internal_default_instance() {
    return reinterpret_cast<const SlBgplsTopoSrBsid*>(
               &_SlBgplsTopoSrBsid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(SlBgplsTopoSrBsid& a, SlBgplsTopoSrBsid& b) {
    a.Swap(&b);
  }
  inline void Swap(SlBgplsTopoSrBsid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlBgplsTopoSrBsid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlBgplsTopoSrBsid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlBgplsTopoSrBsid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlBgplsTopoSrBsid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlBgplsTopoSrBsid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlBgplsTopoSrBsid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SlBgplsTopoSrBsid";
  }
  protected:
  explicit SlBgplsTopoSrBsid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMplsBsidFieldNumber = 1,
    kSrv6BsidFieldNumber = 2,
  };
  // uint32 MplsBsid = 1;
  bool has_mplsbsid() const;
  private:
  bool _internal_has_mplsbsid() const;
  public:
  void clear_mplsbsid();
  uint32_t mplsbsid() const;
  void set_mplsbsid(uint32_t value);
  private:
  uint32_t _internal_mplsbsid() const;
  void _internal_set_mplsbsid(uint32_t value);
  public:

  // bytes Srv6Bsid = 2;
  bool has_srv6bsid() const;
  private:
  bool _internal_has_srv6bsid() const;
  public:
  void clear_srv6bsid();
  const std::string& srv6bsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6bsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6bsid();
  PROTOBUF_NODISCARD std::string* release_srv6bsid();
  void set_allocated_srv6bsid(std::string* srv6bsid);
  private:
  const std::string& _internal_srv6bsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6bsid(const std::string& value);
  std::string* _internal_mutable_srv6bsid();
  public:

  void clear_BindingSid();
  BindingSidCase BindingSid_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SlBgplsTopoSrBsid)
 private:
  class _Internal;
  void set_has_mplsbsid();
  void set_has_srv6bsid();

  inline bool has_BindingSid() const;
  inline void clear_has_BindingSid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BindingSidUnion {
    constexpr BindingSidUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t mplsbsid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6bsid_;
  } BindingSid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrBindingSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrBindingSid) */ {
 public:
  inline SLBgplsTopoSrBindingSid() : SLBgplsTopoSrBindingSid(nullptr) {}
  ~SLBgplsTopoSrBindingSid() override;
  explicit constexpr SLBgplsTopoSrBindingSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrBindingSid(const SLBgplsTopoSrBindingSid& from);
  SLBgplsTopoSrBindingSid(SLBgplsTopoSrBindingSid&& from) noexcept
    : SLBgplsTopoSrBindingSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrBindingSid& operator=(const SLBgplsTopoSrBindingSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrBindingSid& operator=(SLBgplsTopoSrBindingSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrBindingSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrBindingSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrBindingSid*>(
               &_SLBgplsTopoSrBindingSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(SLBgplsTopoSrBindingSid& a, SLBgplsTopoSrBindingSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrBindingSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrBindingSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrBindingSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrBindingSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrBindingSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrBindingSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrBindingSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrBindingSid";
  }
  protected:
  explicit SLBgplsTopoSrBindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsidFlagsFieldNumber = 1,
    kBsidFieldNumber = 2,
    kSpecifiedBsidFieldNumber = 3,
  };
  // bytes BsidFlags = 1;
  void clear_bsidflags();
  const std::string& bsidflags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bsidflags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bsidflags();
  PROTOBUF_NODISCARD std::string* release_bsidflags();
  void set_allocated_bsidflags(std::string* bsidflags);
  private:
  const std::string& _internal_bsidflags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bsidflags(const std::string& value);
  std::string* _internal_mutable_bsidflags();
  public:

  // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
  bool has_bsid() const;
  private:
  bool _internal_has_bsid() const;
  public:
  void clear_bsid();
  const ::service_layer::SlBgplsTopoSrBsid& bsid() const;
  PROTOBUF_NODISCARD ::service_layer::SlBgplsTopoSrBsid* release_bsid();
  ::service_layer::SlBgplsTopoSrBsid* mutable_bsid();
  void set_allocated_bsid(::service_layer::SlBgplsTopoSrBsid* bsid);
  private:
  const ::service_layer::SlBgplsTopoSrBsid& _internal_bsid() const;
  ::service_layer::SlBgplsTopoSrBsid* _internal_mutable_bsid();
  public:
  void unsafe_arena_set_allocated_bsid(
      ::service_layer::SlBgplsTopoSrBsid* bsid);
  ::service_layer::SlBgplsTopoSrBsid* unsafe_arena_release_bsid();

  // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
  bool has_specifiedbsid() const;
  private:
  bool _internal_has_specifiedbsid() const;
  public:
  void clear_specifiedbsid();
  const ::service_layer::SlBgplsTopoSrBsid& specifiedbsid() const;
  PROTOBUF_NODISCARD ::service_layer::SlBgplsTopoSrBsid* release_specifiedbsid();
  ::service_layer::SlBgplsTopoSrBsid* mutable_specifiedbsid();
  void set_allocated_specifiedbsid(::service_layer::SlBgplsTopoSrBsid* specifiedbsid);
  private:
  const ::service_layer::SlBgplsTopoSrBsid& _internal_specifiedbsid() const;
  ::service_layer::SlBgplsTopoSrBsid* _internal_mutable_specifiedbsid();
  public:
  void unsafe_arena_set_allocated_specifiedbsid(
      ::service_layer::SlBgplsTopoSrBsid* specifiedbsid);
  ::service_layer::SlBgplsTopoSrBsid* unsafe_arena_release_specifiedbsid();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrBindingSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bsidflags_;
  ::service_layer::SlBgplsTopoSrBsid* bsid_;
  ::service_layer::SlBgplsTopoSrBsid* specifiedbsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrCpState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrCpState) */ {
 public:
  inline SLBgplsTopoSrCpState() : SLBgplsTopoSrCpState(nullptr) {}
  ~SLBgplsTopoSrCpState() override;
  explicit constexpr SLBgplsTopoSrCpState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrCpState(const SLBgplsTopoSrCpState& from);
  SLBgplsTopoSrCpState(SLBgplsTopoSrCpState&& from) noexcept
    : SLBgplsTopoSrCpState() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrCpState& operator=(const SLBgplsTopoSrCpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrCpState& operator=(SLBgplsTopoSrCpState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrCpState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrCpState* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrCpState*>(
               &_SLBgplsTopoSrCpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(SLBgplsTopoSrCpState& a, SLBgplsTopoSrCpState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrCpState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrCpState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrCpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrCpState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrCpState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrCpState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrCpState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrCpState";
  }
  protected:
  explicit SLBgplsTopoSrCpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kPriorityFieldNumber = 1,
    kPreferenceFieldNumber = 3,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Priority = 1;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // uint32 Preference = 3;
  void clear_preference();
  uint32_t preference() const;
  void set_preference(uint32_t value);
  private:
  uint32_t _internal_preference() const;
  void _internal_set_preference(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrCpState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t priority_;
  uint32_t preference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrCpName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrCpName) */ {
 public:
  inline SLBgplsTopoSrCpName() : SLBgplsTopoSrCpName(nullptr) {}
  ~SLBgplsTopoSrCpName() override;
  explicit constexpr SLBgplsTopoSrCpName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrCpName(const SLBgplsTopoSrCpName& from);
  SLBgplsTopoSrCpName(SLBgplsTopoSrCpName&& from) noexcept
    : SLBgplsTopoSrCpName() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrCpName& operator=(const SLBgplsTopoSrCpName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrCpName& operator=(SLBgplsTopoSrCpName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrCpName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrCpName* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrCpName*>(
               &_SLBgplsTopoSrCpName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SLBgplsTopoSrCpName& a, SLBgplsTopoSrCpName& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrCpName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrCpName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrCpName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrCpName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrCpName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrCpName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrCpName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrCpName";
  }
  protected:
  explicit SLBgplsTopoSrCpName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrCpName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrCpConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrCpConstraints) */ {
 public:
  inline SLBgplsTopoSrCpConstraints() : SLBgplsTopoSrCpConstraints(nullptr) {}
  ~SLBgplsTopoSrCpConstraints() override;
  explicit constexpr SLBgplsTopoSrCpConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrCpConstraints(const SLBgplsTopoSrCpConstraints& from);
  SLBgplsTopoSrCpConstraints(SLBgplsTopoSrCpConstraints&& from) noexcept
    : SLBgplsTopoSrCpConstraints() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrCpConstraints& operator=(const SLBgplsTopoSrCpConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrCpConstraints& operator=(SLBgplsTopoSrCpConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrCpConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrCpConstraints* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrCpConstraints*>(
               &_SLBgplsTopoSrCpConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(SLBgplsTopoSrCpConstraints& a, SLBgplsTopoSrCpConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrCpConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrCpConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrCpConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrCpConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrCpConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrCpConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrCpConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrCpConstraints";
  }
  protected:
  explicit SLBgplsTopoSrCpConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 9,
    kFlagsFieldNumber = 1,
    kBandwidthFieldNumber = 4,
    kAffinityFieldNumber = 5,
    kSrlgFieldNumber = 6,
    kDisjointFieldNumber = 7,
    kBidirGroupFieldNumber = 8,
    kMtidFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
  };
  // repeated .service_layer.SLBgplsTopoSrMetricConstraint Metric = 9;
  int metric_size() const;
  private:
  int _internal_metric_size() const;
  public:
  void clear_metric();
  ::service_layer::SLBgplsTopoSrMetricConstraint* mutable_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrMetricConstraint >*
      mutable_metric();
  private:
  const ::service_layer::SLBgplsTopoSrMetricConstraint& _internal_metric(int index) const;
  ::service_layer::SLBgplsTopoSrMetricConstraint* _internal_add_metric();
  public:
  const ::service_layer::SLBgplsTopoSrMetricConstraint& metric(int index) const;
  ::service_layer::SLBgplsTopoSrMetricConstraint* add_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrMetricConstraint >&
      metric() const;

  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgplsTopoSrBandwidthConstraint Bandwidth = 4;
  bool has_bandwidth() const;
  private:
  bool _internal_has_bandwidth() const;
  public:
  void clear_bandwidth();
  const ::service_layer::SLBgplsTopoSrBandwidthConstraint& bandwidth() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrBandwidthConstraint* release_bandwidth();
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* mutable_bandwidth();
  void set_allocated_bandwidth(::service_layer::SLBgplsTopoSrBandwidthConstraint* bandwidth);
  private:
  const ::service_layer::SLBgplsTopoSrBandwidthConstraint& _internal_bandwidth() const;
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* _internal_mutable_bandwidth();
  public:
  void unsafe_arena_set_allocated_bandwidth(
      ::service_layer::SLBgplsTopoSrBandwidthConstraint* bandwidth);
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* unsafe_arena_release_bandwidth();

  // .service_layer.SLBgplsTopoSrAffinityConstraints Affinity = 5;
  bool has_affinity() const;
  private:
  bool _internal_has_affinity() const;
  public:
  void clear_affinity();
  const ::service_layer::SLBgplsTopoSrAffinityConstraints& affinity() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrAffinityConstraints* release_affinity();
  ::service_layer::SLBgplsTopoSrAffinityConstraints* mutable_affinity();
  void set_allocated_affinity(::service_layer::SLBgplsTopoSrAffinityConstraints* affinity);
  private:
  const ::service_layer::SLBgplsTopoSrAffinityConstraints& _internal_affinity() const;
  ::service_layer::SLBgplsTopoSrAffinityConstraints* _internal_mutable_affinity();
  public:
  void unsafe_arena_set_allocated_affinity(
      ::service_layer::SLBgplsTopoSrAffinityConstraints* affinity);
  ::service_layer::SLBgplsTopoSrAffinityConstraints* unsafe_arena_release_affinity();

  // .service_layer.SLBgplsTopoSrSrlgConstraints Srlg = 6;
  bool has_srlg() const;
  private:
  bool _internal_has_srlg() const;
  public:
  void clear_srlg();
  const ::service_layer::SLBgplsTopoSrSrlgConstraints& srlg() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrSrlgConstraints* release_srlg();
  ::service_layer::SLBgplsTopoSrSrlgConstraints* mutable_srlg();
  void set_allocated_srlg(::service_layer::SLBgplsTopoSrSrlgConstraints* srlg);
  private:
  const ::service_layer::SLBgplsTopoSrSrlgConstraints& _internal_srlg() const;
  ::service_layer::SLBgplsTopoSrSrlgConstraints* _internal_mutable_srlg();
  public:
  void unsafe_arena_set_allocated_srlg(
      ::service_layer::SLBgplsTopoSrSrlgConstraints* srlg);
  ::service_layer::SLBgplsTopoSrSrlgConstraints* unsafe_arena_release_srlg();

  // .service_layer.SLBgplsTopoSrDisjointGroupConstraint Disjoint = 7;
  bool has_disjoint() const;
  private:
  bool _internal_has_disjoint() const;
  public:
  void clear_disjoint();
  const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint& disjoint() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* release_disjoint();
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* mutable_disjoint();
  void set_allocated_disjoint(::service_layer::SLBgplsTopoSrDisjointGroupConstraint* disjoint);
  private:
  const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint& _internal_disjoint() const;
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* _internal_mutable_disjoint();
  public:
  void unsafe_arena_set_allocated_disjoint(
      ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* disjoint);
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* unsafe_arena_release_disjoint();

  // .service_layer.SLBgplsTopoSrBidirGroupConstraint BidirGroup = 8;
  bool has_bidirgroup() const;
  private:
  bool _internal_has_bidirgroup() const;
  public:
  void clear_bidirgroup();
  const ::service_layer::SLBgplsTopoSrBidirGroupConstraint& bidirgroup() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrBidirGroupConstraint* release_bidirgroup();
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* mutable_bidirgroup();
  void set_allocated_bidirgroup(::service_layer::SLBgplsTopoSrBidirGroupConstraint* bidirgroup);
  private:
  const ::service_layer::SLBgplsTopoSrBidirGroupConstraint& _internal_bidirgroup() const;
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* _internal_mutable_bidirgroup();
  public:
  void unsafe_arena_set_allocated_bidirgroup(
      ::service_layer::SLBgplsTopoSrBidirGroupConstraint* bidirgroup);
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* unsafe_arena_release_bidirgroup();

  // uint32 Mtid = 2;
  void clear_mtid();
  uint32_t mtid() const;
  void set_mtid(uint32_t value);
  private:
  uint32_t _internal_mtid() const;
  void _internal_set_mtid(uint32_t value);
  public:

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrCpConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrMetricConstraint > metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* bandwidth_;
  ::service_layer::SLBgplsTopoSrAffinityConstraints* affinity_;
  ::service_layer::SLBgplsTopoSrSrlgConstraints* srlg_;
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* disjoint_;
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* bidirgroup_;
  uint32_t mtid_;
  uint32_t algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrSegList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrSegList) */ {
 public:
  inline SLBgplsTopoSrSegList() : SLBgplsTopoSrSegList(nullptr) {}
  ~SLBgplsTopoSrSegList() override;
  explicit constexpr SLBgplsTopoSrSegList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrSegList(const SLBgplsTopoSrSegList& from);
  SLBgplsTopoSrSegList(SLBgplsTopoSrSegList&& from) noexcept
    : SLBgplsTopoSrSegList() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrSegList& operator=(const SLBgplsTopoSrSegList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrSegList& operator=(SLBgplsTopoSrSegList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrSegList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrSegList* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrSegList*>(
               &_SLBgplsTopoSrSegList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SLBgplsTopoSrSegList& a, SLBgplsTopoSrSegList& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrSegList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrSegList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrSegList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrSegList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrSegList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrSegList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrSegList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrSegList";
  }
  protected:
  explicit SLBgplsTopoSrSegList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 5,
    kFlagsFieldNumber = 1,
    kMtidFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kWeightFieldNumber = 4,
  };
  // repeated .service_layer.SLBgplsTopoSrSegment Segments = 5;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::service_layer::SLBgplsTopoSrSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegment >*
      mutable_segments();
  private:
  const ::service_layer::SLBgplsTopoSrSegment& _internal_segments(int index) const;
  ::service_layer::SLBgplsTopoSrSegment* _internal_add_segments();
  public:
  const ::service_layer::SLBgplsTopoSrSegment& segments(int index) const;
  ::service_layer::SLBgplsTopoSrSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegment >&
      segments() const;

  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Mtid = 2;
  void clear_mtid();
  uint32_t mtid() const;
  void set_mtid(uint32_t value);
  private:
  uint32_t _internal_mtid() const;
  void _internal_set_mtid(uint32_t value);
  public:

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 Weight = 4;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrSegList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegment > segments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t mtid_;
  uint32_t algorithm_;
  uint32_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrSegmentDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrSegmentDesc) */ {
 public:
  inline SLBgplsTopoSrSegmentDesc() : SLBgplsTopoSrSegmentDesc(nullptr) {}
  ~SLBgplsTopoSrSegmentDesc() override;
  explicit constexpr SLBgplsTopoSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrSegmentDesc(const SLBgplsTopoSrSegmentDesc& from);
  SLBgplsTopoSrSegmentDesc(SLBgplsTopoSrSegmentDesc&& from) noexcept
    : SLBgplsTopoSrSegmentDesc() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrSegmentDesc& operator=(const SLBgplsTopoSrSegmentDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrSegmentDesc& operator=(SLBgplsTopoSrSegmentDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrSegmentDesc& default_instance() {
    return *internal_default_instance();
  }
  enum LocalNodeAddrCase {
    kIpv4LocAddr = 2,
    kIpv6LocAddr = 3,
    LOCALNODEADDR_NOT_SET = 0,
  };

  enum RemoteNodeAddrCase {
    kIpv4RemAddr = 4,
    kIpv6RemAddr = 5,
    REMOTENODEADDR_NOT_SET = 0,
  };

  static inline const SLBgplsTopoSrSegmentDesc* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrSegmentDesc*>(
               &_SLBgplsTopoSrSegmentDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SLBgplsTopoSrSegmentDesc& a, SLBgplsTopoSrSegmentDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrSegmentDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrSegmentDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrSegmentDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrSegmentDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrSegmentDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrSegmentDesc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrSegmentDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrSegmentDesc";
  }
  protected:
  explicit SLBgplsTopoSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv6LocalNodeGlobalAddrFieldNumber = 6,
    kIpv6RemoteNodeGlobalAddrFieldNumber = 7,
    kAlgorithmFieldNumber = 1,
    kLocalNodeIntfIdFieldNumber = 8,
    kRemoteNodeIntfIdFieldNumber = 9,
    kIpv4LocAddrFieldNumber = 2,
    kIpv6LocAddrFieldNumber = 3,
    kIpv4RemAddrFieldNumber = 4,
    kIpv6RemAddrFieldNumber = 5,
  };
  // bytes Ipv6LocalNodeGlobalAddr = 6;
  void clear_ipv6localnodeglobaladdr();
  const std::string& ipv6localnodeglobaladdr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6localnodeglobaladdr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6localnodeglobaladdr();
  PROTOBUF_NODISCARD std::string* release_ipv6localnodeglobaladdr();
  void set_allocated_ipv6localnodeglobaladdr(std::string* ipv6localnodeglobaladdr);
  private:
  const std::string& _internal_ipv6localnodeglobaladdr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6localnodeglobaladdr(const std::string& value);
  std::string* _internal_mutable_ipv6localnodeglobaladdr();
  public:

  // bytes Ipv6RemoteNodeGlobalAddr = 7;
  void clear_ipv6remotenodeglobaladdr();
  const std::string& ipv6remotenodeglobaladdr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6remotenodeglobaladdr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6remotenodeglobaladdr();
  PROTOBUF_NODISCARD std::string* release_ipv6remotenodeglobaladdr();
  void set_allocated_ipv6remotenodeglobaladdr(std::string* ipv6remotenodeglobaladdr);
  private:
  const std::string& _internal_ipv6remotenodeglobaladdr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6remotenodeglobaladdr(const std::string& value);
  std::string* _internal_mutable_ipv6remotenodeglobaladdr();
  public:

  // uint32 Algorithm = 1;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 LocalNodeIntfId = 8;
  void clear_localnodeintfid();
  uint32_t localnodeintfid() const;
  void set_localnodeintfid(uint32_t value);
  private:
  uint32_t _internal_localnodeintfid() const;
  void _internal_set_localnodeintfid(uint32_t value);
  public:

  // uint32 RemoteNodeIntfId = 9;
  void clear_remotenodeintfid();
  uint32_t remotenodeintfid() const;
  void set_remotenodeintfid(uint32_t value);
  private:
  uint32_t _internal_remotenodeintfid() const;
  void _internal_set_remotenodeintfid(uint32_t value);
  public:

  // bytes Ipv4LocAddr = 2;
  bool has_ipv4locaddr() const;
  private:
  bool _internal_has_ipv4locaddr() const;
  public:
  void clear_ipv4locaddr();
  const std::string& ipv4locaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4locaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4locaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4locaddr();
  void set_allocated_ipv4locaddr(std::string* ipv4locaddr);
  private:
  const std::string& _internal_ipv4locaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4locaddr(const std::string& value);
  std::string* _internal_mutable_ipv4locaddr();
  public:

  // bytes Ipv6LocAddr = 3;
  bool has_ipv6locaddr() const;
  private:
  bool _internal_has_ipv6locaddr() const;
  public:
  void clear_ipv6locaddr();
  const std::string& ipv6locaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6locaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6locaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6locaddr();
  void set_allocated_ipv6locaddr(std::string* ipv6locaddr);
  private:
  const std::string& _internal_ipv6locaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6locaddr(const std::string& value);
  std::string* _internal_mutable_ipv6locaddr();
  public:

  // bytes Ipv4RemAddr = 4;
  bool has_ipv4remaddr() const;
  private:
  bool _internal_has_ipv4remaddr() const;
  public:
  void clear_ipv4remaddr();
  const std::string& ipv4remaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4remaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4remaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4remaddr();
  void set_allocated_ipv4remaddr(std::string* ipv4remaddr);
  private:
  const std::string& _internal_ipv4remaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4remaddr(const std::string& value);
  std::string* _internal_mutable_ipv4remaddr();
  public:

  // bytes Ipv6RemAddr = 5;
  bool has_ipv6remaddr() const;
  private:
  bool _internal_has_ipv6remaddr() const;
  public:
  void clear_ipv6remaddr();
  const std::string& ipv6remaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6remaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6remaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6remaddr();
  void set_allocated_ipv6remaddr(std::string* ipv6remaddr);
  private:
  const std::string& _internal_ipv6remaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6remaddr(const std::string& value);
  std::string* _internal_mutable_ipv6remaddr();
  public:

  void clear_LocalNodeAddr();
  LocalNodeAddrCase LocalNodeAddr_case() const;
  void clear_RemoteNodeAddr();
  RemoteNodeAddrCase RemoteNodeAddr_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrSegmentDesc)
 private:
  class _Internal;
  void set_has_ipv4locaddr();
  void set_has_ipv6locaddr();
  void set_has_ipv4remaddr();
  void set_has_ipv6remaddr();

  inline bool has_LocalNodeAddr() const;
  inline void clear_has_LocalNodeAddr();

  inline bool has_RemoteNodeAddr() const;
  inline void clear_has_RemoteNodeAddr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6localnodeglobaladdr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6remotenodeglobaladdr_;
  uint32_t algorithm_;
  uint32_t localnodeintfid_;
  uint32_t remotenodeintfid_;
  union LocalNodeAddrUnion {
    constexpr LocalNodeAddrUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4locaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6locaddr_;
  } LocalNodeAddr_;
  union RemoteNodeAddrUnion {
    constexpr RemoteNodeAddrUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4remaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6remaddr_;
  } RemoteNodeAddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrSegment) */ {
 public:
  inline SLBgplsTopoSrSegment() : SLBgplsTopoSrSegment(nullptr) {}
  ~SLBgplsTopoSrSegment() override;
  explicit constexpr SLBgplsTopoSrSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrSegment(const SLBgplsTopoSrSegment& from);
  SLBgplsTopoSrSegment(SLBgplsTopoSrSegment&& from) noexcept
    : SLBgplsTopoSrSegment() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrSegment& operator=(const SLBgplsTopoSrSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrSegment& operator=(SLBgplsTopoSrSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrSegment& default_instance() {
    return *internal_default_instance();
  }
  enum SidCase {
    kMplsLabel = 3,
    kSrv6Sid = 4,
    SID_NOT_SET = 0,
  };

  static inline const SLBgplsTopoSrSegment* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrSegment*>(
               &_SLBgplsTopoSrSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SLBgplsTopoSrSegment& a, SLBgplsTopoSrSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrSegment";
  }
  protected:
  explicit SLBgplsTopoSrSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kSegmentDescFieldNumber = 5,
    kEndPointBehaviourFieldNumber = 6,
    kSidStructFieldNumber = 7,
    kTypeFieldNumber = 1,
    kMplsLabelFieldNumber = 3,
    kSrv6SidFieldNumber = 4,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SLBgplsTopoSrSegmentDesc SegmentDesc = 5;
  bool has_segmentdesc() const;
  private:
  bool _internal_has_segmentdesc() const;
  public:
  void clear_segmentdesc();
  const ::service_layer::SLBgplsTopoSrSegmentDesc& segmentdesc() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrSegmentDesc* release_segmentdesc();
  ::service_layer::SLBgplsTopoSrSegmentDesc* mutable_segmentdesc();
  void set_allocated_segmentdesc(::service_layer::SLBgplsTopoSrSegmentDesc* segmentdesc);
  private:
  const ::service_layer::SLBgplsTopoSrSegmentDesc& _internal_segmentdesc() const;
  ::service_layer::SLBgplsTopoSrSegmentDesc* _internal_mutable_segmentdesc();
  public:
  void unsafe_arena_set_allocated_segmentdesc(
      ::service_layer::SLBgplsTopoSrSegmentDesc* segmentdesc);
  ::service_layer::SLBgplsTopoSrSegmentDesc* unsafe_arena_release_segmentdesc();

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 6;
  bool has_endpointbehaviour() const;
  private:
  bool _internal_has_endpointbehaviour() const;
  public:
  void clear_endpointbehaviour();
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& endpointbehaviour() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6EndPointBehavior* release_endpointbehaviour();
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* mutable_endpointbehaviour();
  void set_allocated_endpointbehaviour(::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour);
  private:
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& _internal_endpointbehaviour() const;
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* _internal_mutable_endpointbehaviour();
  public:
  void unsafe_arena_set_allocated_endpointbehaviour(
      ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour);
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* unsafe_arena_release_endpointbehaviour();

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidStruct* release_sidstruct();
  ::service_layer::SLBgplsTopoSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLBgplsTopoSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  ::service_layer::SLBgplsTopoSrv6SidStruct* unsafe_arena_release_sidstruct();

  // .service_layer.SLBgplsTopoSrSegmentType Type = 1;
  void clear_type();
  ::service_layer::SLBgplsTopoSrSegmentType type() const;
  void set_type(::service_layer::SLBgplsTopoSrSegmentType value);
  private:
  ::service_layer::SLBgplsTopoSrSegmentType _internal_type() const;
  void _internal_set_type(::service_layer::SLBgplsTopoSrSegmentType value);
  public:

  // uint32 MplsLabel = 3;
  bool has_mplslabel() const;
  private:
  bool _internal_has_mplslabel() const;
  public:
  void clear_mplslabel();
  uint32_t mplslabel() const;
  void set_mplslabel(uint32_t value);
  private:
  uint32_t _internal_mplslabel() const;
  void _internal_set_mplslabel(uint32_t value);
  public:

  // bytes Srv6Sid = 4;
  bool has_srv6sid() const;
  private:
  bool _internal_has_srv6sid() const;
  public:
  void clear_srv6sid();
  const std::string& srv6sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6sid();
  PROTOBUF_NODISCARD std::string* release_srv6sid();
  void set_allocated_srv6sid(std::string* srv6sid);
  private:
  const std::string& _internal_srv6sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6sid(const std::string& value);
  std::string* _internal_mutable_srv6sid();
  public:

  void clear_Sid();
  SidCase Sid_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrSegment)
 private:
  class _Internal;
  void set_has_mplslabel();
  void set_has_srv6sid();

  inline bool has_Sid() const;
  inline void clear_has_Sid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::service_layer::SLBgplsTopoSrSegmentDesc* segmentdesc_;
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour_;
  ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct_;
  int type_;
  union SidUnion {
    constexpr SidUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t mplslabel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6sid_;
  } Sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsSrSegListMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsSrSegListMetric) */ {
 public:
  inline SLBgplsSrSegListMetric() : SLBgplsSrSegListMetric(nullptr) {}
  ~SLBgplsSrSegListMetric() override;
  explicit constexpr SLBgplsSrSegListMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsSrSegListMetric(const SLBgplsSrSegListMetric& from);
  SLBgplsSrSegListMetric(SLBgplsSrSegListMetric&& from) noexcept
    : SLBgplsSrSegListMetric() {
    *this = ::std::move(from);
  }

  inline SLBgplsSrSegListMetric& operator=(const SLBgplsSrSegListMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsSrSegListMetric& operator=(SLBgplsSrSegListMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsSrSegListMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsSrSegListMetric* internal_default_instance() {
    return reinterpret_cast<const SLBgplsSrSegListMetric*>(
               &_SLBgplsSrSegListMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SLBgplsSrSegListMetric& a, SLBgplsSrSegListMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsSrSegListMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsSrSegListMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsSrSegListMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsSrSegListMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsSrSegListMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsSrSegListMetric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsSrSegListMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsSrSegListMetric";
  }
  protected:
  explicit SLBgplsSrSegListMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kTypeFieldNumber = 1,
    kMarginFieldNumber = 3,
    kBoundFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 Margin = 3;
  void clear_margin();
  uint32_t margin() const;
  void set_margin(uint32_t value);
  private:
  uint32_t _internal_margin() const;
  void _internal_set_margin(uint32_t value);
  public:

  // uint32 Bound = 4;
  void clear_bound();
  uint32_t bound() const;
  void set_bound(uint32_t value);
  private:
  uint32_t _internal_bound() const;
  void _internal_set_bound(uint32_t value);
  public:

  // uint32 Value = 5;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsSrSegListMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t type_;
  uint32_t margin_;
  uint32_t bound_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrAffinityConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrAffinityConstraints) */ {
 public:
  inline SLBgplsTopoSrAffinityConstraints() : SLBgplsTopoSrAffinityConstraints(nullptr) {}
  ~SLBgplsTopoSrAffinityConstraints() override;
  explicit constexpr SLBgplsTopoSrAffinityConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrAffinityConstraints(const SLBgplsTopoSrAffinityConstraints& from);
  SLBgplsTopoSrAffinityConstraints(SLBgplsTopoSrAffinityConstraints&& from) noexcept
    : SLBgplsTopoSrAffinityConstraints() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrAffinityConstraints& operator=(const SLBgplsTopoSrAffinityConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrAffinityConstraints& operator=(SLBgplsTopoSrAffinityConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrAffinityConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrAffinityConstraints* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrAffinityConstraints*>(
               &_SLBgplsTopoSrAffinityConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SLBgplsTopoSrAffinityConstraints& a, SLBgplsTopoSrAffinityConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrAffinityConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrAffinityConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrAffinityConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrAffinityConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrAffinityConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrAffinityConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrAffinityConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrAffinityConstraints";
  }
  protected:
  explicit SLBgplsTopoSrAffinityConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExclAnyEagFieldNumber = 1,
    kInclAnyEagFieldNumber = 2,
    kInclAllEagFieldNumber = 3,
  };
  // repeated uint32 ExclAnyEag = 1;
  int exclanyeag_size() const;
  private:
  int _internal_exclanyeag_size() const;
  public:
  void clear_exclanyeag();
  private:
  uint32_t _internal_exclanyeag(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_exclanyeag() const;
  void _internal_add_exclanyeag(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_exclanyeag();
  public:
  uint32_t exclanyeag(int index) const;
  void set_exclanyeag(int index, uint32_t value);
  void add_exclanyeag(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      exclanyeag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_exclanyeag();

  // repeated uint32 InclAnyEag = 2;
  int inclanyeag_size() const;
  private:
  int _internal_inclanyeag_size() const;
  public:
  void clear_inclanyeag();
  private:
  uint32_t _internal_inclanyeag(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_inclanyeag() const;
  void _internal_add_inclanyeag(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_inclanyeag();
  public:
  uint32_t inclanyeag(int index) const;
  void set_inclanyeag(int index, uint32_t value);
  void add_inclanyeag(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      inclanyeag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_inclanyeag();

  // repeated uint32 InclAllEag = 3;
  int inclalleag_size() const;
  private:
  int _internal_inclalleag_size() const;
  public:
  void clear_inclalleag();
  private:
  uint32_t _internal_inclalleag(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_inclalleag() const;
  void _internal_add_inclalleag(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_inclalleag();
  public:
  uint32_t inclalleag(int index) const;
  void set_inclalleag(int index, uint32_t value);
  void add_inclalleag(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      inclalleag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_inclalleag();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrAffinityConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > exclanyeag_;
  mutable std::atomic<int> _exclanyeag_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > inclanyeag_;
  mutable std::atomic<int> _inclanyeag_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > inclalleag_;
  mutable std::atomic<int> _inclalleag_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrSrlgConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrSrlgConstraints) */ {
 public:
  inline SLBgplsTopoSrSrlgConstraints() : SLBgplsTopoSrSrlgConstraints(nullptr) {}
  ~SLBgplsTopoSrSrlgConstraints() override;
  explicit constexpr SLBgplsTopoSrSrlgConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrSrlgConstraints(const SLBgplsTopoSrSrlgConstraints& from);
  SLBgplsTopoSrSrlgConstraints(SLBgplsTopoSrSrlgConstraints&& from) noexcept
    : SLBgplsTopoSrSrlgConstraints() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrSrlgConstraints& operator=(const SLBgplsTopoSrSrlgConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrSrlgConstraints& operator=(SLBgplsTopoSrSrlgConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrSrlgConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrSrlgConstraints* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrSrlgConstraints*>(
               &_SLBgplsTopoSrSrlgConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SLBgplsTopoSrSrlgConstraints& a, SLBgplsTopoSrSrlgConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrSrlgConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrSrlgConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrSrlgConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrSrlgConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrSrlgConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrSrlgConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrSrlgConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrSrlgConstraints";
  }
  protected:
  explicit SLBgplsTopoSrSrlgConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrlgValuesFieldNumber = 1,
  };
  // repeated uint32 SrlgValues = 1;
  int srlgvalues_size() const;
  private:
  int _internal_srlgvalues_size() const;
  public:
  void clear_srlgvalues();
  private:
  uint32_t _internal_srlgvalues(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_srlgvalues() const;
  void _internal_add_srlgvalues(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_srlgvalues();
  public:
  uint32_t srlgvalues(int index) const;
  void set_srlgvalues(int index, uint32_t value);
  void add_srlgvalues(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      srlgvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_srlgvalues();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrSrlgConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > srlgvalues_;
  mutable std::atomic<int> _srlgvalues_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrBandwidthConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrBandwidthConstraint) */ {
 public:
  inline SLBgplsTopoSrBandwidthConstraint() : SLBgplsTopoSrBandwidthConstraint(nullptr) {}
  ~SLBgplsTopoSrBandwidthConstraint() override;
  explicit constexpr SLBgplsTopoSrBandwidthConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrBandwidthConstraint(const SLBgplsTopoSrBandwidthConstraint& from);
  SLBgplsTopoSrBandwidthConstraint(SLBgplsTopoSrBandwidthConstraint&& from) noexcept
    : SLBgplsTopoSrBandwidthConstraint() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrBandwidthConstraint& operator=(const SLBgplsTopoSrBandwidthConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrBandwidthConstraint& operator=(SLBgplsTopoSrBandwidthConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrBandwidthConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrBandwidthConstraint* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrBandwidthConstraint*>(
               &_SLBgplsTopoSrBandwidthConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(SLBgplsTopoSrBandwidthConstraint& a, SLBgplsTopoSrBandwidthConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrBandwidthConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrBandwidthConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrBandwidthConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrBandwidthConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrBandwidthConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrBandwidthConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrBandwidthConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrBandwidthConstraint";
  }
  protected:
  explicit SLBgplsTopoSrBandwidthConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrBandwidthConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrDisjointGroupConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrDisjointGroupConstraint) */ {
 public:
  inline SLBgplsTopoSrDisjointGroupConstraint() : SLBgplsTopoSrDisjointGroupConstraint(nullptr) {}
  ~SLBgplsTopoSrDisjointGroupConstraint() override;
  explicit constexpr SLBgplsTopoSrDisjointGroupConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrDisjointGroupConstraint(const SLBgplsTopoSrDisjointGroupConstraint& from);
  SLBgplsTopoSrDisjointGroupConstraint(SLBgplsTopoSrDisjointGroupConstraint&& from) noexcept
    : SLBgplsTopoSrDisjointGroupConstraint() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrDisjointGroupConstraint& operator=(const SLBgplsTopoSrDisjointGroupConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrDisjointGroupConstraint& operator=(SLBgplsTopoSrDisjointGroupConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrDisjointGroupConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrDisjointGroupConstraint* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrDisjointGroupConstraint*>(
               &_SLBgplsTopoSrDisjointGroupConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SLBgplsTopoSrDisjointGroupConstraint& a, SLBgplsTopoSrDisjointGroupConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrDisjointGroupConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrDisjointGroupConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrDisjointGroupConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrDisjointGroupConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrDisjointGroupConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrDisjointGroupConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrDisjointGroupConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrDisjointGroupConstraint";
  }
  protected:
  explicit SLBgplsTopoSrDisjointGroupConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFlagsFieldNumber = 1,
    kStatusFlagsFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // bytes RequestFlags = 1;
  void clear_requestflags();
  const std::string& requestflags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestflags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestflags();
  PROTOBUF_NODISCARD std::string* release_requestflags();
  void set_allocated_requestflags(std::string* requestflags);
  private:
  const std::string& _internal_requestflags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestflags(const std::string& value);
  std::string* _internal_mutable_requestflags();
  public:

  // bytes StatusFlags = 2;
  void clear_statusflags();
  const std::string& statusflags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statusflags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statusflags();
  PROTOBUF_NODISCARD std::string* release_statusflags();
  void set_allocated_statusflags(std::string* statusflags);
  private:
  const std::string& _internal_statusflags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statusflags(const std::string& value);
  std::string* _internal_mutable_statusflags();
  public:

  // uint32 GroupId = 3;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrDisjointGroupConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestflags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statusflags_;
  uint32_t groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6BindingSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6BindingSid) */ {
 public:
  inline SLBgplsTopoSrv6BindingSid() : SLBgplsTopoSrv6BindingSid(nullptr) {}
  ~SLBgplsTopoSrv6BindingSid() override;
  explicit constexpr SLBgplsTopoSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6BindingSid(const SLBgplsTopoSrv6BindingSid& from);
  SLBgplsTopoSrv6BindingSid(SLBgplsTopoSrv6BindingSid&& from) noexcept
    : SLBgplsTopoSrv6BindingSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6BindingSid& operator=(const SLBgplsTopoSrv6BindingSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6BindingSid& operator=(SLBgplsTopoSrv6BindingSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6BindingSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6BindingSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6BindingSid*>(
               &_SLBgplsTopoSrv6BindingSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SLBgplsTopoSrv6BindingSid& a, SLBgplsTopoSrv6BindingSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6BindingSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6BindingSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6BindingSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6BindingSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6BindingSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6BindingSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6BindingSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6BindingSid";
  }
  protected:
  explicit SLBgplsTopoSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kBsidFieldNumber = 2,
    kSpecifiedBsidFieldNumber = 3,
    kEndPointBehaviourFieldNumber = 4,
    kSidStructFieldNumber = 5,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .service_layer.SlBgplsTopoSrBsid Bsid = 2;
  bool has_bsid() const;
  private:
  bool _internal_has_bsid() const;
  public:
  void clear_bsid();
  const ::service_layer::SlBgplsTopoSrBsid& bsid() const;
  PROTOBUF_NODISCARD ::service_layer::SlBgplsTopoSrBsid* release_bsid();
  ::service_layer::SlBgplsTopoSrBsid* mutable_bsid();
  void set_allocated_bsid(::service_layer::SlBgplsTopoSrBsid* bsid);
  private:
  const ::service_layer::SlBgplsTopoSrBsid& _internal_bsid() const;
  ::service_layer::SlBgplsTopoSrBsid* _internal_mutable_bsid();
  public:
  void unsafe_arena_set_allocated_bsid(
      ::service_layer::SlBgplsTopoSrBsid* bsid);
  ::service_layer::SlBgplsTopoSrBsid* unsafe_arena_release_bsid();

  // .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
  bool has_specifiedbsid() const;
  private:
  bool _internal_has_specifiedbsid() const;
  public:
  void clear_specifiedbsid();
  const ::service_layer::SlBgplsTopoSrBsid& specifiedbsid() const;
  PROTOBUF_NODISCARD ::service_layer::SlBgplsTopoSrBsid* release_specifiedbsid();
  ::service_layer::SlBgplsTopoSrBsid* mutable_specifiedbsid();
  void set_allocated_specifiedbsid(::service_layer::SlBgplsTopoSrBsid* specifiedbsid);
  private:
  const ::service_layer::SlBgplsTopoSrBsid& _internal_specifiedbsid() const;
  ::service_layer::SlBgplsTopoSrBsid* _internal_mutable_specifiedbsid();
  public:
  void unsafe_arena_set_allocated_specifiedbsid(
      ::service_layer::SlBgplsTopoSrBsid* specifiedbsid);
  ::service_layer::SlBgplsTopoSrBsid* unsafe_arena_release_specifiedbsid();

  // .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 4;
  bool has_endpointbehaviour() const;
  private:
  bool _internal_has_endpointbehaviour() const;
  public:
  void clear_endpointbehaviour();
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& endpointbehaviour() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6EndPointBehavior* release_endpointbehaviour();
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* mutable_endpointbehaviour();
  void set_allocated_endpointbehaviour(::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour);
  private:
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& _internal_endpointbehaviour() const;
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* _internal_mutable_endpointbehaviour();
  public:
  void unsafe_arena_set_allocated_endpointbehaviour(
      ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour);
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* unsafe_arena_release_endpointbehaviour();

  // .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 5;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLBgplsTopoSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLBgplsTopoSrv6SidStruct* release_sidstruct();
  ::service_layer::SLBgplsTopoSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLBgplsTopoSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLBgplsTopoSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct);
  ::service_layer::SLBgplsTopoSrv6SidStruct* unsafe_arena_release_sidstruct();

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6BindingSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::service_layer::SlBgplsTopoSrBsid* bsid_;
  ::service_layer::SlBgplsTopoSrBsid* specifiedbsid_;
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour_;
  ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrPolicyName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrPolicyName) */ {
 public:
  inline SLBgplsTopoSrPolicyName() : SLBgplsTopoSrPolicyName(nullptr) {}
  ~SLBgplsTopoSrPolicyName() override;
  explicit constexpr SLBgplsTopoSrPolicyName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrPolicyName(const SLBgplsTopoSrPolicyName& from);
  SLBgplsTopoSrPolicyName(SLBgplsTopoSrPolicyName&& from) noexcept
    : SLBgplsTopoSrPolicyName() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrPolicyName& operator=(const SLBgplsTopoSrPolicyName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrPolicyName& operator=(SLBgplsTopoSrPolicyName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrPolicyName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrPolicyName* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrPolicyName*>(
               &_SLBgplsTopoSrPolicyName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SLBgplsTopoSrPolicyName& a, SLBgplsTopoSrPolicyName& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrPolicyName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrPolicyName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrPolicyName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrPolicyName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrPolicyName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrPolicyName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrPolicyName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrPolicyName";
  }
  protected:
  explicit SLBgplsTopoSrPolicyName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrPolicyName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrBidirGroupConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrBidirGroupConstraint) */ {
 public:
  inline SLBgplsTopoSrBidirGroupConstraint() : SLBgplsTopoSrBidirGroupConstraint(nullptr) {}
  ~SLBgplsTopoSrBidirGroupConstraint() override;
  explicit constexpr SLBgplsTopoSrBidirGroupConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrBidirGroupConstraint(const SLBgplsTopoSrBidirGroupConstraint& from);
  SLBgplsTopoSrBidirGroupConstraint(SLBgplsTopoSrBidirGroupConstraint&& from) noexcept
    : SLBgplsTopoSrBidirGroupConstraint() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrBidirGroupConstraint& operator=(const SLBgplsTopoSrBidirGroupConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrBidirGroupConstraint& operator=(SLBgplsTopoSrBidirGroupConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrBidirGroupConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrBidirGroupConstraint* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrBidirGroupConstraint*>(
               &_SLBgplsTopoSrBidirGroupConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(SLBgplsTopoSrBidirGroupConstraint& a, SLBgplsTopoSrBidirGroupConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrBidirGroupConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrBidirGroupConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrBidirGroupConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrBidirGroupConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrBidirGroupConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrBidirGroupConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrBidirGroupConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrBidirGroupConstraint";
  }
  protected:
  explicit SLBgplsTopoSrBidirGroupConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 GroupId = 2;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrBidirGroupConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrMetricConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrMetricConstraint) */ {
 public:
  inline SLBgplsTopoSrMetricConstraint() : SLBgplsTopoSrMetricConstraint(nullptr) {}
  ~SLBgplsTopoSrMetricConstraint() override;
  explicit constexpr SLBgplsTopoSrMetricConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrMetricConstraint(const SLBgplsTopoSrMetricConstraint& from);
  SLBgplsTopoSrMetricConstraint(SLBgplsTopoSrMetricConstraint&& from) noexcept
    : SLBgplsTopoSrMetricConstraint() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrMetricConstraint& operator=(const SLBgplsTopoSrMetricConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrMetricConstraint& operator=(SLBgplsTopoSrMetricConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrMetricConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrMetricConstraint* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrMetricConstraint*>(
               &_SLBgplsTopoSrMetricConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(SLBgplsTopoSrMetricConstraint& a, SLBgplsTopoSrMetricConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrMetricConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrMetricConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrMetricConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrMetricConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrMetricConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrMetricConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrMetricConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrMetricConstraint";
  }
  protected:
  explicit SLBgplsTopoSrMetricConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kTypeFieldNumber = 1,
    kMarginFieldNumber = 3,
    kBoundFieldNumber = 4,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 Type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 Margin = 3;
  void clear_margin();
  uint32_t margin() const;
  void set_margin(uint32_t value);
  private:
  uint32_t _internal_margin() const;
  void _internal_set_margin(uint32_t value);
  public:

  // uint32 Bound = 4;
  void clear_bound();
  uint32_t bound() const;
  void set_bound(uint32_t value);
  private:
  uint32_t _internal_bound() const;
  void _internal_set_bound(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrMetricConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t type_;
  uint32_t margin_;
  uint32_t bound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrCpSegListBandwidthState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrCpSegListBandwidthState) */ {
 public:
  inline SLBgplsTopoSrCpSegListBandwidthState() : SLBgplsTopoSrCpSegListBandwidthState(nullptr) {}
  ~SLBgplsTopoSrCpSegListBandwidthState() override;
  explicit constexpr SLBgplsTopoSrCpSegListBandwidthState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrCpSegListBandwidthState(const SLBgplsTopoSrCpSegListBandwidthState& from);
  SLBgplsTopoSrCpSegListBandwidthState(SLBgplsTopoSrCpSegListBandwidthState&& from) noexcept
    : SLBgplsTopoSrCpSegListBandwidthState() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrCpSegListBandwidthState& operator=(const SLBgplsTopoSrCpSegListBandwidthState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrCpSegListBandwidthState& operator=(SLBgplsTopoSrCpSegListBandwidthState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrCpSegListBandwidthState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrCpSegListBandwidthState* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrCpSegListBandwidthState*>(
               &_SLBgplsTopoSrCpSegListBandwidthState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(SLBgplsTopoSrCpSegListBandwidthState& a, SLBgplsTopoSrCpSegListBandwidthState& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrCpSegListBandwidthState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrCpSegListBandwidthState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrCpSegListBandwidthState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrCpSegListBandwidthState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrCpSegListBandwidthState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrCpSegListBandwidthState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrCpSegListBandwidthState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrCpSegListBandwidthState";
  }
  protected:
  explicit SLBgplsTopoSrCpSegListBandwidthState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // bytes Bandwidth = 1;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bandwidth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bandwidth();
  PROTOBUF_NODISCARD std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrCpSegListBandwidthState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrSegListId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrSegListId) */ {
 public:
  inline SLBgplsTopoSrSegListId() : SLBgplsTopoSrSegListId(nullptr) {}
  ~SLBgplsTopoSrSegListId() override;
  explicit constexpr SLBgplsTopoSrSegListId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrSegListId(const SLBgplsTopoSrSegListId& from);
  SLBgplsTopoSrSegListId(SLBgplsTopoSrSegListId&& from) noexcept
    : SLBgplsTopoSrSegListId() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrSegListId& operator=(const SLBgplsTopoSrSegListId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrSegListId& operator=(SLBgplsTopoSrSegListId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrSegListId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrSegListId* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrSegListId*>(
               &_SLBgplsTopoSrSegListId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(SLBgplsTopoSrSegListId& a, SLBgplsTopoSrSegListId& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrSegListId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrSegListId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrSegListId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrSegListId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrSegListId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrSegListId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrSegListId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrSegListId";
  }
  protected:
  explicit SLBgplsTopoSrSegListId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegListIdFieldNumber = 1,
  };
  // uint32 SegListId = 1;
  void clear_seglistid();
  uint32_t seglistid() const;
  void set_seglistid(uint32_t value);
  private:
  uint32_t _internal_seglistid() const;
  void _internal_set_seglistid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrSegListId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t seglistid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6EndPointBehavior final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6EndPointBehavior) */ {
 public:
  inline SLBgplsTopoSrv6EndPointBehavior() : SLBgplsTopoSrv6EndPointBehavior(nullptr) {}
  ~SLBgplsTopoSrv6EndPointBehavior() override;
  explicit constexpr SLBgplsTopoSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6EndPointBehavior(const SLBgplsTopoSrv6EndPointBehavior& from);
  SLBgplsTopoSrv6EndPointBehavior(SLBgplsTopoSrv6EndPointBehavior&& from) noexcept
    : SLBgplsTopoSrv6EndPointBehavior() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6EndPointBehavior& operator=(const SLBgplsTopoSrv6EndPointBehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6EndPointBehavior& operator=(SLBgplsTopoSrv6EndPointBehavior&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6EndPointBehavior& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6EndPointBehavior* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6EndPointBehavior*>(
               &_SLBgplsTopoSrv6EndPointBehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SLBgplsTopoSrv6EndPointBehavior& a, SLBgplsTopoSrv6EndPointBehavior& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6EndPointBehavior* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6EndPointBehavior* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6EndPointBehavior* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6EndPointBehavior>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6EndPointBehavior& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6EndPointBehavior& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6EndPointBehavior* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6EndPointBehavior";
  }
  protected:
  explicit SLBgplsTopoSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 2,
    kEndPointBehaviorFieldNumber = 1,
    kAlgorithmFieldNumber = 3,
  };
  // bytes Flags = 2;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // uint32 EndPointBehavior = 1;
  void clear_endpointbehavior();
  uint32_t endpointbehavior() const;
  void set_endpointbehavior(uint32_t value);
  private:
  uint32_t _internal_endpointbehavior() const;
  void _internal_set_endpointbehavior(uint32_t value);
  public:

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6EndPointBehavior)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  uint32_t endpointbehavior_;
  uint32_t algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6BgpPeerNodeSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid) */ {
 public:
  inline SLBgplsTopoSrv6BgpPeerNodeSid() : SLBgplsTopoSrv6BgpPeerNodeSid(nullptr) {}
  ~SLBgplsTopoSrv6BgpPeerNodeSid() override;
  explicit constexpr SLBgplsTopoSrv6BgpPeerNodeSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6BgpPeerNodeSid(const SLBgplsTopoSrv6BgpPeerNodeSid& from);
  SLBgplsTopoSrv6BgpPeerNodeSid(SLBgplsTopoSrv6BgpPeerNodeSid&& from) noexcept
    : SLBgplsTopoSrv6BgpPeerNodeSid() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6BgpPeerNodeSid& operator=(const SLBgplsTopoSrv6BgpPeerNodeSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6BgpPeerNodeSid& operator=(SLBgplsTopoSrv6BgpPeerNodeSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6BgpPeerNodeSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6BgpPeerNodeSid* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6BgpPeerNodeSid*>(
               &_SLBgplsTopoSrv6BgpPeerNodeSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SLBgplsTopoSrv6BgpPeerNodeSid& a, SLBgplsTopoSrv6BgpPeerNodeSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6BgpPeerNodeSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6BgpPeerNodeSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6BgpPeerNodeSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6BgpPeerNodeSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6BgpPeerNodeSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6BgpPeerNodeSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6BgpPeerNodeSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6BgpPeerNodeSid";
  }
  protected:
  explicit SLBgplsTopoSrv6BgpPeerNodeSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kPeerBgpIdFieldNumber = 4,
    kWeightFieldNumber = 2,
    kPeerASFieldNumber = 3,
  };
  // bytes Flags = 1;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // bytes PeerBgpId = 4;
  void clear_peerbgpid();
  const std::string& peerbgpid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peerbgpid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peerbgpid();
  PROTOBUF_NODISCARD std::string* release_peerbgpid();
  void set_allocated_peerbgpid(std::string* peerbgpid);
  private:
  const std::string& _internal_peerbgpid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peerbgpid(const std::string& value);
  std::string* _internal_mutable_peerbgpid();
  public:

  // uint32 Weight = 2;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // uint32 PeerAS = 3;
  void clear_peeras();
  uint32_t peeras() const;
  void set_peeras(uint32_t value);
  private:
  uint32_t _internal_peeras() const;
  void _internal_set_peeras(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peerbgpid_;
  uint32_t weight_;
  uint32_t peeras_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoSrv6SidStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoSrv6SidStruct) */ {
 public:
  inline SLBgplsTopoSrv6SidStruct() : SLBgplsTopoSrv6SidStruct(nullptr) {}
  ~SLBgplsTopoSrv6SidStruct() override;
  explicit constexpr SLBgplsTopoSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoSrv6SidStruct(const SLBgplsTopoSrv6SidStruct& from);
  SLBgplsTopoSrv6SidStruct(SLBgplsTopoSrv6SidStruct&& from) noexcept
    : SLBgplsTopoSrv6SidStruct() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoSrv6SidStruct& operator=(const SLBgplsTopoSrv6SidStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoSrv6SidStruct& operator=(SLBgplsTopoSrv6SidStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoSrv6SidStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoSrv6SidStruct* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoSrv6SidStruct*>(
               &_SLBgplsTopoSrv6SidStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(SLBgplsTopoSrv6SidStruct& a, SLBgplsTopoSrv6SidStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoSrv6SidStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoSrv6SidStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoSrv6SidStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoSrv6SidStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoSrv6SidStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoSrv6SidStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoSrv6SidStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoSrv6SidStruct";
  }
  protected:
  explicit SLBgplsTopoSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorBlockLenFieldNumber = 1,
    kLocatorNodeLenFieldNumber = 2,
    kFunctionLenFieldNumber = 3,
    kArgLenFieldNumber = 4,
  };
  // uint32 LocatorBlockLen = 1;
  void clear_locatorblocklen();
  uint32_t locatorblocklen() const;
  void set_locatorblocklen(uint32_t value);
  private:
  uint32_t _internal_locatorblocklen() const;
  void _internal_set_locatorblocklen(uint32_t value);
  public:

  // uint32 LocatorNodeLen = 2;
  void clear_locatornodelen();
  uint32_t locatornodelen() const;
  void set_locatornodelen(uint32_t value);
  private:
  uint32_t _internal_locatornodelen() const;
  void _internal_set_locatornodelen(uint32_t value);
  public:

  // uint32 FunctionLen = 3;
  void clear_functionlen();
  uint32_t functionlen() const;
  void set_functionlen(uint32_t value);
  private:
  uint32_t _internal_functionlen() const;
  void _internal_set_functionlen(uint32_t value);
  public:

  // uint32 ArgLen = 4;
  void clear_arglen();
  uint32_t arglen() const;
  void set_arglen(uint32_t value);
  private:
  uint32_t _internal_arglen() const;
  void _internal_set_arglen(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoSrv6SidStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t locatorblocklen_;
  uint32_t locatornodelen_;
  uint32_t functionlen_;
  uint32_t arglen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// -------------------------------------------------------------------

class SLBgplsTopoUnknownAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLBgplsTopoUnknownAttr) */ {
 public:
  inline SLBgplsTopoUnknownAttr() : SLBgplsTopoUnknownAttr(nullptr) {}
  ~SLBgplsTopoUnknownAttr() override;
  explicit constexpr SLBgplsTopoUnknownAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLBgplsTopoUnknownAttr(const SLBgplsTopoUnknownAttr& from);
  SLBgplsTopoUnknownAttr(SLBgplsTopoUnknownAttr&& from) noexcept
    : SLBgplsTopoUnknownAttr() {
    *this = ::std::move(from);
  }

  inline SLBgplsTopoUnknownAttr& operator=(const SLBgplsTopoUnknownAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLBgplsTopoUnknownAttr& operator=(SLBgplsTopoUnknownAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLBgplsTopoUnknownAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLBgplsTopoUnknownAttr* internal_default_instance() {
    return reinterpret_cast<const SLBgplsTopoUnknownAttr*>(
               &_SLBgplsTopoUnknownAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SLBgplsTopoUnknownAttr& a, SLBgplsTopoUnknownAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SLBgplsTopoUnknownAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLBgplsTopoUnknownAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLBgplsTopoUnknownAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLBgplsTopoUnknownAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLBgplsTopoUnknownAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLBgplsTopoUnknownAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLBgplsTopoUnknownAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLBgplsTopoUnknownAttr";
  }
  protected:
  explicit SLBgplsTopoUnknownAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawTlvFieldNumber = 3,
    kTlvTypeFieldNumber = 1,
    kTlvLenFieldNumber = 2,
  };
  // bytes RawTlv = 3;
  void clear_rawtlv();
  const std::string& rawtlv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rawtlv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rawtlv();
  PROTOBUF_NODISCARD std::string* release_rawtlv();
  void set_allocated_rawtlv(std::string* rawtlv);
  private:
  const std::string& _internal_rawtlv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rawtlv(const std::string& value);
  std::string* _internal_mutable_rawtlv();
  public:

  // uint32 TlvType = 1;
  void clear_tlvtype();
  uint32_t tlvtype() const;
  void set_tlvtype(uint32_t value);
  private:
  uint32_t _internal_tlvtype() const;
  void _internal_set_tlvtype(uint32_t value);
  public:

  // uint32 TlvLen = 2;
  void clear_tlvlen();
  uint32_t tlvlen() const;
  void set_tlvlen(uint32_t value);
  private:
  uint32_t _internal_tlvlen() const;
  void _internal_set_tlvlen(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLBgplsTopoUnknownAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawtlv_;
  uint32_t tlvtype_;
  uint32_t tlvlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fbgpls_5ftopology_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLBgplsTopoNotifReqMsg

// repeated .service_layer.SLBgplsTopoNlriMatch Match = 1;
inline int SLBgplsTopoNotifReqMsg::_internal_match_size() const {
  return match_.size();
}
inline int SLBgplsTopoNotifReqMsg::match_size() const {
  return _internal_match_size();
}
inline void SLBgplsTopoNotifReqMsg::clear_match() {
  match_.Clear();
}
inline ::service_layer::SLBgplsTopoNlriMatch* SLBgplsTopoNotifReqMsg::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNotifReqMsg.Match)
  return match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNlriMatch >*
SLBgplsTopoNotifReqMsg::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNotifReqMsg.Match)
  return &match_;
}
inline const ::service_layer::SLBgplsTopoNlriMatch& SLBgplsTopoNotifReqMsg::_internal_match(int index) const {
  return match_.Get(index);
}
inline const ::service_layer::SLBgplsTopoNlriMatch& SLBgplsTopoNotifReqMsg::match(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNotifReqMsg.Match)
  return _internal_match(index);
}
inline ::service_layer::SLBgplsTopoNlriMatch* SLBgplsTopoNotifReqMsg::_internal_add_match() {
  return match_.Add();
}
inline ::service_layer::SLBgplsTopoNlriMatch* SLBgplsTopoNotifReqMsg::add_match() {
  ::service_layer::SLBgplsTopoNlriMatch* _add = _internal_add_match();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNotifReqMsg.Match)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNlriMatch >&
SLBgplsTopoNotifReqMsg::match() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNotifReqMsg.Match)
  return match_;
}

// -------------------------------------------------------------------

// SLBgplsTopoNlriMatch

// .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
inline bool SLBgplsTopoNlriMatch::_internal_has_instanceid() const {
  return this != internal_default_instance() && instanceid_ != nullptr;
}
inline bool SLBgplsTopoNlriMatch::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void SLBgplsTopoNlriMatch::clear_instanceid() {
  if (GetArenaForAllocation() == nullptr && instanceid_ != nullptr) {
    delete instanceid_;
  }
  instanceid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoInstanceId& SLBgplsTopoNlriMatch::_internal_instanceid() const {
  const ::service_layer::SLBgplsTopoInstanceId* p = instanceid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoInstanceId&>(
      ::service_layer::_SLBgplsTopoInstanceId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoInstanceId& SLBgplsTopoNlriMatch::instanceid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNlriMatch.InstanceId)
  return _internal_instanceid();
}
inline void SLBgplsTopoNlriMatch::unsafe_arena_set_allocated_instanceid(
    ::service_layer::SLBgplsTopoInstanceId* instanceid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instanceid_);
  }
  instanceid_ = instanceid;
  if (instanceid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNlriMatch.InstanceId)
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoNlriMatch::release_instanceid() {
  
  ::service_layer::SLBgplsTopoInstanceId* temp = instanceid_;
  instanceid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoNlriMatch::unsafe_arena_release_instanceid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNlriMatch.InstanceId)
  
  ::service_layer::SLBgplsTopoInstanceId* temp = instanceid_;
  instanceid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoNlriMatch::_internal_mutable_instanceid() {
  
  if (instanceid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoInstanceId>(GetArenaForAllocation());
    instanceid_ = p;
  }
  return instanceid_;
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoNlriMatch::mutable_instanceid() {
  ::service_layer::SLBgplsTopoInstanceId* _msg = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNlriMatch.InstanceId)
  return _msg;
}
inline void SLBgplsTopoNlriMatch::set_allocated_instanceid(::service_layer::SLBgplsTopoInstanceId* instanceid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete instanceid_;
  }
  if (instanceid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoInstanceId>::GetOwningArena(instanceid);
    if (message_arena != submessage_arena) {
      instanceid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instanceid, submessage_arena);
    }
    
  } else {
    
  }
  instanceid_ = instanceid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNlriMatch.InstanceId)
}

// .service_layer.SLBgplsTopoProtocol Protocol = 2;
inline void SLBgplsTopoNlriMatch::clear_protocol() {
  protocol_ = 0;
}
inline ::service_layer::SLBgplsTopoProtocol SLBgplsTopoNlriMatch::_internal_protocol() const {
  return static_cast< ::service_layer::SLBgplsTopoProtocol >(protocol_);
}
inline ::service_layer::SLBgplsTopoProtocol SLBgplsTopoNlriMatch::protocol() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNlriMatch.Protocol)
  return _internal_protocol();
}
inline void SLBgplsTopoNlriMatch::_internal_set_protocol(::service_layer::SLBgplsTopoProtocol value) {
  
  protocol_ = value;
}
inline void SLBgplsTopoNlriMatch::set_protocol(::service_layer::SLBgplsTopoProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNlriMatch.Protocol)
}

// .service_layer.SLBgplsTopoNlriType NlriType = 3;
inline void SLBgplsTopoNlriMatch::clear_nlritype() {
  nlritype_ = 0;
}
inline ::service_layer::SLBgplsTopoNlriType SLBgplsTopoNlriMatch::_internal_nlritype() const {
  return static_cast< ::service_layer::SLBgplsTopoNlriType >(nlritype_);
}
inline ::service_layer::SLBgplsTopoNlriType SLBgplsTopoNlriMatch::nlritype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNlriMatch.NlriType)
  return _internal_nlritype();
}
inline void SLBgplsTopoNlriMatch::_internal_set_nlritype(::service_layer::SLBgplsTopoNlriType value) {
  
  nlritype_ = value;
}
inline void SLBgplsTopoNlriMatch::set_nlritype(::service_layer::SLBgplsTopoNlriType value) {
  _internal_set_nlritype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNlriMatch.NlriType)
}

// -------------------------------------------------------------------

// SLBgplsTopoNotifMsg

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLBgplsTopoNotifMsg::_internal_has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline bool SLBgplsTopoNotifMsg::has_errstatus() const {
  return _internal_has_errstatus();
}
inline void SLBgplsTopoNotifMsg::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline ::service_layer::SLErrorStatus* SLBgplsTopoNotifMsg::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNotifMsg.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
      ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLErrorStatus& SLBgplsTopoNotifMsg::_internal_errstatus() const {
  return _internal_has_errstatus()
      ? *Event_.errstatus_
      : reinterpret_cast< ::service_layer::SLErrorStatus&>(::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLBgplsTopoNotifMsg::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNotifMsg.ErrStatus)
  return _internal_errstatus();
}
inline ::service_layer::SLErrorStatus* SLBgplsTopoNotifMsg::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNotifMsg.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNotifMsg::unsafe_arena_set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNotifMsg.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLBgplsTopoNotifMsg::_internal_mutable_errstatus() {
  if (!_internal_has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = CreateMaybeMessage< ::service_layer::SLErrorStatus >(GetArenaForAllocation());
  }
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLBgplsTopoNotifMsg::mutable_errstatus() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_errstatus();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNotifMsg.ErrStatus)
  return _msg;
}

// .service_layer.SLBgplsTopoNotif Data = 2;
inline bool SLBgplsTopoNotifMsg::_internal_has_data() const {
  return Event_case() == kData;
}
inline bool SLBgplsTopoNotifMsg::has_data() const {
  return _internal_has_data();
}
inline void SLBgplsTopoNotifMsg::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void SLBgplsTopoNotifMsg::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.data_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLBgplsTopoNotif* SLBgplsTopoNotifMsg::release_data() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNotifMsg.Data)
  if (_internal_has_data()) {
    clear_has_Event();
      ::service_layer::SLBgplsTopoNotif* temp = Event_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoNotif& SLBgplsTopoNotifMsg::_internal_data() const {
  return _internal_has_data()
      ? *Event_.data_
      : reinterpret_cast< ::service_layer::SLBgplsTopoNotif&>(::service_layer::_SLBgplsTopoNotif_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNotif& SLBgplsTopoNotifMsg::data() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNotifMsg.Data)
  return _internal_data();
}
inline ::service_layer::SLBgplsTopoNotif* SLBgplsTopoNotifMsg::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNotifMsg.Data)
  if (_internal_has_data()) {
    clear_has_Event();
    ::service_layer::SLBgplsTopoNotif* temp = Event_.data_;
    Event_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNotifMsg::unsafe_arena_set_allocated_data(::service_layer::SLBgplsTopoNotif* data) {
  clear_Event();
  if (data) {
    set_has_data();
    Event_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNotifMsg.Data)
}
inline ::service_layer::SLBgplsTopoNotif* SLBgplsTopoNotifMsg::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_Event();
    set_has_data();
    Event_.data_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoNotif >(GetArenaForAllocation());
  }
  return Event_.data_;
}
inline ::service_layer::SLBgplsTopoNotif* SLBgplsTopoNotifMsg::mutable_data() {
  ::service_layer::SLBgplsTopoNotif* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNotifMsg.Data)
  return _msg;
}

// .service_layer.SLBgplsTopoStartMarker Start = 3;
inline bool SLBgplsTopoNotifMsg::_internal_has_start() const {
  return Event_case() == kStart;
}
inline bool SLBgplsTopoNotifMsg::has_start() const {
  return _internal_has_start();
}
inline void SLBgplsTopoNotifMsg::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void SLBgplsTopoNotifMsg::clear_start() {
  if (_internal_has_start()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.start_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLBgplsTopoStartMarker* SLBgplsTopoNotifMsg::release_start() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNotifMsg.Start)
  if (_internal_has_start()) {
    clear_has_Event();
      ::service_layer::SLBgplsTopoStartMarker* temp = Event_.start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoStartMarker& SLBgplsTopoNotifMsg::_internal_start() const {
  return _internal_has_start()
      ? *Event_.start_
      : reinterpret_cast< ::service_layer::SLBgplsTopoStartMarker&>(::service_layer::_SLBgplsTopoStartMarker_default_instance_);
}
inline const ::service_layer::SLBgplsTopoStartMarker& SLBgplsTopoNotifMsg::start() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNotifMsg.Start)
  return _internal_start();
}
inline ::service_layer::SLBgplsTopoStartMarker* SLBgplsTopoNotifMsg::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNotifMsg.Start)
  if (_internal_has_start()) {
    clear_has_Event();
    ::service_layer::SLBgplsTopoStartMarker* temp = Event_.start_;
    Event_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNotifMsg::unsafe_arena_set_allocated_start(::service_layer::SLBgplsTopoStartMarker* start) {
  clear_Event();
  if (start) {
    set_has_start();
    Event_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNotifMsg.Start)
}
inline ::service_layer::SLBgplsTopoStartMarker* SLBgplsTopoNotifMsg::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_Event();
    set_has_start();
    Event_.start_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoStartMarker >(GetArenaForAllocation());
  }
  return Event_.start_;
}
inline ::service_layer::SLBgplsTopoStartMarker* SLBgplsTopoNotifMsg::mutable_start() {
  ::service_layer::SLBgplsTopoStartMarker* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNotifMsg.Start)
  return _msg;
}

// .service_layer.SLBgplsTopoEndMarker End = 4;
inline bool SLBgplsTopoNotifMsg::_internal_has_end() const {
  return Event_case() == kEnd;
}
inline bool SLBgplsTopoNotifMsg::has_end() const {
  return _internal_has_end();
}
inline void SLBgplsTopoNotifMsg::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline void SLBgplsTopoNotifMsg::clear_end() {
  if (_internal_has_end()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.end_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLBgplsTopoEndMarker* SLBgplsTopoNotifMsg::release_end() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNotifMsg.End)
  if (_internal_has_end()) {
    clear_has_Event();
      ::service_layer::SLBgplsTopoEndMarker* temp = Event_.end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoEndMarker& SLBgplsTopoNotifMsg::_internal_end() const {
  return _internal_has_end()
      ? *Event_.end_
      : reinterpret_cast< ::service_layer::SLBgplsTopoEndMarker&>(::service_layer::_SLBgplsTopoEndMarker_default_instance_);
}
inline const ::service_layer::SLBgplsTopoEndMarker& SLBgplsTopoNotifMsg::end() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNotifMsg.End)
  return _internal_end();
}
inline ::service_layer::SLBgplsTopoEndMarker* SLBgplsTopoNotifMsg::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNotifMsg.End)
  if (_internal_has_end()) {
    clear_has_Event();
    ::service_layer::SLBgplsTopoEndMarker* temp = Event_.end_;
    Event_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNotifMsg::unsafe_arena_set_allocated_end(::service_layer::SLBgplsTopoEndMarker* end) {
  clear_Event();
  if (end) {
    set_has_end();
    Event_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNotifMsg.End)
}
inline ::service_layer::SLBgplsTopoEndMarker* SLBgplsTopoNotifMsg::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_Event();
    set_has_end();
    Event_.end_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoEndMarker >(GetArenaForAllocation());
  }
  return Event_.end_;
}
inline ::service_layer::SLBgplsTopoEndMarker* SLBgplsTopoNotifMsg::mutable_end() {
  ::service_layer::SLBgplsTopoEndMarker* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNotifMsg.End)
  return _msg;
}

inline bool SLBgplsTopoNotifMsg::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLBgplsTopoNotifMsg::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLBgplsTopoNotifMsg::EventCase SLBgplsTopoNotifMsg::Event_case() const {
  return SLBgplsTopoNotifMsg::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoStartMarker

// -------------------------------------------------------------------

// SLBgplsTopoEndMarker

// -------------------------------------------------------------------

// SLBgplsTopoNotif

// repeated .service_layer.SLBgplsTopoEntry Entries = 1;
inline int SLBgplsTopoNotif::_internal_entries_size() const {
  return entries_.size();
}
inline int SLBgplsTopoNotif::entries_size() const {
  return _internal_entries_size();
}
inline void SLBgplsTopoNotif::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLBgplsTopoEntry* SLBgplsTopoNotif::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNotif.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoEntry >*
SLBgplsTopoNotif::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNotif.Entries)
  return &entries_;
}
inline const ::service_layer::SLBgplsTopoEntry& SLBgplsTopoNotif::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLBgplsTopoEntry& SLBgplsTopoNotif::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNotif.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLBgplsTopoEntry* SLBgplsTopoNotif::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLBgplsTopoEntry* SLBgplsTopoNotif::add_entries() {
  ::service_layer::SLBgplsTopoEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNotif.Entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoEntry >&
SLBgplsTopoNotif::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNotif.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLBgplsTopoEntry

// .service_layer.SLBgplsTopoOperation Operation = 1;
inline void SLBgplsTopoEntry::clear_operation() {
  operation_ = 0;
}
inline ::service_layer::SLBgplsTopoOperation SLBgplsTopoEntry::_internal_operation() const {
  return static_cast< ::service_layer::SLBgplsTopoOperation >(operation_);
}
inline ::service_layer::SLBgplsTopoOperation SLBgplsTopoEntry::operation() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoEntry.Operation)
  return _internal_operation();
}
inline void SLBgplsTopoEntry::_internal_set_operation(::service_layer::SLBgplsTopoOperation value) {
  
  operation_ = value;
}
inline void SLBgplsTopoEntry::set_operation(::service_layer::SLBgplsTopoOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoEntry.Operation)
}

// .service_layer.SLBgplsTopoData Data = 2;
inline bool SLBgplsTopoEntry::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SLBgplsTopoEntry::has_data() const {
  return _internal_has_data();
}
inline void SLBgplsTopoEntry::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoData& SLBgplsTopoEntry::_internal_data() const {
  const ::service_layer::SLBgplsTopoData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoData&>(
      ::service_layer::_SLBgplsTopoData_default_instance_);
}
inline const ::service_layer::SLBgplsTopoData& SLBgplsTopoEntry::data() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoEntry.Data)
  return _internal_data();
}
inline void SLBgplsTopoEntry::unsafe_arena_set_allocated_data(
    ::service_layer::SLBgplsTopoData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoEntry.Data)
}
inline ::service_layer::SLBgplsTopoData* SLBgplsTopoEntry::release_data() {
  
  ::service_layer::SLBgplsTopoData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoData* SLBgplsTopoEntry::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoEntry.Data)
  
  ::service_layer::SLBgplsTopoData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoData* SLBgplsTopoEntry::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::service_layer::SLBgplsTopoData* SLBgplsTopoEntry::mutable_data() {
  ::service_layer::SLBgplsTopoData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoEntry.Data)
  return _msg;
}
inline void SLBgplsTopoEntry::set_allocated_data(::service_layer::SLBgplsTopoData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoEntry.Data)
}

// -------------------------------------------------------------------

// SLBgplsTopoData

// .service_layer.SLBgplsTopoInstanceId InstanceId = 1;
inline bool SLBgplsTopoData::_internal_has_instanceid() const {
  return this != internal_default_instance() && instanceid_ != nullptr;
}
inline bool SLBgplsTopoData::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void SLBgplsTopoData::clear_instanceid() {
  if (GetArenaForAllocation() == nullptr && instanceid_ != nullptr) {
    delete instanceid_;
  }
  instanceid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoInstanceId& SLBgplsTopoData::_internal_instanceid() const {
  const ::service_layer::SLBgplsTopoInstanceId* p = instanceid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoInstanceId&>(
      ::service_layer::_SLBgplsTopoInstanceId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoInstanceId& SLBgplsTopoData::instanceid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.InstanceId)
  return _internal_instanceid();
}
inline void SLBgplsTopoData::unsafe_arena_set_allocated_instanceid(
    ::service_layer::SLBgplsTopoInstanceId* instanceid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instanceid_);
  }
  instanceid_ = instanceid;
  if (instanceid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoData.InstanceId)
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoData::release_instanceid() {
  
  ::service_layer::SLBgplsTopoInstanceId* temp = instanceid_;
  instanceid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoData::unsafe_arena_release_instanceid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoData.InstanceId)
  
  ::service_layer::SLBgplsTopoInstanceId* temp = instanceid_;
  instanceid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoData::_internal_mutable_instanceid() {
  
  if (instanceid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoInstanceId>(GetArenaForAllocation());
    instanceid_ = p;
  }
  return instanceid_;
}
inline ::service_layer::SLBgplsTopoInstanceId* SLBgplsTopoData::mutable_instanceid() {
  ::service_layer::SLBgplsTopoInstanceId* _msg = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoData.InstanceId)
  return _msg;
}
inline void SLBgplsTopoData::set_allocated_instanceid(::service_layer::SLBgplsTopoInstanceId* instanceid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete instanceid_;
  }
  if (instanceid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoInstanceId>::GetOwningArena(instanceid);
    if (message_arena != submessage_arena) {
      instanceid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instanceid, submessage_arena);
    }
    
  } else {
    
  }
  instanceid_ = instanceid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoData.InstanceId)
}

// .service_layer.SLBgplsTopoProtocol Protocol = 2;
inline void SLBgplsTopoData::clear_protocol() {
  protocol_ = 0;
}
inline ::service_layer::SLBgplsTopoProtocol SLBgplsTopoData::_internal_protocol() const {
  return static_cast< ::service_layer::SLBgplsTopoProtocol >(protocol_);
}
inline ::service_layer::SLBgplsTopoProtocol SLBgplsTopoData::protocol() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.Protocol)
  return _internal_protocol();
}
inline void SLBgplsTopoData::_internal_set_protocol(::service_layer::SLBgplsTopoProtocol value) {
  
  protocol_ = value;
}
inline void SLBgplsTopoData::set_protocol(::service_layer::SLBgplsTopoProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoData.Protocol)
}

// .service_layer.SLBgplsTopoNodeData Node = 3;
inline bool SLBgplsTopoData::_internal_has_node() const {
  return Data_case() == kNode;
}
inline bool SLBgplsTopoData::has_node() const {
  return _internal_has_node();
}
inline void SLBgplsTopoData::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void SLBgplsTopoData::clear_node() {
  if (_internal_has_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Data_.node_;
    }
    clear_has_Data();
  }
}
inline ::service_layer::SLBgplsTopoNodeData* SLBgplsTopoData::release_node() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoData.Node)
  if (_internal_has_node()) {
    clear_has_Data();
      ::service_layer::SLBgplsTopoNodeData* temp = Data_.node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoNodeData& SLBgplsTopoData::_internal_node() const {
  return _internal_has_node()
      ? *Data_.node_
      : reinterpret_cast< ::service_layer::SLBgplsTopoNodeData&>(::service_layer::_SLBgplsTopoNodeData_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNodeData& SLBgplsTopoData::node() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.Node)
  return _internal_node();
}
inline ::service_layer::SLBgplsTopoNodeData* SLBgplsTopoData::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoData.Node)
  if (_internal_has_node()) {
    clear_has_Data();
    ::service_layer::SLBgplsTopoNodeData* temp = Data_.node_;
    Data_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoData::unsafe_arena_set_allocated_node(::service_layer::SLBgplsTopoNodeData* node) {
  clear_Data();
  if (node) {
    set_has_node();
    Data_.node_ = node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoData.Node)
}
inline ::service_layer::SLBgplsTopoNodeData* SLBgplsTopoData::_internal_mutable_node() {
  if (!_internal_has_node()) {
    clear_Data();
    set_has_node();
    Data_.node_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoNodeData >(GetArenaForAllocation());
  }
  return Data_.node_;
}
inline ::service_layer::SLBgplsTopoNodeData* SLBgplsTopoData::mutable_node() {
  ::service_layer::SLBgplsTopoNodeData* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoData.Node)
  return _msg;
}

// .service_layer.SLBgplsTopoLinkData Link = 4;
inline bool SLBgplsTopoData::_internal_has_link() const {
  return Data_case() == kLink;
}
inline bool SLBgplsTopoData::has_link() const {
  return _internal_has_link();
}
inline void SLBgplsTopoData::set_has_link() {
  _oneof_case_[0] = kLink;
}
inline void SLBgplsTopoData::clear_link() {
  if (_internal_has_link()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Data_.link_;
    }
    clear_has_Data();
  }
}
inline ::service_layer::SLBgplsTopoLinkData* SLBgplsTopoData::release_link() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoData.Link)
  if (_internal_has_link()) {
    clear_has_Data();
      ::service_layer::SLBgplsTopoLinkData* temp = Data_.link_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoLinkData& SLBgplsTopoData::_internal_link() const {
  return _internal_has_link()
      ? *Data_.link_
      : reinterpret_cast< ::service_layer::SLBgplsTopoLinkData&>(::service_layer::_SLBgplsTopoLinkData_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkData& SLBgplsTopoData::link() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.Link)
  return _internal_link();
}
inline ::service_layer::SLBgplsTopoLinkData* SLBgplsTopoData::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoData.Link)
  if (_internal_has_link()) {
    clear_has_Data();
    ::service_layer::SLBgplsTopoLinkData* temp = Data_.link_;
    Data_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoData::unsafe_arena_set_allocated_link(::service_layer::SLBgplsTopoLinkData* link) {
  clear_Data();
  if (link) {
    set_has_link();
    Data_.link_ = link;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoData.Link)
}
inline ::service_layer::SLBgplsTopoLinkData* SLBgplsTopoData::_internal_mutable_link() {
  if (!_internal_has_link()) {
    clear_Data();
    set_has_link();
    Data_.link_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoLinkData >(GetArenaForAllocation());
  }
  return Data_.link_;
}
inline ::service_layer::SLBgplsTopoLinkData* SLBgplsTopoData::mutable_link() {
  ::service_layer::SLBgplsTopoLinkData* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoData.Link)
  return _msg;
}

// .service_layer.SLBgplsTopoPrefixData Prefix = 5;
inline bool SLBgplsTopoData::_internal_has_prefix() const {
  return Data_case() == kPrefix;
}
inline bool SLBgplsTopoData::has_prefix() const {
  return _internal_has_prefix();
}
inline void SLBgplsTopoData::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void SLBgplsTopoData::clear_prefix() {
  if (_internal_has_prefix()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Data_.prefix_;
    }
    clear_has_Data();
  }
}
inline ::service_layer::SLBgplsTopoPrefixData* SLBgplsTopoData::release_prefix() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoData.Prefix)
  if (_internal_has_prefix()) {
    clear_has_Data();
      ::service_layer::SLBgplsTopoPrefixData* temp = Data_.prefix_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.prefix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoPrefixData& SLBgplsTopoData::_internal_prefix() const {
  return _internal_has_prefix()
      ? *Data_.prefix_
      : reinterpret_cast< ::service_layer::SLBgplsTopoPrefixData&>(::service_layer::_SLBgplsTopoPrefixData_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixData& SLBgplsTopoData::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.Prefix)
  return _internal_prefix();
}
inline ::service_layer::SLBgplsTopoPrefixData* SLBgplsTopoData::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoData.Prefix)
  if (_internal_has_prefix()) {
    clear_has_Data();
    ::service_layer::SLBgplsTopoPrefixData* temp = Data_.prefix_;
    Data_.prefix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoData::unsafe_arena_set_allocated_prefix(::service_layer::SLBgplsTopoPrefixData* prefix) {
  clear_Data();
  if (prefix) {
    set_has_prefix();
    Data_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoData.Prefix)
}
inline ::service_layer::SLBgplsTopoPrefixData* SLBgplsTopoData::_internal_mutable_prefix() {
  if (!_internal_has_prefix()) {
    clear_Data();
    set_has_prefix();
    Data_.prefix_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoPrefixData >(GetArenaForAllocation());
  }
  return Data_.prefix_;
}
inline ::service_layer::SLBgplsTopoPrefixData* SLBgplsTopoData::mutable_prefix() {
  ::service_layer::SLBgplsTopoPrefixData* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoData.Prefix)
  return _msg;
}

// .service_layer.SLBgplsTopoSrv6SidData Srv6Sid = 6;
inline bool SLBgplsTopoData::_internal_has_srv6sid() const {
  return Data_case() == kSrv6Sid;
}
inline bool SLBgplsTopoData::has_srv6sid() const {
  return _internal_has_srv6sid();
}
inline void SLBgplsTopoData::set_has_srv6sid() {
  _oneof_case_[0] = kSrv6Sid;
}
inline void SLBgplsTopoData::clear_srv6sid() {
  if (_internal_has_srv6sid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Data_.srv6sid_;
    }
    clear_has_Data();
  }
}
inline ::service_layer::SLBgplsTopoSrv6SidData* SLBgplsTopoData::release_srv6sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoData.Srv6Sid)
  if (_internal_has_srv6sid()) {
    clear_has_Data();
      ::service_layer::SLBgplsTopoSrv6SidData* temp = Data_.srv6sid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.srv6sid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoSrv6SidData& SLBgplsTopoData::_internal_srv6sid() const {
  return _internal_has_srv6sid()
      ? *Data_.srv6sid_
      : reinterpret_cast< ::service_layer::SLBgplsTopoSrv6SidData&>(::service_layer::_SLBgplsTopoSrv6SidData_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidData& SLBgplsTopoData::srv6sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.Srv6Sid)
  return _internal_srv6sid();
}
inline ::service_layer::SLBgplsTopoSrv6SidData* SLBgplsTopoData::unsafe_arena_release_srv6sid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoData.Srv6Sid)
  if (_internal_has_srv6sid()) {
    clear_has_Data();
    ::service_layer::SLBgplsTopoSrv6SidData* temp = Data_.srv6sid_;
    Data_.srv6sid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoData::unsafe_arena_set_allocated_srv6sid(::service_layer::SLBgplsTopoSrv6SidData* srv6sid) {
  clear_Data();
  if (srv6sid) {
    set_has_srv6sid();
    Data_.srv6sid_ = srv6sid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoData.Srv6Sid)
}
inline ::service_layer::SLBgplsTopoSrv6SidData* SLBgplsTopoData::_internal_mutable_srv6sid() {
  if (!_internal_has_srv6sid()) {
    clear_Data();
    set_has_srv6sid();
    Data_.srv6sid_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoSrv6SidData >(GetArenaForAllocation());
  }
  return Data_.srv6sid_;
}
inline ::service_layer::SLBgplsTopoSrv6SidData* SLBgplsTopoData::mutable_srv6sid() {
  ::service_layer::SLBgplsTopoSrv6SidData* _msg = _internal_mutable_srv6sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoData.Srv6Sid)
  return _msg;
}

// .service_layer.SLBgplsTopoSrPolicyData SrPolicy = 7;
inline bool SLBgplsTopoData::_internal_has_srpolicy() const {
  return Data_case() == kSrPolicy;
}
inline bool SLBgplsTopoData::has_srpolicy() const {
  return _internal_has_srpolicy();
}
inline void SLBgplsTopoData::set_has_srpolicy() {
  _oneof_case_[0] = kSrPolicy;
}
inline void SLBgplsTopoData::clear_srpolicy() {
  if (_internal_has_srpolicy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Data_.srpolicy_;
    }
    clear_has_Data();
  }
}
inline ::service_layer::SLBgplsTopoSrPolicyData* SLBgplsTopoData::release_srpolicy() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoData.SrPolicy)
  if (_internal_has_srpolicy()) {
    clear_has_Data();
      ::service_layer::SLBgplsTopoSrPolicyData* temp = Data_.srpolicy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.srpolicy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoSrPolicyData& SLBgplsTopoData::_internal_srpolicy() const {
  return _internal_has_srpolicy()
      ? *Data_.srpolicy_
      : reinterpret_cast< ::service_layer::SLBgplsTopoSrPolicyData&>(::service_layer::_SLBgplsTopoSrPolicyData_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicyData& SLBgplsTopoData::srpolicy() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoData.SrPolicy)
  return _internal_srpolicy();
}
inline ::service_layer::SLBgplsTopoSrPolicyData* SLBgplsTopoData::unsafe_arena_release_srpolicy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoData.SrPolicy)
  if (_internal_has_srpolicy()) {
    clear_has_Data();
    ::service_layer::SLBgplsTopoSrPolicyData* temp = Data_.srpolicy_;
    Data_.srpolicy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoData::unsafe_arena_set_allocated_srpolicy(::service_layer::SLBgplsTopoSrPolicyData* srpolicy) {
  clear_Data();
  if (srpolicy) {
    set_has_srpolicy();
    Data_.srpolicy_ = srpolicy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoData.SrPolicy)
}
inline ::service_layer::SLBgplsTopoSrPolicyData* SLBgplsTopoData::_internal_mutable_srpolicy() {
  if (!_internal_has_srpolicy()) {
    clear_Data();
    set_has_srpolicy();
    Data_.srpolicy_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyData >(GetArenaForAllocation());
  }
  return Data_.srpolicy_;
}
inline ::service_layer::SLBgplsTopoSrPolicyData* SLBgplsTopoData::mutable_srpolicy() {
  ::service_layer::SLBgplsTopoSrPolicyData* _msg = _internal_mutable_srpolicy();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoData.SrPolicy)
  return _msg;
}

inline bool SLBgplsTopoData::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void SLBgplsTopoData::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SLBgplsTopoData::DataCase SLBgplsTopoData::Data_case() const {
  return SLBgplsTopoData::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoInstanceId

// uint64 Identifier = 1;
inline void SLBgplsTopoInstanceId::clear_identifier() {
  identifier_ = uint64_t{0u};
}
inline uint64_t SLBgplsTopoInstanceId::_internal_identifier() const {
  return identifier_;
}
inline uint64_t SLBgplsTopoInstanceId::identifier() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoInstanceId.Identifier)
  return _internal_identifier();
}
inline void SLBgplsTopoInstanceId::_internal_set_identifier(uint64_t value) {
  
  identifier_ = value;
}
inline void SLBgplsTopoInstanceId::set_identifier(uint64_t value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoInstanceId.Identifier)
}

// -------------------------------------------------------------------

// SLBgplsTopoNodeData

// .service_layer.SLBgplsTopoNode Node = 1;
inline bool SLBgplsTopoNodeData::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool SLBgplsTopoNodeData::has_node() const {
  return _internal_has_node();
}
inline void SLBgplsTopoNodeData::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoNodeData::_internal_node() const {
  const ::service_layer::SLBgplsTopoNode* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNode&>(
      ::service_layer::_SLBgplsTopoNode_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoNodeData::node() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeData.Node)
  return _internal_node();
}
inline void SLBgplsTopoNodeData::unsafe_arena_set_allocated_node(
    ::service_layer::SLBgplsTopoNode* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeData.Node)
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoNodeData::release_node() {
  
  ::service_layer::SLBgplsTopoNode* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoNodeData::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeData.Node)
  
  ::service_layer::SLBgplsTopoNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoNodeData::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoNodeData::mutable_node() {
  ::service_layer::SLBgplsTopoNode* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeData.Node)
  return _msg;
}
inline void SLBgplsTopoNodeData::set_allocated_node(::service_layer::SLBgplsTopoNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeData.Node)
}

// .service_layer.SLBgplsTopoNodeAttr NodeAttr = 2;
inline bool SLBgplsTopoNodeData::_internal_has_nodeattr() const {
  return this != internal_default_instance() && nodeattr_ != nullptr;
}
inline bool SLBgplsTopoNodeData::has_nodeattr() const {
  return _internal_has_nodeattr();
}
inline void SLBgplsTopoNodeData::clear_nodeattr() {
  if (GetArenaForAllocation() == nullptr && nodeattr_ != nullptr) {
    delete nodeattr_;
  }
  nodeattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNodeAttr& SLBgplsTopoNodeData::_internal_nodeattr() const {
  const ::service_layer::SLBgplsTopoNodeAttr* p = nodeattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNodeAttr&>(
      ::service_layer::_SLBgplsTopoNodeAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNodeAttr& SLBgplsTopoNodeData::nodeattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeData.NodeAttr)
  return _internal_nodeattr();
}
inline void SLBgplsTopoNodeData::unsafe_arena_set_allocated_nodeattr(
    ::service_layer::SLBgplsTopoNodeAttr* nodeattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodeattr_);
  }
  nodeattr_ = nodeattr;
  if (nodeattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeData.NodeAttr)
}
inline ::service_layer::SLBgplsTopoNodeAttr* SLBgplsTopoNodeData::release_nodeattr() {
  
  ::service_layer::SLBgplsTopoNodeAttr* temp = nodeattr_;
  nodeattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNodeAttr* SLBgplsTopoNodeData::unsafe_arena_release_nodeattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeData.NodeAttr)
  
  ::service_layer::SLBgplsTopoNodeAttr* temp = nodeattr_;
  nodeattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNodeAttr* SLBgplsTopoNodeData::_internal_mutable_nodeattr() {
  
  if (nodeattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNodeAttr>(GetArenaForAllocation());
    nodeattr_ = p;
  }
  return nodeattr_;
}
inline ::service_layer::SLBgplsTopoNodeAttr* SLBgplsTopoNodeData::mutable_nodeattr() {
  ::service_layer::SLBgplsTopoNodeAttr* _msg = _internal_mutable_nodeattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeData.NodeAttr)
  return _msg;
}
inline void SLBgplsTopoNodeData::set_allocated_nodeattr(::service_layer::SLBgplsTopoNodeAttr* nodeattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodeattr_;
  }
  if (nodeattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNodeAttr>::GetOwningArena(nodeattr);
    if (message_arena != submessage_arena) {
      nodeattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeattr, submessage_arena);
    }
    
  } else {
    
  }
  nodeattr_ = nodeattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeData.NodeAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkData

// .service_layer.SLBgplsTopoLink Link = 1;
inline bool SLBgplsTopoLinkData::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool SLBgplsTopoLinkData::has_link() const {
  return _internal_has_link();
}
inline void SLBgplsTopoLinkData::clear_link() {
  if (GetArenaForAllocation() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLink& SLBgplsTopoLinkData::_internal_link() const {
  const ::service_layer::SLBgplsTopoLink* p = link_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLink&>(
      ::service_layer::_SLBgplsTopoLink_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLink& SLBgplsTopoLinkData::link() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkData.Link)
  return _internal_link();
}
inline void SLBgplsTopoLinkData::unsafe_arena_set_allocated_link(
    ::service_layer::SLBgplsTopoLink* link) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkData.Link)
}
inline ::service_layer::SLBgplsTopoLink* SLBgplsTopoLinkData::release_link() {
  
  ::service_layer::SLBgplsTopoLink* temp = link_;
  link_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLink* SLBgplsTopoLinkData::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkData.Link)
  
  ::service_layer::SLBgplsTopoLink* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLink* SLBgplsTopoLinkData::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLink>(GetArenaForAllocation());
    link_ = p;
  }
  return link_;
}
inline ::service_layer::SLBgplsTopoLink* SLBgplsTopoLinkData::mutable_link() {
  ::service_layer::SLBgplsTopoLink* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkData.Link)
  return _msg;
}
inline void SLBgplsTopoLinkData::set_allocated_link(::service_layer::SLBgplsTopoLink* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLink>::GetOwningArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkData.Link)
}

// .service_layer.SLBgplsTopoLinkAttr LinkAttr = 2;
inline bool SLBgplsTopoLinkData::_internal_has_linkattr() const {
  return this != internal_default_instance() && linkattr_ != nullptr;
}
inline bool SLBgplsTopoLinkData::has_linkattr() const {
  return _internal_has_linkattr();
}
inline void SLBgplsTopoLinkData::clear_linkattr() {
  if (GetArenaForAllocation() == nullptr && linkattr_ != nullptr) {
    delete linkattr_;
  }
  linkattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkAttr& SLBgplsTopoLinkData::_internal_linkattr() const {
  const ::service_layer::SLBgplsTopoLinkAttr* p = linkattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkAttr&>(
      ::service_layer::_SLBgplsTopoLinkAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkAttr& SLBgplsTopoLinkData::linkattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkData.LinkAttr)
  return _internal_linkattr();
}
inline void SLBgplsTopoLinkData::unsafe_arena_set_allocated_linkattr(
    ::service_layer::SLBgplsTopoLinkAttr* linkattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkattr_);
  }
  linkattr_ = linkattr;
  if (linkattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkData.LinkAttr)
}
inline ::service_layer::SLBgplsTopoLinkAttr* SLBgplsTopoLinkData::release_linkattr() {
  
  ::service_layer::SLBgplsTopoLinkAttr* temp = linkattr_;
  linkattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkAttr* SLBgplsTopoLinkData::unsafe_arena_release_linkattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkData.LinkAttr)
  
  ::service_layer::SLBgplsTopoLinkAttr* temp = linkattr_;
  linkattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkAttr* SLBgplsTopoLinkData::_internal_mutable_linkattr() {
  
  if (linkattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkAttr>(GetArenaForAllocation());
    linkattr_ = p;
  }
  return linkattr_;
}
inline ::service_layer::SLBgplsTopoLinkAttr* SLBgplsTopoLinkData::mutable_linkattr() {
  ::service_layer::SLBgplsTopoLinkAttr* _msg = _internal_mutable_linkattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkData.LinkAttr)
  return _msg;
}
inline void SLBgplsTopoLinkData::set_allocated_linkattr(::service_layer::SLBgplsTopoLinkAttr* linkattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linkattr_;
  }
  if (linkattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkAttr>::GetOwningArena(linkattr);
    if (message_arena != submessage_arena) {
      linkattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkattr, submessage_arena);
    }
    
  } else {
    
  }
  linkattr_ = linkattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkData.LinkAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixData

// .service_layer.SLBgplsTopoPrefix Prefix = 1;
inline bool SLBgplsTopoPrefixData::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool SLBgplsTopoPrefixData::has_prefix() const {
  return _internal_has_prefix();
}
inline void SLBgplsTopoPrefixData::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefix& SLBgplsTopoPrefixData::_internal_prefix() const {
  const ::service_layer::SLBgplsTopoPrefix* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefix&>(
      ::service_layer::_SLBgplsTopoPrefix_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefix& SLBgplsTopoPrefixData::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixData.Prefix)
  return _internal_prefix();
}
inline void SLBgplsTopoPrefixData::unsafe_arena_set_allocated_prefix(
    ::service_layer::SLBgplsTopoPrefix* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixData.Prefix)
}
inline ::service_layer::SLBgplsTopoPrefix* SLBgplsTopoPrefixData::release_prefix() {
  
  ::service_layer::SLBgplsTopoPrefix* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefix* SLBgplsTopoPrefixData::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixData.Prefix)
  
  ::service_layer::SLBgplsTopoPrefix* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefix* SLBgplsTopoPrefixData::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefix>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::service_layer::SLBgplsTopoPrefix* SLBgplsTopoPrefixData::mutable_prefix() {
  ::service_layer::SLBgplsTopoPrefix* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixData.Prefix)
  return _msg;
}
inline void SLBgplsTopoPrefixData::set_allocated_prefix(::service_layer::SLBgplsTopoPrefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefix>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixData.Prefix)
}

// .service_layer.SLBgplsTopoPrefixAttr PrefixAttr = 2;
inline bool SLBgplsTopoPrefixData::_internal_has_prefixattr() const {
  return this != internal_default_instance() && prefixattr_ != nullptr;
}
inline bool SLBgplsTopoPrefixData::has_prefixattr() const {
  return _internal_has_prefixattr();
}
inline void SLBgplsTopoPrefixData::clear_prefixattr() {
  if (GetArenaForAllocation() == nullptr && prefixattr_ != nullptr) {
    delete prefixattr_;
  }
  prefixattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixAttr& SLBgplsTopoPrefixData::_internal_prefixattr() const {
  const ::service_layer::SLBgplsTopoPrefixAttr* p = prefixattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixAttr&>(
      ::service_layer::_SLBgplsTopoPrefixAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixAttr& SLBgplsTopoPrefixData::prefixattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixData.PrefixAttr)
  return _internal_prefixattr();
}
inline void SLBgplsTopoPrefixData::unsafe_arena_set_allocated_prefixattr(
    ::service_layer::SLBgplsTopoPrefixAttr* prefixattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefixattr_);
  }
  prefixattr_ = prefixattr;
  if (prefixattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixData.PrefixAttr)
}
inline ::service_layer::SLBgplsTopoPrefixAttr* SLBgplsTopoPrefixData::release_prefixattr() {
  
  ::service_layer::SLBgplsTopoPrefixAttr* temp = prefixattr_;
  prefixattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixAttr* SLBgplsTopoPrefixData::unsafe_arena_release_prefixattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixData.PrefixAttr)
  
  ::service_layer::SLBgplsTopoPrefixAttr* temp = prefixattr_;
  prefixattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixAttr* SLBgplsTopoPrefixData::_internal_mutable_prefixattr() {
  
  if (prefixattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixAttr>(GetArenaForAllocation());
    prefixattr_ = p;
  }
  return prefixattr_;
}
inline ::service_layer::SLBgplsTopoPrefixAttr* SLBgplsTopoPrefixData::mutable_prefixattr() {
  ::service_layer::SLBgplsTopoPrefixAttr* _msg = _internal_mutable_prefixattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixData.PrefixAttr)
  return _msg;
}
inline void SLBgplsTopoPrefixData::set_allocated_prefixattr(::service_layer::SLBgplsTopoPrefixAttr* prefixattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefixattr_;
  }
  if (prefixattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixAttr>::GetOwningArena(prefixattr);
    if (message_arena != submessage_arena) {
      prefixattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefixattr, submessage_arena);
    }
    
  } else {
    
  }
  prefixattr_ = prefixattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixData.PrefixAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6SidData

// .service_layer.SLBgplsTopoSrv6Sid Srv6Sid = 1;
inline bool SLBgplsTopoSrv6SidData::_internal_has_srv6sid() const {
  return this != internal_default_instance() && srv6sid_ != nullptr;
}
inline bool SLBgplsTopoSrv6SidData::has_srv6sid() const {
  return _internal_has_srv6sid();
}
inline void SLBgplsTopoSrv6SidData::clear_srv6sid() {
  if (GetArenaForAllocation() == nullptr && srv6sid_ != nullptr) {
    delete srv6sid_;
  }
  srv6sid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6Sid& SLBgplsTopoSrv6SidData::_internal_srv6sid() const {
  const ::service_layer::SLBgplsTopoSrv6Sid* p = srv6sid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6Sid&>(
      ::service_layer::_SLBgplsTopoSrv6Sid_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6Sid& SLBgplsTopoSrv6SidData::srv6sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidData.Srv6Sid)
  return _internal_srv6sid();
}
inline void SLBgplsTopoSrv6SidData::unsafe_arena_set_allocated_srv6sid(
    ::service_layer::SLBgplsTopoSrv6Sid* srv6sid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6sid_);
  }
  srv6sid_ = srv6sid;
  if (srv6sid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6SidData.Srv6Sid)
}
inline ::service_layer::SLBgplsTopoSrv6Sid* SLBgplsTopoSrv6SidData::release_srv6sid() {
  
  ::service_layer::SLBgplsTopoSrv6Sid* temp = srv6sid_;
  srv6sid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6Sid* SLBgplsTopoSrv6SidData::unsafe_arena_release_srv6sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6SidData.Srv6Sid)
  
  ::service_layer::SLBgplsTopoSrv6Sid* temp = srv6sid_;
  srv6sid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6Sid* SLBgplsTopoSrv6SidData::_internal_mutable_srv6sid() {
  
  if (srv6sid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6Sid>(GetArenaForAllocation());
    srv6sid_ = p;
  }
  return srv6sid_;
}
inline ::service_layer::SLBgplsTopoSrv6Sid* SLBgplsTopoSrv6SidData::mutable_srv6sid() {
  ::service_layer::SLBgplsTopoSrv6Sid* _msg = _internal_mutable_srv6sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidData.Srv6Sid)
  return _msg;
}
inline void SLBgplsTopoSrv6SidData::set_allocated_srv6sid(::service_layer::SLBgplsTopoSrv6Sid* srv6sid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6sid_;
  }
  if (srv6sid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6Sid>::GetOwningArena(srv6sid);
    if (message_arena != submessage_arena) {
      srv6sid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6sid, submessage_arena);
    }
    
  } else {
    
  }
  srv6sid_ = srv6sid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6SidData.Srv6Sid)
}

// .service_layer.SLBgplsTopoSrv6SidAttr Srv6SidAttr = 2;
inline bool SLBgplsTopoSrv6SidData::_internal_has_srv6sidattr() const {
  return this != internal_default_instance() && srv6sidattr_ != nullptr;
}
inline bool SLBgplsTopoSrv6SidData::has_srv6sidattr() const {
  return _internal_has_srv6sidattr();
}
inline void SLBgplsTopoSrv6SidData::clear_srv6sidattr() {
  if (GetArenaForAllocation() == nullptr && srv6sidattr_ != nullptr) {
    delete srv6sidattr_;
  }
  srv6sidattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidAttr& SLBgplsTopoSrv6SidData::_internal_srv6sidattr() const {
  const ::service_layer::SLBgplsTopoSrv6SidAttr* p = srv6sidattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidAttr&>(
      ::service_layer::_SLBgplsTopoSrv6SidAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidAttr& SLBgplsTopoSrv6SidData::srv6sidattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidData.Srv6SidAttr)
  return _internal_srv6sidattr();
}
inline void SLBgplsTopoSrv6SidData::unsafe_arena_set_allocated_srv6sidattr(
    ::service_layer::SLBgplsTopoSrv6SidAttr* srv6sidattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6sidattr_);
  }
  srv6sidattr_ = srv6sidattr;
  if (srv6sidattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6SidData.Srv6SidAttr)
}
inline ::service_layer::SLBgplsTopoSrv6SidAttr* SLBgplsTopoSrv6SidData::release_srv6sidattr() {
  
  ::service_layer::SLBgplsTopoSrv6SidAttr* temp = srv6sidattr_;
  srv6sidattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidAttr* SLBgplsTopoSrv6SidData::unsafe_arena_release_srv6sidattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6SidData.Srv6SidAttr)
  
  ::service_layer::SLBgplsTopoSrv6SidAttr* temp = srv6sidattr_;
  srv6sidattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidAttr* SLBgplsTopoSrv6SidData::_internal_mutable_srv6sidattr() {
  
  if (srv6sidattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidAttr>(GetArenaForAllocation());
    srv6sidattr_ = p;
  }
  return srv6sidattr_;
}
inline ::service_layer::SLBgplsTopoSrv6SidAttr* SLBgplsTopoSrv6SidData::mutable_srv6sidattr() {
  ::service_layer::SLBgplsTopoSrv6SidAttr* _msg = _internal_mutable_srv6sidattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidData.Srv6SidAttr)
  return _msg;
}
inline void SLBgplsTopoSrv6SidData::set_allocated_srv6sidattr(::service_layer::SLBgplsTopoSrv6SidAttr* srv6sidattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6sidattr_;
  }
  if (srv6sidattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidAttr>::GetOwningArena(srv6sidattr);
    if (message_arena != submessage_arena) {
      srv6sidattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6sidattr, submessage_arena);
    }
    
  } else {
    
  }
  srv6sidattr_ = srv6sidattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6SidData.Srv6SidAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicyData

// .service_layer.SLBgplsTopoSrPolicy SrPolicy = 1;
inline bool SLBgplsTopoSrPolicyData::_internal_has_srpolicy() const {
  return this != internal_default_instance() && srpolicy_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyData::has_srpolicy() const {
  return _internal_has_srpolicy();
}
inline void SLBgplsTopoSrPolicyData::clear_srpolicy() {
  if (GetArenaForAllocation() == nullptr && srpolicy_ != nullptr) {
    delete srpolicy_;
  }
  srpolicy_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrPolicy& SLBgplsTopoSrPolicyData::_internal_srpolicy() const {
  const ::service_layer::SLBgplsTopoSrPolicy* p = srpolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrPolicy&>(
      ::service_layer::_SLBgplsTopoSrPolicy_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicy& SLBgplsTopoSrPolicyData::srpolicy() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyData.SrPolicy)
  return _internal_srpolicy();
}
inline void SLBgplsTopoSrPolicyData::unsafe_arena_set_allocated_srpolicy(
    ::service_layer::SLBgplsTopoSrPolicy* srpolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srpolicy_);
  }
  srpolicy_ = srpolicy;
  if (srpolicy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyData.SrPolicy)
}
inline ::service_layer::SLBgplsTopoSrPolicy* SLBgplsTopoSrPolicyData::release_srpolicy() {
  
  ::service_layer::SLBgplsTopoSrPolicy* temp = srpolicy_;
  srpolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicy* SLBgplsTopoSrPolicyData::unsafe_arena_release_srpolicy() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyData.SrPolicy)
  
  ::service_layer::SLBgplsTopoSrPolicy* temp = srpolicy_;
  srpolicy_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicy* SLBgplsTopoSrPolicyData::_internal_mutable_srpolicy() {
  
  if (srpolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicy>(GetArenaForAllocation());
    srpolicy_ = p;
  }
  return srpolicy_;
}
inline ::service_layer::SLBgplsTopoSrPolicy* SLBgplsTopoSrPolicyData::mutable_srpolicy() {
  ::service_layer::SLBgplsTopoSrPolicy* _msg = _internal_mutable_srpolicy();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyData.SrPolicy)
  return _msg;
}
inline void SLBgplsTopoSrPolicyData::set_allocated_srpolicy(::service_layer::SLBgplsTopoSrPolicy* srpolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srpolicy_;
  }
  if (srpolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicy>::GetOwningArena(srpolicy);
    if (message_arena != submessage_arena) {
      srpolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicy, submessage_arena);
    }
    
  } else {
    
  }
  srpolicy_ = srpolicy;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyData.SrPolicy)
}

// .service_layer.SLBgplsTopoSrPolicyAttr SrPolicyAttr = 2;
inline bool SLBgplsTopoSrPolicyData::_internal_has_srpolicyattr() const {
  return this != internal_default_instance() && srpolicyattr_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyData::has_srpolicyattr() const {
  return _internal_has_srpolicyattr();
}
inline void SLBgplsTopoSrPolicyData::clear_srpolicyattr() {
  if (GetArenaForAllocation() == nullptr && srpolicyattr_ != nullptr) {
    delete srpolicyattr_;
  }
  srpolicyattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrPolicyAttr& SLBgplsTopoSrPolicyData::_internal_srpolicyattr() const {
  const ::service_layer::SLBgplsTopoSrPolicyAttr* p = srpolicyattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrPolicyAttr&>(
      ::service_layer::_SLBgplsTopoSrPolicyAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicyAttr& SLBgplsTopoSrPolicyData::srpolicyattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyData.SrPolicyAttr)
  return _internal_srpolicyattr();
}
inline void SLBgplsTopoSrPolicyData::unsafe_arena_set_allocated_srpolicyattr(
    ::service_layer::SLBgplsTopoSrPolicyAttr* srpolicyattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srpolicyattr_);
  }
  srpolicyattr_ = srpolicyattr;
  if (srpolicyattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyData.SrPolicyAttr)
}
inline ::service_layer::SLBgplsTopoSrPolicyAttr* SLBgplsTopoSrPolicyData::release_srpolicyattr() {
  
  ::service_layer::SLBgplsTopoSrPolicyAttr* temp = srpolicyattr_;
  srpolicyattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyAttr* SLBgplsTopoSrPolicyData::unsafe_arena_release_srpolicyattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyData.SrPolicyAttr)
  
  ::service_layer::SLBgplsTopoSrPolicyAttr* temp = srpolicyattr_;
  srpolicyattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyAttr* SLBgplsTopoSrPolicyData::_internal_mutable_srpolicyattr() {
  
  if (srpolicyattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyAttr>(GetArenaForAllocation());
    srpolicyattr_ = p;
  }
  return srpolicyattr_;
}
inline ::service_layer::SLBgplsTopoSrPolicyAttr* SLBgplsTopoSrPolicyData::mutable_srpolicyattr() {
  ::service_layer::SLBgplsTopoSrPolicyAttr* _msg = _internal_mutable_srpolicyattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyData.SrPolicyAttr)
  return _msg;
}
inline void SLBgplsTopoSrPolicyData::set_allocated_srpolicyattr(::service_layer::SLBgplsTopoSrPolicyAttr* srpolicyattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srpolicyattr_;
  }
  if (srpolicyattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicyAttr>::GetOwningArena(srpolicyattr);
    if (message_arena != submessage_arena) {
      srpolicyattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicyattr, submessage_arena);
    }
    
  } else {
    
  }
  srpolicyattr_ = srpolicyattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyData.SrPolicyAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoNode

// uint32 Asn = 1;
inline void SLBgplsTopoNode::clear_asn() {
  asn_ = 0u;
}
inline uint32_t SLBgplsTopoNode::_internal_asn() const {
  return asn_;
}
inline uint32_t SLBgplsTopoNode::asn() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNode.Asn)
  return _internal_asn();
}
inline void SLBgplsTopoNode::_internal_set_asn(uint32_t value) {
  
  asn_ = value;
}
inline void SLBgplsTopoNode::set_asn(uint32_t value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNode.Asn)
}

// .service_layer.SLBgplsTopoOspfNodeId OspfNodeId = 2;
inline bool SLBgplsTopoNode::_internal_has_ospfnodeid() const {
  return NodeId_case() == kOspfNodeId;
}
inline bool SLBgplsTopoNode::has_ospfnodeid() const {
  return _internal_has_ospfnodeid();
}
inline void SLBgplsTopoNode::set_has_ospfnodeid() {
  _oneof_case_[0] = kOspfNodeId;
}
inline void SLBgplsTopoNode::clear_ospfnodeid() {
  if (_internal_has_ospfnodeid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete NodeId_.ospfnodeid_;
    }
    clear_has_NodeId();
  }
}
inline ::service_layer::SLBgplsTopoOspfNodeId* SLBgplsTopoNode::release_ospfnodeid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNode.OspfNodeId)
  if (_internal_has_ospfnodeid()) {
    clear_has_NodeId();
      ::service_layer::SLBgplsTopoOspfNodeId* temp = NodeId_.ospfnodeid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    NodeId_.ospfnodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoOspfNodeId& SLBgplsTopoNode::_internal_ospfnodeid() const {
  return _internal_has_ospfnodeid()
      ? *NodeId_.ospfnodeid_
      : reinterpret_cast< ::service_layer::SLBgplsTopoOspfNodeId&>(::service_layer::_SLBgplsTopoOspfNodeId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoOspfNodeId& SLBgplsTopoNode::ospfnodeid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNode.OspfNodeId)
  return _internal_ospfnodeid();
}
inline ::service_layer::SLBgplsTopoOspfNodeId* SLBgplsTopoNode::unsafe_arena_release_ospfnodeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNode.OspfNodeId)
  if (_internal_has_ospfnodeid()) {
    clear_has_NodeId();
    ::service_layer::SLBgplsTopoOspfNodeId* temp = NodeId_.ospfnodeid_;
    NodeId_.ospfnodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNode::unsafe_arena_set_allocated_ospfnodeid(::service_layer::SLBgplsTopoOspfNodeId* ospfnodeid) {
  clear_NodeId();
  if (ospfnodeid) {
    set_has_ospfnodeid();
    NodeId_.ospfnodeid_ = ospfnodeid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNode.OspfNodeId)
}
inline ::service_layer::SLBgplsTopoOspfNodeId* SLBgplsTopoNode::_internal_mutable_ospfnodeid() {
  if (!_internal_has_ospfnodeid()) {
    clear_NodeId();
    set_has_ospfnodeid();
    NodeId_.ospfnodeid_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoOspfNodeId >(GetArenaForAllocation());
  }
  return NodeId_.ospfnodeid_;
}
inline ::service_layer::SLBgplsTopoOspfNodeId* SLBgplsTopoNode::mutable_ospfnodeid() {
  ::service_layer::SLBgplsTopoOspfNodeId* _msg = _internal_mutable_ospfnodeid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNode.OspfNodeId)
  return _msg;
}

// .service_layer.SLBgplsTopoOspfv3NodeId Ospfv3NodeId = 3;
inline bool SLBgplsTopoNode::_internal_has_ospfv3nodeid() const {
  return NodeId_case() == kOspfv3NodeId;
}
inline bool SLBgplsTopoNode::has_ospfv3nodeid() const {
  return _internal_has_ospfv3nodeid();
}
inline void SLBgplsTopoNode::set_has_ospfv3nodeid() {
  _oneof_case_[0] = kOspfv3NodeId;
}
inline void SLBgplsTopoNode::clear_ospfv3nodeid() {
  if (_internal_has_ospfv3nodeid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete NodeId_.ospfv3nodeid_;
    }
    clear_has_NodeId();
  }
}
inline ::service_layer::SLBgplsTopoOspfv3NodeId* SLBgplsTopoNode::release_ospfv3nodeid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNode.Ospfv3NodeId)
  if (_internal_has_ospfv3nodeid()) {
    clear_has_NodeId();
      ::service_layer::SLBgplsTopoOspfv3NodeId* temp = NodeId_.ospfv3nodeid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    NodeId_.ospfv3nodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoOspfv3NodeId& SLBgplsTopoNode::_internal_ospfv3nodeid() const {
  return _internal_has_ospfv3nodeid()
      ? *NodeId_.ospfv3nodeid_
      : reinterpret_cast< ::service_layer::SLBgplsTopoOspfv3NodeId&>(::service_layer::_SLBgplsTopoOspfv3NodeId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoOspfv3NodeId& SLBgplsTopoNode::ospfv3nodeid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNode.Ospfv3NodeId)
  return _internal_ospfv3nodeid();
}
inline ::service_layer::SLBgplsTopoOspfv3NodeId* SLBgplsTopoNode::unsafe_arena_release_ospfv3nodeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNode.Ospfv3NodeId)
  if (_internal_has_ospfv3nodeid()) {
    clear_has_NodeId();
    ::service_layer::SLBgplsTopoOspfv3NodeId* temp = NodeId_.ospfv3nodeid_;
    NodeId_.ospfv3nodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNode::unsafe_arena_set_allocated_ospfv3nodeid(::service_layer::SLBgplsTopoOspfv3NodeId* ospfv3nodeid) {
  clear_NodeId();
  if (ospfv3nodeid) {
    set_has_ospfv3nodeid();
    NodeId_.ospfv3nodeid_ = ospfv3nodeid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNode.Ospfv3NodeId)
}
inline ::service_layer::SLBgplsTopoOspfv3NodeId* SLBgplsTopoNode::_internal_mutable_ospfv3nodeid() {
  if (!_internal_has_ospfv3nodeid()) {
    clear_NodeId();
    set_has_ospfv3nodeid();
    NodeId_.ospfv3nodeid_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoOspfv3NodeId >(GetArenaForAllocation());
  }
  return NodeId_.ospfv3nodeid_;
}
inline ::service_layer::SLBgplsTopoOspfv3NodeId* SLBgplsTopoNode::mutable_ospfv3nodeid() {
  ::service_layer::SLBgplsTopoOspfv3NodeId* _msg = _internal_mutable_ospfv3nodeid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNode.Ospfv3NodeId)
  return _msg;
}

// .service_layer.SLBgplsTopoIsisNodeId IsisNodeId = 4;
inline bool SLBgplsTopoNode::_internal_has_isisnodeid() const {
  return NodeId_case() == kIsisNodeId;
}
inline bool SLBgplsTopoNode::has_isisnodeid() const {
  return _internal_has_isisnodeid();
}
inline void SLBgplsTopoNode::set_has_isisnodeid() {
  _oneof_case_[0] = kIsisNodeId;
}
inline void SLBgplsTopoNode::clear_isisnodeid() {
  if (_internal_has_isisnodeid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete NodeId_.isisnodeid_;
    }
    clear_has_NodeId();
  }
}
inline ::service_layer::SLBgplsTopoIsisNodeId* SLBgplsTopoNode::release_isisnodeid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNode.IsisNodeId)
  if (_internal_has_isisnodeid()) {
    clear_has_NodeId();
      ::service_layer::SLBgplsTopoIsisNodeId* temp = NodeId_.isisnodeid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    NodeId_.isisnodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoIsisNodeId& SLBgplsTopoNode::_internal_isisnodeid() const {
  return _internal_has_isisnodeid()
      ? *NodeId_.isisnodeid_
      : reinterpret_cast< ::service_layer::SLBgplsTopoIsisNodeId&>(::service_layer::_SLBgplsTopoIsisNodeId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoIsisNodeId& SLBgplsTopoNode::isisnodeid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNode.IsisNodeId)
  return _internal_isisnodeid();
}
inline ::service_layer::SLBgplsTopoIsisNodeId* SLBgplsTopoNode::unsafe_arena_release_isisnodeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNode.IsisNodeId)
  if (_internal_has_isisnodeid()) {
    clear_has_NodeId();
    ::service_layer::SLBgplsTopoIsisNodeId* temp = NodeId_.isisnodeid_;
    NodeId_.isisnodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNode::unsafe_arena_set_allocated_isisnodeid(::service_layer::SLBgplsTopoIsisNodeId* isisnodeid) {
  clear_NodeId();
  if (isisnodeid) {
    set_has_isisnodeid();
    NodeId_.isisnodeid_ = isisnodeid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNode.IsisNodeId)
}
inline ::service_layer::SLBgplsTopoIsisNodeId* SLBgplsTopoNode::_internal_mutable_isisnodeid() {
  if (!_internal_has_isisnodeid()) {
    clear_NodeId();
    set_has_isisnodeid();
    NodeId_.isisnodeid_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoIsisNodeId >(GetArenaForAllocation());
  }
  return NodeId_.isisnodeid_;
}
inline ::service_layer::SLBgplsTopoIsisNodeId* SLBgplsTopoNode::mutable_isisnodeid() {
  ::service_layer::SLBgplsTopoIsisNodeId* _msg = _internal_mutable_isisnodeid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNode.IsisNodeId)
  return _msg;
}

// .service_layer.SLBgplsTopoBgpNodeId BgpNodeId = 5;
inline bool SLBgplsTopoNode::_internal_has_bgpnodeid() const {
  return NodeId_case() == kBgpNodeId;
}
inline bool SLBgplsTopoNode::has_bgpnodeid() const {
  return _internal_has_bgpnodeid();
}
inline void SLBgplsTopoNode::set_has_bgpnodeid() {
  _oneof_case_[0] = kBgpNodeId;
}
inline void SLBgplsTopoNode::clear_bgpnodeid() {
  if (_internal_has_bgpnodeid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete NodeId_.bgpnodeid_;
    }
    clear_has_NodeId();
  }
}
inline ::service_layer::SLBgplsTopoBgpNodeId* SLBgplsTopoNode::release_bgpnodeid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNode.BgpNodeId)
  if (_internal_has_bgpnodeid()) {
    clear_has_NodeId();
      ::service_layer::SLBgplsTopoBgpNodeId* temp = NodeId_.bgpnodeid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    NodeId_.bgpnodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoBgpNodeId& SLBgplsTopoNode::_internal_bgpnodeid() const {
  return _internal_has_bgpnodeid()
      ? *NodeId_.bgpnodeid_
      : reinterpret_cast< ::service_layer::SLBgplsTopoBgpNodeId&>(::service_layer::_SLBgplsTopoBgpNodeId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoBgpNodeId& SLBgplsTopoNode::bgpnodeid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNode.BgpNodeId)
  return _internal_bgpnodeid();
}
inline ::service_layer::SLBgplsTopoBgpNodeId* SLBgplsTopoNode::unsafe_arena_release_bgpnodeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNode.BgpNodeId)
  if (_internal_has_bgpnodeid()) {
    clear_has_NodeId();
    ::service_layer::SLBgplsTopoBgpNodeId* temp = NodeId_.bgpnodeid_;
    NodeId_.bgpnodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNode::unsafe_arena_set_allocated_bgpnodeid(::service_layer::SLBgplsTopoBgpNodeId* bgpnodeid) {
  clear_NodeId();
  if (bgpnodeid) {
    set_has_bgpnodeid();
    NodeId_.bgpnodeid_ = bgpnodeid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNode.BgpNodeId)
}
inline ::service_layer::SLBgplsTopoBgpNodeId* SLBgplsTopoNode::_internal_mutable_bgpnodeid() {
  if (!_internal_has_bgpnodeid()) {
    clear_NodeId();
    set_has_bgpnodeid();
    NodeId_.bgpnodeid_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoBgpNodeId >(GetArenaForAllocation());
  }
  return NodeId_.bgpnodeid_;
}
inline ::service_layer::SLBgplsTopoBgpNodeId* SLBgplsTopoNode::mutable_bgpnodeid() {
  ::service_layer::SLBgplsTopoBgpNodeId* _msg = _internal_mutable_bgpnodeid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNode.BgpNodeId)
  return _msg;
}

// .service_layer.SLBgplsTopoSrPolicyNodeId SrPolicyNodeId = 6;
inline bool SLBgplsTopoNode::_internal_has_srpolicynodeid() const {
  return NodeId_case() == kSrPolicyNodeId;
}
inline bool SLBgplsTopoNode::has_srpolicynodeid() const {
  return _internal_has_srpolicynodeid();
}
inline void SLBgplsTopoNode::set_has_srpolicynodeid() {
  _oneof_case_[0] = kSrPolicyNodeId;
}
inline void SLBgplsTopoNode::clear_srpolicynodeid() {
  if (_internal_has_srpolicynodeid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete NodeId_.srpolicynodeid_;
    }
    clear_has_NodeId();
  }
}
inline ::service_layer::SLBgplsTopoSrPolicyNodeId* SLBgplsTopoNode::release_srpolicynodeid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNode.SrPolicyNodeId)
  if (_internal_has_srpolicynodeid()) {
    clear_has_NodeId();
      ::service_layer::SLBgplsTopoSrPolicyNodeId* temp = NodeId_.srpolicynodeid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    NodeId_.srpolicynodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLBgplsTopoSrPolicyNodeId& SLBgplsTopoNode::_internal_srpolicynodeid() const {
  return _internal_has_srpolicynodeid()
      ? *NodeId_.srpolicynodeid_
      : reinterpret_cast< ::service_layer::SLBgplsTopoSrPolicyNodeId&>(::service_layer::_SLBgplsTopoSrPolicyNodeId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicyNodeId& SLBgplsTopoNode::srpolicynodeid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNode.SrPolicyNodeId)
  return _internal_srpolicynodeid();
}
inline ::service_layer::SLBgplsTopoSrPolicyNodeId* SLBgplsTopoNode::unsafe_arena_release_srpolicynodeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLBgplsTopoNode.SrPolicyNodeId)
  if (_internal_has_srpolicynodeid()) {
    clear_has_NodeId();
    ::service_layer::SLBgplsTopoSrPolicyNodeId* temp = NodeId_.srpolicynodeid_;
    NodeId_.srpolicynodeid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoNode::unsafe_arena_set_allocated_srpolicynodeid(::service_layer::SLBgplsTopoSrPolicyNodeId* srpolicynodeid) {
  clear_NodeId();
  if (srpolicynodeid) {
    set_has_srpolicynodeid();
    NodeId_.srpolicynodeid_ = srpolicynodeid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNode.SrPolicyNodeId)
}
inline ::service_layer::SLBgplsTopoSrPolicyNodeId* SLBgplsTopoNode::_internal_mutable_srpolicynodeid() {
  if (!_internal_has_srpolicynodeid()) {
    clear_NodeId();
    set_has_srpolicynodeid();
    NodeId_.srpolicynodeid_ = CreateMaybeMessage< ::service_layer::SLBgplsTopoSrPolicyNodeId >(GetArenaForAllocation());
  }
  return NodeId_.srpolicynodeid_;
}
inline ::service_layer::SLBgplsTopoSrPolicyNodeId* SLBgplsTopoNode::mutable_srpolicynodeid() {
  ::service_layer::SLBgplsTopoSrPolicyNodeId* _msg = _internal_mutable_srpolicynodeid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNode.SrPolicyNodeId)
  return _msg;
}

inline bool SLBgplsTopoNode::has_NodeId() const {
  return NodeId_case() != NODEID_NOT_SET;
}
inline void SLBgplsTopoNode::clear_has_NodeId() {
  _oneof_case_[0] = NODEID_NOT_SET;
}
inline SLBgplsTopoNode::NodeIdCase SLBgplsTopoNode::NodeId_case() const {
  return SLBgplsTopoNode::NodeIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoLink

// .service_layer.SLBgplsTopoNode LocalNodeDescr = 1;
inline bool SLBgplsTopoLink::_internal_has_localnodedescr() const {
  return this != internal_default_instance() && localnodedescr_ != nullptr;
}
inline bool SLBgplsTopoLink::has_localnodedescr() const {
  return _internal_has_localnodedescr();
}
inline void SLBgplsTopoLink::clear_localnodedescr() {
  if (GetArenaForAllocation() == nullptr && localnodedescr_ != nullptr) {
    delete localnodedescr_;
  }
  localnodedescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoLink::_internal_localnodedescr() const {
  const ::service_layer::SLBgplsTopoNode* p = localnodedescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNode&>(
      ::service_layer::_SLBgplsTopoNode_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoLink::localnodedescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLink.LocalNodeDescr)
  return _internal_localnodedescr();
}
inline void SLBgplsTopoLink::unsafe_arena_set_allocated_localnodedescr(
    ::service_layer::SLBgplsTopoNode* localnodedescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localnodedescr_);
  }
  localnodedescr_ = localnodedescr;
  if (localnodedescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLink.LocalNodeDescr)
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::release_localnodedescr() {
  
  ::service_layer::SLBgplsTopoNode* temp = localnodedescr_;
  localnodedescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::unsafe_arena_release_localnodedescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLink.LocalNodeDescr)
  
  ::service_layer::SLBgplsTopoNode* temp = localnodedescr_;
  localnodedescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::_internal_mutable_localnodedescr() {
  
  if (localnodedescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(GetArenaForAllocation());
    localnodedescr_ = p;
  }
  return localnodedescr_;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::mutable_localnodedescr() {
  ::service_layer::SLBgplsTopoNode* _msg = _internal_mutable_localnodedescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLink.LocalNodeDescr)
  return _msg;
}
inline void SLBgplsTopoLink::set_allocated_localnodedescr(::service_layer::SLBgplsTopoNode* localnodedescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete localnodedescr_;
  }
  if (localnodedescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(localnodedescr);
    if (message_arena != submessage_arena) {
      localnodedescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localnodedescr, submessage_arena);
    }
    
  } else {
    
  }
  localnodedescr_ = localnodedescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLink.LocalNodeDescr)
}

// .service_layer.SLBgplsTopoNode RemoteNodeDescr = 2;
inline bool SLBgplsTopoLink::_internal_has_remotenodedescr() const {
  return this != internal_default_instance() && remotenodedescr_ != nullptr;
}
inline bool SLBgplsTopoLink::has_remotenodedescr() const {
  return _internal_has_remotenodedescr();
}
inline void SLBgplsTopoLink::clear_remotenodedescr() {
  if (GetArenaForAllocation() == nullptr && remotenodedescr_ != nullptr) {
    delete remotenodedescr_;
  }
  remotenodedescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoLink::_internal_remotenodedescr() const {
  const ::service_layer::SLBgplsTopoNode* p = remotenodedescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNode&>(
      ::service_layer::_SLBgplsTopoNode_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoLink::remotenodedescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLink.RemoteNodeDescr)
  return _internal_remotenodedescr();
}
inline void SLBgplsTopoLink::unsafe_arena_set_allocated_remotenodedescr(
    ::service_layer::SLBgplsTopoNode* remotenodedescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remotenodedescr_);
  }
  remotenodedescr_ = remotenodedescr;
  if (remotenodedescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLink.RemoteNodeDescr)
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::release_remotenodedescr() {
  
  ::service_layer::SLBgplsTopoNode* temp = remotenodedescr_;
  remotenodedescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::unsafe_arena_release_remotenodedescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLink.RemoteNodeDescr)
  
  ::service_layer::SLBgplsTopoNode* temp = remotenodedescr_;
  remotenodedescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::_internal_mutable_remotenodedescr() {
  
  if (remotenodedescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(GetArenaForAllocation());
    remotenodedescr_ = p;
  }
  return remotenodedescr_;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoLink::mutable_remotenodedescr() {
  ::service_layer::SLBgplsTopoNode* _msg = _internal_mutable_remotenodedescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLink.RemoteNodeDescr)
  return _msg;
}
inline void SLBgplsTopoLink::set_allocated_remotenodedescr(::service_layer::SLBgplsTopoNode* remotenodedescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remotenodedescr_;
  }
  if (remotenodedescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(remotenodedescr);
    if (message_arena != submessage_arena) {
      remotenodedescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remotenodedescr, submessage_arena);
    }
    
  } else {
    
  }
  remotenodedescr_ = remotenodedescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLink.RemoteNodeDescr)
}

// .service_layer.SLBgplsTopoLinkDescr LinkDescr = 3;
inline bool SLBgplsTopoLink::_internal_has_linkdescr() const {
  return this != internal_default_instance() && linkdescr_ != nullptr;
}
inline bool SLBgplsTopoLink::has_linkdescr() const {
  return _internal_has_linkdescr();
}
inline void SLBgplsTopoLink::clear_linkdescr() {
  if (GetArenaForAllocation() == nullptr && linkdescr_ != nullptr) {
    delete linkdescr_;
  }
  linkdescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkDescr& SLBgplsTopoLink::_internal_linkdescr() const {
  const ::service_layer::SLBgplsTopoLinkDescr* p = linkdescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkDescr&>(
      ::service_layer::_SLBgplsTopoLinkDescr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkDescr& SLBgplsTopoLink::linkdescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLink.LinkDescr)
  return _internal_linkdescr();
}
inline void SLBgplsTopoLink::unsafe_arena_set_allocated_linkdescr(
    ::service_layer::SLBgplsTopoLinkDescr* linkdescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkdescr_);
  }
  linkdescr_ = linkdescr;
  if (linkdescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLink.LinkDescr)
}
inline ::service_layer::SLBgplsTopoLinkDescr* SLBgplsTopoLink::release_linkdescr() {
  
  ::service_layer::SLBgplsTopoLinkDescr* temp = linkdescr_;
  linkdescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkDescr* SLBgplsTopoLink::unsafe_arena_release_linkdescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLink.LinkDescr)
  
  ::service_layer::SLBgplsTopoLinkDescr* temp = linkdescr_;
  linkdescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkDescr* SLBgplsTopoLink::_internal_mutable_linkdescr() {
  
  if (linkdescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkDescr>(GetArenaForAllocation());
    linkdescr_ = p;
  }
  return linkdescr_;
}
inline ::service_layer::SLBgplsTopoLinkDescr* SLBgplsTopoLink::mutable_linkdescr() {
  ::service_layer::SLBgplsTopoLinkDescr* _msg = _internal_mutable_linkdescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLink.LinkDescr)
  return _msg;
}
inline void SLBgplsTopoLink::set_allocated_linkdescr(::service_layer::SLBgplsTopoLinkDescr* linkdescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linkdescr_;
  }
  if (linkdescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkDescr>::GetOwningArena(linkdescr);
    if (message_arena != submessage_arena) {
      linkdescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkdescr, submessage_arena);
    }
    
  } else {
    
  }
  linkdescr_ = linkdescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLink.LinkDescr)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefix

// .service_layer.SLBgplsTopoNode NodeDescr = 1;
inline bool SLBgplsTopoPrefix::_internal_has_nodedescr() const {
  return this != internal_default_instance() && nodedescr_ != nullptr;
}
inline bool SLBgplsTopoPrefix::has_nodedescr() const {
  return _internal_has_nodedescr();
}
inline void SLBgplsTopoPrefix::clear_nodedescr() {
  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoPrefix::_internal_nodedescr() const {
  const ::service_layer::SLBgplsTopoNode* p = nodedescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNode&>(
      ::service_layer::_SLBgplsTopoNode_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoPrefix::nodedescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefix.NodeDescr)
  return _internal_nodedescr();
}
inline void SLBgplsTopoPrefix::unsafe_arena_set_allocated_nodedescr(
    ::service_layer::SLBgplsTopoNode* nodedescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodedescr_);
  }
  nodedescr_ = nodedescr;
  if (nodedescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefix.NodeDescr)
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoPrefix::release_nodedescr() {
  
  ::service_layer::SLBgplsTopoNode* temp = nodedescr_;
  nodedescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoPrefix::unsafe_arena_release_nodedescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefix.NodeDescr)
  
  ::service_layer::SLBgplsTopoNode* temp = nodedescr_;
  nodedescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoPrefix::_internal_mutable_nodedescr() {
  
  if (nodedescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(GetArenaForAllocation());
    nodedescr_ = p;
  }
  return nodedescr_;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoPrefix::mutable_nodedescr() {
  ::service_layer::SLBgplsTopoNode* _msg = _internal_mutable_nodedescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefix.NodeDescr)
  return _msg;
}
inline void SLBgplsTopoPrefix::set_allocated_nodedescr(::service_layer::SLBgplsTopoNode* nodedescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodedescr_;
  }
  if (nodedescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(nodedescr);
    if (message_arena != submessage_arena) {
      nodedescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodedescr, submessage_arena);
    }
    
  } else {
    
  }
  nodedescr_ = nodedescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefix.NodeDescr)
}

// .service_layer.SLBgplsTopoPrefixDescr PrefixDescr = 2;
inline bool SLBgplsTopoPrefix::_internal_has_prefixdescr() const {
  return this != internal_default_instance() && prefixdescr_ != nullptr;
}
inline bool SLBgplsTopoPrefix::has_prefixdescr() const {
  return _internal_has_prefixdescr();
}
inline void SLBgplsTopoPrefix::clear_prefixdescr() {
  if (GetArenaForAllocation() == nullptr && prefixdescr_ != nullptr) {
    delete prefixdescr_;
  }
  prefixdescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixDescr& SLBgplsTopoPrefix::_internal_prefixdescr() const {
  const ::service_layer::SLBgplsTopoPrefixDescr* p = prefixdescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixDescr&>(
      ::service_layer::_SLBgplsTopoPrefixDescr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixDescr& SLBgplsTopoPrefix::prefixdescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefix.PrefixDescr)
  return _internal_prefixdescr();
}
inline void SLBgplsTopoPrefix::unsafe_arena_set_allocated_prefixdescr(
    ::service_layer::SLBgplsTopoPrefixDescr* prefixdescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefixdescr_);
  }
  prefixdescr_ = prefixdescr;
  if (prefixdescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefix.PrefixDescr)
}
inline ::service_layer::SLBgplsTopoPrefixDescr* SLBgplsTopoPrefix::release_prefixdescr() {
  
  ::service_layer::SLBgplsTopoPrefixDescr* temp = prefixdescr_;
  prefixdescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixDescr* SLBgplsTopoPrefix::unsafe_arena_release_prefixdescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefix.PrefixDescr)
  
  ::service_layer::SLBgplsTopoPrefixDescr* temp = prefixdescr_;
  prefixdescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixDescr* SLBgplsTopoPrefix::_internal_mutable_prefixdescr() {
  
  if (prefixdescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixDescr>(GetArenaForAllocation());
    prefixdescr_ = p;
  }
  return prefixdescr_;
}
inline ::service_layer::SLBgplsTopoPrefixDescr* SLBgplsTopoPrefix::mutable_prefixdescr() {
  ::service_layer::SLBgplsTopoPrefixDescr* _msg = _internal_mutable_prefixdescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefix.PrefixDescr)
  return _msg;
}
inline void SLBgplsTopoPrefix::set_allocated_prefixdescr(::service_layer::SLBgplsTopoPrefixDescr* prefixdescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefixdescr_;
  }
  if (prefixdescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixDescr>::GetOwningArena(prefixdescr);
    if (message_arena != submessage_arena) {
      prefixdescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefixdescr, submessage_arena);
    }
    
  } else {
    
  }
  prefixdescr_ = prefixdescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefix.PrefixDescr)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6Sid

// .service_layer.SLBgplsTopoNode NodeDescr = 1;
inline bool SLBgplsTopoSrv6Sid::_internal_has_nodedescr() const {
  return this != internal_default_instance() && nodedescr_ != nullptr;
}
inline bool SLBgplsTopoSrv6Sid::has_nodedescr() const {
  return _internal_has_nodedescr();
}
inline void SLBgplsTopoSrv6Sid::clear_nodedescr() {
  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoSrv6Sid::_internal_nodedescr() const {
  const ::service_layer::SLBgplsTopoNode* p = nodedescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNode&>(
      ::service_layer::_SLBgplsTopoNode_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoSrv6Sid::nodedescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6Sid.NodeDescr)
  return _internal_nodedescr();
}
inline void SLBgplsTopoSrv6Sid::unsafe_arena_set_allocated_nodedescr(
    ::service_layer::SLBgplsTopoNode* nodedescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodedescr_);
  }
  nodedescr_ = nodedescr;
  if (nodedescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6Sid.NodeDescr)
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrv6Sid::release_nodedescr() {
  
  ::service_layer::SLBgplsTopoNode* temp = nodedescr_;
  nodedescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrv6Sid::unsafe_arena_release_nodedescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6Sid.NodeDescr)
  
  ::service_layer::SLBgplsTopoNode* temp = nodedescr_;
  nodedescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrv6Sid::_internal_mutable_nodedescr() {
  
  if (nodedescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(GetArenaForAllocation());
    nodedescr_ = p;
  }
  return nodedescr_;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrv6Sid::mutable_nodedescr() {
  ::service_layer::SLBgplsTopoNode* _msg = _internal_mutable_nodedescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6Sid.NodeDescr)
  return _msg;
}
inline void SLBgplsTopoSrv6Sid::set_allocated_nodedescr(::service_layer::SLBgplsTopoNode* nodedescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodedescr_;
  }
  if (nodedescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(nodedescr);
    if (message_arena != submessage_arena) {
      nodedescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodedescr, submessage_arena);
    }
    
  } else {
    
  }
  nodedescr_ = nodedescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6Sid.NodeDescr)
}

// .service_layer.SLBgplsTopoSrv6SidDescr Srv6SidDescr = 2;
inline bool SLBgplsTopoSrv6Sid::_internal_has_srv6siddescr() const {
  return this != internal_default_instance() && srv6siddescr_ != nullptr;
}
inline bool SLBgplsTopoSrv6Sid::has_srv6siddescr() const {
  return _internal_has_srv6siddescr();
}
inline void SLBgplsTopoSrv6Sid::clear_srv6siddescr() {
  if (GetArenaForAllocation() == nullptr && srv6siddescr_ != nullptr) {
    delete srv6siddescr_;
  }
  srv6siddescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidDescr& SLBgplsTopoSrv6Sid::_internal_srv6siddescr() const {
  const ::service_layer::SLBgplsTopoSrv6SidDescr* p = srv6siddescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidDescr&>(
      ::service_layer::_SLBgplsTopoSrv6SidDescr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidDescr& SLBgplsTopoSrv6Sid::srv6siddescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6Sid.Srv6SidDescr)
  return _internal_srv6siddescr();
}
inline void SLBgplsTopoSrv6Sid::unsafe_arena_set_allocated_srv6siddescr(
    ::service_layer::SLBgplsTopoSrv6SidDescr* srv6siddescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6siddescr_);
  }
  srv6siddescr_ = srv6siddescr;
  if (srv6siddescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6Sid.Srv6SidDescr)
}
inline ::service_layer::SLBgplsTopoSrv6SidDescr* SLBgplsTopoSrv6Sid::release_srv6siddescr() {
  
  ::service_layer::SLBgplsTopoSrv6SidDescr* temp = srv6siddescr_;
  srv6siddescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidDescr* SLBgplsTopoSrv6Sid::unsafe_arena_release_srv6siddescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6Sid.Srv6SidDescr)
  
  ::service_layer::SLBgplsTopoSrv6SidDescr* temp = srv6siddescr_;
  srv6siddescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidDescr* SLBgplsTopoSrv6Sid::_internal_mutable_srv6siddescr() {
  
  if (srv6siddescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidDescr>(GetArenaForAllocation());
    srv6siddescr_ = p;
  }
  return srv6siddescr_;
}
inline ::service_layer::SLBgplsTopoSrv6SidDescr* SLBgplsTopoSrv6Sid::mutable_srv6siddescr() {
  ::service_layer::SLBgplsTopoSrv6SidDescr* _msg = _internal_mutable_srv6siddescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6Sid.Srv6SidDescr)
  return _msg;
}
inline void SLBgplsTopoSrv6Sid::set_allocated_srv6siddescr(::service_layer::SLBgplsTopoSrv6SidDescr* srv6siddescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6siddescr_;
  }
  if (srv6siddescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidDescr>::GetOwningArena(srv6siddescr);
    if (message_arena != submessage_arena) {
      srv6siddescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6siddescr, submessage_arena);
    }
    
  } else {
    
  }
  srv6siddescr_ = srv6siddescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6Sid.Srv6SidDescr)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicy

// .service_layer.SLBgplsTopoNode NodeDescr = 1;
inline bool SLBgplsTopoSrPolicy::_internal_has_nodedescr() const {
  return this != internal_default_instance() && nodedescr_ != nullptr;
}
inline bool SLBgplsTopoSrPolicy::has_nodedescr() const {
  return _internal_has_nodedescr();
}
inline void SLBgplsTopoSrPolicy::clear_nodedescr() {
  if (GetArenaForAllocation() == nullptr && nodedescr_ != nullptr) {
    delete nodedescr_;
  }
  nodedescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoSrPolicy::_internal_nodedescr() const {
  const ::service_layer::SLBgplsTopoNode* p = nodedescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNode&>(
      ::service_layer::_SLBgplsTopoNode_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNode& SLBgplsTopoSrPolicy::nodedescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicy.NodeDescr)
  return _internal_nodedescr();
}
inline void SLBgplsTopoSrPolicy::unsafe_arena_set_allocated_nodedescr(
    ::service_layer::SLBgplsTopoNode* nodedescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodedescr_);
  }
  nodedescr_ = nodedescr;
  if (nodedescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicy.NodeDescr)
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrPolicy::release_nodedescr() {
  
  ::service_layer::SLBgplsTopoNode* temp = nodedescr_;
  nodedescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrPolicy::unsafe_arena_release_nodedescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicy.NodeDescr)
  
  ::service_layer::SLBgplsTopoNode* temp = nodedescr_;
  nodedescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrPolicy::_internal_mutable_nodedescr() {
  
  if (nodedescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNode>(GetArenaForAllocation());
    nodedescr_ = p;
  }
  return nodedescr_;
}
inline ::service_layer::SLBgplsTopoNode* SLBgplsTopoSrPolicy::mutable_nodedescr() {
  ::service_layer::SLBgplsTopoNode* _msg = _internal_mutable_nodedescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicy.NodeDescr)
  return _msg;
}
inline void SLBgplsTopoSrPolicy::set_allocated_nodedescr(::service_layer::SLBgplsTopoNode* nodedescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodedescr_;
  }
  if (nodedescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNode>::GetOwningArena(nodedescr);
    if (message_arena != submessage_arena) {
      nodedescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodedescr, submessage_arena);
    }
    
  } else {
    
  }
  nodedescr_ = nodedescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicy.NodeDescr)
}

// .service_layer.SLBgplsTopoSrPolicyDescr SrPolicyDescr = 2;
inline bool SLBgplsTopoSrPolicy::_internal_has_srpolicydescr() const {
  return this != internal_default_instance() && srpolicydescr_ != nullptr;
}
inline bool SLBgplsTopoSrPolicy::has_srpolicydescr() const {
  return _internal_has_srpolicydescr();
}
inline void SLBgplsTopoSrPolicy::clear_srpolicydescr() {
  if (GetArenaForAllocation() == nullptr && srpolicydescr_ != nullptr) {
    delete srpolicydescr_;
  }
  srpolicydescr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrPolicyDescr& SLBgplsTopoSrPolicy::_internal_srpolicydescr() const {
  const ::service_layer::SLBgplsTopoSrPolicyDescr* p = srpolicydescr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrPolicyDescr&>(
      ::service_layer::_SLBgplsTopoSrPolicyDescr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicyDescr& SLBgplsTopoSrPolicy::srpolicydescr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicy.SrPolicyDescr)
  return _internal_srpolicydescr();
}
inline void SLBgplsTopoSrPolicy::unsafe_arena_set_allocated_srpolicydescr(
    ::service_layer::SLBgplsTopoSrPolicyDescr* srpolicydescr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srpolicydescr_);
  }
  srpolicydescr_ = srpolicydescr;
  if (srpolicydescr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicy.SrPolicyDescr)
}
inline ::service_layer::SLBgplsTopoSrPolicyDescr* SLBgplsTopoSrPolicy::release_srpolicydescr() {
  
  ::service_layer::SLBgplsTopoSrPolicyDescr* temp = srpolicydescr_;
  srpolicydescr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyDescr* SLBgplsTopoSrPolicy::unsafe_arena_release_srpolicydescr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicy.SrPolicyDescr)
  
  ::service_layer::SLBgplsTopoSrPolicyDescr* temp = srpolicydescr_;
  srpolicydescr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyDescr* SLBgplsTopoSrPolicy::_internal_mutable_srpolicydescr() {
  
  if (srpolicydescr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyDescr>(GetArenaForAllocation());
    srpolicydescr_ = p;
  }
  return srpolicydescr_;
}
inline ::service_layer::SLBgplsTopoSrPolicyDescr* SLBgplsTopoSrPolicy::mutable_srpolicydescr() {
  ::service_layer::SLBgplsTopoSrPolicyDescr* _msg = _internal_mutable_srpolicydescr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicy.SrPolicyDescr)
  return _msg;
}
inline void SLBgplsTopoSrPolicy::set_allocated_srpolicydescr(::service_layer::SLBgplsTopoSrPolicyDescr* srpolicydescr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srpolicydescr_;
  }
  if (srpolicydescr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicyDescr>::GetOwningArena(srpolicydescr);
    if (message_arena != submessage_arena) {
      srpolicydescr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicydescr, submessage_arena);
    }
    
  } else {
    
  }
  srpolicydescr_ = srpolicydescr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicy.SrPolicyDescr)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkDescr

// uint32 LocalId = 1;
inline void SLBgplsTopoLinkDescr::clear_localid() {
  localid_ = 0u;
}
inline uint32_t SLBgplsTopoLinkDescr::_internal_localid() const {
  return localid_;
}
inline uint32_t SLBgplsTopoLinkDescr::localid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.LocalId)
  return _internal_localid();
}
inline void SLBgplsTopoLinkDescr::_internal_set_localid(uint32_t value) {
  
  localid_ = value;
}
inline void SLBgplsTopoLinkDescr::set_localid(uint32_t value) {
  _internal_set_localid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkDescr.LocalId)
}

// uint32 RemoteId = 2;
inline void SLBgplsTopoLinkDescr::clear_remoteid() {
  remoteid_ = 0u;
}
inline uint32_t SLBgplsTopoLinkDescr::_internal_remoteid() const {
  return remoteid_;
}
inline uint32_t SLBgplsTopoLinkDescr::remoteid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.RemoteId)
  return _internal_remoteid();
}
inline void SLBgplsTopoLinkDescr::_internal_set_remoteid(uint32_t value) {
  
  remoteid_ = value;
}
inline void SLBgplsTopoLinkDescr::set_remoteid(uint32_t value) {
  _internal_set_remoteid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkDescr.RemoteId)
}

// bytes LocalIpv4 = 3;
inline void SLBgplsTopoLinkDescr::clear_localipv4() {
  localipv4_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkDescr::localipv4() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.LocalIpv4)
  return _internal_localipv4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkDescr::set_localipv4(ArgT0&& arg0, ArgT... args) {
 
 localipv4_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkDescr.LocalIpv4)
}
inline std::string* SLBgplsTopoLinkDescr::mutable_localipv4() {
  std::string* _s = _internal_mutable_localipv4();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkDescr.LocalIpv4)
  return _s;
}
inline const std::string& SLBgplsTopoLinkDescr::_internal_localipv4() const {
  return localipv4_.Get();
}
inline void SLBgplsTopoLinkDescr::_internal_set_localipv4(const std::string& value) {
  
  localipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::_internal_mutable_localipv4() {
  
  return localipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::release_localipv4() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkDescr.LocalIpv4)
  return localipv4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkDescr::set_allocated_localipv4(std::string* localipv4) {
  if (localipv4 != nullptr) {
    
  } else {
    
  }
  localipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localipv4,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localipv4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkDescr.LocalIpv4)
}

// bytes RemoteIpv4 = 4;
inline void SLBgplsTopoLinkDescr::clear_remoteipv4() {
  remoteipv4_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkDescr::remoteipv4() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.RemoteIpv4)
  return _internal_remoteipv4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkDescr::set_remoteipv4(ArgT0&& arg0, ArgT... args) {
 
 remoteipv4_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkDescr.RemoteIpv4)
}
inline std::string* SLBgplsTopoLinkDescr::mutable_remoteipv4() {
  std::string* _s = _internal_mutable_remoteipv4();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkDescr.RemoteIpv4)
  return _s;
}
inline const std::string& SLBgplsTopoLinkDescr::_internal_remoteipv4() const {
  return remoteipv4_.Get();
}
inline void SLBgplsTopoLinkDescr::_internal_set_remoteipv4(const std::string& value) {
  
  remoteipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::_internal_mutable_remoteipv4() {
  
  return remoteipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::release_remoteipv4() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkDescr.RemoteIpv4)
  return remoteipv4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkDescr::set_allocated_remoteipv4(std::string* remoteipv4) {
  if (remoteipv4 != nullptr) {
    
  } else {
    
  }
  remoteipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remoteipv4,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remoteipv4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remoteipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkDescr.RemoteIpv4)
}

// bytes LocalIpv6 = 5;
inline void SLBgplsTopoLinkDescr::clear_localipv6() {
  localipv6_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkDescr::localipv6() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.LocalIpv6)
  return _internal_localipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkDescr::set_localipv6(ArgT0&& arg0, ArgT... args) {
 
 localipv6_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkDescr.LocalIpv6)
}
inline std::string* SLBgplsTopoLinkDescr::mutable_localipv6() {
  std::string* _s = _internal_mutable_localipv6();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkDescr.LocalIpv6)
  return _s;
}
inline const std::string& SLBgplsTopoLinkDescr::_internal_localipv6() const {
  return localipv6_.Get();
}
inline void SLBgplsTopoLinkDescr::_internal_set_localipv6(const std::string& value) {
  
  localipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::_internal_mutable_localipv6() {
  
  return localipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::release_localipv6() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkDescr.LocalIpv6)
  return localipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkDescr::set_allocated_localipv6(std::string* localipv6) {
  if (localipv6 != nullptr) {
    
  } else {
    
  }
  localipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localipv6,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localipv6_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkDescr.LocalIpv6)
}

// bytes RemoteIpv6 = 6;
inline void SLBgplsTopoLinkDescr::clear_remoteipv6() {
  remoteipv6_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkDescr::remoteipv6() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.RemoteIpv6)
  return _internal_remoteipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkDescr::set_remoteipv6(ArgT0&& arg0, ArgT... args) {
 
 remoteipv6_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkDescr.RemoteIpv6)
}
inline std::string* SLBgplsTopoLinkDescr::mutable_remoteipv6() {
  std::string* _s = _internal_mutable_remoteipv6();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkDescr.RemoteIpv6)
  return _s;
}
inline const std::string& SLBgplsTopoLinkDescr::_internal_remoteipv6() const {
  return remoteipv6_.Get();
}
inline void SLBgplsTopoLinkDescr::_internal_set_remoteipv6(const std::string& value) {
  
  remoteipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::_internal_mutable_remoteipv6() {
  
  return remoteipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkDescr::release_remoteipv6() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkDescr.RemoteIpv6)
  return remoteipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkDescr::set_allocated_remoteipv6(std::string* remoteipv6) {
  if (remoteipv6 != nullptr) {
    
  } else {
    
  }
  remoteipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remoteipv6,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remoteipv6_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remoteipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkDescr.RemoteIpv6)
}

// .service_layer.SLBgplsTopoMtId MtId = 7;
inline bool SLBgplsTopoLinkDescr::_internal_has_mtid() const {
  return this != internal_default_instance() && mtid_ != nullptr;
}
inline bool SLBgplsTopoLinkDescr::has_mtid() const {
  return _internal_has_mtid();
}
inline void SLBgplsTopoLinkDescr::clear_mtid() {
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoLinkDescr::_internal_mtid() const {
  const ::service_layer::SLBgplsTopoMtId* p = mtid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoMtId&>(
      ::service_layer::_SLBgplsTopoMtId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoLinkDescr::mtid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkDescr.MtId)
  return _internal_mtid();
}
inline void SLBgplsTopoLinkDescr::unsafe_arena_set_allocated_mtid(
    ::service_layer::SLBgplsTopoMtId* mtid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtid_);
  }
  mtid_ = mtid;
  if (mtid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkDescr.MtId)
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoLinkDescr::release_mtid() {
  
  ::service_layer::SLBgplsTopoMtId* temp = mtid_;
  mtid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoLinkDescr::unsafe_arena_release_mtid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkDescr.MtId)
  
  ::service_layer::SLBgplsTopoMtId* temp = mtid_;
  mtid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoLinkDescr::_internal_mutable_mtid() {
  
  if (mtid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoMtId>(GetArenaForAllocation());
    mtid_ = p;
  }
  return mtid_;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoLinkDescr::mutable_mtid() {
  ::service_layer::SLBgplsTopoMtId* _msg = _internal_mutable_mtid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkDescr.MtId)
  return _msg;
}
inline void SLBgplsTopoLinkDescr::set_allocated_mtid(::service_layer::SLBgplsTopoMtId* mtid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mtid_;
  }
  if (mtid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoMtId>::GetOwningArena(mtid);
    if (message_arena != submessage_arena) {
      mtid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtid, submessage_arena);
    }
    
  } else {
    
  }
  mtid_ = mtid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkDescr.MtId)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixDescr

// .service_layer.SLBgplsTopoMtId MtId = 1;
inline bool SLBgplsTopoPrefixDescr::_internal_has_mtid() const {
  return this != internal_default_instance() && mtid_ != nullptr;
}
inline bool SLBgplsTopoPrefixDescr::has_mtid() const {
  return _internal_has_mtid();
}
inline void SLBgplsTopoPrefixDescr::clear_mtid() {
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoPrefixDescr::_internal_mtid() const {
  const ::service_layer::SLBgplsTopoMtId* p = mtid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoMtId&>(
      ::service_layer::_SLBgplsTopoMtId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoPrefixDescr::mtid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixDescr.MtId)
  return _internal_mtid();
}
inline void SLBgplsTopoPrefixDescr::unsafe_arena_set_allocated_mtid(
    ::service_layer::SLBgplsTopoMtId* mtid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtid_);
  }
  mtid_ = mtid;
  if (mtid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixDescr.MtId)
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoPrefixDescr::release_mtid() {
  
  ::service_layer::SLBgplsTopoMtId* temp = mtid_;
  mtid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoPrefixDescr::unsafe_arena_release_mtid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixDescr.MtId)
  
  ::service_layer::SLBgplsTopoMtId* temp = mtid_;
  mtid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoPrefixDescr::_internal_mutable_mtid() {
  
  if (mtid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoMtId>(GetArenaForAllocation());
    mtid_ = p;
  }
  return mtid_;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoPrefixDescr::mutable_mtid() {
  ::service_layer::SLBgplsTopoMtId* _msg = _internal_mutable_mtid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixDescr.MtId)
  return _msg;
}
inline void SLBgplsTopoPrefixDescr::set_allocated_mtid(::service_layer::SLBgplsTopoMtId* mtid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mtid_;
  }
  if (mtid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoMtId>::GetOwningArena(mtid);
    if (message_arena != submessage_arena) {
      mtid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtid, submessage_arena);
    }
    
  } else {
    
  }
  mtid_ = mtid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixDescr.MtId)
}

// .service_layer.SLBgplsTopoOspfRouteType OspfRouteType = 2;
inline void SLBgplsTopoPrefixDescr::clear_ospfroutetype() {
  ospfroutetype_ = 0;
}
inline ::service_layer::SLBgplsTopoOspfRouteType SLBgplsTopoPrefixDescr::_internal_ospfroutetype() const {
  return static_cast< ::service_layer::SLBgplsTopoOspfRouteType >(ospfroutetype_);
}
inline ::service_layer::SLBgplsTopoOspfRouteType SLBgplsTopoPrefixDescr::ospfroutetype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixDescr.OspfRouteType)
  return _internal_ospfroutetype();
}
inline void SLBgplsTopoPrefixDescr::_internal_set_ospfroutetype(::service_layer::SLBgplsTopoOspfRouteType value) {
  
  ospfroutetype_ = value;
}
inline void SLBgplsTopoPrefixDescr::set_ospfroutetype(::service_layer::SLBgplsTopoOspfRouteType value) {
  _internal_set_ospfroutetype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixDescr.OspfRouteType)
}

// uint32 PrefixLength = 3;
inline void SLBgplsTopoPrefixDescr::clear_prefixlength() {
  prefixlength_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixDescr::_internal_prefixlength() const {
  return prefixlength_;
}
inline uint32_t SLBgplsTopoPrefixDescr::prefixlength() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixDescr.PrefixLength)
  return _internal_prefixlength();
}
inline void SLBgplsTopoPrefixDescr::_internal_set_prefixlength(uint32_t value) {
  
  prefixlength_ = value;
}
inline void SLBgplsTopoPrefixDescr::set_prefixlength(uint32_t value) {
  _internal_set_prefixlength(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixDescr.PrefixLength)
}

// bytes Prefix = 4;
inline void SLBgplsTopoPrefixDescr::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixDescr::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixDescr.Prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixDescr::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 prefix_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixDescr.Prefix)
}
inline std::string* SLBgplsTopoPrefixDescr::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixDescr.Prefix)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixDescr::_internal_prefix() const {
  return prefix_.Get();
}
inline void SLBgplsTopoPrefixDescr::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixDescr::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixDescr::release_prefix() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixDescr.Prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixDescr::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixDescr.Prefix)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6SidDescr

// .service_layer.SLBgplsTopoMtId MtId = 1;
inline bool SLBgplsTopoSrv6SidDescr::_internal_has_mtid() const {
  return this != internal_default_instance() && mtid_ != nullptr;
}
inline bool SLBgplsTopoSrv6SidDescr::has_mtid() const {
  return _internal_has_mtid();
}
inline void SLBgplsTopoSrv6SidDescr::clear_mtid() {
  if (GetArenaForAllocation() == nullptr && mtid_ != nullptr) {
    delete mtid_;
  }
  mtid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoSrv6SidDescr::_internal_mtid() const {
  const ::service_layer::SLBgplsTopoMtId* p = mtid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoMtId&>(
      ::service_layer::_SLBgplsTopoMtId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoSrv6SidDescr::mtid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidDescr.MtId)
  return _internal_mtid();
}
inline void SLBgplsTopoSrv6SidDescr::unsafe_arena_set_allocated_mtid(
    ::service_layer::SLBgplsTopoMtId* mtid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtid_);
  }
  mtid_ = mtid;
  if (mtid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6SidDescr.MtId)
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoSrv6SidDescr::release_mtid() {
  
  ::service_layer::SLBgplsTopoMtId* temp = mtid_;
  mtid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoSrv6SidDescr::unsafe_arena_release_mtid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6SidDescr.MtId)
  
  ::service_layer::SLBgplsTopoMtId* temp = mtid_;
  mtid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoSrv6SidDescr::_internal_mutable_mtid() {
  
  if (mtid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoMtId>(GetArenaForAllocation());
    mtid_ = p;
  }
  return mtid_;
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoSrv6SidDescr::mutable_mtid() {
  ::service_layer::SLBgplsTopoMtId* _msg = _internal_mutable_mtid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidDescr.MtId)
  return _msg;
}
inline void SLBgplsTopoSrv6SidDescr::set_allocated_mtid(::service_layer::SLBgplsTopoMtId* mtid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mtid_;
  }
  if (mtid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoMtId>::GetOwningArena(mtid);
    if (message_arena != submessage_arena) {
      mtid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtid, submessage_arena);
    }
    
  } else {
    
  }
  mtid_ = mtid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6SidDescr.MtId)
}

// bytes Srv6Sid = 2;
inline void SLBgplsTopoSrv6SidDescr::clear_srv6sid() {
  srv6sid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6SidDescr::srv6sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidDescr.Srv6Sid)
  return _internal_srv6sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6SidDescr::set_srv6sid(ArgT0&& arg0, ArgT... args) {
 
 srv6sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6SidDescr.Srv6Sid)
}
inline std::string* SLBgplsTopoSrv6SidDescr::mutable_srv6sid() {
  std::string* _s = _internal_mutable_srv6sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidDescr.Srv6Sid)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6SidDescr::_internal_srv6sid() const {
  return srv6sid_.Get();
}
inline void SLBgplsTopoSrv6SidDescr::_internal_set_srv6sid(const std::string& value) {
  
  srv6sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6SidDescr::_internal_mutable_srv6sid() {
  
  return srv6sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6SidDescr::release_srv6sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6SidDescr.Srv6Sid)
  return srv6sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6SidDescr::set_allocated_srv6sid(std::string* srv6sid) {
  if (srv6sid != nullptr) {
    
  } else {
    
  }
  srv6sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srv6sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (srv6sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    srv6sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6SidDescr.Srv6Sid)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicyDescr

// .service_layer.SLBgplsTopoSrPolicyProtocolOrigin ProtoOrigin = 1;
inline void SLBgplsTopoSrPolicyDescr::clear_protoorigin() {
  protoorigin_ = 0;
}
inline ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin SLBgplsTopoSrPolicyDescr::_internal_protoorigin() const {
  return static_cast< ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin >(protoorigin_);
}
inline ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin SLBgplsTopoSrPolicyDescr::protoorigin() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.ProtoOrigin)
  return _internal_protoorigin();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_protoorigin(::service_layer::SLBgplsTopoSrPolicyProtocolOrigin value) {
  
  protoorigin_ = value;
}
inline void SLBgplsTopoSrPolicyDescr::set_protoorigin(::service_layer::SLBgplsTopoSrPolicyProtocolOrigin value) {
  _internal_set_protoorigin(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.ProtoOrigin)
}

// .service_layer.SLBgplsTopoSrPolicyFlags Flags = 2;
inline bool SLBgplsTopoSrPolicyDescr::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyDescr::has_flags() const {
  return _internal_has_flags();
}
inline void SLBgplsTopoSrPolicyDescr::clear_flags() {
  if (GetArenaForAllocation() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrPolicyFlags& SLBgplsTopoSrPolicyDescr::_internal_flags() const {
  const ::service_layer::SLBgplsTopoSrPolicyFlags* p = flags_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrPolicyFlags&>(
      ::service_layer::_SLBgplsTopoSrPolicyFlags_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicyFlags& SLBgplsTopoSrPolicyDescr::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Flags)
  return _internal_flags();
}
inline void SLBgplsTopoSrPolicyDescr::unsafe_arena_set_allocated_flags(
    ::service_layer::SLBgplsTopoSrPolicyFlags* flags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyDescr.Flags)
}
inline ::service_layer::SLBgplsTopoSrPolicyFlags* SLBgplsTopoSrPolicyDescr::release_flags() {
  
  ::service_layer::SLBgplsTopoSrPolicyFlags* temp = flags_;
  flags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyFlags* SLBgplsTopoSrPolicyDescr::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyDescr.Flags)
  
  ::service_layer::SLBgplsTopoSrPolicyFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyFlags* SLBgplsTopoSrPolicyDescr::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyFlags>(GetArenaForAllocation());
    flags_ = p;
  }
  return flags_;
}
inline ::service_layer::SLBgplsTopoSrPolicyFlags* SLBgplsTopoSrPolicyDescr::mutable_flags() {
  ::service_layer::SLBgplsTopoSrPolicyFlags* _msg = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyDescr.Flags)
  return _msg;
}
inline void SLBgplsTopoSrPolicyDescr::set_allocated_flags(::service_layer::SLBgplsTopoSrPolicyFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicyFlags>::GetOwningArena(flags);
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyDescr.Flags)
}

// bytes Ipv4EndAddr = 3;
inline bool SLBgplsTopoSrPolicyDescr::_internal_has_ipv4endaddr() const {
  return EndpointAddress_case() == kIpv4EndAddr;
}
inline bool SLBgplsTopoSrPolicyDescr::has_ipv4endaddr() const {
  return _internal_has_ipv4endaddr();
}
inline void SLBgplsTopoSrPolicyDescr::set_has_ipv4endaddr() {
  _oneof_case_[0] = kIpv4EndAddr;
}
inline void SLBgplsTopoSrPolicyDescr::clear_ipv4endaddr() {
  if (_internal_has_ipv4endaddr()) {
    EndpointAddress_.ipv4endaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_EndpointAddress();
  }
}
inline const std::string& SLBgplsTopoSrPolicyDescr::ipv4endaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4EndAddr)
  return _internal_ipv4endaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrPolicyDescr::set_ipv4endaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4endaddr()) {
    clear_EndpointAddress();
    set_has_ipv4endaddr();
    EndpointAddress_.ipv4endaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EndpointAddress_.ipv4endaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4EndAddr)
}
inline std::string* SLBgplsTopoSrPolicyDescr::mutable_ipv4endaddr() {
  std::string* _s = _internal_mutable_ipv4endaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4EndAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyDescr::_internal_ipv4endaddr() const {
  if (_internal_has_ipv4endaddr()) {
    return EndpointAddress_.ipv4endaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_ipv4endaddr(const std::string& value) {
  if (!_internal_has_ipv4endaddr()) {
    clear_EndpointAddress();
    set_has_ipv4endaddr();
    EndpointAddress_.ipv4endaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EndpointAddress_.ipv4endaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::_internal_mutable_ipv4endaddr() {
  if (!_internal_has_ipv4endaddr()) {
    clear_EndpointAddress();
    set_has_ipv4endaddr();
    EndpointAddress_.ipv4endaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return EndpointAddress_.ipv4endaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::release_ipv4endaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4EndAddr)
  if (_internal_has_ipv4endaddr()) {
    clear_has_EndpointAddress();
    return EndpointAddress_.ipv4endaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrPolicyDescr::set_allocated_ipv4endaddr(std::string* ipv4endaddr) {
  if (has_EndpointAddress()) {
    clear_EndpointAddress();
  }
  if (ipv4endaddr != nullptr) {
    set_has_ipv4endaddr();
    EndpointAddress_.ipv4endaddr_.UnsafeSetDefault(ipv4endaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4endaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4EndAddr)
}

// bytes Ipv6EndAddr = 4;
inline bool SLBgplsTopoSrPolicyDescr::_internal_has_ipv6endaddr() const {
  return EndpointAddress_case() == kIpv6EndAddr;
}
inline bool SLBgplsTopoSrPolicyDescr::has_ipv6endaddr() const {
  return _internal_has_ipv6endaddr();
}
inline void SLBgplsTopoSrPolicyDescr::set_has_ipv6endaddr() {
  _oneof_case_[0] = kIpv6EndAddr;
}
inline void SLBgplsTopoSrPolicyDescr::clear_ipv6endaddr() {
  if (_internal_has_ipv6endaddr()) {
    EndpointAddress_.ipv6endaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_EndpointAddress();
  }
}
inline const std::string& SLBgplsTopoSrPolicyDescr::ipv6endaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6EndAddr)
  return _internal_ipv6endaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrPolicyDescr::set_ipv6endaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6endaddr()) {
    clear_EndpointAddress();
    set_has_ipv6endaddr();
    EndpointAddress_.ipv6endaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EndpointAddress_.ipv6endaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6EndAddr)
}
inline std::string* SLBgplsTopoSrPolicyDescr::mutable_ipv6endaddr() {
  std::string* _s = _internal_mutable_ipv6endaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6EndAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyDescr::_internal_ipv6endaddr() const {
  if (_internal_has_ipv6endaddr()) {
    return EndpointAddress_.ipv6endaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_ipv6endaddr(const std::string& value) {
  if (!_internal_has_ipv6endaddr()) {
    clear_EndpointAddress();
    set_has_ipv6endaddr();
    EndpointAddress_.ipv6endaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EndpointAddress_.ipv6endaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::_internal_mutable_ipv6endaddr() {
  if (!_internal_has_ipv6endaddr()) {
    clear_EndpointAddress();
    set_has_ipv6endaddr();
    EndpointAddress_.ipv6endaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return EndpointAddress_.ipv6endaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::release_ipv6endaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6EndAddr)
  if (_internal_has_ipv6endaddr()) {
    clear_has_EndpointAddress();
    return EndpointAddress_.ipv6endaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrPolicyDescr::set_allocated_ipv6endaddr(std::string* ipv6endaddr) {
  if (has_EndpointAddress()) {
    clear_EndpointAddress();
  }
  if (ipv6endaddr != nullptr) {
    set_has_ipv6endaddr();
    EndpointAddress_.ipv6endaddr_.UnsafeSetDefault(ipv6endaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6endaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6EndAddr)
}

// uint32 Color = 5;
inline void SLBgplsTopoSrPolicyDescr::clear_color() {
  color_ = 0u;
}
inline uint32_t SLBgplsTopoSrPolicyDescr::_internal_color() const {
  return color_;
}
inline uint32_t SLBgplsTopoSrPolicyDescr::color() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Color)
  return _internal_color();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_color(uint32_t value) {
  
  color_ = value;
}
inline void SLBgplsTopoSrPolicyDescr::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.Color)
}

// uint32 OriginAsn = 6;
inline void SLBgplsTopoSrPolicyDescr::clear_originasn() {
  originasn_ = 0u;
}
inline uint32_t SLBgplsTopoSrPolicyDescr::_internal_originasn() const {
  return originasn_;
}
inline uint32_t SLBgplsTopoSrPolicyDescr::originasn() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.OriginAsn)
  return _internal_originasn();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_originasn(uint32_t value) {
  
  originasn_ = value;
}
inline void SLBgplsTopoSrPolicyDescr::set_originasn(uint32_t value) {
  _internal_set_originasn(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.OriginAsn)
}

// bytes Ipv4OrigAddr = 7;
inline bool SLBgplsTopoSrPolicyDescr::_internal_has_ipv4origaddr() const {
  return OriginatorAddress_case() == kIpv4OrigAddr;
}
inline bool SLBgplsTopoSrPolicyDescr::has_ipv4origaddr() const {
  return _internal_has_ipv4origaddr();
}
inline void SLBgplsTopoSrPolicyDescr::set_has_ipv4origaddr() {
  _oneof_case_[1] = kIpv4OrigAddr;
}
inline void SLBgplsTopoSrPolicyDescr::clear_ipv4origaddr() {
  if (_internal_has_ipv4origaddr()) {
    OriginatorAddress_.ipv4origaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_OriginatorAddress();
  }
}
inline const std::string& SLBgplsTopoSrPolicyDescr::ipv4origaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4OrigAddr)
  return _internal_ipv4origaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrPolicyDescr::set_ipv4origaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4origaddr()) {
    clear_OriginatorAddress();
    set_has_ipv4origaddr();
    OriginatorAddress_.ipv4origaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OriginatorAddress_.ipv4origaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4OrigAddr)
}
inline std::string* SLBgplsTopoSrPolicyDescr::mutable_ipv4origaddr() {
  std::string* _s = _internal_mutable_ipv4origaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4OrigAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyDescr::_internal_ipv4origaddr() const {
  if (_internal_has_ipv4origaddr()) {
    return OriginatorAddress_.ipv4origaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_ipv4origaddr(const std::string& value) {
  if (!_internal_has_ipv4origaddr()) {
    clear_OriginatorAddress();
    set_has_ipv4origaddr();
    OriginatorAddress_.ipv4origaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OriginatorAddress_.ipv4origaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::_internal_mutable_ipv4origaddr() {
  if (!_internal_has_ipv4origaddr()) {
    clear_OriginatorAddress();
    set_has_ipv4origaddr();
    OriginatorAddress_.ipv4origaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return OriginatorAddress_.ipv4origaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::release_ipv4origaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4OrigAddr)
  if (_internal_has_ipv4origaddr()) {
    clear_has_OriginatorAddress();
    return OriginatorAddress_.ipv4origaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrPolicyDescr::set_allocated_ipv4origaddr(std::string* ipv4origaddr) {
  if (has_OriginatorAddress()) {
    clear_OriginatorAddress();
  }
  if (ipv4origaddr != nullptr) {
    set_has_ipv4origaddr();
    OriginatorAddress_.ipv4origaddr_.UnsafeSetDefault(ipv4origaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4origaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyDescr.Ipv4OrigAddr)
}

// bytes Ipv6OrigAddr = 8;
inline bool SLBgplsTopoSrPolicyDescr::_internal_has_ipv6origaddr() const {
  return OriginatorAddress_case() == kIpv6OrigAddr;
}
inline bool SLBgplsTopoSrPolicyDescr::has_ipv6origaddr() const {
  return _internal_has_ipv6origaddr();
}
inline void SLBgplsTopoSrPolicyDescr::set_has_ipv6origaddr() {
  _oneof_case_[1] = kIpv6OrigAddr;
}
inline void SLBgplsTopoSrPolicyDescr::clear_ipv6origaddr() {
  if (_internal_has_ipv6origaddr()) {
    OriginatorAddress_.ipv6origaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_OriginatorAddress();
  }
}
inline const std::string& SLBgplsTopoSrPolicyDescr::ipv6origaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6OrigAddr)
  return _internal_ipv6origaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrPolicyDescr::set_ipv6origaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6origaddr()) {
    clear_OriginatorAddress();
    set_has_ipv6origaddr();
    OriginatorAddress_.ipv6origaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OriginatorAddress_.ipv6origaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6OrigAddr)
}
inline std::string* SLBgplsTopoSrPolicyDescr::mutable_ipv6origaddr() {
  std::string* _s = _internal_mutable_ipv6origaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6OrigAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyDescr::_internal_ipv6origaddr() const {
  if (_internal_has_ipv6origaddr()) {
    return OriginatorAddress_.ipv6origaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_ipv6origaddr(const std::string& value) {
  if (!_internal_has_ipv6origaddr()) {
    clear_OriginatorAddress();
    set_has_ipv6origaddr();
    OriginatorAddress_.ipv6origaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OriginatorAddress_.ipv6origaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::_internal_mutable_ipv6origaddr() {
  if (!_internal_has_ipv6origaddr()) {
    clear_OriginatorAddress();
    set_has_ipv6origaddr();
    OriginatorAddress_.ipv6origaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return OriginatorAddress_.ipv6origaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyDescr::release_ipv6origaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6OrigAddr)
  if (_internal_has_ipv6origaddr()) {
    clear_has_OriginatorAddress();
    return OriginatorAddress_.ipv6origaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrPolicyDescr::set_allocated_ipv6origaddr(std::string* ipv6origaddr) {
  if (has_OriginatorAddress()) {
    clear_OriginatorAddress();
  }
  if (ipv6origaddr != nullptr) {
    set_has_ipv6origaddr();
    OriginatorAddress_.ipv6origaddr_.UnsafeSetDefault(ipv6origaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6origaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyDescr.Ipv6OrigAddr)
}

// uint32 Discriminator = 9;
inline void SLBgplsTopoSrPolicyDescr::clear_discriminator() {
  discriminator_ = 0u;
}
inline uint32_t SLBgplsTopoSrPolicyDescr::_internal_discriminator() const {
  return discriminator_;
}
inline uint32_t SLBgplsTopoSrPolicyDescr::discriminator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyDescr.Discriminator)
  return _internal_discriminator();
}
inline void SLBgplsTopoSrPolicyDescr::_internal_set_discriminator(uint32_t value) {
  
  discriminator_ = value;
}
inline void SLBgplsTopoSrPolicyDescr::set_discriminator(uint32_t value) {
  _internal_set_discriminator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyDescr.Discriminator)
}

inline bool SLBgplsTopoSrPolicyDescr::has_EndpointAddress() const {
  return EndpointAddress_case() != ENDPOINTADDRESS_NOT_SET;
}
inline void SLBgplsTopoSrPolicyDescr::clear_has_EndpointAddress() {
  _oneof_case_[0] = ENDPOINTADDRESS_NOT_SET;
}
inline bool SLBgplsTopoSrPolicyDescr::has_OriginatorAddress() const {
  return OriginatorAddress_case() != ORIGINATORADDRESS_NOT_SET;
}
inline void SLBgplsTopoSrPolicyDescr::clear_has_OriginatorAddress() {
  _oneof_case_[1] = ORIGINATORADDRESS_NOT_SET;
}
inline SLBgplsTopoSrPolicyDescr::EndpointAddressCase SLBgplsTopoSrPolicyDescr::EndpointAddress_case() const {
  return SLBgplsTopoSrPolicyDescr::EndpointAddressCase(_oneof_case_[0]);
}
inline SLBgplsTopoSrPolicyDescr::OriginatorAddressCase SLBgplsTopoSrPolicyDescr::OriginatorAddress_case() const {
  return SLBgplsTopoSrPolicyDescr::OriginatorAddressCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SLBgplsTopoOspfNodeId

// uint32 AreaId = 1;
inline void SLBgplsTopoOspfNodeId::clear_areaid() {
  areaid_ = 0u;
}
inline uint32_t SLBgplsTopoOspfNodeId::_internal_areaid() const {
  return areaid_;
}
inline uint32_t SLBgplsTopoOspfNodeId::areaid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfNodeId.AreaId)
  return _internal_areaid();
}
inline void SLBgplsTopoOspfNodeId::_internal_set_areaid(uint32_t value) {
  
  areaid_ = value;
}
inline void SLBgplsTopoOspfNodeId::set_areaid(uint32_t value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfNodeId.AreaId)
}

// uint32 IsAsScoped = 2;
inline void SLBgplsTopoOspfNodeId::clear_isasscoped() {
  isasscoped_ = 0u;
}
inline uint32_t SLBgplsTopoOspfNodeId::_internal_isasscoped() const {
  return isasscoped_;
}
inline uint32_t SLBgplsTopoOspfNodeId::isasscoped() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfNodeId.IsAsScoped)
  return _internal_isasscoped();
}
inline void SLBgplsTopoOspfNodeId::_internal_set_isasscoped(uint32_t value) {
  
  isasscoped_ = value;
}
inline void SLBgplsTopoOspfNodeId::set_isasscoped(uint32_t value) {
  _internal_set_isasscoped(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfNodeId.IsAsScoped)
}

// bytes RouterId = 3;
inline void SLBgplsTopoOspfNodeId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoOspfNodeId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfNodeId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoOspfNodeId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfNodeId.RouterId)
}
inline std::string* SLBgplsTopoOspfNodeId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoOspfNodeId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoOspfNodeId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoOspfNodeId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoOspfNodeId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoOspfNodeId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoOspfNodeId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoOspfNodeId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoOspfNodeId.RouterId)
}

// bytes DrIdentifier = 4;
inline void SLBgplsTopoOspfNodeId::clear_dridentifier() {
  dridentifier_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoOspfNodeId::dridentifier() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfNodeId.DrIdentifier)
  return _internal_dridentifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoOspfNodeId::set_dridentifier(ArgT0&& arg0, ArgT... args) {
 
 dridentifier_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfNodeId.DrIdentifier)
}
inline std::string* SLBgplsTopoOspfNodeId::mutable_dridentifier() {
  std::string* _s = _internal_mutable_dridentifier();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoOspfNodeId.DrIdentifier)
  return _s;
}
inline const std::string& SLBgplsTopoOspfNodeId::_internal_dridentifier() const {
  return dridentifier_.Get();
}
inline void SLBgplsTopoOspfNodeId::_internal_set_dridentifier(const std::string& value) {
  
  dridentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoOspfNodeId::_internal_mutable_dridentifier() {
  
  return dridentifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoOspfNodeId::release_dridentifier() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoOspfNodeId.DrIdentifier)
  return dridentifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoOspfNodeId::set_allocated_dridentifier(std::string* dridentifier) {
  if (dridentifier != nullptr) {
    
  } else {
    
  }
  dridentifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dridentifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dridentifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dridentifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoOspfNodeId.DrIdentifier)
}

// -------------------------------------------------------------------

// SLBgplsTopoOspfv3NodeId

// uint32 AreaId = 1;
inline void SLBgplsTopoOspfv3NodeId::clear_areaid() {
  areaid_ = 0u;
}
inline uint32_t SLBgplsTopoOspfv3NodeId::_internal_areaid() const {
  return areaid_;
}
inline uint32_t SLBgplsTopoOspfv3NodeId::areaid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfv3NodeId.AreaId)
  return _internal_areaid();
}
inline void SLBgplsTopoOspfv3NodeId::_internal_set_areaid(uint32_t value) {
  
  areaid_ = value;
}
inline void SLBgplsTopoOspfv3NodeId::set_areaid(uint32_t value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfv3NodeId.AreaId)
}

// uint32 AsScoped = 2;
inline void SLBgplsTopoOspfv3NodeId::clear_asscoped() {
  asscoped_ = 0u;
}
inline uint32_t SLBgplsTopoOspfv3NodeId::_internal_asscoped() const {
  return asscoped_;
}
inline uint32_t SLBgplsTopoOspfv3NodeId::asscoped() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfv3NodeId.AsScoped)
  return _internal_asscoped();
}
inline void SLBgplsTopoOspfv3NodeId::_internal_set_asscoped(uint32_t value) {
  
  asscoped_ = value;
}
inline void SLBgplsTopoOspfv3NodeId::set_asscoped(uint32_t value) {
  _internal_set_asscoped(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfv3NodeId.AsScoped)
}

// bytes RouterId = 3;
inline void SLBgplsTopoOspfv3NodeId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoOspfv3NodeId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfv3NodeId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoOspfv3NodeId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfv3NodeId.RouterId)
}
inline std::string* SLBgplsTopoOspfv3NodeId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoOspfv3NodeId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoOspfv3NodeId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoOspfv3NodeId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoOspfv3NodeId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoOspfv3NodeId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoOspfv3NodeId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoOspfv3NodeId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoOspfv3NodeId.RouterId)
}

// uint32 DrIdentifier = 4;
inline void SLBgplsTopoOspfv3NodeId::clear_dridentifier() {
  dridentifier_ = 0u;
}
inline uint32_t SLBgplsTopoOspfv3NodeId::_internal_dridentifier() const {
  return dridentifier_;
}
inline uint32_t SLBgplsTopoOspfv3NodeId::dridentifier() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoOspfv3NodeId.DrIdentifier)
  return _internal_dridentifier();
}
inline void SLBgplsTopoOspfv3NodeId::_internal_set_dridentifier(uint32_t value) {
  
  dridentifier_ = value;
}
inline void SLBgplsTopoOspfv3NodeId::set_dridentifier(uint32_t value) {
  _internal_set_dridentifier(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoOspfv3NodeId.DrIdentifier)
}

// -------------------------------------------------------------------

// SLBgplsTopoIsisNodeId

// bytes SystemId = 1;
inline void SLBgplsTopoIsisNodeId::clear_systemid() {
  systemid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoIsisNodeId::systemid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoIsisNodeId.SystemId)
  return _internal_systemid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoIsisNodeId::set_systemid(ArgT0&& arg0, ArgT... args) {
 
 systemid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoIsisNodeId.SystemId)
}
inline std::string* SLBgplsTopoIsisNodeId::mutable_systemid() {
  std::string* _s = _internal_mutable_systemid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoIsisNodeId.SystemId)
  return _s;
}
inline const std::string& SLBgplsTopoIsisNodeId::_internal_systemid() const {
  return systemid_.Get();
}
inline void SLBgplsTopoIsisNodeId::_internal_set_systemid(const std::string& value) {
  
  systemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoIsisNodeId::_internal_mutable_systemid() {
  
  return systemid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoIsisNodeId::release_systemid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoIsisNodeId.SystemId)
  return systemid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoIsisNodeId::set_allocated_systemid(std::string* systemid) {
  if (systemid != nullptr) {
    
  } else {
    
  }
  systemid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (systemid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    systemid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoIsisNodeId.SystemId)
}

// bytes PsnId = 2;
inline void SLBgplsTopoIsisNodeId::clear_psnid() {
  psnid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoIsisNodeId::psnid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoIsisNodeId.PsnId)
  return _internal_psnid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoIsisNodeId::set_psnid(ArgT0&& arg0, ArgT... args) {
 
 psnid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoIsisNodeId.PsnId)
}
inline std::string* SLBgplsTopoIsisNodeId::mutable_psnid() {
  std::string* _s = _internal_mutable_psnid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoIsisNodeId.PsnId)
  return _s;
}
inline const std::string& SLBgplsTopoIsisNodeId::_internal_psnid() const {
  return psnid_.Get();
}
inline void SLBgplsTopoIsisNodeId::_internal_set_psnid(const std::string& value) {
  
  psnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoIsisNodeId::_internal_mutable_psnid() {
  
  return psnid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoIsisNodeId::release_psnid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoIsisNodeId.PsnId)
  return psnid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoIsisNodeId::set_allocated_psnid(std::string* psnid) {
  if (psnid != nullptr) {
    
  } else {
    
  }
  psnid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psnid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (psnid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    psnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoIsisNodeId.PsnId)
}

// -------------------------------------------------------------------

// SLBgplsTopoBgpNodeId

// bytes RouterId = 1;
inline void SLBgplsTopoBgpNodeId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpNodeId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpNodeId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpNodeId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpNodeId.RouterId)
}
inline std::string* SLBgplsTopoBgpNodeId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpNodeId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoBgpNodeId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoBgpNodeId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpNodeId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpNodeId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpNodeId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpNodeId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpNodeId.RouterId)
}

// uint32 MemberAsn = 2;
inline void SLBgplsTopoBgpNodeId::clear_memberasn() {
  memberasn_ = 0u;
}
inline uint32_t SLBgplsTopoBgpNodeId::_internal_memberasn() const {
  return memberasn_;
}
inline uint32_t SLBgplsTopoBgpNodeId::memberasn() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpNodeId.MemberAsn)
  return _internal_memberasn();
}
inline void SLBgplsTopoBgpNodeId::_internal_set_memberasn(uint32_t value) {
  
  memberasn_ = value;
}
inline void SLBgplsTopoBgpNodeId::set_memberasn(uint32_t value) {
  _internal_set_memberasn(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpNodeId.MemberAsn)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicyNodeId

// bytes RouterId = 1;
inline void SLBgplsTopoSrPolicyNodeId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrPolicyNodeId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyNodeId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrPolicyNodeId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyNodeId.RouterId)
}
inline std::string* SLBgplsTopoSrPolicyNodeId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyNodeId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyNodeId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoSrPolicyNodeId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyNodeId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyNodeId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyNodeId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrPolicyNodeId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyNodeId.RouterId)
}

// uint32 MemberAsn = 2;
inline void SLBgplsTopoSrPolicyNodeId::clear_memberasn() {
  memberasn_ = 0u;
}
inline uint32_t SLBgplsTopoSrPolicyNodeId::_internal_memberasn() const {
  return memberasn_;
}
inline uint32_t SLBgplsTopoSrPolicyNodeId::memberasn() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyNodeId.MemberAsn)
  return _internal_memberasn();
}
inline void SLBgplsTopoSrPolicyNodeId::_internal_set_memberasn(uint32_t value) {
  
  memberasn_ = value;
}
inline void SLBgplsTopoSrPolicyNodeId::set_memberasn(uint32_t value) {
  _internal_set_memberasn(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyNodeId.MemberAsn)
}

// bytes Ipv4RouterId = 3;
inline void SLBgplsTopoSrPolicyNodeId::clear_ipv4routerid() {
  ipv4routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrPolicyNodeId::ipv4routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv4RouterId)
  return _internal_ipv4routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrPolicyNodeId::set_ipv4routerid(ArgT0&& arg0, ArgT... args) {
 
 ipv4routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv4RouterId)
}
inline std::string* SLBgplsTopoSrPolicyNodeId::mutable_ipv4routerid() {
  std::string* _s = _internal_mutable_ipv4routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv4RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyNodeId::_internal_ipv4routerid() const {
  return ipv4routerid_.Get();
}
inline void SLBgplsTopoSrPolicyNodeId::_internal_set_ipv4routerid(const std::string& value) {
  
  ipv4routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyNodeId::_internal_mutable_ipv4routerid() {
  
  return ipv4routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyNodeId::release_ipv4routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv4RouterId)
  return ipv4routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrPolicyNodeId::set_allocated_ipv4routerid(std::string* ipv4routerid) {
  if (ipv4routerid != nullptr) {
    
  } else {
    
  }
  ipv4routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv4routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv4routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv4RouterId)
}

// bytes Ipv6RouterId = 4;
inline void SLBgplsTopoSrPolicyNodeId::clear_ipv6routerid() {
  ipv6routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrPolicyNodeId::ipv6routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv6RouterId)
  return _internal_ipv6routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrPolicyNodeId::set_ipv6routerid(ArgT0&& arg0, ArgT... args) {
 
 ipv6routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv6RouterId)
}
inline std::string* SLBgplsTopoSrPolicyNodeId::mutable_ipv6routerid() {
  std::string* _s = _internal_mutable_ipv6routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv6RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyNodeId::_internal_ipv6routerid() const {
  return ipv6routerid_.Get();
}
inline void SLBgplsTopoSrPolicyNodeId::_internal_set_ipv6routerid(const std::string& value) {
  
  ipv6routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyNodeId::_internal_mutable_ipv6routerid() {
  
  return ipv6routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyNodeId::release_ipv6routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv6RouterId)
  return ipv6routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrPolicyNodeId::set_allocated_ipv6routerid(std::string* ipv6routerid) {
  if (ipv6routerid != nullptr) {
    
  } else {
    
  }
  ipv6routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyNodeId.Ipv6RouterId)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicyFlags

// bytes Flags = 1;
inline void SLBgplsTopoSrPolicyFlags::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrPolicyFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyFlags.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrPolicyFlags::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyFlags.Flags)
}
inline std::string* SLBgplsTopoSrPolicyFlags::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyFlags.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyFlags::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrPolicyFlags::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyFlags::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyFlags::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyFlags.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrPolicyFlags::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyFlags.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoNodeAttr

// repeated .service_layer.SLBgplsTopoMtId MtId = 1;
inline int SLBgplsTopoNodeAttr::_internal_mtid_size() const {
  return mtid_.size();
}
inline int SLBgplsTopoNodeAttr::mtid_size() const {
  return _internal_mtid_size();
}
inline void SLBgplsTopoNodeAttr::clear_mtid() {
  mtid_.Clear();
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoNodeAttr::mutable_mtid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.MtId)
  return mtid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoMtId >*
SLBgplsTopoNodeAttr::mutable_mtid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.MtId)
  return &mtid_;
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoNodeAttr::_internal_mtid(int index) const {
  return mtid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoMtId& SLBgplsTopoNodeAttr::mtid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.MtId)
  return _internal_mtid(index);
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoNodeAttr::_internal_add_mtid() {
  return mtid_.Add();
}
inline ::service_layer::SLBgplsTopoMtId* SLBgplsTopoNodeAttr::add_mtid() {
  ::service_layer::SLBgplsTopoMtId* _add = _internal_add_mtid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.MtId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoMtId >&
SLBgplsTopoNodeAttr::mtid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.MtId)
  return mtid_;
}

// repeated .service_layer.SLBgplsTopoNodeMsd NodeMsd = 2;
inline int SLBgplsTopoNodeAttr::_internal_nodemsd_size() const {
  return nodemsd_.size();
}
inline int SLBgplsTopoNodeAttr::nodemsd_size() const {
  return _internal_nodemsd_size();
}
inline void SLBgplsTopoNodeAttr::clear_nodemsd() {
  nodemsd_.Clear();
}
inline ::service_layer::SLBgplsTopoNodeMsd* SLBgplsTopoNodeAttr::mutable_nodemsd(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.NodeMsd)
  return nodemsd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNodeMsd >*
SLBgplsTopoNodeAttr::mutable_nodemsd() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.NodeMsd)
  return &nodemsd_;
}
inline const ::service_layer::SLBgplsTopoNodeMsd& SLBgplsTopoNodeAttr::_internal_nodemsd(int index) const {
  return nodemsd_.Get(index);
}
inline const ::service_layer::SLBgplsTopoNodeMsd& SLBgplsTopoNodeAttr::nodemsd(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.NodeMsd)
  return _internal_nodemsd(index);
}
inline ::service_layer::SLBgplsTopoNodeMsd* SLBgplsTopoNodeAttr::_internal_add_nodemsd() {
  return nodemsd_.Add();
}
inline ::service_layer::SLBgplsTopoNodeMsd* SLBgplsTopoNodeAttr::add_nodemsd() {
  ::service_layer::SLBgplsTopoNodeMsd* _add = _internal_add_nodemsd();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.NodeMsd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoNodeMsd >&
SLBgplsTopoNodeAttr::nodemsd() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.NodeMsd)
  return nodemsd_;
}

// .service_layer.SLBgplsTopoNodeFlagBits NodeFlagBits = 3;
inline bool SLBgplsTopoNodeAttr::_internal_has_nodeflagbits() const {
  return this != internal_default_instance() && nodeflagbits_ != nullptr;
}
inline bool SLBgplsTopoNodeAttr::has_nodeflagbits() const {
  return _internal_has_nodeflagbits();
}
inline void SLBgplsTopoNodeAttr::clear_nodeflagbits() {
  if (GetArenaForAllocation() == nullptr && nodeflagbits_ != nullptr) {
    delete nodeflagbits_;
  }
  nodeflagbits_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNodeFlagBits& SLBgplsTopoNodeAttr::_internal_nodeflagbits() const {
  const ::service_layer::SLBgplsTopoNodeFlagBits* p = nodeflagbits_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNodeFlagBits&>(
      ::service_layer::_SLBgplsTopoNodeFlagBits_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNodeFlagBits& SLBgplsTopoNodeAttr::nodeflagbits() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.NodeFlagBits)
  return _internal_nodeflagbits();
}
inline void SLBgplsTopoNodeAttr::unsafe_arena_set_allocated_nodeflagbits(
    ::service_layer::SLBgplsTopoNodeFlagBits* nodeflagbits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodeflagbits_);
  }
  nodeflagbits_ = nodeflagbits;
  if (nodeflagbits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeAttr.NodeFlagBits)
}
inline ::service_layer::SLBgplsTopoNodeFlagBits* SLBgplsTopoNodeAttr::release_nodeflagbits() {
  
  ::service_layer::SLBgplsTopoNodeFlagBits* temp = nodeflagbits_;
  nodeflagbits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNodeFlagBits* SLBgplsTopoNodeAttr::unsafe_arena_release_nodeflagbits() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeAttr.NodeFlagBits)
  
  ::service_layer::SLBgplsTopoNodeFlagBits* temp = nodeflagbits_;
  nodeflagbits_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNodeFlagBits* SLBgplsTopoNodeAttr::_internal_mutable_nodeflagbits() {
  
  if (nodeflagbits_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNodeFlagBits>(GetArenaForAllocation());
    nodeflagbits_ = p;
  }
  return nodeflagbits_;
}
inline ::service_layer::SLBgplsTopoNodeFlagBits* SLBgplsTopoNodeAttr::mutable_nodeflagbits() {
  ::service_layer::SLBgplsTopoNodeFlagBits* _msg = _internal_mutable_nodeflagbits();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.NodeFlagBits)
  return _msg;
}
inline void SLBgplsTopoNodeAttr::set_allocated_nodeflagbits(::service_layer::SLBgplsTopoNodeFlagBits* nodeflagbits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodeflagbits_;
  }
  if (nodeflagbits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNodeFlagBits>::GetOwningArena(nodeflagbits);
    if (message_arena != submessage_arena) {
      nodeflagbits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeflagbits, submessage_arena);
    }
    
  } else {
    
  }
  nodeflagbits_ = nodeflagbits;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeAttr.NodeFlagBits)
}

// .service_layer.SLBgplsTopoNodeOpaqueAttr OpaqueNodeAttr = 4;
inline bool SLBgplsTopoNodeAttr::_internal_has_opaquenodeattr() const {
  return this != internal_default_instance() && opaquenodeattr_ != nullptr;
}
inline bool SLBgplsTopoNodeAttr::has_opaquenodeattr() const {
  return _internal_has_opaquenodeattr();
}
inline void SLBgplsTopoNodeAttr::clear_opaquenodeattr() {
  if (GetArenaForAllocation() == nullptr && opaquenodeattr_ != nullptr) {
    delete opaquenodeattr_;
  }
  opaquenodeattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoNodeOpaqueAttr& SLBgplsTopoNodeAttr::_internal_opaquenodeattr() const {
  const ::service_layer::SLBgplsTopoNodeOpaqueAttr* p = opaquenodeattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoNodeOpaqueAttr&>(
      ::service_layer::_SLBgplsTopoNodeOpaqueAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoNodeOpaqueAttr& SLBgplsTopoNodeAttr::opaquenodeattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr)
  return _internal_opaquenodeattr();
}
inline void SLBgplsTopoNodeAttr::unsafe_arena_set_allocated_opaquenodeattr(
    ::service_layer::SLBgplsTopoNodeOpaqueAttr* opaquenodeattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opaquenodeattr_);
  }
  opaquenodeattr_ = opaquenodeattr;
  if (opaquenodeattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr)
}
inline ::service_layer::SLBgplsTopoNodeOpaqueAttr* SLBgplsTopoNodeAttr::release_opaquenodeattr() {
  
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* temp = opaquenodeattr_;
  opaquenodeattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoNodeOpaqueAttr* SLBgplsTopoNodeAttr::unsafe_arena_release_opaquenodeattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr)
  
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* temp = opaquenodeattr_;
  opaquenodeattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoNodeOpaqueAttr* SLBgplsTopoNodeAttr::_internal_mutable_opaquenodeattr() {
  
  if (opaquenodeattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoNodeOpaqueAttr>(GetArenaForAllocation());
    opaquenodeattr_ = p;
  }
  return opaquenodeattr_;
}
inline ::service_layer::SLBgplsTopoNodeOpaqueAttr* SLBgplsTopoNodeAttr::mutable_opaquenodeattr() {
  ::service_layer::SLBgplsTopoNodeOpaqueAttr* _msg = _internal_mutable_opaquenodeattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr)
  return _msg;
}
inline void SLBgplsTopoNodeAttr::set_allocated_opaquenodeattr(::service_layer::SLBgplsTopoNodeOpaqueAttr* opaquenodeattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete opaquenodeattr_;
  }
  if (opaquenodeattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoNodeOpaqueAttr>::GetOwningArena(opaquenodeattr);
    if (message_arena != submessage_arena) {
      opaquenodeattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opaquenodeattr, submessage_arena);
    }
    
  } else {
    
  }
  opaquenodeattr_ = opaquenodeattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr)
}

// .service_layer.SLBgplsNodeName NodeName = 5;
inline bool SLBgplsTopoNodeAttr::_internal_has_nodename() const {
  return this != internal_default_instance() && nodename_ != nullptr;
}
inline bool SLBgplsTopoNodeAttr::has_nodename() const {
  return _internal_has_nodename();
}
inline void SLBgplsTopoNodeAttr::clear_nodename() {
  if (GetArenaForAllocation() == nullptr && nodename_ != nullptr) {
    delete nodename_;
  }
  nodename_ = nullptr;
}
inline const ::service_layer::SLBgplsNodeName& SLBgplsTopoNodeAttr::_internal_nodename() const {
  const ::service_layer::SLBgplsNodeName* p = nodename_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsNodeName&>(
      ::service_layer::_SLBgplsNodeName_default_instance_);
}
inline const ::service_layer::SLBgplsNodeName& SLBgplsTopoNodeAttr::nodename() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.NodeName)
  return _internal_nodename();
}
inline void SLBgplsTopoNodeAttr::unsafe_arena_set_allocated_nodename(
    ::service_layer::SLBgplsNodeName* nodename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodename_);
  }
  nodename_ = nodename;
  if (nodename) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeAttr.NodeName)
}
inline ::service_layer::SLBgplsNodeName* SLBgplsTopoNodeAttr::release_nodename() {
  
  ::service_layer::SLBgplsNodeName* temp = nodename_;
  nodename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsNodeName* SLBgplsTopoNodeAttr::unsafe_arena_release_nodename() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeAttr.NodeName)
  
  ::service_layer::SLBgplsNodeName* temp = nodename_;
  nodename_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsNodeName* SLBgplsTopoNodeAttr::_internal_mutable_nodename() {
  
  if (nodename_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsNodeName>(GetArenaForAllocation());
    nodename_ = p;
  }
  return nodename_;
}
inline ::service_layer::SLBgplsNodeName* SLBgplsTopoNodeAttr::mutable_nodename() {
  ::service_layer::SLBgplsNodeName* _msg = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.NodeName)
  return _msg;
}
inline void SLBgplsTopoNodeAttr::set_allocated_nodename(::service_layer::SLBgplsNodeName* nodename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodename_;
  }
  if (nodename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsNodeName>::GetOwningArena(nodename);
    if (message_arena != submessage_arena) {
      nodename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodename, submessage_arena);
    }
    
  } else {
    
  }
  nodename_ = nodename;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeAttr.NodeName)
}

// repeated .service_layer.SLBgplsTopoIsisAreaId IsisAreaId = 6;
inline int SLBgplsTopoNodeAttr::_internal_isisareaid_size() const {
  return isisareaid_.size();
}
inline int SLBgplsTopoNodeAttr::isisareaid_size() const {
  return _internal_isisareaid_size();
}
inline void SLBgplsTopoNodeAttr::clear_isisareaid() {
  isisareaid_.Clear();
}
inline ::service_layer::SLBgplsTopoIsisAreaId* SLBgplsTopoNodeAttr::mutable_isisareaid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.IsisAreaId)
  return isisareaid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoIsisAreaId >*
SLBgplsTopoNodeAttr::mutable_isisareaid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.IsisAreaId)
  return &isisareaid_;
}
inline const ::service_layer::SLBgplsTopoIsisAreaId& SLBgplsTopoNodeAttr::_internal_isisareaid(int index) const {
  return isisareaid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoIsisAreaId& SLBgplsTopoNodeAttr::isisareaid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.IsisAreaId)
  return _internal_isisareaid(index);
}
inline ::service_layer::SLBgplsTopoIsisAreaId* SLBgplsTopoNodeAttr::_internal_add_isisareaid() {
  return isisareaid_.Add();
}
inline ::service_layer::SLBgplsTopoIsisAreaId* SLBgplsTopoNodeAttr::add_isisareaid() {
  ::service_layer::SLBgplsTopoIsisAreaId* _add = _internal_add_isisareaid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.IsisAreaId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoIsisAreaId >&
SLBgplsTopoNodeAttr::isisareaid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.IsisAreaId)
  return isisareaid_;
}

// repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4 = 7;
inline int SLBgplsTopoNodeAttr::_internal_localipv4_size() const {
  return localipv4_.size();
}
inline int SLBgplsTopoNodeAttr::localipv4_size() const {
  return _internal_localipv4_size();
}
inline void SLBgplsTopoNodeAttr::clear_localipv4() {
  localipv4_.Clear();
}
inline ::service_layer::SLBgplsTopoLocalIpv4RouterId* SLBgplsTopoNodeAttr::mutable_localipv4(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.LocalIpv4)
  return localipv4_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >*
SLBgplsTopoNodeAttr::mutable_localipv4() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.LocalIpv4)
  return &localipv4_;
}
inline const ::service_layer::SLBgplsTopoLocalIpv4RouterId& SLBgplsTopoNodeAttr::_internal_localipv4(int index) const {
  return localipv4_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLocalIpv4RouterId& SLBgplsTopoNodeAttr::localipv4(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.LocalIpv4)
  return _internal_localipv4(index);
}
inline ::service_layer::SLBgplsTopoLocalIpv4RouterId* SLBgplsTopoNodeAttr::_internal_add_localipv4() {
  return localipv4_.Add();
}
inline ::service_layer::SLBgplsTopoLocalIpv4RouterId* SLBgplsTopoNodeAttr::add_localipv4() {
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* _add = _internal_add_localipv4();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.LocalIpv4)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >&
SLBgplsTopoNodeAttr::localipv4() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.LocalIpv4)
  return localipv4_;
}

// repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6 = 8;
inline int SLBgplsTopoNodeAttr::_internal_localipv6_size() const {
  return localipv6_.size();
}
inline int SLBgplsTopoNodeAttr::localipv6_size() const {
  return _internal_localipv6_size();
}
inline void SLBgplsTopoNodeAttr::clear_localipv6() {
  localipv6_.Clear();
}
inline ::service_layer::SLBgplsTopoLocalIpv6RouterId* SLBgplsTopoNodeAttr::mutable_localipv6(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.LocalIpv6)
  return localipv6_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >*
SLBgplsTopoNodeAttr::mutable_localipv6() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.LocalIpv6)
  return &localipv6_;
}
inline const ::service_layer::SLBgplsTopoLocalIpv6RouterId& SLBgplsTopoNodeAttr::_internal_localipv6(int index) const {
  return localipv6_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLocalIpv6RouterId& SLBgplsTopoNodeAttr::localipv6(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.LocalIpv6)
  return _internal_localipv6(index);
}
inline ::service_layer::SLBgplsTopoLocalIpv6RouterId* SLBgplsTopoNodeAttr::_internal_add_localipv6() {
  return localipv6_.Add();
}
inline ::service_layer::SLBgplsTopoLocalIpv6RouterId* SLBgplsTopoNodeAttr::add_localipv6() {
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* _add = _internal_add_localipv6();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.LocalIpv6)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >&
SLBgplsTopoNodeAttr::localipv6() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.LocalIpv6)
  return localipv6_;
}

// .service_layer.SLBgplsTopoSrgbIsisFlags SrgbIsisFlags = 9;
inline bool SLBgplsTopoNodeAttr::_internal_has_srgbisisflags() const {
  return this != internal_default_instance() && srgbisisflags_ != nullptr;
}
inline bool SLBgplsTopoNodeAttr::has_srgbisisflags() const {
  return _internal_has_srgbisisflags();
}
inline void SLBgplsTopoNodeAttr::clear_srgbisisflags() {
  if (GetArenaForAllocation() == nullptr && srgbisisflags_ != nullptr) {
    delete srgbisisflags_;
  }
  srgbisisflags_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrgbIsisFlags& SLBgplsTopoNodeAttr::_internal_srgbisisflags() const {
  const ::service_layer::SLBgplsTopoSrgbIsisFlags* p = srgbisisflags_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrgbIsisFlags&>(
      ::service_layer::_SLBgplsTopoSrgbIsisFlags_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrgbIsisFlags& SLBgplsTopoNodeAttr::srgbisisflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags)
  return _internal_srgbisisflags();
}
inline void SLBgplsTopoNodeAttr::unsafe_arena_set_allocated_srgbisisflags(
    ::service_layer::SLBgplsTopoSrgbIsisFlags* srgbisisflags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srgbisisflags_);
  }
  srgbisisflags_ = srgbisisflags;
  if (srgbisisflags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags)
}
inline ::service_layer::SLBgplsTopoSrgbIsisFlags* SLBgplsTopoNodeAttr::release_srgbisisflags() {
  
  ::service_layer::SLBgplsTopoSrgbIsisFlags* temp = srgbisisflags_;
  srgbisisflags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrgbIsisFlags* SLBgplsTopoNodeAttr::unsafe_arena_release_srgbisisflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags)
  
  ::service_layer::SLBgplsTopoSrgbIsisFlags* temp = srgbisisflags_;
  srgbisisflags_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrgbIsisFlags* SLBgplsTopoNodeAttr::_internal_mutable_srgbisisflags() {
  
  if (srgbisisflags_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrgbIsisFlags>(GetArenaForAllocation());
    srgbisisflags_ = p;
  }
  return srgbisisflags_;
}
inline ::service_layer::SLBgplsTopoSrgbIsisFlags* SLBgplsTopoNodeAttr::mutable_srgbisisflags() {
  ::service_layer::SLBgplsTopoSrgbIsisFlags* _msg = _internal_mutable_srgbisisflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags)
  return _msg;
}
inline void SLBgplsTopoNodeAttr::set_allocated_srgbisisflags(::service_layer::SLBgplsTopoSrgbIsisFlags* srgbisisflags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srgbisisflags_;
  }
  if (srgbisisflags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrgbIsisFlags>::GetOwningArena(srgbisisflags);
    if (message_arena != submessage_arena) {
      srgbisisflags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srgbisisflags, submessage_arena);
    }
    
  } else {
    
  }
  srgbisisflags_ = srgbisisflags;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags)
}

// repeated .service_layer.SLBgplsTopoSrgb Srgb = 10;
inline int SLBgplsTopoNodeAttr::_internal_srgb_size() const {
  return srgb_.size();
}
inline int SLBgplsTopoNodeAttr::srgb_size() const {
  return _internal_srgb_size();
}
inline void SLBgplsTopoNodeAttr::clear_srgb() {
  srgb_.Clear();
}
inline ::service_layer::SLBgplsTopoSrgb* SLBgplsTopoNodeAttr::mutable_srgb(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.Srgb)
  return srgb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrgb >*
SLBgplsTopoNodeAttr::mutable_srgb() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.Srgb)
  return &srgb_;
}
inline const ::service_layer::SLBgplsTopoSrgb& SLBgplsTopoNodeAttr::_internal_srgb(int index) const {
  return srgb_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrgb& SLBgplsTopoNodeAttr::srgb(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.Srgb)
  return _internal_srgb(index);
}
inline ::service_layer::SLBgplsTopoSrgb* SLBgplsTopoNodeAttr::_internal_add_srgb() {
  return srgb_.Add();
}
inline ::service_layer::SLBgplsTopoSrgb* SLBgplsTopoNodeAttr::add_srgb() {
  ::service_layer::SLBgplsTopoSrgb* _add = _internal_add_srgb();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.Srgb)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrgb >&
SLBgplsTopoNodeAttr::srgb() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.Srgb)
  return srgb_;
}

// .service_layer.SLBgplsTopoSrAlgorithm SrAlgorithm = 11;
inline bool SLBgplsTopoNodeAttr::_internal_has_sralgorithm() const {
  return this != internal_default_instance() && sralgorithm_ != nullptr;
}
inline bool SLBgplsTopoNodeAttr::has_sralgorithm() const {
  return _internal_has_sralgorithm();
}
inline void SLBgplsTopoNodeAttr::clear_sralgorithm() {
  if (GetArenaForAllocation() == nullptr && sralgorithm_ != nullptr) {
    delete sralgorithm_;
  }
  sralgorithm_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrAlgorithm& SLBgplsTopoNodeAttr::_internal_sralgorithm() const {
  const ::service_layer::SLBgplsTopoSrAlgorithm* p = sralgorithm_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrAlgorithm&>(
      ::service_layer::_SLBgplsTopoSrAlgorithm_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrAlgorithm& SLBgplsTopoNodeAttr::sralgorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.SrAlgorithm)
  return _internal_sralgorithm();
}
inline void SLBgplsTopoNodeAttr::unsafe_arena_set_allocated_sralgorithm(
    ::service_layer::SLBgplsTopoSrAlgorithm* sralgorithm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sralgorithm_);
  }
  sralgorithm_ = sralgorithm;
  if (sralgorithm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeAttr.SrAlgorithm)
}
inline ::service_layer::SLBgplsTopoSrAlgorithm* SLBgplsTopoNodeAttr::release_sralgorithm() {
  
  ::service_layer::SLBgplsTopoSrAlgorithm* temp = sralgorithm_;
  sralgorithm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrAlgorithm* SLBgplsTopoNodeAttr::unsafe_arena_release_sralgorithm() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeAttr.SrAlgorithm)
  
  ::service_layer::SLBgplsTopoSrAlgorithm* temp = sralgorithm_;
  sralgorithm_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrAlgorithm* SLBgplsTopoNodeAttr::_internal_mutable_sralgorithm() {
  
  if (sralgorithm_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrAlgorithm>(GetArenaForAllocation());
    sralgorithm_ = p;
  }
  return sralgorithm_;
}
inline ::service_layer::SLBgplsTopoSrAlgorithm* SLBgplsTopoNodeAttr::mutable_sralgorithm() {
  ::service_layer::SLBgplsTopoSrAlgorithm* _msg = _internal_mutable_sralgorithm();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.SrAlgorithm)
  return _msg;
}
inline void SLBgplsTopoNodeAttr::set_allocated_sralgorithm(::service_layer::SLBgplsTopoSrAlgorithm* sralgorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sralgorithm_;
  }
  if (sralgorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrAlgorithm>::GetOwningArena(sralgorithm);
    if (message_arena != submessage_arena) {
      sralgorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sralgorithm, submessage_arena);
    }
    
  } else {
    
  }
  sralgorithm_ = sralgorithm;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeAttr.SrAlgorithm)
}

// repeated .service_layer.SLBgplsTopoSrlb Srlb = 12;
inline int SLBgplsTopoNodeAttr::_internal_srlb_size() const {
  return srlb_.size();
}
inline int SLBgplsTopoNodeAttr::srlb_size() const {
  return _internal_srlb_size();
}
inline void SLBgplsTopoNodeAttr::clear_srlb() {
  srlb_.Clear();
}
inline ::service_layer::SLBgplsTopoSrlb* SLBgplsTopoNodeAttr::mutable_srlb(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.Srlb)
  return srlb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrlb >*
SLBgplsTopoNodeAttr::mutable_srlb() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.Srlb)
  return &srlb_;
}
inline const ::service_layer::SLBgplsTopoSrlb& SLBgplsTopoNodeAttr::_internal_srlb(int index) const {
  return srlb_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrlb& SLBgplsTopoNodeAttr::srlb(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.Srlb)
  return _internal_srlb(index);
}
inline ::service_layer::SLBgplsTopoSrlb* SLBgplsTopoNodeAttr::_internal_add_srlb() {
  return srlb_.Add();
}
inline ::service_layer::SLBgplsTopoSrlb* SLBgplsTopoNodeAttr::add_srlb() {
  ::service_layer::SLBgplsTopoSrlb* _add = _internal_add_srlb();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.Srlb)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrlb >&
SLBgplsTopoNodeAttr::srlb() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.Srlb)
  return srlb_;
}

// .service_layer.SLBgplsTopoSrv6CapFlags Srv6CapFlags = 13;
inline bool SLBgplsTopoNodeAttr::_internal_has_srv6capflags() const {
  return this != internal_default_instance() && srv6capflags_ != nullptr;
}
inline bool SLBgplsTopoNodeAttr::has_srv6capflags() const {
  return _internal_has_srv6capflags();
}
inline void SLBgplsTopoNodeAttr::clear_srv6capflags() {
  if (GetArenaForAllocation() == nullptr && srv6capflags_ != nullptr) {
    delete srv6capflags_;
  }
  srv6capflags_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6CapFlags& SLBgplsTopoNodeAttr::_internal_srv6capflags() const {
  const ::service_layer::SLBgplsTopoSrv6CapFlags* p = srv6capflags_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6CapFlags&>(
      ::service_layer::_SLBgplsTopoSrv6CapFlags_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6CapFlags& SLBgplsTopoNodeAttr::srv6capflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.Srv6CapFlags)
  return _internal_srv6capflags();
}
inline void SLBgplsTopoNodeAttr::unsafe_arena_set_allocated_srv6capflags(
    ::service_layer::SLBgplsTopoSrv6CapFlags* srv6capflags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6capflags_);
  }
  srv6capflags_ = srv6capflags;
  if (srv6capflags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoNodeAttr.Srv6CapFlags)
}
inline ::service_layer::SLBgplsTopoSrv6CapFlags* SLBgplsTopoNodeAttr::release_srv6capflags() {
  
  ::service_layer::SLBgplsTopoSrv6CapFlags* temp = srv6capflags_;
  srv6capflags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6CapFlags* SLBgplsTopoNodeAttr::unsafe_arena_release_srv6capflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeAttr.Srv6CapFlags)
  
  ::service_layer::SLBgplsTopoSrv6CapFlags* temp = srv6capflags_;
  srv6capflags_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6CapFlags* SLBgplsTopoNodeAttr::_internal_mutable_srv6capflags() {
  
  if (srv6capflags_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6CapFlags>(GetArenaForAllocation());
    srv6capflags_ = p;
  }
  return srv6capflags_;
}
inline ::service_layer::SLBgplsTopoSrv6CapFlags* SLBgplsTopoNodeAttr::mutable_srv6capflags() {
  ::service_layer::SLBgplsTopoSrv6CapFlags* _msg = _internal_mutable_srv6capflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.Srv6CapFlags)
  return _msg;
}
inline void SLBgplsTopoNodeAttr::set_allocated_srv6capflags(::service_layer::SLBgplsTopoSrv6CapFlags* srv6capflags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6capflags_;
  }
  if (srv6capflags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6CapFlags>::GetOwningArena(srv6capflags);
    if (message_arena != submessage_arena) {
      srv6capflags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6capflags, submessage_arena);
    }
    
  } else {
    
  }
  srv6capflags_ = srv6capflags;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeAttr.Srv6CapFlags)
}

// repeated .service_layer.SLBgplsTopoFad Fad = 14;
inline int SLBgplsTopoNodeAttr::_internal_fad_size() const {
  return fad_.size();
}
inline int SLBgplsTopoNodeAttr::fad_size() const {
  return _internal_fad_size();
}
inline void SLBgplsTopoNodeAttr::clear_fad() {
  fad_.Clear();
}
inline ::service_layer::SLBgplsTopoFad* SLBgplsTopoNodeAttr::mutable_fad(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.Fad)
  return fad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoFad >*
SLBgplsTopoNodeAttr::mutable_fad() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.Fad)
  return &fad_;
}
inline const ::service_layer::SLBgplsTopoFad& SLBgplsTopoNodeAttr::_internal_fad(int index) const {
  return fad_.Get(index);
}
inline const ::service_layer::SLBgplsTopoFad& SLBgplsTopoNodeAttr::fad(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.Fad)
  return _internal_fad(index);
}
inline ::service_layer::SLBgplsTopoFad* SLBgplsTopoNodeAttr::_internal_add_fad() {
  return fad_.Add();
}
inline ::service_layer::SLBgplsTopoFad* SLBgplsTopoNodeAttr::add_fad() {
  ::service_layer::SLBgplsTopoFad* _add = _internal_add_fad();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.Fad)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoFad >&
SLBgplsTopoNodeAttr::fad() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.Fad)
  return fad_;
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 15;
inline int SLBgplsTopoNodeAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoNodeAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoNodeAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoNodeAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoNodeAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoNodeAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoNodeAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoNodeAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoNodeAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoNodeAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoNodeAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoNodeAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoNodeAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkAttr

// .service_layer.SLBplsTopoLinkLocRemId LinkLocRemId = 1;
inline bool SLBgplsTopoLinkAttr::_internal_has_linklocremid() const {
  return this != internal_default_instance() && linklocremid_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_linklocremid() const {
  return _internal_has_linklocremid();
}
inline void SLBgplsTopoLinkAttr::clear_linklocremid() {
  if (GetArenaForAllocation() == nullptr && linklocremid_ != nullptr) {
    delete linklocremid_;
  }
  linklocremid_ = nullptr;
}
inline const ::service_layer::SLBplsTopoLinkLocRemId& SLBgplsTopoLinkAttr::_internal_linklocremid() const {
  const ::service_layer::SLBplsTopoLinkLocRemId* p = linklocremid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBplsTopoLinkLocRemId&>(
      ::service_layer::_SLBplsTopoLinkLocRemId_default_instance_);
}
inline const ::service_layer::SLBplsTopoLinkLocRemId& SLBgplsTopoLinkAttr::linklocremid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.LinkLocRemId)
  return _internal_linklocremid();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_linklocremid(
    ::service_layer::SLBplsTopoLinkLocRemId* linklocremid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linklocremid_);
  }
  linklocremid_ = linklocremid;
  if (linklocremid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.LinkLocRemId)
}
inline ::service_layer::SLBplsTopoLinkLocRemId* SLBgplsTopoLinkAttr::release_linklocremid() {
  
  ::service_layer::SLBplsTopoLinkLocRemId* temp = linklocremid_;
  linklocremid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBplsTopoLinkLocRemId* SLBgplsTopoLinkAttr::unsafe_arena_release_linklocremid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.LinkLocRemId)
  
  ::service_layer::SLBplsTopoLinkLocRemId* temp = linklocremid_;
  linklocremid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBplsTopoLinkLocRemId* SLBgplsTopoLinkAttr::_internal_mutable_linklocremid() {
  
  if (linklocremid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBplsTopoLinkLocRemId>(GetArenaForAllocation());
    linklocremid_ = p;
  }
  return linklocremid_;
}
inline ::service_layer::SLBplsTopoLinkLocRemId* SLBgplsTopoLinkAttr::mutable_linklocremid() {
  ::service_layer::SLBplsTopoLinkLocRemId* _msg = _internal_mutable_linklocremid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.LinkLocRemId)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_linklocremid(::service_layer::SLBplsTopoLinkLocRemId* linklocremid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linklocremid_;
  }
  if (linklocremid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBplsTopoLinkLocRemId>::GetOwningArena(linklocremid);
    if (message_arena != submessage_arena) {
      linklocremid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linklocremid, submessage_arena);
    }
    
  } else {
    
  }
  linklocremid_ = linklocremid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.LinkLocRemId)
}

// repeated .service_layer.SLBgplsTopoLinkMsd LinkMsd = 2;
inline int SLBgplsTopoLinkAttr::_internal_linkmsd_size() const {
  return linkmsd_.size();
}
inline int SLBgplsTopoLinkAttr::linkmsd_size() const {
  return _internal_linkmsd_size();
}
inline void SLBgplsTopoLinkAttr::clear_linkmsd() {
  linkmsd_.Clear();
}
inline ::service_layer::SLBgplsTopoLinkMsd* SLBgplsTopoLinkAttr::mutable_linkmsd(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.LinkMsd)
  return linkmsd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkMsd >*
SLBgplsTopoLinkAttr::mutable_linkmsd() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.LinkMsd)
  return &linkmsd_;
}
inline const ::service_layer::SLBgplsTopoLinkMsd& SLBgplsTopoLinkAttr::_internal_linkmsd(int index) const {
  return linkmsd_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLinkMsd& SLBgplsTopoLinkAttr::linkmsd(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.LinkMsd)
  return _internal_linkmsd(index);
}
inline ::service_layer::SLBgplsTopoLinkMsd* SLBgplsTopoLinkAttr::_internal_add_linkmsd() {
  return linkmsd_.Add();
}
inline ::service_layer::SLBgplsTopoLinkMsd* SLBgplsTopoLinkAttr::add_linkmsd() {
  ::service_layer::SLBgplsTopoLinkMsd* _add = _internal_add_linkmsd();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.LinkMsd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkMsd >&
SLBgplsTopoLinkAttr::linkmsd() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.LinkMsd)
  return linkmsd_;
}

// repeated .service_layer.SLBgplsTopoLocalIpv4RouterId LocalIpv4RouterId = 3;
inline int SLBgplsTopoLinkAttr::_internal_localipv4routerid_size() const {
  return localipv4routerid_.size();
}
inline int SLBgplsTopoLinkAttr::localipv4routerid_size() const {
  return _internal_localipv4routerid_size();
}
inline void SLBgplsTopoLinkAttr::clear_localipv4routerid() {
  localipv4routerid_.Clear();
}
inline ::service_layer::SLBgplsTopoLocalIpv4RouterId* SLBgplsTopoLinkAttr::mutable_localipv4routerid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.LocalIpv4RouterId)
  return localipv4routerid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >*
SLBgplsTopoLinkAttr::mutable_localipv4routerid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.LocalIpv4RouterId)
  return &localipv4routerid_;
}
inline const ::service_layer::SLBgplsTopoLocalIpv4RouterId& SLBgplsTopoLinkAttr::_internal_localipv4routerid(int index) const {
  return localipv4routerid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLocalIpv4RouterId& SLBgplsTopoLinkAttr::localipv4routerid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.LocalIpv4RouterId)
  return _internal_localipv4routerid(index);
}
inline ::service_layer::SLBgplsTopoLocalIpv4RouterId* SLBgplsTopoLinkAttr::_internal_add_localipv4routerid() {
  return localipv4routerid_.Add();
}
inline ::service_layer::SLBgplsTopoLocalIpv4RouterId* SLBgplsTopoLinkAttr::add_localipv4routerid() {
  ::service_layer::SLBgplsTopoLocalIpv4RouterId* _add = _internal_add_localipv4routerid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.LocalIpv4RouterId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv4RouterId >&
SLBgplsTopoLinkAttr::localipv4routerid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.LocalIpv4RouterId)
  return localipv4routerid_;
}

// repeated .service_layer.SLBgplsTopoLocalIpv6RouterId LocalIpv6RouterId = 4;
inline int SLBgplsTopoLinkAttr::_internal_localipv6routerid_size() const {
  return localipv6routerid_.size();
}
inline int SLBgplsTopoLinkAttr::localipv6routerid_size() const {
  return _internal_localipv6routerid_size();
}
inline void SLBgplsTopoLinkAttr::clear_localipv6routerid() {
  localipv6routerid_.Clear();
}
inline ::service_layer::SLBgplsTopoLocalIpv6RouterId* SLBgplsTopoLinkAttr::mutable_localipv6routerid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.LocalIpv6RouterId)
  return localipv6routerid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >*
SLBgplsTopoLinkAttr::mutable_localipv6routerid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.LocalIpv6RouterId)
  return &localipv6routerid_;
}
inline const ::service_layer::SLBgplsTopoLocalIpv6RouterId& SLBgplsTopoLinkAttr::_internal_localipv6routerid(int index) const {
  return localipv6routerid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLocalIpv6RouterId& SLBgplsTopoLinkAttr::localipv6routerid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.LocalIpv6RouterId)
  return _internal_localipv6routerid(index);
}
inline ::service_layer::SLBgplsTopoLocalIpv6RouterId* SLBgplsTopoLinkAttr::_internal_add_localipv6routerid() {
  return localipv6routerid_.Add();
}
inline ::service_layer::SLBgplsTopoLocalIpv6RouterId* SLBgplsTopoLinkAttr::add_localipv6routerid() {
  ::service_layer::SLBgplsTopoLocalIpv6RouterId* _add = _internal_add_localipv6routerid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.LocalIpv6RouterId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLocalIpv6RouterId >&
SLBgplsTopoLinkAttr::localipv6routerid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.LocalIpv6RouterId)
  return localipv6routerid_;
}

// repeated .service_layer.SLBgplsTopoRemoteIpv4RouterId RemoteIpv4RouterId = 5;
inline int SLBgplsTopoLinkAttr::_internal_remoteipv4routerid_size() const {
  return remoteipv4routerid_.size();
}
inline int SLBgplsTopoLinkAttr::remoteipv4routerid_size() const {
  return _internal_remoteipv4routerid_size();
}
inline void SLBgplsTopoLinkAttr::clear_remoteipv4routerid() {
  remoteipv4routerid_.Clear();
}
inline ::service_layer::SLBgplsTopoRemoteIpv4RouterId* SLBgplsTopoLinkAttr::mutable_remoteipv4routerid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.RemoteIpv4RouterId)
  return remoteipv4routerid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >*
SLBgplsTopoLinkAttr::mutable_remoteipv4routerid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.RemoteIpv4RouterId)
  return &remoteipv4routerid_;
}
inline const ::service_layer::SLBgplsTopoRemoteIpv4RouterId& SLBgplsTopoLinkAttr::_internal_remoteipv4routerid(int index) const {
  return remoteipv4routerid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoRemoteIpv4RouterId& SLBgplsTopoLinkAttr::remoteipv4routerid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.RemoteIpv4RouterId)
  return _internal_remoteipv4routerid(index);
}
inline ::service_layer::SLBgplsTopoRemoteIpv4RouterId* SLBgplsTopoLinkAttr::_internal_add_remoteipv4routerid() {
  return remoteipv4routerid_.Add();
}
inline ::service_layer::SLBgplsTopoRemoteIpv4RouterId* SLBgplsTopoLinkAttr::add_remoteipv4routerid() {
  ::service_layer::SLBgplsTopoRemoteIpv4RouterId* _add = _internal_add_remoteipv4routerid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.RemoteIpv4RouterId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv4RouterId >&
SLBgplsTopoLinkAttr::remoteipv4routerid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.RemoteIpv4RouterId)
  return remoteipv4routerid_;
}

// repeated .service_layer.SLBgplsTopoRemoteIpv6RouterId RemoteIpv6RouterId = 6;
inline int SLBgplsTopoLinkAttr::_internal_remoteipv6routerid_size() const {
  return remoteipv6routerid_.size();
}
inline int SLBgplsTopoLinkAttr::remoteipv6routerid_size() const {
  return _internal_remoteipv6routerid_size();
}
inline void SLBgplsTopoLinkAttr::clear_remoteipv6routerid() {
  remoteipv6routerid_.Clear();
}
inline ::service_layer::SLBgplsTopoRemoteIpv6RouterId* SLBgplsTopoLinkAttr::mutable_remoteipv6routerid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.RemoteIpv6RouterId)
  return remoteipv6routerid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >*
SLBgplsTopoLinkAttr::mutable_remoteipv6routerid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.RemoteIpv6RouterId)
  return &remoteipv6routerid_;
}
inline const ::service_layer::SLBgplsTopoRemoteIpv6RouterId& SLBgplsTopoLinkAttr::_internal_remoteipv6routerid(int index) const {
  return remoteipv6routerid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoRemoteIpv6RouterId& SLBgplsTopoLinkAttr::remoteipv6routerid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.RemoteIpv6RouterId)
  return _internal_remoteipv6routerid(index);
}
inline ::service_layer::SLBgplsTopoRemoteIpv6RouterId* SLBgplsTopoLinkAttr::_internal_add_remoteipv6routerid() {
  return remoteipv6routerid_.Add();
}
inline ::service_layer::SLBgplsTopoRemoteIpv6RouterId* SLBgplsTopoLinkAttr::add_remoteipv6routerid() {
  ::service_layer::SLBgplsTopoRemoteIpv6RouterId* _add = _internal_add_remoteipv6routerid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.RemoteIpv6RouterId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoRemoteIpv6RouterId >&
SLBgplsTopoLinkAttr::remoteipv6routerid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.RemoteIpv6RouterId)
  return remoteipv6routerid_;
}

// .service_layer.SLBgplsTopoAdminGroup AdminGroup = 7;
inline bool SLBgplsTopoLinkAttr::_internal_has_admingroup() const {
  return this != internal_default_instance() && admingroup_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_admingroup() const {
  return _internal_has_admingroup();
}
inline void SLBgplsTopoLinkAttr::clear_admingroup() {
  if (GetArenaForAllocation() == nullptr && admingroup_ != nullptr) {
    delete admingroup_;
  }
  admingroup_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoAdminGroup& SLBgplsTopoLinkAttr::_internal_admingroup() const {
  const ::service_layer::SLBgplsTopoAdminGroup* p = admingroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoAdminGroup&>(
      ::service_layer::_SLBgplsTopoAdminGroup_default_instance_);
}
inline const ::service_layer::SLBgplsTopoAdminGroup& SLBgplsTopoLinkAttr::admingroup() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.AdminGroup)
  return _internal_admingroup();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_admingroup(
    ::service_layer::SLBgplsTopoAdminGroup* admingroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admingroup_);
  }
  admingroup_ = admingroup;
  if (admingroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.AdminGroup)
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoLinkAttr::release_admingroup() {
  
  ::service_layer::SLBgplsTopoAdminGroup* temp = admingroup_;
  admingroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoLinkAttr::unsafe_arena_release_admingroup() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.AdminGroup)
  
  ::service_layer::SLBgplsTopoAdminGroup* temp = admingroup_;
  admingroup_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoLinkAttr::_internal_mutable_admingroup() {
  
  if (admingroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoAdminGroup>(GetArenaForAllocation());
    admingroup_ = p;
  }
  return admingroup_;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoLinkAttr::mutable_admingroup() {
  ::service_layer::SLBgplsTopoAdminGroup* _msg = _internal_mutable_admingroup();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.AdminGroup)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_admingroup(::service_layer::SLBgplsTopoAdminGroup* admingroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete admingroup_;
  }
  if (admingroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoAdminGroup>::GetOwningArena(admingroup);
    if (message_arena != submessage_arena) {
      admingroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admingroup, submessage_arena);
    }
    
  } else {
    
  }
  admingroup_ = admingroup;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.AdminGroup)
}

// .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 8;
inline bool SLBgplsTopoLinkAttr::_internal_has_maxbandwidth() const {
  return this != internal_default_instance() && maxbandwidth_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_maxbandwidth() const {
  return _internal_has_maxbandwidth();
}
inline void SLBgplsTopoLinkAttr::clear_maxbandwidth() {
  if (GetArenaForAllocation() == nullptr && maxbandwidth_ != nullptr) {
    delete maxbandwidth_;
  }
  maxbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkMaxBandwidth& SLBgplsTopoLinkAttr::_internal_maxbandwidth() const {
  const ::service_layer::SLBgplsTopoLinkMaxBandwidth* p = maxbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkMaxBandwidth&>(
      ::service_layer::_SLBgplsTopoLinkMaxBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkMaxBandwidth& SLBgplsTopoLinkAttr::maxbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.MaxBandwidth)
  return _internal_maxbandwidth();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_maxbandwidth(
    ::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxbandwidth_);
  }
  maxbandwidth_ = maxbandwidth;
  if (maxbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.MaxBandwidth)
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoLinkAttr::release_maxbandwidth() {
  
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* temp = maxbandwidth_;
  maxbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoLinkAttr::unsafe_arena_release_maxbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.MaxBandwidth)
  
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* temp = maxbandwidth_;
  maxbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoLinkAttr::_internal_mutable_maxbandwidth() {
  
  if (maxbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMaxBandwidth>(GetArenaForAllocation());
    maxbandwidth_ = p;
  }
  return maxbandwidth_;
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoLinkAttr::mutable_maxbandwidth() {
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* _msg = _internal_mutable_maxbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.MaxBandwidth)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_maxbandwidth(::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete maxbandwidth_;
  }
  if (maxbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkMaxBandwidth>::GetOwningArena(maxbandwidth);
    if (message_arena != submessage_arena) {
      maxbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  maxbandwidth_ = maxbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.MaxBandwidth)
}

// .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 9;
inline bool SLBgplsTopoLinkAttr::_internal_has_maxresvbandwidth() const {
  return this != internal_default_instance() && maxresvbandwidth_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_maxresvbandwidth() const {
  return _internal_has_maxresvbandwidth();
}
inline void SLBgplsTopoLinkAttr::clear_maxresvbandwidth() {
  if (GetArenaForAllocation() == nullptr && maxresvbandwidth_ != nullptr) {
    delete maxresvbandwidth_;
  }
  maxresvbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& SLBgplsTopoLinkAttr::_internal_maxresvbandwidth() const {
  const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* p = maxresvbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth&>(
      ::service_layer::_SLBgplsTopoLinkMaxResvBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& SLBgplsTopoLinkAttr::maxresvbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.MaxResvBandwidth)
  return _internal_maxresvbandwidth();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_maxresvbandwidth(
    ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxresvbandwidth_);
  }
  maxresvbandwidth_ = maxresvbandwidth;
  if (maxresvbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.MaxResvBandwidth)
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoLinkAttr::release_maxresvbandwidth() {
  
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* temp = maxresvbandwidth_;
  maxresvbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoLinkAttr::unsafe_arena_release_maxresvbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.MaxResvBandwidth)
  
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* temp = maxresvbandwidth_;
  maxresvbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoLinkAttr::_internal_mutable_maxresvbandwidth() {
  
  if (maxresvbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMaxResvBandwidth>(GetArenaForAllocation());
    maxresvbandwidth_ = p;
  }
  return maxresvbandwidth_;
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoLinkAttr::mutable_maxresvbandwidth() {
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* _msg = _internal_mutable_maxresvbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.MaxResvBandwidth)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_maxresvbandwidth(::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete maxresvbandwidth_;
  }
  if (maxresvbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkMaxResvBandwidth>::GetOwningArena(maxresvbandwidth);
    if (message_arena != submessage_arena) {
      maxresvbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxresvbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  maxresvbandwidth_ = maxresvbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.MaxResvBandwidth)
}

// repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 10;
inline int SLBgplsTopoLinkAttr::_internal_unresvbandwidth_size() const {
  return unresvbandwidth_.size();
}
inline int SLBgplsTopoLinkAttr::unresvbandwidth_size() const {
  return _internal_unresvbandwidth_size();
}
inline void SLBgplsTopoLinkAttr::clear_unresvbandwidth() {
  unresvbandwidth_.Clear();
}
inline ::service_layer::SLBgplsTopoLinkUnresvBandwidth* SLBgplsTopoLinkAttr::mutable_unresvbandwidth(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UnresvBandwidth)
  return unresvbandwidth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >*
SLBgplsTopoLinkAttr::mutable_unresvbandwidth() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.UnresvBandwidth)
  return &unresvbandwidth_;
}
inline const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& SLBgplsTopoLinkAttr::_internal_unresvbandwidth(int index) const {
  return unresvbandwidth_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& SLBgplsTopoLinkAttr::unresvbandwidth(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UnresvBandwidth)
  return _internal_unresvbandwidth(index);
}
inline ::service_layer::SLBgplsTopoLinkUnresvBandwidth* SLBgplsTopoLinkAttr::_internal_add_unresvbandwidth() {
  return unresvbandwidth_.Add();
}
inline ::service_layer::SLBgplsTopoLinkUnresvBandwidth* SLBgplsTopoLinkAttr::add_unresvbandwidth() {
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* _add = _internal_add_unresvbandwidth();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.UnresvBandwidth)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >&
SLBgplsTopoLinkAttr::unresvbandwidth() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.UnresvBandwidth)
  return unresvbandwidth_;
}

// .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 11;
inline bool SLBgplsTopoLinkAttr::_internal_has_tedefmetric() const {
  return this != internal_default_instance() && tedefmetric_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_tedefmetric() const {
  return _internal_has_tedefmetric();
}
inline void SLBgplsTopoLinkAttr::clear_tedefmetric() {
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& SLBgplsTopoLinkAttr::_internal_tedefmetric() const {
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric* p = tedefmetric_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&>(
      ::service_layer::_SLBgplsTopoLinkTeDefaultMetric_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& SLBgplsTopoLinkAttr::tedefmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.TeDefMetric)
  return _internal_tedefmetric();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_tedefmetric(
    ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tedefmetric_);
  }
  tedefmetric_ = tedefmetric;
  if (tedefmetric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.TeDefMetric)
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoLinkAttr::release_tedefmetric() {
  
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* temp = tedefmetric_;
  tedefmetric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoLinkAttr::unsafe_arena_release_tedefmetric() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.TeDefMetric)
  
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* temp = tedefmetric_;
  tedefmetric_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoLinkAttr::_internal_mutable_tedefmetric() {
  
  if (tedefmetric_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkTeDefaultMetric>(GetArenaForAllocation());
    tedefmetric_ = p;
  }
  return tedefmetric_;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoLinkAttr::mutable_tedefmetric() {
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* _msg = _internal_mutable_tedefmetric();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.TeDefMetric)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_tedefmetric(::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tedefmetric_;
  }
  if (tedefmetric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkTeDefaultMetric>::GetOwningArena(tedefmetric);
    if (message_arena != submessage_arena) {
      tedefmetric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tedefmetric, submessage_arena);
    }
    
  } else {
    
  }
  tedefmetric_ = tedefmetric;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.TeDefMetric)
}

// .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 12;
inline bool SLBgplsTopoLinkAttr::_internal_has_protectiontype() const {
  return this != internal_default_instance() && protectiontype_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_protectiontype() const {
  return _internal_has_protectiontype();
}
inline void SLBgplsTopoLinkAttr::clear_protectiontype() {
  if (GetArenaForAllocation() == nullptr && protectiontype_ != nullptr) {
    delete protectiontype_;
  }
  protectiontype_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkProtectionType& SLBgplsTopoLinkAttr::_internal_protectiontype() const {
  const ::service_layer::SLBgplsTopoLinkProtectionType* p = protectiontype_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkProtectionType&>(
      ::service_layer::_SLBgplsTopoLinkProtectionType_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkProtectionType& SLBgplsTopoLinkAttr::protectiontype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.ProtectionType)
  return _internal_protectiontype();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_protectiontype(
    ::service_layer::SLBgplsTopoLinkProtectionType* protectiontype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectiontype_);
  }
  protectiontype_ = protectiontype;
  if (protectiontype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.ProtectionType)
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoLinkAttr::release_protectiontype() {
  
  ::service_layer::SLBgplsTopoLinkProtectionType* temp = protectiontype_;
  protectiontype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoLinkAttr::unsafe_arena_release_protectiontype() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.ProtectionType)
  
  ::service_layer::SLBgplsTopoLinkProtectionType* temp = protectiontype_;
  protectiontype_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoLinkAttr::_internal_mutable_protectiontype() {
  
  if (protectiontype_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkProtectionType>(GetArenaForAllocation());
    protectiontype_ = p;
  }
  return protectiontype_;
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoLinkAttr::mutable_protectiontype() {
  ::service_layer::SLBgplsTopoLinkProtectionType* _msg = _internal_mutable_protectiontype();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.ProtectionType)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_protectiontype(::service_layer::SLBgplsTopoLinkProtectionType* protectiontype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protectiontype_;
  }
  if (protectiontype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkProtectionType>::GetOwningArena(protectiontype);
    if (message_arena != submessage_arena) {
      protectiontype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectiontype, submessage_arena);
    }
    
  } else {
    
  }
  protectiontype_ = protectiontype;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.ProtectionType)
}

// .service_layer.SLBgplsTopoLinkMplsProtoMask MplsProtoMask = 13;
inline bool SLBgplsTopoLinkAttr::_internal_has_mplsprotomask() const {
  return this != internal_default_instance() && mplsprotomask_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_mplsprotomask() const {
  return _internal_has_mplsprotomask();
}
inline void SLBgplsTopoLinkAttr::clear_mplsprotomask() {
  if (GetArenaForAllocation() == nullptr && mplsprotomask_ != nullptr) {
    delete mplsprotomask_;
  }
  mplsprotomask_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkMplsProtoMask& SLBgplsTopoLinkAttr::_internal_mplsprotomask() const {
  const ::service_layer::SLBgplsTopoLinkMplsProtoMask* p = mplsprotomask_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkMplsProtoMask&>(
      ::service_layer::_SLBgplsTopoLinkMplsProtoMask_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkMplsProtoMask& SLBgplsTopoLinkAttr::mplsprotomask() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.MplsProtoMask)
  return _internal_mplsprotomask();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_mplsprotomask(
    ::service_layer::SLBgplsTopoLinkMplsProtoMask* mplsprotomask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mplsprotomask_);
  }
  mplsprotomask_ = mplsprotomask;
  if (mplsprotomask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.MplsProtoMask)
}
inline ::service_layer::SLBgplsTopoLinkMplsProtoMask* SLBgplsTopoLinkAttr::release_mplsprotomask() {
  
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* temp = mplsprotomask_;
  mplsprotomask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMplsProtoMask* SLBgplsTopoLinkAttr::unsafe_arena_release_mplsprotomask() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.MplsProtoMask)
  
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* temp = mplsprotomask_;
  mplsprotomask_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMplsProtoMask* SLBgplsTopoLinkAttr::_internal_mutable_mplsprotomask() {
  
  if (mplsprotomask_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMplsProtoMask>(GetArenaForAllocation());
    mplsprotomask_ = p;
  }
  return mplsprotomask_;
}
inline ::service_layer::SLBgplsTopoLinkMplsProtoMask* SLBgplsTopoLinkAttr::mutable_mplsprotomask() {
  ::service_layer::SLBgplsTopoLinkMplsProtoMask* _msg = _internal_mutable_mplsprotomask();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.MplsProtoMask)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_mplsprotomask(::service_layer::SLBgplsTopoLinkMplsProtoMask* mplsprotomask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mplsprotomask_;
  }
  if (mplsprotomask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkMplsProtoMask>::GetOwningArena(mplsprotomask);
    if (message_arena != submessage_arena) {
      mplsprotomask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mplsprotomask, submessage_arena);
    }
    
  } else {
    
  }
  mplsprotomask_ = mplsprotomask;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.MplsProtoMask)
}

// .service_layer.SLBgplsTopoLinkIgpMetric IgpMetric = 14;
inline bool SLBgplsTopoLinkAttr::_internal_has_igpmetric() const {
  return this != internal_default_instance() && igpmetric_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_igpmetric() const {
  return _internal_has_igpmetric();
}
inline void SLBgplsTopoLinkAttr::clear_igpmetric() {
  if (GetArenaForAllocation() == nullptr && igpmetric_ != nullptr) {
    delete igpmetric_;
  }
  igpmetric_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkIgpMetric& SLBgplsTopoLinkAttr::_internal_igpmetric() const {
  const ::service_layer::SLBgplsTopoLinkIgpMetric* p = igpmetric_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkIgpMetric&>(
      ::service_layer::_SLBgplsTopoLinkIgpMetric_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkIgpMetric& SLBgplsTopoLinkAttr::igpmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.IgpMetric)
  return _internal_igpmetric();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_igpmetric(
    ::service_layer::SLBgplsTopoLinkIgpMetric* igpmetric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(igpmetric_);
  }
  igpmetric_ = igpmetric;
  if (igpmetric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.IgpMetric)
}
inline ::service_layer::SLBgplsTopoLinkIgpMetric* SLBgplsTopoLinkAttr::release_igpmetric() {
  
  ::service_layer::SLBgplsTopoLinkIgpMetric* temp = igpmetric_;
  igpmetric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkIgpMetric* SLBgplsTopoLinkAttr::unsafe_arena_release_igpmetric() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.IgpMetric)
  
  ::service_layer::SLBgplsTopoLinkIgpMetric* temp = igpmetric_;
  igpmetric_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkIgpMetric* SLBgplsTopoLinkAttr::_internal_mutable_igpmetric() {
  
  if (igpmetric_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkIgpMetric>(GetArenaForAllocation());
    igpmetric_ = p;
  }
  return igpmetric_;
}
inline ::service_layer::SLBgplsTopoLinkIgpMetric* SLBgplsTopoLinkAttr::mutable_igpmetric() {
  ::service_layer::SLBgplsTopoLinkIgpMetric* _msg = _internal_mutable_igpmetric();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.IgpMetric)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_igpmetric(::service_layer::SLBgplsTopoLinkIgpMetric* igpmetric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete igpmetric_;
  }
  if (igpmetric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkIgpMetric>::GetOwningArena(igpmetric);
    if (message_arena != submessage_arena) {
      igpmetric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, igpmetric, submessage_arena);
    }
    
  } else {
    
  }
  igpmetric_ = igpmetric;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.IgpMetric)
}

// repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 15;
inline int SLBgplsTopoLinkAttr::_internal_srlg_size() const {
  return srlg_.size();
}
inline int SLBgplsTopoLinkAttr::srlg_size() const {
  return _internal_srlg_size();
}
inline void SLBgplsTopoLinkAttr::clear_srlg() {
  srlg_.Clear();
}
inline ::service_layer::SLBgplsTopoLinkSrlg* SLBgplsTopoLinkAttr::mutable_srlg(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.Srlg)
  return srlg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >*
SLBgplsTopoLinkAttr::mutable_srlg() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.Srlg)
  return &srlg_;
}
inline const ::service_layer::SLBgplsTopoLinkSrlg& SLBgplsTopoLinkAttr::_internal_srlg(int index) const {
  return srlg_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLinkSrlg& SLBgplsTopoLinkAttr::srlg(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.Srlg)
  return _internal_srlg(index);
}
inline ::service_layer::SLBgplsTopoLinkSrlg* SLBgplsTopoLinkAttr::_internal_add_srlg() {
  return srlg_.Add();
}
inline ::service_layer::SLBgplsTopoLinkSrlg* SLBgplsTopoLinkAttr::add_srlg() {
  ::service_layer::SLBgplsTopoLinkSrlg* _add = _internal_add_srlg();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.Srlg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >&
SLBgplsTopoLinkAttr::srlg() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.Srlg)
  return srlg_;
}

// .service_layer.SLBgplsTopoLinkOpaqueAttr OpaqueAttr = 16;
inline bool SLBgplsTopoLinkAttr::_internal_has_opaqueattr() const {
  return this != internal_default_instance() && opaqueattr_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_opaqueattr() const {
  return _internal_has_opaqueattr();
}
inline void SLBgplsTopoLinkAttr::clear_opaqueattr() {
  if (GetArenaForAllocation() == nullptr && opaqueattr_ != nullptr) {
    delete opaqueattr_;
  }
  opaqueattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkOpaqueAttr& SLBgplsTopoLinkAttr::_internal_opaqueattr() const {
  const ::service_layer::SLBgplsTopoLinkOpaqueAttr* p = opaqueattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkOpaqueAttr&>(
      ::service_layer::_SLBgplsTopoLinkOpaqueAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkOpaqueAttr& SLBgplsTopoLinkAttr::opaqueattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.OpaqueAttr)
  return _internal_opaqueattr();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_opaqueattr(
    ::service_layer::SLBgplsTopoLinkOpaqueAttr* opaqueattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opaqueattr_);
  }
  opaqueattr_ = opaqueattr;
  if (opaqueattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.OpaqueAttr)
}
inline ::service_layer::SLBgplsTopoLinkOpaqueAttr* SLBgplsTopoLinkAttr::release_opaqueattr() {
  
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* temp = opaqueattr_;
  opaqueattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkOpaqueAttr* SLBgplsTopoLinkAttr::unsafe_arena_release_opaqueattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.OpaqueAttr)
  
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* temp = opaqueattr_;
  opaqueattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkOpaqueAttr* SLBgplsTopoLinkAttr::_internal_mutable_opaqueattr() {
  
  if (opaqueattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkOpaqueAttr>(GetArenaForAllocation());
    opaqueattr_ = p;
  }
  return opaqueattr_;
}
inline ::service_layer::SLBgplsTopoLinkOpaqueAttr* SLBgplsTopoLinkAttr::mutable_opaqueattr() {
  ::service_layer::SLBgplsTopoLinkOpaqueAttr* _msg = _internal_mutable_opaqueattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.OpaqueAttr)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_opaqueattr(::service_layer::SLBgplsTopoLinkOpaqueAttr* opaqueattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete opaqueattr_;
  }
  if (opaqueattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkOpaqueAttr>::GetOwningArena(opaqueattr);
    if (message_arena != submessage_arena) {
      opaqueattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opaqueattr, submessage_arena);
    }
    
  } else {
    
  }
  opaqueattr_ = opaqueattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.OpaqueAttr)
}

// .service_layer.SLBgplsTopoLinkName LinkName = 17;
inline bool SLBgplsTopoLinkAttr::_internal_has_linkname() const {
  return this != internal_default_instance() && linkname_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_linkname() const {
  return _internal_has_linkname();
}
inline void SLBgplsTopoLinkAttr::clear_linkname() {
  if (GetArenaForAllocation() == nullptr && linkname_ != nullptr) {
    delete linkname_;
  }
  linkname_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkName& SLBgplsTopoLinkAttr::_internal_linkname() const {
  const ::service_layer::SLBgplsTopoLinkName* p = linkname_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkName&>(
      ::service_layer::_SLBgplsTopoLinkName_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkName& SLBgplsTopoLinkAttr::linkname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.LinkName)
  return _internal_linkname();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_linkname(
    ::service_layer::SLBgplsTopoLinkName* linkname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkname_);
  }
  linkname_ = linkname;
  if (linkname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.LinkName)
}
inline ::service_layer::SLBgplsTopoLinkName* SLBgplsTopoLinkAttr::release_linkname() {
  
  ::service_layer::SLBgplsTopoLinkName* temp = linkname_;
  linkname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkName* SLBgplsTopoLinkAttr::unsafe_arena_release_linkname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.LinkName)
  
  ::service_layer::SLBgplsTopoLinkName* temp = linkname_;
  linkname_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkName* SLBgplsTopoLinkAttr::_internal_mutable_linkname() {
  
  if (linkname_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkName>(GetArenaForAllocation());
    linkname_ = p;
  }
  return linkname_;
}
inline ::service_layer::SLBgplsTopoLinkName* SLBgplsTopoLinkAttr::mutable_linkname() {
  ::service_layer::SLBgplsTopoLinkName* _msg = _internal_mutable_linkname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.LinkName)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_linkname(::service_layer::SLBgplsTopoLinkName* linkname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linkname_;
  }
  if (linkname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkName>::GetOwningArena(linkname);
    if (message_arena != submessage_arena) {
      linkname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkname, submessage_arena);
    }
    
  } else {
    
  }
  linkname_ = linkname;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.LinkName)
}

// repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 18;
inline int SLBgplsTopoLinkAttr::_internal_adjsid_size() const {
  return adjsid_.size();
}
inline int SLBgplsTopoLinkAttr::adjsid_size() const {
  return _internal_adjsid_size();
}
inline void SLBgplsTopoLinkAttr::clear_adjsid() {
  adjsid_.Clear();
}
inline ::service_layer::SLBgplsTopoAdjSid* SLBgplsTopoLinkAttr::mutable_adjsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.AdjSid)
  return adjsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >*
SLBgplsTopoLinkAttr::mutable_adjsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.AdjSid)
  return &adjsid_;
}
inline const ::service_layer::SLBgplsTopoAdjSid& SLBgplsTopoLinkAttr::_internal_adjsid(int index) const {
  return adjsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoAdjSid& SLBgplsTopoLinkAttr::adjsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.AdjSid)
  return _internal_adjsid(index);
}
inline ::service_layer::SLBgplsTopoAdjSid* SLBgplsTopoLinkAttr::_internal_add_adjsid() {
  return adjsid_.Add();
}
inline ::service_layer::SLBgplsTopoAdjSid* SLBgplsTopoLinkAttr::add_adjsid() {
  ::service_layer::SLBgplsTopoAdjSid* _add = _internal_add_adjsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.AdjSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >&
SLBgplsTopoLinkAttr::adjsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.AdjSid)
  return adjsid_;
}

// repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 19;
inline int SLBgplsTopoLinkAttr::_internal_lanadjsid_size() const {
  return lanadjsid_.size();
}
inline int SLBgplsTopoLinkAttr::lanadjsid_size() const {
  return _internal_lanadjsid_size();
}
inline void SLBgplsTopoLinkAttr::clear_lanadjsid() {
  lanadjsid_.Clear();
}
inline ::service_layer::SLBgplsTopoLanAdjSid* SLBgplsTopoLinkAttr::mutable_lanadjsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.LanAdjSid)
  return lanadjsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >*
SLBgplsTopoLinkAttr::mutable_lanadjsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.LanAdjSid)
  return &lanadjsid_;
}
inline const ::service_layer::SLBgplsTopoLanAdjSid& SLBgplsTopoLinkAttr::_internal_lanadjsid(int index) const {
  return lanadjsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLanAdjSid& SLBgplsTopoLinkAttr::lanadjsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.LanAdjSid)
  return _internal_lanadjsid(index);
}
inline ::service_layer::SLBgplsTopoLanAdjSid* SLBgplsTopoLinkAttr::_internal_add_lanadjsid() {
  return lanadjsid_.Add();
}
inline ::service_layer::SLBgplsTopoLanAdjSid* SLBgplsTopoLinkAttr::add_lanadjsid() {
  ::service_layer::SLBgplsTopoLanAdjSid* _add = _internal_add_lanadjsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.LanAdjSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >&
SLBgplsTopoLinkAttr::lanadjsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.LanAdjSid)
  return lanadjsid_;
}

// repeated .service_layer.SLBgplsTopoBgpPeerNodeSid BgpPeerNodeSid = 20;
inline int SLBgplsTopoLinkAttr::_internal_bgppeernodesid_size() const {
  return bgppeernodesid_.size();
}
inline int SLBgplsTopoLinkAttr::bgppeernodesid_size() const {
  return _internal_bgppeernodesid_size();
}
inline void SLBgplsTopoLinkAttr::clear_bgppeernodesid() {
  bgppeernodesid_.Clear();
}
inline ::service_layer::SLBgplsTopoBgpPeerNodeSid* SLBgplsTopoLinkAttr::mutable_bgppeernodesid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.BgpPeerNodeSid)
  return bgppeernodesid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerNodeSid >*
SLBgplsTopoLinkAttr::mutable_bgppeernodesid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.BgpPeerNodeSid)
  return &bgppeernodesid_;
}
inline const ::service_layer::SLBgplsTopoBgpPeerNodeSid& SLBgplsTopoLinkAttr::_internal_bgppeernodesid(int index) const {
  return bgppeernodesid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoBgpPeerNodeSid& SLBgplsTopoLinkAttr::bgppeernodesid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.BgpPeerNodeSid)
  return _internal_bgppeernodesid(index);
}
inline ::service_layer::SLBgplsTopoBgpPeerNodeSid* SLBgplsTopoLinkAttr::_internal_add_bgppeernodesid() {
  return bgppeernodesid_.Add();
}
inline ::service_layer::SLBgplsTopoBgpPeerNodeSid* SLBgplsTopoLinkAttr::add_bgppeernodesid() {
  ::service_layer::SLBgplsTopoBgpPeerNodeSid* _add = _internal_add_bgppeernodesid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.BgpPeerNodeSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerNodeSid >&
SLBgplsTopoLinkAttr::bgppeernodesid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.BgpPeerNodeSid)
  return bgppeernodesid_;
}

// repeated .service_layer.SLBgplsTopoBgpPeerAdjSid BgpPeerAdjSid = 21;
inline int SLBgplsTopoLinkAttr::_internal_bgppeeradjsid_size() const {
  return bgppeeradjsid_.size();
}
inline int SLBgplsTopoLinkAttr::bgppeeradjsid_size() const {
  return _internal_bgppeeradjsid_size();
}
inline void SLBgplsTopoLinkAttr::clear_bgppeeradjsid() {
  bgppeeradjsid_.Clear();
}
inline ::service_layer::SLBgplsTopoBgpPeerAdjSid* SLBgplsTopoLinkAttr::mutable_bgppeeradjsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.BgpPeerAdjSid)
  return bgppeeradjsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerAdjSid >*
SLBgplsTopoLinkAttr::mutable_bgppeeradjsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.BgpPeerAdjSid)
  return &bgppeeradjsid_;
}
inline const ::service_layer::SLBgplsTopoBgpPeerAdjSid& SLBgplsTopoLinkAttr::_internal_bgppeeradjsid(int index) const {
  return bgppeeradjsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoBgpPeerAdjSid& SLBgplsTopoLinkAttr::bgppeeradjsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.BgpPeerAdjSid)
  return _internal_bgppeeradjsid(index);
}
inline ::service_layer::SLBgplsTopoBgpPeerAdjSid* SLBgplsTopoLinkAttr::_internal_add_bgppeeradjsid() {
  return bgppeeradjsid_.Add();
}
inline ::service_layer::SLBgplsTopoBgpPeerAdjSid* SLBgplsTopoLinkAttr::add_bgppeeradjsid() {
  ::service_layer::SLBgplsTopoBgpPeerAdjSid* _add = _internal_add_bgppeeradjsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.BgpPeerAdjSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerAdjSid >&
SLBgplsTopoLinkAttr::bgppeeradjsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.BgpPeerAdjSid)
  return bgppeeradjsid_;
}

// repeated .service_layer.SLBgplsTopoBgpPeerSetSid BgpPeerSetSid = 22;
inline int SLBgplsTopoLinkAttr::_internal_bgppeersetsid_size() const {
  return bgppeersetsid_.size();
}
inline int SLBgplsTopoLinkAttr::bgppeersetsid_size() const {
  return _internal_bgppeersetsid_size();
}
inline void SLBgplsTopoLinkAttr::clear_bgppeersetsid() {
  bgppeersetsid_.Clear();
}
inline ::service_layer::SLBgplsTopoBgpPeerSetSid* SLBgplsTopoLinkAttr::mutable_bgppeersetsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.BgpPeerSetSid)
  return bgppeersetsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerSetSid >*
SLBgplsTopoLinkAttr::mutable_bgppeersetsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.BgpPeerSetSid)
  return &bgppeersetsid_;
}
inline const ::service_layer::SLBgplsTopoBgpPeerSetSid& SLBgplsTopoLinkAttr::_internal_bgppeersetsid(int index) const {
  return bgppeersetsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoBgpPeerSetSid& SLBgplsTopoLinkAttr::bgppeersetsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.BgpPeerSetSid)
  return _internal_bgppeersetsid(index);
}
inline ::service_layer::SLBgplsTopoBgpPeerSetSid* SLBgplsTopoLinkAttr::_internal_add_bgppeersetsid() {
  return bgppeersetsid_.Add();
}
inline ::service_layer::SLBgplsTopoBgpPeerSetSid* SLBgplsTopoLinkAttr::add_bgppeersetsid() {
  ::service_layer::SLBgplsTopoBgpPeerSetSid* _add = _internal_add_bgppeersetsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.BgpPeerSetSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoBgpPeerSetSid >&
SLBgplsTopoLinkAttr::bgppeersetsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.BgpPeerSetSid)
  return bgppeersetsid_;
}

// repeated .service_layer.SLBgplsTopoSrv6EndXSid Srv6EndXSid = 23;
inline int SLBgplsTopoLinkAttr::_internal_srv6endxsid_size() const {
  return srv6endxsid_.size();
}
inline int SLBgplsTopoLinkAttr::srv6endxsid_size() const {
  return _internal_srv6endxsid_size();
}
inline void SLBgplsTopoLinkAttr::clear_srv6endxsid() {
  srv6endxsid_.Clear();
}
inline ::service_layer::SLBgplsTopoSrv6EndXSid* SLBgplsTopoLinkAttr::mutable_srv6endxsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.Srv6EndXSid)
  return srv6endxsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6EndXSid >*
SLBgplsTopoLinkAttr::mutable_srv6endxsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.Srv6EndXSid)
  return &srv6endxsid_;
}
inline const ::service_layer::SLBgplsTopoSrv6EndXSid& SLBgplsTopoLinkAttr::_internal_srv6endxsid(int index) const {
  return srv6endxsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrv6EndXSid& SLBgplsTopoLinkAttr::srv6endxsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.Srv6EndXSid)
  return _internal_srv6endxsid(index);
}
inline ::service_layer::SLBgplsTopoSrv6EndXSid* SLBgplsTopoLinkAttr::_internal_add_srv6endxsid() {
  return srv6endxsid_.Add();
}
inline ::service_layer::SLBgplsTopoSrv6EndXSid* SLBgplsTopoLinkAttr::add_srv6endxsid() {
  ::service_layer::SLBgplsTopoSrv6EndXSid* _add = _internal_add_srv6endxsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.Srv6EndXSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6EndXSid >&
SLBgplsTopoLinkAttr::srv6endxsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.Srv6EndXSid)
  return srv6endxsid_;
}

// repeated .service_layer.SLBgplsTopoSrv6LanEndXSid Srv6LanEndXSid = 24;
inline int SLBgplsTopoLinkAttr::_internal_srv6lanendxsid_size() const {
  return srv6lanendxsid_.size();
}
inline int SLBgplsTopoLinkAttr::srv6lanendxsid_size() const {
  return _internal_srv6lanendxsid_size();
}
inline void SLBgplsTopoLinkAttr::clear_srv6lanendxsid() {
  srv6lanendxsid_.Clear();
}
inline ::service_layer::SLBgplsTopoSrv6LanEndXSid* SLBgplsTopoLinkAttr::mutable_srv6lanendxsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.Srv6LanEndXSid)
  return srv6lanendxsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6LanEndXSid >*
SLBgplsTopoLinkAttr::mutable_srv6lanendxsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.Srv6LanEndXSid)
  return &srv6lanendxsid_;
}
inline const ::service_layer::SLBgplsTopoSrv6LanEndXSid& SLBgplsTopoLinkAttr::_internal_srv6lanendxsid(int index) const {
  return srv6lanendxsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrv6LanEndXSid& SLBgplsTopoLinkAttr::srv6lanendxsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.Srv6LanEndXSid)
  return _internal_srv6lanendxsid(index);
}
inline ::service_layer::SLBgplsTopoSrv6LanEndXSid* SLBgplsTopoLinkAttr::_internal_add_srv6lanendxsid() {
  return srv6lanendxsid_.Add();
}
inline ::service_layer::SLBgplsTopoSrv6LanEndXSid* SLBgplsTopoLinkAttr::add_srv6lanendxsid() {
  ::service_layer::SLBgplsTopoSrv6LanEndXSid* _add = _internal_add_srv6lanendxsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.Srv6LanEndXSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6LanEndXSid >&
SLBgplsTopoLinkAttr::srv6lanendxsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.Srv6LanEndXSid)
  return srv6lanendxsid_;
}

// .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 25;
inline bool SLBgplsTopoLinkAttr::_internal_has_unilinkdelay() const {
  return this != internal_default_instance() && unilinkdelay_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_unilinkdelay() const {
  return _internal_has_unilinkdelay();
}
inline void SLBgplsTopoLinkAttr::clear_unilinkdelay() {
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniLinkDelay& SLBgplsTopoLinkAttr::_internal_unilinkdelay() const {
  const ::service_layer::SLBgplsTopoUniLinkDelay* p = unilinkdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniLinkDelay&>(
      ::service_layer::_SLBgplsTopoUniLinkDelay_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniLinkDelay& SLBgplsTopoLinkAttr::unilinkdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UniLinkDelay)
  return _internal_unilinkdelay();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_unilinkdelay(
    ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unilinkdelay_);
  }
  unilinkdelay_ = unilinkdelay;
  if (unilinkdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniLinkDelay)
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoLinkAttr::release_unilinkdelay() {
  
  ::service_layer::SLBgplsTopoUniLinkDelay* temp = unilinkdelay_;
  unilinkdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoLinkAttr::unsafe_arena_release_unilinkdelay() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.UniLinkDelay)
  
  ::service_layer::SLBgplsTopoUniLinkDelay* temp = unilinkdelay_;
  unilinkdelay_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoLinkAttr::_internal_mutable_unilinkdelay() {
  
  if (unilinkdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkDelay>(GetArenaForAllocation());
    unilinkdelay_ = p;
  }
  return unilinkdelay_;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoLinkAttr::mutable_unilinkdelay() {
  ::service_layer::SLBgplsTopoUniLinkDelay* _msg = _internal_mutable_unilinkdelay();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UniLinkDelay)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_unilinkdelay(::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unilinkdelay_;
  }
  if (unilinkdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniLinkDelay>::GetOwningArena(unilinkdelay);
    if (message_arena != submessage_arena) {
      unilinkdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unilinkdelay, submessage_arena);
    }
    
  } else {
    
  }
  unilinkdelay_ = unilinkdelay;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniLinkDelay)
}

// .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxUniLinkDelay = 26;
inline bool SLBgplsTopoLinkAttr::_internal_has_minmaxunilinkdelay() const {
  return this != internal_default_instance() && minmaxunilinkdelay_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_minmaxunilinkdelay() const {
  return _internal_has_minmaxunilinkdelay();
}
inline void SLBgplsTopoLinkAttr::clear_minmaxunilinkdelay() {
  if (GetArenaForAllocation() == nullptr && minmaxunilinkdelay_ != nullptr) {
    delete minmaxunilinkdelay_;
  }
  minmaxunilinkdelay_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& SLBgplsTopoLinkAttr::_internal_minmaxunilinkdelay() const {
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* p = minmaxunilinkdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&>(
      ::service_layer::_SLBgplsTopoMinMaxUniLinkDelay_default_instance_);
}
inline const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& SLBgplsTopoLinkAttr::minmaxunilinkdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.MinMaxUniLinkDelay)
  return _internal_minmaxunilinkdelay();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_minmaxunilinkdelay(
    ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxunilinkdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minmaxunilinkdelay_);
  }
  minmaxunilinkdelay_ = minmaxunilinkdelay;
  if (minmaxunilinkdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.MinMaxUniLinkDelay)
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoLinkAttr::release_minmaxunilinkdelay() {
  
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* temp = minmaxunilinkdelay_;
  minmaxunilinkdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoLinkAttr::unsafe_arena_release_minmaxunilinkdelay() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.MinMaxUniLinkDelay)
  
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* temp = minmaxunilinkdelay_;
  minmaxunilinkdelay_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoLinkAttr::_internal_mutable_minmaxunilinkdelay() {
  
  if (minmaxunilinkdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>(GetArenaForAllocation());
    minmaxunilinkdelay_ = p;
  }
  return minmaxunilinkdelay_;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoLinkAttr::mutable_minmaxunilinkdelay() {
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* _msg = _internal_mutable_minmaxunilinkdelay();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.MinMaxUniLinkDelay)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_minmaxunilinkdelay(::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxunilinkdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete minmaxunilinkdelay_;
  }
  if (minmaxunilinkdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>::GetOwningArena(minmaxunilinkdelay);
    if (message_arena != submessage_arena) {
      minmaxunilinkdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minmaxunilinkdelay, submessage_arena);
    }
    
  } else {
    
  }
  minmaxunilinkdelay_ = minmaxunilinkdelay;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.MinMaxUniLinkDelay)
}

// .service_layer.SLBgplsTopoUniDelayVar UniDelayVar = 27;
inline bool SLBgplsTopoLinkAttr::_internal_has_unidelayvar() const {
  return this != internal_default_instance() && unidelayvar_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_unidelayvar() const {
  return _internal_has_unidelayvar();
}
inline void SLBgplsTopoLinkAttr::clear_unidelayvar() {
  if (GetArenaForAllocation() == nullptr && unidelayvar_ != nullptr) {
    delete unidelayvar_;
  }
  unidelayvar_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniDelayVar& SLBgplsTopoLinkAttr::_internal_unidelayvar() const {
  const ::service_layer::SLBgplsTopoUniDelayVar* p = unidelayvar_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniDelayVar&>(
      ::service_layer::_SLBgplsTopoUniDelayVar_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniDelayVar& SLBgplsTopoLinkAttr::unidelayvar() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UniDelayVar)
  return _internal_unidelayvar();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_unidelayvar(
    ::service_layer::SLBgplsTopoUniDelayVar* unidelayvar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unidelayvar_);
  }
  unidelayvar_ = unidelayvar;
  if (unidelayvar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniDelayVar)
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoLinkAttr::release_unidelayvar() {
  
  ::service_layer::SLBgplsTopoUniDelayVar* temp = unidelayvar_;
  unidelayvar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoLinkAttr::unsafe_arena_release_unidelayvar() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.UniDelayVar)
  
  ::service_layer::SLBgplsTopoUniDelayVar* temp = unidelayvar_;
  unidelayvar_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoLinkAttr::_internal_mutable_unidelayvar() {
  
  if (unidelayvar_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniDelayVar>(GetArenaForAllocation());
    unidelayvar_ = p;
  }
  return unidelayvar_;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoLinkAttr::mutable_unidelayvar() {
  ::service_layer::SLBgplsTopoUniDelayVar* _msg = _internal_mutable_unidelayvar();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UniDelayVar)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_unidelayvar(::service_layer::SLBgplsTopoUniDelayVar* unidelayvar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unidelayvar_;
  }
  if (unidelayvar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniDelayVar>::GetOwningArena(unidelayvar);
    if (message_arena != submessage_arena) {
      unidelayvar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unidelayvar, submessage_arena);
    }
    
  } else {
    
  }
  unidelayvar_ = unidelayvar;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniDelayVar)
}

// .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 28;
inline bool SLBgplsTopoLinkAttr::_internal_has_unilinkloss() const {
  return this != internal_default_instance() && unilinkloss_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_unilinkloss() const {
  return _internal_has_unilinkloss();
}
inline void SLBgplsTopoLinkAttr::clear_unilinkloss() {
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniLinkLoss& SLBgplsTopoLinkAttr::_internal_unilinkloss() const {
  const ::service_layer::SLBgplsTopoUniLinkLoss* p = unilinkloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniLinkLoss&>(
      ::service_layer::_SLBgplsTopoUniLinkLoss_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniLinkLoss& SLBgplsTopoLinkAttr::unilinkloss() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UniLinkLoss)
  return _internal_unilinkloss();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_unilinkloss(
    ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unilinkloss_);
  }
  unilinkloss_ = unilinkloss;
  if (unilinkloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniLinkLoss)
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoLinkAttr::release_unilinkloss() {
  
  ::service_layer::SLBgplsTopoUniLinkLoss* temp = unilinkloss_;
  unilinkloss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoLinkAttr::unsafe_arena_release_unilinkloss() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.UniLinkLoss)
  
  ::service_layer::SLBgplsTopoUniLinkLoss* temp = unilinkloss_;
  unilinkloss_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoLinkAttr::_internal_mutable_unilinkloss() {
  
  if (unilinkloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkLoss>(GetArenaForAllocation());
    unilinkloss_ = p;
  }
  return unilinkloss_;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoLinkAttr::mutable_unilinkloss() {
  ::service_layer::SLBgplsTopoUniLinkLoss* _msg = _internal_mutable_unilinkloss();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UniLinkLoss)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_unilinkloss(::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unilinkloss_;
  }
  if (unilinkloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniLinkLoss>::GetOwningArena(unilinkloss);
    if (message_arena != submessage_arena) {
      unilinkloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unilinkloss, submessage_arena);
    }
    
  } else {
    
  }
  unilinkloss_ = unilinkloss;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniLinkLoss)
}

// .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 29;
inline bool SLBgplsTopoLinkAttr::_internal_has_uniresbandwidth() const {
  return this != internal_default_instance() && uniresbandwidth_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_uniresbandwidth() const {
  return _internal_has_uniresbandwidth();
}
inline void SLBgplsTopoLinkAttr::clear_uniresbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniResBandwidth& SLBgplsTopoLinkAttr::_internal_uniresbandwidth() const {
  const ::service_layer::SLBgplsTopoUniResBandwidth* p = uniresbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniResBandwidth&>(
      ::service_layer::_SLBgplsTopoUniResBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniResBandwidth& SLBgplsTopoLinkAttr::uniresbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UniResBandwidth)
  return _internal_uniresbandwidth();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_uniresbandwidth(
    ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniresbandwidth_);
  }
  uniresbandwidth_ = uniresbandwidth;
  if (uniresbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniResBandwidth)
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoLinkAttr::release_uniresbandwidth() {
  
  ::service_layer::SLBgplsTopoUniResBandwidth* temp = uniresbandwidth_;
  uniresbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoLinkAttr::unsafe_arena_release_uniresbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.UniResBandwidth)
  
  ::service_layer::SLBgplsTopoUniResBandwidth* temp = uniresbandwidth_;
  uniresbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoLinkAttr::_internal_mutable_uniresbandwidth() {
  
  if (uniresbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniResBandwidth>(GetArenaForAllocation());
    uniresbandwidth_ = p;
  }
  return uniresbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoLinkAttr::mutable_uniresbandwidth() {
  ::service_layer::SLBgplsTopoUniResBandwidth* _msg = _internal_mutable_uniresbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UniResBandwidth)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_uniresbandwidth(::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniresbandwidth_;
  }
  if (uniresbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniResBandwidth>::GetOwningArena(uniresbandwidth);
    if (message_arena != submessage_arena) {
      uniresbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniresbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniresbandwidth_ = uniresbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniResBandwidth)
}

// .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 30;
inline bool SLBgplsTopoLinkAttr::_internal_has_uniavailbandwidth() const {
  return this != internal_default_instance() && uniavailbandwidth_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_uniavailbandwidth() const {
  return _internal_has_uniavailbandwidth();
}
inline void SLBgplsTopoLinkAttr::clear_uniavailbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniAvailBandwidth& SLBgplsTopoLinkAttr::_internal_uniavailbandwidth() const {
  const ::service_layer::SLBgplsTopoUniAvailBandwidth* p = uniavailbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniAvailBandwidth&>(
      ::service_layer::_SLBgplsTopoUniAvailBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniAvailBandwidth& SLBgplsTopoLinkAttr::uniavailbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UniAvailBandwidth)
  return _internal_uniavailbandwidth();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_uniavailbandwidth(
    ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniavailbandwidth_);
  }
  uniavailbandwidth_ = uniavailbandwidth;
  if (uniavailbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniAvailBandwidth)
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoLinkAttr::release_uniavailbandwidth() {
  
  ::service_layer::SLBgplsTopoUniAvailBandwidth* temp = uniavailbandwidth_;
  uniavailbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoLinkAttr::unsafe_arena_release_uniavailbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.UniAvailBandwidth)
  
  ::service_layer::SLBgplsTopoUniAvailBandwidth* temp = uniavailbandwidth_;
  uniavailbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoLinkAttr::_internal_mutable_uniavailbandwidth() {
  
  if (uniavailbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniAvailBandwidth>(GetArenaForAllocation());
    uniavailbandwidth_ = p;
  }
  return uniavailbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoLinkAttr::mutable_uniavailbandwidth() {
  ::service_layer::SLBgplsTopoUniAvailBandwidth* _msg = _internal_mutable_uniavailbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UniAvailBandwidth)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_uniavailbandwidth(::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniavailbandwidth_;
  }
  if (uniavailbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniAvailBandwidth>::GetOwningArena(uniavailbandwidth);
    if (message_arena != submessage_arena) {
      uniavailbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniavailbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniavailbandwidth_ = uniavailbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniAvailBandwidth)
}

// .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 31;
inline bool SLBgplsTopoLinkAttr::_internal_has_uniutilbandwidth() const {
  return this != internal_default_instance() && uniutilbandwidth_ != nullptr;
}
inline bool SLBgplsTopoLinkAttr::has_uniutilbandwidth() const {
  return _internal_has_uniutilbandwidth();
}
inline void SLBgplsTopoLinkAttr::clear_uniutilbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniUtilBandwidth& SLBgplsTopoLinkAttr::_internal_uniutilbandwidth() const {
  const ::service_layer::SLBgplsTopoUniUtilBandwidth* p = uniutilbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniUtilBandwidth&>(
      ::service_layer::_SLBgplsTopoUniUtilBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniUtilBandwidth& SLBgplsTopoLinkAttr::uniutilbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UniUtilBandwidth)
  return _internal_uniutilbandwidth();
}
inline void SLBgplsTopoLinkAttr::unsafe_arena_set_allocated_uniutilbandwidth(
    ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniutilbandwidth_);
  }
  uniutilbandwidth_ = uniutilbandwidth;
  if (uniutilbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniUtilBandwidth)
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoLinkAttr::release_uniutilbandwidth() {
  
  ::service_layer::SLBgplsTopoUniUtilBandwidth* temp = uniutilbandwidth_;
  uniutilbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoLinkAttr::unsafe_arena_release_uniutilbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkAttr.UniUtilBandwidth)
  
  ::service_layer::SLBgplsTopoUniUtilBandwidth* temp = uniutilbandwidth_;
  uniutilbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoLinkAttr::_internal_mutable_uniutilbandwidth() {
  
  if (uniutilbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniUtilBandwidth>(GetArenaForAllocation());
    uniutilbandwidth_ = p;
  }
  return uniutilbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoLinkAttr::mutable_uniutilbandwidth() {
  ::service_layer::SLBgplsTopoUniUtilBandwidth* _msg = _internal_mutable_uniutilbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UniUtilBandwidth)
  return _msg;
}
inline void SLBgplsTopoLinkAttr::set_allocated_uniutilbandwidth(::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniutilbandwidth_;
  }
  if (uniutilbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniUtilBandwidth>::GetOwningArena(uniutilbandwidth);
    if (message_arena != submessage_arena) {
      uniutilbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniutilbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniutilbandwidth_ = uniutilbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkAttr.UniUtilBandwidth)
}

// repeated .service_layer.SLBgplsTopoAslaAttr Asla = 32;
inline int SLBgplsTopoLinkAttr::_internal_asla_size() const {
  return asla_.size();
}
inline int SLBgplsTopoLinkAttr::asla_size() const {
  return _internal_asla_size();
}
inline void SLBgplsTopoLinkAttr::clear_asla() {
  asla_.Clear();
}
inline ::service_layer::SLBgplsTopoAslaAttr* SLBgplsTopoLinkAttr::mutable_asla(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.Asla)
  return asla_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >*
SLBgplsTopoLinkAttr::mutable_asla() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.Asla)
  return &asla_;
}
inline const ::service_layer::SLBgplsTopoAslaAttr& SLBgplsTopoLinkAttr::_internal_asla(int index) const {
  return asla_.Get(index);
}
inline const ::service_layer::SLBgplsTopoAslaAttr& SLBgplsTopoLinkAttr::asla(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.Asla)
  return _internal_asla(index);
}
inline ::service_layer::SLBgplsTopoAslaAttr* SLBgplsTopoLinkAttr::_internal_add_asla() {
  return asla_.Add();
}
inline ::service_layer::SLBgplsTopoAslaAttr* SLBgplsTopoLinkAttr::add_asla() {
  ::service_layer::SLBgplsTopoAslaAttr* _add = _internal_add_asla();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.Asla)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >&
SLBgplsTopoLinkAttr::asla() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.Asla)
  return asla_;
}

// repeated .service_layer.SLBgplsTopoL2BundleMemberAttr L2BundleMemberAttr = 33;
inline int SLBgplsTopoLinkAttr::_internal_l2bundlememberattr_size() const {
  return l2bundlememberattr_.size();
}
inline int SLBgplsTopoLinkAttr::l2bundlememberattr_size() const {
  return _internal_l2bundlememberattr_size();
}
inline void SLBgplsTopoLinkAttr::clear_l2bundlememberattr() {
  l2bundlememberattr_.Clear();
}
inline ::service_layer::SLBgplsTopoL2BundleMemberAttr* SLBgplsTopoLinkAttr::mutable_l2bundlememberattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.L2BundleMemberAttr)
  return l2bundlememberattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoL2BundleMemberAttr >*
SLBgplsTopoLinkAttr::mutable_l2bundlememberattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.L2BundleMemberAttr)
  return &l2bundlememberattr_;
}
inline const ::service_layer::SLBgplsTopoL2BundleMemberAttr& SLBgplsTopoLinkAttr::_internal_l2bundlememberattr(int index) const {
  return l2bundlememberattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoL2BundleMemberAttr& SLBgplsTopoLinkAttr::l2bundlememberattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.L2BundleMemberAttr)
  return _internal_l2bundlememberattr(index);
}
inline ::service_layer::SLBgplsTopoL2BundleMemberAttr* SLBgplsTopoLinkAttr::_internal_add_l2bundlememberattr() {
  return l2bundlememberattr_.Add();
}
inline ::service_layer::SLBgplsTopoL2BundleMemberAttr* SLBgplsTopoLinkAttr::add_l2bundlememberattr() {
  ::service_layer::SLBgplsTopoL2BundleMemberAttr* _add = _internal_add_l2bundlememberattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.L2BundleMemberAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoL2BundleMemberAttr >&
SLBgplsTopoLinkAttr::l2bundlememberattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.L2BundleMemberAttr)
  return l2bundlememberattr_;
}

// repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 34;
inline int SLBgplsTopoLinkAttr::_internal_extadmingroup_size() const {
  return extadmingroup_.size();
}
inline int SLBgplsTopoLinkAttr::extadmingroup_size() const {
  return _internal_extadmingroup_size();
}
inline void SLBgplsTopoLinkAttr::clear_extadmingroup() {
  extadmingroup_.Clear();
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoLinkAttr::mutable_extadmingroup(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.ExtAdminGroup)
  return extadmingroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >*
SLBgplsTopoLinkAttr::mutable_extadmingroup() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.ExtAdminGroup)
  return &extadmingroup_;
}
inline const ::service_layer::SLBgplsTopoExtAdminGroup& SLBgplsTopoLinkAttr::_internal_extadmingroup(int index) const {
  return extadmingroup_.Get(index);
}
inline const ::service_layer::SLBgplsTopoExtAdminGroup& SLBgplsTopoLinkAttr::extadmingroup(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.ExtAdminGroup)
  return _internal_extadmingroup(index);
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoLinkAttr::_internal_add_extadmingroup() {
  return extadmingroup_.Add();
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoLinkAttr::add_extadmingroup() {
  ::service_layer::SLBgplsTopoExtAdminGroup* _add = _internal_add_extadmingroup();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.ExtAdminGroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >&
SLBgplsTopoLinkAttr::extadmingroup() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.ExtAdminGroup)
  return extadmingroup_;
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 35;
inline int SLBgplsTopoLinkAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoLinkAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoLinkAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoLinkAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoLinkAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoLinkAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoLinkAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoLinkAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoLinkAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoLinkAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoLinkAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoLinkAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoLinkAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixAttr

// repeated .service_layer.SLBgplsTopoPrefixFAPM Fapm = 1;
inline int SLBgplsTopoPrefixAttr::_internal_fapm_size() const {
  return fapm_.size();
}
inline int SLBgplsTopoPrefixAttr::fapm_size() const {
  return _internal_fapm_size();
}
inline void SLBgplsTopoPrefixAttr::clear_fapm() {
  fapm_.Clear();
}
inline ::service_layer::SLBgplsTopoPrefixFAPM* SLBgplsTopoPrefixAttr::mutable_fapm(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.Fapm)
  return fapm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixFAPM >*
SLBgplsTopoPrefixAttr::mutable_fapm() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoPrefixAttr.Fapm)
  return &fapm_;
}
inline const ::service_layer::SLBgplsTopoPrefixFAPM& SLBgplsTopoPrefixAttr::_internal_fapm(int index) const {
  return fapm_.Get(index);
}
inline const ::service_layer::SLBgplsTopoPrefixFAPM& SLBgplsTopoPrefixAttr::fapm(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.Fapm)
  return _internal_fapm(index);
}
inline ::service_layer::SLBgplsTopoPrefixFAPM* SLBgplsTopoPrefixAttr::_internal_add_fapm() {
  return fapm_.Add();
}
inline ::service_layer::SLBgplsTopoPrefixFAPM* SLBgplsTopoPrefixAttr::add_fapm() {
  ::service_layer::SLBgplsTopoPrefixFAPM* _add = _internal_add_fapm();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoPrefixAttr.Fapm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixFAPM >&
SLBgplsTopoPrefixAttr::fapm() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoPrefixAttr.Fapm)
  return fapm_;
}

// .service_layer.SLBgplsTopoPrefixIgpFlags IgpFlags = 2;
inline bool SLBgplsTopoPrefixAttr::_internal_has_igpflags() const {
  return this != internal_default_instance() && igpflags_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_igpflags() const {
  return _internal_has_igpflags();
}
inline void SLBgplsTopoPrefixAttr::clear_igpflags() {
  if (GetArenaForAllocation() == nullptr && igpflags_ != nullptr) {
    delete igpflags_;
  }
  igpflags_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixIgpFlags& SLBgplsTopoPrefixAttr::_internal_igpflags() const {
  const ::service_layer::SLBgplsTopoPrefixIgpFlags* p = igpflags_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixIgpFlags&>(
      ::service_layer::_SLBgplsTopoPrefixIgpFlags_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixIgpFlags& SLBgplsTopoPrefixAttr::igpflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.IgpFlags)
  return _internal_igpflags();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_igpflags(
    ::service_layer::SLBgplsTopoPrefixIgpFlags* igpflags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(igpflags_);
  }
  igpflags_ = igpflags;
  if (igpflags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.IgpFlags)
}
inline ::service_layer::SLBgplsTopoPrefixIgpFlags* SLBgplsTopoPrefixAttr::release_igpflags() {
  
  ::service_layer::SLBgplsTopoPrefixIgpFlags* temp = igpflags_;
  igpflags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixIgpFlags* SLBgplsTopoPrefixAttr::unsafe_arena_release_igpflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.IgpFlags)
  
  ::service_layer::SLBgplsTopoPrefixIgpFlags* temp = igpflags_;
  igpflags_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixIgpFlags* SLBgplsTopoPrefixAttr::_internal_mutable_igpflags() {
  
  if (igpflags_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixIgpFlags>(GetArenaForAllocation());
    igpflags_ = p;
  }
  return igpflags_;
}
inline ::service_layer::SLBgplsTopoPrefixIgpFlags* SLBgplsTopoPrefixAttr::mutable_igpflags() {
  ::service_layer::SLBgplsTopoPrefixIgpFlags* _msg = _internal_mutable_igpflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.IgpFlags)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_igpflags(::service_layer::SLBgplsTopoPrefixIgpFlags* igpflags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete igpflags_;
  }
  if (igpflags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixIgpFlags>::GetOwningArena(igpflags);
    if (message_arena != submessage_arena) {
      igpflags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, igpflags, submessage_arena);
    }
    
  } else {
    
  }
  igpflags_ = igpflags;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.IgpFlags)
}

// repeated .service_layer.SLBgplsTopoPrefixIgpRouteTag IgpRouteTag = 3;
inline int SLBgplsTopoPrefixAttr::_internal_igproutetag_size() const {
  return igproutetag_.size();
}
inline int SLBgplsTopoPrefixAttr::igproutetag_size() const {
  return _internal_igproutetag_size();
}
inline void SLBgplsTopoPrefixAttr::clear_igproutetag() {
  igproutetag_.Clear();
}
inline ::service_layer::SLBgplsTopoPrefixIgpRouteTag* SLBgplsTopoPrefixAttr::mutable_igproutetag(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.IgpRouteTag)
  return igproutetag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >*
SLBgplsTopoPrefixAttr::mutable_igproutetag() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoPrefixAttr.IgpRouteTag)
  return &igproutetag_;
}
inline const ::service_layer::SLBgplsTopoPrefixIgpRouteTag& SLBgplsTopoPrefixAttr::_internal_igproutetag(int index) const {
  return igproutetag_.Get(index);
}
inline const ::service_layer::SLBgplsTopoPrefixIgpRouteTag& SLBgplsTopoPrefixAttr::igproutetag(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.IgpRouteTag)
  return _internal_igproutetag(index);
}
inline ::service_layer::SLBgplsTopoPrefixIgpRouteTag* SLBgplsTopoPrefixAttr::_internal_add_igproutetag() {
  return igproutetag_.Add();
}
inline ::service_layer::SLBgplsTopoPrefixIgpRouteTag* SLBgplsTopoPrefixAttr::add_igproutetag() {
  ::service_layer::SLBgplsTopoPrefixIgpRouteTag* _add = _internal_add_igproutetag();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoPrefixAttr.IgpRouteTag)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpRouteTag >&
SLBgplsTopoPrefixAttr::igproutetag() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoPrefixAttr.IgpRouteTag)
  return igproutetag_;
}

// repeated .service_layer.SLBgplsTopoPrefixIgpExtRouteTag IgpExtRouteTag = 4;
inline int SLBgplsTopoPrefixAttr::_internal_igpextroutetag_size() const {
  return igpextroutetag_.size();
}
inline int SLBgplsTopoPrefixAttr::igpextroutetag_size() const {
  return _internal_igpextroutetag_size();
}
inline void SLBgplsTopoPrefixAttr::clear_igpextroutetag() {
  igpextroutetag_.Clear();
}
inline ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* SLBgplsTopoPrefixAttr::mutable_igpextroutetag(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.IgpExtRouteTag)
  return igpextroutetag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >*
SLBgplsTopoPrefixAttr::mutable_igpextroutetag() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoPrefixAttr.IgpExtRouteTag)
  return &igpextroutetag_;
}
inline const ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag& SLBgplsTopoPrefixAttr::_internal_igpextroutetag(int index) const {
  return igpextroutetag_.Get(index);
}
inline const ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag& SLBgplsTopoPrefixAttr::igpextroutetag(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.IgpExtRouteTag)
  return _internal_igpextroutetag(index);
}
inline ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* SLBgplsTopoPrefixAttr::_internal_add_igpextroutetag() {
  return igpextroutetag_.Add();
}
inline ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* SLBgplsTopoPrefixAttr::add_igpextroutetag() {
  ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag* _add = _internal_add_igpextroutetag();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoPrefixAttr.IgpExtRouteTag)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixIgpExtRouteTag >&
SLBgplsTopoPrefixAttr::igpextroutetag() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoPrefixAttr.IgpExtRouteTag)
  return igpextroutetag_;
}

// .service_layer.SLBgplsTopoPrefixMetric Metric = 5;
inline bool SLBgplsTopoPrefixAttr::_internal_has_metric() const {
  return this != internal_default_instance() && metric_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_metric() const {
  return _internal_has_metric();
}
inline void SLBgplsTopoPrefixAttr::clear_metric() {
  if (GetArenaForAllocation() == nullptr && metric_ != nullptr) {
    delete metric_;
  }
  metric_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixMetric& SLBgplsTopoPrefixAttr::_internal_metric() const {
  const ::service_layer::SLBgplsTopoPrefixMetric* p = metric_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixMetric&>(
      ::service_layer::_SLBgplsTopoPrefixMetric_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixMetric& SLBgplsTopoPrefixAttr::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.Metric)
  return _internal_metric();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_metric(
    ::service_layer::SLBgplsTopoPrefixMetric* metric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric_);
  }
  metric_ = metric;
  if (metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.Metric)
}
inline ::service_layer::SLBgplsTopoPrefixMetric* SLBgplsTopoPrefixAttr::release_metric() {
  
  ::service_layer::SLBgplsTopoPrefixMetric* temp = metric_;
  metric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixMetric* SLBgplsTopoPrefixAttr::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.Metric)
  
  ::service_layer::SLBgplsTopoPrefixMetric* temp = metric_;
  metric_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixMetric* SLBgplsTopoPrefixAttr::_internal_mutable_metric() {
  
  if (metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixMetric>(GetArenaForAllocation());
    metric_ = p;
  }
  return metric_;
}
inline ::service_layer::SLBgplsTopoPrefixMetric* SLBgplsTopoPrefixAttr::mutable_metric() {
  ::service_layer::SLBgplsTopoPrefixMetric* _msg = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.Metric)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_metric(::service_layer::SLBgplsTopoPrefixMetric* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metric_;
  }
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixMetric>::GetOwningArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.Metric)
}

// .service_layer.SLBgplsTopoPrefixOspfFwdAddr OspfFwdAddr = 6;
inline bool SLBgplsTopoPrefixAttr::_internal_has_ospffwdaddr() const {
  return this != internal_default_instance() && ospffwdaddr_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_ospffwdaddr() const {
  return _internal_has_ospffwdaddr();
}
inline void SLBgplsTopoPrefixAttr::clear_ospffwdaddr() {
  if (GetArenaForAllocation() == nullptr && ospffwdaddr_ != nullptr) {
    delete ospffwdaddr_;
  }
  ospffwdaddr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr& SLBgplsTopoPrefixAttr::_internal_ospffwdaddr() const {
  const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* p = ospffwdaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr&>(
      ::service_layer::_SLBgplsTopoPrefixOspfFwdAddr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixOspfFwdAddr& SLBgplsTopoPrefixAttr::ospffwdaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.OspfFwdAddr)
  return _internal_ospffwdaddr();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_ospffwdaddr(
    ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* ospffwdaddr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ospffwdaddr_);
  }
  ospffwdaddr_ = ospffwdaddr;
  if (ospffwdaddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.OspfFwdAddr)
}
inline ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* SLBgplsTopoPrefixAttr::release_ospffwdaddr() {
  
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* temp = ospffwdaddr_;
  ospffwdaddr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* SLBgplsTopoPrefixAttr::unsafe_arena_release_ospffwdaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.OspfFwdAddr)
  
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* temp = ospffwdaddr_;
  ospffwdaddr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* SLBgplsTopoPrefixAttr::_internal_mutable_ospffwdaddr() {
  
  if (ospffwdaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixOspfFwdAddr>(GetArenaForAllocation());
    ospffwdaddr_ = p;
  }
  return ospffwdaddr_;
}
inline ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* SLBgplsTopoPrefixAttr::mutable_ospffwdaddr() {
  ::service_layer::SLBgplsTopoPrefixOspfFwdAddr* _msg = _internal_mutable_ospffwdaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.OspfFwdAddr)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_ospffwdaddr(::service_layer::SLBgplsTopoPrefixOspfFwdAddr* ospffwdaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ospffwdaddr_;
  }
  if (ospffwdaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixOspfFwdAddr>::GetOwningArena(ospffwdaddr);
    if (message_arena != submessage_arena) {
      ospffwdaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ospffwdaddr, submessage_arena);
    }
    
  } else {
    
  }
  ospffwdaddr_ = ospffwdaddr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.OspfFwdAddr)
}

// .service_layer.SLBgplsTopoPrefixOpaqueAttr OpaqueAttr = 7;
inline bool SLBgplsTopoPrefixAttr::_internal_has_opaqueattr() const {
  return this != internal_default_instance() && opaqueattr_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_opaqueattr() const {
  return _internal_has_opaqueattr();
}
inline void SLBgplsTopoPrefixAttr::clear_opaqueattr() {
  if (GetArenaForAllocation() == nullptr && opaqueattr_ != nullptr) {
    delete opaqueattr_;
  }
  opaqueattr_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixOpaqueAttr& SLBgplsTopoPrefixAttr::_internal_opaqueattr() const {
  const ::service_layer::SLBgplsTopoPrefixOpaqueAttr* p = opaqueattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixOpaqueAttr&>(
      ::service_layer::_SLBgplsTopoPrefixOpaqueAttr_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixOpaqueAttr& SLBgplsTopoPrefixAttr::opaqueattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.OpaqueAttr)
  return _internal_opaqueattr();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_opaqueattr(
    ::service_layer::SLBgplsTopoPrefixOpaqueAttr* opaqueattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opaqueattr_);
  }
  opaqueattr_ = opaqueattr;
  if (opaqueattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.OpaqueAttr)
}
inline ::service_layer::SLBgplsTopoPrefixOpaqueAttr* SLBgplsTopoPrefixAttr::release_opaqueattr() {
  
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* temp = opaqueattr_;
  opaqueattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixOpaqueAttr* SLBgplsTopoPrefixAttr::unsafe_arena_release_opaqueattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.OpaqueAttr)
  
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* temp = opaqueattr_;
  opaqueattr_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixOpaqueAttr* SLBgplsTopoPrefixAttr::_internal_mutable_opaqueattr() {
  
  if (opaqueattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixOpaqueAttr>(GetArenaForAllocation());
    opaqueattr_ = p;
  }
  return opaqueattr_;
}
inline ::service_layer::SLBgplsTopoPrefixOpaqueAttr* SLBgplsTopoPrefixAttr::mutable_opaqueattr() {
  ::service_layer::SLBgplsTopoPrefixOpaqueAttr* _msg = _internal_mutable_opaqueattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.OpaqueAttr)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_opaqueattr(::service_layer::SLBgplsTopoPrefixOpaqueAttr* opaqueattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete opaqueattr_;
  }
  if (opaqueattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixOpaqueAttr>::GetOwningArena(opaqueattr);
    if (message_arena != submessage_arena) {
      opaqueattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opaqueattr, submessage_arena);
    }
    
  } else {
    
  }
  opaqueattr_ = opaqueattr;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.OpaqueAttr)
}

// repeated .service_layer.SLBgplsTopoPrefixSid Sid = 8;
inline int SLBgplsTopoPrefixAttr::_internal_sid_size() const {
  return sid_.size();
}
inline int SLBgplsTopoPrefixAttr::sid_size() const {
  return _internal_sid_size();
}
inline void SLBgplsTopoPrefixAttr::clear_sid() {
  sid_.Clear();
}
inline ::service_layer::SLBgplsTopoPrefixSid* SLBgplsTopoPrefixAttr::mutable_sid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.Sid)
  return sid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixSid >*
SLBgplsTopoPrefixAttr::mutable_sid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoPrefixAttr.Sid)
  return &sid_;
}
inline const ::service_layer::SLBgplsTopoPrefixSid& SLBgplsTopoPrefixAttr::_internal_sid(int index) const {
  return sid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoPrefixSid& SLBgplsTopoPrefixAttr::sid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.Sid)
  return _internal_sid(index);
}
inline ::service_layer::SLBgplsTopoPrefixSid* SLBgplsTopoPrefixAttr::_internal_add_sid() {
  return sid_.Add();
}
inline ::service_layer::SLBgplsTopoPrefixSid* SLBgplsTopoPrefixAttr::add_sid() {
  ::service_layer::SLBgplsTopoPrefixSid* _add = _internal_add_sid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoPrefixAttr.Sid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoPrefixSid >&
SLBgplsTopoPrefixAttr::sid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoPrefixAttr.Sid)
  return sid_;
}

// .service_layer.SLBgplsTopoPrefixRange Range = 9;
inline bool SLBgplsTopoPrefixAttr::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_range() const {
  return _internal_has_range();
}
inline void SLBgplsTopoPrefixAttr::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixRange& SLBgplsTopoPrefixAttr::_internal_range() const {
  const ::service_layer::SLBgplsTopoPrefixRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixRange&>(
      ::service_layer::_SLBgplsTopoPrefixRange_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixRange& SLBgplsTopoPrefixAttr::range() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.Range)
  return _internal_range();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_range(
    ::service_layer::SLBgplsTopoPrefixRange* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.Range)
}
inline ::service_layer::SLBgplsTopoPrefixRange* SLBgplsTopoPrefixAttr::release_range() {
  
  ::service_layer::SLBgplsTopoPrefixRange* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixRange* SLBgplsTopoPrefixAttr::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.Range)
  
  ::service_layer::SLBgplsTopoPrefixRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixRange* SLBgplsTopoPrefixAttr::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixRange>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::service_layer::SLBgplsTopoPrefixRange* SLBgplsTopoPrefixAttr::mutable_range() {
  ::service_layer::SLBgplsTopoPrefixRange* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.Range)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_range(::service_layer::SLBgplsTopoPrefixRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixRange>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.Range)
}

// .service_layer.SLBgplsTopoPrefixSrv6Loc Srv6Loc = 10;
inline bool SLBgplsTopoPrefixAttr::_internal_has_srv6loc() const {
  return this != internal_default_instance() && srv6loc_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_srv6loc() const {
  return _internal_has_srv6loc();
}
inline void SLBgplsTopoPrefixAttr::clear_srv6loc() {
  if (GetArenaForAllocation() == nullptr && srv6loc_ != nullptr) {
    delete srv6loc_;
  }
  srv6loc_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixSrv6Loc& SLBgplsTopoPrefixAttr::_internal_srv6loc() const {
  const ::service_layer::SLBgplsTopoPrefixSrv6Loc* p = srv6loc_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixSrv6Loc&>(
      ::service_layer::_SLBgplsTopoPrefixSrv6Loc_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixSrv6Loc& SLBgplsTopoPrefixAttr::srv6loc() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.Srv6Loc)
  return _internal_srv6loc();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_srv6loc(
    ::service_layer::SLBgplsTopoPrefixSrv6Loc* srv6loc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6loc_);
  }
  srv6loc_ = srv6loc;
  if (srv6loc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.Srv6Loc)
}
inline ::service_layer::SLBgplsTopoPrefixSrv6Loc* SLBgplsTopoPrefixAttr::release_srv6loc() {
  
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* temp = srv6loc_;
  srv6loc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixSrv6Loc* SLBgplsTopoPrefixAttr::unsafe_arena_release_srv6loc() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.Srv6Loc)
  
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* temp = srv6loc_;
  srv6loc_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixSrv6Loc* SLBgplsTopoPrefixAttr::_internal_mutable_srv6loc() {
  
  if (srv6loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixSrv6Loc>(GetArenaForAllocation());
    srv6loc_ = p;
  }
  return srv6loc_;
}
inline ::service_layer::SLBgplsTopoPrefixSrv6Loc* SLBgplsTopoPrefixAttr::mutable_srv6loc() {
  ::service_layer::SLBgplsTopoPrefixSrv6Loc* _msg = _internal_mutable_srv6loc();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.Srv6Loc)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_srv6loc(::service_layer::SLBgplsTopoPrefixSrv6Loc* srv6loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6loc_;
  }
  if (srv6loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixSrv6Loc>::GetOwningArena(srv6loc);
    if (message_arena != submessage_arena) {
      srv6loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6loc, submessage_arena);
    }
    
  } else {
    
  }
  srv6loc_ = srv6loc;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.Srv6Loc)
}

// .service_layer.SLBgplsTopoPrefixAttrFlags AttrFlags = 11;
inline bool SLBgplsTopoPrefixAttr::_internal_has_attrflags() const {
  return this != internal_default_instance() && attrflags_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_attrflags() const {
  return _internal_has_attrflags();
}
inline void SLBgplsTopoPrefixAttr::clear_attrflags() {
  if (GetArenaForAllocation() == nullptr && attrflags_ != nullptr) {
    delete attrflags_;
  }
  attrflags_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixAttrFlags& SLBgplsTopoPrefixAttr::_internal_attrflags() const {
  const ::service_layer::SLBgplsTopoPrefixAttrFlags* p = attrflags_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixAttrFlags&>(
      ::service_layer::_SLBgplsTopoPrefixAttrFlags_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixAttrFlags& SLBgplsTopoPrefixAttr::attrflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.AttrFlags)
  return _internal_attrflags();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_attrflags(
    ::service_layer::SLBgplsTopoPrefixAttrFlags* attrflags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attrflags_);
  }
  attrflags_ = attrflags;
  if (attrflags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.AttrFlags)
}
inline ::service_layer::SLBgplsTopoPrefixAttrFlags* SLBgplsTopoPrefixAttr::release_attrflags() {
  
  ::service_layer::SLBgplsTopoPrefixAttrFlags* temp = attrflags_;
  attrflags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixAttrFlags* SLBgplsTopoPrefixAttr::unsafe_arena_release_attrflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.AttrFlags)
  
  ::service_layer::SLBgplsTopoPrefixAttrFlags* temp = attrflags_;
  attrflags_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixAttrFlags* SLBgplsTopoPrefixAttr::_internal_mutable_attrflags() {
  
  if (attrflags_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixAttrFlags>(GetArenaForAllocation());
    attrflags_ = p;
  }
  return attrflags_;
}
inline ::service_layer::SLBgplsTopoPrefixAttrFlags* SLBgplsTopoPrefixAttr::mutable_attrflags() {
  ::service_layer::SLBgplsTopoPrefixAttrFlags* _msg = _internal_mutable_attrflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.AttrFlags)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_attrflags(::service_layer::SLBgplsTopoPrefixAttrFlags* attrflags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attrflags_;
  }
  if (attrflags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixAttrFlags>::GetOwningArena(attrflags);
    if (message_arena != submessage_arena) {
      attrflags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attrflags, submessage_arena);
    }
    
  } else {
    
  }
  attrflags_ = attrflags;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.AttrFlags)
}

// .service_layer.SLBgplsTopoPrefixSrcRouterId SrcRouterId = 12;
inline bool SLBgplsTopoPrefixAttr::_internal_has_srcrouterid() const {
  return this != internal_default_instance() && srcrouterid_ != nullptr;
}
inline bool SLBgplsTopoPrefixAttr::has_srcrouterid() const {
  return _internal_has_srcrouterid();
}
inline void SLBgplsTopoPrefixAttr::clear_srcrouterid() {
  if (GetArenaForAllocation() == nullptr && srcrouterid_ != nullptr) {
    delete srcrouterid_;
  }
  srcrouterid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoPrefixSrcRouterId& SLBgplsTopoPrefixAttr::_internal_srcrouterid() const {
  const ::service_layer::SLBgplsTopoPrefixSrcRouterId* p = srcrouterid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoPrefixSrcRouterId&>(
      ::service_layer::_SLBgplsTopoPrefixSrcRouterId_default_instance_);
}
inline const ::service_layer::SLBgplsTopoPrefixSrcRouterId& SLBgplsTopoPrefixAttr::srcrouterid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.SrcRouterId)
  return _internal_srcrouterid();
}
inline void SLBgplsTopoPrefixAttr::unsafe_arena_set_allocated_srcrouterid(
    ::service_layer::SLBgplsTopoPrefixSrcRouterId* srcrouterid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srcrouterid_);
  }
  srcrouterid_ = srcrouterid;
  if (srcrouterid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoPrefixAttr.SrcRouterId)
}
inline ::service_layer::SLBgplsTopoPrefixSrcRouterId* SLBgplsTopoPrefixAttr::release_srcrouterid() {
  
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* temp = srcrouterid_;
  srcrouterid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixSrcRouterId* SLBgplsTopoPrefixAttr::unsafe_arena_release_srcrouterid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttr.SrcRouterId)
  
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* temp = srcrouterid_;
  srcrouterid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoPrefixSrcRouterId* SLBgplsTopoPrefixAttr::_internal_mutable_srcrouterid() {
  
  if (srcrouterid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoPrefixSrcRouterId>(GetArenaForAllocation());
    srcrouterid_ = p;
  }
  return srcrouterid_;
}
inline ::service_layer::SLBgplsTopoPrefixSrcRouterId* SLBgplsTopoPrefixAttr::mutable_srcrouterid() {
  ::service_layer::SLBgplsTopoPrefixSrcRouterId* _msg = _internal_mutable_srcrouterid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.SrcRouterId)
  return _msg;
}
inline void SLBgplsTopoPrefixAttr::set_allocated_srcrouterid(::service_layer::SLBgplsTopoPrefixSrcRouterId* srcrouterid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srcrouterid_;
  }
  if (srcrouterid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoPrefixSrcRouterId>::GetOwningArena(srcrouterid);
    if (message_arena != submessage_arena) {
      srcrouterid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcrouterid, submessage_arena);
    }
    
  } else {
    
  }
  srcrouterid_ = srcrouterid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttr.SrcRouterId)
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 13;
inline int SLBgplsTopoPrefixAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoPrefixAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoPrefixAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoPrefixAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoPrefixAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoPrefixAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoPrefixAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoPrefixAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoPrefixAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoPrefixAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoPrefixAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoPrefixAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoPrefixAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6SidAttr

// .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehavior = 1;
inline bool SLBgplsTopoSrv6SidAttr::_internal_has_endpointbehavior() const {
  return this != internal_default_instance() && endpointbehavior_ != nullptr;
}
inline bool SLBgplsTopoSrv6SidAttr::has_endpointbehavior() const {
  return _internal_has_endpointbehavior();
}
inline void SLBgplsTopoSrv6SidAttr::clear_endpointbehavior() {
  if (GetArenaForAllocation() == nullptr && endpointbehavior_ != nullptr) {
    delete endpointbehavior_;
  }
  endpointbehavior_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& SLBgplsTopoSrv6SidAttr::_internal_endpointbehavior() const {
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior* p = endpointbehavior_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6EndPointBehavior&>(
      ::service_layer::_SLBgplsTopoSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& SLBgplsTopoSrv6SidAttr::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidAttr.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLBgplsTopoSrv6SidAttr::unsafe_arena_set_allocated_endpointbehavior(
    ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehavior) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehavior_);
  }
  endpointbehavior_ = endpointbehavior;
  if (endpointbehavior) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6SidAttr.EndPointBehavior)
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6SidAttr::release_endpointbehavior() {
  
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6SidAttr::unsafe_arena_release_endpointbehavior() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6SidAttr.EndPointBehavior)
  
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6SidAttr::_internal_mutable_endpointbehavior() {
  
  if (endpointbehavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehavior_ = p;
  }
  return endpointbehavior_;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6SidAttr::mutable_endpointbehavior() {
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehavior();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidAttr.EndPointBehavior)
  return _msg;
}
inline void SLBgplsTopoSrv6SidAttr::set_allocated_endpointbehavior(::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehavior_;
  }
  if (endpointbehavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6EndPointBehavior>::GetOwningArena(endpointbehavior);
    if (message_arena != submessage_arena) {
      endpointbehavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehavior, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehavior_ = endpointbehavior;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6SidAttr.EndPointBehavior)
}

// repeated .service_layer.SLBgplsTopoSrv6BgpPeerNodeSid BgpPeerNodeSid = 2;
inline int SLBgplsTopoSrv6SidAttr::_internal_bgppeernodesid_size() const {
  return bgppeernodesid_.size();
}
inline int SLBgplsTopoSrv6SidAttr::bgppeernodesid_size() const {
  return _internal_bgppeernodesid_size();
}
inline void SLBgplsTopoSrv6SidAttr::clear_bgppeernodesid() {
  bgppeernodesid_.Clear();
}
inline ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* SLBgplsTopoSrv6SidAttr::mutable_bgppeernodesid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidAttr.BgpPeerNodeSid)
  return bgppeernodesid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid >*
SLBgplsTopoSrv6SidAttr::mutable_bgppeernodesid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrv6SidAttr.BgpPeerNodeSid)
  return &bgppeernodesid_;
}
inline const ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid& SLBgplsTopoSrv6SidAttr::_internal_bgppeernodesid(int index) const {
  return bgppeernodesid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid& SLBgplsTopoSrv6SidAttr::bgppeernodesid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidAttr.BgpPeerNodeSid)
  return _internal_bgppeernodesid(index);
}
inline ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* SLBgplsTopoSrv6SidAttr::_internal_add_bgppeernodesid() {
  return bgppeernodesid_.Add();
}
inline ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* SLBgplsTopoSrv6SidAttr::add_bgppeernodesid() {
  ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid* _add = _internal_add_bgppeernodesid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrv6SidAttr.BgpPeerNodeSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrv6BgpPeerNodeSid >&
SLBgplsTopoSrv6SidAttr::bgppeernodesid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrv6SidAttr.BgpPeerNodeSid)
  return bgppeernodesid_;
}

// .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 3;
inline bool SLBgplsTopoSrv6SidAttr::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLBgplsTopoSrv6SidAttr::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLBgplsTopoSrv6SidAttr::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6SidAttr::_internal_sidstruct() const {
  const ::service_layer::SLBgplsTopoSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidStruct&>(
      ::service_layer::_SLBgplsTopoSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6SidAttr::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidAttr.SidStruct)
  return _internal_sidstruct();
}
inline void SLBgplsTopoSrv6SidAttr::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6SidAttr.SidStruct)
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6SidAttr::release_sidstruct() {
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6SidAttr::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6SidAttr.SidStruct)
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6SidAttr::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6SidAttr::mutable_sidstruct() {
  ::service_layer::SLBgplsTopoSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidAttr.SidStruct)
  return _msg;
}
inline void SLBgplsTopoSrv6SidAttr::set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6SidAttr.SidStruct)
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 4;
inline int SLBgplsTopoSrv6SidAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoSrv6SidAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoSrv6SidAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoSrv6SidAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6SidAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoSrv6SidAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrv6SidAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoSrv6SidAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoSrv6SidAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoSrv6SidAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoSrv6SidAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrv6SidAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoSrv6SidAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrv6SidAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicyAttr

// .service_layer.SLBgplsTopoSrBindingSid SrBsid = 1;
inline bool SLBgplsTopoSrPolicyAttr::_internal_has_srbsid() const {
  return this != internal_default_instance() && srbsid_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyAttr::has_srbsid() const {
  return _internal_has_srbsid();
}
inline void SLBgplsTopoSrPolicyAttr::clear_srbsid() {
  if (GetArenaForAllocation() == nullptr && srbsid_ != nullptr) {
    delete srbsid_;
  }
  srbsid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrBindingSid& SLBgplsTopoSrPolicyAttr::_internal_srbsid() const {
  const ::service_layer::SLBgplsTopoSrBindingSid* p = srbsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrBindingSid&>(
      ::service_layer::_SLBgplsTopoSrBindingSid_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrBindingSid& SLBgplsTopoSrPolicyAttr::srbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.SrBsid)
  return _internal_srbsid();
}
inline void SLBgplsTopoSrPolicyAttr::unsafe_arena_set_allocated_srbsid(
    ::service_layer::SLBgplsTopoSrBindingSid* srbsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srbsid_);
  }
  srbsid_ = srbsid;
  if (srbsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.SrBsid)
}
inline ::service_layer::SLBgplsTopoSrBindingSid* SLBgplsTopoSrPolicyAttr::release_srbsid() {
  
  ::service_layer::SLBgplsTopoSrBindingSid* temp = srbsid_;
  srbsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrBindingSid* SLBgplsTopoSrPolicyAttr::unsafe_arena_release_srbsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyAttr.SrBsid)
  
  ::service_layer::SLBgplsTopoSrBindingSid* temp = srbsid_;
  srbsid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrBindingSid* SLBgplsTopoSrPolicyAttr::_internal_mutable_srbsid() {
  
  if (srbsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrBindingSid>(GetArenaForAllocation());
    srbsid_ = p;
  }
  return srbsid_;
}
inline ::service_layer::SLBgplsTopoSrBindingSid* SLBgplsTopoSrPolicyAttr::mutable_srbsid() {
  ::service_layer::SLBgplsTopoSrBindingSid* _msg = _internal_mutable_srbsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.SrBsid)
  return _msg;
}
inline void SLBgplsTopoSrPolicyAttr::set_allocated_srbsid(::service_layer::SLBgplsTopoSrBindingSid* srbsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srbsid_;
  }
  if (srbsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrBindingSid>::GetOwningArena(srbsid);
    if (message_arena != submessage_arena) {
      srbsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srbsid, submessage_arena);
    }
    
  } else {
    
  }
  srbsid_ = srbsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.SrBsid)
}

// .service_layer.SLBgplsTopoSrCpState CpState = 2;
inline bool SLBgplsTopoSrPolicyAttr::_internal_has_cpstate() const {
  return this != internal_default_instance() && cpstate_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyAttr::has_cpstate() const {
  return _internal_has_cpstate();
}
inline void SLBgplsTopoSrPolicyAttr::clear_cpstate() {
  if (GetArenaForAllocation() == nullptr && cpstate_ != nullptr) {
    delete cpstate_;
  }
  cpstate_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrCpState& SLBgplsTopoSrPolicyAttr::_internal_cpstate() const {
  const ::service_layer::SLBgplsTopoSrCpState* p = cpstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrCpState&>(
      ::service_layer::_SLBgplsTopoSrCpState_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrCpState& SLBgplsTopoSrPolicyAttr::cpstate() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.CpState)
  return _internal_cpstate();
}
inline void SLBgplsTopoSrPolicyAttr::unsafe_arena_set_allocated_cpstate(
    ::service_layer::SLBgplsTopoSrCpState* cpstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpstate_);
  }
  cpstate_ = cpstate;
  if (cpstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.CpState)
}
inline ::service_layer::SLBgplsTopoSrCpState* SLBgplsTopoSrPolicyAttr::release_cpstate() {
  
  ::service_layer::SLBgplsTopoSrCpState* temp = cpstate_;
  cpstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrCpState* SLBgplsTopoSrPolicyAttr::unsafe_arena_release_cpstate() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyAttr.CpState)
  
  ::service_layer::SLBgplsTopoSrCpState* temp = cpstate_;
  cpstate_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrCpState* SLBgplsTopoSrPolicyAttr::_internal_mutable_cpstate() {
  
  if (cpstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpState>(GetArenaForAllocation());
    cpstate_ = p;
  }
  return cpstate_;
}
inline ::service_layer::SLBgplsTopoSrCpState* SLBgplsTopoSrPolicyAttr::mutable_cpstate() {
  ::service_layer::SLBgplsTopoSrCpState* _msg = _internal_mutable_cpstate();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.CpState)
  return _msg;
}
inline void SLBgplsTopoSrPolicyAttr::set_allocated_cpstate(::service_layer::SLBgplsTopoSrCpState* cpstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpstate_;
  }
  if (cpstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrCpState>::GetOwningArena(cpstate);
    if (message_arena != submessage_arena) {
      cpstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpstate, submessage_arena);
    }
    
  } else {
    
  }
  cpstate_ = cpstate;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.CpState)
}

// .service_layer.SLBgplsTopoSrCpName CpName = 3;
inline bool SLBgplsTopoSrPolicyAttr::_internal_has_cpname() const {
  return this != internal_default_instance() && cpname_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyAttr::has_cpname() const {
  return _internal_has_cpname();
}
inline void SLBgplsTopoSrPolicyAttr::clear_cpname() {
  if (GetArenaForAllocation() == nullptr && cpname_ != nullptr) {
    delete cpname_;
  }
  cpname_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrCpName& SLBgplsTopoSrPolicyAttr::_internal_cpname() const {
  const ::service_layer::SLBgplsTopoSrCpName* p = cpname_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrCpName&>(
      ::service_layer::_SLBgplsTopoSrCpName_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrCpName& SLBgplsTopoSrPolicyAttr::cpname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.CpName)
  return _internal_cpname();
}
inline void SLBgplsTopoSrPolicyAttr::unsafe_arena_set_allocated_cpname(
    ::service_layer::SLBgplsTopoSrCpName* cpname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpname_);
  }
  cpname_ = cpname;
  if (cpname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.CpName)
}
inline ::service_layer::SLBgplsTopoSrCpName* SLBgplsTopoSrPolicyAttr::release_cpname() {
  
  ::service_layer::SLBgplsTopoSrCpName* temp = cpname_;
  cpname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrCpName* SLBgplsTopoSrPolicyAttr::unsafe_arena_release_cpname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyAttr.CpName)
  
  ::service_layer::SLBgplsTopoSrCpName* temp = cpname_;
  cpname_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrCpName* SLBgplsTopoSrPolicyAttr::_internal_mutable_cpname() {
  
  if (cpname_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpName>(GetArenaForAllocation());
    cpname_ = p;
  }
  return cpname_;
}
inline ::service_layer::SLBgplsTopoSrCpName* SLBgplsTopoSrPolicyAttr::mutable_cpname() {
  ::service_layer::SLBgplsTopoSrCpName* _msg = _internal_mutable_cpname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.CpName)
  return _msg;
}
inline void SLBgplsTopoSrPolicyAttr::set_allocated_cpname(::service_layer::SLBgplsTopoSrCpName* cpname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpname_;
  }
  if (cpname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrCpName>::GetOwningArena(cpname);
    if (message_arena != submessage_arena) {
      cpname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpname, submessage_arena);
    }
    
  } else {
    
  }
  cpname_ = cpname;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.CpName)
}

// .service_layer.SLBgplsTopoSrCpConstraints CpConstraints = 4;
inline bool SLBgplsTopoSrPolicyAttr::_internal_has_cpconstraints() const {
  return this != internal_default_instance() && cpconstraints_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyAttr::has_cpconstraints() const {
  return _internal_has_cpconstraints();
}
inline void SLBgplsTopoSrPolicyAttr::clear_cpconstraints() {
  if (GetArenaForAllocation() == nullptr && cpconstraints_ != nullptr) {
    delete cpconstraints_;
  }
  cpconstraints_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrCpConstraints& SLBgplsTopoSrPolicyAttr::_internal_cpconstraints() const {
  const ::service_layer::SLBgplsTopoSrCpConstraints* p = cpconstraints_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrCpConstraints&>(
      ::service_layer::_SLBgplsTopoSrCpConstraints_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrCpConstraints& SLBgplsTopoSrPolicyAttr::cpconstraints() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.CpConstraints)
  return _internal_cpconstraints();
}
inline void SLBgplsTopoSrPolicyAttr::unsafe_arena_set_allocated_cpconstraints(
    ::service_layer::SLBgplsTopoSrCpConstraints* cpconstraints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpconstraints_);
  }
  cpconstraints_ = cpconstraints;
  if (cpconstraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.CpConstraints)
}
inline ::service_layer::SLBgplsTopoSrCpConstraints* SLBgplsTopoSrPolicyAttr::release_cpconstraints() {
  
  ::service_layer::SLBgplsTopoSrCpConstraints* temp = cpconstraints_;
  cpconstraints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrCpConstraints* SLBgplsTopoSrPolicyAttr::unsafe_arena_release_cpconstraints() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyAttr.CpConstraints)
  
  ::service_layer::SLBgplsTopoSrCpConstraints* temp = cpconstraints_;
  cpconstraints_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrCpConstraints* SLBgplsTopoSrPolicyAttr::_internal_mutable_cpconstraints() {
  
  if (cpconstraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrCpConstraints>(GetArenaForAllocation());
    cpconstraints_ = p;
  }
  return cpconstraints_;
}
inline ::service_layer::SLBgplsTopoSrCpConstraints* SLBgplsTopoSrPolicyAttr::mutable_cpconstraints() {
  ::service_layer::SLBgplsTopoSrCpConstraints* _msg = _internal_mutable_cpconstraints();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.CpConstraints)
  return _msg;
}
inline void SLBgplsTopoSrPolicyAttr::set_allocated_cpconstraints(::service_layer::SLBgplsTopoSrCpConstraints* cpconstraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpconstraints_;
  }
  if (cpconstraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrCpConstraints>::GetOwningArena(cpconstraints);
    if (message_arena != submessage_arena) {
      cpconstraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpconstraints, submessage_arena);
    }
    
  } else {
    
  }
  cpconstraints_ = cpconstraints;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.CpConstraints)
}

// repeated .service_layer.SLBgplsTopoSrSegList SegLists = 5;
inline int SLBgplsTopoSrPolicyAttr::_internal_seglists_size() const {
  return seglists_.size();
}
inline int SLBgplsTopoSrPolicyAttr::seglists_size() const {
  return _internal_seglists_size();
}
inline void SLBgplsTopoSrPolicyAttr::clear_seglists() {
  seglists_.Clear();
}
inline ::service_layer::SLBgplsTopoSrSegList* SLBgplsTopoSrPolicyAttr::mutable_seglists(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.SegLists)
  return seglists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegList >*
SLBgplsTopoSrPolicyAttr::mutable_seglists() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrPolicyAttr.SegLists)
  return &seglists_;
}
inline const ::service_layer::SLBgplsTopoSrSegList& SLBgplsTopoSrPolicyAttr::_internal_seglists(int index) const {
  return seglists_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrSegList& SLBgplsTopoSrPolicyAttr::seglists(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.SegLists)
  return _internal_seglists(index);
}
inline ::service_layer::SLBgplsTopoSrSegList* SLBgplsTopoSrPolicyAttr::_internal_add_seglists() {
  return seglists_.Add();
}
inline ::service_layer::SLBgplsTopoSrSegList* SLBgplsTopoSrPolicyAttr::add_seglists() {
  ::service_layer::SLBgplsTopoSrSegList* _add = _internal_add_seglists();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrPolicyAttr.SegLists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegList >&
SLBgplsTopoSrPolicyAttr::seglists() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrPolicyAttr.SegLists)
  return seglists_;
}

// .service_layer.SLBgplsTopoSrv6BindingSid Srv6Bsid = 6;
inline bool SLBgplsTopoSrPolicyAttr::_internal_has_srv6bsid() const {
  return this != internal_default_instance() && srv6bsid_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyAttr::has_srv6bsid() const {
  return _internal_has_srv6bsid();
}
inline void SLBgplsTopoSrPolicyAttr::clear_srv6bsid() {
  if (GetArenaForAllocation() == nullptr && srv6bsid_ != nullptr) {
    delete srv6bsid_;
  }
  srv6bsid_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6BindingSid& SLBgplsTopoSrPolicyAttr::_internal_srv6bsid() const {
  const ::service_layer::SLBgplsTopoSrv6BindingSid* p = srv6bsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6BindingSid&>(
      ::service_layer::_SLBgplsTopoSrv6BindingSid_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6BindingSid& SLBgplsTopoSrPolicyAttr::srv6bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.Srv6Bsid)
  return _internal_srv6bsid();
}
inline void SLBgplsTopoSrPolicyAttr::unsafe_arena_set_allocated_srv6bsid(
    ::service_layer::SLBgplsTopoSrv6BindingSid* srv6bsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6bsid_);
  }
  srv6bsid_ = srv6bsid;
  if (srv6bsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.Srv6Bsid)
}
inline ::service_layer::SLBgplsTopoSrv6BindingSid* SLBgplsTopoSrPolicyAttr::release_srv6bsid() {
  
  ::service_layer::SLBgplsTopoSrv6BindingSid* temp = srv6bsid_;
  srv6bsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6BindingSid* SLBgplsTopoSrPolicyAttr::unsafe_arena_release_srv6bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyAttr.Srv6Bsid)
  
  ::service_layer::SLBgplsTopoSrv6BindingSid* temp = srv6bsid_;
  srv6bsid_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6BindingSid* SLBgplsTopoSrPolicyAttr::_internal_mutable_srv6bsid() {
  
  if (srv6bsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6BindingSid>(GetArenaForAllocation());
    srv6bsid_ = p;
  }
  return srv6bsid_;
}
inline ::service_layer::SLBgplsTopoSrv6BindingSid* SLBgplsTopoSrPolicyAttr::mutable_srv6bsid() {
  ::service_layer::SLBgplsTopoSrv6BindingSid* _msg = _internal_mutable_srv6bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.Srv6Bsid)
  return _msg;
}
inline void SLBgplsTopoSrPolicyAttr::set_allocated_srv6bsid(::service_layer::SLBgplsTopoSrv6BindingSid* srv6bsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6bsid_;
  }
  if (srv6bsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6BindingSid>::GetOwningArena(srv6bsid);
    if (message_arena != submessage_arena) {
      srv6bsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6bsid, submessage_arena);
    }
    
  } else {
    
  }
  srv6bsid_ = srv6bsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.Srv6Bsid)
}

// .service_layer.SLBgplsTopoSrPolicyName SrPolicyName = 7;
inline bool SLBgplsTopoSrPolicyAttr::_internal_has_srpolicyname() const {
  return this != internal_default_instance() && srpolicyname_ != nullptr;
}
inline bool SLBgplsTopoSrPolicyAttr::has_srpolicyname() const {
  return _internal_has_srpolicyname();
}
inline void SLBgplsTopoSrPolicyAttr::clear_srpolicyname() {
  if (GetArenaForAllocation() == nullptr && srpolicyname_ != nullptr) {
    delete srpolicyname_;
  }
  srpolicyname_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrPolicyName& SLBgplsTopoSrPolicyAttr::_internal_srpolicyname() const {
  const ::service_layer::SLBgplsTopoSrPolicyName* p = srpolicyname_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrPolicyName&>(
      ::service_layer::_SLBgplsTopoSrPolicyName_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrPolicyName& SLBgplsTopoSrPolicyAttr::srpolicyname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.SrPolicyName)
  return _internal_srpolicyname();
}
inline void SLBgplsTopoSrPolicyAttr::unsafe_arena_set_allocated_srpolicyname(
    ::service_layer::SLBgplsTopoSrPolicyName* srpolicyname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srpolicyname_);
  }
  srpolicyname_ = srpolicyname;
  if (srpolicyname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.SrPolicyName)
}
inline ::service_layer::SLBgplsTopoSrPolicyName* SLBgplsTopoSrPolicyAttr::release_srpolicyname() {
  
  ::service_layer::SLBgplsTopoSrPolicyName* temp = srpolicyname_;
  srpolicyname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyName* SLBgplsTopoSrPolicyAttr::unsafe_arena_release_srpolicyname() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyAttr.SrPolicyName)
  
  ::service_layer::SLBgplsTopoSrPolicyName* temp = srpolicyname_;
  srpolicyname_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrPolicyName* SLBgplsTopoSrPolicyAttr::_internal_mutable_srpolicyname() {
  
  if (srpolicyname_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrPolicyName>(GetArenaForAllocation());
    srpolicyname_ = p;
  }
  return srpolicyname_;
}
inline ::service_layer::SLBgplsTopoSrPolicyName* SLBgplsTopoSrPolicyAttr::mutable_srpolicyname() {
  ::service_layer::SLBgplsTopoSrPolicyName* _msg = _internal_mutable_srpolicyname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.SrPolicyName)
  return _msg;
}
inline void SLBgplsTopoSrPolicyAttr::set_allocated_srpolicyname(::service_layer::SLBgplsTopoSrPolicyName* srpolicyname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srpolicyname_;
  }
  if (srpolicyname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrPolicyName>::GetOwningArena(srpolicyname);
    if (message_arena != submessage_arena) {
      srpolicyname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srpolicyname, submessage_arena);
    }
    
  } else {
    
  }
  srpolicyname_ = srpolicyname;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyAttr.SrPolicyName)
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 8;
inline int SLBgplsTopoSrPolicyAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoSrPolicyAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoSrPolicyAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoSrPolicyAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoSrPolicyAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrPolicyAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoSrPolicyAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoSrPolicyAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoSrPolicyAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoSrPolicyAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrPolicyAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoSrPolicyAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrPolicyAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBplsTopoLinkLocRemId

// uint32 LocalId = 1;
inline void SLBplsTopoLinkLocRemId::clear_localid() {
  localid_ = 0u;
}
inline uint32_t SLBplsTopoLinkLocRemId::_internal_localid() const {
  return localid_;
}
inline uint32_t SLBplsTopoLinkLocRemId::localid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBplsTopoLinkLocRemId.LocalId)
  return _internal_localid();
}
inline void SLBplsTopoLinkLocRemId::_internal_set_localid(uint32_t value) {
  
  localid_ = value;
}
inline void SLBplsTopoLinkLocRemId::set_localid(uint32_t value) {
  _internal_set_localid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBplsTopoLinkLocRemId.LocalId)
}

// uint32 RemoteId = 2;
inline void SLBplsTopoLinkLocRemId::clear_remoteid() {
  remoteid_ = 0u;
}
inline uint32_t SLBplsTopoLinkLocRemId::_internal_remoteid() const {
  return remoteid_;
}
inline uint32_t SLBplsTopoLinkLocRemId::remoteid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBplsTopoLinkLocRemId.RemoteId)
  return _internal_remoteid();
}
inline void SLBplsTopoLinkLocRemId::_internal_set_remoteid(uint32_t value) {
  
  remoteid_ = value;
}
inline void SLBplsTopoLinkLocRemId::set_remoteid(uint32_t value) {
  _internal_set_remoteid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBplsTopoLinkLocRemId.RemoteId)
}

// -------------------------------------------------------------------

// SLBgplsTopoMtId

// uint32 MtId = 1;
inline void SLBgplsTopoMtId::clear_mtid() {
  mtid_ = 0u;
}
inline uint32_t SLBgplsTopoMtId::_internal_mtid() const {
  return mtid_;
}
inline uint32_t SLBgplsTopoMtId::mtid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoMtId.MtId)
  return _internal_mtid();
}
inline void SLBgplsTopoMtId::_internal_set_mtid(uint32_t value) {
  
  mtid_ = value;
}
inline void SLBgplsTopoMtId::set_mtid(uint32_t value) {
  _internal_set_mtid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoMtId.MtId)
}

// -------------------------------------------------------------------

// SLBgplsTopoNodeMsd

// uint32 Type = 1;
inline void SLBgplsTopoNodeMsd::clear_type() {
  type_ = 0u;
}
inline uint32_t SLBgplsTopoNodeMsd::_internal_type() const {
  return type_;
}
inline uint32_t SLBgplsTopoNodeMsd::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeMsd.Type)
  return _internal_type();
}
inline void SLBgplsTopoNodeMsd::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void SLBgplsTopoNodeMsd::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNodeMsd.Type)
}

// uint32 Value = 2;
inline void SLBgplsTopoNodeMsd::clear_value() {
  value_ = 0u;
}
inline uint32_t SLBgplsTopoNodeMsd::_internal_value() const {
  return value_;
}
inline uint32_t SLBgplsTopoNodeMsd::value() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeMsd.Value)
  return _internal_value();
}
inline void SLBgplsTopoNodeMsd::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void SLBgplsTopoNodeMsd::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNodeMsd.Value)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkMsd

// uint32 Type = 1;
inline void SLBgplsTopoLinkMsd::clear_type() {
  type_ = 0u;
}
inline uint32_t SLBgplsTopoLinkMsd::_internal_type() const {
  return type_;
}
inline uint32_t SLBgplsTopoLinkMsd::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkMsd.Type)
  return _internal_type();
}
inline void SLBgplsTopoLinkMsd::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void SLBgplsTopoLinkMsd::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkMsd.Type)
}

// uint32 Value = 2;
inline void SLBgplsTopoLinkMsd::clear_value() {
  value_ = 0u;
}
inline uint32_t SLBgplsTopoLinkMsd::_internal_value() const {
  return value_;
}
inline uint32_t SLBgplsTopoLinkMsd::value() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkMsd.Value)
  return _internal_value();
}
inline void SLBgplsTopoLinkMsd::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void SLBgplsTopoLinkMsd::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkMsd.Value)
}

// -------------------------------------------------------------------

// SLBgplsTopoNodeFlagBits

// bytes Flags = 1;
inline void SLBgplsTopoNodeFlagBits::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoNodeFlagBits::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeFlagBits.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoNodeFlagBits::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNodeFlagBits.Flags)
}
inline std::string* SLBgplsTopoNodeFlagBits::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeFlagBits.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoNodeFlagBits::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoNodeFlagBits::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoNodeFlagBits::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoNodeFlagBits::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeFlagBits.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoNodeFlagBits::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeFlagBits.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoNodeOpaqueAttr

// bytes OpaqueAttr = 1;
inline void SLBgplsTopoNodeOpaqueAttr::clear_opaqueattr() {
  opaqueattr_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoNodeOpaqueAttr::opaqueattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoNodeOpaqueAttr.OpaqueAttr)
  return _internal_opaqueattr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoNodeOpaqueAttr::set_opaqueattr(ArgT0&& arg0, ArgT... args) {
 
 opaqueattr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoNodeOpaqueAttr.OpaqueAttr)
}
inline std::string* SLBgplsTopoNodeOpaqueAttr::mutable_opaqueattr() {
  std::string* _s = _internal_mutable_opaqueattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoNodeOpaqueAttr.OpaqueAttr)
  return _s;
}
inline const std::string& SLBgplsTopoNodeOpaqueAttr::_internal_opaqueattr() const {
  return opaqueattr_.Get();
}
inline void SLBgplsTopoNodeOpaqueAttr::_internal_set_opaqueattr(const std::string& value) {
  
  opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoNodeOpaqueAttr::_internal_mutable_opaqueattr() {
  
  return opaqueattr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoNodeOpaqueAttr::release_opaqueattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoNodeOpaqueAttr.OpaqueAttr)
  return opaqueattr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoNodeOpaqueAttr::set_allocated_opaqueattr(std::string* opaqueattr) {
  if (opaqueattr != nullptr) {
    
  } else {
    
  }
  opaqueattr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaqueattr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaqueattr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoNodeOpaqueAttr.OpaqueAttr)
}

// -------------------------------------------------------------------

// SLBgplsNodeName

// string Name = 1;
inline void SLBgplsNodeName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLBgplsNodeName::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsNodeName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsNodeName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsNodeName.Name)
}
inline std::string* SLBgplsNodeName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsNodeName.Name)
  return _s;
}
inline const std::string& SLBgplsNodeName::_internal_name() const {
  return name_.Get();
}
inline void SLBgplsNodeName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsNodeName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsNodeName::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsNodeName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsNodeName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsNodeName.Name)
}

// -------------------------------------------------------------------

// SLBgplsTopoIsisAreaId

// bytes AreaId = 1;
inline void SLBgplsTopoIsisAreaId::clear_areaid() {
  areaid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoIsisAreaId::areaid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoIsisAreaId.AreaId)
  return _internal_areaid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoIsisAreaId::set_areaid(ArgT0&& arg0, ArgT... args) {
 
 areaid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoIsisAreaId.AreaId)
}
inline std::string* SLBgplsTopoIsisAreaId::mutable_areaid() {
  std::string* _s = _internal_mutable_areaid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoIsisAreaId.AreaId)
  return _s;
}
inline const std::string& SLBgplsTopoIsisAreaId::_internal_areaid() const {
  return areaid_.Get();
}
inline void SLBgplsTopoIsisAreaId::_internal_set_areaid(const std::string& value) {
  
  areaid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoIsisAreaId::_internal_mutable_areaid() {
  
  return areaid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoIsisAreaId::release_areaid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoIsisAreaId.AreaId)
  return areaid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoIsisAreaId::set_allocated_areaid(std::string* areaid) {
  if (areaid != nullptr) {
    
  } else {
    
  }
  areaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), areaid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (areaid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    areaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoIsisAreaId.AreaId)
}

// -------------------------------------------------------------------

// SLBgplsTopoLocalIpv4RouterId

// bytes RouterId = 1;
inline void SLBgplsTopoLocalIpv4RouterId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLocalIpv4RouterId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLocalIpv4RouterId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLocalIpv4RouterId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLocalIpv4RouterId.RouterId)
}
inline std::string* SLBgplsTopoLocalIpv4RouterId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLocalIpv4RouterId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoLocalIpv4RouterId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoLocalIpv4RouterId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLocalIpv4RouterId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLocalIpv4RouterId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLocalIpv4RouterId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLocalIpv4RouterId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLocalIpv4RouterId.RouterId)
}

// -------------------------------------------------------------------

// SLBgplsTopoLocalIpv6RouterId

// bytes RouterId = 1;
inline void SLBgplsTopoLocalIpv6RouterId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLocalIpv6RouterId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLocalIpv6RouterId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLocalIpv6RouterId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLocalIpv6RouterId.RouterId)
}
inline std::string* SLBgplsTopoLocalIpv6RouterId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLocalIpv6RouterId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoLocalIpv6RouterId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoLocalIpv6RouterId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLocalIpv6RouterId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLocalIpv6RouterId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLocalIpv6RouterId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLocalIpv6RouterId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLocalIpv6RouterId.RouterId)
}

// -------------------------------------------------------------------

// SLBgplsTopoRemoteIpv4RouterId

// bytes RouterId = 1;
inline void SLBgplsTopoRemoteIpv4RouterId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoRemoteIpv4RouterId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoRemoteIpv4RouterId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoRemoteIpv4RouterId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoRemoteIpv4RouterId.RouterId)
}
inline std::string* SLBgplsTopoRemoteIpv4RouterId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoRemoteIpv4RouterId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoRemoteIpv4RouterId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoRemoteIpv4RouterId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoRemoteIpv4RouterId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoRemoteIpv4RouterId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoRemoteIpv4RouterId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoRemoteIpv4RouterId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoRemoteIpv4RouterId.RouterId)
}

// -------------------------------------------------------------------

// SLBgplsTopoRemoteIpv6RouterId

// bytes RouterId = 1;
inline void SLBgplsTopoRemoteIpv6RouterId::clear_routerid() {
  routerid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoRemoteIpv6RouterId::routerid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoRemoteIpv6RouterId.RouterId)
  return _internal_routerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoRemoteIpv6RouterId::set_routerid(ArgT0&& arg0, ArgT... args) {
 
 routerid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoRemoteIpv6RouterId.RouterId)
}
inline std::string* SLBgplsTopoRemoteIpv6RouterId::mutable_routerid() {
  std::string* _s = _internal_mutable_routerid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoRemoteIpv6RouterId.RouterId)
  return _s;
}
inline const std::string& SLBgplsTopoRemoteIpv6RouterId::_internal_routerid() const {
  return routerid_.Get();
}
inline void SLBgplsTopoRemoteIpv6RouterId::_internal_set_routerid(const std::string& value) {
  
  routerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoRemoteIpv6RouterId::_internal_mutable_routerid() {
  
  return routerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoRemoteIpv6RouterId::release_routerid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoRemoteIpv6RouterId.RouterId)
  return routerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoRemoteIpv6RouterId::set_allocated_routerid(std::string* routerid) {
  if (routerid != nullptr) {
    
  } else {
    
  }
  routerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoRemoteIpv6RouterId.RouterId)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrgb

// uint32 StartLabel = 1;
inline void SLBgplsTopoSrgb::clear_startlabel() {
  startlabel_ = 0u;
}
inline uint32_t SLBgplsTopoSrgb::_internal_startlabel() const {
  return startlabel_;
}
inline uint32_t SLBgplsTopoSrgb::startlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrgb.StartLabel)
  return _internal_startlabel();
}
inline void SLBgplsTopoSrgb::_internal_set_startlabel(uint32_t value) {
  
  startlabel_ = value;
}
inline void SLBgplsTopoSrgb::set_startlabel(uint32_t value) {
  _internal_set_startlabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrgb.StartLabel)
}

// uint32 RangeSize = 2;
inline void SLBgplsTopoSrgb::clear_rangesize() {
  rangesize_ = 0u;
}
inline uint32_t SLBgplsTopoSrgb::_internal_rangesize() const {
  return rangesize_;
}
inline uint32_t SLBgplsTopoSrgb::rangesize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrgb.RangeSize)
  return _internal_rangesize();
}
inline void SLBgplsTopoSrgb::_internal_set_rangesize(uint32_t value) {
  
  rangesize_ = value;
}
inline void SLBgplsTopoSrgb::set_rangesize(uint32_t value) {
  _internal_set_rangesize(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrgb.RangeSize)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrgbIsisFlags

// bytes Flags = 1;
inline void SLBgplsTopoSrgbIsisFlags::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrgbIsisFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrgbIsisFlags.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrgbIsisFlags::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrgbIsisFlags.Flags)
}
inline std::string* SLBgplsTopoSrgbIsisFlags::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrgbIsisFlags.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrgbIsisFlags::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrgbIsisFlags::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrgbIsisFlags::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrgbIsisFlags::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrgbIsisFlags.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrgbIsisFlags::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrgbIsisFlags.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrAlgorithm

// bytes Algorithms = 1;
inline void SLBgplsTopoSrAlgorithm::clear_algorithms() {
  algorithms_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrAlgorithm::algorithms() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrAlgorithm.Algorithms)
  return _internal_algorithms();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrAlgorithm::set_algorithms(ArgT0&& arg0, ArgT... args) {
 
 algorithms_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrAlgorithm.Algorithms)
}
inline std::string* SLBgplsTopoSrAlgorithm::mutable_algorithms() {
  std::string* _s = _internal_mutable_algorithms();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrAlgorithm.Algorithms)
  return _s;
}
inline const std::string& SLBgplsTopoSrAlgorithm::_internal_algorithms() const {
  return algorithms_.Get();
}
inline void SLBgplsTopoSrAlgorithm::_internal_set_algorithms(const std::string& value) {
  
  algorithms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrAlgorithm::_internal_mutable_algorithms() {
  
  return algorithms_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrAlgorithm::release_algorithms() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrAlgorithm.Algorithms)
  return algorithms_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrAlgorithm::set_allocated_algorithms(std::string* algorithms) {
  if (algorithms != nullptr) {
    
  } else {
    
  }
  algorithms_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithms,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (algorithms_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    algorithms_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrAlgorithm.Algorithms)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrlb

// uint32 StartLabel = 1;
inline void SLBgplsTopoSrlb::clear_startlabel() {
  startlabel_ = 0u;
}
inline uint32_t SLBgplsTopoSrlb::_internal_startlabel() const {
  return startlabel_;
}
inline uint32_t SLBgplsTopoSrlb::startlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrlb.StartLabel)
  return _internal_startlabel();
}
inline void SLBgplsTopoSrlb::_internal_set_startlabel(uint32_t value) {
  
  startlabel_ = value;
}
inline void SLBgplsTopoSrlb::set_startlabel(uint32_t value) {
  _internal_set_startlabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrlb.StartLabel)
}

// uint32 RangeSize = 2;
inline void SLBgplsTopoSrlb::clear_rangesize() {
  rangesize_ = 0u;
}
inline uint32_t SLBgplsTopoSrlb::_internal_rangesize() const {
  return rangesize_;
}
inline uint32_t SLBgplsTopoSrlb::rangesize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrlb.RangeSize)
  return _internal_rangesize();
}
inline void SLBgplsTopoSrlb::_internal_set_rangesize(uint32_t value) {
  
  rangesize_ = value;
}
inline void SLBgplsTopoSrlb::set_rangesize(uint32_t value) {
  _internal_set_rangesize(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrlb.RangeSize)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6CapFlags

// bytes Flags = 1;
inline void SLBgplsTopoSrv6CapFlags::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6CapFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6CapFlags.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6CapFlags::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6CapFlags.Flags)
}
inline std::string* SLBgplsTopoSrv6CapFlags::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6CapFlags.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6CapFlags::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrv6CapFlags::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6CapFlags::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6CapFlags::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6CapFlags.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6CapFlags::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6CapFlags.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoFad

// bytes Algorithm = 1;
inline void SLBgplsTopoFad::clear_algorithm() {
  algorithm_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFad::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.Algorithm)
  return _internal_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFad::set_algorithm(ArgT0&& arg0, ArgT... args) {
 
 algorithm_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.Algorithm)
}
inline std::string* SLBgplsTopoFad::mutable_algorithm() {
  std::string* _s = _internal_mutable_algorithm();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.Algorithm)
  return _s;
}
inline const std::string& SLBgplsTopoFad::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SLBgplsTopoFad::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::release_algorithm() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.Algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFad::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (algorithm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.Algorithm)
}

// bytes MetricType = 2;
inline void SLBgplsTopoFad::clear_metrictype() {
  metrictype_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFad::metrictype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.MetricType)
  return _internal_metrictype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFad::set_metrictype(ArgT0&& arg0, ArgT... args) {
 
 metrictype_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.MetricType)
}
inline std::string* SLBgplsTopoFad::mutable_metrictype() {
  std::string* _s = _internal_mutable_metrictype();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.MetricType)
  return _s;
}
inline const std::string& SLBgplsTopoFad::_internal_metrictype() const {
  return metrictype_.Get();
}
inline void SLBgplsTopoFad::_internal_set_metrictype(const std::string& value) {
  
  metrictype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::_internal_mutable_metrictype() {
  
  return metrictype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::release_metrictype() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.MetricType)
  return metrictype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFad::set_allocated_metrictype(std::string* metrictype) {
  if (metrictype != nullptr) {
    
  } else {
    
  }
  metrictype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metrictype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metrictype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metrictype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.MetricType)
}

// bytes CalcType = 3;
inline void SLBgplsTopoFad::clear_calctype() {
  calctype_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFad::calctype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.CalcType)
  return _internal_calctype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFad::set_calctype(ArgT0&& arg0, ArgT... args) {
 
 calctype_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.CalcType)
}
inline std::string* SLBgplsTopoFad::mutable_calctype() {
  std::string* _s = _internal_mutable_calctype();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.CalcType)
  return _s;
}
inline const std::string& SLBgplsTopoFad::_internal_calctype() const {
  return calctype_.Get();
}
inline void SLBgplsTopoFad::_internal_set_calctype(const std::string& value) {
  
  calctype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::_internal_mutable_calctype() {
  
  return calctype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::release_calctype() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.CalcType)
  return calctype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFad::set_allocated_calctype(std::string* calctype) {
  if (calctype != nullptr) {
    
  } else {
    
  }
  calctype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calctype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (calctype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    calctype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.CalcType)
}

// bytes Priority = 4;
inline void SLBgplsTopoFad::clear_priority() {
  priority_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFad::priority() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.Priority)
  return _internal_priority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFad::set_priority(ArgT0&& arg0, ArgT... args) {
 
 priority_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.Priority)
}
inline std::string* SLBgplsTopoFad::mutable_priority() {
  std::string* _s = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.Priority)
  return _s;
}
inline const std::string& SLBgplsTopoFad::_internal_priority() const {
  return priority_.Get();
}
inline void SLBgplsTopoFad::_internal_set_priority(const std::string& value) {
  
  priority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::_internal_mutable_priority() {
  
  return priority_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::release_priority() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.Priority)
  return priority_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFad::set_allocated_priority(std::string* priority) {
  if (priority != nullptr) {
    
  } else {
    
  }
  priority_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), priority,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (priority_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    priority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.Priority)
}

// repeated uint32 ExcAnyAff = 5;
inline int SLBgplsTopoFad::_internal_excanyaff_size() const {
  return excanyaff_.size();
}
inline int SLBgplsTopoFad::excanyaff_size() const {
  return _internal_excanyaff_size();
}
inline void SLBgplsTopoFad::clear_excanyaff() {
  excanyaff_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_excanyaff(int index) const {
  return excanyaff_.Get(index);
}
inline uint32_t SLBgplsTopoFad::excanyaff(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.ExcAnyAff)
  return _internal_excanyaff(index);
}
inline void SLBgplsTopoFad::set_excanyaff(int index, uint32_t value) {
  excanyaff_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.ExcAnyAff)
}
inline void SLBgplsTopoFad::_internal_add_excanyaff(uint32_t value) {
  excanyaff_.Add(value);
}
inline void SLBgplsTopoFad::add_excanyaff(uint32_t value) {
  _internal_add_excanyaff(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.ExcAnyAff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_excanyaff() const {
  return excanyaff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::excanyaff() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.ExcAnyAff)
  return _internal_excanyaff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_excanyaff() {
  return &excanyaff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_excanyaff() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.ExcAnyAff)
  return _internal_mutable_excanyaff();
}

// repeated uint32 IncAnyAff = 6;
inline int SLBgplsTopoFad::_internal_incanyaff_size() const {
  return incanyaff_.size();
}
inline int SLBgplsTopoFad::incanyaff_size() const {
  return _internal_incanyaff_size();
}
inline void SLBgplsTopoFad::clear_incanyaff() {
  incanyaff_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_incanyaff(int index) const {
  return incanyaff_.Get(index);
}
inline uint32_t SLBgplsTopoFad::incanyaff(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.IncAnyAff)
  return _internal_incanyaff(index);
}
inline void SLBgplsTopoFad::set_incanyaff(int index, uint32_t value) {
  incanyaff_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.IncAnyAff)
}
inline void SLBgplsTopoFad::_internal_add_incanyaff(uint32_t value) {
  incanyaff_.Add(value);
}
inline void SLBgplsTopoFad::add_incanyaff(uint32_t value) {
  _internal_add_incanyaff(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.IncAnyAff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_incanyaff() const {
  return incanyaff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::incanyaff() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.IncAnyAff)
  return _internal_incanyaff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_incanyaff() {
  return &incanyaff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_incanyaff() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.IncAnyAff)
  return _internal_mutable_incanyaff();
}

// repeated uint32 IncAllAff = 7;
inline int SLBgplsTopoFad::_internal_incallaff_size() const {
  return incallaff_.size();
}
inline int SLBgplsTopoFad::incallaff_size() const {
  return _internal_incallaff_size();
}
inline void SLBgplsTopoFad::clear_incallaff() {
  incallaff_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_incallaff(int index) const {
  return incallaff_.Get(index);
}
inline uint32_t SLBgplsTopoFad::incallaff(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.IncAllAff)
  return _internal_incallaff(index);
}
inline void SLBgplsTopoFad::set_incallaff(int index, uint32_t value) {
  incallaff_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.IncAllAff)
}
inline void SLBgplsTopoFad::_internal_add_incallaff(uint32_t value) {
  incallaff_.Add(value);
}
inline void SLBgplsTopoFad::add_incallaff(uint32_t value) {
  _internal_add_incallaff(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.IncAllAff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_incallaff() const {
  return incallaff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::incallaff() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.IncAllAff)
  return _internal_incallaff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_incallaff() {
  return &incallaff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_incallaff() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.IncAllAff)
  return _internal_mutable_incallaff();
}

// bytes Flags = 8;
inline void SLBgplsTopoFad::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFad::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFad::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.Flags)
}
inline std::string* SLBgplsTopoFad::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoFad::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoFad::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFad::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.Flags)
}

// repeated uint32 ExcSrlg = 9;
inline int SLBgplsTopoFad::_internal_excsrlg_size() const {
  return excsrlg_.size();
}
inline int SLBgplsTopoFad::excsrlg_size() const {
  return _internal_excsrlg_size();
}
inline void SLBgplsTopoFad::clear_excsrlg() {
  excsrlg_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_excsrlg(int index) const {
  return excsrlg_.Get(index);
}
inline uint32_t SLBgplsTopoFad::excsrlg(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.ExcSrlg)
  return _internal_excsrlg(index);
}
inline void SLBgplsTopoFad::set_excsrlg(int index, uint32_t value) {
  excsrlg_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.ExcSrlg)
}
inline void SLBgplsTopoFad::_internal_add_excsrlg(uint32_t value) {
  excsrlg_.Add(value);
}
inline void SLBgplsTopoFad::add_excsrlg(uint32_t value) {
  _internal_add_excsrlg(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.ExcSrlg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_excsrlg() const {
  return excsrlg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::excsrlg() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.ExcSrlg)
  return _internal_excsrlg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_excsrlg() {
  return &excsrlg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_excsrlg() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.ExcSrlg)
  return _internal_mutable_excsrlg();
}

// .service_layer.SLBgplsTopoFadUnsuppTlv UnsuppTlv = 15;
inline bool SLBgplsTopoFad::_internal_has_unsupptlv() const {
  return this != internal_default_instance() && unsupptlv_ != nullptr;
}
inline bool SLBgplsTopoFad::has_unsupptlv() const {
  return _internal_has_unsupptlv();
}
inline void SLBgplsTopoFad::clear_unsupptlv() {
  if (GetArenaForAllocation() == nullptr && unsupptlv_ != nullptr) {
    delete unsupptlv_;
  }
  unsupptlv_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoFadUnsuppTlv& SLBgplsTopoFad::_internal_unsupptlv() const {
  const ::service_layer::SLBgplsTopoFadUnsuppTlv* p = unsupptlv_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoFadUnsuppTlv&>(
      ::service_layer::_SLBgplsTopoFadUnsuppTlv_default_instance_);
}
inline const ::service_layer::SLBgplsTopoFadUnsuppTlv& SLBgplsTopoFad::unsupptlv() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.UnsuppTlv)
  return _internal_unsupptlv();
}
inline void SLBgplsTopoFad::unsafe_arena_set_allocated_unsupptlv(
    ::service_layer::SLBgplsTopoFadUnsuppTlv* unsupptlv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsupptlv_);
  }
  unsupptlv_ = unsupptlv;
  if (unsupptlv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoFad.UnsuppTlv)
}
inline ::service_layer::SLBgplsTopoFadUnsuppTlv* SLBgplsTopoFad::release_unsupptlv() {
  
  ::service_layer::SLBgplsTopoFadUnsuppTlv* temp = unsupptlv_;
  unsupptlv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoFadUnsuppTlv* SLBgplsTopoFad::unsafe_arena_release_unsupptlv() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.UnsuppTlv)
  
  ::service_layer::SLBgplsTopoFadUnsuppTlv* temp = unsupptlv_;
  unsupptlv_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoFadUnsuppTlv* SLBgplsTopoFad::_internal_mutable_unsupptlv() {
  
  if (unsupptlv_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoFadUnsuppTlv>(GetArenaForAllocation());
    unsupptlv_ = p;
  }
  return unsupptlv_;
}
inline ::service_layer::SLBgplsTopoFadUnsuppTlv* SLBgplsTopoFad::mutable_unsupptlv() {
  ::service_layer::SLBgplsTopoFadUnsuppTlv* _msg = _internal_mutable_unsupptlv();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.UnsuppTlv)
  return _msg;
}
inline void SLBgplsTopoFad::set_allocated_unsupptlv(::service_layer::SLBgplsTopoFadUnsuppTlv* unsupptlv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unsupptlv_;
  }
  if (unsupptlv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoFadUnsuppTlv>::GetOwningArena(unsupptlv);
    if (message_arena != submessage_arena) {
      unsupptlv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsupptlv, submessage_arena);
    }
    
  } else {
    
  }
  unsupptlv_ = unsupptlv;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.UnsuppTlv)
}

// bytes ExcMinBw = 14;
inline void SLBgplsTopoFad::clear_excminbw() {
  excminbw_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFad::excminbw() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.ExcMinBw)
  return _internal_excminbw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFad::set_excminbw(ArgT0&& arg0, ArgT... args) {
 
 excminbw_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.ExcMinBw)
}
inline std::string* SLBgplsTopoFad::mutable_excminbw() {
  std::string* _s = _internal_mutable_excminbw();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFad.ExcMinBw)
  return _s;
}
inline const std::string& SLBgplsTopoFad::_internal_excminbw() const {
  return excminbw_.Get();
}
inline void SLBgplsTopoFad::_internal_set_excminbw(const std::string& value) {
  
  excminbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::_internal_mutable_excminbw() {
  
  return excminbw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFad::release_excminbw() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFad.ExcMinBw)
  return excminbw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFad::set_allocated_excminbw(std::string* excminbw) {
  if (excminbw != nullptr) {
    
  } else {
    
  }
  excminbw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), excminbw,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (excminbw_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    excminbw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFad.ExcMinBw)
}

// uint32 ExcMaxDelay = 13;
inline void SLBgplsTopoFad::clear_excmaxdelay() {
  excmaxdelay_ = 0u;
}
inline uint32_t SLBgplsTopoFad::_internal_excmaxdelay() const {
  return excmaxdelay_;
}
inline uint32_t SLBgplsTopoFad::excmaxdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.ExcMaxDelay)
  return _internal_excmaxdelay();
}
inline void SLBgplsTopoFad::_internal_set_excmaxdelay(uint32_t value) {
  
  excmaxdelay_ = value;
}
inline void SLBgplsTopoFad::set_excmaxdelay(uint32_t value) {
  _internal_set_excmaxdelay(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.ExcMaxDelay)
}

// repeated uint32 ExcAnyRevAff = 10;
inline int SLBgplsTopoFad::_internal_excanyrevaff_size() const {
  return excanyrevaff_.size();
}
inline int SLBgplsTopoFad::excanyrevaff_size() const {
  return _internal_excanyrevaff_size();
}
inline void SLBgplsTopoFad::clear_excanyrevaff() {
  excanyrevaff_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_excanyrevaff(int index) const {
  return excanyrevaff_.Get(index);
}
inline uint32_t SLBgplsTopoFad::excanyrevaff(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.ExcAnyRevAff)
  return _internal_excanyrevaff(index);
}
inline void SLBgplsTopoFad::set_excanyrevaff(int index, uint32_t value) {
  excanyrevaff_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.ExcAnyRevAff)
}
inline void SLBgplsTopoFad::_internal_add_excanyrevaff(uint32_t value) {
  excanyrevaff_.Add(value);
}
inline void SLBgplsTopoFad::add_excanyrevaff(uint32_t value) {
  _internal_add_excanyrevaff(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.ExcAnyRevAff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_excanyrevaff() const {
  return excanyrevaff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::excanyrevaff() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.ExcAnyRevAff)
  return _internal_excanyrevaff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_excanyrevaff() {
  return &excanyrevaff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_excanyrevaff() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.ExcAnyRevAff)
  return _internal_mutable_excanyrevaff();
}

// repeated uint32 IncAnyRevAff = 11;
inline int SLBgplsTopoFad::_internal_incanyrevaff_size() const {
  return incanyrevaff_.size();
}
inline int SLBgplsTopoFad::incanyrevaff_size() const {
  return _internal_incanyrevaff_size();
}
inline void SLBgplsTopoFad::clear_incanyrevaff() {
  incanyrevaff_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_incanyrevaff(int index) const {
  return incanyrevaff_.Get(index);
}
inline uint32_t SLBgplsTopoFad::incanyrevaff(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.IncAnyRevAff)
  return _internal_incanyrevaff(index);
}
inline void SLBgplsTopoFad::set_incanyrevaff(int index, uint32_t value) {
  incanyrevaff_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.IncAnyRevAff)
}
inline void SLBgplsTopoFad::_internal_add_incanyrevaff(uint32_t value) {
  incanyrevaff_.Add(value);
}
inline void SLBgplsTopoFad::add_incanyrevaff(uint32_t value) {
  _internal_add_incanyrevaff(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.IncAnyRevAff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_incanyrevaff() const {
  return incanyrevaff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::incanyrevaff() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.IncAnyRevAff)
  return _internal_incanyrevaff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_incanyrevaff() {
  return &incanyrevaff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_incanyrevaff() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.IncAnyRevAff)
  return _internal_mutable_incanyrevaff();
}

// repeated uint32 IncAllRevAff = 12;
inline int SLBgplsTopoFad::_internal_incallrevaff_size() const {
  return incallrevaff_.size();
}
inline int SLBgplsTopoFad::incallrevaff_size() const {
  return _internal_incallrevaff_size();
}
inline void SLBgplsTopoFad::clear_incallrevaff() {
  incallrevaff_.Clear();
}
inline uint32_t SLBgplsTopoFad::_internal_incallrevaff(int index) const {
  return incallrevaff_.Get(index);
}
inline uint32_t SLBgplsTopoFad::incallrevaff(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFad.IncAllRevAff)
  return _internal_incallrevaff(index);
}
inline void SLBgplsTopoFad::set_incallrevaff(int index, uint32_t value) {
  incallrevaff_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFad.IncAllRevAff)
}
inline void SLBgplsTopoFad::_internal_add_incallrevaff(uint32_t value) {
  incallrevaff_.Add(value);
}
inline void SLBgplsTopoFad::add_incallrevaff(uint32_t value) {
  _internal_add_incallrevaff(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoFad.IncAllRevAff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::_internal_incallrevaff() const {
  return incallrevaff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoFad::incallrevaff() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoFad.IncAllRevAff)
  return _internal_incallrevaff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::_internal_mutable_incallrevaff() {
  return &incallrevaff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoFad::mutable_incallrevaff() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoFad.IncAllRevAff)
  return _internal_mutable_incallrevaff();
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixFAPM

// uint32 FlexAlgo = 1;
inline void SLBgplsTopoPrefixFAPM::clear_flexalgo() {
  flexalgo_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixFAPM::_internal_flexalgo() const {
  return flexalgo_;
}
inline uint32_t SLBgplsTopoPrefixFAPM::flexalgo() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixFAPM.FlexAlgo)
  return _internal_flexalgo();
}
inline void SLBgplsTopoPrefixFAPM::_internal_set_flexalgo(uint32_t value) {
  
  flexalgo_ = value;
}
inline void SLBgplsTopoPrefixFAPM::set_flexalgo(uint32_t value) {
  _internal_set_flexalgo(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixFAPM.FlexAlgo)
}

// bytes Flags = 2;
inline void SLBgplsTopoPrefixFAPM::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixFAPM::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixFAPM.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixFAPM::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixFAPM.Flags)
}
inline std::string* SLBgplsTopoPrefixFAPM::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixFAPM.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixFAPM::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoPrefixFAPM::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixFAPM::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixFAPM::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixFAPM.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixFAPM::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixFAPM.Flags)
}

// uint32 Metric = 3;
inline void SLBgplsTopoPrefixFAPM::clear_metric() {
  metric_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixFAPM::_internal_metric() const {
  return metric_;
}
inline uint32_t SLBgplsTopoPrefixFAPM::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixFAPM.Metric)
  return _internal_metric();
}
inline void SLBgplsTopoPrefixFAPM::_internal_set_metric(uint32_t value) {
  
  metric_ = value;
}
inline void SLBgplsTopoPrefixFAPM::set_metric(uint32_t value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixFAPM.Metric)
}

// -------------------------------------------------------------------

// SLBgplsTopoFadUnsuppTlv

// .service_layer.SLBgplsTopoProtocol Protocol = 1;
inline void SLBgplsTopoFadUnsuppTlv::clear_protocol() {
  protocol_ = 0;
}
inline ::service_layer::SLBgplsTopoProtocol SLBgplsTopoFadUnsuppTlv::_internal_protocol() const {
  return static_cast< ::service_layer::SLBgplsTopoProtocol >(protocol_);
}
inline ::service_layer::SLBgplsTopoProtocol SLBgplsTopoFadUnsuppTlv::protocol() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFadUnsuppTlv.Protocol)
  return _internal_protocol();
}
inline void SLBgplsTopoFadUnsuppTlv::_internal_set_protocol(::service_layer::SLBgplsTopoProtocol value) {
  
  protocol_ = value;
}
inline void SLBgplsTopoFadUnsuppTlv::set_protocol(::service_layer::SLBgplsTopoProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFadUnsuppTlv.Protocol)
}

// bytes Types = 2;
inline void SLBgplsTopoFadUnsuppTlv::clear_types() {
  types_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoFadUnsuppTlv::types() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoFadUnsuppTlv.Types)
  return _internal_types();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoFadUnsuppTlv::set_types(ArgT0&& arg0, ArgT... args) {
 
 types_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoFadUnsuppTlv.Types)
}
inline std::string* SLBgplsTopoFadUnsuppTlv::mutable_types() {
  std::string* _s = _internal_mutable_types();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoFadUnsuppTlv.Types)
  return _s;
}
inline const std::string& SLBgplsTopoFadUnsuppTlv::_internal_types() const {
  return types_.Get();
}
inline void SLBgplsTopoFadUnsuppTlv::_internal_set_types(const std::string& value) {
  
  types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFadUnsuppTlv::_internal_mutable_types() {
  
  return types_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoFadUnsuppTlv::release_types() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoFadUnsuppTlv.Types)
  return types_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoFadUnsuppTlv::set_allocated_types(std::string* types) {
  if (types != nullptr) {
    
  } else {
    
  }
  types_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), types,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (types_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoFadUnsuppTlv.Types)
}

// -------------------------------------------------------------------

// SLBgplsTopoAdminGroup

// uint32 Group = 1;
inline void SLBgplsTopoAdminGroup::clear_group() {
  group_ = 0u;
}
inline uint32_t SLBgplsTopoAdminGroup::_internal_group() const {
  return group_;
}
inline uint32_t SLBgplsTopoAdminGroup::group() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAdminGroup.Group)
  return _internal_group();
}
inline void SLBgplsTopoAdminGroup::_internal_set_group(uint32_t value) {
  
  group_ = value;
}
inline void SLBgplsTopoAdminGroup::set_group(uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAdminGroup.Group)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkMaxBandwidth

// bytes Bandwidth = 1;
inline void SLBgplsTopoLinkMaxBandwidth::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkMaxBandwidth::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkMaxBandwidth.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkMaxBandwidth::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkMaxBandwidth.Bandwidth)
}
inline std::string* SLBgplsTopoLinkMaxBandwidth::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkMaxBandwidth.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoLinkMaxBandwidth::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoLinkMaxBandwidth::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkMaxBandwidth::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkMaxBandwidth::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkMaxBandwidth.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkMaxBandwidth::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkMaxBandwidth.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkMaxResvBandwidth

// bytes Bandwidth = 1;
inline void SLBgplsTopoLinkMaxResvBandwidth::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkMaxResvBandwidth::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkMaxResvBandwidth.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkMaxResvBandwidth::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkMaxResvBandwidth.Bandwidth)
}
inline std::string* SLBgplsTopoLinkMaxResvBandwidth::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkMaxResvBandwidth.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoLinkMaxResvBandwidth::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoLinkMaxResvBandwidth::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkMaxResvBandwidth::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkMaxResvBandwidth::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkMaxResvBandwidth.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkMaxResvBandwidth::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkMaxResvBandwidth.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkUnresvBandwidth

// uint32 Priority = 1;
inline void SLBgplsTopoLinkUnresvBandwidth::clear_priority() {
  priority_ = 0u;
}
inline uint32_t SLBgplsTopoLinkUnresvBandwidth::_internal_priority() const {
  return priority_;
}
inline uint32_t SLBgplsTopoLinkUnresvBandwidth::priority() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkUnresvBandwidth.Priority)
  return _internal_priority();
}
inline void SLBgplsTopoLinkUnresvBandwidth::_internal_set_priority(uint32_t value) {
  
  priority_ = value;
}
inline void SLBgplsTopoLinkUnresvBandwidth::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkUnresvBandwidth.Priority)
}

// bytes Bandwidth = 2;
inline void SLBgplsTopoLinkUnresvBandwidth::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkUnresvBandwidth::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkUnresvBandwidth.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkUnresvBandwidth::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkUnresvBandwidth.Bandwidth)
}
inline std::string* SLBgplsTopoLinkUnresvBandwidth::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkUnresvBandwidth.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoLinkUnresvBandwidth::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoLinkUnresvBandwidth::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkUnresvBandwidth::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkUnresvBandwidth::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkUnresvBandwidth.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkUnresvBandwidth::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkUnresvBandwidth.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkTeDefaultMetric

// uint32 Metric = 1;
inline void SLBgplsTopoLinkTeDefaultMetric::clear_metric() {
  metric_ = 0u;
}
inline uint32_t SLBgplsTopoLinkTeDefaultMetric::_internal_metric() const {
  return metric_;
}
inline uint32_t SLBgplsTopoLinkTeDefaultMetric::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkTeDefaultMetric.Metric)
  return _internal_metric();
}
inline void SLBgplsTopoLinkTeDefaultMetric::_internal_set_metric(uint32_t value) {
  
  metric_ = value;
}
inline void SLBgplsTopoLinkTeDefaultMetric::set_metric(uint32_t value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkTeDefaultMetric.Metric)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkProtectionType

// uint32 Mask = 1;
inline void SLBgplsTopoLinkProtectionType::clear_mask() {
  mask_ = 0u;
}
inline uint32_t SLBgplsTopoLinkProtectionType::_internal_mask() const {
  return mask_;
}
inline uint32_t SLBgplsTopoLinkProtectionType::mask() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkProtectionType.Mask)
  return _internal_mask();
}
inline void SLBgplsTopoLinkProtectionType::_internal_set_mask(uint32_t value) {
  
  mask_ = value;
}
inline void SLBgplsTopoLinkProtectionType::set_mask(uint32_t value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkProtectionType.Mask)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkMplsProtoMask

// bytes Mask = 1;
inline void SLBgplsTopoLinkMplsProtoMask::clear_mask() {
  mask_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkMplsProtoMask::mask() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkMplsProtoMask.Mask)
  return _internal_mask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkMplsProtoMask::set_mask(ArgT0&& arg0, ArgT... args) {
 
 mask_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkMplsProtoMask.Mask)
}
inline std::string* SLBgplsTopoLinkMplsProtoMask::mutable_mask() {
  std::string* _s = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkMplsProtoMask.Mask)
  return _s;
}
inline const std::string& SLBgplsTopoLinkMplsProtoMask::_internal_mask() const {
  return mask_.Get();
}
inline void SLBgplsTopoLinkMplsProtoMask::_internal_set_mask(const std::string& value) {
  
  mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkMplsProtoMask::_internal_mutable_mask() {
  
  return mask_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkMplsProtoMask::release_mask() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkMplsProtoMask.Mask)
  return mask_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkMplsProtoMask::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mask_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkMplsProtoMask.Mask)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkIgpMetric

// bytes Metric = 1;
inline void SLBgplsTopoLinkIgpMetric::clear_metric() {
  metric_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkIgpMetric::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkIgpMetric.Metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkIgpMetric::set_metric(ArgT0&& arg0, ArgT... args) {
 
 metric_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkIgpMetric.Metric)
}
inline std::string* SLBgplsTopoLinkIgpMetric::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkIgpMetric.Metric)
  return _s;
}
inline const std::string& SLBgplsTopoLinkIgpMetric::_internal_metric() const {
  return metric_.Get();
}
inline void SLBgplsTopoLinkIgpMetric::_internal_set_metric(const std::string& value) {
  
  metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkIgpMetric::_internal_mutable_metric() {
  
  return metric_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkIgpMetric::release_metric() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkIgpMetric.Metric)
  return metric_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkIgpMetric::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metric_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkIgpMetric.Metric)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkSrlg

// uint32 SrlgVal = 1;
inline void SLBgplsTopoLinkSrlg::clear_srlgval() {
  srlgval_ = 0u;
}
inline uint32_t SLBgplsTopoLinkSrlg::_internal_srlgval() const {
  return srlgval_;
}
inline uint32_t SLBgplsTopoLinkSrlg::srlgval() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkSrlg.SrlgVal)
  return _internal_srlgval();
}
inline void SLBgplsTopoLinkSrlg::_internal_set_srlgval(uint32_t value) {
  
  srlgval_ = value;
}
inline void SLBgplsTopoLinkSrlg::set_srlgval(uint32_t value) {
  _internal_set_srlgval(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkSrlg.SrlgVal)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkOpaqueAttr

// bytes OpaqueAttr = 1;
inline void SLBgplsTopoLinkOpaqueAttr::clear_opaqueattr() {
  opaqueattr_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkOpaqueAttr::opaqueattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkOpaqueAttr.OpaqueAttr)
  return _internal_opaqueattr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkOpaqueAttr::set_opaqueattr(ArgT0&& arg0, ArgT... args) {
 
 opaqueattr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkOpaqueAttr.OpaqueAttr)
}
inline std::string* SLBgplsTopoLinkOpaqueAttr::mutable_opaqueattr() {
  std::string* _s = _internal_mutable_opaqueattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkOpaqueAttr.OpaqueAttr)
  return _s;
}
inline const std::string& SLBgplsTopoLinkOpaqueAttr::_internal_opaqueattr() const {
  return opaqueattr_.Get();
}
inline void SLBgplsTopoLinkOpaqueAttr::_internal_set_opaqueattr(const std::string& value) {
  
  opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkOpaqueAttr::_internal_mutable_opaqueattr() {
  
  return opaqueattr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkOpaqueAttr::release_opaqueattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkOpaqueAttr.OpaqueAttr)
  return opaqueattr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkOpaqueAttr::set_allocated_opaqueattr(std::string* opaqueattr) {
  if (opaqueattr != nullptr) {
    
  } else {
    
  }
  opaqueattr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaqueattr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaqueattr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkOpaqueAttr.OpaqueAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoLinkName

// string Name = 1;
inline void SLBgplsTopoLinkName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLinkName::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLinkName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLinkName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLinkName.Name)
}
inline std::string* SLBgplsTopoLinkName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLinkName.Name)
  return _s;
}
inline const std::string& SLBgplsTopoLinkName::_internal_name() const {
  return name_.Get();
}
inline void SLBgplsTopoLinkName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLinkName::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLinkName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLinkName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLinkName.Name)
}

// -------------------------------------------------------------------

// SLBgplsTopoAdjSid

// uint32 LabelIndex = 1;
inline void SLBgplsTopoAdjSid::clear_labelindex() {
  labelindex_ = 0u;
}
inline uint32_t SLBgplsTopoAdjSid::_internal_labelindex() const {
  return labelindex_;
}
inline uint32_t SLBgplsTopoAdjSid::labelindex() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAdjSid.LabelIndex)
  return _internal_labelindex();
}
inline void SLBgplsTopoAdjSid::_internal_set_labelindex(uint32_t value) {
  
  labelindex_ = value;
}
inline void SLBgplsTopoAdjSid::set_labelindex(uint32_t value) {
  _internal_set_labelindex(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAdjSid.LabelIndex)
}

// .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 2;
inline void SLBgplsTopoAdjSid::clear_adjsidformat() {
  adjsidformat_ = 0;
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoAdjSid::_internal_adjsidformat() const {
  return static_cast< ::service_layer::SLBgplsTopoSidFormat >(adjsidformat_);
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoAdjSid::adjsidformat() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAdjSid.AdjSidFormat)
  return _internal_adjsidformat();
}
inline void SLBgplsTopoAdjSid::_internal_set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  
  adjsidformat_ = value;
}
inline void SLBgplsTopoAdjSid::set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  _internal_set_adjsidformat(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAdjSid.AdjSidFormat)
}

// bytes Flags = 3;
inline void SLBgplsTopoAdjSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoAdjSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAdjSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoAdjSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAdjSid.Flags)
}
inline std::string* SLBgplsTopoAdjSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAdjSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoAdjSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoAdjSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoAdjSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoAdjSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAdjSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoAdjSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAdjSid.Flags)
}

// uint32 Weight = 4;
inline void SLBgplsTopoAdjSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoAdjSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoAdjSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAdjSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoAdjSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoAdjSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAdjSid.Weight)
}

// -------------------------------------------------------------------

// SLBgplsTopoLanAdjSid

// .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
inline bool SLBgplsTopoLanAdjSid::_internal_has_neighbor() const {
  return this != internal_default_instance() && neighbor_ != nullptr;
}
inline bool SLBgplsTopoLanAdjSid::has_neighbor() const {
  return _internal_has_neighbor();
}
inline void SLBgplsTopoLanAdjSid::clear_neighbor() {
  if (GetArenaForAllocation() == nullptr && neighbor_ != nullptr) {
    delete neighbor_;
  }
  neighbor_ = nullptr;
}
inline const ::service_layer::SLBgpLsTopoNeighborId& SLBgplsTopoLanAdjSid::_internal_neighbor() const {
  const ::service_layer::SLBgpLsTopoNeighborId* p = neighbor_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpLsTopoNeighborId&>(
      ::service_layer::_SLBgpLsTopoNeighborId_default_instance_);
}
inline const ::service_layer::SLBgpLsTopoNeighborId& SLBgplsTopoLanAdjSid::neighbor() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLanAdjSid.Neighbor)
  return _internal_neighbor();
}
inline void SLBgplsTopoLanAdjSid::unsafe_arena_set_allocated_neighbor(
    ::service_layer::SLBgpLsTopoNeighborId* neighbor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neighbor_);
  }
  neighbor_ = neighbor;
  if (neighbor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoLanAdjSid.Neighbor)
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoLanAdjSid::release_neighbor() {
  
  ::service_layer::SLBgpLsTopoNeighborId* temp = neighbor_;
  neighbor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoLanAdjSid::unsafe_arena_release_neighbor() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLanAdjSid.Neighbor)
  
  ::service_layer::SLBgpLsTopoNeighborId* temp = neighbor_;
  neighbor_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoLanAdjSid::_internal_mutable_neighbor() {
  
  if (neighbor_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpLsTopoNeighborId>(GetArenaForAllocation());
    neighbor_ = p;
  }
  return neighbor_;
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoLanAdjSid::mutable_neighbor() {
  ::service_layer::SLBgpLsTopoNeighborId* _msg = _internal_mutable_neighbor();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLanAdjSid.Neighbor)
  return _msg;
}
inline void SLBgplsTopoLanAdjSid::set_allocated_neighbor(::service_layer::SLBgpLsTopoNeighborId* neighbor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete neighbor_;
  }
  if (neighbor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpLsTopoNeighborId>::GetOwningArena(neighbor);
    if (message_arena != submessage_arena) {
      neighbor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbor, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_ = neighbor;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLanAdjSid.Neighbor)
}

// uint32 LabelIndex = 2;
inline void SLBgplsTopoLanAdjSid::clear_labelindex() {
  labelindex_ = 0u;
}
inline uint32_t SLBgplsTopoLanAdjSid::_internal_labelindex() const {
  return labelindex_;
}
inline uint32_t SLBgplsTopoLanAdjSid::labelindex() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLanAdjSid.LabelIndex)
  return _internal_labelindex();
}
inline void SLBgplsTopoLanAdjSid::_internal_set_labelindex(uint32_t value) {
  
  labelindex_ = value;
}
inline void SLBgplsTopoLanAdjSid::set_labelindex(uint32_t value) {
  _internal_set_labelindex(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLanAdjSid.LabelIndex)
}

// .service_layer.SLBgplsTopoSidFormat AdjSidFormat = 3;
inline void SLBgplsTopoLanAdjSid::clear_adjsidformat() {
  adjsidformat_ = 0;
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoLanAdjSid::_internal_adjsidformat() const {
  return static_cast< ::service_layer::SLBgplsTopoSidFormat >(adjsidformat_);
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoLanAdjSid::adjsidformat() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLanAdjSid.AdjSidFormat)
  return _internal_adjsidformat();
}
inline void SLBgplsTopoLanAdjSid::_internal_set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  
  adjsidformat_ = value;
}
inline void SLBgplsTopoLanAdjSid::set_adjsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  _internal_set_adjsidformat(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLanAdjSid.AdjSidFormat)
}

// bytes Flags = 4;
inline void SLBgplsTopoLanAdjSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoLanAdjSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLanAdjSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoLanAdjSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLanAdjSid.Flags)
}
inline std::string* SLBgplsTopoLanAdjSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoLanAdjSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoLanAdjSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoLanAdjSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLanAdjSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoLanAdjSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoLanAdjSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoLanAdjSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoLanAdjSid.Flags)
}

// uint32 Weight = 5;
inline void SLBgplsTopoLanAdjSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoLanAdjSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoLanAdjSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoLanAdjSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoLanAdjSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoLanAdjSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoLanAdjSid.Weight)
}

// -------------------------------------------------------------------

// SLBgplsTopoBgpPeerNodeSid

// bytes Sid = 1;
inline void SLBgplsTopoBgpPeerNodeSid::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpPeerNodeSid::sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerNodeSid.Sid)
  return _internal_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpPeerNodeSid::set_sid(ArgT0&& arg0, ArgT... args) {
 
 sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerNodeSid.Sid)
}
inline std::string* SLBgplsTopoBgpPeerNodeSid::mutable_sid() {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpPeerNodeSid.Sid)
  return _s;
}
inline const std::string& SLBgplsTopoBgpPeerNodeSid::_internal_sid() const {
  return sid_.Get();
}
inline void SLBgplsTopoBgpPeerNodeSid::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerNodeSid::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerNodeSid::release_sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpPeerNodeSid.Sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpPeerNodeSid::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpPeerNodeSid.Sid)
}

// .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
inline void SLBgplsTopoBgpPeerNodeSid::clear_bgpsidformat() {
  bgpsidformat_ = 0;
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoBgpPeerNodeSid::_internal_bgpsidformat() const {
  return static_cast< ::service_layer::SLBgplsTopoSidFormat >(bgpsidformat_);
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoBgpPeerNodeSid::bgpsidformat() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerNodeSid.BgpSidFormat)
  return _internal_bgpsidformat();
}
inline void SLBgplsTopoBgpPeerNodeSid::_internal_set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  
  bgpsidformat_ = value;
}
inline void SLBgplsTopoBgpPeerNodeSid::set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  _internal_set_bgpsidformat(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerNodeSid.BgpSidFormat)
}

// bytes Flags = 3;
inline void SLBgplsTopoBgpPeerNodeSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpPeerNodeSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerNodeSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpPeerNodeSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerNodeSid.Flags)
}
inline std::string* SLBgplsTopoBgpPeerNodeSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpPeerNodeSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoBgpPeerNodeSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoBgpPeerNodeSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerNodeSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerNodeSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpPeerNodeSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpPeerNodeSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpPeerNodeSid.Flags)
}

// uint32 Weight = 4;
inline void SLBgplsTopoBgpPeerNodeSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoBgpPeerNodeSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoBgpPeerNodeSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerNodeSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoBgpPeerNodeSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoBgpPeerNodeSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerNodeSid.Weight)
}

// -------------------------------------------------------------------

// SLBgplsTopoBgpPeerAdjSid

// bytes Sid = 1;
inline void SLBgplsTopoBgpPeerAdjSid::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpPeerAdjSid::sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerAdjSid.Sid)
  return _internal_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpPeerAdjSid::set_sid(ArgT0&& arg0, ArgT... args) {
 
 sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerAdjSid.Sid)
}
inline std::string* SLBgplsTopoBgpPeerAdjSid::mutable_sid() {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpPeerAdjSid.Sid)
  return _s;
}
inline const std::string& SLBgplsTopoBgpPeerAdjSid::_internal_sid() const {
  return sid_.Get();
}
inline void SLBgplsTopoBgpPeerAdjSid::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerAdjSid::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerAdjSid::release_sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpPeerAdjSid.Sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpPeerAdjSid::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpPeerAdjSid.Sid)
}

// .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
inline void SLBgplsTopoBgpPeerAdjSid::clear_bgpsidformat() {
  bgpsidformat_ = 0;
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoBgpPeerAdjSid::_internal_bgpsidformat() const {
  return static_cast< ::service_layer::SLBgplsTopoSidFormat >(bgpsidformat_);
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoBgpPeerAdjSid::bgpsidformat() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerAdjSid.BgpSidFormat)
  return _internal_bgpsidformat();
}
inline void SLBgplsTopoBgpPeerAdjSid::_internal_set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  
  bgpsidformat_ = value;
}
inline void SLBgplsTopoBgpPeerAdjSid::set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  _internal_set_bgpsidformat(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerAdjSid.BgpSidFormat)
}

// bytes Flags = 3;
inline void SLBgplsTopoBgpPeerAdjSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpPeerAdjSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerAdjSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpPeerAdjSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerAdjSid.Flags)
}
inline std::string* SLBgplsTopoBgpPeerAdjSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpPeerAdjSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoBgpPeerAdjSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoBgpPeerAdjSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerAdjSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerAdjSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpPeerAdjSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpPeerAdjSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpPeerAdjSid.Flags)
}

// uint32 Weight = 4;
inline void SLBgplsTopoBgpPeerAdjSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoBgpPeerAdjSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoBgpPeerAdjSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerAdjSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoBgpPeerAdjSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoBgpPeerAdjSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerAdjSid.Weight)
}

// -------------------------------------------------------------------

// SLBgplsTopoBgpPeerSetSid

// bytes Sid = 1;
inline void SLBgplsTopoBgpPeerSetSid::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpPeerSetSid::sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerSetSid.Sid)
  return _internal_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpPeerSetSid::set_sid(ArgT0&& arg0, ArgT... args) {
 
 sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerSetSid.Sid)
}
inline std::string* SLBgplsTopoBgpPeerSetSid::mutable_sid() {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpPeerSetSid.Sid)
  return _s;
}
inline const std::string& SLBgplsTopoBgpPeerSetSid::_internal_sid() const {
  return sid_.Get();
}
inline void SLBgplsTopoBgpPeerSetSid::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerSetSid::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerSetSid::release_sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpPeerSetSid.Sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpPeerSetSid::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpPeerSetSid.Sid)
}

// .service_layer.SLBgplsTopoSidFormat BgpSidFormat = 2;
inline void SLBgplsTopoBgpPeerSetSid::clear_bgpsidformat() {
  bgpsidformat_ = 0;
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoBgpPeerSetSid::_internal_bgpsidformat() const {
  return static_cast< ::service_layer::SLBgplsTopoSidFormat >(bgpsidformat_);
}
inline ::service_layer::SLBgplsTopoSidFormat SLBgplsTopoBgpPeerSetSid::bgpsidformat() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerSetSid.BgpSidFormat)
  return _internal_bgpsidformat();
}
inline void SLBgplsTopoBgpPeerSetSid::_internal_set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  
  bgpsidformat_ = value;
}
inline void SLBgplsTopoBgpPeerSetSid::set_bgpsidformat(::service_layer::SLBgplsTopoSidFormat value) {
  _internal_set_bgpsidformat(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerSetSid.BgpSidFormat)
}

// bytes Flags = 3;
inline void SLBgplsTopoBgpPeerSetSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoBgpPeerSetSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerSetSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoBgpPeerSetSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerSetSid.Flags)
}
inline std::string* SLBgplsTopoBgpPeerSetSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoBgpPeerSetSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoBgpPeerSetSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoBgpPeerSetSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerSetSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoBgpPeerSetSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoBgpPeerSetSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoBgpPeerSetSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoBgpPeerSetSid.Flags)
}

// uint32 Weight = 4;
inline void SLBgplsTopoBgpPeerSetSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoBgpPeerSetSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoBgpPeerSetSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoBgpPeerSetSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoBgpPeerSetSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoBgpPeerSetSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoBgpPeerSetSid.Weight)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6EndXSid

// bytes Sid = 1;
inline void SLBgplsTopoSrv6EndXSid::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6EndXSid::sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndXSid.Sid)
  return _internal_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6EndXSid::set_sid(ArgT0&& arg0, ArgT... args) {
 
 sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndXSid.Sid)
}
inline std::string* SLBgplsTopoSrv6EndXSid::mutable_sid() {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6EndXSid.Sid)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6EndXSid::_internal_sid() const {
  return sid_.Get();
}
inline void SLBgplsTopoSrv6EndXSid::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6EndXSid::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6EndXSid::release_sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6EndXSid.Sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6EndXSid::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6EndXSid.Sid)
}

// uint32 Algorithm = 2;
inline void SLBgplsTopoSrv6EndXSid::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6EndXSid::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoSrv6EndXSid::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndXSid.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoSrv6EndXSid::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoSrv6EndXSid::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndXSid.Algorithm)
}

// bytes Flags = 3;
inline void SLBgplsTopoSrv6EndXSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6EndXSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndXSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6EndXSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndXSid.Flags)
}
inline std::string* SLBgplsTopoSrv6EndXSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6EndXSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6EndXSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrv6EndXSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6EndXSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6EndXSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6EndXSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6EndXSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6EndXSid.Flags)
}

// uint32 Weight = 4;
inline void SLBgplsTopoSrv6EndXSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6EndXSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoSrv6EndXSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndXSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoSrv6EndXSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoSrv6EndXSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndXSid.Weight)
}

// uint32 EndPointBehavior = 5;
inline void SLBgplsTopoSrv6EndXSid::clear_endpointbehavior() {
  endpointbehavior_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6EndXSid::_internal_endpointbehavior() const {
  return endpointbehavior_;
}
inline uint32_t SLBgplsTopoSrv6EndXSid::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndXSid.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLBgplsTopoSrv6EndXSid::_internal_set_endpointbehavior(uint32_t value) {
  
  endpointbehavior_ = value;
}
inline void SLBgplsTopoSrv6EndXSid::set_endpointbehavior(uint32_t value) {
  _internal_set_endpointbehavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndXSid.EndPointBehavior)
}

// .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 6;
inline bool SLBgplsTopoSrv6EndXSid::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLBgplsTopoSrv6EndXSid::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLBgplsTopoSrv6EndXSid::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6EndXSid::_internal_sidstruct() const {
  const ::service_layer::SLBgplsTopoSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidStruct&>(
      ::service_layer::_SLBgplsTopoSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6EndXSid::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndXSid.SidStruct)
  return _internal_sidstruct();
}
inline void SLBgplsTopoSrv6EndXSid::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6EndXSid.SidStruct)
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6EndXSid::release_sidstruct() {
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6EndXSid::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6EndXSid.SidStruct)
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6EndXSid::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6EndXSid::mutable_sidstruct() {
  ::service_layer::SLBgplsTopoSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6EndXSid.SidStruct)
  return _msg;
}
inline void SLBgplsTopoSrv6EndXSid::set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6EndXSid.SidStruct)
}

// -------------------------------------------------------------------

// SLBgpLsTopoNeighborId

// bytes Ipv4Addr = 1;
inline bool SLBgpLsTopoNeighborId::_internal_has_ipv4addr() const {
  return NeighborId_case() == kIpv4Addr;
}
inline bool SLBgpLsTopoNeighborId::has_ipv4addr() const {
  return _internal_has_ipv4addr();
}
inline void SLBgpLsTopoNeighborId::set_has_ipv4addr() {
  _oneof_case_[0] = kIpv4Addr;
}
inline void SLBgpLsTopoNeighborId::clear_ipv4addr() {
  if (_internal_has_ipv4addr()) {
    NeighborId_.ipv4addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_NeighborId();
  }
}
inline const std::string& SLBgpLsTopoNeighborId::ipv4addr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpLsTopoNeighborId.Ipv4Addr)
  return _internal_ipv4addr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgpLsTopoNeighborId::set_ipv4addr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4addr()) {
    clear_NeighborId();
    set_has_ipv4addr();
    NeighborId_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  NeighborId_.ipv4addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpLsTopoNeighborId.Ipv4Addr)
}
inline std::string* SLBgpLsTopoNeighborId::mutable_ipv4addr() {
  std::string* _s = _internal_mutable_ipv4addr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpLsTopoNeighborId.Ipv4Addr)
  return _s;
}
inline const std::string& SLBgpLsTopoNeighborId::_internal_ipv4addr() const {
  if (_internal_has_ipv4addr()) {
    return NeighborId_.ipv4addr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgpLsTopoNeighborId::_internal_set_ipv4addr(const std::string& value) {
  if (!_internal_has_ipv4addr()) {
    clear_NeighborId();
    set_has_ipv4addr();
    NeighborId_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  NeighborId_.ipv4addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpLsTopoNeighborId::_internal_mutable_ipv4addr() {
  if (!_internal_has_ipv4addr()) {
    clear_NeighborId();
    set_has_ipv4addr();
    NeighborId_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return NeighborId_.ipv4addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpLsTopoNeighborId::release_ipv4addr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpLsTopoNeighborId.Ipv4Addr)
  if (_internal_has_ipv4addr()) {
    clear_has_NeighborId();
    return NeighborId_.ipv4addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgpLsTopoNeighborId::set_allocated_ipv4addr(std::string* ipv4addr) {
  if (has_NeighborId()) {
    clear_NeighborId();
  }
  if (ipv4addr != nullptr) {
    set_has_ipv4addr();
    NeighborId_.ipv4addr_.UnsafeSetDefault(ipv4addr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4addr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpLsTopoNeighborId.Ipv4Addr)
}

// bytes SystemId = 2;
inline bool SLBgpLsTopoNeighborId::_internal_has_systemid() const {
  return NeighborId_case() == kSystemId;
}
inline bool SLBgpLsTopoNeighborId::has_systemid() const {
  return _internal_has_systemid();
}
inline void SLBgpLsTopoNeighborId::set_has_systemid() {
  _oneof_case_[0] = kSystemId;
}
inline void SLBgpLsTopoNeighborId::clear_systemid() {
  if (_internal_has_systemid()) {
    NeighborId_.systemid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_NeighborId();
  }
}
inline const std::string& SLBgpLsTopoNeighborId::systemid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgpLsTopoNeighborId.SystemId)
  return _internal_systemid();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgpLsTopoNeighborId::set_systemid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_systemid()) {
    clear_NeighborId();
    set_has_systemid();
    NeighborId_.systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  NeighborId_.systemid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgpLsTopoNeighborId.SystemId)
}
inline std::string* SLBgpLsTopoNeighborId::mutable_systemid() {
  std::string* _s = _internal_mutable_systemid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgpLsTopoNeighborId.SystemId)
  return _s;
}
inline const std::string& SLBgpLsTopoNeighborId::_internal_systemid() const {
  if (_internal_has_systemid()) {
    return NeighborId_.systemid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgpLsTopoNeighborId::_internal_set_systemid(const std::string& value) {
  if (!_internal_has_systemid()) {
    clear_NeighborId();
    set_has_systemid();
    NeighborId_.systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  NeighborId_.systemid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgpLsTopoNeighborId::_internal_mutable_systemid() {
  if (!_internal_has_systemid()) {
    clear_NeighborId();
    set_has_systemid();
    NeighborId_.systemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return NeighborId_.systemid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgpLsTopoNeighborId::release_systemid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgpLsTopoNeighborId.SystemId)
  if (_internal_has_systemid()) {
    clear_has_NeighborId();
    return NeighborId_.systemid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgpLsTopoNeighborId::set_allocated_systemid(std::string* systemid) {
  if (has_NeighborId()) {
    clear_NeighborId();
  }
  if (systemid != nullptr) {
    set_has_systemid();
    NeighborId_.systemid_.UnsafeSetDefault(systemid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(systemid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgpLsTopoNeighborId.SystemId)
}

inline bool SLBgpLsTopoNeighborId::has_NeighborId() const {
  return NeighborId_case() != NEIGHBORID_NOT_SET;
}
inline void SLBgpLsTopoNeighborId::clear_has_NeighborId() {
  _oneof_case_[0] = NEIGHBORID_NOT_SET;
}
inline SLBgpLsTopoNeighborId::NeighborIdCase SLBgpLsTopoNeighborId::NeighborId_case() const {
  return SLBgpLsTopoNeighborId::NeighborIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoSrv6LanEndXSid

// .service_layer.SLBgpLsTopoNeighborId Neighbor = 1;
inline bool SLBgplsTopoSrv6LanEndXSid::_internal_has_neighbor() const {
  return this != internal_default_instance() && neighbor_ != nullptr;
}
inline bool SLBgplsTopoSrv6LanEndXSid::has_neighbor() const {
  return _internal_has_neighbor();
}
inline void SLBgplsTopoSrv6LanEndXSid::clear_neighbor() {
  if (GetArenaForAllocation() == nullptr && neighbor_ != nullptr) {
    delete neighbor_;
  }
  neighbor_ = nullptr;
}
inline const ::service_layer::SLBgpLsTopoNeighborId& SLBgplsTopoSrv6LanEndXSid::_internal_neighbor() const {
  const ::service_layer::SLBgpLsTopoNeighborId* p = neighbor_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgpLsTopoNeighborId&>(
      ::service_layer::_SLBgpLsTopoNeighborId_default_instance_);
}
inline const ::service_layer::SLBgpLsTopoNeighborId& SLBgplsTopoSrv6LanEndXSid::neighbor() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.Neighbor)
  return _internal_neighbor();
}
inline void SLBgplsTopoSrv6LanEndXSid::unsafe_arena_set_allocated_neighbor(
    ::service_layer::SLBgpLsTopoNeighborId* neighbor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neighbor_);
  }
  neighbor_ = neighbor;
  if (neighbor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6LanEndXSid.Neighbor)
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoSrv6LanEndXSid::release_neighbor() {
  
  ::service_layer::SLBgpLsTopoNeighborId* temp = neighbor_;
  neighbor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoSrv6LanEndXSid::unsafe_arena_release_neighbor() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6LanEndXSid.Neighbor)
  
  ::service_layer::SLBgpLsTopoNeighborId* temp = neighbor_;
  neighbor_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoSrv6LanEndXSid::_internal_mutable_neighbor() {
  
  if (neighbor_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgpLsTopoNeighborId>(GetArenaForAllocation());
    neighbor_ = p;
  }
  return neighbor_;
}
inline ::service_layer::SLBgpLsTopoNeighborId* SLBgplsTopoSrv6LanEndXSid::mutable_neighbor() {
  ::service_layer::SLBgpLsTopoNeighborId* _msg = _internal_mutable_neighbor();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6LanEndXSid.Neighbor)
  return _msg;
}
inline void SLBgplsTopoSrv6LanEndXSid::set_allocated_neighbor(::service_layer::SLBgpLsTopoNeighborId* neighbor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete neighbor_;
  }
  if (neighbor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgpLsTopoNeighborId>::GetOwningArena(neighbor);
    if (message_arena != submessage_arena) {
      neighbor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbor, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_ = neighbor;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6LanEndXSid.Neighbor)
}

// bytes Sid = 2;
inline void SLBgplsTopoSrv6LanEndXSid::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6LanEndXSid::sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.Sid)
  return _internal_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6LanEndXSid::set_sid(ArgT0&& arg0, ArgT... args) {
 
 sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6LanEndXSid.Sid)
}
inline std::string* SLBgplsTopoSrv6LanEndXSid::mutable_sid() {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6LanEndXSid.Sid)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6LanEndXSid::_internal_sid() const {
  return sid_.Get();
}
inline void SLBgplsTopoSrv6LanEndXSid::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6LanEndXSid::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6LanEndXSid::release_sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6LanEndXSid.Sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6LanEndXSid::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6LanEndXSid.Sid)
}

// uint32 Algorithm = 3;
inline void SLBgplsTopoSrv6LanEndXSid::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6LanEndXSid::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoSrv6LanEndXSid::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoSrv6LanEndXSid::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoSrv6LanEndXSid::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6LanEndXSid.Algorithm)
}

// bytes Flags = 4;
inline void SLBgplsTopoSrv6LanEndXSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6LanEndXSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6LanEndXSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6LanEndXSid.Flags)
}
inline std::string* SLBgplsTopoSrv6LanEndXSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6LanEndXSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6LanEndXSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrv6LanEndXSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6LanEndXSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6LanEndXSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6LanEndXSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6LanEndXSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6LanEndXSid.Flags)
}

// uint32 Weight = 5;
inline void SLBgplsTopoSrv6LanEndXSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6LanEndXSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoSrv6LanEndXSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoSrv6LanEndXSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoSrv6LanEndXSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6LanEndXSid.Weight)
}

// uint32 EndPointBehavior = 6;
inline void SLBgplsTopoSrv6LanEndXSid::clear_endpointbehavior() {
  endpointbehavior_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6LanEndXSid::_internal_endpointbehavior() const {
  return endpointbehavior_;
}
inline uint32_t SLBgplsTopoSrv6LanEndXSid::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLBgplsTopoSrv6LanEndXSid::_internal_set_endpointbehavior(uint32_t value) {
  
  endpointbehavior_ = value;
}
inline void SLBgplsTopoSrv6LanEndXSid::set_endpointbehavior(uint32_t value) {
  _internal_set_endpointbehavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6LanEndXSid.EndPointBehavior)
}

// .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
inline bool SLBgplsTopoSrv6LanEndXSid::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLBgplsTopoSrv6LanEndXSid::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLBgplsTopoSrv6LanEndXSid::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6LanEndXSid::_internal_sidstruct() const {
  const ::service_layer::SLBgplsTopoSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidStruct&>(
      ::service_layer::_SLBgplsTopoSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6LanEndXSid::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6LanEndXSid.SidStruct)
  return _internal_sidstruct();
}
inline void SLBgplsTopoSrv6LanEndXSid::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6LanEndXSid.SidStruct)
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6LanEndXSid::release_sidstruct() {
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6LanEndXSid::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6LanEndXSid.SidStruct)
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6LanEndXSid::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6LanEndXSid::mutable_sidstruct() {
  ::service_layer::SLBgplsTopoSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6LanEndXSid.SidStruct)
  return _msg;
}
inline void SLBgplsTopoSrv6LanEndXSid::set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6LanEndXSid.SidStruct)
}

// -------------------------------------------------------------------

// SLBgplsTopoUniLinkDelay

// uint32 Delay = 1;
inline void SLBgplsTopoUniLinkDelay::clear_delay() {
  delay_ = 0u;
}
inline uint32_t SLBgplsTopoUniLinkDelay::_internal_delay() const {
  return delay_;
}
inline uint32_t SLBgplsTopoUniLinkDelay::delay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniLinkDelay.Delay)
  return _internal_delay();
}
inline void SLBgplsTopoUniLinkDelay::_internal_set_delay(uint32_t value) {
  
  delay_ = value;
}
inline void SLBgplsTopoUniLinkDelay::set_delay(uint32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniLinkDelay.Delay)
}

// bytes Flags = 2;
inline void SLBgplsTopoUniLinkDelay::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUniLinkDelay::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniLinkDelay.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUniLinkDelay::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniLinkDelay.Flags)
}
inline std::string* SLBgplsTopoUniLinkDelay::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUniLinkDelay.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoUniLinkDelay::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoUniLinkDelay::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniLinkDelay::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniLinkDelay::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUniLinkDelay.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUniLinkDelay::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUniLinkDelay.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoMinMaxUniLinkDelay

// uint32 Min = 1;
inline void SLBgplsTopoMinMaxUniLinkDelay::clear_min() {
  min_ = 0u;
}
inline uint32_t SLBgplsTopoMinMaxUniLinkDelay::_internal_min() const {
  return min_;
}
inline uint32_t SLBgplsTopoMinMaxUniLinkDelay::min() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Min)
  return _internal_min();
}
inline void SLBgplsTopoMinMaxUniLinkDelay::_internal_set_min(uint32_t value) {
  
  min_ = value;
}
inline void SLBgplsTopoMinMaxUniLinkDelay::set_min(uint32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Min)
}

// uint32 Max = 2;
inline void SLBgplsTopoMinMaxUniLinkDelay::clear_max() {
  max_ = 0u;
}
inline uint32_t SLBgplsTopoMinMaxUniLinkDelay::_internal_max() const {
  return max_;
}
inline uint32_t SLBgplsTopoMinMaxUniLinkDelay::max() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Max)
  return _internal_max();
}
inline void SLBgplsTopoMinMaxUniLinkDelay::_internal_set_max(uint32_t value) {
  
  max_ = value;
}
inline void SLBgplsTopoMinMaxUniLinkDelay::set_max(uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Max)
}

// bytes Flags = 3;
inline void SLBgplsTopoMinMaxUniLinkDelay::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoMinMaxUniLinkDelay::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoMinMaxUniLinkDelay::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Flags)
}
inline std::string* SLBgplsTopoMinMaxUniLinkDelay::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoMinMaxUniLinkDelay::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoMinMaxUniLinkDelay::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoMinMaxUniLinkDelay::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoMinMaxUniLinkDelay::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoMinMaxUniLinkDelay::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoMinMaxUniLinkDelay.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoUniDelayVar

// uint32 Variation = 1;
inline void SLBgplsTopoUniDelayVar::clear_variation() {
  variation_ = 0u;
}
inline uint32_t SLBgplsTopoUniDelayVar::_internal_variation() const {
  return variation_;
}
inline uint32_t SLBgplsTopoUniDelayVar::variation() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniDelayVar.Variation)
  return _internal_variation();
}
inline void SLBgplsTopoUniDelayVar::_internal_set_variation(uint32_t value) {
  
  variation_ = value;
}
inline void SLBgplsTopoUniDelayVar::set_variation(uint32_t value) {
  _internal_set_variation(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniDelayVar.Variation)
}

// bytes Flags = 2;
inline void SLBgplsTopoUniDelayVar::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUniDelayVar::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniDelayVar.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUniDelayVar::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniDelayVar.Flags)
}
inline std::string* SLBgplsTopoUniDelayVar::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUniDelayVar.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoUniDelayVar::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoUniDelayVar::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniDelayVar::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniDelayVar::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUniDelayVar.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUniDelayVar::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUniDelayVar.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoUniLinkLoss

// uint32 Loss = 1;
inline void SLBgplsTopoUniLinkLoss::clear_loss() {
  loss_ = 0u;
}
inline uint32_t SLBgplsTopoUniLinkLoss::_internal_loss() const {
  return loss_;
}
inline uint32_t SLBgplsTopoUniLinkLoss::loss() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniLinkLoss.Loss)
  return _internal_loss();
}
inline void SLBgplsTopoUniLinkLoss::_internal_set_loss(uint32_t value) {
  
  loss_ = value;
}
inline void SLBgplsTopoUniLinkLoss::set_loss(uint32_t value) {
  _internal_set_loss(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniLinkLoss.Loss)
}

// bytes Flags = 2;
inline void SLBgplsTopoUniLinkLoss::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUniLinkLoss::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniLinkLoss.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUniLinkLoss::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniLinkLoss.Flags)
}
inline std::string* SLBgplsTopoUniLinkLoss::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUniLinkLoss.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoUniLinkLoss::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoUniLinkLoss::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniLinkLoss::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniLinkLoss::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUniLinkLoss.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUniLinkLoss::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUniLinkLoss.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoUniResBandwidth

// bytes Bandwidth = 1;
inline void SLBgplsTopoUniResBandwidth::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUniResBandwidth::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniResBandwidth.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUniResBandwidth::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniResBandwidth.Bandwidth)
}
inline std::string* SLBgplsTopoUniResBandwidth::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUniResBandwidth.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoUniResBandwidth::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoUniResBandwidth::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniResBandwidth::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniResBandwidth::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUniResBandwidth.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUniResBandwidth::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUniResBandwidth.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoUniAvailBandwidth

// bytes Bandwidth = 1;
inline void SLBgplsTopoUniAvailBandwidth::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUniAvailBandwidth::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniAvailBandwidth.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUniAvailBandwidth::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniAvailBandwidth.Bandwidth)
}
inline std::string* SLBgplsTopoUniAvailBandwidth::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUniAvailBandwidth.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoUniAvailBandwidth::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoUniAvailBandwidth::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniAvailBandwidth::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniAvailBandwidth::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUniAvailBandwidth.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUniAvailBandwidth::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUniAvailBandwidth.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoUniUtilBandwidth

// bytes Bandwidth = 1;
inline void SLBgplsTopoUniUtilBandwidth::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUniUtilBandwidth::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUniUtilBandwidth.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUniUtilBandwidth::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUniUtilBandwidth.Bandwidth)
}
inline std::string* SLBgplsTopoUniUtilBandwidth::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUniUtilBandwidth.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoUniUtilBandwidth::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoUniUtilBandwidth::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniUtilBandwidth::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUniUtilBandwidth::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUniUtilBandwidth.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUniUtilBandwidth::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUniUtilBandwidth.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoAslaAttr

// bytes Sabm = 1;
inline void SLBgplsTopoAslaAttr::clear_sabm() {
  sabm_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoAslaAttr::sabm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.Sabm)
  return _internal_sabm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoAslaAttr::set_sabm(ArgT0&& arg0, ArgT... args) {
 
 sabm_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAslaAttr.Sabm)
}
inline std::string* SLBgplsTopoAslaAttr::mutable_sabm() {
  std::string* _s = _internal_mutable_sabm();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.Sabm)
  return _s;
}
inline const std::string& SLBgplsTopoAslaAttr::_internal_sabm() const {
  return sabm_.Get();
}
inline void SLBgplsTopoAslaAttr::_internal_set_sabm(const std::string& value) {
  
  sabm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoAslaAttr::_internal_mutable_sabm() {
  
  return sabm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoAslaAttr::release_sabm() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.Sabm)
  return sabm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoAslaAttr::set_allocated_sabm(std::string* sabm) {
  if (sabm != nullptr) {
    
  } else {
    
  }
  sabm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sabm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sabm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.Sabm)
}

// bytes Udabm = 2;
inline void SLBgplsTopoAslaAttr::clear_udabm() {
  udabm_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoAslaAttr::udabm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.Udabm)
  return _internal_udabm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoAslaAttr::set_udabm(ArgT0&& arg0, ArgT... args) {
 
 udabm_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoAslaAttr.Udabm)
}
inline std::string* SLBgplsTopoAslaAttr::mutable_udabm() {
  std::string* _s = _internal_mutable_udabm();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.Udabm)
  return _s;
}
inline const std::string& SLBgplsTopoAslaAttr::_internal_udabm() const {
  return udabm_.Get();
}
inline void SLBgplsTopoAslaAttr::_internal_set_udabm(const std::string& value) {
  
  udabm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoAslaAttr::_internal_mutable_udabm() {
  
  return udabm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoAslaAttr::release_udabm() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.Udabm)
  return udabm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoAslaAttr::set_allocated_udabm(std::string* udabm) {
  if (udabm != nullptr) {
    
  } else {
    
  }
  udabm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udabm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (udabm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    udabm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.Udabm)
}

// .service_layer.SLBgplsTopoAdminGroup AdminGroup = 3;
inline bool SLBgplsTopoAslaAttr::_internal_has_admingroup() const {
  return this != internal_default_instance() && admingroup_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_admingroup() const {
  return _internal_has_admingroup();
}
inline void SLBgplsTopoAslaAttr::clear_admingroup() {
  if (GetArenaForAllocation() == nullptr && admingroup_ != nullptr) {
    delete admingroup_;
  }
  admingroup_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoAdminGroup& SLBgplsTopoAslaAttr::_internal_admingroup() const {
  const ::service_layer::SLBgplsTopoAdminGroup* p = admingroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoAdminGroup&>(
      ::service_layer::_SLBgplsTopoAdminGroup_default_instance_);
}
inline const ::service_layer::SLBgplsTopoAdminGroup& SLBgplsTopoAslaAttr::admingroup() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.AdminGroup)
  return _internal_admingroup();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_admingroup(
    ::service_layer::SLBgplsTopoAdminGroup* admingroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admingroup_);
  }
  admingroup_ = admingroup;
  if (admingroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.AdminGroup)
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoAslaAttr::release_admingroup() {
  
  ::service_layer::SLBgplsTopoAdminGroup* temp = admingroup_;
  admingroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoAslaAttr::unsafe_arena_release_admingroup() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.AdminGroup)
  
  ::service_layer::SLBgplsTopoAdminGroup* temp = admingroup_;
  admingroup_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoAslaAttr::_internal_mutable_admingroup() {
  
  if (admingroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoAdminGroup>(GetArenaForAllocation());
    admingroup_ = p;
  }
  return admingroup_;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoAslaAttr::mutable_admingroup() {
  ::service_layer::SLBgplsTopoAdminGroup* _msg = _internal_mutable_admingroup();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.AdminGroup)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_admingroup(::service_layer::SLBgplsTopoAdminGroup* admingroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete admingroup_;
  }
  if (admingroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoAdminGroup>::GetOwningArena(admingroup);
    if (message_arena != submessage_arena) {
      admingroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admingroup, submessage_arena);
    }
    
  } else {
    
  }
  admingroup_ = admingroup;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.AdminGroup)
}

// .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 4;
inline bool SLBgplsTopoAslaAttr::_internal_has_tedefmetric() const {
  return this != internal_default_instance() && tedefmetric_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_tedefmetric() const {
  return _internal_has_tedefmetric();
}
inline void SLBgplsTopoAslaAttr::clear_tedefmetric() {
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& SLBgplsTopoAslaAttr::_internal_tedefmetric() const {
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric* p = tedefmetric_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&>(
      ::service_layer::_SLBgplsTopoLinkTeDefaultMetric_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& SLBgplsTopoAslaAttr::tedefmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.TeDefMetric)
  return _internal_tedefmetric();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_tedefmetric(
    ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tedefmetric_);
  }
  tedefmetric_ = tedefmetric;
  if (tedefmetric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.TeDefMetric)
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoAslaAttr::release_tedefmetric() {
  
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* temp = tedefmetric_;
  tedefmetric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoAslaAttr::unsafe_arena_release_tedefmetric() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.TeDefMetric)
  
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* temp = tedefmetric_;
  tedefmetric_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoAslaAttr::_internal_mutable_tedefmetric() {
  
  if (tedefmetric_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkTeDefaultMetric>(GetArenaForAllocation());
    tedefmetric_ = p;
  }
  return tedefmetric_;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoAslaAttr::mutable_tedefmetric() {
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* _msg = _internal_mutable_tedefmetric();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.TeDefMetric)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_tedefmetric(::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tedefmetric_;
  }
  if (tedefmetric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkTeDefaultMetric>::GetOwningArena(tedefmetric);
    if (message_arena != submessage_arena) {
      tedefmetric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tedefmetric, submessage_arena);
    }
    
  } else {
    
  }
  tedefmetric_ = tedefmetric;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.TeDefMetric)
}

// repeated .service_layer.SLBgplsTopoLinkSrlg Srlg = 5;
inline int SLBgplsTopoAslaAttr::_internal_srlg_size() const {
  return srlg_.size();
}
inline int SLBgplsTopoAslaAttr::srlg_size() const {
  return _internal_srlg_size();
}
inline void SLBgplsTopoAslaAttr::clear_srlg() {
  srlg_.Clear();
}
inline ::service_layer::SLBgplsTopoLinkSrlg* SLBgplsTopoAslaAttr::mutable_srlg(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.Srlg)
  return srlg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >*
SLBgplsTopoAslaAttr::mutable_srlg() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoAslaAttr.Srlg)
  return &srlg_;
}
inline const ::service_layer::SLBgplsTopoLinkSrlg& SLBgplsTopoAslaAttr::_internal_srlg(int index) const {
  return srlg_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLinkSrlg& SLBgplsTopoAslaAttr::srlg(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.Srlg)
  return _internal_srlg(index);
}
inline ::service_layer::SLBgplsTopoLinkSrlg* SLBgplsTopoAslaAttr::_internal_add_srlg() {
  return srlg_.Add();
}
inline ::service_layer::SLBgplsTopoLinkSrlg* SLBgplsTopoAslaAttr::add_srlg() {
  ::service_layer::SLBgplsTopoLinkSrlg* _add = _internal_add_srlg();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoAslaAttr.Srlg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkSrlg >&
SLBgplsTopoAslaAttr::srlg() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoAslaAttr.Srlg)
  return srlg_;
}

// .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 6;
inline bool SLBgplsTopoAslaAttr::_internal_has_unilinkdelay() const {
  return this != internal_default_instance() && unilinkdelay_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_unilinkdelay() const {
  return _internal_has_unilinkdelay();
}
inline void SLBgplsTopoAslaAttr::clear_unilinkdelay() {
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniLinkDelay& SLBgplsTopoAslaAttr::_internal_unilinkdelay() const {
  const ::service_layer::SLBgplsTopoUniLinkDelay* p = unilinkdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniLinkDelay&>(
      ::service_layer::_SLBgplsTopoUniLinkDelay_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniLinkDelay& SLBgplsTopoAslaAttr::unilinkdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UniLinkDelay)
  return _internal_unilinkdelay();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_unilinkdelay(
    ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unilinkdelay_);
  }
  unilinkdelay_ = unilinkdelay;
  if (unilinkdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniLinkDelay)
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoAslaAttr::release_unilinkdelay() {
  
  ::service_layer::SLBgplsTopoUniLinkDelay* temp = unilinkdelay_;
  unilinkdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoAslaAttr::unsafe_arena_release_unilinkdelay() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.UniLinkDelay)
  
  ::service_layer::SLBgplsTopoUniLinkDelay* temp = unilinkdelay_;
  unilinkdelay_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoAslaAttr::_internal_mutable_unilinkdelay() {
  
  if (unilinkdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkDelay>(GetArenaForAllocation());
    unilinkdelay_ = p;
  }
  return unilinkdelay_;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoAslaAttr::mutable_unilinkdelay() {
  ::service_layer::SLBgplsTopoUniLinkDelay* _msg = _internal_mutable_unilinkdelay();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UniLinkDelay)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_unilinkdelay(::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unilinkdelay_;
  }
  if (unilinkdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniLinkDelay>::GetOwningArena(unilinkdelay);
    if (message_arena != submessage_arena) {
      unilinkdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unilinkdelay, submessage_arena);
    }
    
  } else {
    
  }
  unilinkdelay_ = unilinkdelay;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniLinkDelay)
}

// .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 7;
inline bool SLBgplsTopoAslaAttr::_internal_has_minmaxlinkdelay() const {
  return this != internal_default_instance() && minmaxlinkdelay_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_minmaxlinkdelay() const {
  return _internal_has_minmaxlinkdelay();
}
inline void SLBgplsTopoAslaAttr::clear_minmaxlinkdelay() {
  if (GetArenaForAllocation() == nullptr && minmaxlinkdelay_ != nullptr) {
    delete minmaxlinkdelay_;
  }
  minmaxlinkdelay_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& SLBgplsTopoAslaAttr::_internal_minmaxlinkdelay() const {
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* p = minmaxlinkdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&>(
      ::service_layer::_SLBgplsTopoMinMaxUniLinkDelay_default_instance_);
}
inline const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& SLBgplsTopoAslaAttr::minmaxlinkdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.MinMaxLinkDelay)
  return _internal_minmaxlinkdelay();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_minmaxlinkdelay(
    ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minmaxlinkdelay_);
  }
  minmaxlinkdelay_ = minmaxlinkdelay;
  if (minmaxlinkdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.MinMaxLinkDelay)
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoAslaAttr::release_minmaxlinkdelay() {
  
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* temp = minmaxlinkdelay_;
  minmaxlinkdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoAslaAttr::unsafe_arena_release_minmaxlinkdelay() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.MinMaxLinkDelay)
  
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* temp = minmaxlinkdelay_;
  minmaxlinkdelay_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoAslaAttr::_internal_mutable_minmaxlinkdelay() {
  
  if (minmaxlinkdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>(GetArenaForAllocation());
    minmaxlinkdelay_ = p;
  }
  return minmaxlinkdelay_;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoAslaAttr::mutable_minmaxlinkdelay() {
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* _msg = _internal_mutable_minmaxlinkdelay();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.MinMaxLinkDelay)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_minmaxlinkdelay(::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete minmaxlinkdelay_;
  }
  if (minmaxlinkdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>::GetOwningArena(minmaxlinkdelay);
    if (message_arena != submessage_arena) {
      minmaxlinkdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minmaxlinkdelay, submessage_arena);
    }
    
  } else {
    
  }
  minmaxlinkdelay_ = minmaxlinkdelay;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.MinMaxLinkDelay)
}

// .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 8;
inline bool SLBgplsTopoAslaAttr::_internal_has_unidelayvariation() const {
  return this != internal_default_instance() && unidelayvariation_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_unidelayvariation() const {
  return _internal_has_unidelayvariation();
}
inline void SLBgplsTopoAslaAttr::clear_unidelayvariation() {
  if (GetArenaForAllocation() == nullptr && unidelayvariation_ != nullptr) {
    delete unidelayvariation_;
  }
  unidelayvariation_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniDelayVar& SLBgplsTopoAslaAttr::_internal_unidelayvariation() const {
  const ::service_layer::SLBgplsTopoUniDelayVar* p = unidelayvariation_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniDelayVar&>(
      ::service_layer::_SLBgplsTopoUniDelayVar_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniDelayVar& SLBgplsTopoAslaAttr::unidelayvariation() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UniDelayVariation)
  return _internal_unidelayvariation();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_unidelayvariation(
    ::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unidelayvariation_);
  }
  unidelayvariation_ = unidelayvariation;
  if (unidelayvariation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniDelayVariation)
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoAslaAttr::release_unidelayvariation() {
  
  ::service_layer::SLBgplsTopoUniDelayVar* temp = unidelayvariation_;
  unidelayvariation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoAslaAttr::unsafe_arena_release_unidelayvariation() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.UniDelayVariation)
  
  ::service_layer::SLBgplsTopoUniDelayVar* temp = unidelayvariation_;
  unidelayvariation_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoAslaAttr::_internal_mutable_unidelayvariation() {
  
  if (unidelayvariation_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniDelayVar>(GetArenaForAllocation());
    unidelayvariation_ = p;
  }
  return unidelayvariation_;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoAslaAttr::mutable_unidelayvariation() {
  ::service_layer::SLBgplsTopoUniDelayVar* _msg = _internal_mutable_unidelayvariation();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UniDelayVariation)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_unidelayvariation(::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unidelayvariation_;
  }
  if (unidelayvariation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniDelayVar>::GetOwningArena(unidelayvariation);
    if (message_arena != submessage_arena) {
      unidelayvariation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unidelayvariation, submessage_arena);
    }
    
  } else {
    
  }
  unidelayvariation_ = unidelayvariation;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniDelayVariation)
}

// .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 9;
inline bool SLBgplsTopoAslaAttr::_internal_has_unilinkloss() const {
  return this != internal_default_instance() && unilinkloss_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_unilinkloss() const {
  return _internal_has_unilinkloss();
}
inline void SLBgplsTopoAslaAttr::clear_unilinkloss() {
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniLinkLoss& SLBgplsTopoAslaAttr::_internal_unilinkloss() const {
  const ::service_layer::SLBgplsTopoUniLinkLoss* p = unilinkloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniLinkLoss&>(
      ::service_layer::_SLBgplsTopoUniLinkLoss_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniLinkLoss& SLBgplsTopoAslaAttr::unilinkloss() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UniLinkLoss)
  return _internal_unilinkloss();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_unilinkloss(
    ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unilinkloss_);
  }
  unilinkloss_ = unilinkloss;
  if (unilinkloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniLinkLoss)
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoAslaAttr::release_unilinkloss() {
  
  ::service_layer::SLBgplsTopoUniLinkLoss* temp = unilinkloss_;
  unilinkloss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoAslaAttr::unsafe_arena_release_unilinkloss() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.UniLinkLoss)
  
  ::service_layer::SLBgplsTopoUniLinkLoss* temp = unilinkloss_;
  unilinkloss_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoAslaAttr::_internal_mutable_unilinkloss() {
  
  if (unilinkloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkLoss>(GetArenaForAllocation());
    unilinkloss_ = p;
  }
  return unilinkloss_;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoAslaAttr::mutable_unilinkloss() {
  ::service_layer::SLBgplsTopoUniLinkLoss* _msg = _internal_mutable_unilinkloss();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UniLinkLoss)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_unilinkloss(::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unilinkloss_;
  }
  if (unilinkloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniLinkLoss>::GetOwningArena(unilinkloss);
    if (message_arena != submessage_arena) {
      unilinkloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unilinkloss, submessage_arena);
    }
    
  } else {
    
  }
  unilinkloss_ = unilinkloss;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniLinkLoss)
}

// .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 10;
inline bool SLBgplsTopoAslaAttr::_internal_has_uniresbandwidth() const {
  return this != internal_default_instance() && uniresbandwidth_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_uniresbandwidth() const {
  return _internal_has_uniresbandwidth();
}
inline void SLBgplsTopoAslaAttr::clear_uniresbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniResBandwidth& SLBgplsTopoAslaAttr::_internal_uniresbandwidth() const {
  const ::service_layer::SLBgplsTopoUniResBandwidth* p = uniresbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniResBandwidth&>(
      ::service_layer::_SLBgplsTopoUniResBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniResBandwidth& SLBgplsTopoAslaAttr::uniresbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UniResBandwidth)
  return _internal_uniresbandwidth();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_uniresbandwidth(
    ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniresbandwidth_);
  }
  uniresbandwidth_ = uniresbandwidth;
  if (uniresbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniResBandwidth)
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoAslaAttr::release_uniresbandwidth() {
  
  ::service_layer::SLBgplsTopoUniResBandwidth* temp = uniresbandwidth_;
  uniresbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoAslaAttr::unsafe_arena_release_uniresbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.UniResBandwidth)
  
  ::service_layer::SLBgplsTopoUniResBandwidth* temp = uniresbandwidth_;
  uniresbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoAslaAttr::_internal_mutable_uniresbandwidth() {
  
  if (uniresbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniResBandwidth>(GetArenaForAllocation());
    uniresbandwidth_ = p;
  }
  return uniresbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoAslaAttr::mutable_uniresbandwidth() {
  ::service_layer::SLBgplsTopoUniResBandwidth* _msg = _internal_mutable_uniresbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UniResBandwidth)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_uniresbandwidth(::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniresbandwidth_;
  }
  if (uniresbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniResBandwidth>::GetOwningArena(uniresbandwidth);
    if (message_arena != submessage_arena) {
      uniresbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniresbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniresbandwidth_ = uniresbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniResBandwidth)
}

// .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 11;
inline bool SLBgplsTopoAslaAttr::_internal_has_uniavailbandwidth() const {
  return this != internal_default_instance() && uniavailbandwidth_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_uniavailbandwidth() const {
  return _internal_has_uniavailbandwidth();
}
inline void SLBgplsTopoAslaAttr::clear_uniavailbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniAvailBandwidth& SLBgplsTopoAslaAttr::_internal_uniavailbandwidth() const {
  const ::service_layer::SLBgplsTopoUniAvailBandwidth* p = uniavailbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniAvailBandwidth&>(
      ::service_layer::_SLBgplsTopoUniAvailBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniAvailBandwidth& SLBgplsTopoAslaAttr::uniavailbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UniAvailBandwidth)
  return _internal_uniavailbandwidth();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_uniavailbandwidth(
    ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniavailbandwidth_);
  }
  uniavailbandwidth_ = uniavailbandwidth;
  if (uniavailbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniAvailBandwidth)
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoAslaAttr::release_uniavailbandwidth() {
  
  ::service_layer::SLBgplsTopoUniAvailBandwidth* temp = uniavailbandwidth_;
  uniavailbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoAslaAttr::unsafe_arena_release_uniavailbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.UniAvailBandwidth)
  
  ::service_layer::SLBgplsTopoUniAvailBandwidth* temp = uniavailbandwidth_;
  uniavailbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoAslaAttr::_internal_mutable_uniavailbandwidth() {
  
  if (uniavailbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniAvailBandwidth>(GetArenaForAllocation());
    uniavailbandwidth_ = p;
  }
  return uniavailbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoAslaAttr::mutable_uniavailbandwidth() {
  ::service_layer::SLBgplsTopoUniAvailBandwidth* _msg = _internal_mutable_uniavailbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UniAvailBandwidth)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_uniavailbandwidth(::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniavailbandwidth_;
  }
  if (uniavailbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniAvailBandwidth>::GetOwningArena(uniavailbandwidth);
    if (message_arena != submessage_arena) {
      uniavailbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniavailbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniavailbandwidth_ = uniavailbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniAvailBandwidth)
}

// .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 12;
inline bool SLBgplsTopoAslaAttr::_internal_has_uniutilbandwidth() const {
  return this != internal_default_instance() && uniutilbandwidth_ != nullptr;
}
inline bool SLBgplsTopoAslaAttr::has_uniutilbandwidth() const {
  return _internal_has_uniutilbandwidth();
}
inline void SLBgplsTopoAslaAttr::clear_uniutilbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniUtilBandwidth& SLBgplsTopoAslaAttr::_internal_uniutilbandwidth() const {
  const ::service_layer::SLBgplsTopoUniUtilBandwidth* p = uniutilbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniUtilBandwidth&>(
      ::service_layer::_SLBgplsTopoUniUtilBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniUtilBandwidth& SLBgplsTopoAslaAttr::uniutilbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UniUtilBandwidth)
  return _internal_uniutilbandwidth();
}
inline void SLBgplsTopoAslaAttr::unsafe_arena_set_allocated_uniutilbandwidth(
    ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniutilbandwidth_);
  }
  uniutilbandwidth_ = uniutilbandwidth;
  if (uniutilbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniUtilBandwidth)
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoAslaAttr::release_uniutilbandwidth() {
  
  ::service_layer::SLBgplsTopoUniUtilBandwidth* temp = uniutilbandwidth_;
  uniutilbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoAslaAttr::unsafe_arena_release_uniutilbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoAslaAttr.UniUtilBandwidth)
  
  ::service_layer::SLBgplsTopoUniUtilBandwidth* temp = uniutilbandwidth_;
  uniutilbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoAslaAttr::_internal_mutable_uniutilbandwidth() {
  
  if (uniutilbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniUtilBandwidth>(GetArenaForAllocation());
    uniutilbandwidth_ = p;
  }
  return uniutilbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoAslaAttr::mutable_uniutilbandwidth() {
  ::service_layer::SLBgplsTopoUniUtilBandwidth* _msg = _internal_mutable_uniutilbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UniUtilBandwidth)
  return _msg;
}
inline void SLBgplsTopoAslaAttr::set_allocated_uniutilbandwidth(::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniutilbandwidth_;
  }
  if (uniutilbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniUtilBandwidth>::GetOwningArena(uniutilbandwidth);
    if (message_arena != submessage_arena) {
      uniutilbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniutilbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniutilbandwidth_ = uniutilbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoAslaAttr.UniUtilBandwidth)
}

// repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 13;
inline int SLBgplsTopoAslaAttr::_internal_extadmingroup_size() const {
  return extadmingroup_.size();
}
inline int SLBgplsTopoAslaAttr::extadmingroup_size() const {
  return _internal_extadmingroup_size();
}
inline void SLBgplsTopoAslaAttr::clear_extadmingroup() {
  extadmingroup_.Clear();
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoAslaAttr::mutable_extadmingroup(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.ExtAdminGroup)
  return extadmingroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >*
SLBgplsTopoAslaAttr::mutable_extadmingroup() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoAslaAttr.ExtAdminGroup)
  return &extadmingroup_;
}
inline const ::service_layer::SLBgplsTopoExtAdminGroup& SLBgplsTopoAslaAttr::_internal_extadmingroup(int index) const {
  return extadmingroup_.Get(index);
}
inline const ::service_layer::SLBgplsTopoExtAdminGroup& SLBgplsTopoAslaAttr::extadmingroup(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.ExtAdminGroup)
  return _internal_extadmingroup(index);
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoAslaAttr::_internal_add_extadmingroup() {
  return extadmingroup_.Add();
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoAslaAttr::add_extadmingroup() {
  ::service_layer::SLBgplsTopoExtAdminGroup* _add = _internal_add_extadmingroup();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoAslaAttr.ExtAdminGroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >&
SLBgplsTopoAslaAttr::extadmingroup() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoAslaAttr.ExtAdminGroup)
  return extadmingroup_;
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 14;
inline int SLBgplsTopoAslaAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoAslaAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoAslaAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoAslaAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoAslaAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoAslaAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoAslaAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoAslaAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoAslaAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoAslaAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoAslaAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoAslaAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoAslaAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoAslaAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoAslaAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixIgpFlags

// bytes Flags = 1;
inline void SLBgplsTopoPrefixIgpFlags::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixIgpFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixIgpFlags.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixIgpFlags::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixIgpFlags.Flags)
}
inline std::string* SLBgplsTopoPrefixIgpFlags::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixIgpFlags.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixIgpFlags::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoPrefixIgpFlags::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixIgpFlags::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixIgpFlags::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixIgpFlags.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixIgpFlags::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixIgpFlags.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixIgpRouteTag

// uint32 Tag = 1;
inline void SLBgplsTopoPrefixIgpRouteTag::clear_tag() {
  tag_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixIgpRouteTag::_internal_tag() const {
  return tag_;
}
inline uint32_t SLBgplsTopoPrefixIgpRouteTag::tag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixIgpRouteTag.Tag)
  return _internal_tag();
}
inline void SLBgplsTopoPrefixIgpRouteTag::_internal_set_tag(uint32_t value) {
  
  tag_ = value;
}
inline void SLBgplsTopoPrefixIgpRouteTag::set_tag(uint32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixIgpRouteTag.Tag)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixIgpExtRouteTag

// uint64 Tag = 1;
inline void SLBgplsTopoPrefixIgpExtRouteTag::clear_tag() {
  tag_ = uint64_t{0u};
}
inline uint64_t SLBgplsTopoPrefixIgpExtRouteTag::_internal_tag() const {
  return tag_;
}
inline uint64_t SLBgplsTopoPrefixIgpExtRouteTag::tag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixIgpExtRouteTag.Tag)
  return _internal_tag();
}
inline void SLBgplsTopoPrefixIgpExtRouteTag::_internal_set_tag(uint64_t value) {
  
  tag_ = value;
}
inline void SLBgplsTopoPrefixIgpExtRouteTag::set_tag(uint64_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixIgpExtRouteTag.Tag)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixMetric

// uint32 Metric = 1;
inline void SLBgplsTopoPrefixMetric::clear_metric() {
  metric_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixMetric::_internal_metric() const {
  return metric_;
}
inline uint32_t SLBgplsTopoPrefixMetric::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixMetric.Metric)
  return _internal_metric();
}
inline void SLBgplsTopoPrefixMetric::_internal_set_metric(uint32_t value) {
  
  metric_ = value;
}
inline void SLBgplsTopoPrefixMetric::set_metric(uint32_t value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixMetric.Metric)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixOspfFwdAddr

// bytes Ipv4Addr = 1;
inline bool SLBgplsTopoPrefixOspfFwdAddr::_internal_has_ipv4addr() const {
  return OspfFwdAddr_case() == kIpv4Addr;
}
inline bool SLBgplsTopoPrefixOspfFwdAddr::has_ipv4addr() const {
  return _internal_has_ipv4addr();
}
inline void SLBgplsTopoPrefixOspfFwdAddr::set_has_ipv4addr() {
  _oneof_case_[0] = kIpv4Addr;
}
inline void SLBgplsTopoPrefixOspfFwdAddr::clear_ipv4addr() {
  if (_internal_has_ipv4addr()) {
    OspfFwdAddr_.ipv4addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_OspfFwdAddr();
  }
}
inline const std::string& SLBgplsTopoPrefixOspfFwdAddr::ipv4addr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv4Addr)
  return _internal_ipv4addr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoPrefixOspfFwdAddr::set_ipv4addr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4addr()) {
    clear_OspfFwdAddr();
    set_has_ipv4addr();
    OspfFwdAddr_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OspfFwdAddr_.ipv4addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv4Addr)
}
inline std::string* SLBgplsTopoPrefixOspfFwdAddr::mutable_ipv4addr() {
  std::string* _s = _internal_mutable_ipv4addr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv4Addr)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixOspfFwdAddr::_internal_ipv4addr() const {
  if (_internal_has_ipv4addr()) {
    return OspfFwdAddr_.ipv4addr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoPrefixOspfFwdAddr::_internal_set_ipv4addr(const std::string& value) {
  if (!_internal_has_ipv4addr()) {
    clear_OspfFwdAddr();
    set_has_ipv4addr();
    OspfFwdAddr_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OspfFwdAddr_.ipv4addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixOspfFwdAddr::_internal_mutable_ipv4addr() {
  if (!_internal_has_ipv4addr()) {
    clear_OspfFwdAddr();
    set_has_ipv4addr();
    OspfFwdAddr_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return OspfFwdAddr_.ipv4addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixOspfFwdAddr::release_ipv4addr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv4Addr)
  if (_internal_has_ipv4addr()) {
    clear_has_OspfFwdAddr();
    return OspfFwdAddr_.ipv4addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoPrefixOspfFwdAddr::set_allocated_ipv4addr(std::string* ipv4addr) {
  if (has_OspfFwdAddr()) {
    clear_OspfFwdAddr();
  }
  if (ipv4addr != nullptr) {
    set_has_ipv4addr();
    OspfFwdAddr_.ipv4addr_.UnsafeSetDefault(ipv4addr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4addr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv4Addr)
}

// bytes Ipv6Addr = 2;
inline bool SLBgplsTopoPrefixOspfFwdAddr::_internal_has_ipv6addr() const {
  return OspfFwdAddr_case() == kIpv6Addr;
}
inline bool SLBgplsTopoPrefixOspfFwdAddr::has_ipv6addr() const {
  return _internal_has_ipv6addr();
}
inline void SLBgplsTopoPrefixOspfFwdAddr::set_has_ipv6addr() {
  _oneof_case_[0] = kIpv6Addr;
}
inline void SLBgplsTopoPrefixOspfFwdAddr::clear_ipv6addr() {
  if (_internal_has_ipv6addr()) {
    OspfFwdAddr_.ipv6addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_OspfFwdAddr();
  }
}
inline const std::string& SLBgplsTopoPrefixOspfFwdAddr::ipv6addr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv6Addr)
  return _internal_ipv6addr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoPrefixOspfFwdAddr::set_ipv6addr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6addr()) {
    clear_OspfFwdAddr();
    set_has_ipv6addr();
    OspfFwdAddr_.ipv6addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OspfFwdAddr_.ipv6addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv6Addr)
}
inline std::string* SLBgplsTopoPrefixOspfFwdAddr::mutable_ipv6addr() {
  std::string* _s = _internal_mutable_ipv6addr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv6Addr)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixOspfFwdAddr::_internal_ipv6addr() const {
  if (_internal_has_ipv6addr()) {
    return OspfFwdAddr_.ipv6addr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoPrefixOspfFwdAddr::_internal_set_ipv6addr(const std::string& value) {
  if (!_internal_has_ipv6addr()) {
    clear_OspfFwdAddr();
    set_has_ipv6addr();
    OspfFwdAddr_.ipv6addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  OspfFwdAddr_.ipv6addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixOspfFwdAddr::_internal_mutable_ipv6addr() {
  if (!_internal_has_ipv6addr()) {
    clear_OspfFwdAddr();
    set_has_ipv6addr();
    OspfFwdAddr_.ipv6addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return OspfFwdAddr_.ipv6addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixOspfFwdAddr::release_ipv6addr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv6Addr)
  if (_internal_has_ipv6addr()) {
    clear_has_OspfFwdAddr();
    return OspfFwdAddr_.ipv6addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoPrefixOspfFwdAddr::set_allocated_ipv6addr(std::string* ipv6addr) {
  if (has_OspfFwdAddr()) {
    clear_OspfFwdAddr();
  }
  if (ipv6addr != nullptr) {
    set_has_ipv6addr();
    OspfFwdAddr_.ipv6addr_.UnsafeSetDefault(ipv6addr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6addr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixOspfFwdAddr.Ipv6Addr)
}

inline bool SLBgplsTopoPrefixOspfFwdAddr::has_OspfFwdAddr() const {
  return OspfFwdAddr_case() != OSPFFWDADDR_NOT_SET;
}
inline void SLBgplsTopoPrefixOspfFwdAddr::clear_has_OspfFwdAddr() {
  _oneof_case_[0] = OSPFFWDADDR_NOT_SET;
}
inline SLBgplsTopoPrefixOspfFwdAddr::OspfFwdAddrCase SLBgplsTopoPrefixOspfFwdAddr::OspfFwdAddr_case() const {
  return SLBgplsTopoPrefixOspfFwdAddr::OspfFwdAddrCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoPrefixOpaqueAttr

// bytes OpaqueAttr = 1;
inline void SLBgplsTopoPrefixOpaqueAttr::clear_opaqueattr() {
  opaqueattr_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixOpaqueAttr::opaqueattr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixOpaqueAttr.OpaqueAttr)
  return _internal_opaqueattr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixOpaqueAttr::set_opaqueattr(ArgT0&& arg0, ArgT... args) {
 
 opaqueattr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixOpaqueAttr.OpaqueAttr)
}
inline std::string* SLBgplsTopoPrefixOpaqueAttr::mutable_opaqueattr() {
  std::string* _s = _internal_mutable_opaqueattr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixOpaqueAttr.OpaqueAttr)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixOpaqueAttr::_internal_opaqueattr() const {
  return opaqueattr_.Get();
}
inline void SLBgplsTopoPrefixOpaqueAttr::_internal_set_opaqueattr(const std::string& value) {
  
  opaqueattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixOpaqueAttr::_internal_mutable_opaqueattr() {
  
  return opaqueattr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixOpaqueAttr::release_opaqueattr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixOpaqueAttr.OpaqueAttr)
  return opaqueattr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixOpaqueAttr::set_allocated_opaqueattr(std::string* opaqueattr) {
  if (opaqueattr != nullptr) {
    
  } else {
    
  }
  opaqueattr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaqueattr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaqueattr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opaqueattr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixOpaqueAttr.OpaqueAttr)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixSid

// bytes Flags = 1;
inline void SLBgplsTopoPrefixSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSid.Flags)
}
inline std::string* SLBgplsTopoPrefixSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoPrefixSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixSid.Flags)
}

// uint32 Algorithm = 2;
inline void SLBgplsTopoPrefixSid::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixSid::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoPrefixSid::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSid.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoPrefixSid::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoPrefixSid::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSid.Algorithm)
}

// uint32 LabelIndex = 3;
inline void SLBgplsTopoPrefixSid::clear_labelindex() {
  labelindex_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixSid::_internal_labelindex() const {
  return labelindex_;
}
inline uint32_t SLBgplsTopoPrefixSid::labelindex() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSid.LabelIndex)
  return _internal_labelindex();
}
inline void SLBgplsTopoPrefixSid::_internal_set_labelindex(uint32_t value) {
  
  labelindex_ = value;
}
inline void SLBgplsTopoPrefixSid::set_labelindex(uint32_t value) {
  _internal_set_labelindex(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSid.LabelIndex)
}

// .service_layer.SLBgplsTopoPrefixSidFormat PrefixSidFormat = 4;
inline void SLBgplsTopoPrefixSid::clear_prefixsidformat() {
  prefixsidformat_ = 0;
}
inline ::service_layer::SLBgplsTopoPrefixSidFormat SLBgplsTopoPrefixSid::_internal_prefixsidformat() const {
  return static_cast< ::service_layer::SLBgplsTopoPrefixSidFormat >(prefixsidformat_);
}
inline ::service_layer::SLBgplsTopoPrefixSidFormat SLBgplsTopoPrefixSid::prefixsidformat() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSid.PrefixSidFormat)
  return _internal_prefixsidformat();
}
inline void SLBgplsTopoPrefixSid::_internal_set_prefixsidformat(::service_layer::SLBgplsTopoPrefixSidFormat value) {
  
  prefixsidformat_ = value;
}
inline void SLBgplsTopoPrefixSid::set_prefixsidformat(::service_layer::SLBgplsTopoPrefixSidFormat value) {
  _internal_set_prefixsidformat(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSid.PrefixSidFormat)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixRange

// bytes Flags = 1;
inline void SLBgplsTopoPrefixRange::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixRange::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixRange.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixRange::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixRange.Flags)
}
inline std::string* SLBgplsTopoPrefixRange::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixRange.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixRange::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoPrefixRange::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixRange::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixRange::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixRange.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixRange::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixRange.Flags)
}

// uint32 RangeSize = 2;
inline void SLBgplsTopoPrefixRange::clear_rangesize() {
  rangesize_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixRange::_internal_rangesize() const {
  return rangesize_;
}
inline uint32_t SLBgplsTopoPrefixRange::rangesize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixRange.RangeSize)
  return _internal_rangesize();
}
inline void SLBgplsTopoPrefixRange::_internal_set_rangesize(uint32_t value) {
  
  rangesize_ = value;
}
inline void SLBgplsTopoPrefixRange::set_rangesize(uint32_t value) {
  _internal_set_rangesize(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixRange.RangeSize)
}

// uint32 Algorithm = 3;
inline void SLBgplsTopoPrefixRange::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixRange::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoPrefixRange::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixRange.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoPrefixRange::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoPrefixRange::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixRange.Algorithm)
}

// uint32 Index = 4;
inline void SLBgplsTopoPrefixRange::clear_index() {
  index_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixRange::_internal_index() const {
  return index_;
}
inline uint32_t SLBgplsTopoPrefixRange::index() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixRange.Index)
  return _internal_index();
}
inline void SLBgplsTopoPrefixRange::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void SLBgplsTopoPrefixRange::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixRange.Index)
}

// bytes SidFlags = 5;
inline void SLBgplsTopoPrefixRange::clear_sidflags() {
  sidflags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixRange::sidflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixRange.SidFlags)
  return _internal_sidflags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixRange::set_sidflags(ArgT0&& arg0, ArgT... args) {
 
 sidflags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixRange.SidFlags)
}
inline std::string* SLBgplsTopoPrefixRange::mutable_sidflags() {
  std::string* _s = _internal_mutable_sidflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixRange.SidFlags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixRange::_internal_sidflags() const {
  return sidflags_.Get();
}
inline void SLBgplsTopoPrefixRange::_internal_set_sidflags(const std::string& value) {
  
  sidflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixRange::_internal_mutable_sidflags() {
  
  return sidflags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixRange::release_sidflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixRange.SidFlags)
  return sidflags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixRange::set_allocated_sidflags(std::string* sidflags) {
  if (sidflags != nullptr) {
    
  } else {
    
  }
  sidflags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sidflags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sidflags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixRange.SidFlags)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixSrv6Loc

// bytes Flags = 1;
inline void SLBgplsTopoPrefixSrv6Loc::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixSrv6Loc::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSrv6Loc.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixSrv6Loc::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSrv6Loc.Flags)
}
inline std::string* SLBgplsTopoPrefixSrv6Loc::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixSrv6Loc.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixSrv6Loc::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoPrefixSrv6Loc::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSrv6Loc::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSrv6Loc::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixSrv6Loc.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixSrv6Loc::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixSrv6Loc.Flags)
}

// uint32 Algorithm = 2;
inline void SLBgplsTopoPrefixSrv6Loc::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixSrv6Loc::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoPrefixSrv6Loc::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSrv6Loc.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoPrefixSrv6Loc::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoPrefixSrv6Loc::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSrv6Loc.Algorithm)
}

// uint32 Metric = 3;
inline void SLBgplsTopoPrefixSrv6Loc::clear_metric() {
  metric_ = 0u;
}
inline uint32_t SLBgplsTopoPrefixSrv6Loc::_internal_metric() const {
  return metric_;
}
inline uint32_t SLBgplsTopoPrefixSrv6Loc::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSrv6Loc.Metric)
  return _internal_metric();
}
inline void SLBgplsTopoPrefixSrv6Loc::_internal_set_metric(uint32_t value) {
  
  metric_ = value;
}
inline void SLBgplsTopoPrefixSrv6Loc::set_metric(uint32_t value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSrv6Loc.Metric)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixAttrFlags

// bytes Flags = 1;
inline void SLBgplsTopoPrefixAttrFlags::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoPrefixAttrFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixAttrFlags.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoPrefixAttrFlags::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixAttrFlags.Flags)
}
inline std::string* SLBgplsTopoPrefixAttrFlags::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixAttrFlags.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixAttrFlags::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoPrefixAttrFlags::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixAttrFlags::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixAttrFlags::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixAttrFlags.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoPrefixAttrFlags::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixAttrFlags.Flags)
}

// -------------------------------------------------------------------

// SLBgplsTopoPrefixSrcRouterId

// bytes Ipv4Addr = 1;
inline bool SLBgplsTopoPrefixSrcRouterId::_internal_has_ipv4addr() const {
  return SrcRouterId_case() == kIpv4Addr;
}
inline bool SLBgplsTopoPrefixSrcRouterId::has_ipv4addr() const {
  return _internal_has_ipv4addr();
}
inline void SLBgplsTopoPrefixSrcRouterId::set_has_ipv4addr() {
  _oneof_case_[0] = kIpv4Addr;
}
inline void SLBgplsTopoPrefixSrcRouterId::clear_ipv4addr() {
  if (_internal_has_ipv4addr()) {
    SrcRouterId_.ipv4addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_SrcRouterId();
  }
}
inline const std::string& SLBgplsTopoPrefixSrcRouterId::ipv4addr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv4Addr)
  return _internal_ipv4addr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoPrefixSrcRouterId::set_ipv4addr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4addr()) {
    clear_SrcRouterId();
    set_has_ipv4addr();
    SrcRouterId_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SrcRouterId_.ipv4addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv4Addr)
}
inline std::string* SLBgplsTopoPrefixSrcRouterId::mutable_ipv4addr() {
  std::string* _s = _internal_mutable_ipv4addr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv4Addr)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixSrcRouterId::_internal_ipv4addr() const {
  if (_internal_has_ipv4addr()) {
    return SrcRouterId_.ipv4addr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoPrefixSrcRouterId::_internal_set_ipv4addr(const std::string& value) {
  if (!_internal_has_ipv4addr()) {
    clear_SrcRouterId();
    set_has_ipv4addr();
    SrcRouterId_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SrcRouterId_.ipv4addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSrcRouterId::_internal_mutable_ipv4addr() {
  if (!_internal_has_ipv4addr()) {
    clear_SrcRouterId();
    set_has_ipv4addr();
    SrcRouterId_.ipv4addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return SrcRouterId_.ipv4addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSrcRouterId::release_ipv4addr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv4Addr)
  if (_internal_has_ipv4addr()) {
    clear_has_SrcRouterId();
    return SrcRouterId_.ipv4addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoPrefixSrcRouterId::set_allocated_ipv4addr(std::string* ipv4addr) {
  if (has_SrcRouterId()) {
    clear_SrcRouterId();
  }
  if (ipv4addr != nullptr) {
    set_has_ipv4addr();
    SrcRouterId_.ipv4addr_.UnsafeSetDefault(ipv4addr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4addr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv4Addr)
}

// bytes Ipv6Addr = 2;
inline bool SLBgplsTopoPrefixSrcRouterId::_internal_has_ipv6addr() const {
  return SrcRouterId_case() == kIpv6Addr;
}
inline bool SLBgplsTopoPrefixSrcRouterId::has_ipv6addr() const {
  return _internal_has_ipv6addr();
}
inline void SLBgplsTopoPrefixSrcRouterId::set_has_ipv6addr() {
  _oneof_case_[0] = kIpv6Addr;
}
inline void SLBgplsTopoPrefixSrcRouterId::clear_ipv6addr() {
  if (_internal_has_ipv6addr()) {
    SrcRouterId_.ipv6addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_SrcRouterId();
  }
}
inline const std::string& SLBgplsTopoPrefixSrcRouterId::ipv6addr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv6Addr)
  return _internal_ipv6addr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoPrefixSrcRouterId::set_ipv6addr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6addr()) {
    clear_SrcRouterId();
    set_has_ipv6addr();
    SrcRouterId_.ipv6addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SrcRouterId_.ipv6addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv6Addr)
}
inline std::string* SLBgplsTopoPrefixSrcRouterId::mutable_ipv6addr() {
  std::string* _s = _internal_mutable_ipv6addr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv6Addr)
  return _s;
}
inline const std::string& SLBgplsTopoPrefixSrcRouterId::_internal_ipv6addr() const {
  if (_internal_has_ipv6addr()) {
    return SrcRouterId_.ipv6addr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoPrefixSrcRouterId::_internal_set_ipv6addr(const std::string& value) {
  if (!_internal_has_ipv6addr()) {
    clear_SrcRouterId();
    set_has_ipv6addr();
    SrcRouterId_.ipv6addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SrcRouterId_.ipv6addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSrcRouterId::_internal_mutable_ipv6addr() {
  if (!_internal_has_ipv6addr()) {
    clear_SrcRouterId();
    set_has_ipv6addr();
    SrcRouterId_.ipv6addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return SrcRouterId_.ipv6addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoPrefixSrcRouterId::release_ipv6addr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv6Addr)
  if (_internal_has_ipv6addr()) {
    clear_has_SrcRouterId();
    return SrcRouterId_.ipv6addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoPrefixSrcRouterId::set_allocated_ipv6addr(std::string* ipv6addr) {
  if (has_SrcRouterId()) {
    clear_SrcRouterId();
  }
  if (ipv6addr != nullptr) {
    set_has_ipv6addr();
    SrcRouterId_.ipv6addr_.UnsafeSetDefault(ipv6addr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6addr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoPrefixSrcRouterId.Ipv6Addr)
}

inline bool SLBgplsTopoPrefixSrcRouterId::has_SrcRouterId() const {
  return SrcRouterId_case() != SRCROUTERID_NOT_SET;
}
inline void SLBgplsTopoPrefixSrcRouterId::clear_has_SrcRouterId() {
  _oneof_case_[0] = SRCROUTERID_NOT_SET;
}
inline SLBgplsTopoPrefixSrcRouterId::SrcRouterIdCase SLBgplsTopoPrefixSrcRouterId::SrcRouterId_case() const {
  return SLBgplsTopoPrefixSrcRouterId::SrcRouterIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoL2BundleMemberAttr

// uint32 MemberDesc = 1;
inline void SLBgplsTopoL2BundleMemberAttr::clear_memberdesc() {
  memberdesc_ = 0u;
}
inline uint32_t SLBgplsTopoL2BundleMemberAttr::_internal_memberdesc() const {
  return memberdesc_;
}
inline uint32_t SLBgplsTopoL2BundleMemberAttr::memberdesc() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.MemberDesc)
  return _internal_memberdesc();
}
inline void SLBgplsTopoL2BundleMemberAttr::_internal_set_memberdesc(uint32_t value) {
  
  memberdesc_ = value;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_memberdesc(uint32_t value) {
  _internal_set_memberdesc(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoL2BundleMemberAttr.MemberDesc)
}

// .service_layer.SLBgplsTopoAdminGroup AdminGroup = 2;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_admingroup() const {
  return this != internal_default_instance() && admingroup_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_admingroup() const {
  return _internal_has_admingroup();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_admingroup() {
  if (GetArenaForAllocation() == nullptr && admingroup_ != nullptr) {
    delete admingroup_;
  }
  admingroup_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoAdminGroup& SLBgplsTopoL2BundleMemberAttr::_internal_admingroup() const {
  const ::service_layer::SLBgplsTopoAdminGroup* p = admingroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoAdminGroup&>(
      ::service_layer::_SLBgplsTopoAdminGroup_default_instance_);
}
inline const ::service_layer::SLBgplsTopoAdminGroup& SLBgplsTopoL2BundleMemberAttr::admingroup() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.AdminGroup)
  return _internal_admingroup();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_admingroup(
    ::service_layer::SLBgplsTopoAdminGroup* admingroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admingroup_);
  }
  admingroup_ = admingroup;
  if (admingroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.AdminGroup)
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoL2BundleMemberAttr::release_admingroup() {
  
  ::service_layer::SLBgplsTopoAdminGroup* temp = admingroup_;
  admingroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_admingroup() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.AdminGroup)
  
  ::service_layer::SLBgplsTopoAdminGroup* temp = admingroup_;
  admingroup_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_admingroup() {
  
  if (admingroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoAdminGroup>(GetArenaForAllocation());
    admingroup_ = p;
  }
  return admingroup_;
}
inline ::service_layer::SLBgplsTopoAdminGroup* SLBgplsTopoL2BundleMemberAttr::mutable_admingroup() {
  ::service_layer::SLBgplsTopoAdminGroup* _msg = _internal_mutable_admingroup();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.AdminGroup)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_admingroup(::service_layer::SLBgplsTopoAdminGroup* admingroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete admingroup_;
  }
  if (admingroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoAdminGroup>::GetOwningArena(admingroup);
    if (message_arena != submessage_arena) {
      admingroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admingroup, submessage_arena);
    }
    
  } else {
    
  }
  admingroup_ = admingroup;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.AdminGroup)
}

// .service_layer.SLBgplsTopoLinkMaxBandwidth MaxBandwidth = 3;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_maxbandwidth() const {
  return this != internal_default_instance() && maxbandwidth_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_maxbandwidth() const {
  return _internal_has_maxbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_maxbandwidth() {
  if (GetArenaForAllocation() == nullptr && maxbandwidth_ != nullptr) {
    delete maxbandwidth_;
  }
  maxbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkMaxBandwidth& SLBgplsTopoL2BundleMemberAttr::_internal_maxbandwidth() const {
  const ::service_layer::SLBgplsTopoLinkMaxBandwidth* p = maxbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkMaxBandwidth&>(
      ::service_layer::_SLBgplsTopoLinkMaxBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkMaxBandwidth& SLBgplsTopoL2BundleMemberAttr::maxbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxBandwidth)
  return _internal_maxbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_maxbandwidth(
    ::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxbandwidth_);
  }
  maxbandwidth_ = maxbandwidth;
  if (maxbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxBandwidth)
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoL2BundleMemberAttr::release_maxbandwidth() {
  
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* temp = maxbandwidth_;
  maxbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_maxbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxBandwidth)
  
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* temp = maxbandwidth_;
  maxbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_maxbandwidth() {
  
  if (maxbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMaxBandwidth>(GetArenaForAllocation());
    maxbandwidth_ = p;
  }
  return maxbandwidth_;
}
inline ::service_layer::SLBgplsTopoLinkMaxBandwidth* SLBgplsTopoL2BundleMemberAttr::mutable_maxbandwidth() {
  ::service_layer::SLBgplsTopoLinkMaxBandwidth* _msg = _internal_mutable_maxbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxBandwidth)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_maxbandwidth(::service_layer::SLBgplsTopoLinkMaxBandwidth* maxbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete maxbandwidth_;
  }
  if (maxbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkMaxBandwidth>::GetOwningArena(maxbandwidth);
    if (message_arena != submessage_arena) {
      maxbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  maxbandwidth_ = maxbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxBandwidth)
}

// .service_layer.SLBgplsTopoLinkMaxResvBandwidth MaxResvBandwidth = 4;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_maxresvbandwidth() const {
  return this != internal_default_instance() && maxresvbandwidth_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_maxresvbandwidth() const {
  return _internal_has_maxresvbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_maxresvbandwidth() {
  if (GetArenaForAllocation() == nullptr && maxresvbandwidth_ != nullptr) {
    delete maxresvbandwidth_;
  }
  maxresvbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& SLBgplsTopoL2BundleMemberAttr::_internal_maxresvbandwidth() const {
  const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* p = maxresvbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth&>(
      ::service_layer::_SLBgplsTopoLinkMaxResvBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkMaxResvBandwidth& SLBgplsTopoL2BundleMemberAttr::maxresvbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxResvBandwidth)
  return _internal_maxresvbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_maxresvbandwidth(
    ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxresvbandwidth_);
  }
  maxresvbandwidth_ = maxresvbandwidth;
  if (maxresvbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxResvBandwidth)
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoL2BundleMemberAttr::release_maxresvbandwidth() {
  
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* temp = maxresvbandwidth_;
  maxresvbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_maxresvbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxResvBandwidth)
  
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* temp = maxresvbandwidth_;
  maxresvbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_maxresvbandwidth() {
  
  if (maxresvbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkMaxResvBandwidth>(GetArenaForAllocation());
    maxresvbandwidth_ = p;
  }
  return maxresvbandwidth_;
}
inline ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* SLBgplsTopoL2BundleMemberAttr::mutable_maxresvbandwidth() {
  ::service_layer::SLBgplsTopoLinkMaxResvBandwidth* _msg = _internal_mutable_maxresvbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxResvBandwidth)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_maxresvbandwidth(::service_layer::SLBgplsTopoLinkMaxResvBandwidth* maxresvbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete maxresvbandwidth_;
  }
  if (maxresvbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkMaxResvBandwidth>::GetOwningArena(maxresvbandwidth);
    if (message_arena != submessage_arena) {
      maxresvbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxresvbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  maxresvbandwidth_ = maxresvbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.MaxResvBandwidth)
}

// repeated .service_layer.SLBgplsTopoLinkUnresvBandwidth UnresvBandwidth = 5;
inline int SLBgplsTopoL2BundleMemberAttr::_internal_unresvbandwidth_size() const {
  return unresvbandwidth_.size();
}
inline int SLBgplsTopoL2BundleMemberAttr::unresvbandwidth_size() const {
  return _internal_unresvbandwidth_size();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_unresvbandwidth() {
  unresvbandwidth_.Clear();
}
inline ::service_layer::SLBgplsTopoLinkUnresvBandwidth* SLBgplsTopoL2BundleMemberAttr::mutable_unresvbandwidth(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UnresvBandwidth)
  return unresvbandwidth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >*
SLBgplsTopoL2BundleMemberAttr::mutable_unresvbandwidth() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoL2BundleMemberAttr.UnresvBandwidth)
  return &unresvbandwidth_;
}
inline const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& SLBgplsTopoL2BundleMemberAttr::_internal_unresvbandwidth(int index) const {
  return unresvbandwidth_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLinkUnresvBandwidth& SLBgplsTopoL2BundleMemberAttr::unresvbandwidth(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UnresvBandwidth)
  return _internal_unresvbandwidth(index);
}
inline ::service_layer::SLBgplsTopoLinkUnresvBandwidth* SLBgplsTopoL2BundleMemberAttr::_internal_add_unresvbandwidth() {
  return unresvbandwidth_.Add();
}
inline ::service_layer::SLBgplsTopoLinkUnresvBandwidth* SLBgplsTopoL2BundleMemberAttr::add_unresvbandwidth() {
  ::service_layer::SLBgplsTopoLinkUnresvBandwidth* _add = _internal_add_unresvbandwidth();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoL2BundleMemberAttr.UnresvBandwidth)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLinkUnresvBandwidth >&
SLBgplsTopoL2BundleMemberAttr::unresvbandwidth() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoL2BundleMemberAttr.UnresvBandwidth)
  return unresvbandwidth_;
}

// .service_layer.SLBgplsTopoLinkTeDefaultMetric TeDefMetric = 6;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_tedefmetric() const {
  return this != internal_default_instance() && tedefmetric_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_tedefmetric() const {
  return _internal_has_tedefmetric();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_tedefmetric() {
  if (GetArenaForAllocation() == nullptr && tedefmetric_ != nullptr) {
    delete tedefmetric_;
  }
  tedefmetric_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& SLBgplsTopoL2BundleMemberAttr::_internal_tedefmetric() const {
  const ::service_layer::SLBgplsTopoLinkTeDefaultMetric* p = tedefmetric_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkTeDefaultMetric&>(
      ::service_layer::_SLBgplsTopoLinkTeDefaultMetric_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkTeDefaultMetric& SLBgplsTopoL2BundleMemberAttr::tedefmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.TeDefMetric)
  return _internal_tedefmetric();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_tedefmetric(
    ::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tedefmetric_);
  }
  tedefmetric_ = tedefmetric;
  if (tedefmetric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.TeDefMetric)
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoL2BundleMemberAttr::release_tedefmetric() {
  
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* temp = tedefmetric_;
  tedefmetric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_tedefmetric() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.TeDefMetric)
  
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* temp = tedefmetric_;
  tedefmetric_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_tedefmetric() {
  
  if (tedefmetric_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkTeDefaultMetric>(GetArenaForAllocation());
    tedefmetric_ = p;
  }
  return tedefmetric_;
}
inline ::service_layer::SLBgplsTopoLinkTeDefaultMetric* SLBgplsTopoL2BundleMemberAttr::mutable_tedefmetric() {
  ::service_layer::SLBgplsTopoLinkTeDefaultMetric* _msg = _internal_mutable_tedefmetric();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.TeDefMetric)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_tedefmetric(::service_layer::SLBgplsTopoLinkTeDefaultMetric* tedefmetric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tedefmetric_;
  }
  if (tedefmetric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkTeDefaultMetric>::GetOwningArena(tedefmetric);
    if (message_arena != submessage_arena) {
      tedefmetric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tedefmetric, submessage_arena);
    }
    
  } else {
    
  }
  tedefmetric_ = tedefmetric;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.TeDefMetric)
}

// .service_layer.SLBgplsTopoLinkProtectionType ProtectionType = 7;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_protectiontype() const {
  return this != internal_default_instance() && protectiontype_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_protectiontype() const {
  return _internal_has_protectiontype();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_protectiontype() {
  if (GetArenaForAllocation() == nullptr && protectiontype_ != nullptr) {
    delete protectiontype_;
  }
  protectiontype_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoLinkProtectionType& SLBgplsTopoL2BundleMemberAttr::_internal_protectiontype() const {
  const ::service_layer::SLBgplsTopoLinkProtectionType* p = protectiontype_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoLinkProtectionType&>(
      ::service_layer::_SLBgplsTopoLinkProtectionType_default_instance_);
}
inline const ::service_layer::SLBgplsTopoLinkProtectionType& SLBgplsTopoL2BundleMemberAttr::protectiontype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.ProtectionType)
  return _internal_protectiontype();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_protectiontype(
    ::service_layer::SLBgplsTopoLinkProtectionType* protectiontype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectiontype_);
  }
  protectiontype_ = protectiontype;
  if (protectiontype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.ProtectionType)
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoL2BundleMemberAttr::release_protectiontype() {
  
  ::service_layer::SLBgplsTopoLinkProtectionType* temp = protectiontype_;
  protectiontype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_protectiontype() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.ProtectionType)
  
  ::service_layer::SLBgplsTopoLinkProtectionType* temp = protectiontype_;
  protectiontype_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_protectiontype() {
  
  if (protectiontype_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoLinkProtectionType>(GetArenaForAllocation());
    protectiontype_ = p;
  }
  return protectiontype_;
}
inline ::service_layer::SLBgplsTopoLinkProtectionType* SLBgplsTopoL2BundleMemberAttr::mutable_protectiontype() {
  ::service_layer::SLBgplsTopoLinkProtectionType* _msg = _internal_mutable_protectiontype();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.ProtectionType)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_protectiontype(::service_layer::SLBgplsTopoLinkProtectionType* protectiontype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protectiontype_;
  }
  if (protectiontype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoLinkProtectionType>::GetOwningArena(protectiontype);
    if (message_arena != submessage_arena) {
      protectiontype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectiontype, submessage_arena);
    }
    
  } else {
    
  }
  protectiontype_ = protectiontype;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.ProtectionType)
}

// repeated .service_layer.SLBgplsTopoAdjSid AdjSid = 8;
inline int SLBgplsTopoL2BundleMemberAttr::_internal_adjsid_size() const {
  return adjsid_.size();
}
inline int SLBgplsTopoL2BundleMemberAttr::adjsid_size() const {
  return _internal_adjsid_size();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_adjsid() {
  adjsid_.Clear();
}
inline ::service_layer::SLBgplsTopoAdjSid* SLBgplsTopoL2BundleMemberAttr::mutable_adjsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.AdjSid)
  return adjsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >*
SLBgplsTopoL2BundleMemberAttr::mutable_adjsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoL2BundleMemberAttr.AdjSid)
  return &adjsid_;
}
inline const ::service_layer::SLBgplsTopoAdjSid& SLBgplsTopoL2BundleMemberAttr::_internal_adjsid(int index) const {
  return adjsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoAdjSid& SLBgplsTopoL2BundleMemberAttr::adjsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.AdjSid)
  return _internal_adjsid(index);
}
inline ::service_layer::SLBgplsTopoAdjSid* SLBgplsTopoL2BundleMemberAttr::_internal_add_adjsid() {
  return adjsid_.Add();
}
inline ::service_layer::SLBgplsTopoAdjSid* SLBgplsTopoL2BundleMemberAttr::add_adjsid() {
  ::service_layer::SLBgplsTopoAdjSid* _add = _internal_add_adjsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoL2BundleMemberAttr.AdjSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAdjSid >&
SLBgplsTopoL2BundleMemberAttr::adjsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoL2BundleMemberAttr.AdjSid)
  return adjsid_;
}

// repeated .service_layer.SLBgplsTopoLanAdjSid LanAdjSid = 9;
inline int SLBgplsTopoL2BundleMemberAttr::_internal_lanadjsid_size() const {
  return lanadjsid_.size();
}
inline int SLBgplsTopoL2BundleMemberAttr::lanadjsid_size() const {
  return _internal_lanadjsid_size();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_lanadjsid() {
  lanadjsid_.Clear();
}
inline ::service_layer::SLBgplsTopoLanAdjSid* SLBgplsTopoL2BundleMemberAttr::mutable_lanadjsid(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.LanAdjSid)
  return lanadjsid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >*
SLBgplsTopoL2BundleMemberAttr::mutable_lanadjsid() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoL2BundleMemberAttr.LanAdjSid)
  return &lanadjsid_;
}
inline const ::service_layer::SLBgplsTopoLanAdjSid& SLBgplsTopoL2BundleMemberAttr::_internal_lanadjsid(int index) const {
  return lanadjsid_.Get(index);
}
inline const ::service_layer::SLBgplsTopoLanAdjSid& SLBgplsTopoL2BundleMemberAttr::lanadjsid(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.LanAdjSid)
  return _internal_lanadjsid(index);
}
inline ::service_layer::SLBgplsTopoLanAdjSid* SLBgplsTopoL2BundleMemberAttr::_internal_add_lanadjsid() {
  return lanadjsid_.Add();
}
inline ::service_layer::SLBgplsTopoLanAdjSid* SLBgplsTopoL2BundleMemberAttr::add_lanadjsid() {
  ::service_layer::SLBgplsTopoLanAdjSid* _add = _internal_add_lanadjsid();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoL2BundleMemberAttr.LanAdjSid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoLanAdjSid >&
SLBgplsTopoL2BundleMemberAttr::lanadjsid() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoL2BundleMemberAttr.LanAdjSid)
  return lanadjsid_;
}

// .service_layer.SLBgplsTopoUniLinkDelay UniLinkDelay = 10;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_unilinkdelay() const {
  return this != internal_default_instance() && unilinkdelay_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_unilinkdelay() const {
  return _internal_has_unilinkdelay();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_unilinkdelay() {
  if (GetArenaForAllocation() == nullptr && unilinkdelay_ != nullptr) {
    delete unilinkdelay_;
  }
  unilinkdelay_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniLinkDelay& SLBgplsTopoL2BundleMemberAttr::_internal_unilinkdelay() const {
  const ::service_layer::SLBgplsTopoUniLinkDelay* p = unilinkdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniLinkDelay&>(
      ::service_layer::_SLBgplsTopoUniLinkDelay_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniLinkDelay& SLBgplsTopoL2BundleMemberAttr::unilinkdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkDelay)
  return _internal_unilinkdelay();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_unilinkdelay(
    ::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unilinkdelay_);
  }
  unilinkdelay_ = unilinkdelay;
  if (unilinkdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkDelay)
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::release_unilinkdelay() {
  
  ::service_layer::SLBgplsTopoUniLinkDelay* temp = unilinkdelay_;
  unilinkdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_unilinkdelay() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkDelay)
  
  ::service_layer::SLBgplsTopoUniLinkDelay* temp = unilinkdelay_;
  unilinkdelay_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_unilinkdelay() {
  
  if (unilinkdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkDelay>(GetArenaForAllocation());
    unilinkdelay_ = p;
  }
  return unilinkdelay_;
}
inline ::service_layer::SLBgplsTopoUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::mutable_unilinkdelay() {
  ::service_layer::SLBgplsTopoUniLinkDelay* _msg = _internal_mutable_unilinkdelay();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkDelay)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_unilinkdelay(::service_layer::SLBgplsTopoUniLinkDelay* unilinkdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unilinkdelay_;
  }
  if (unilinkdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniLinkDelay>::GetOwningArena(unilinkdelay);
    if (message_arena != submessage_arena) {
      unilinkdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unilinkdelay, submessage_arena);
    }
    
  } else {
    
  }
  unilinkdelay_ = unilinkdelay;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkDelay)
}

// .service_layer.SLBgplsTopoMinMaxUniLinkDelay MinMaxLinkDelay = 11;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_minmaxlinkdelay() const {
  return this != internal_default_instance() && minmaxlinkdelay_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_minmaxlinkdelay() const {
  return _internal_has_minmaxlinkdelay();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_minmaxlinkdelay() {
  if (GetArenaForAllocation() == nullptr && minmaxlinkdelay_ != nullptr) {
    delete minmaxlinkdelay_;
  }
  minmaxlinkdelay_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& SLBgplsTopoL2BundleMemberAttr::_internal_minmaxlinkdelay() const {
  const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* p = minmaxlinkdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay&>(
      ::service_layer::_SLBgplsTopoMinMaxUniLinkDelay_default_instance_);
}
inline const ::service_layer::SLBgplsTopoMinMaxUniLinkDelay& SLBgplsTopoL2BundleMemberAttr::minmaxlinkdelay() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.MinMaxLinkDelay)
  return _internal_minmaxlinkdelay();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_minmaxlinkdelay(
    ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minmaxlinkdelay_);
  }
  minmaxlinkdelay_ = minmaxlinkdelay;
  if (minmaxlinkdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.MinMaxLinkDelay)
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::release_minmaxlinkdelay() {
  
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* temp = minmaxlinkdelay_;
  minmaxlinkdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_minmaxlinkdelay() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.MinMaxLinkDelay)
  
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* temp = minmaxlinkdelay_;
  minmaxlinkdelay_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_minmaxlinkdelay() {
  
  if (minmaxlinkdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>(GetArenaForAllocation());
    minmaxlinkdelay_ = p;
  }
  return minmaxlinkdelay_;
}
inline ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* SLBgplsTopoL2BundleMemberAttr::mutable_minmaxlinkdelay() {
  ::service_layer::SLBgplsTopoMinMaxUniLinkDelay* _msg = _internal_mutable_minmaxlinkdelay();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.MinMaxLinkDelay)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_minmaxlinkdelay(::service_layer::SLBgplsTopoMinMaxUniLinkDelay* minmaxlinkdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete minmaxlinkdelay_;
  }
  if (minmaxlinkdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoMinMaxUniLinkDelay>::GetOwningArena(minmaxlinkdelay);
    if (message_arena != submessage_arena) {
      minmaxlinkdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minmaxlinkdelay, submessage_arena);
    }
    
  } else {
    
  }
  minmaxlinkdelay_ = minmaxlinkdelay;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.MinMaxLinkDelay)
}

// .service_layer.SLBgplsTopoUniDelayVar UniDelayVariation = 12;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_unidelayvariation() const {
  return this != internal_default_instance() && unidelayvariation_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_unidelayvariation() const {
  return _internal_has_unidelayvariation();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_unidelayvariation() {
  if (GetArenaForAllocation() == nullptr && unidelayvariation_ != nullptr) {
    delete unidelayvariation_;
  }
  unidelayvariation_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniDelayVar& SLBgplsTopoL2BundleMemberAttr::_internal_unidelayvariation() const {
  const ::service_layer::SLBgplsTopoUniDelayVar* p = unidelayvariation_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniDelayVar&>(
      ::service_layer::_SLBgplsTopoUniDelayVar_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniDelayVar& SLBgplsTopoL2BundleMemberAttr::unidelayvariation() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UniDelayVariation)
  return _internal_unidelayvariation();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_unidelayvariation(
    ::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unidelayvariation_);
  }
  unidelayvariation_ = unidelayvariation;
  if (unidelayvariation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniDelayVariation)
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoL2BundleMemberAttr::release_unidelayvariation() {
  
  ::service_layer::SLBgplsTopoUniDelayVar* temp = unidelayvariation_;
  unidelayvariation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_unidelayvariation() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.UniDelayVariation)
  
  ::service_layer::SLBgplsTopoUniDelayVar* temp = unidelayvariation_;
  unidelayvariation_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_unidelayvariation() {
  
  if (unidelayvariation_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniDelayVar>(GetArenaForAllocation());
    unidelayvariation_ = p;
  }
  return unidelayvariation_;
}
inline ::service_layer::SLBgplsTopoUniDelayVar* SLBgplsTopoL2BundleMemberAttr::mutable_unidelayvariation() {
  ::service_layer::SLBgplsTopoUniDelayVar* _msg = _internal_mutable_unidelayvariation();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UniDelayVariation)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_unidelayvariation(::service_layer::SLBgplsTopoUniDelayVar* unidelayvariation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unidelayvariation_;
  }
  if (unidelayvariation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniDelayVar>::GetOwningArena(unidelayvariation);
    if (message_arena != submessage_arena) {
      unidelayvariation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unidelayvariation, submessage_arena);
    }
    
  } else {
    
  }
  unidelayvariation_ = unidelayvariation;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniDelayVariation)
}

// .service_layer.SLBgplsTopoUniLinkLoss UniLinkLoss = 13;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_unilinkloss() const {
  return this != internal_default_instance() && unilinkloss_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_unilinkloss() const {
  return _internal_has_unilinkloss();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_unilinkloss() {
  if (GetArenaForAllocation() == nullptr && unilinkloss_ != nullptr) {
    delete unilinkloss_;
  }
  unilinkloss_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniLinkLoss& SLBgplsTopoL2BundleMemberAttr::_internal_unilinkloss() const {
  const ::service_layer::SLBgplsTopoUniLinkLoss* p = unilinkloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniLinkLoss&>(
      ::service_layer::_SLBgplsTopoUniLinkLoss_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniLinkLoss& SLBgplsTopoL2BundleMemberAttr::unilinkloss() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkLoss)
  return _internal_unilinkloss();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_unilinkloss(
    ::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unilinkloss_);
  }
  unilinkloss_ = unilinkloss;
  if (unilinkloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkLoss)
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoL2BundleMemberAttr::release_unilinkloss() {
  
  ::service_layer::SLBgplsTopoUniLinkLoss* temp = unilinkloss_;
  unilinkloss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_unilinkloss() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkLoss)
  
  ::service_layer::SLBgplsTopoUniLinkLoss* temp = unilinkloss_;
  unilinkloss_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_unilinkloss() {
  
  if (unilinkloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniLinkLoss>(GetArenaForAllocation());
    unilinkloss_ = p;
  }
  return unilinkloss_;
}
inline ::service_layer::SLBgplsTopoUniLinkLoss* SLBgplsTopoL2BundleMemberAttr::mutable_unilinkloss() {
  ::service_layer::SLBgplsTopoUniLinkLoss* _msg = _internal_mutable_unilinkloss();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkLoss)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_unilinkloss(::service_layer::SLBgplsTopoUniLinkLoss* unilinkloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unilinkloss_;
  }
  if (unilinkloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniLinkLoss>::GetOwningArena(unilinkloss);
    if (message_arena != submessage_arena) {
      unilinkloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unilinkloss, submessage_arena);
    }
    
  } else {
    
  }
  unilinkloss_ = unilinkloss;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkLoss)
}

// .service_layer.SLBgplsTopoUniResBandwidth UniResBandwidth = 14;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_uniresbandwidth() const {
  return this != internal_default_instance() && uniresbandwidth_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_uniresbandwidth() const {
  return _internal_has_uniresbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_uniresbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniresbandwidth_ != nullptr) {
    delete uniresbandwidth_;
  }
  uniresbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniResBandwidth& SLBgplsTopoL2BundleMemberAttr::_internal_uniresbandwidth() const {
  const ::service_layer::SLBgplsTopoUniResBandwidth* p = uniresbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniResBandwidth&>(
      ::service_layer::_SLBgplsTopoUniResBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniResBandwidth& SLBgplsTopoL2BundleMemberAttr::uniresbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UniResBandwidth)
  return _internal_uniresbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_uniresbandwidth(
    ::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniresbandwidth_);
  }
  uniresbandwidth_ = uniresbandwidth;
  if (uniresbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniResBandwidth)
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoL2BundleMemberAttr::release_uniresbandwidth() {
  
  ::service_layer::SLBgplsTopoUniResBandwidth* temp = uniresbandwidth_;
  uniresbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_uniresbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.UniResBandwidth)
  
  ::service_layer::SLBgplsTopoUniResBandwidth* temp = uniresbandwidth_;
  uniresbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_uniresbandwidth() {
  
  if (uniresbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniResBandwidth>(GetArenaForAllocation());
    uniresbandwidth_ = p;
  }
  return uniresbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniResBandwidth* SLBgplsTopoL2BundleMemberAttr::mutable_uniresbandwidth() {
  ::service_layer::SLBgplsTopoUniResBandwidth* _msg = _internal_mutable_uniresbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UniResBandwidth)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_uniresbandwidth(::service_layer::SLBgplsTopoUniResBandwidth* uniresbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniresbandwidth_;
  }
  if (uniresbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniResBandwidth>::GetOwningArena(uniresbandwidth);
    if (message_arena != submessage_arena) {
      uniresbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniresbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniresbandwidth_ = uniresbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniResBandwidth)
}

// .service_layer.SLBgplsTopoUniAvailBandwidth UniAvailBandwidth = 15;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_uniavailbandwidth() const {
  return this != internal_default_instance() && uniavailbandwidth_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_uniavailbandwidth() const {
  return _internal_has_uniavailbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_uniavailbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniavailbandwidth_ != nullptr) {
    delete uniavailbandwidth_;
  }
  uniavailbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniAvailBandwidth& SLBgplsTopoL2BundleMemberAttr::_internal_uniavailbandwidth() const {
  const ::service_layer::SLBgplsTopoUniAvailBandwidth* p = uniavailbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniAvailBandwidth&>(
      ::service_layer::_SLBgplsTopoUniAvailBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniAvailBandwidth& SLBgplsTopoL2BundleMemberAttr::uniavailbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UniAvailBandwidth)
  return _internal_uniavailbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_uniavailbandwidth(
    ::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniavailbandwidth_);
  }
  uniavailbandwidth_ = uniavailbandwidth;
  if (uniavailbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniAvailBandwidth)
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoL2BundleMemberAttr::release_uniavailbandwidth() {
  
  ::service_layer::SLBgplsTopoUniAvailBandwidth* temp = uniavailbandwidth_;
  uniavailbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_uniavailbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.UniAvailBandwidth)
  
  ::service_layer::SLBgplsTopoUniAvailBandwidth* temp = uniavailbandwidth_;
  uniavailbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_uniavailbandwidth() {
  
  if (uniavailbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniAvailBandwidth>(GetArenaForAllocation());
    uniavailbandwidth_ = p;
  }
  return uniavailbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniAvailBandwidth* SLBgplsTopoL2BundleMemberAttr::mutable_uniavailbandwidth() {
  ::service_layer::SLBgplsTopoUniAvailBandwidth* _msg = _internal_mutable_uniavailbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UniAvailBandwidth)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_uniavailbandwidth(::service_layer::SLBgplsTopoUniAvailBandwidth* uniavailbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniavailbandwidth_;
  }
  if (uniavailbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniAvailBandwidth>::GetOwningArena(uniavailbandwidth);
    if (message_arena != submessage_arena) {
      uniavailbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniavailbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniavailbandwidth_ = uniavailbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniAvailBandwidth)
}

// .service_layer.SLBgplsTopoUniUtilBandwidth UniUtilBandwidth = 16;
inline bool SLBgplsTopoL2BundleMemberAttr::_internal_has_uniutilbandwidth() const {
  return this != internal_default_instance() && uniutilbandwidth_ != nullptr;
}
inline bool SLBgplsTopoL2BundleMemberAttr::has_uniutilbandwidth() const {
  return _internal_has_uniutilbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_uniutilbandwidth() {
  if (GetArenaForAllocation() == nullptr && uniutilbandwidth_ != nullptr) {
    delete uniutilbandwidth_;
  }
  uniutilbandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoUniUtilBandwidth& SLBgplsTopoL2BundleMemberAttr::_internal_uniutilbandwidth() const {
  const ::service_layer::SLBgplsTopoUniUtilBandwidth* p = uniutilbandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoUniUtilBandwidth&>(
      ::service_layer::_SLBgplsTopoUniUtilBandwidth_default_instance_);
}
inline const ::service_layer::SLBgplsTopoUniUtilBandwidth& SLBgplsTopoL2BundleMemberAttr::uniutilbandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UniUtilBandwidth)
  return _internal_uniutilbandwidth();
}
inline void SLBgplsTopoL2BundleMemberAttr::unsafe_arena_set_allocated_uniutilbandwidth(
    ::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniutilbandwidth_);
  }
  uniutilbandwidth_ = uniutilbandwidth;
  if (uniutilbandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniUtilBandwidth)
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoL2BundleMemberAttr::release_uniutilbandwidth() {
  
  ::service_layer::SLBgplsTopoUniUtilBandwidth* temp = uniutilbandwidth_;
  uniutilbandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoL2BundleMemberAttr::unsafe_arena_release_uniutilbandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoL2BundleMemberAttr.UniUtilBandwidth)
  
  ::service_layer::SLBgplsTopoUniUtilBandwidth* temp = uniutilbandwidth_;
  uniutilbandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoL2BundleMemberAttr::_internal_mutable_uniutilbandwidth() {
  
  if (uniutilbandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoUniUtilBandwidth>(GetArenaForAllocation());
    uniutilbandwidth_ = p;
  }
  return uniutilbandwidth_;
}
inline ::service_layer::SLBgplsTopoUniUtilBandwidth* SLBgplsTopoL2BundleMemberAttr::mutable_uniutilbandwidth() {
  ::service_layer::SLBgplsTopoUniUtilBandwidth* _msg = _internal_mutable_uniutilbandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UniUtilBandwidth)
  return _msg;
}
inline void SLBgplsTopoL2BundleMemberAttr::set_allocated_uniutilbandwidth(::service_layer::SLBgplsTopoUniUtilBandwidth* uniutilbandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uniutilbandwidth_;
  }
  if (uniutilbandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoUniUtilBandwidth>::GetOwningArena(uniutilbandwidth);
    if (message_arena != submessage_arena) {
      uniutilbandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniutilbandwidth, submessage_arena);
    }
    
  } else {
    
  }
  uniutilbandwidth_ = uniutilbandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoL2BundleMemberAttr.UniUtilBandwidth)
}

// repeated .service_layer.SLBgplsTopoAslaAttr Asla = 17;
inline int SLBgplsTopoL2BundleMemberAttr::_internal_asla_size() const {
  return asla_.size();
}
inline int SLBgplsTopoL2BundleMemberAttr::asla_size() const {
  return _internal_asla_size();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_asla() {
  asla_.Clear();
}
inline ::service_layer::SLBgplsTopoAslaAttr* SLBgplsTopoL2BundleMemberAttr::mutable_asla(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.Asla)
  return asla_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >*
SLBgplsTopoL2BundleMemberAttr::mutable_asla() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoL2BundleMemberAttr.Asla)
  return &asla_;
}
inline const ::service_layer::SLBgplsTopoAslaAttr& SLBgplsTopoL2BundleMemberAttr::_internal_asla(int index) const {
  return asla_.Get(index);
}
inline const ::service_layer::SLBgplsTopoAslaAttr& SLBgplsTopoL2BundleMemberAttr::asla(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.Asla)
  return _internal_asla(index);
}
inline ::service_layer::SLBgplsTopoAslaAttr* SLBgplsTopoL2BundleMemberAttr::_internal_add_asla() {
  return asla_.Add();
}
inline ::service_layer::SLBgplsTopoAslaAttr* SLBgplsTopoL2BundleMemberAttr::add_asla() {
  ::service_layer::SLBgplsTopoAslaAttr* _add = _internal_add_asla();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoL2BundleMemberAttr.Asla)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoAslaAttr >&
SLBgplsTopoL2BundleMemberAttr::asla() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoL2BundleMemberAttr.Asla)
  return asla_;
}

// repeated .service_layer.SLBgplsTopoExtAdminGroup ExtAdminGroup = 18;
inline int SLBgplsTopoL2BundleMemberAttr::_internal_extadmingroup_size() const {
  return extadmingroup_.size();
}
inline int SLBgplsTopoL2BundleMemberAttr::extadmingroup_size() const {
  return _internal_extadmingroup_size();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_extadmingroup() {
  extadmingroup_.Clear();
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoL2BundleMemberAttr::mutable_extadmingroup(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.ExtAdminGroup)
  return extadmingroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >*
SLBgplsTopoL2BundleMemberAttr::mutable_extadmingroup() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoL2BundleMemberAttr.ExtAdminGroup)
  return &extadmingroup_;
}
inline const ::service_layer::SLBgplsTopoExtAdminGroup& SLBgplsTopoL2BundleMemberAttr::_internal_extadmingroup(int index) const {
  return extadmingroup_.Get(index);
}
inline const ::service_layer::SLBgplsTopoExtAdminGroup& SLBgplsTopoL2BundleMemberAttr::extadmingroup(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.ExtAdminGroup)
  return _internal_extadmingroup(index);
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoL2BundleMemberAttr::_internal_add_extadmingroup() {
  return extadmingroup_.Add();
}
inline ::service_layer::SLBgplsTopoExtAdminGroup* SLBgplsTopoL2BundleMemberAttr::add_extadmingroup() {
  ::service_layer::SLBgplsTopoExtAdminGroup* _add = _internal_add_extadmingroup();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoL2BundleMemberAttr.ExtAdminGroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoExtAdminGroup >&
SLBgplsTopoL2BundleMemberAttr::extadmingroup() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoL2BundleMemberAttr.ExtAdminGroup)
  return extadmingroup_;
}

// repeated .service_layer.SLBgplsTopoUnknownAttr UnknownAttr = 19;
inline int SLBgplsTopoL2BundleMemberAttr::_internal_unknownattr_size() const {
  return unknownattr_.size();
}
inline int SLBgplsTopoL2BundleMemberAttr::unknownattr_size() const {
  return _internal_unknownattr_size();
}
inline void SLBgplsTopoL2BundleMemberAttr::clear_unknownattr() {
  unknownattr_.Clear();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoL2BundleMemberAttr::mutable_unknownattr(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoL2BundleMemberAttr.UnknownAttr)
  return unknownattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >*
SLBgplsTopoL2BundleMemberAttr::mutable_unknownattr() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoL2BundleMemberAttr.UnknownAttr)
  return &unknownattr_;
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoL2BundleMemberAttr::_internal_unknownattr(int index) const {
  return unknownattr_.Get(index);
}
inline const ::service_layer::SLBgplsTopoUnknownAttr& SLBgplsTopoL2BundleMemberAttr::unknownattr(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoL2BundleMemberAttr.UnknownAttr)
  return _internal_unknownattr(index);
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoL2BundleMemberAttr::_internal_add_unknownattr() {
  return unknownattr_.Add();
}
inline ::service_layer::SLBgplsTopoUnknownAttr* SLBgplsTopoL2BundleMemberAttr::add_unknownattr() {
  ::service_layer::SLBgplsTopoUnknownAttr* _add = _internal_add_unknownattr();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoL2BundleMemberAttr.UnknownAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoUnknownAttr >&
SLBgplsTopoL2BundleMemberAttr::unknownattr() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoL2BundleMemberAttr.UnknownAttr)
  return unknownattr_;
}

// -------------------------------------------------------------------

// SLBgplsTopoExtAdminGroup

// uint32 Group = 1;
inline void SLBgplsTopoExtAdminGroup::clear_group() {
  group_ = 0u;
}
inline uint32_t SLBgplsTopoExtAdminGroup::_internal_group() const {
  return group_;
}
inline uint32_t SLBgplsTopoExtAdminGroup::group() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoExtAdminGroup.Group)
  return _internal_group();
}
inline void SLBgplsTopoExtAdminGroup::_internal_set_group(uint32_t value) {
  
  group_ = value;
}
inline void SLBgplsTopoExtAdminGroup::set_group(uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoExtAdminGroup.Group)
}

// -------------------------------------------------------------------

// SlBgplsTopoSrBsid

// uint32 MplsBsid = 1;
inline bool SlBgplsTopoSrBsid::_internal_has_mplsbsid() const {
  return BindingSid_case() == kMplsBsid;
}
inline bool SlBgplsTopoSrBsid::has_mplsbsid() const {
  return _internal_has_mplsbsid();
}
inline void SlBgplsTopoSrBsid::set_has_mplsbsid() {
  _oneof_case_[0] = kMplsBsid;
}
inline void SlBgplsTopoSrBsid::clear_mplsbsid() {
  if (_internal_has_mplsbsid()) {
    BindingSid_.mplsbsid_ = 0u;
    clear_has_BindingSid();
  }
}
inline uint32_t SlBgplsTopoSrBsid::_internal_mplsbsid() const {
  if (_internal_has_mplsbsid()) {
    return BindingSid_.mplsbsid_;
  }
  return 0u;
}
inline void SlBgplsTopoSrBsid::_internal_set_mplsbsid(uint32_t value) {
  if (!_internal_has_mplsbsid()) {
    clear_BindingSid();
    set_has_mplsbsid();
  }
  BindingSid_.mplsbsid_ = value;
}
inline uint32_t SlBgplsTopoSrBsid::mplsbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SlBgplsTopoSrBsid.MplsBsid)
  return _internal_mplsbsid();
}
inline void SlBgplsTopoSrBsid::set_mplsbsid(uint32_t value) {
  _internal_set_mplsbsid(value);
  // @@protoc_insertion_point(field_set:service_layer.SlBgplsTopoSrBsid.MplsBsid)
}

// bytes Srv6Bsid = 2;
inline bool SlBgplsTopoSrBsid::_internal_has_srv6bsid() const {
  return BindingSid_case() == kSrv6Bsid;
}
inline bool SlBgplsTopoSrBsid::has_srv6bsid() const {
  return _internal_has_srv6bsid();
}
inline void SlBgplsTopoSrBsid::set_has_srv6bsid() {
  _oneof_case_[0] = kSrv6Bsid;
}
inline void SlBgplsTopoSrBsid::clear_srv6bsid() {
  if (_internal_has_srv6bsid()) {
    BindingSid_.srv6bsid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_BindingSid();
  }
}
inline const std::string& SlBgplsTopoSrBsid::srv6bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SlBgplsTopoSrBsid.Srv6Bsid)
  return _internal_srv6bsid();
}
template <typename ArgT0, typename... ArgT>
inline void SlBgplsTopoSrBsid::set_srv6bsid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  BindingSid_.srv6bsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SlBgplsTopoSrBsid.Srv6Bsid)
}
inline std::string* SlBgplsTopoSrBsid::mutable_srv6bsid() {
  std::string* _s = _internal_mutable_srv6bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SlBgplsTopoSrBsid.Srv6Bsid)
  return _s;
}
inline const std::string& SlBgplsTopoSrBsid::_internal_srv6bsid() const {
  if (_internal_has_srv6bsid()) {
    return BindingSid_.srv6bsid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SlBgplsTopoSrBsid::_internal_set_srv6bsid(const std::string& value) {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  BindingSid_.srv6bsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlBgplsTopoSrBsid::_internal_mutable_srv6bsid() {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return BindingSid_.srv6bsid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlBgplsTopoSrBsid::release_srv6bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SlBgplsTopoSrBsid.Srv6Bsid)
  if (_internal_has_srv6bsid()) {
    clear_has_BindingSid();
    return BindingSid_.srv6bsid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SlBgplsTopoSrBsid::set_allocated_srv6bsid(std::string* srv6bsid) {
  if (has_BindingSid()) {
    clear_BindingSid();
  }
  if (srv6bsid != nullptr) {
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(srv6bsid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(srv6bsid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SlBgplsTopoSrBsid.Srv6Bsid)
}

inline bool SlBgplsTopoSrBsid::has_BindingSid() const {
  return BindingSid_case() != BINDINGSID_NOT_SET;
}
inline void SlBgplsTopoSrBsid::clear_has_BindingSid() {
  _oneof_case_[0] = BINDINGSID_NOT_SET;
}
inline SlBgplsTopoSrBsid::BindingSidCase SlBgplsTopoSrBsid::BindingSid_case() const {
  return SlBgplsTopoSrBsid::BindingSidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsTopoSrBindingSid

// bytes BsidFlags = 1;
inline void SLBgplsTopoSrBindingSid::clear_bsidflags() {
  bsidflags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrBindingSid::bsidflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrBindingSid.BsidFlags)
  return _internal_bsidflags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrBindingSid::set_bsidflags(ArgT0&& arg0, ArgT... args) {
 
 bsidflags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrBindingSid.BsidFlags)
}
inline std::string* SLBgplsTopoSrBindingSid::mutable_bsidflags() {
  std::string* _s = _internal_mutable_bsidflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrBindingSid.BsidFlags)
  return _s;
}
inline const std::string& SLBgplsTopoSrBindingSid::_internal_bsidflags() const {
  return bsidflags_.Get();
}
inline void SLBgplsTopoSrBindingSid::_internal_set_bsidflags(const std::string& value) {
  
  bsidflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrBindingSid::_internal_mutable_bsidflags() {
  
  return bsidflags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrBindingSid::release_bsidflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrBindingSid.BsidFlags)
  return bsidflags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrBindingSid::set_allocated_bsidflags(std::string* bsidflags) {
  if (bsidflags != nullptr) {
    
  } else {
    
  }
  bsidflags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bsidflags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bsidflags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bsidflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrBindingSid.BsidFlags)
}

// .service_layer.SlBgplsTopoSrBsid Bsid = 2;
inline bool SLBgplsTopoSrBindingSid::_internal_has_bsid() const {
  return this != internal_default_instance() && bsid_ != nullptr;
}
inline bool SLBgplsTopoSrBindingSid::has_bsid() const {
  return _internal_has_bsid();
}
inline void SLBgplsTopoSrBindingSid::clear_bsid() {
  if (GetArenaForAllocation() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrBindingSid::_internal_bsid() const {
  const ::service_layer::SlBgplsTopoSrBsid* p = bsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SlBgplsTopoSrBsid&>(
      ::service_layer::_SlBgplsTopoSrBsid_default_instance_);
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrBindingSid::bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrBindingSid.Bsid)
  return _internal_bsid();
}
inline void SLBgplsTopoSrBindingSid::unsafe_arena_set_allocated_bsid(
    ::service_layer::SlBgplsTopoSrBsid* bsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsid_);
  }
  bsid_ = bsid;
  if (bsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrBindingSid.Bsid)
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::release_bsid() {
  
  ::service_layer::SlBgplsTopoSrBsid* temp = bsid_;
  bsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::unsafe_arena_release_bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrBindingSid.Bsid)
  
  ::service_layer::SlBgplsTopoSrBsid* temp = bsid_;
  bsid_ = nullptr;
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::_internal_mutable_bsid() {
  
  if (bsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SlBgplsTopoSrBsid>(GetArenaForAllocation());
    bsid_ = p;
  }
  return bsid_;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::mutable_bsid() {
  ::service_layer::SlBgplsTopoSrBsid* _msg = _internal_mutable_bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrBindingSid.Bsid)
  return _msg;
}
inline void SLBgplsTopoSrBindingSid::set_allocated_bsid(::service_layer::SlBgplsTopoSrBsid* bsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bsid_;
  }
  if (bsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SlBgplsTopoSrBsid>::GetOwningArena(bsid);
    if (message_arena != submessage_arena) {
      bsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsid, submessage_arena);
    }
    
  } else {
    
  }
  bsid_ = bsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrBindingSid.Bsid)
}

// .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
inline bool SLBgplsTopoSrBindingSid::_internal_has_specifiedbsid() const {
  return this != internal_default_instance() && specifiedbsid_ != nullptr;
}
inline bool SLBgplsTopoSrBindingSid::has_specifiedbsid() const {
  return _internal_has_specifiedbsid();
}
inline void SLBgplsTopoSrBindingSid::clear_specifiedbsid() {
  if (GetArenaForAllocation() == nullptr && specifiedbsid_ != nullptr) {
    delete specifiedbsid_;
  }
  specifiedbsid_ = nullptr;
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrBindingSid::_internal_specifiedbsid() const {
  const ::service_layer::SlBgplsTopoSrBsid* p = specifiedbsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SlBgplsTopoSrBsid&>(
      ::service_layer::_SlBgplsTopoSrBsid_default_instance_);
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrBindingSid::specifiedbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrBindingSid.SpecifiedBsid)
  return _internal_specifiedbsid();
}
inline void SLBgplsTopoSrBindingSid::unsafe_arena_set_allocated_specifiedbsid(
    ::service_layer::SlBgplsTopoSrBsid* specifiedbsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specifiedbsid_);
  }
  specifiedbsid_ = specifiedbsid;
  if (specifiedbsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrBindingSid.SpecifiedBsid)
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::release_specifiedbsid() {
  
  ::service_layer::SlBgplsTopoSrBsid* temp = specifiedbsid_;
  specifiedbsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::unsafe_arena_release_specifiedbsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrBindingSid.SpecifiedBsid)
  
  ::service_layer::SlBgplsTopoSrBsid* temp = specifiedbsid_;
  specifiedbsid_ = nullptr;
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::_internal_mutable_specifiedbsid() {
  
  if (specifiedbsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SlBgplsTopoSrBsid>(GetArenaForAllocation());
    specifiedbsid_ = p;
  }
  return specifiedbsid_;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrBindingSid::mutable_specifiedbsid() {
  ::service_layer::SlBgplsTopoSrBsid* _msg = _internal_mutable_specifiedbsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrBindingSid.SpecifiedBsid)
  return _msg;
}
inline void SLBgplsTopoSrBindingSid::set_allocated_specifiedbsid(::service_layer::SlBgplsTopoSrBsid* specifiedbsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete specifiedbsid_;
  }
  if (specifiedbsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SlBgplsTopoSrBsid>::GetOwningArena(specifiedbsid);
    if (message_arena != submessage_arena) {
      specifiedbsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specifiedbsid, submessage_arena);
    }
    
  } else {
    
  }
  specifiedbsid_ = specifiedbsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrBindingSid.SpecifiedBsid)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrCpState

// uint32 Priority = 1;
inline void SLBgplsTopoSrCpState::clear_priority() {
  priority_ = 0u;
}
inline uint32_t SLBgplsTopoSrCpState::_internal_priority() const {
  return priority_;
}
inline uint32_t SLBgplsTopoSrCpState::priority() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpState.Priority)
  return _internal_priority();
}
inline void SLBgplsTopoSrCpState::_internal_set_priority(uint32_t value) {
  
  priority_ = value;
}
inline void SLBgplsTopoSrCpState::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpState.Priority)
}

// bytes Flags = 2;
inline void SLBgplsTopoSrCpState::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrCpState::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpState.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrCpState::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpState.Flags)
}
inline std::string* SLBgplsTopoSrCpState::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpState.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrCpState::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrCpState::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpState::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpState::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpState.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrCpState::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpState.Flags)
}

// uint32 Preference = 3;
inline void SLBgplsTopoSrCpState::clear_preference() {
  preference_ = 0u;
}
inline uint32_t SLBgplsTopoSrCpState::_internal_preference() const {
  return preference_;
}
inline uint32_t SLBgplsTopoSrCpState::preference() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpState.Preference)
  return _internal_preference();
}
inline void SLBgplsTopoSrCpState::_internal_set_preference(uint32_t value) {
  
  preference_ = value;
}
inline void SLBgplsTopoSrCpState::set_preference(uint32_t value) {
  _internal_set_preference(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpState.Preference)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrCpName

// string Name = 1;
inline void SLBgplsTopoSrCpName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrCpName::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrCpName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpName.Name)
}
inline std::string* SLBgplsTopoSrCpName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpName.Name)
  return _s;
}
inline const std::string& SLBgplsTopoSrCpName::_internal_name() const {
  return name_.Get();
}
inline void SLBgplsTopoSrCpName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpName::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrCpName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpName.Name)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrCpConstraints

// bytes Flags = 1;
inline void SLBgplsTopoSrCpConstraints::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrCpConstraints::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrCpConstraints::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpConstraints.Flags)
}
inline std::string* SLBgplsTopoSrCpConstraints::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrCpConstraints::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrCpConstraints::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpConstraints::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpConstraints::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpConstraints.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrCpConstraints::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Flags)
}

// uint32 Mtid = 2;
inline void SLBgplsTopoSrCpConstraints::clear_mtid() {
  mtid_ = 0u;
}
inline uint32_t SLBgplsTopoSrCpConstraints::_internal_mtid() const {
  return mtid_;
}
inline uint32_t SLBgplsTopoSrCpConstraints::mtid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Mtid)
  return _internal_mtid();
}
inline void SLBgplsTopoSrCpConstraints::_internal_set_mtid(uint32_t value) {
  
  mtid_ = value;
}
inline void SLBgplsTopoSrCpConstraints::set_mtid(uint32_t value) {
  _internal_set_mtid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpConstraints.Mtid)
}

// uint32 Algorithm = 3;
inline void SLBgplsTopoSrCpConstraints::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoSrCpConstraints::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoSrCpConstraints::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoSrCpConstraints::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoSrCpConstraints::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpConstraints.Algorithm)
}

// .service_layer.SLBgplsTopoSrAffinityConstraints Affinity = 5;
inline bool SLBgplsTopoSrCpConstraints::_internal_has_affinity() const {
  return this != internal_default_instance() && affinity_ != nullptr;
}
inline bool SLBgplsTopoSrCpConstraints::has_affinity() const {
  return _internal_has_affinity();
}
inline void SLBgplsTopoSrCpConstraints::clear_affinity() {
  if (GetArenaForAllocation() == nullptr && affinity_ != nullptr) {
    delete affinity_;
  }
  affinity_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrAffinityConstraints& SLBgplsTopoSrCpConstraints::_internal_affinity() const {
  const ::service_layer::SLBgplsTopoSrAffinityConstraints* p = affinity_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrAffinityConstraints&>(
      ::service_layer::_SLBgplsTopoSrAffinityConstraints_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrAffinityConstraints& SLBgplsTopoSrCpConstraints::affinity() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Affinity)
  return _internal_affinity();
}
inline void SLBgplsTopoSrCpConstraints::unsafe_arena_set_allocated_affinity(
    ::service_layer::SLBgplsTopoSrAffinityConstraints* affinity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinity_);
  }
  affinity_ = affinity;
  if (affinity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Affinity)
}
inline ::service_layer::SLBgplsTopoSrAffinityConstraints* SLBgplsTopoSrCpConstraints::release_affinity() {
  
  ::service_layer::SLBgplsTopoSrAffinityConstraints* temp = affinity_;
  affinity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrAffinityConstraints* SLBgplsTopoSrCpConstraints::unsafe_arena_release_affinity() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpConstraints.Affinity)
  
  ::service_layer::SLBgplsTopoSrAffinityConstraints* temp = affinity_;
  affinity_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrAffinityConstraints* SLBgplsTopoSrCpConstraints::_internal_mutable_affinity() {
  
  if (affinity_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrAffinityConstraints>(GetArenaForAllocation());
    affinity_ = p;
  }
  return affinity_;
}
inline ::service_layer::SLBgplsTopoSrAffinityConstraints* SLBgplsTopoSrCpConstraints::mutable_affinity() {
  ::service_layer::SLBgplsTopoSrAffinityConstraints* _msg = _internal_mutable_affinity();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.Affinity)
  return _msg;
}
inline void SLBgplsTopoSrCpConstraints::set_allocated_affinity(::service_layer::SLBgplsTopoSrAffinityConstraints* affinity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete affinity_;
  }
  if (affinity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrAffinityConstraints>::GetOwningArena(affinity);
    if (message_arena != submessage_arena) {
      affinity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affinity, submessage_arena);
    }
    
  } else {
    
  }
  affinity_ = affinity;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Affinity)
}

// .service_layer.SLBgplsTopoSrSrlgConstraints Srlg = 6;
inline bool SLBgplsTopoSrCpConstraints::_internal_has_srlg() const {
  return this != internal_default_instance() && srlg_ != nullptr;
}
inline bool SLBgplsTopoSrCpConstraints::has_srlg() const {
  return _internal_has_srlg();
}
inline void SLBgplsTopoSrCpConstraints::clear_srlg() {
  if (GetArenaForAllocation() == nullptr && srlg_ != nullptr) {
    delete srlg_;
  }
  srlg_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrSrlgConstraints& SLBgplsTopoSrCpConstraints::_internal_srlg() const {
  const ::service_layer::SLBgplsTopoSrSrlgConstraints* p = srlg_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrSrlgConstraints&>(
      ::service_layer::_SLBgplsTopoSrSrlgConstraints_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrSrlgConstraints& SLBgplsTopoSrCpConstraints::srlg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Srlg)
  return _internal_srlg();
}
inline void SLBgplsTopoSrCpConstraints::unsafe_arena_set_allocated_srlg(
    ::service_layer::SLBgplsTopoSrSrlgConstraints* srlg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srlg_);
  }
  srlg_ = srlg;
  if (srlg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Srlg)
}
inline ::service_layer::SLBgplsTopoSrSrlgConstraints* SLBgplsTopoSrCpConstraints::release_srlg() {
  
  ::service_layer::SLBgplsTopoSrSrlgConstraints* temp = srlg_;
  srlg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrSrlgConstraints* SLBgplsTopoSrCpConstraints::unsafe_arena_release_srlg() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpConstraints.Srlg)
  
  ::service_layer::SLBgplsTopoSrSrlgConstraints* temp = srlg_;
  srlg_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrSrlgConstraints* SLBgplsTopoSrCpConstraints::_internal_mutable_srlg() {
  
  if (srlg_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrSrlgConstraints>(GetArenaForAllocation());
    srlg_ = p;
  }
  return srlg_;
}
inline ::service_layer::SLBgplsTopoSrSrlgConstraints* SLBgplsTopoSrCpConstraints::mutable_srlg() {
  ::service_layer::SLBgplsTopoSrSrlgConstraints* _msg = _internal_mutable_srlg();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.Srlg)
  return _msg;
}
inline void SLBgplsTopoSrCpConstraints::set_allocated_srlg(::service_layer::SLBgplsTopoSrSrlgConstraints* srlg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srlg_;
  }
  if (srlg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrSrlgConstraints>::GetOwningArena(srlg);
    if (message_arena != submessage_arena) {
      srlg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srlg, submessage_arena);
    }
    
  } else {
    
  }
  srlg_ = srlg;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Srlg)
}

// .service_layer.SLBgplsTopoSrBandwidthConstraint Bandwidth = 4;
inline bool SLBgplsTopoSrCpConstraints::_internal_has_bandwidth() const {
  return this != internal_default_instance() && bandwidth_ != nullptr;
}
inline bool SLBgplsTopoSrCpConstraints::has_bandwidth() const {
  return _internal_has_bandwidth();
}
inline void SLBgplsTopoSrCpConstraints::clear_bandwidth() {
  if (GetArenaForAllocation() == nullptr && bandwidth_ != nullptr) {
    delete bandwidth_;
  }
  bandwidth_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrBandwidthConstraint& SLBgplsTopoSrCpConstraints::_internal_bandwidth() const {
  const ::service_layer::SLBgplsTopoSrBandwidthConstraint* p = bandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrBandwidthConstraint&>(
      ::service_layer::_SLBgplsTopoSrBandwidthConstraint_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrBandwidthConstraint& SLBgplsTopoSrCpConstraints::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Bandwidth)
  return _internal_bandwidth();
}
inline void SLBgplsTopoSrCpConstraints::unsafe_arena_set_allocated_bandwidth(
    ::service_layer::SLBgplsTopoSrBandwidthConstraint* bandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bandwidth_);
  }
  bandwidth_ = bandwidth;
  if (bandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Bandwidth)
}
inline ::service_layer::SLBgplsTopoSrBandwidthConstraint* SLBgplsTopoSrCpConstraints::release_bandwidth() {
  
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* temp = bandwidth_;
  bandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrBandwidthConstraint* SLBgplsTopoSrCpConstraints::unsafe_arena_release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpConstraints.Bandwidth)
  
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* temp = bandwidth_;
  bandwidth_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrBandwidthConstraint* SLBgplsTopoSrCpConstraints::_internal_mutable_bandwidth() {
  
  if (bandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrBandwidthConstraint>(GetArenaForAllocation());
    bandwidth_ = p;
  }
  return bandwidth_;
}
inline ::service_layer::SLBgplsTopoSrBandwidthConstraint* SLBgplsTopoSrCpConstraints::mutable_bandwidth() {
  ::service_layer::SLBgplsTopoSrBandwidthConstraint* _msg = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.Bandwidth)
  return _msg;
}
inline void SLBgplsTopoSrCpConstraints::set_allocated_bandwidth(::service_layer::SLBgplsTopoSrBandwidthConstraint* bandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bandwidth_;
  }
  if (bandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrBandwidthConstraint>::GetOwningArena(bandwidth);
    if (message_arena != submessage_arena) {
      bandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bandwidth, submessage_arena);
    }
    
  } else {
    
  }
  bandwidth_ = bandwidth;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Bandwidth)
}

// .service_layer.SLBgplsTopoSrDisjointGroupConstraint Disjoint = 7;
inline bool SLBgplsTopoSrCpConstraints::_internal_has_disjoint() const {
  return this != internal_default_instance() && disjoint_ != nullptr;
}
inline bool SLBgplsTopoSrCpConstraints::has_disjoint() const {
  return _internal_has_disjoint();
}
inline void SLBgplsTopoSrCpConstraints::clear_disjoint() {
  if (GetArenaForAllocation() == nullptr && disjoint_ != nullptr) {
    delete disjoint_;
  }
  disjoint_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint& SLBgplsTopoSrCpConstraints::_internal_disjoint() const {
  const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* p = disjoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint&>(
      ::service_layer::_SLBgplsTopoSrDisjointGroupConstraint_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrDisjointGroupConstraint& SLBgplsTopoSrCpConstraints::disjoint() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Disjoint)
  return _internal_disjoint();
}
inline void SLBgplsTopoSrCpConstraints::unsafe_arena_set_allocated_disjoint(
    ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* disjoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disjoint_);
  }
  disjoint_ = disjoint;
  if (disjoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Disjoint)
}
inline ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* SLBgplsTopoSrCpConstraints::release_disjoint() {
  
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* temp = disjoint_;
  disjoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* SLBgplsTopoSrCpConstraints::unsafe_arena_release_disjoint() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpConstraints.Disjoint)
  
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* temp = disjoint_;
  disjoint_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* SLBgplsTopoSrCpConstraints::_internal_mutable_disjoint() {
  
  if (disjoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrDisjointGroupConstraint>(GetArenaForAllocation());
    disjoint_ = p;
  }
  return disjoint_;
}
inline ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* SLBgplsTopoSrCpConstraints::mutable_disjoint() {
  ::service_layer::SLBgplsTopoSrDisjointGroupConstraint* _msg = _internal_mutable_disjoint();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.Disjoint)
  return _msg;
}
inline void SLBgplsTopoSrCpConstraints::set_allocated_disjoint(::service_layer::SLBgplsTopoSrDisjointGroupConstraint* disjoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete disjoint_;
  }
  if (disjoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrDisjointGroupConstraint>::GetOwningArena(disjoint);
    if (message_arena != submessage_arena) {
      disjoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disjoint, submessage_arena);
    }
    
  } else {
    
  }
  disjoint_ = disjoint;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.Disjoint)
}

// .service_layer.SLBgplsTopoSrBidirGroupConstraint BidirGroup = 8;
inline bool SLBgplsTopoSrCpConstraints::_internal_has_bidirgroup() const {
  return this != internal_default_instance() && bidirgroup_ != nullptr;
}
inline bool SLBgplsTopoSrCpConstraints::has_bidirgroup() const {
  return _internal_has_bidirgroup();
}
inline void SLBgplsTopoSrCpConstraints::clear_bidirgroup() {
  if (GetArenaForAllocation() == nullptr && bidirgroup_ != nullptr) {
    delete bidirgroup_;
  }
  bidirgroup_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrBidirGroupConstraint& SLBgplsTopoSrCpConstraints::_internal_bidirgroup() const {
  const ::service_layer::SLBgplsTopoSrBidirGroupConstraint* p = bidirgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrBidirGroupConstraint&>(
      ::service_layer::_SLBgplsTopoSrBidirGroupConstraint_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrBidirGroupConstraint& SLBgplsTopoSrCpConstraints::bidirgroup() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.BidirGroup)
  return _internal_bidirgroup();
}
inline void SLBgplsTopoSrCpConstraints::unsafe_arena_set_allocated_bidirgroup(
    ::service_layer::SLBgplsTopoSrBidirGroupConstraint* bidirgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bidirgroup_);
  }
  bidirgroup_ = bidirgroup;
  if (bidirgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.BidirGroup)
}
inline ::service_layer::SLBgplsTopoSrBidirGroupConstraint* SLBgplsTopoSrCpConstraints::release_bidirgroup() {
  
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* temp = bidirgroup_;
  bidirgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrBidirGroupConstraint* SLBgplsTopoSrCpConstraints::unsafe_arena_release_bidirgroup() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpConstraints.BidirGroup)
  
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* temp = bidirgroup_;
  bidirgroup_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrBidirGroupConstraint* SLBgplsTopoSrCpConstraints::_internal_mutable_bidirgroup() {
  
  if (bidirgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrBidirGroupConstraint>(GetArenaForAllocation());
    bidirgroup_ = p;
  }
  return bidirgroup_;
}
inline ::service_layer::SLBgplsTopoSrBidirGroupConstraint* SLBgplsTopoSrCpConstraints::mutable_bidirgroup() {
  ::service_layer::SLBgplsTopoSrBidirGroupConstraint* _msg = _internal_mutable_bidirgroup();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.BidirGroup)
  return _msg;
}
inline void SLBgplsTopoSrCpConstraints::set_allocated_bidirgroup(::service_layer::SLBgplsTopoSrBidirGroupConstraint* bidirgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bidirgroup_;
  }
  if (bidirgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrBidirGroupConstraint>::GetOwningArena(bidirgroup);
    if (message_arena != submessage_arena) {
      bidirgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidirgroup, submessage_arena);
    }
    
  } else {
    
  }
  bidirgroup_ = bidirgroup;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpConstraints.BidirGroup)
}

// repeated .service_layer.SLBgplsTopoSrMetricConstraint Metric = 9;
inline int SLBgplsTopoSrCpConstraints::_internal_metric_size() const {
  return metric_.size();
}
inline int SLBgplsTopoSrCpConstraints::metric_size() const {
  return _internal_metric_size();
}
inline void SLBgplsTopoSrCpConstraints::clear_metric() {
  metric_.Clear();
}
inline ::service_layer::SLBgplsTopoSrMetricConstraint* SLBgplsTopoSrCpConstraints::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpConstraints.Metric)
  return metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrMetricConstraint >*
SLBgplsTopoSrCpConstraints::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrCpConstraints.Metric)
  return &metric_;
}
inline const ::service_layer::SLBgplsTopoSrMetricConstraint& SLBgplsTopoSrCpConstraints::_internal_metric(int index) const {
  return metric_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrMetricConstraint& SLBgplsTopoSrCpConstraints::metric(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpConstraints.Metric)
  return _internal_metric(index);
}
inline ::service_layer::SLBgplsTopoSrMetricConstraint* SLBgplsTopoSrCpConstraints::_internal_add_metric() {
  return metric_.Add();
}
inline ::service_layer::SLBgplsTopoSrMetricConstraint* SLBgplsTopoSrCpConstraints::add_metric() {
  ::service_layer::SLBgplsTopoSrMetricConstraint* _add = _internal_add_metric();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrCpConstraints.Metric)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrMetricConstraint >&
SLBgplsTopoSrCpConstraints::metric() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrCpConstraints.Metric)
  return metric_;
}

// -------------------------------------------------------------------

// SLBgplsTopoSrSegList

// bytes Flags = 1;
inline void SLBgplsTopoSrSegList::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrSegList::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegList.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrSegList::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegList.Flags)
}
inline std::string* SLBgplsTopoSrSegList::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegList.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegList::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrSegList::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegList::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegList::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegList.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrSegList::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegList.Flags)
}

// uint32 Mtid = 2;
inline void SLBgplsTopoSrSegList::clear_mtid() {
  mtid_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegList::_internal_mtid() const {
  return mtid_;
}
inline uint32_t SLBgplsTopoSrSegList::mtid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegList.Mtid)
  return _internal_mtid();
}
inline void SLBgplsTopoSrSegList::_internal_set_mtid(uint32_t value) {
  
  mtid_ = value;
}
inline void SLBgplsTopoSrSegList::set_mtid(uint32_t value) {
  _internal_set_mtid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegList.Mtid)
}

// uint32 Algorithm = 3;
inline void SLBgplsTopoSrSegList::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegList::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoSrSegList::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegList.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoSrSegList::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoSrSegList::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegList.Algorithm)
}

// uint32 Weight = 4;
inline void SLBgplsTopoSrSegList::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegList::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoSrSegList::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegList.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoSrSegList::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoSrSegList::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegList.Weight)
}

// repeated .service_layer.SLBgplsTopoSrSegment Segments = 5;
inline int SLBgplsTopoSrSegList::_internal_segments_size() const {
  return segments_.size();
}
inline int SLBgplsTopoSrSegList::segments_size() const {
  return _internal_segments_size();
}
inline void SLBgplsTopoSrSegList::clear_segments() {
  segments_.Clear();
}
inline ::service_layer::SLBgplsTopoSrSegment* SLBgplsTopoSrSegList::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegList.Segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegment >*
SLBgplsTopoSrSegList::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrSegList.Segments)
  return &segments_;
}
inline const ::service_layer::SLBgplsTopoSrSegment& SLBgplsTopoSrSegList::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::service_layer::SLBgplsTopoSrSegment& SLBgplsTopoSrSegList::segments(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegList.Segments)
  return _internal_segments(index);
}
inline ::service_layer::SLBgplsTopoSrSegment* SLBgplsTopoSrSegList::_internal_add_segments() {
  return segments_.Add();
}
inline ::service_layer::SLBgplsTopoSrSegment* SLBgplsTopoSrSegList::add_segments() {
  ::service_layer::SLBgplsTopoSrSegment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrSegList.Segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLBgplsTopoSrSegment >&
SLBgplsTopoSrSegList::segments() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrSegList.Segments)
  return segments_;
}

// -------------------------------------------------------------------

// SLBgplsTopoSrSegmentDesc

// uint32 Algorithm = 1;
inline void SLBgplsTopoSrSegmentDesc::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegmentDesc::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoSrSegmentDesc::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoSrSegmentDesc::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Algorithm)
}

// bytes Ipv4LocAddr = 2;
inline bool SLBgplsTopoSrSegmentDesc::_internal_has_ipv4locaddr() const {
  return LocalNodeAddr_case() == kIpv4LocAddr;
}
inline bool SLBgplsTopoSrSegmentDesc::has_ipv4locaddr() const {
  return _internal_has_ipv4locaddr();
}
inline void SLBgplsTopoSrSegmentDesc::set_has_ipv4locaddr() {
  _oneof_case_[0] = kIpv4LocAddr;
}
inline void SLBgplsTopoSrSegmentDesc::clear_ipv4locaddr() {
  if (_internal_has_ipv4locaddr()) {
    LocalNodeAddr_.ipv4locaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_LocalNodeAddr();
  }
}
inline const std::string& SLBgplsTopoSrSegmentDesc::ipv4locaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4LocAddr)
  return _internal_ipv4locaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrSegmentDesc::set_ipv4locaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4locaddr()) {
    clear_LocalNodeAddr();
    set_has_ipv4locaddr();
    LocalNodeAddr_.ipv4locaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNodeAddr_.ipv4locaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4LocAddr)
}
inline std::string* SLBgplsTopoSrSegmentDesc::mutable_ipv4locaddr() {
  std::string* _s = _internal_mutable_ipv4locaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4LocAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegmentDesc::_internal_ipv4locaddr() const {
  if (_internal_has_ipv4locaddr()) {
    return LocalNodeAddr_.ipv4locaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_ipv4locaddr(const std::string& value) {
  if (!_internal_has_ipv4locaddr()) {
    clear_LocalNodeAddr();
    set_has_ipv4locaddr();
    LocalNodeAddr_.ipv4locaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNodeAddr_.ipv4locaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::_internal_mutable_ipv4locaddr() {
  if (!_internal_has_ipv4locaddr()) {
    clear_LocalNodeAddr();
    set_has_ipv4locaddr();
    LocalNodeAddr_.ipv4locaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return LocalNodeAddr_.ipv4locaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::release_ipv4locaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4LocAddr)
  if (_internal_has_ipv4locaddr()) {
    clear_has_LocalNodeAddr();
    return LocalNodeAddr_.ipv4locaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrSegmentDesc::set_allocated_ipv4locaddr(std::string* ipv4locaddr) {
  if (has_LocalNodeAddr()) {
    clear_LocalNodeAddr();
  }
  if (ipv4locaddr != nullptr) {
    set_has_ipv4locaddr();
    LocalNodeAddr_.ipv4locaddr_.UnsafeSetDefault(ipv4locaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4locaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4LocAddr)
}

// bytes Ipv6LocAddr = 3;
inline bool SLBgplsTopoSrSegmentDesc::_internal_has_ipv6locaddr() const {
  return LocalNodeAddr_case() == kIpv6LocAddr;
}
inline bool SLBgplsTopoSrSegmentDesc::has_ipv6locaddr() const {
  return _internal_has_ipv6locaddr();
}
inline void SLBgplsTopoSrSegmentDesc::set_has_ipv6locaddr() {
  _oneof_case_[0] = kIpv6LocAddr;
}
inline void SLBgplsTopoSrSegmentDesc::clear_ipv6locaddr() {
  if (_internal_has_ipv6locaddr()) {
    LocalNodeAddr_.ipv6locaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_LocalNodeAddr();
  }
}
inline const std::string& SLBgplsTopoSrSegmentDesc::ipv6locaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocAddr)
  return _internal_ipv6locaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrSegmentDesc::set_ipv6locaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6locaddr()) {
    clear_LocalNodeAddr();
    set_has_ipv6locaddr();
    LocalNodeAddr_.ipv6locaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNodeAddr_.ipv6locaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocAddr)
}
inline std::string* SLBgplsTopoSrSegmentDesc::mutable_ipv6locaddr() {
  std::string* _s = _internal_mutable_ipv6locaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegmentDesc::_internal_ipv6locaddr() const {
  if (_internal_has_ipv6locaddr()) {
    return LocalNodeAddr_.ipv6locaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_ipv6locaddr(const std::string& value) {
  if (!_internal_has_ipv6locaddr()) {
    clear_LocalNodeAddr();
    set_has_ipv6locaddr();
    LocalNodeAddr_.ipv6locaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNodeAddr_.ipv6locaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::_internal_mutable_ipv6locaddr() {
  if (!_internal_has_ipv6locaddr()) {
    clear_LocalNodeAddr();
    set_has_ipv6locaddr();
    LocalNodeAddr_.ipv6locaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return LocalNodeAddr_.ipv6locaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::release_ipv6locaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocAddr)
  if (_internal_has_ipv6locaddr()) {
    clear_has_LocalNodeAddr();
    return LocalNodeAddr_.ipv6locaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrSegmentDesc::set_allocated_ipv6locaddr(std::string* ipv6locaddr) {
  if (has_LocalNodeAddr()) {
    clear_LocalNodeAddr();
  }
  if (ipv6locaddr != nullptr) {
    set_has_ipv6locaddr();
    LocalNodeAddr_.ipv6locaddr_.UnsafeSetDefault(ipv6locaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6locaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocAddr)
}

// bytes Ipv4RemAddr = 4;
inline bool SLBgplsTopoSrSegmentDesc::_internal_has_ipv4remaddr() const {
  return RemoteNodeAddr_case() == kIpv4RemAddr;
}
inline bool SLBgplsTopoSrSegmentDesc::has_ipv4remaddr() const {
  return _internal_has_ipv4remaddr();
}
inline void SLBgplsTopoSrSegmentDesc::set_has_ipv4remaddr() {
  _oneof_case_[1] = kIpv4RemAddr;
}
inline void SLBgplsTopoSrSegmentDesc::clear_ipv4remaddr() {
  if (_internal_has_ipv4remaddr()) {
    RemoteNodeAddr_.ipv4remaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_RemoteNodeAddr();
  }
}
inline const std::string& SLBgplsTopoSrSegmentDesc::ipv4remaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4RemAddr)
  return _internal_ipv4remaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrSegmentDesc::set_ipv4remaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4remaddr()) {
    clear_RemoteNodeAddr();
    set_has_ipv4remaddr();
    RemoteNodeAddr_.ipv4remaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNodeAddr_.ipv4remaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4RemAddr)
}
inline std::string* SLBgplsTopoSrSegmentDesc::mutable_ipv4remaddr() {
  std::string* _s = _internal_mutable_ipv4remaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4RemAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegmentDesc::_internal_ipv4remaddr() const {
  if (_internal_has_ipv4remaddr()) {
    return RemoteNodeAddr_.ipv4remaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_ipv4remaddr(const std::string& value) {
  if (!_internal_has_ipv4remaddr()) {
    clear_RemoteNodeAddr();
    set_has_ipv4remaddr();
    RemoteNodeAddr_.ipv4remaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNodeAddr_.ipv4remaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::_internal_mutable_ipv4remaddr() {
  if (!_internal_has_ipv4remaddr()) {
    clear_RemoteNodeAddr();
    set_has_ipv4remaddr();
    RemoteNodeAddr_.ipv4remaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RemoteNodeAddr_.ipv4remaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::release_ipv4remaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4RemAddr)
  if (_internal_has_ipv4remaddr()) {
    clear_has_RemoteNodeAddr();
    return RemoteNodeAddr_.ipv4remaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrSegmentDesc::set_allocated_ipv4remaddr(std::string* ipv4remaddr) {
  if (has_RemoteNodeAddr()) {
    clear_RemoteNodeAddr();
  }
  if (ipv4remaddr != nullptr) {
    set_has_ipv4remaddr();
    RemoteNodeAddr_.ipv4remaddr_.UnsafeSetDefault(ipv4remaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4remaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegmentDesc.Ipv4RemAddr)
}

// bytes Ipv6RemAddr = 5;
inline bool SLBgplsTopoSrSegmentDesc::_internal_has_ipv6remaddr() const {
  return RemoteNodeAddr_case() == kIpv6RemAddr;
}
inline bool SLBgplsTopoSrSegmentDesc::has_ipv6remaddr() const {
  return _internal_has_ipv6remaddr();
}
inline void SLBgplsTopoSrSegmentDesc::set_has_ipv6remaddr() {
  _oneof_case_[1] = kIpv6RemAddr;
}
inline void SLBgplsTopoSrSegmentDesc::clear_ipv6remaddr() {
  if (_internal_has_ipv6remaddr()) {
    RemoteNodeAddr_.ipv6remaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_RemoteNodeAddr();
  }
}
inline const std::string& SLBgplsTopoSrSegmentDesc::ipv6remaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemAddr)
  return _internal_ipv6remaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrSegmentDesc::set_ipv6remaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6remaddr()) {
    clear_RemoteNodeAddr();
    set_has_ipv6remaddr();
    RemoteNodeAddr_.ipv6remaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNodeAddr_.ipv6remaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemAddr)
}
inline std::string* SLBgplsTopoSrSegmentDesc::mutable_ipv6remaddr() {
  std::string* _s = _internal_mutable_ipv6remaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegmentDesc::_internal_ipv6remaddr() const {
  if (_internal_has_ipv6remaddr()) {
    return RemoteNodeAddr_.ipv6remaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_ipv6remaddr(const std::string& value) {
  if (!_internal_has_ipv6remaddr()) {
    clear_RemoteNodeAddr();
    set_has_ipv6remaddr();
    RemoteNodeAddr_.ipv6remaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNodeAddr_.ipv6remaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::_internal_mutable_ipv6remaddr() {
  if (!_internal_has_ipv6remaddr()) {
    clear_RemoteNodeAddr();
    set_has_ipv6remaddr();
    RemoteNodeAddr_.ipv6remaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RemoteNodeAddr_.ipv6remaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::release_ipv6remaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemAddr)
  if (_internal_has_ipv6remaddr()) {
    clear_has_RemoteNodeAddr();
    return RemoteNodeAddr_.ipv6remaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrSegmentDesc::set_allocated_ipv6remaddr(std::string* ipv6remaddr) {
  if (has_RemoteNodeAddr()) {
    clear_RemoteNodeAddr();
  }
  if (ipv6remaddr != nullptr) {
    set_has_ipv6remaddr();
    RemoteNodeAddr_.ipv6remaddr_.UnsafeSetDefault(ipv6remaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6remaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemAddr)
}

// bytes Ipv6LocalNodeGlobalAddr = 6;
inline void SLBgplsTopoSrSegmentDesc::clear_ipv6localnodeglobaladdr() {
  ipv6localnodeglobaladdr_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrSegmentDesc::ipv6localnodeglobaladdr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
  return _internal_ipv6localnodeglobaladdr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrSegmentDesc::set_ipv6localnodeglobaladdr(ArgT0&& arg0, ArgT... args) {
 
 ipv6localnodeglobaladdr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
}
inline std::string* SLBgplsTopoSrSegmentDesc::mutable_ipv6localnodeglobaladdr() {
  std::string* _s = _internal_mutable_ipv6localnodeglobaladdr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegmentDesc::_internal_ipv6localnodeglobaladdr() const {
  return ipv6localnodeglobaladdr_.Get();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_ipv6localnodeglobaladdr(const std::string& value) {
  
  ipv6localnodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::_internal_mutable_ipv6localnodeglobaladdr() {
  
  return ipv6localnodeglobaladdr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::release_ipv6localnodeglobaladdr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
  return ipv6localnodeglobaladdr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrSegmentDesc::set_allocated_ipv6localnodeglobaladdr(std::string* ipv6localnodeglobaladdr) {
  if (ipv6localnodeglobaladdr != nullptr) {
    
  } else {
    
  }
  ipv6localnodeglobaladdr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6localnodeglobaladdr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6localnodeglobaladdr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6localnodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
}

// bytes Ipv6RemoteNodeGlobalAddr = 7;
inline void SLBgplsTopoSrSegmentDesc::clear_ipv6remotenodeglobaladdr() {
  ipv6remotenodeglobaladdr_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrSegmentDesc::ipv6remotenodeglobaladdr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
  return _internal_ipv6remotenodeglobaladdr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrSegmentDesc::set_ipv6remotenodeglobaladdr(ArgT0&& arg0, ArgT... args) {
 
 ipv6remotenodeglobaladdr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
}
inline std::string* SLBgplsTopoSrSegmentDesc::mutable_ipv6remotenodeglobaladdr() {
  std::string* _s = _internal_mutable_ipv6remotenodeglobaladdr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegmentDesc::_internal_ipv6remotenodeglobaladdr() const {
  return ipv6remotenodeglobaladdr_.Get();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_ipv6remotenodeglobaladdr(const std::string& value) {
  
  ipv6remotenodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::_internal_mutable_ipv6remotenodeglobaladdr() {
  
  return ipv6remotenodeglobaladdr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegmentDesc::release_ipv6remotenodeglobaladdr() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
  return ipv6remotenodeglobaladdr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrSegmentDesc::set_allocated_ipv6remotenodeglobaladdr(std::string* ipv6remotenodeglobaladdr) {
  if (ipv6remotenodeglobaladdr != nullptr) {
    
  } else {
    
  }
  ipv6remotenodeglobaladdr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6remotenodeglobaladdr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6remotenodeglobaladdr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6remotenodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
}

// uint32 LocalNodeIntfId = 8;
inline void SLBgplsTopoSrSegmentDesc::clear_localnodeintfid() {
  localnodeintfid_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegmentDesc::_internal_localnodeintfid() const {
  return localnodeintfid_;
}
inline uint32_t SLBgplsTopoSrSegmentDesc::localnodeintfid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.LocalNodeIntfId)
  return _internal_localnodeintfid();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_localnodeintfid(uint32_t value) {
  
  localnodeintfid_ = value;
}
inline void SLBgplsTopoSrSegmentDesc::set_localnodeintfid(uint32_t value) {
  _internal_set_localnodeintfid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.LocalNodeIntfId)
}

// uint32 RemoteNodeIntfId = 9;
inline void SLBgplsTopoSrSegmentDesc::clear_remotenodeintfid() {
  remotenodeintfid_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegmentDesc::_internal_remotenodeintfid() const {
  return remotenodeintfid_;
}
inline uint32_t SLBgplsTopoSrSegmentDesc::remotenodeintfid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegmentDesc.RemoteNodeIntfId)
  return _internal_remotenodeintfid();
}
inline void SLBgplsTopoSrSegmentDesc::_internal_set_remotenodeintfid(uint32_t value) {
  
  remotenodeintfid_ = value;
}
inline void SLBgplsTopoSrSegmentDesc::set_remotenodeintfid(uint32_t value) {
  _internal_set_remotenodeintfid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegmentDesc.RemoteNodeIntfId)
}

inline bool SLBgplsTopoSrSegmentDesc::has_LocalNodeAddr() const {
  return LocalNodeAddr_case() != LOCALNODEADDR_NOT_SET;
}
inline void SLBgplsTopoSrSegmentDesc::clear_has_LocalNodeAddr() {
  _oneof_case_[0] = LOCALNODEADDR_NOT_SET;
}
inline bool SLBgplsTopoSrSegmentDesc::has_RemoteNodeAddr() const {
  return RemoteNodeAddr_case() != REMOTENODEADDR_NOT_SET;
}
inline void SLBgplsTopoSrSegmentDesc::clear_has_RemoteNodeAddr() {
  _oneof_case_[1] = REMOTENODEADDR_NOT_SET;
}
inline SLBgplsTopoSrSegmentDesc::LocalNodeAddrCase SLBgplsTopoSrSegmentDesc::LocalNodeAddr_case() const {
  return SLBgplsTopoSrSegmentDesc::LocalNodeAddrCase(_oneof_case_[0]);
}
inline SLBgplsTopoSrSegmentDesc::RemoteNodeAddrCase SLBgplsTopoSrSegmentDesc::RemoteNodeAddr_case() const {
  return SLBgplsTopoSrSegmentDesc::RemoteNodeAddrCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SLBgplsTopoSrSegment

// .service_layer.SLBgplsTopoSrSegmentType Type = 1;
inline void SLBgplsTopoSrSegment::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLBgplsTopoSrSegmentType SLBgplsTopoSrSegment::_internal_type() const {
  return static_cast< ::service_layer::SLBgplsTopoSrSegmentType >(type_);
}
inline ::service_layer::SLBgplsTopoSrSegmentType SLBgplsTopoSrSegment::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.Type)
  return _internal_type();
}
inline void SLBgplsTopoSrSegment::_internal_set_type(::service_layer::SLBgplsTopoSrSegmentType value) {
  
  type_ = value;
}
inline void SLBgplsTopoSrSegment::set_type(::service_layer::SLBgplsTopoSrSegmentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegment.Type)
}

// bytes Flags = 2;
inline void SLBgplsTopoSrSegment::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrSegment::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrSegment::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegment.Flags)
}
inline std::string* SLBgplsTopoSrSegment::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegment.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegment::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrSegment::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegment::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegment::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegment.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrSegment::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegment.Flags)
}

// uint32 MplsLabel = 3;
inline bool SLBgplsTopoSrSegment::_internal_has_mplslabel() const {
  return Sid_case() == kMplsLabel;
}
inline bool SLBgplsTopoSrSegment::has_mplslabel() const {
  return _internal_has_mplslabel();
}
inline void SLBgplsTopoSrSegment::set_has_mplslabel() {
  _oneof_case_[0] = kMplsLabel;
}
inline void SLBgplsTopoSrSegment::clear_mplslabel() {
  if (_internal_has_mplslabel()) {
    Sid_.mplslabel_ = 0u;
    clear_has_Sid();
  }
}
inline uint32_t SLBgplsTopoSrSegment::_internal_mplslabel() const {
  if (_internal_has_mplslabel()) {
    return Sid_.mplslabel_;
  }
  return 0u;
}
inline void SLBgplsTopoSrSegment::_internal_set_mplslabel(uint32_t value) {
  if (!_internal_has_mplslabel()) {
    clear_Sid();
    set_has_mplslabel();
  }
  Sid_.mplslabel_ = value;
}
inline uint32_t SLBgplsTopoSrSegment::mplslabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.MplsLabel)
  return _internal_mplslabel();
}
inline void SLBgplsTopoSrSegment::set_mplslabel(uint32_t value) {
  _internal_set_mplslabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegment.MplsLabel)
}

// bytes Srv6Sid = 4;
inline bool SLBgplsTopoSrSegment::_internal_has_srv6sid() const {
  return Sid_case() == kSrv6Sid;
}
inline bool SLBgplsTopoSrSegment::has_srv6sid() const {
  return _internal_has_srv6sid();
}
inline void SLBgplsTopoSrSegment::set_has_srv6sid() {
  _oneof_case_[0] = kSrv6Sid;
}
inline void SLBgplsTopoSrSegment::clear_srv6sid() {
  if (_internal_has_srv6sid()) {
    Sid_.srv6sid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Sid();
  }
}
inline const std::string& SLBgplsTopoSrSegment::srv6sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.Srv6Sid)
  return _internal_srv6sid();
}
template <typename ArgT0, typename... ArgT>
inline void SLBgplsTopoSrSegment::set_srv6sid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Sid_.srv6sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegment.Srv6Sid)
}
inline std::string* SLBgplsTopoSrSegment::mutable_srv6sid() {
  std::string* _s = _internal_mutable_srv6sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegment.Srv6Sid)
  return _s;
}
inline const std::string& SLBgplsTopoSrSegment::_internal_srv6sid() const {
  if (_internal_has_srv6sid()) {
    return Sid_.srv6sid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLBgplsTopoSrSegment::_internal_set_srv6sid(const std::string& value) {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Sid_.srv6sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegment::_internal_mutable_srv6sid() {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Sid_.srv6sid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrSegment::release_srv6sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegment.Srv6Sid)
  if (_internal_has_srv6sid()) {
    clear_has_Sid();
    return Sid_.srv6sid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLBgplsTopoSrSegment::set_allocated_srv6sid(std::string* srv6sid) {
  if (has_Sid()) {
    clear_Sid();
  }
  if (srv6sid != nullptr) {
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(srv6sid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(srv6sid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegment.Srv6Sid)
}

// .service_layer.SLBgplsTopoSrSegmentDesc SegmentDesc = 5;
inline bool SLBgplsTopoSrSegment::_internal_has_segmentdesc() const {
  return this != internal_default_instance() && segmentdesc_ != nullptr;
}
inline bool SLBgplsTopoSrSegment::has_segmentdesc() const {
  return _internal_has_segmentdesc();
}
inline void SLBgplsTopoSrSegment::clear_segmentdesc() {
  if (GetArenaForAllocation() == nullptr && segmentdesc_ != nullptr) {
    delete segmentdesc_;
  }
  segmentdesc_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrSegmentDesc& SLBgplsTopoSrSegment::_internal_segmentdesc() const {
  const ::service_layer::SLBgplsTopoSrSegmentDesc* p = segmentdesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrSegmentDesc&>(
      ::service_layer::_SLBgplsTopoSrSegmentDesc_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrSegmentDesc& SLBgplsTopoSrSegment::segmentdesc() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.SegmentDesc)
  return _internal_segmentdesc();
}
inline void SLBgplsTopoSrSegment::unsafe_arena_set_allocated_segmentdesc(
    ::service_layer::SLBgplsTopoSrSegmentDesc* segmentdesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segmentdesc_);
  }
  segmentdesc_ = segmentdesc;
  if (segmentdesc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrSegment.SegmentDesc)
}
inline ::service_layer::SLBgplsTopoSrSegmentDesc* SLBgplsTopoSrSegment::release_segmentdesc() {
  
  ::service_layer::SLBgplsTopoSrSegmentDesc* temp = segmentdesc_;
  segmentdesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrSegmentDesc* SLBgplsTopoSrSegment::unsafe_arena_release_segmentdesc() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegment.SegmentDesc)
  
  ::service_layer::SLBgplsTopoSrSegmentDesc* temp = segmentdesc_;
  segmentdesc_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrSegmentDesc* SLBgplsTopoSrSegment::_internal_mutable_segmentdesc() {
  
  if (segmentdesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrSegmentDesc>(GetArenaForAllocation());
    segmentdesc_ = p;
  }
  return segmentdesc_;
}
inline ::service_layer::SLBgplsTopoSrSegmentDesc* SLBgplsTopoSrSegment::mutable_segmentdesc() {
  ::service_layer::SLBgplsTopoSrSegmentDesc* _msg = _internal_mutable_segmentdesc();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegment.SegmentDesc)
  return _msg;
}
inline void SLBgplsTopoSrSegment::set_allocated_segmentdesc(::service_layer::SLBgplsTopoSrSegmentDesc* segmentdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete segmentdesc_;
  }
  if (segmentdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrSegmentDesc>::GetOwningArena(segmentdesc);
    if (message_arena != submessage_arena) {
      segmentdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segmentdesc, submessage_arena);
    }
    
  } else {
    
  }
  segmentdesc_ = segmentdesc;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegment.SegmentDesc)
}

// .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 6;
inline bool SLBgplsTopoSrSegment::_internal_has_endpointbehaviour() const {
  return this != internal_default_instance() && endpointbehaviour_ != nullptr;
}
inline bool SLBgplsTopoSrSegment::has_endpointbehaviour() const {
  return _internal_has_endpointbehaviour();
}
inline void SLBgplsTopoSrSegment::clear_endpointbehaviour() {
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& SLBgplsTopoSrSegment::_internal_endpointbehaviour() const {
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior* p = endpointbehaviour_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6EndPointBehavior&>(
      ::service_layer::_SLBgplsTopoSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& SLBgplsTopoSrSegment::endpointbehaviour() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.EndPointBehaviour)
  return _internal_endpointbehaviour();
}
inline void SLBgplsTopoSrSegment::unsafe_arena_set_allocated_endpointbehaviour(
    ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehaviour_);
  }
  endpointbehaviour_ = endpointbehaviour;
  if (endpointbehaviour) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrSegment.EndPointBehaviour)
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrSegment::release_endpointbehaviour() {
  
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* temp = endpointbehaviour_;
  endpointbehaviour_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrSegment::unsafe_arena_release_endpointbehaviour() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegment.EndPointBehaviour)
  
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* temp = endpointbehaviour_;
  endpointbehaviour_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrSegment::_internal_mutable_endpointbehaviour() {
  
  if (endpointbehaviour_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehaviour_ = p;
  }
  return endpointbehaviour_;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrSegment::mutable_endpointbehaviour() {
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehaviour();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegment.EndPointBehaviour)
  return _msg;
}
inline void SLBgplsTopoSrSegment::set_allocated_endpointbehaviour(::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehaviour_;
  }
  if (endpointbehaviour) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6EndPointBehavior>::GetOwningArena(endpointbehaviour);
    if (message_arena != submessage_arena) {
      endpointbehaviour = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehaviour, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehaviour_ = endpointbehaviour;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegment.EndPointBehaviour)
}

// .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 7;
inline bool SLBgplsTopoSrSegment::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLBgplsTopoSrSegment::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLBgplsTopoSrSegment::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrSegment::_internal_sidstruct() const {
  const ::service_layer::SLBgplsTopoSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidStruct&>(
      ::service_layer::_SLBgplsTopoSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrSegment::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegment.SidStruct)
  return _internal_sidstruct();
}
inline void SLBgplsTopoSrSegment::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrSegment.SidStruct)
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrSegment::release_sidstruct() {
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrSegment::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrSegment.SidStruct)
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrSegment::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrSegment::mutable_sidstruct() {
  ::service_layer::SLBgplsTopoSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrSegment.SidStruct)
  return _msg;
}
inline void SLBgplsTopoSrSegment::set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrSegment.SidStruct)
}

inline bool SLBgplsTopoSrSegment::has_Sid() const {
  return Sid_case() != SID_NOT_SET;
}
inline void SLBgplsTopoSrSegment::clear_has_Sid() {
  _oneof_case_[0] = SID_NOT_SET;
}
inline SLBgplsTopoSrSegment::SidCase SLBgplsTopoSrSegment::Sid_case() const {
  return SLBgplsTopoSrSegment::SidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLBgplsSrSegListMetric

// uint32 Type = 1;
inline void SLBgplsSrSegListMetric::clear_type() {
  type_ = 0u;
}
inline uint32_t SLBgplsSrSegListMetric::_internal_type() const {
  return type_;
}
inline uint32_t SLBgplsSrSegListMetric::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsSrSegListMetric.Type)
  return _internal_type();
}
inline void SLBgplsSrSegListMetric::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void SLBgplsSrSegListMetric::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsSrSegListMetric.Type)
}

// bytes Flags = 2;
inline void SLBgplsSrSegListMetric::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsSrSegListMetric::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsSrSegListMetric.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsSrSegListMetric::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsSrSegListMetric.Flags)
}
inline std::string* SLBgplsSrSegListMetric::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsSrSegListMetric.Flags)
  return _s;
}
inline const std::string& SLBgplsSrSegListMetric::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsSrSegListMetric::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsSrSegListMetric::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsSrSegListMetric::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsSrSegListMetric.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsSrSegListMetric::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsSrSegListMetric.Flags)
}

// uint32 Margin = 3;
inline void SLBgplsSrSegListMetric::clear_margin() {
  margin_ = 0u;
}
inline uint32_t SLBgplsSrSegListMetric::_internal_margin() const {
  return margin_;
}
inline uint32_t SLBgplsSrSegListMetric::margin() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsSrSegListMetric.Margin)
  return _internal_margin();
}
inline void SLBgplsSrSegListMetric::_internal_set_margin(uint32_t value) {
  
  margin_ = value;
}
inline void SLBgplsSrSegListMetric::set_margin(uint32_t value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsSrSegListMetric.Margin)
}

// uint32 Bound = 4;
inline void SLBgplsSrSegListMetric::clear_bound() {
  bound_ = 0u;
}
inline uint32_t SLBgplsSrSegListMetric::_internal_bound() const {
  return bound_;
}
inline uint32_t SLBgplsSrSegListMetric::bound() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsSrSegListMetric.Bound)
  return _internal_bound();
}
inline void SLBgplsSrSegListMetric::_internal_set_bound(uint32_t value) {
  
  bound_ = value;
}
inline void SLBgplsSrSegListMetric::set_bound(uint32_t value) {
  _internal_set_bound(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsSrSegListMetric.Bound)
}

// uint32 Value = 5;
inline void SLBgplsSrSegListMetric::clear_value() {
  value_ = 0u;
}
inline uint32_t SLBgplsSrSegListMetric::_internal_value() const {
  return value_;
}
inline uint32_t SLBgplsSrSegListMetric::value() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsSrSegListMetric.Value)
  return _internal_value();
}
inline void SLBgplsSrSegListMetric::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void SLBgplsSrSegListMetric::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsSrSegListMetric.Value)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrAffinityConstraints

// repeated uint32 ExclAnyEag = 1;
inline int SLBgplsTopoSrAffinityConstraints::_internal_exclanyeag_size() const {
  return exclanyeag_.size();
}
inline int SLBgplsTopoSrAffinityConstraints::exclanyeag_size() const {
  return _internal_exclanyeag_size();
}
inline void SLBgplsTopoSrAffinityConstraints::clear_exclanyeag() {
  exclanyeag_.Clear();
}
inline uint32_t SLBgplsTopoSrAffinityConstraints::_internal_exclanyeag(int index) const {
  return exclanyeag_.Get(index);
}
inline uint32_t SLBgplsTopoSrAffinityConstraints::exclanyeag(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrAffinityConstraints.ExclAnyEag)
  return _internal_exclanyeag(index);
}
inline void SLBgplsTopoSrAffinityConstraints::set_exclanyeag(int index, uint32_t value) {
  exclanyeag_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrAffinityConstraints.ExclAnyEag)
}
inline void SLBgplsTopoSrAffinityConstraints::_internal_add_exclanyeag(uint32_t value) {
  exclanyeag_.Add(value);
}
inline void SLBgplsTopoSrAffinityConstraints::add_exclanyeag(uint32_t value) {
  _internal_add_exclanyeag(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrAffinityConstraints.ExclAnyEag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrAffinityConstraints::_internal_exclanyeag() const {
  return exclanyeag_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrAffinityConstraints::exclanyeag() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrAffinityConstraints.ExclAnyEag)
  return _internal_exclanyeag();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrAffinityConstraints::_internal_mutable_exclanyeag() {
  return &exclanyeag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrAffinityConstraints::mutable_exclanyeag() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrAffinityConstraints.ExclAnyEag)
  return _internal_mutable_exclanyeag();
}

// repeated uint32 InclAnyEag = 2;
inline int SLBgplsTopoSrAffinityConstraints::_internal_inclanyeag_size() const {
  return inclanyeag_.size();
}
inline int SLBgplsTopoSrAffinityConstraints::inclanyeag_size() const {
  return _internal_inclanyeag_size();
}
inline void SLBgplsTopoSrAffinityConstraints::clear_inclanyeag() {
  inclanyeag_.Clear();
}
inline uint32_t SLBgplsTopoSrAffinityConstraints::_internal_inclanyeag(int index) const {
  return inclanyeag_.Get(index);
}
inline uint32_t SLBgplsTopoSrAffinityConstraints::inclanyeag(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrAffinityConstraints.InclAnyEag)
  return _internal_inclanyeag(index);
}
inline void SLBgplsTopoSrAffinityConstraints::set_inclanyeag(int index, uint32_t value) {
  inclanyeag_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrAffinityConstraints.InclAnyEag)
}
inline void SLBgplsTopoSrAffinityConstraints::_internal_add_inclanyeag(uint32_t value) {
  inclanyeag_.Add(value);
}
inline void SLBgplsTopoSrAffinityConstraints::add_inclanyeag(uint32_t value) {
  _internal_add_inclanyeag(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrAffinityConstraints.InclAnyEag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrAffinityConstraints::_internal_inclanyeag() const {
  return inclanyeag_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrAffinityConstraints::inclanyeag() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrAffinityConstraints.InclAnyEag)
  return _internal_inclanyeag();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrAffinityConstraints::_internal_mutable_inclanyeag() {
  return &inclanyeag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrAffinityConstraints::mutable_inclanyeag() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrAffinityConstraints.InclAnyEag)
  return _internal_mutable_inclanyeag();
}

// repeated uint32 InclAllEag = 3;
inline int SLBgplsTopoSrAffinityConstraints::_internal_inclalleag_size() const {
  return inclalleag_.size();
}
inline int SLBgplsTopoSrAffinityConstraints::inclalleag_size() const {
  return _internal_inclalleag_size();
}
inline void SLBgplsTopoSrAffinityConstraints::clear_inclalleag() {
  inclalleag_.Clear();
}
inline uint32_t SLBgplsTopoSrAffinityConstraints::_internal_inclalleag(int index) const {
  return inclalleag_.Get(index);
}
inline uint32_t SLBgplsTopoSrAffinityConstraints::inclalleag(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrAffinityConstraints.InclAllEag)
  return _internal_inclalleag(index);
}
inline void SLBgplsTopoSrAffinityConstraints::set_inclalleag(int index, uint32_t value) {
  inclalleag_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrAffinityConstraints.InclAllEag)
}
inline void SLBgplsTopoSrAffinityConstraints::_internal_add_inclalleag(uint32_t value) {
  inclalleag_.Add(value);
}
inline void SLBgplsTopoSrAffinityConstraints::add_inclalleag(uint32_t value) {
  _internal_add_inclalleag(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrAffinityConstraints.InclAllEag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrAffinityConstraints::_internal_inclalleag() const {
  return inclalleag_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrAffinityConstraints::inclalleag() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrAffinityConstraints.InclAllEag)
  return _internal_inclalleag();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrAffinityConstraints::_internal_mutable_inclalleag() {
  return &inclalleag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrAffinityConstraints::mutable_inclalleag() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrAffinityConstraints.InclAllEag)
  return _internal_mutable_inclalleag();
}

// -------------------------------------------------------------------

// SLBgplsTopoSrSrlgConstraints

// repeated uint32 SrlgValues = 1;
inline int SLBgplsTopoSrSrlgConstraints::_internal_srlgvalues_size() const {
  return srlgvalues_.size();
}
inline int SLBgplsTopoSrSrlgConstraints::srlgvalues_size() const {
  return _internal_srlgvalues_size();
}
inline void SLBgplsTopoSrSrlgConstraints::clear_srlgvalues() {
  srlgvalues_.Clear();
}
inline uint32_t SLBgplsTopoSrSrlgConstraints::_internal_srlgvalues(int index) const {
  return srlgvalues_.Get(index);
}
inline uint32_t SLBgplsTopoSrSrlgConstraints::srlgvalues(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSrlgConstraints.SrlgValues)
  return _internal_srlgvalues(index);
}
inline void SLBgplsTopoSrSrlgConstraints::set_srlgvalues(int index, uint32_t value) {
  srlgvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSrlgConstraints.SrlgValues)
}
inline void SLBgplsTopoSrSrlgConstraints::_internal_add_srlgvalues(uint32_t value) {
  srlgvalues_.Add(value);
}
inline void SLBgplsTopoSrSrlgConstraints::add_srlgvalues(uint32_t value) {
  _internal_add_srlgvalues(value);
  // @@protoc_insertion_point(field_add:service_layer.SLBgplsTopoSrSrlgConstraints.SrlgValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrSrlgConstraints::_internal_srlgvalues() const {
  return srlgvalues_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLBgplsTopoSrSrlgConstraints::srlgvalues() const {
  // @@protoc_insertion_point(field_list:service_layer.SLBgplsTopoSrSrlgConstraints.SrlgValues)
  return _internal_srlgvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrSrlgConstraints::_internal_mutable_srlgvalues() {
  return &srlgvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLBgplsTopoSrSrlgConstraints::mutable_srlgvalues() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLBgplsTopoSrSrlgConstraints.SrlgValues)
  return _internal_mutable_srlgvalues();
}

// -------------------------------------------------------------------

// SLBgplsTopoSrBandwidthConstraint

// bytes Bandwidth = 1;
inline void SLBgplsTopoSrBandwidthConstraint::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrBandwidthConstraint::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrBandwidthConstraint.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrBandwidthConstraint::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrBandwidthConstraint.Bandwidth)
}
inline std::string* SLBgplsTopoSrBandwidthConstraint::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrBandwidthConstraint.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoSrBandwidthConstraint::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoSrBandwidthConstraint::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrBandwidthConstraint::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrBandwidthConstraint::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrBandwidthConstraint.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrBandwidthConstraint::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrBandwidthConstraint.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrDisjointGroupConstraint

// bytes RequestFlags = 1;
inline void SLBgplsTopoSrDisjointGroupConstraint::clear_requestflags() {
  requestflags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrDisjointGroupConstraint::requestflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrDisjointGroupConstraint.RequestFlags)
  return _internal_requestflags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrDisjointGroupConstraint::set_requestflags(ArgT0&& arg0, ArgT... args) {
 
 requestflags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrDisjointGroupConstraint.RequestFlags)
}
inline std::string* SLBgplsTopoSrDisjointGroupConstraint::mutable_requestflags() {
  std::string* _s = _internal_mutable_requestflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrDisjointGroupConstraint.RequestFlags)
  return _s;
}
inline const std::string& SLBgplsTopoSrDisjointGroupConstraint::_internal_requestflags() const {
  return requestflags_.Get();
}
inline void SLBgplsTopoSrDisjointGroupConstraint::_internal_set_requestflags(const std::string& value) {
  
  requestflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrDisjointGroupConstraint::_internal_mutable_requestflags() {
  
  return requestflags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrDisjointGroupConstraint::release_requestflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrDisjointGroupConstraint.RequestFlags)
  return requestflags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrDisjointGroupConstraint::set_allocated_requestflags(std::string* requestflags) {
  if (requestflags != nullptr) {
    
  } else {
    
  }
  requestflags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestflags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requestflags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    requestflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrDisjointGroupConstraint.RequestFlags)
}

// bytes StatusFlags = 2;
inline void SLBgplsTopoSrDisjointGroupConstraint::clear_statusflags() {
  statusflags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrDisjointGroupConstraint::statusflags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrDisjointGroupConstraint.StatusFlags)
  return _internal_statusflags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrDisjointGroupConstraint::set_statusflags(ArgT0&& arg0, ArgT... args) {
 
 statusflags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrDisjointGroupConstraint.StatusFlags)
}
inline std::string* SLBgplsTopoSrDisjointGroupConstraint::mutable_statusflags() {
  std::string* _s = _internal_mutable_statusflags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrDisjointGroupConstraint.StatusFlags)
  return _s;
}
inline const std::string& SLBgplsTopoSrDisjointGroupConstraint::_internal_statusflags() const {
  return statusflags_.Get();
}
inline void SLBgplsTopoSrDisjointGroupConstraint::_internal_set_statusflags(const std::string& value) {
  
  statusflags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrDisjointGroupConstraint::_internal_mutable_statusflags() {
  
  return statusflags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrDisjointGroupConstraint::release_statusflags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrDisjointGroupConstraint.StatusFlags)
  return statusflags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrDisjointGroupConstraint::set_allocated_statusflags(std::string* statusflags) {
  if (statusflags != nullptr) {
    
  } else {
    
  }
  statusflags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statusflags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statusflags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statusflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrDisjointGroupConstraint.StatusFlags)
}

// uint32 GroupId = 3;
inline void SLBgplsTopoSrDisjointGroupConstraint::clear_groupid() {
  groupid_ = 0u;
}
inline uint32_t SLBgplsTopoSrDisjointGroupConstraint::_internal_groupid() const {
  return groupid_;
}
inline uint32_t SLBgplsTopoSrDisjointGroupConstraint::groupid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrDisjointGroupConstraint.GroupId)
  return _internal_groupid();
}
inline void SLBgplsTopoSrDisjointGroupConstraint::_internal_set_groupid(uint32_t value) {
  
  groupid_ = value;
}
inline void SLBgplsTopoSrDisjointGroupConstraint::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrDisjointGroupConstraint.GroupId)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6BindingSid

// bytes Flags = 1;
inline void SLBgplsTopoSrv6BindingSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6BindingSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BindingSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6BindingSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6BindingSid.Flags)
}
inline std::string* SLBgplsTopoSrv6BindingSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BindingSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6BindingSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrv6BindingSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6BindingSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6BindingSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BindingSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6BindingSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.Flags)
}

// .service_layer.SlBgplsTopoSrBsid Bsid = 2;
inline bool SLBgplsTopoSrv6BindingSid::_internal_has_bsid() const {
  return this != internal_default_instance() && bsid_ != nullptr;
}
inline bool SLBgplsTopoSrv6BindingSid::has_bsid() const {
  return _internal_has_bsid();
}
inline void SLBgplsTopoSrv6BindingSid::clear_bsid() {
  if (GetArenaForAllocation() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrv6BindingSid::_internal_bsid() const {
  const ::service_layer::SlBgplsTopoSrBsid* p = bsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SlBgplsTopoSrBsid&>(
      ::service_layer::_SlBgplsTopoSrBsid_default_instance_);
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrv6BindingSid::bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BindingSid.Bsid)
  return _internal_bsid();
}
inline void SLBgplsTopoSrv6BindingSid::unsafe_arena_set_allocated_bsid(
    ::service_layer::SlBgplsTopoSrBsid* bsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsid_);
  }
  bsid_ = bsid;
  if (bsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.Bsid)
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::release_bsid() {
  
  ::service_layer::SlBgplsTopoSrBsid* temp = bsid_;
  bsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::unsafe_arena_release_bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BindingSid.Bsid)
  
  ::service_layer::SlBgplsTopoSrBsid* temp = bsid_;
  bsid_ = nullptr;
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::_internal_mutable_bsid() {
  
  if (bsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SlBgplsTopoSrBsid>(GetArenaForAllocation());
    bsid_ = p;
  }
  return bsid_;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::mutable_bsid() {
  ::service_layer::SlBgplsTopoSrBsid* _msg = _internal_mutable_bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BindingSid.Bsid)
  return _msg;
}
inline void SLBgplsTopoSrv6BindingSid::set_allocated_bsid(::service_layer::SlBgplsTopoSrBsid* bsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bsid_;
  }
  if (bsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SlBgplsTopoSrBsid>::GetOwningArena(bsid);
    if (message_arena != submessage_arena) {
      bsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsid, submessage_arena);
    }
    
  } else {
    
  }
  bsid_ = bsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.Bsid)
}

// .service_layer.SlBgplsTopoSrBsid SpecifiedBsid = 3;
inline bool SLBgplsTopoSrv6BindingSid::_internal_has_specifiedbsid() const {
  return this != internal_default_instance() && specifiedbsid_ != nullptr;
}
inline bool SLBgplsTopoSrv6BindingSid::has_specifiedbsid() const {
  return _internal_has_specifiedbsid();
}
inline void SLBgplsTopoSrv6BindingSid::clear_specifiedbsid() {
  if (GetArenaForAllocation() == nullptr && specifiedbsid_ != nullptr) {
    delete specifiedbsid_;
  }
  specifiedbsid_ = nullptr;
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrv6BindingSid::_internal_specifiedbsid() const {
  const ::service_layer::SlBgplsTopoSrBsid* p = specifiedbsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SlBgplsTopoSrBsid&>(
      ::service_layer::_SlBgplsTopoSrBsid_default_instance_);
}
inline const ::service_layer::SlBgplsTopoSrBsid& SLBgplsTopoSrv6BindingSid::specifiedbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BindingSid.SpecifiedBsid)
  return _internal_specifiedbsid();
}
inline void SLBgplsTopoSrv6BindingSid::unsafe_arena_set_allocated_specifiedbsid(
    ::service_layer::SlBgplsTopoSrBsid* specifiedbsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specifiedbsid_);
  }
  specifiedbsid_ = specifiedbsid;
  if (specifiedbsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.SpecifiedBsid)
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::release_specifiedbsid() {
  
  ::service_layer::SlBgplsTopoSrBsid* temp = specifiedbsid_;
  specifiedbsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::unsafe_arena_release_specifiedbsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BindingSid.SpecifiedBsid)
  
  ::service_layer::SlBgplsTopoSrBsid* temp = specifiedbsid_;
  specifiedbsid_ = nullptr;
  return temp;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::_internal_mutable_specifiedbsid() {
  
  if (specifiedbsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SlBgplsTopoSrBsid>(GetArenaForAllocation());
    specifiedbsid_ = p;
  }
  return specifiedbsid_;
}
inline ::service_layer::SlBgplsTopoSrBsid* SLBgplsTopoSrv6BindingSid::mutable_specifiedbsid() {
  ::service_layer::SlBgplsTopoSrBsid* _msg = _internal_mutable_specifiedbsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BindingSid.SpecifiedBsid)
  return _msg;
}
inline void SLBgplsTopoSrv6BindingSid::set_allocated_specifiedbsid(::service_layer::SlBgplsTopoSrBsid* specifiedbsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete specifiedbsid_;
  }
  if (specifiedbsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SlBgplsTopoSrBsid>::GetOwningArena(specifiedbsid);
    if (message_arena != submessage_arena) {
      specifiedbsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specifiedbsid, submessage_arena);
    }
    
  } else {
    
  }
  specifiedbsid_ = specifiedbsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.SpecifiedBsid)
}

// .service_layer.SLBgplsTopoSrv6EndPointBehavior EndPointBehaviour = 4;
inline bool SLBgplsTopoSrv6BindingSid::_internal_has_endpointbehaviour() const {
  return this != internal_default_instance() && endpointbehaviour_ != nullptr;
}
inline bool SLBgplsTopoSrv6BindingSid::has_endpointbehaviour() const {
  return _internal_has_endpointbehaviour();
}
inline void SLBgplsTopoSrv6BindingSid::clear_endpointbehaviour() {
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& SLBgplsTopoSrv6BindingSid::_internal_endpointbehaviour() const {
  const ::service_layer::SLBgplsTopoSrv6EndPointBehavior* p = endpointbehaviour_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6EndPointBehavior&>(
      ::service_layer::_SLBgplsTopoSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6EndPointBehavior& SLBgplsTopoSrv6BindingSid::endpointbehaviour() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BindingSid.EndPointBehaviour)
  return _internal_endpointbehaviour();
}
inline void SLBgplsTopoSrv6BindingSid::unsafe_arena_set_allocated_endpointbehaviour(
    ::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehaviour_);
  }
  endpointbehaviour_ = endpointbehaviour;
  if (endpointbehaviour) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.EndPointBehaviour)
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6BindingSid::release_endpointbehaviour() {
  
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* temp = endpointbehaviour_;
  endpointbehaviour_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6BindingSid::unsafe_arena_release_endpointbehaviour() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BindingSid.EndPointBehaviour)
  
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* temp = endpointbehaviour_;
  endpointbehaviour_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6BindingSid::_internal_mutable_endpointbehaviour() {
  
  if (endpointbehaviour_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehaviour_ = p;
  }
  return endpointbehaviour_;
}
inline ::service_layer::SLBgplsTopoSrv6EndPointBehavior* SLBgplsTopoSrv6BindingSid::mutable_endpointbehaviour() {
  ::service_layer::SLBgplsTopoSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehaviour();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BindingSid.EndPointBehaviour)
  return _msg;
}
inline void SLBgplsTopoSrv6BindingSid::set_allocated_endpointbehaviour(::service_layer::SLBgplsTopoSrv6EndPointBehavior* endpointbehaviour) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehaviour_;
  }
  if (endpointbehaviour) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6EndPointBehavior>::GetOwningArena(endpointbehaviour);
    if (message_arena != submessage_arena) {
      endpointbehaviour = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehaviour, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehaviour_ = endpointbehaviour;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.EndPointBehaviour)
}

// .service_layer.SLBgplsTopoSrv6SidStruct SidStruct = 5;
inline bool SLBgplsTopoSrv6BindingSid::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLBgplsTopoSrv6BindingSid::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLBgplsTopoSrv6BindingSid::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6BindingSid::_internal_sidstruct() const {
  const ::service_layer::SLBgplsTopoSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLBgplsTopoSrv6SidStruct&>(
      ::service_layer::_SLBgplsTopoSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLBgplsTopoSrv6SidStruct& SLBgplsTopoSrv6BindingSid::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BindingSid.SidStruct)
  return _internal_sidstruct();
}
inline void SLBgplsTopoSrv6BindingSid::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.SidStruct)
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6BindingSid::release_sidstruct() {
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6BindingSid::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BindingSid.SidStruct)
  
  ::service_layer::SLBgplsTopoSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6BindingSid::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLBgplsTopoSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLBgplsTopoSrv6SidStruct* SLBgplsTopoSrv6BindingSid::mutable_sidstruct() {
  ::service_layer::SLBgplsTopoSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BindingSid.SidStruct)
  return _msg;
}
inline void SLBgplsTopoSrv6BindingSid::set_allocated_sidstruct(::service_layer::SLBgplsTopoSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLBgplsTopoSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BindingSid.SidStruct)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrPolicyName

// string Name = 1;
inline void SLBgplsTopoSrPolicyName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrPolicyName::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrPolicyName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrPolicyName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrPolicyName.Name)
}
inline std::string* SLBgplsTopoSrPolicyName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrPolicyName.Name)
  return _s;
}
inline const std::string& SLBgplsTopoSrPolicyName::_internal_name() const {
  return name_.Get();
}
inline void SLBgplsTopoSrPolicyName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrPolicyName::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrPolicyName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrPolicyName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrPolicyName.Name)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrBidirGroupConstraint

// bytes Flags = 1;
inline void SLBgplsTopoSrBidirGroupConstraint::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrBidirGroupConstraint::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrBidirGroupConstraint.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrBidirGroupConstraint::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrBidirGroupConstraint.Flags)
}
inline std::string* SLBgplsTopoSrBidirGroupConstraint::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrBidirGroupConstraint.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrBidirGroupConstraint::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrBidirGroupConstraint::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrBidirGroupConstraint::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrBidirGroupConstraint::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrBidirGroupConstraint.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrBidirGroupConstraint::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrBidirGroupConstraint.Flags)
}

// uint32 GroupId = 2;
inline void SLBgplsTopoSrBidirGroupConstraint::clear_groupid() {
  groupid_ = 0u;
}
inline uint32_t SLBgplsTopoSrBidirGroupConstraint::_internal_groupid() const {
  return groupid_;
}
inline uint32_t SLBgplsTopoSrBidirGroupConstraint::groupid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrBidirGroupConstraint.GroupId)
  return _internal_groupid();
}
inline void SLBgplsTopoSrBidirGroupConstraint::_internal_set_groupid(uint32_t value) {
  
  groupid_ = value;
}
inline void SLBgplsTopoSrBidirGroupConstraint::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrBidirGroupConstraint.GroupId)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrMetricConstraint

// uint32 Type = 1;
inline void SLBgplsTopoSrMetricConstraint::clear_type() {
  type_ = 0u;
}
inline uint32_t SLBgplsTopoSrMetricConstraint::_internal_type() const {
  return type_;
}
inline uint32_t SLBgplsTopoSrMetricConstraint::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrMetricConstraint.Type)
  return _internal_type();
}
inline void SLBgplsTopoSrMetricConstraint::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void SLBgplsTopoSrMetricConstraint::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrMetricConstraint.Type)
}

// bytes Flags = 2;
inline void SLBgplsTopoSrMetricConstraint::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrMetricConstraint::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrMetricConstraint.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrMetricConstraint::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrMetricConstraint.Flags)
}
inline std::string* SLBgplsTopoSrMetricConstraint::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrMetricConstraint.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrMetricConstraint::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrMetricConstraint::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrMetricConstraint::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrMetricConstraint::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrMetricConstraint.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrMetricConstraint::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrMetricConstraint.Flags)
}

// uint32 Margin = 3;
inline void SLBgplsTopoSrMetricConstraint::clear_margin() {
  margin_ = 0u;
}
inline uint32_t SLBgplsTopoSrMetricConstraint::_internal_margin() const {
  return margin_;
}
inline uint32_t SLBgplsTopoSrMetricConstraint::margin() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrMetricConstraint.Margin)
  return _internal_margin();
}
inline void SLBgplsTopoSrMetricConstraint::_internal_set_margin(uint32_t value) {
  
  margin_ = value;
}
inline void SLBgplsTopoSrMetricConstraint::set_margin(uint32_t value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrMetricConstraint.Margin)
}

// uint32 Bound = 4;
inline void SLBgplsTopoSrMetricConstraint::clear_bound() {
  bound_ = 0u;
}
inline uint32_t SLBgplsTopoSrMetricConstraint::_internal_bound() const {
  return bound_;
}
inline uint32_t SLBgplsTopoSrMetricConstraint::bound() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrMetricConstraint.Bound)
  return _internal_bound();
}
inline void SLBgplsTopoSrMetricConstraint::_internal_set_bound(uint32_t value) {
  
  bound_ = value;
}
inline void SLBgplsTopoSrMetricConstraint::set_bound(uint32_t value) {
  _internal_set_bound(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrMetricConstraint.Bound)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrCpSegListBandwidthState

// bytes Bandwidth = 1;
inline void SLBgplsTopoSrCpSegListBandwidthState::clear_bandwidth() {
  bandwidth_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrCpSegListBandwidthState::bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrCpSegListBandwidthState.Bandwidth)
  return _internal_bandwidth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrCpSegListBandwidthState::set_bandwidth(ArgT0&& arg0, ArgT... args) {
 
 bandwidth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrCpSegListBandwidthState.Bandwidth)
}
inline std::string* SLBgplsTopoSrCpSegListBandwidthState::mutable_bandwidth() {
  std::string* _s = _internal_mutable_bandwidth();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrCpSegListBandwidthState.Bandwidth)
  return _s;
}
inline const std::string& SLBgplsTopoSrCpSegListBandwidthState::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SLBgplsTopoSrCpSegListBandwidthState::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpSegListBandwidthState::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrCpSegListBandwidthState::release_bandwidth() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrCpSegListBandwidthState.Bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrCpSegListBandwidthState::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bandwidth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrCpSegListBandwidthState.Bandwidth)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrSegListId

// uint32 SegListId = 1;
inline void SLBgplsTopoSrSegListId::clear_seglistid() {
  seglistid_ = 0u;
}
inline uint32_t SLBgplsTopoSrSegListId::_internal_seglistid() const {
  return seglistid_;
}
inline uint32_t SLBgplsTopoSrSegListId::seglistid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrSegListId.SegListId)
  return _internal_seglistid();
}
inline void SLBgplsTopoSrSegListId::_internal_set_seglistid(uint32_t value) {
  
  seglistid_ = value;
}
inline void SLBgplsTopoSrSegListId::set_seglistid(uint32_t value) {
  _internal_set_seglistid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrSegListId.SegListId)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6EndPointBehavior

// uint32 EndPointBehavior = 1;
inline void SLBgplsTopoSrv6EndPointBehavior::clear_endpointbehavior() {
  endpointbehavior_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6EndPointBehavior::_internal_endpointbehavior() const {
  return endpointbehavior_;
}
inline uint32_t SLBgplsTopoSrv6EndPointBehavior::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndPointBehavior.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLBgplsTopoSrv6EndPointBehavior::_internal_set_endpointbehavior(uint32_t value) {
  
  endpointbehavior_ = value;
}
inline void SLBgplsTopoSrv6EndPointBehavior::set_endpointbehavior(uint32_t value) {
  _internal_set_endpointbehavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndPointBehavior.EndPointBehavior)
}

// bytes Flags = 2;
inline void SLBgplsTopoSrv6EndPointBehavior::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6EndPointBehavior::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndPointBehavior.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6EndPointBehavior::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndPointBehavior.Flags)
}
inline std::string* SLBgplsTopoSrv6EndPointBehavior::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6EndPointBehavior.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6EndPointBehavior::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrv6EndPointBehavior::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6EndPointBehavior::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6EndPointBehavior::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6EndPointBehavior.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6EndPointBehavior::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6EndPointBehavior.Flags)
}

// uint32 Algorithm = 3;
inline void SLBgplsTopoSrv6EndPointBehavior::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6EndPointBehavior::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLBgplsTopoSrv6EndPointBehavior::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6EndPointBehavior.Algorithm)
  return _internal_algorithm();
}
inline void SLBgplsTopoSrv6EndPointBehavior::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLBgplsTopoSrv6EndPointBehavior::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6EndPointBehavior.Algorithm)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6BgpPeerNodeSid

// bytes Flags = 1;
inline void SLBgplsTopoSrv6BgpPeerNodeSid::clear_flags() {
  flags_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6BgpPeerNodeSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6BgpPeerNodeSid::set_flags(ArgT0&& arg0, ArgT... args) {
 
 flags_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Flags)
}
inline std::string* SLBgplsTopoSrv6BgpPeerNodeSid::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Flags)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6BgpPeerNodeSid::_internal_flags() const {
  return flags_.Get();
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::_internal_set_flags(const std::string& value) {
  
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6BgpPeerNodeSid::_internal_mutable_flags() {
  
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6BgpPeerNodeSid::release_flags() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Flags)
}

// uint32 Weight = 2;
inline void SLBgplsTopoSrv6BgpPeerNodeSid::clear_weight() {
  weight_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6BgpPeerNodeSid::_internal_weight() const {
  return weight_;
}
inline uint32_t SLBgplsTopoSrv6BgpPeerNodeSid::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Weight)
  return _internal_weight();
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.Weight)
}

// uint32 PeerAS = 3;
inline void SLBgplsTopoSrv6BgpPeerNodeSid::clear_peeras() {
  peeras_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6BgpPeerNodeSid::_internal_peeras() const {
  return peeras_;
}
inline uint32_t SLBgplsTopoSrv6BgpPeerNodeSid::peeras() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerAS)
  return _internal_peeras();
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::_internal_set_peeras(uint32_t value) {
  
  peeras_ = value;
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::set_peeras(uint32_t value) {
  _internal_set_peeras(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerAS)
}

// bytes PeerBgpId = 4;
inline void SLBgplsTopoSrv6BgpPeerNodeSid::clear_peerbgpid() {
  peerbgpid_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoSrv6BgpPeerNodeSid::peerbgpid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerBgpId)
  return _internal_peerbgpid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoSrv6BgpPeerNodeSid::set_peerbgpid(ArgT0&& arg0, ArgT... args) {
 
 peerbgpid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerBgpId)
}
inline std::string* SLBgplsTopoSrv6BgpPeerNodeSid::mutable_peerbgpid() {
  std::string* _s = _internal_mutable_peerbgpid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerBgpId)
  return _s;
}
inline const std::string& SLBgplsTopoSrv6BgpPeerNodeSid::_internal_peerbgpid() const {
  return peerbgpid_.Get();
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::_internal_set_peerbgpid(const std::string& value) {
  
  peerbgpid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6BgpPeerNodeSid::_internal_mutable_peerbgpid() {
  
  return peerbgpid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoSrv6BgpPeerNodeSid::release_peerbgpid() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerBgpId)
  return peerbgpid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoSrv6BgpPeerNodeSid::set_allocated_peerbgpid(std::string* peerbgpid) {
  if (peerbgpid != nullptr) {
    
  } else {
    
  }
  peerbgpid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peerbgpid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (peerbgpid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    peerbgpid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoSrv6BgpPeerNodeSid.PeerBgpId)
}

// -------------------------------------------------------------------

// SLBgplsTopoSrv6SidStruct

// uint32 LocatorBlockLen = 1;
inline void SLBgplsTopoSrv6SidStruct::clear_locatorblocklen() {
  locatorblocklen_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::_internal_locatorblocklen() const {
  return locatorblocklen_;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::locatorblocklen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidStruct.LocatorBlockLen)
  return _internal_locatorblocklen();
}
inline void SLBgplsTopoSrv6SidStruct::_internal_set_locatorblocklen(uint32_t value) {
  
  locatorblocklen_ = value;
}
inline void SLBgplsTopoSrv6SidStruct::set_locatorblocklen(uint32_t value) {
  _internal_set_locatorblocklen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6SidStruct.LocatorBlockLen)
}

// uint32 LocatorNodeLen = 2;
inline void SLBgplsTopoSrv6SidStruct::clear_locatornodelen() {
  locatornodelen_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::_internal_locatornodelen() const {
  return locatornodelen_;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::locatornodelen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidStruct.LocatorNodeLen)
  return _internal_locatornodelen();
}
inline void SLBgplsTopoSrv6SidStruct::_internal_set_locatornodelen(uint32_t value) {
  
  locatornodelen_ = value;
}
inline void SLBgplsTopoSrv6SidStruct::set_locatornodelen(uint32_t value) {
  _internal_set_locatornodelen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6SidStruct.LocatorNodeLen)
}

// uint32 FunctionLen = 3;
inline void SLBgplsTopoSrv6SidStruct::clear_functionlen() {
  functionlen_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::_internal_functionlen() const {
  return functionlen_;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::functionlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidStruct.FunctionLen)
  return _internal_functionlen();
}
inline void SLBgplsTopoSrv6SidStruct::_internal_set_functionlen(uint32_t value) {
  
  functionlen_ = value;
}
inline void SLBgplsTopoSrv6SidStruct::set_functionlen(uint32_t value) {
  _internal_set_functionlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6SidStruct.FunctionLen)
}

// uint32 ArgLen = 4;
inline void SLBgplsTopoSrv6SidStruct::clear_arglen() {
  arglen_ = 0u;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::_internal_arglen() const {
  return arglen_;
}
inline uint32_t SLBgplsTopoSrv6SidStruct::arglen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoSrv6SidStruct.ArgLen)
  return _internal_arglen();
}
inline void SLBgplsTopoSrv6SidStruct::_internal_set_arglen(uint32_t value) {
  
  arglen_ = value;
}
inline void SLBgplsTopoSrv6SidStruct::set_arglen(uint32_t value) {
  _internal_set_arglen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoSrv6SidStruct.ArgLen)
}

// -------------------------------------------------------------------

// SLBgplsTopoUnknownAttr

// uint32 TlvType = 1;
inline void SLBgplsTopoUnknownAttr::clear_tlvtype() {
  tlvtype_ = 0u;
}
inline uint32_t SLBgplsTopoUnknownAttr::_internal_tlvtype() const {
  return tlvtype_;
}
inline uint32_t SLBgplsTopoUnknownAttr::tlvtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUnknownAttr.TlvType)
  return _internal_tlvtype();
}
inline void SLBgplsTopoUnknownAttr::_internal_set_tlvtype(uint32_t value) {
  
  tlvtype_ = value;
}
inline void SLBgplsTopoUnknownAttr::set_tlvtype(uint32_t value) {
  _internal_set_tlvtype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUnknownAttr.TlvType)
}

// uint32 TlvLen = 2;
inline void SLBgplsTopoUnknownAttr::clear_tlvlen() {
  tlvlen_ = 0u;
}
inline uint32_t SLBgplsTopoUnknownAttr::_internal_tlvlen() const {
  return tlvlen_;
}
inline uint32_t SLBgplsTopoUnknownAttr::tlvlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUnknownAttr.TlvLen)
  return _internal_tlvlen();
}
inline void SLBgplsTopoUnknownAttr::_internal_set_tlvlen(uint32_t value) {
  
  tlvlen_ = value;
}
inline void SLBgplsTopoUnknownAttr::set_tlvlen(uint32_t value) {
  _internal_set_tlvlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUnknownAttr.TlvLen)
}

// bytes RawTlv = 3;
inline void SLBgplsTopoUnknownAttr::clear_rawtlv() {
  rawtlv_.ClearToEmpty();
}
inline const std::string& SLBgplsTopoUnknownAttr::rawtlv() const {
  // @@protoc_insertion_point(field_get:service_layer.SLBgplsTopoUnknownAttr.RawTlv)
  return _internal_rawtlv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLBgplsTopoUnknownAttr::set_rawtlv(ArgT0&& arg0, ArgT... args) {
 
 rawtlv_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLBgplsTopoUnknownAttr.RawTlv)
}
inline std::string* SLBgplsTopoUnknownAttr::mutable_rawtlv() {
  std::string* _s = _internal_mutable_rawtlv();
  // @@protoc_insertion_point(field_mutable:service_layer.SLBgplsTopoUnknownAttr.RawTlv)
  return _s;
}
inline const std::string& SLBgplsTopoUnknownAttr::_internal_rawtlv() const {
  return rawtlv_.Get();
}
inline void SLBgplsTopoUnknownAttr::_internal_set_rawtlv(const std::string& value) {
  
  rawtlv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUnknownAttr::_internal_mutable_rawtlv() {
  
  return rawtlv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLBgplsTopoUnknownAttr::release_rawtlv() {
  // @@protoc_insertion_point(field_release:service_layer.SLBgplsTopoUnknownAttr.RawTlv)
  return rawtlv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLBgplsTopoUnknownAttr::set_allocated_rawtlv(std::string* rawtlv) {
  if (rawtlv != nullptr) {
    
  } else {
    
  }
  rawtlv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawtlv,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rawtlv_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rawtlv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLBgplsTopoUnknownAttr.RawTlv)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLBgplsTopoOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoOperation>() {
  return ::service_layer::SLBgplsTopoOperation_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoNlriType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoNlriType>() {
  return ::service_layer::SLBgplsTopoNlriType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoProtocol>() {
  return ::service_layer::SLBgplsTopoProtocol_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoOspfRouteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoOspfRouteType>() {
  return ::service_layer::SLBgplsTopoOspfRouteType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin>() {
  return ::service_layer::SLBgplsTopoSrPolicyProtocolOrigin_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoSidFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoSidFormat>() {
  return ::service_layer::SLBgplsTopoSidFormat_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoPrefixSidFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoPrefixSidFormat>() {
  return ::service_layer::SLBgplsTopoPrefixSidFormat_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLBgplsTopoSrSegmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLBgplsTopoSrSegmentType>() {
  return ::service_layer::SLBgplsTopoSrSegmentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fbgpls_5ftopology_2eproto
