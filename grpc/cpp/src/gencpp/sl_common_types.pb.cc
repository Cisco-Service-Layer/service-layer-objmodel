// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_common_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sl_common_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_layer {
class SLErrorStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLErrorStatus> {
} _SLErrorStatus_default_instance_;
class SLInterfaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLInterface> {
  public:
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 handle_;
} _SLInterface_default_instance_;
class SLIpAddressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLIpAddress> {
  public:
  ::google::protobuf::uint32 v4address_;
  ::google::protobuf::internal::ArenaStringPtr v6address_;
} _SLIpAddress_default_instance_;

namespace protobuf_sl_5fcommon_5ftypes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLErrorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLErrorStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterface, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLInterface_default_instance_), name_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLInterface_default_instance_), handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterface, Interface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLIpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLIpAddress, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLIpAddress_default_instance_), v4address_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLIpAddress_default_instance_), v6address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLIpAddress, Address_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SLErrorStatus)},
  { 5, -1, sizeof(SLInterface)},
  { 12, -1, sizeof(SLIpAddress)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLErrorStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLInterface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLIpAddress_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sl_common_types.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _SLErrorStatus_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SLInterface_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SLIpAddress_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SLErrorStatus_default_instance_.DefaultConstruct();
  _SLInterface_default_instance_.DefaultConstruct();
  _SLIpAddress_default_instance_.DefaultConstruct();
  _SLInterface_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _SLInterface_default_instance_.handle_ = 0u;
  _SLIpAddress_default_instance_.v4address_ = 0u;
  _SLIpAddress_default_instance_.v6address_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025sl_common_types.proto\022\rservice_layer\"\237"
      "\?\n\rSLErrorStatus\0224\n\006Status\030\001 \001(\0162$.servi"
      "ce_layer.SLErrorStatus.SLErrno\"\327>\n\007SLErr"
      "no\022\016\n\nSL_SUCCESS\020\000\022\024\n\020SL_NOT_CONNECTED\020\001"
      "\022\r\n\tSL_EAGAIN\020\002\022\r\n\tSL_ENOMEM\020\003\022\014\n\010SL_EBU"
      "SY\020\004\022\r\n\tSL_EINVAL\020\005\022\026\n\022SL_UNSUPPORTED_VE"
      "R\020\006\022\024\n\020SL_NOT_AVAILABLE\020\007\022\033\n\027SL_STREAM_N"
      "OT_SUPPORTED\020\010\022\016\n\nSL_ENOTSUP\020\t\022\017\n\013SL_SOM"
      "E_ERR\020\n\022\016\n\nSL_TIMEOUT\020\013\022\021\n\rSL_NOTIF_TERM"
      "\020\014\022\020\n\014SL_AUTH_FAIL\020\r\022\031\n\024SL_INIT_START_OF"
      "FSET\020\200\n\022\030\n\023SL_INIT_STATE_CLEAR\020\201\n\022\030\n\023SL_"
      "INIT_STATE_READY\020\202\n\022\034\n\027SL_INIT_UNSUPPORT"
      "ED_VER\020\203\n\022#\n\036SL_INIT_SERVER_NOT_INITIALI"
      "ZED\020\204\n\022&\n!SL_INIT_SERVER_MODE_CHANGE_FAI"
      "LED\020\205\n\022\034\n\027SL_RPC_VRF_START_OFFSET\020\200 \022%\n "
      "SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS\020\201 \022&\n!S"
      "L_RPC_VRF_SERVER_NOT_INITIALIZED\020\202 \022\030\n\023S"
      "L_VRF_START_OFFSET\020\200@\022\030\n\023SL_VRF_NAME_TOO"
      "LONG\020\201@\022\025\n\020SL_VRF_NOT_FOUND\020\202@\022\027\n\022SL_VRF"
      "_NO_TABLE_ID\020\203@\022&\n!SL_VRF_REG_INVALID_AD"
      "MIN_DISTANCE\020\204@\022\031\n\024SL_VRF_TABLE_ADD_ERR\020"
      "\205@\022\"\n\035SL_VRF_TABLE_REGISTRATION_ERR\020\206@\022$"
      "\n\037SL_VRF_TABLE_UNREGISTRATION_ERR\020\207@\022\031\n\024"
      "SL_VRF_TABLE_EOF_ERR\020\210@\022 \n\033SL_VRF_REG_VR"
      "F_NAME_MISSING\020\211@\022\'\n\"SL_VRF_V4_ROUTE_REP"
      "LAY_FATAL_ERROR\020\220@\022\'\n\"SL_VRF_V6_ROUTE_RE"
      "PLAY_FATAL_ERROR\020\221@\022\036\n\031SL_VRF_V4_ROUTE_R"
      "EPLAY_OK\020\222@\022\036\n\031SL_VRF_V6_ROUTE_REPLAY_OK"
      "\020\223@\022\036\n\031SL_RPC_ROUTE_START_OFFSET\020\200`\022!\n\034S"
      "L_RPC_ROUTE_TOO_MANY_ROUTES\020\201`\022\"\n\035SL_RPC"
      "_ROUTE_VRF_NAME_TOOLONG\020\202`\022\037\n\032SL_RPC_ROU"
      "TE_VRF_NOT_FOUND\020\203`\022\036\n\031SL_RPC_ROUTE_VRF_"
      "NO_TABLE\020\204`\022*\n%SL_RPC_ROUTE_VRF_TABLE_NO"
      "T_REGISTERED\020\205`\022\"\n\035SL_RPC_ROUTE_VRF_NAME"
      "_MISSING\020\206`\022(\n#SL_RPC_ROUTE_INIT_MODE_IN"
      "COMPATIBLE\020\207`\022(\n#SL_RPC_ROUTE_SERVER_NOT"
      "_INITIALIZED\020\210`\022)\n$SL_RPC_ROUTE_NOTIF_SR"
      "C_PROTO_TOOLONG\020\211`\022-\n(SL_RPC_ROUTE_NOTIF"
      "_SRC_PROTO_TAG_TOOLONG\020\212`\022\033\n\025SL_ROUTE_ST"
      "ART_OFFSET\020\200\200\001\022\033\n\025SL_ROUTE_ADD_NO_PATHS\020"
      "\201\200\001\022\036\n\030SL_ROUTE_UPDATE_NO_PATHS\020\202\200\001\022!\n\033S"
      "L_ROUTE_INVALID_PREFIX_LEN\020\203\200\001\022%\n\037SL_ROU"
      "TE_INVALID_ADMIN_DISTANCE\020\204\200\001\022 \n\032SL_ROUT"
      "E_INVALID_NUM_PATHS\020\205\200\001\022 \n\032SL_ROUTE_INVA"
      "LID_PREFIX_SZ\020\206\200\001\022\035\n\027SL_ROUTE_INVALID_PR"
      "EFIX\020\207\200\001\022*\n$SL_ROUTE_ERR_RIB_TABLE_LIMIT"
      "_REACHED\020\210\200\001\022#\n\035SL_ROUTE_ERR_RIB_INVALID"
      "_ARGS\020\211\200\001\022\'\n!SL_ROUTE_ERR_RIB_PATH_TABLE"
      "_LIMIT\020\212\200\001\022#\n\035SL_ROUTE_ERR_RIB_TOOMANYPA"
      "THS\020\213\200\001\022\025\n\017SL_ROUTE_EEXIST\020\214\200\001\022\034\n\026SL_ROU"
      "TE_HOST_BITS_SET\020\215\200\001\022#\n\035SL_ROUTE_INVALID"
      "_PREFIX_MCAST\020\216\200\001\022 \n\032SL_ROUTE_PATH_AFI_M"
      "ISMATCH\020\217\200\001\022$\n\036SL_ROUTE_TOOMANY_PRIMARY_"
      "PATHS\020\220\200\001\022#\n\035SL_ROUTE_TOOMANY_BACKUP_PAT"
      "HS\020\221\200\001\022\027\n\021SL_ROUTE_DB_NOMEM\020\222\200\001\022\"\n\034SL_RO"
      "UTE_INVALID_LOCAL_LABEL\020\223\200\001\022\032\n\024SL_PATH_S"
      "TART_OFFSET\020\200\240\001\022\031\n\023SL_PATH_NH_NO_TABLE\020\201"
      "\240\001\022\037\n\031SL_PATH_NH_INTF_NOT_FOUND\020\202\240\001\022!\n\033S"
      "L_PATH_INVALID_LABEL_COUNT\020\203\240\001\022\030\n\022SL_PAT"
      "H_INVALID_ID\020\204\240\001\022\036\n\030SL_PATH_VRF_NAME_TOO"
      "LONG\020\205\240\001\022\"\n\034SL_PATH_NH_INTF_NAME_TOOLONG"
      "\020\206\240\001\022 \n\032SL_PATH_NH_INVALID_ADDR_SZ\020\207\240\001\022!"
      "\n\033SL_PATH_NH_INF_NAME_MISSING\020\210\240\001\022#\n\035SL_"
      "PATH_INVALID_NEXT_HOP_ADDR\020\211\240\001\022\'\n!SL_PAT"
      "H_INVALID_REMOTE_ADDR_COUNT\020\212\240\001\022$\n\036SL_PA"
      "TH_REMOTE_ADDR_INVALID_SZ\020\213\240\001\022&\n SL_PATH"
      "_REMOTE_ADDR_AFI_MISMATCH\020\214\240\001\022&\n SL_PATH"
      "_INVALID_PROTECTED_BITMAP\020\215\240\001\022)\n#SL_PATH"
      "_BACKUP_MISSING_PRIMARY_PATH\020\216\240\001\022!\n\033SL_P"
      "ATH_PRIMARY_ID_REPEATED\020\217\240\001\022 \n\032SL_PATH_B"
      "ACKUP_ID_REPEATED\020\220\240\001\022*\n$SL_PATH_PRIMARY"
      "_TOOMANY_BACKUP_PATHS\020\221\240\001\022$\n\036SL_PATH_PRI"
      "MARY_TOOMANY_LABELS\020\222\240\001\022)\n#SL_PATH_PRIMA"
      "RY_TOOMANY_REMOTE_ADDR\020\223\240\001\022!\n\033SL_PATH_RE"
      "MOTE_ADDR_INVALID\020\224\240\001\022\033\n\025SL_PATH_INVALID"
      "_LABEL\020\225\240\001\022(\n\"SL_PATH_ROUTER_MAC_ADDR_IN"
      "VALID_SZ\020\226\240\001\022\035\n\027SL_RPC_BFD_START_OFFSET\020"
      "\200\300\001\022&\n SL_RPC_BFD_TOO_MANY_BFD_SESSIONS\020"
      "\201\300\001\022\"\n\034SL_RPC_BFD_API_BAD_PARAMETER\020\202\300\001\022"
      "*\n$SL_RPC_BFD_API_CLIENT_NOT_REGISTERED\020"
      "\203\300\001\022#\n\035SL_RPC_BFD_API_INTERNAL_ERROR\020\204\300\001"
      "\022\'\n!SL_RPC_BFD_SERVER_NOT_INITIALIZED\020\205\300"
      "\001\022\"\n\034SL_RPC_BFD_V4_NOT_REGISTERED\020\206\300\001\022\"\n"
      "\034SL_RPC_BFD_V6_NOT_REGISTERED\020\207\300\001\022\031\n\023SL_"
      "BFD_START_OFFSET\020\200\340\001\022\036\n\030SL_BFD_INTF_NAME"
      "_TOOLONG\020\201\340\001\022\033\n\025SL_BFD_INTF_NOT_FOUND\020\202\340"
      "\001\022\036\n\030SL_BFD_INVALID_ATTRIBUTE\020\203\340\001\022\036\n\030SL_"
      "BFD_INTF_NAME_MISSING\020\204\340\001\022\036\n\030SL_BFD_INVA"
      "LID_NBR_MCAST\020\205\340\001\022\030\n\022SL_BFD_INVALID_NBR\020"
      "\206\340\001\022\035\n\027SL_BFD_VRF_NAME_TOOLONG\020\207\340\001\022\032\n\024SL"
      "_BFD_BAD_PARAMETER\020\210\340\001\022\037\n\031SL_BFD_API_INT"
      "ERNAL_ERROR\020\211\340\001\022\032\n\024SL_BFD_VRF_NOT_FOUND\020"
      "\212\340\001\022 \n\032SL_BFD_INVALID_PREFIX_SIZE\020\213\340\001\022!\n"
      "\033SL_BFD_INVALID_SESSION_TYPE\020\214\340\001\022\030\n\022SL_B"
      "FD_INVALID_VRF\020\215\340\001\022\036\n\030SL_BFD_SESSION_NOT"
      "_FOUND\020\216\340\001\022\033\n\025SL_BFD_SESSION_EXISTS\020\217\340\001\022"
      "\036\n\030SL_BFD_INTERNAL_DB_ERROR\020\220\340\001\022\033\n\025SL_BF"
      "D_RECOVERY_ERROR\020\221\340\001\022\036\n\030SL_RPC_MPLS_STAR"
      "T_OFFSET\020\200\200\002\022#\n\035SL_RPC_MPLS_ILM_TOO_MANY"
      "_ILMS\020\201\200\002\022(\n\"SL_RPC_MPLS_SERVER_NOT_INIT"
      "IALIZED\020\202\200\002\022(\n\"SL_RPC_MPLS_INIT_MODE_INC"
      "OMPATIBLE\020\203\200\002\022/\n)SL_RPC_MPLS_LABEL_BLK_T"
      "OO_MANY_LABEL_BLKS\020\204\200\002\022 \n\032SL_RPC_MPLS_NO"
      "T_REGISTERED\020\205\200\002\022\027\n\021SL_ILM_ERR_OFFSET\020\200\240"
      "\002\022\027\n\021SL_ILM_ADD_FAILED\020\201\240\002\022\033\n\025SL_ILM_LSD"
      "_ADD_FAILED\020\202\240\002\022\036\n\030SL_ILM_INVALID_NUM_NH"
      "LFE\020\203\240\002\022\032\n\024SL_ILM_INVALID_LABEL\020\204\240\002\022\032\n\024S"
      "L_ILM_DELETE_FAILED\020\205\240\002\022\036\n\030SL_ILM_LSD_DE"
      "LETE_FAILED\020\206\240\002\022#\n\035SL_ILM_TOOMANY_PRIMAR"
      "Y_NHLFES\020\207\240\002\022\"\n\034SL_ILM_TOOMANY_BACKUP_NH"
      "LFES\020\210\240\002\022\'\n!SL_ILM_LSD_ADD_LABEL_ALLOC_F"
      "AILED\020\211\240\002\022%\n\037SL_ILM_LSD_NHLFE_INVALID_AT"
      "TRIB\020\212\240\002\022\023\n\rSL_ILM_EEXIST\020\213\240\002\022\025\n\017SL_ILM_"
      "DB_NOMEM\020\214\240\002\022\035\n\027SL_ILM_INVALID_ELSP_EXP\020"
      "\215\240\002\022)\n#SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_S"
      "ET\020\216\240\002\022\031\n\023SL_ILM_ADD_NO_PATHS\020\217\240\002\022\034\n\026SL_"
      "ILM_UPDATE_NO_PATHS\020\220\240\002\022\035\n\027SL_ILM_UNSUPP"
      "ORTED_ELSP\020\221\240\002\022&\n SL_ILM_LABEL_TOOMANY_E"
      "XP_CLASSES\020\222\240\002\022\037\n\031SL_ILM_REPLAY_FATAL_ER"
      "ROR\020\223\240\002\022\026\n\020SL_ILM_REPLAY_OK\020\224\240\002\022\031\n\023SL_NH"
      "LFE_ERR_OFFSET\020\200\300\002\022\032\n\024SL_NHLFE_NH_NO_TAB"
      "LE\020\201\300\002\022!\n\033SL_NHLFE_NH_INVALID_ADDR_SZ\020\202\300"
      "\002\022$\n\036SL_NHLFE_INVALID_NEXT_HOP_ADDR\020\203\300\002\022"
      "\037\n\031SL_NHLFE_VRF_NAME_TOOLONG\020\204\300\002\022\"\n\034SL_N"
      "HLFE_NH_INF_NAME_MISSING\020\205\300\002\022#\n\035SL_NHLFE"
      "_NH_INTF_NAME_TOOLONG\020\206\300\002\022\"\n\034SL_NHLFE_IN"
      "VALID_LABEL_COUNT\020\207\300\002\022\036\n\030SL_NHLFE_INVALI"
      "D_PATH_ID\020\210\300\002\022\034\n\026SL_NHLFE_INVALID_LABEL\020"
      "\211\300\002\022\'\n!SL_NHLFE_INVALID_PROTECTED_BITMAP"
      "\020\212\300\002\022(\n\"SL_NHLFE_INVALID_REMOTE_ADDR_COU"
      "NT\020\213\300\002\022%\n\037SL_NHLFE_REMOTE_ADDR_INVALID_S"
      "Z\020\214\300\002\022%\n\037SL_NHLFE_PRIMARY_TOOMANY_LABELS"
      "\020\215\300\002\022*\n$SL_NHLFE_PRIMARY_TOOMANY_REMOTE_"
      "ADDR\020\216\300\002\022!\n\033SL_NHLFE_BACKUP_ID_REPEATED\020"
      "\217\300\002\022\"\n\034SL_NHLFE_PRIMARY_ID_REPEATED\020\220\300\002\022"
      ",\n&SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPT"
      "Y\020\221\300\002\022+\n%SL_NHLFE_PRIMARY_TOOMANY_BACKUP"
      "_PATHS\020\222\300\002\022\"\n\034SL_NHLFE_REMOTE_ADDR_INVAL"
      "ID\020\223\300\002\022*\n$SL_NHLFE_BACKUP_MISSING_PRIMAR"
      "Y_PATH\020\224\300\002\022\037\n\031SL_NHLFE_NEXT_HOP_MISSING\020"
      "\225\300\002\022#\n\035SL_NHLFE_LABEL_ACTION_INVALID\020\226\300\002"
      "\022 \n\032SL_NHLFE_NH_INTF_NOT_FOUND\020\227\300\002\022\032\n\024SL"
      "_NHLFE_OPER_FAILED\020\230\300\002\022#\n\035SL_NHLFE_LABEL"
      "_ACTION_MISSING\020\231\300\002\022\035\n\027SL_NHLFE_EXP_SET_"
      "FAILED\020\232\300\002\022*\n$SL_NHLFE_ELSP_PROTECTION_U"
      "NSUPPORTED\020\233\300\002\022\035\n\027SL_LABEL_BLK_ERR_OFFSE"
      "T\020\200\340\002\022!\n\033SL_LABEL_BLK_LSD_ADD_FAILED\020\201\340\002"
      "\022$\n\036SL_LABEL_BLK_LSD_DELETE_FAILED\020\202\340\002\022*"
      "\n$SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND\020\203"
      "\340\002\022\'\n!SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE\020"
      "\204\340\002\022%\n\037SL_LABEL_BLK_LSD_INVALID_ATTRIB\020\205"
      "\340\002\022%\n\037SL_LABEL_BLK_INVALID_BLOCK_SIZE\020\206\340"
      "\002\022&\n SL_LABEL_BLK_INVALID_START_LABEL\020\207\340"
      "\002\022\031\n\023SL_LABEL_BLK_EEXIST\020\210\340\002\022\033\n\025SL_LABEL"
      "_BLK_DB_NOMEM\020\211\340\002\022\037\n\031SL_LABEL_BLK_TYPE_I"
      "NVALID\020\212\340\002\022&\n SL_LABEL_BLK_CLIENT_NAME_T"
      "OOLONG\020\213\340\002\022\034\n\026SL_MPLS_REG_ERR_OFFSET\020\200\200\003"
      "\022\025\n\017SL_MPLS_REG_ERR\020\201\200\003\022\027\n\021SL_MPLS_UNREG"
      "_ERR\020\202\200\003\022\025\n\017SL_MPLS_EOF_ERR\020\203\200\003\022\036\n\030SL_RP"
      "C_INTF_START_OFFSET\020\200\240\003\022%\n\037SL_RPC_INTF_T"
      "OO_MANY_INTERFACES\020\201\240\003\022(\n\"SL_RPC_INTF_SE"
      "RVER_NOT_INITIALIZED\020\202\240\003\022+\n%SL_RPC_INTF_"
      "API_CLIENT_NOT_REGISTERED\020\203\240\003\022\032\n\024SL_INTF"
      "_START_OFFSET\020\200\300\003\022$\n\036SL_INTF_INTERFACE_N"
      "AME_MISSING\020\201\300\003\022$\n\036SL_INTF_INTERFACE_NAM"
      "E_TOOLONG\020\202\300\003\022\037\n\031SL_INTF_INTERFACE_REG_E"
      "RR\020\203\300\003\022\037\n\031SL_INTF_INTERNAL_DB_ERROR\020\204\300\003\022"
      "\034\n\026SL_INTF_RECOVERY_ERROR\020\205\300\003\022\036\n\030SL_INTF"
      "_INTERFACE_EXISTS\020\206\300\003\022!\n\033SL_INTF_INTERFA"
      "CE_NOT_FOUND\020\207\300\003\022\034\n\026SL_L2_REG_START_OFFS"
      "ET\020\200\340\003\022\034\n\026SL_L2_REGISTRATION_ERR\020\201\340\003\022\036\n\030"
      "SL_L2_UNREGISTRATION_ERR\020\202\340\003\022\023\n\rSL_L2_EO"
      "F_ERR\020\203\340\003\022&\n SL_L2_REG_INVALID_ADMIN_DIS"
      "TANCE\020\204\340\003\022\034\n\026SL_L2_REG_IS_DUPLICATE\020\205\340\003\022"
      "&\n SL_L2_REG_SERVER_NOT_INITIALIZED\020\206\340\003\022"
      "#\n\035SL_RPC_L2_BD_REG_START_OFFSET\020\200\200\004\022#\n\035"
      "SL_RPC_L2_BD_REG_NAME_MISSING\020\201\200\004\022$\n\036SL_"
      "RPC_L2_BD_REG_TOO_MANY_MSGS\020\202\200\004\022-\n\'SL_RP"
      "C_L2_BD_REG_SERVER_NOT_INITIALIZED\020\203\200\004\022,"
      "\n&SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED"
      "\020\204\200\004\022\037\n\031SL_L2_BD_REG_START_OFFSET\020\200\240\004\022\037\n"
      "\031SL_L2_BD_REGISTRATION_ERR\020\201\240\004\022!\n\033SL_L2_"
      "BD_UNREGISTRATION_ERR\020\202\240\004\022\026\n\020SL_L2_BD_EO"
      "F_ERR\020\203\240\004\022 \n\032SL_L2_BD_REG_NAME_TOO_LONG\020"
      "\204\240\004\022\037\n\031SL_L2_BD_REG_BD_NOT_FOUND\020\205\240\004\022\"\n\034"
      "SL_RPC_L2_ROUTE_START_OFFSET\020\200\300\004\022#\n\035SL_R"
      "PC_L2_ROUTE_TOO_MANY_MSGS\020\201\300\004\022,\n&SL_RPC_"
      "L2_ROUTE_SERVER_NOT_INITIALIZED\020\202\300\004\022+\n%S"
      "L_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED\020\203\300\004"
      "\022\036\n\030SL_L2_ROUTE_START_OFFSET\020\200\340\004\022!\n\033SL_L"
      "2_ROUTE_BD_NAME_MISSING\020\201\340\004\022!\n\033SL_L2_ROU"
      "TE_BD_NAME_TOOLONG\020\202\340\004\022\036\n\030SL_L2_ROUTE_BD"
      "_NOT_FOUND\020\203\340\004\022#\n\035SL_L2_ROUTE_BD_NOT_REG"
      "ISTERED\020\204\340\004\022\036\n\030SL_L2_ROUTE_INVALID_ARGS\020"
      "\205\340\004\022\"\n\034SL_RPC_L2_NOTIF_START_OFFSET\020\201\200\005\022"
      ",\n&SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZE"
      "D\020\202\200\005\022+\n%SL_RPC_L2_NOTIF_CLIENT_NOT_REGI"
      "STERED\020\203\200\005\022 \n\032SL_RPC_L2_NOTIF_ENABLE_ERR"
      "\020\204\200\005\022!\n\033SL_RPC_L2_NOTIF_DISABLE_ERR\020\205\200\005\022"
      "\035\n\027SL_RPC_L2_NOTIF_EOF_ERR\020\206\200\005\022%\n\037SL_RPC"
      "_L2_NOTIF_BD_NAME_MISSING\020\207\200\005\022%\n\037SL_RPC_"
      "L2_NOTIF_BD_NAME_TOOLONG\020\210\200\005\022\"\n\034SL_RPC_L"
      "2_NOTIF_BD_NOT_FOUND\020\211\200\005\022\036\n\030SL_INTERNAL_"
      "START_OFFSET\020\200\200@\"<\n\013SLInterface\022\016\n\004Name\030"
      "\001 \001(\tH\000\022\020\n\006Handle\030\002 \001(\rH\000B\013\n\tInterface\"B"
      "\n\013SLIpAddress\022\023\n\tV4Address\030\001 \001(\rH\000\022\023\n\tV6"
      "Address\030\002 \001(\014H\000B\t\n\007Address*b\n\007SLRegOp\022\025\n"
      "\021SL_REGOP_RESERVED\020\000\022\025\n\021SL_REGOP_REGISTE"
      "R\020\001\022\027\n\023SL_REGOP_UNREGISTER\020\002\022\020\n\014SL_REGOP"
      "_EOF\020\003*_\n\nSLObjectOp\022\025\n\021SL_OBJOP_RESERVE"
      "D\020\000\022\020\n\014SL_OBJOP_ADD\020\001\022\023\n\017SL_OBJOP_UPDATE"
      "\020\002\022\023\n\017SL_OBJOP_DELETE\020\003*S\n\tSLNotifOp\022\027\n\023"
      "SL_NOTIFOP_RESERVED\020\000\022\025\n\021SL_NOTIFOP_ENAB"
      "LE\020\001\022\026\n\022SL_NOTIFOP_DISABLE\020\002*K\n\013SLEncapT"
      "ype\022\025\n\021SL_ENCAP_RESERVED\020\000\022\022\n\016SL_ENCAP_V"
      "XLAN\020\001\022\021\n\rSL_ENCAP_MPLS\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl_common_types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sl_5fcommon_5ftypes_2eproto

const ::google::protobuf::EnumDescriptor* SLErrorStatus_SLErrno_descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_enum_descriptors[0];
}
bool SLErrorStatus_SLErrno_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 1280:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 4096:
    case 4097:
    case 4098:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8208:
    case 8209:
    case 8210:
    case 8211:
    case 12288:
    case 12289:
    case 12290:
    case 12291:
    case 12292:
    case 12293:
    case 12294:
    case 12295:
    case 12296:
    case 12297:
    case 12298:
    case 16384:
    case 16385:
    case 16386:
    case 16387:
    case 16388:
    case 16389:
    case 16390:
    case 16391:
    case 16392:
    case 16393:
    case 16394:
    case 16395:
    case 16396:
    case 16397:
    case 16398:
    case 16399:
    case 16400:
    case 16401:
    case 16402:
    case 16403:
    case 20480:
    case 20481:
    case 20482:
    case 20483:
    case 20484:
    case 20485:
    case 20486:
    case 20487:
    case 20488:
    case 20489:
    case 20490:
    case 20491:
    case 20492:
    case 20493:
    case 20494:
    case 20495:
    case 20496:
    case 20497:
    case 20498:
    case 20499:
    case 20500:
    case 20501:
    case 20502:
    case 24576:
    case 24577:
    case 24578:
    case 24579:
    case 24580:
    case 24581:
    case 24582:
    case 24583:
    case 28672:
    case 28673:
    case 28674:
    case 28675:
    case 28676:
    case 28677:
    case 28678:
    case 28679:
    case 28680:
    case 28681:
    case 28682:
    case 28683:
    case 28684:
    case 28685:
    case 28686:
    case 28687:
    case 28688:
    case 28689:
    case 32768:
    case 32769:
    case 32770:
    case 32771:
    case 32772:
    case 32773:
    case 36864:
    case 36865:
    case 36866:
    case 36867:
    case 36868:
    case 36869:
    case 36870:
    case 36871:
    case 36872:
    case 36873:
    case 36874:
    case 36875:
    case 36876:
    case 36877:
    case 36878:
    case 36879:
    case 36880:
    case 36881:
    case 36882:
    case 36883:
    case 36884:
    case 40960:
    case 40961:
    case 40962:
    case 40963:
    case 40964:
    case 40965:
    case 40966:
    case 40967:
    case 40968:
    case 40969:
    case 40970:
    case 40971:
    case 40972:
    case 40973:
    case 40974:
    case 40975:
    case 40976:
    case 40977:
    case 40978:
    case 40979:
    case 40980:
    case 40981:
    case 40982:
    case 40983:
    case 40984:
    case 40985:
    case 40986:
    case 40987:
    case 45056:
    case 45057:
    case 45058:
    case 45059:
    case 45060:
    case 45061:
    case 45062:
    case 45063:
    case 45064:
    case 45065:
    case 45066:
    case 45067:
    case 49152:
    case 49153:
    case 49154:
    case 49155:
    case 53248:
    case 53249:
    case 53250:
    case 53251:
    case 57344:
    case 57345:
    case 57346:
    case 57347:
    case 57348:
    case 57349:
    case 57350:
    case 57351:
    case 61440:
    case 61441:
    case 61442:
    case 61443:
    case 61444:
    case 61445:
    case 61446:
    case 65536:
    case 65537:
    case 65538:
    case 65539:
    case 65540:
    case 69632:
    case 69633:
    case 69634:
    case 69635:
    case 69636:
    case 69637:
    case 73728:
    case 73729:
    case 73730:
    case 73731:
    case 77824:
    case 77825:
    case 77826:
    case 77827:
    case 77828:
    case 77829:
    case 81921:
    case 81922:
    case 81923:
    case 81924:
    case 81925:
    case 81926:
    case 81927:
    case 81928:
    case 81929:
    case 1048576:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLErrorStatus_SLErrno SLErrorStatus::SL_SUCCESS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NOT_CONNECTED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_EAGAIN;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ENOMEM;
const SLErrorStatus_SLErrno SLErrorStatus::SL_EBUSY;
const SLErrorStatus_SLErrno SLErrorStatus::SL_EINVAL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_UNSUPPORTED_VER;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NOT_AVAILABLE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_STREAM_NOT_SUPPORTED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ENOTSUP;
const SLErrorStatus_SLErrno SLErrorStatus::SL_SOME_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_TIMEOUT;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NOTIF_TERM;
const SLErrorStatus_SLErrno SLErrorStatus::SL_AUTH_FAIL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INIT_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INIT_STATE_CLEAR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INIT_STATE_READY;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INIT_UNSUPPORTED_VER;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INIT_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INIT_SERVER_MODE_CHANGE_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_VRF_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_VRF_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_NO_TABLE_ID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_REG_INVALID_ADMIN_DISTANCE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_TABLE_ADD_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_TABLE_REGISTRATION_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_TABLE_UNREGISTRATION_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_TABLE_EOF_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_REG_VRF_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_V4_ROUTE_REPLAY_OK;
const SLErrorStatus_SLErrno SLErrorStatus::SL_VRF_V6_ROUTE_REPLAY_OK;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_TOO_MANY_ROUTES;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_VRF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_VRF_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_VRF_NO_TABLE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_VRF_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_ADD_NO_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_UPDATE_NO_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_PREFIX_LEN;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_ADMIN_DISTANCE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_NUM_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_PREFIX_SZ;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_PREFIX;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_ERR_RIB_INVALID_ARGS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_ERR_RIB_TOOMANYPATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_EEXIST;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_HOST_BITS_SET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_PREFIX_MCAST;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_PATH_AFI_MISMATCH;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_TOOMANY_PRIMARY_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_TOOMANY_BACKUP_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_DB_NOMEM;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ROUTE_INVALID_LOCAL_LABEL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_NH_NO_TABLE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_NH_INTF_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_INVALID_LABEL_COUNT;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_INVALID_ID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_VRF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_NH_INTF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_NH_INVALID_ADDR_SZ;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_NH_INF_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_INVALID_NEXT_HOP_ADDR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_INVALID_REMOTE_ADDR_COUNT;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_REMOTE_ADDR_INVALID_SZ;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_REMOTE_ADDR_AFI_MISMATCH;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_INVALID_PROTECTED_BITMAP;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_BACKUP_MISSING_PRIMARY_PATH;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_PRIMARY_ID_REPEATED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_BACKUP_ID_REPEATED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_PRIMARY_TOOMANY_LABELS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_REMOTE_ADDR_INVALID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_INVALID_LABEL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_TOO_MANY_BFD_SESSIONS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_API_BAD_PARAMETER;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_API_CLIENT_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_API_INTERNAL_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_V4_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_BFD_V6_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INTF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INTF_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INVALID_ATTRIBUTE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INTF_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INVALID_NBR_MCAST;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INVALID_NBR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_VRF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_BAD_PARAMETER;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_API_INTERNAL_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_VRF_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INVALID_PREFIX_SIZE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INVALID_SESSION_TYPE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INVALID_VRF;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_SESSION_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_SESSION_EXISTS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_INTERNAL_DB_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_BFD_RECOVERY_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_MPLS_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_MPLS_ILM_TOO_MANY_ILMS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_MPLS_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_MPLS_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_ERR_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_ADD_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_LSD_ADD_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_INVALID_NUM_NHLFE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_INVALID_LABEL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_DELETE_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_LSD_DELETE_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_TOOMANY_PRIMARY_NHLFES;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_TOOMANY_BACKUP_NHLFES;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_LSD_NHLFE_INVALID_ATTRIB;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_EEXIST;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_DB_NOMEM;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_INVALID_ELSP_EXP;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_ADD_NO_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_UPDATE_NO_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_UNSUPPORTED_ELSP;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_LABEL_TOOMANY_EXP_CLASSES;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_REPLAY_FATAL_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_ILM_REPLAY_OK;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_ERR_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_NH_NO_TABLE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_NH_INVALID_ADDR_SZ;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_INVALID_NEXT_HOP_ADDR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_VRF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_NH_INF_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_NH_INTF_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_INVALID_LABEL_COUNT;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_INVALID_PATH_ID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_INVALID_LABEL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_INVALID_PROTECTED_BITMAP;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_INVALID_REMOTE_ADDR_COUNT;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_REMOTE_ADDR_INVALID_SZ;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_PRIMARY_TOOMANY_LABELS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_BACKUP_ID_REPEATED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_PRIMARY_ID_REPEATED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_REMOTE_ADDR_INVALID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_NEXT_HOP_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_LABEL_ACTION_INVALID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_NH_INTF_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_OPER_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_LABEL_ACTION_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_EXP_SET_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_ERR_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_LSD_ADD_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_LSD_DELETE_FAILED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_LSD_INVALID_ATTRIB;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_INVALID_BLOCK_SIZE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_INVALID_START_LABEL;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_EEXIST;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_DB_NOMEM;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_TYPE_INVALID;
const SLErrorStatus_SLErrno SLErrorStatus::SL_LABEL_BLK_CLIENT_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_MPLS_REG_ERR_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_MPLS_REG_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_MPLS_UNREG_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_MPLS_EOF_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_INTF_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_INTF_TOO_MANY_INTERFACES;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_INTF_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_INTF_API_CLIENT_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_INTERFACE_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_INTERFACE_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_INTERFACE_REG_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_INTERNAL_DB_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_RECOVERY_ERROR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_INTERFACE_EXISTS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTF_INTERFACE_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_REG_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_REGISTRATION_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_UNREGISTRATION_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_EOF_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_REG_INVALID_ADMIN_DISTANCE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_REG_IS_DUPLICATE;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_REG_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_BD_REG_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_BD_REG_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_BD_REG_TOO_MANY_MSGS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_BD_REG_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_BD_REGISTRATION_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_BD_UNREGISTRATION_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_BD_EOF_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_BD_REG_NAME_TOO_LONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_BD_REG_BD_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_ROUTE_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_ROUTE_TOO_MANY_MSGS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_ROUTE_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_ROUTE_BD_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_ROUTE_BD_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_ROUTE_BD_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_ROUTE_BD_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_L2_ROUTE_INVALID_ARGS;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_ENABLE_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_DISABLE_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_EOF_ERR;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_BD_NAME_MISSING;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_BD_NAME_TOOLONG;
const SLErrorStatus_SLErrno SLErrorStatus::SL_RPC_L2_NOTIF_BD_NOT_FOUND;
const SLErrorStatus_SLErrno SLErrorStatus::SL_INTERNAL_START_OFFSET;
const SLErrorStatus_SLErrno SLErrorStatus::SLErrno_MIN;
const SLErrorStatus_SLErrno SLErrorStatus::SLErrno_MAX;
const int SLErrorStatus::SLErrno_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SLRegOp_descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_enum_descriptors[1];
}
bool SLRegOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLObjectOp_descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_enum_descriptors[2];
}
bool SLObjectOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLNotifOp_descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_enum_descriptors[3];
}
bool SLNotifOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLEncapType_descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_enum_descriptors[4];
}
bool SLEncapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLErrorStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLErrorStatus::SLErrorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLErrorStatus)
}
SLErrorStatus::SLErrorStatus(const SLErrorStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLErrorStatus)
}

void SLErrorStatus::SharedCtor() {
  status_ = 0;
  _cached_size_ = 0;
}

SLErrorStatus::~SLErrorStatus() {
  // @@protoc_insertion_point(destructor:service_layer.SLErrorStatus)
  SharedDtor();
}

void SLErrorStatus::SharedDtor() {
}

void SLErrorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLErrorStatus::descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_metadata[0].descriptor;
}

const SLErrorStatus& SLErrorStatus::default_instance() {
  protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLErrorStatus* SLErrorStatus::New(::google::protobuf::Arena* arena) const {
  SLErrorStatus* n = new SLErrorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLErrorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLErrorStatus)
  status_ = 0;
}

bool SLErrorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLErrorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus.SLErrno Status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::service_layer::SLErrorStatus_SLErrno >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLErrorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLErrorStatus)
  return false;
#undef DO_
}

void SLErrorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLErrorStatus)
  // .service_layer.SLErrorStatus.SLErrno Status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLErrorStatus)
}

::google::protobuf::uint8* SLErrorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLErrorStatus)
  // .service_layer.SLErrorStatus.SLErrno Status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLErrorStatus)
  return target;
}

size_t SLErrorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLErrorStatus)
  size_t total_size = 0;

  // .service_layer.SLErrorStatus.SLErrno Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLErrorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SLErrorStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLErrorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLErrorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLErrorStatus)
    MergeFrom(*source);
  }
}

void SLErrorStatus::MergeFrom(const SLErrorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void SLErrorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLErrorStatus::CopyFrom(const SLErrorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLErrorStatus::IsInitialized() const {
  return true;
}

void SLErrorStatus::Swap(SLErrorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLErrorStatus::InternalSwap(SLErrorStatus* other) {
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLErrorStatus::GetMetadata() const {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLErrorStatus

// .service_layer.SLErrorStatus.SLErrno Status = 1;
void SLErrorStatus::clear_status() {
  status_ = 0;
}
::service_layer::SLErrorStatus_SLErrno SLErrorStatus::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLErrorStatus.Status)
  return static_cast< ::service_layer::SLErrorStatus_SLErrno >(status_);
}
void SLErrorStatus::set_status(::service_layer::SLErrorStatus_SLErrno value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLErrorStatus.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterface::kNameFieldNumber;
const int SLInterface::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterface::SLInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterface)
}
SLInterface::SLInterface(const SLInterface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Interface();
  switch (from.Interface_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kHandle: {
      set_handle(from.handle());
      break;
    }
    case INTERFACE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterface)
}

void SLInterface::SharedCtor() {
  clear_has_Interface();
  _cached_size_ = 0;
}

SLInterface::~SLInterface() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterface)
  SharedDtor();
}

void SLInterface::SharedDtor() {
  if (has_Interface()) {
    clear_Interface();
  }
}

void SLInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterface::descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_metadata[1].descriptor;
}

const SLInterface& SLInterface::default_instance() {
  protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLInterface* SLInterface::New(::google::protobuf::Arena* arena) const {
  SLInterface* n = new SLInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterface::clear_Interface() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLInterface)
  switch (Interface_case()) {
    case kName: {
      Interface_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHandle: {
      // No need to clear
      break;
    }
    case INTERFACE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTERFACE_NOT_SET;
}


void SLInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterface)
  clear_Interface();
}

bool SLInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "service_layer.SLInterface.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Handle = 2;
      case 2: {
        if (tag == 16u) {
          clear_Interface();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Interface_.handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterface)
  return false;
#undef DO_
}

void SLInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterface)
  // string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLInterface.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterface)
}

::google::protobuf::uint8* SLInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterface)
  // string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLInterface.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterface)
  return target;
}

size_t SLInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterface)
  size_t total_size = 0;

  switch (Interface_case()) {
    // string Name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // uint32 Handle = 2;
    case kHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
      break;
    }
    case INTERFACE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const SLInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLInterface)
    MergeFrom(*source);
  }
}

void SLInterface::MergeFrom(const SLInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.Interface_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kHandle: {
      set_handle(from.handle());
      break;
    }
    case INTERFACE_NOT_SET: {
      break;
    }
  }
}

void SLInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterface::CopyFrom(const SLInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterface::IsInitialized() const {
  return true;
}

void SLInterface::Swap(SLInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterface::InternalSwap(SLInterface* other) {
  std::swap(Interface_, other->Interface_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterface::GetMetadata() const {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterface

// string Name = 1;
bool SLInterface::has_name() const {
  return Interface_case() == kName;
}
void SLInterface::set_has_name() {
  _oneof_case_[0] = kName;
}
void SLInterface::clear_name() {
  if (has_name()) {
    Interface_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Interface();
  }
}
const ::std::string& SLInterface::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterface.Name)
  if (has_name()) {
    return Interface_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void SLInterface::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:service_layer.SLInterface.Name)
  if (!has_name()) {
    clear_Interface();
    set_has_name();
    Interface_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Interface_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLInterface.Name)
}
#if LANG_CXX11
void SLInterface::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:service_layer.SLInterface.Name)
  if (!has_name()) {
    clear_Interface();
    set_has_name();
    Interface_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Interface_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLInterface.Name)
}
#endif
void SLInterface::set_name(const char* value) {
  if (!has_name()) {
    clear_Interface();
    set_has_name();
    Interface_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Interface_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLInterface.Name)
}
void SLInterface::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_Interface();
    set_has_name();
    Interface_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Interface_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLInterface.Name)
}
::std::string* SLInterface::mutable_name() {
  if (!has_name()) {
    clear_Interface();
    set_has_name();
    Interface_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterface.Name)
  return Interface_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SLInterface::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLInterface.Name)
  if (has_name()) {
    clear_has_Interface();
    return Interface_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void SLInterface::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    Interface_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Interface();
  if (name != NULL) {
    set_has_name();
    Interface_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterface.Name)
}

// uint32 Handle = 2;
bool SLInterface::has_handle() const {
  return Interface_case() == kHandle;
}
void SLInterface::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
void SLInterface::clear_handle() {
  if (has_handle()) {
    Interface_.handle_ = 0u;
    clear_has_Interface();
  }
}
::google::protobuf::uint32 SLInterface::handle() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterface.Handle)
  if (has_handle()) {
    return Interface_.handle_;
  }
  return 0u;
}
void SLInterface::set_handle(::google::protobuf::uint32 value) {
  if (!has_handle()) {
    clear_Interface();
    set_has_handle();
  }
  Interface_.handle_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterface.Handle)
}

bool SLInterface::has_Interface() const {
  return Interface_case() != INTERFACE_NOT_SET;
}
void SLInterface::clear_has_Interface() {
  _oneof_case_[0] = INTERFACE_NOT_SET;
}
SLInterface::InterfaceCase SLInterface::Interface_case() const {
  return SLInterface::InterfaceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLIpAddress::kV4AddressFieldNumber;
const int SLIpAddress::kV6AddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLIpAddress::SLIpAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLIpAddress)
}
SLIpAddress::SLIpAddress(const SLIpAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Address();
  switch (from.Address_case()) {
    case kV4Address: {
      set_v4address(from.v4address());
      break;
    }
    case kV6Address: {
      set_v6address(from.v6address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLIpAddress)
}

void SLIpAddress::SharedCtor() {
  clear_has_Address();
  _cached_size_ = 0;
}

SLIpAddress::~SLIpAddress() {
  // @@protoc_insertion_point(destructor:service_layer.SLIpAddress)
  SharedDtor();
}

void SLIpAddress::SharedDtor() {
  if (has_Address()) {
    clear_Address();
  }
}

void SLIpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLIpAddress::descriptor() {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_metadata[2].descriptor;
}

const SLIpAddress& SLIpAddress::default_instance() {
  protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLIpAddress* SLIpAddress::New(::google::protobuf::Arena* arena) const {
  SLIpAddress* n = new SLIpAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLIpAddress::clear_Address() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLIpAddress)
  switch (Address_case()) {
    case kV4Address: {
      // No need to clear
      break;
    }
    case kV6Address: {
      Address_.v6address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void SLIpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLIpAddress)
  clear_Address();
}

bool SLIpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLIpAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 V4Address = 1;
      case 1: {
        if (tag == 8u) {
          clear_Address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Address_.v4address_)));
          set_has_v4address();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes V6Address = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v6address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLIpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLIpAddress)
  return false;
#undef DO_
}

void SLIpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLIpAddress)
  // uint32 V4Address = 1;
  if (has_v4address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->v4address(), output);
  }

  // bytes V6Address = 2;
  if (has_v6address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->v6address(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLIpAddress)
}

::google::protobuf::uint8* SLIpAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLIpAddress)
  // uint32 V4Address = 1;
  if (has_v4address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->v4address(), target);
  }

  // bytes V6Address = 2;
  if (has_v6address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->v6address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLIpAddress)
  return target;
}

size_t SLIpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLIpAddress)
  size_t total_size = 0;

  switch (Address_case()) {
    // uint32 V4Address = 1;
    case kV4Address: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v4address());
      break;
    }
    // bytes V6Address = 2;
    case kV6Address: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v6address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLIpAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLIpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const SLIpAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLIpAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLIpAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLIpAddress)
    MergeFrom(*source);
  }
}

void SLIpAddress::MergeFrom(const SLIpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLIpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.Address_case()) {
    case kV4Address: {
      set_v4address(from.v4address());
      break;
    }
    case kV6Address: {
      set_v6address(from.v6address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
}

void SLIpAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLIpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLIpAddress::CopyFrom(const SLIpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLIpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLIpAddress::IsInitialized() const {
  return true;
}

void SLIpAddress::Swap(SLIpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLIpAddress::InternalSwap(SLIpAddress* other) {
  std::swap(Address_, other->Address_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLIpAddress::GetMetadata() const {
  protobuf_sl_5fcommon_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fcommon_5ftypes_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLIpAddress

// uint32 V4Address = 1;
bool SLIpAddress::has_v4address() const {
  return Address_case() == kV4Address;
}
void SLIpAddress::set_has_v4address() {
  _oneof_case_[0] = kV4Address;
}
void SLIpAddress::clear_v4address() {
  if (has_v4address()) {
    Address_.v4address_ = 0u;
    clear_has_Address();
  }
}
::google::protobuf::uint32 SLIpAddress::v4address() const {
  // @@protoc_insertion_point(field_get:service_layer.SLIpAddress.V4Address)
  if (has_v4address()) {
    return Address_.v4address_;
  }
  return 0u;
}
void SLIpAddress::set_v4address(::google::protobuf::uint32 value) {
  if (!has_v4address()) {
    clear_Address();
    set_has_v4address();
  }
  Address_.v4address_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLIpAddress.V4Address)
}

// bytes V6Address = 2;
bool SLIpAddress::has_v6address() const {
  return Address_case() == kV6Address;
}
void SLIpAddress::set_has_v6address() {
  _oneof_case_[0] = kV6Address;
}
void SLIpAddress::clear_v6address() {
  if (has_v6address()) {
    Address_.v6address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Address();
  }
}
const ::std::string& SLIpAddress::v6address() const {
  // @@protoc_insertion_point(field_get:service_layer.SLIpAddress.V6Address)
  if (has_v6address()) {
    return Address_.v6address_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void SLIpAddress::set_v6address(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:service_layer.SLIpAddress.V6Address)
  if (!has_v6address()) {
    clear_Address();
    set_has_v6address();
    Address_.v6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Address_.v6address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLIpAddress.V6Address)
}
#if LANG_CXX11
void SLIpAddress::set_v6address(::std::string&& value) {
  // @@protoc_insertion_point(field_set:service_layer.SLIpAddress.V6Address)
  if (!has_v6address()) {
    clear_Address();
    set_has_v6address();
    Address_.v6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Address_.v6address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLIpAddress.V6Address)
}
#endif
void SLIpAddress::set_v6address(const char* value) {
  if (!has_v6address()) {
    clear_Address();
    set_has_v6address();
    Address_.v6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Address_.v6address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLIpAddress.V6Address)
}
void SLIpAddress::set_v6address(const void* value, size_t size) {
  if (!has_v6address()) {
    clear_Address();
    set_has_v6address();
    Address_.v6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Address_.v6address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLIpAddress.V6Address)
}
::std::string* SLIpAddress::mutable_v6address() {
  if (!has_v6address()) {
    clear_Address();
    set_has_v6address();
    Address_.v6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLIpAddress.V6Address)
  return Address_.v6address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SLIpAddress::release_v6address() {
  // @@protoc_insertion_point(field_release:service_layer.SLIpAddress.V6Address)
  if (has_v6address()) {
    clear_has_Address();
    return Address_.v6address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void SLIpAddress::set_allocated_v6address(::std::string* v6address) {
  if (!has_v6address()) {
    Address_.v6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Address();
  if (v6address != NULL) {
    set_has_v6address();
    Address_.v6address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        v6address);
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLIpAddress.V6Address)
}

bool SLIpAddress::has_Address() const {
  return Address_case() != ADDRESS_NOT_SET;
}
void SLIpAddress::clear_has_Address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
SLIpAddress::AddressCase SLIpAddress::Address_case() const {
  return SLIpAddress::AddressCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)
