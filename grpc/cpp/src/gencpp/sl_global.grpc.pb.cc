// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_global.proto

#include "sl_global.pb.h"
#include "sl_global.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLGlobal_method_names[] = {
  "/service_layer.SLGlobal/SLGlobalInitNotif",
  "/service_layer.SLGlobal/SLGlobalsGet",
};

std::unique_ptr< SLGlobal::Stub> SLGlobal::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLGlobal::Stub> stub(new SLGlobal::Stub(channel));
  return stub;
}

SLGlobal::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SLGlobalInitNotif_(SLGlobal_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SLGlobalsGet_(SLGlobal_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::service_layer::SLGlobalNotif>* SLGlobal::Stub::SLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::service_layer::SLGlobalNotif>::Create(channel_.get(), rpcmethod_SLGlobalInitNotif_, context, request);
}

void SLGlobal::Stub::experimental_async::SLGlobalInitNotif(::grpc::ClientContext* context, ::service_layer::SLInitMsg* request, ::grpc::experimental::ClientReadReactor< ::service_layer::SLGlobalNotif>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::service_layer::SLGlobalNotif>::Create(stub_->channel_.get(), stub_->rpcmethod_SLGlobalInitNotif_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>* SLGlobal::Stub::AsyncSLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::service_layer::SLGlobalNotif>::Create(channel_.get(), cq, rpcmethod_SLGlobalInitNotif_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>* SLGlobal::Stub::PrepareAsyncSLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::service_layer::SLGlobalNotif>::Create(channel_.get(), cq, rpcmethod_SLGlobalInitNotif_, context, request, false, nullptr);
}

::grpc::Status SLGlobal::Stub::SLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::service_layer::SLGlobalsGetMsgRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SLGlobalsGet_, context, request, response);
}

void SLGlobal::Stub::experimental_async::SLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SLGlobalsGet_, context, request, response, std::move(f));
}

void SLGlobal::Stub::experimental_async::SLGlobalsGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::service_layer::SLGlobalsGetMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SLGlobalsGet_, context, request, response, std::move(f));
}

void SLGlobal::Stub::experimental_async::SLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SLGlobalsGet_, context, request, response, reactor);
}

void SLGlobal::Stub::experimental_async::SLGlobalsGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::service_layer::SLGlobalsGetMsgRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SLGlobalsGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>* SLGlobal::Stub::AsyncSLGlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::service_layer::SLGlobalsGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLGlobalsGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>* SLGlobal::Stub::PrepareAsyncSLGlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::service_layer::SLGlobalsGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLGlobalsGet_, context, request, false);
}

SLGlobal::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLGlobal_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SLGlobal::Service, ::service_layer::SLInitMsg, ::service_layer::SLGlobalNotif>(
          [](SLGlobal::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::service_layer::SLInitMsg* req,
             ::grpc_impl::ServerWriter<::service_layer::SLGlobalNotif>* writer) {
               return service->SLGlobalInitNotif(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLGlobal_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLGlobal::Service, ::service_layer::SLGlobalsGetMsg, ::service_layer::SLGlobalsGetMsgRsp>(
          [](SLGlobal::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::service_layer::SLGlobalsGetMsg* req,
             ::service_layer::SLGlobalsGetMsgRsp* resp) {
               return service->SLGlobalsGet(ctx, req, resp);
             }, this)));
}

SLGlobal::Service::~Service() {
}

::grpc::Status SLGlobal::Service::SLGlobalInitNotif(::grpc::ServerContext* context, const ::service_layer::SLInitMsg* request, ::grpc::ServerWriter< ::service_layer::SLGlobalNotif>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLGlobal::Service::SLGlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

