// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: sl_global.proto
#ifndef GRPC_sl_5fglobal_2eproto__INCLUDED
#define GRPC_sl_5fglobal_2eproto__INCLUDED

#include "sl_global.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace service_layer {

class SLGlobal GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLGlobalNotif>> SLGlobalInitNotif(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLGlobalNotif>>(SLGlobalInitNotifRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLGlobalNotif>> AsyncSLGlobalInitNotif(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLGlobalNotif>>(AsyncSLGlobalInitNotifRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status SLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::service_layer::SLGlobalsGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLGlobalsGetMsgRsp>> AsyncSLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLGlobalsGetMsgRsp>>(AsyncSLGlobalsGetRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::service_layer::SLGlobalNotif>* SLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLGlobalNotif>* AsyncSLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLGlobalsGetMsgRsp>* AsyncSLGlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLGlobalNotif>> SLGlobalInitNotif(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLGlobalNotif>>(SLGlobalInitNotifRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>> AsyncSLGlobalInitNotif(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>>(AsyncSLGlobalInitNotifRaw(context, request, cq, tag));
    }
    ::grpc::Status SLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::service_layer::SLGlobalsGetMsgRsp* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>> AsyncSLGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>>(AsyncSLGlobalsGetRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::service_layer::SLGlobalNotif>* SLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::service_layer::SLGlobalNotif>* AsyncSLGlobalInitNotifRaw(::grpc::ClientContext* context, const ::service_layer::SLInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLGlobalsGetMsgRsp>* AsyncSLGlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SLGlobalInitNotif_;
    const ::grpc::RpcMethod rpcmethod_SLGlobalsGet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SLGlobalInitNotif(::grpc::ServerContext* context, const ::service_layer::SLInitMsg* request, ::grpc::ServerWriter< ::service_layer::SLGlobalNotif>* writer);
    virtual ::grpc::Status SLGlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SLGlobalInitNotif : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service *service) {}
   public:
    WithAsyncMethod_SLGlobalInitNotif() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLGlobalInitNotif() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLGlobalInitNotif(::grpc::ServerContext* context, const ::service_layer::SLInitMsg* request, ::grpc::ServerWriter< ::service_layer::SLGlobalNotif>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLGlobalInitNotif(::grpc::ServerContext* context, ::service_layer::SLInitMsg* request, ::grpc::ServerAsyncWriter< ::service_layer::SLGlobalNotif>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLGlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service *service) {}
   public:
    WithAsyncMethod_SLGlobalsGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLGlobalsGet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLGlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLGlobalsGet(::grpc::ServerContext* context, ::service_layer::SLGlobalsGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLGlobalsGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLGlobalInitNotif<WithAsyncMethod_SLGlobalsGet<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SLGlobalInitNotif : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service *service) {}
   public:
    WithGenericMethod_SLGlobalInitNotif() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLGlobalInitNotif() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLGlobalInitNotif(::grpc::ServerContext* context, const ::service_layer::SLInitMsg* request, ::grpc::ServerWriter< ::service_layer::SLGlobalNotif>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLGlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(Service *service) {}
   public:
    WithGenericMethod_SLGlobalsGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLGlobalsGet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLGlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLGlobalsGetMsg* request, ::service_layer::SLGlobalsGetMsgRsp* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace service_layer


#endif  // GRPC_sl_5fglobal_2eproto__INCLUDED
