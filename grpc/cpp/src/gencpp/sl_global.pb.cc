// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_global.proto

#include "sl_global.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLInitMsg::SLInitMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : majorver_(0u)
  , minorver_(0u)
  , subver_(0u){}
struct SLInitMsgDefaultTypeInternal {
  constexpr SLInitMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInitMsgDefaultTypeInternal() {}
  union {
    SLInitMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInitMsgDefaultTypeInternal _SLInitMsg_default_instance_;
constexpr SLInitMsgRsp::SLInitMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : majorver_(0u)
  , minorver_(0u)
  , subver_(0u){}
struct SLInitMsgRspDefaultTypeInternal {
  constexpr SLInitMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInitMsgRspDefaultTypeInternal() {}
  union {
    SLInitMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInitMsgRspDefaultTypeInternal _SLInitMsgRsp_default_instance_;
constexpr SLVrfRouteReplayErrorNotif::SLVrfRouteReplayErrorNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLVrfRouteReplayErrorNotifDefaultTypeInternal {
  constexpr SLVrfRouteReplayErrorNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLVrfRouteReplayErrorNotifDefaultTypeInternal() {}
  union {
    SLVrfRouteReplayErrorNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLVrfRouteReplayErrorNotifDefaultTypeInternal _SLVrfRouteReplayErrorNotif_default_instance_;
constexpr SLGlobalNotif::SLGlobalNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , eventtype_(0)

  , _oneof_case_{}{}
struct SLGlobalNotifDefaultTypeInternal {
  constexpr SLGlobalNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLGlobalNotifDefaultTypeInternal() {}
  union {
    SLGlobalNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLGlobalNotifDefaultTypeInternal _SLGlobalNotif_default_instance_;
constexpr SLGlobalsGetMsg::SLGlobalsGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLGlobalsGetMsgDefaultTypeInternal {
  constexpr SLGlobalsGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLGlobalsGetMsgDefaultTypeInternal() {}
  union {
    SLGlobalsGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLGlobalsGetMsgDefaultTypeInternal _SLGlobalsGetMsg_default_instance_;
constexpr SLGlobalsGetMsgRsp::SLGlobalsGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , maxvrfnamelength_(0u)
  , maxinterfacenamelength_(0u)
  , maxpathsperentry_(0u)
  , maxprimarypathperentry_(0u)
  , maxbackuppathperentry_(0u)
  , maxmplslabelsperpath_(0u)
  , minprimarypathidnum_(0u)
  , maxprimarypathidnum_(0u)
  , minbackuppathidnum_(0u)
  , maxbackuppathidnum_(0u)
  , maxremoteaddressnum_(0u)
  , maxl2bdnamelength_(0u)
  , maxl2pmsitunnelidlength_(0u)
  , maxlabelblockclientnamelength_(0u){}
struct SLGlobalsGetMsgRspDefaultTypeInternal {
  constexpr SLGlobalsGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLGlobalsGetMsgRspDefaultTypeInternal() {}
  union {
    SLGlobalsGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLGlobalsGetMsgRspDefaultTypeInternal _SLGlobalsGetMsgRsp_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fglobal_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fglobal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fglobal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sl_5fglobal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsg, majorver_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsg, minorver_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsg, subver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsgRsp, majorver_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsgRsp, minorver_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInitMsgRsp, subver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRouteReplayErrorNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRouteReplayErrorNotif, vrfname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalNotif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalNotif, eventtype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalNotif, errstatus_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalNotif, Event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxvrfnamelength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxinterfacenamelength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxpathsperentry_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxprimarypathperentry_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxbackuppathperentry_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxmplslabelsperpath_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, minprimarypathidnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxprimarypathidnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, minbackuppathidnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxbackuppathidnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxremoteaddressnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxl2bdnamelength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxl2pmsitunnelidlength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLGlobalsGetMsgRsp, maxlabelblockclientnamelength_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service_layer::SLInitMsg)},
  { 8, -1, sizeof(::service_layer::SLInitMsgRsp)},
  { 16, -1, sizeof(::service_layer::SLVrfRouteReplayErrorNotif)},
  { 22, -1, sizeof(::service_layer::SLGlobalNotif)},
  { 32, -1, sizeof(::service_layer::SLGlobalsGetMsg)},
  { 37, -1, sizeof(::service_layer::SLGlobalsGetMsgRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInitMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInitMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfRouteReplayErrorNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLGlobalNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLGlobalsGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLGlobalsGetMsgRsp_default_instance_),
};

const char descriptor_table_protodef_sl_5fglobal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017sl_global.proto\022\rservice_layer\032\025sl_com"
  "mon_types.proto\"\?\n\tSLInitMsg\022\020\n\010MajorVer"
  "\030\001 \001(\r\022\020\n\010MinorVer\030\002 \001(\r\022\016\n\006SubVer\030\003 \001(\r"
  "\"B\n\014SLInitMsgRsp\022\020\n\010MajorVer\030\001 \001(\r\022\020\n\010Mi"
  "norVer\030\002 \001(\r\022\016\n\006SubVer\030\003 \001(\r\"-\n\032SLVrfRou"
  "teReplayErrorNotif\022\017\n\007VrfName\030\001 \001(\t\"\373\001\n\r"
  "SLGlobalNotif\0223\n\tEventType\030\001 \001(\0162 .servi"
  "ce_layer.SLGlobalNotifType\022/\n\tErrStatus\030"
  "\002 \001(\0132\034.service_layer.SLErrorStatus\0221\n\nI"
  "nitRspMsg\030\003 \001(\0132\033.service_layer.SLInitMs"
  "gRspH\000\022H\n\023VrfReplayErrorNotif\030\004 \001(\0132).se"
  "rvice_layer.SLVrfRouteReplayErrorNotifH\000"
  "B\007\n\005Event\"\021\n\017SLGlobalsGetMsg\"\350\003\n\022SLGloba"
  "lsGetMsgRsp\022/\n\tErrStatus\030\001 \001(\0132\034.service"
  "_layer.SLErrorStatus\022\030\n\020MaxVrfNameLength"
  "\030\002 \001(\r\022\036\n\026MaxInterfaceNameLength\030\003 \001(\r\022\030"
  "\n\020MaxPathsPerEntry\030\004 \001(\r\022\036\n\026MaxPrimaryPa"
  "thPerEntry\030\005 \001(\r\022\035\n\025MaxBackupPathPerEntr"
  "y\030\006 \001(\r\022\034\n\024MaxMplsLabelsPerPath\030\007 \001(\r\022\033\n"
  "\023MinPrimaryPathIdNum\030\010 \001(\r\022\033\n\023MaxPrimary"
  "PathIdNum\030\t \001(\r\022\032\n\022MinBackupPathIdNum\030\n "
  "\001(\r\022\032\n\022MaxBackupPathIdNum\030\013 \001(\r\022\033\n\023MaxRe"
  "moteAddressNum\030\014 \001(\r\022\031\n\021MaxL2BdNameLengt"
  "h\030\r \001(\r\022\037\n\027MaxL2PmsiTunnelIdLength\030\016 \001(\r"
  "\022%\n\035MaxLabelBlockClientNameLength\030\017 \001(\r*"
  "\234\001\n\021SLGlobalNotifType\022!\n\035SL_GLOBAL_EVENT"
  "_TYPE_RESERVED\020\000\022\036\n\032SL_GLOBAL_EVENT_TYPE"
  "_ERROR\020\001\022\"\n\036SL_GLOBAL_EVENT_TYPE_HEARTBE"
  "AT\020\002\022 \n\034SL_GLOBAL_EVENT_TYPE_VERSION\020\0032\254"
  "\001\n\010SLGlobal\022M\n\021SLGlobalInitNotif\022\030.servi"
  "ce_layer.SLInitMsg\032\034.service_layer.SLGlo"
  "balNotif0\001\022Q\n\014SLGlobalsGet\022\036.service_lay"
  "er.SLGlobalsGetMsg\032!.service_layer.SLGlo"
  "balsGetMsgRspBCZAgithub.com/Cisco-servic"
  "e-layer/service-layer-objmodel/grpc/prot"
  "osb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fglobal_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fglobal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fglobal_2eproto = {
  false, false, 1410, descriptor_table_protodef_sl_5fglobal_2eproto, "sl_global.proto", 
  &descriptor_table_sl_5fglobal_2eproto_once, descriptor_table_sl_5fglobal_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_sl_5fglobal_2eproto::offsets,
  file_level_metadata_sl_5fglobal_2eproto, file_level_enum_descriptors_sl_5fglobal_2eproto, file_level_service_descriptors_sl_5fglobal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_sl_5fglobal_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fglobal_2eproto);
  return descriptor_table_sl_5fglobal_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fglobal_2eproto(&descriptor_table_sl_5fglobal_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLGlobalNotifType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fglobal_2eproto);
  return file_level_enum_descriptors_sl_5fglobal_2eproto[0];
}
bool SLGlobalNotifType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLInitMsg::_Internal {
 public:
};

SLInitMsg::SLInitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInitMsg)
}
SLInitMsg::SLInitMsg(const SLInitMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&majorver_, &from.majorver_,
    static_cast<size_t>(reinterpret_cast<char*>(&subver_) -
    reinterpret_cast<char*>(&majorver_)) + sizeof(subver_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInitMsg)
}

void SLInitMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&majorver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subver_) -
    reinterpret_cast<char*>(&majorver_)) + sizeof(subver_));
}

SLInitMsg::~SLInitMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInitMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLInitMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLInitMsg::ArenaDtor(void* object) {
  SLInitMsg* _this = reinterpret_cast< SLInitMsg* >(object);
  (void)_this;
}
void SLInitMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInitMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInitMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&majorver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subver_) -
      reinterpret_cast<char*>(&majorver_)) + sizeof(subver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInitMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 MajorVer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          majorver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinorVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minorver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SubVer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLInitMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInitMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MajorVer = 1;
  if (this->majorver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_majorver(), target);
  }

  // uint32 MinorVer = 2;
  if (this->minorver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minorver(), target);
  }

  // uint32 SubVer = 3;
  if (this->subver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_subver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInitMsg)
  return target;
}

size_t SLInitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInitMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 MajorVer = 1;
  if (this->majorver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_majorver());
  }

  // uint32 MinorVer = 2;
  if (this->minorver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minorver());
  }

  // uint32 SubVer = 3;
  if (this->subver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLInitMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLInitMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLInitMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLInitMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLInitMsg)
    MergeFrom(*source);
  }
}

void SLInitMsg::MergeFrom(const SLInitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.majorver() != 0) {
    _internal_set_majorver(from._internal_majorver());
  }
  if (from.minorver() != 0) {
    _internal_set_minorver(from._internal_minorver());
  }
  if (from.subver() != 0) {
    _internal_set_subver(from._internal_subver());
  }
}

void SLInitMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInitMsg::CopyFrom(const SLInitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInitMsg::IsInitialized() const {
  return true;
}

void SLInitMsg::InternalSwap(SLInitMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInitMsg, subver_)
      + sizeof(SLInitMsg::subver_)
      - PROTOBUF_FIELD_OFFSET(SLInitMsg, majorver_)>(
          reinterpret_cast<char*>(&majorver_),
          reinterpret_cast<char*>(&other->majorver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInitMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLInitMsgRsp::_Internal {
 public:
};

SLInitMsgRsp::SLInitMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInitMsgRsp)
}
SLInitMsgRsp::SLInitMsgRsp(const SLInitMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&majorver_, &from.majorver_,
    static_cast<size_t>(reinterpret_cast<char*>(&subver_) -
    reinterpret_cast<char*>(&majorver_)) + sizeof(subver_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInitMsgRsp)
}

void SLInitMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&majorver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subver_) -
    reinterpret_cast<char*>(&majorver_)) + sizeof(subver_));
}

SLInitMsgRsp::~SLInitMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInitMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLInitMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLInitMsgRsp::ArenaDtor(void* object) {
  SLInitMsgRsp* _this = reinterpret_cast< SLInitMsgRsp* >(object);
  (void)_this;
}
void SLInitMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInitMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInitMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInitMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&majorver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subver_) -
      reinterpret_cast<char*>(&majorver_)) + sizeof(subver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInitMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 MajorVer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          majorver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinorVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minorver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SubVer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLInitMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInitMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MajorVer = 1;
  if (this->majorver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_majorver(), target);
  }

  // uint32 MinorVer = 2;
  if (this->minorver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minorver(), target);
  }

  // uint32 SubVer = 3;
  if (this->subver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_subver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInitMsgRsp)
  return target;
}

size_t SLInitMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInitMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 MajorVer = 1;
  if (this->majorver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_majorver());
  }

  // uint32 MinorVer = 2;
  if (this->minorver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minorver());
  }

  // uint32 SubVer = 3;
  if (this->subver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLInitMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLInitMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLInitMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLInitMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLInitMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLInitMsgRsp)
    MergeFrom(*source);
  }
}

void SLInitMsgRsp::MergeFrom(const SLInitMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInitMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.majorver() != 0) {
    _internal_set_majorver(from._internal_majorver());
  }
  if (from.minorver() != 0) {
    _internal_set_minorver(from._internal_minorver());
  }
  if (from.subver() != 0) {
    _internal_set_subver(from._internal_subver());
  }
}

void SLInitMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLInitMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInitMsgRsp::CopyFrom(const SLInitMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInitMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInitMsgRsp::IsInitialized() const {
  return true;
}

void SLInitMsgRsp::InternalSwap(SLInitMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInitMsgRsp, subver_)
      + sizeof(SLInitMsgRsp::subver_)
      - PROTOBUF_FIELD_OFFSET(SLInitMsgRsp, majorver_)>(
          reinterpret_cast<char*>(&majorver_),
          reinterpret_cast<char*>(&other->majorver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInitMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLVrfRouteReplayErrorNotif::_Internal {
 public:
};

SLVrfRouteReplayErrorNotif::SLVrfRouteReplayErrorNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfRouteReplayErrorNotif)
}
SLVrfRouteReplayErrorNotif::SLVrfRouteReplayErrorNotif(const SLVrfRouteReplayErrorNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfRouteReplayErrorNotif)
}

void SLVrfRouteReplayErrorNotif::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLVrfRouteReplayErrorNotif::~SLVrfRouteReplayErrorNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfRouteReplayErrorNotif)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfRouteReplayErrorNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLVrfRouteReplayErrorNotif::ArenaDtor(void* object) {
  SLVrfRouteReplayErrorNotif* _this = reinterpret_cast< SLVrfRouteReplayErrorNotif* >(object);
  (void)_this;
}
void SLVrfRouteReplayErrorNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfRouteReplayErrorNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLVrfRouteReplayErrorNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfRouteReplayErrorNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfRouteReplayErrorNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLVrfRouteReplayErrorNotif.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfRouteReplayErrorNotif::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfRouteReplayErrorNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLVrfRouteReplayErrorNotif.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfRouteReplayErrorNotif)
  return target;
}

size_t SLVrfRouteReplayErrorNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfRouteReplayErrorNotif)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfRouteReplayErrorNotif::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfRouteReplayErrorNotif)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfRouteReplayErrorNotif* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfRouteReplayErrorNotif>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfRouteReplayErrorNotif)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfRouteReplayErrorNotif)
    MergeFrom(*source);
  }
}

void SLVrfRouteReplayErrorNotif::MergeFrom(const SLVrfRouteReplayErrorNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfRouteReplayErrorNotif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
}

void SLVrfRouteReplayErrorNotif::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfRouteReplayErrorNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfRouteReplayErrorNotif::CopyFrom(const SLVrfRouteReplayErrorNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfRouteReplayErrorNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfRouteReplayErrorNotif::IsInitialized() const {
  return true;
}

void SLVrfRouteReplayErrorNotif::InternalSwap(SLVrfRouteReplayErrorNotif* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfRouteReplayErrorNotif::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLGlobalNotif::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLGlobalNotif* msg);
  static const ::service_layer::SLInitMsgRsp& initrspmsg(const SLGlobalNotif* msg);
  static const ::service_layer::SLVrfRouteReplayErrorNotif& vrfreplayerrornotif(const SLGlobalNotif* msg);
};

const ::service_layer::SLErrorStatus&
SLGlobalNotif::_Internal::errstatus(const SLGlobalNotif* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLInitMsgRsp&
SLGlobalNotif::_Internal::initrspmsg(const SLGlobalNotif* msg) {
  return *msg->Event_.initrspmsg_;
}
const ::service_layer::SLVrfRouteReplayErrorNotif&
SLGlobalNotif::_Internal::vrfreplayerrornotif(const SLGlobalNotif* msg) {
  return *msg->Event_.vrfreplayerrornotif_;
}
void SLGlobalNotif::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
void SLGlobalNotif::set_allocated_initrspmsg(::service_layer::SLInitMsgRsp* initrspmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (initrspmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initrspmsg);
    if (message_arena != submessage_arena) {
      initrspmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initrspmsg, submessage_arena);
    }
    set_has_initrspmsg();
    Event_.initrspmsg_ = initrspmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLGlobalNotif.InitRspMsg)
}
void SLGlobalNotif::set_allocated_vrfreplayerrornotif(::service_layer::SLVrfRouteReplayErrorNotif* vrfreplayerrornotif) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (vrfreplayerrornotif) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vrfreplayerrornotif);
    if (message_arena != submessage_arena) {
      vrfreplayerrornotif = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfreplayerrornotif, submessage_arena);
    }
    set_has_vrfreplayerrornotif();
    Event_.vrfreplayerrornotif_ = vrfreplayerrornotif;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLGlobalNotif.VrfReplayErrorNotif)
}
SLGlobalNotif::SLGlobalNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLGlobalNotif)
}
SLGlobalNotif::SLGlobalNotif(const SLGlobalNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eventtype_ = from.eventtype_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kInitRspMsg: {
      _internal_mutable_initrspmsg()->::service_layer::SLInitMsgRsp::MergeFrom(from._internal_initrspmsg());
      break;
    }
    case kVrfReplayErrorNotif: {
      _internal_mutable_vrfreplayerrornotif()->::service_layer::SLVrfRouteReplayErrorNotif::MergeFrom(from._internal_vrfreplayerrornotif());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLGlobalNotif)
}

void SLGlobalNotif::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eventtype_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(eventtype_));
clear_has_Event();
}

SLGlobalNotif::~SLGlobalNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLGlobalNotif)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLGlobalNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (has_Event()) {
    clear_Event();
  }
}

void SLGlobalNotif::ArenaDtor(void* object) {
  SLGlobalNotif* _this = reinterpret_cast< SLGlobalNotif* >(object);
  (void)_this;
}
void SLGlobalNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLGlobalNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLGlobalNotif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLGlobalNotif)
  switch (Event_case()) {
    case kInitRspMsg: {
      if (GetArena() == nullptr) {
        delete Event_.initrspmsg_;
      }
      break;
    }
    case kVrfReplayErrorNotif: {
      if (GetArena() == nullptr) {
        delete Event_.vrfreplayerrornotif_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLGlobalNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLGlobalNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eventtype_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLGlobalNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLGlobalNotifType EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::service_layer::SLGlobalNotifType>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLInitMsgRsp InitRspMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_initrspmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLVrfRouteReplayErrorNotif VrfReplayErrorNotif = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfreplayerrornotif(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLGlobalNotif::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLGlobalNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLGlobalNotifType EventType = 1;
  if (this->eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventtype(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLInitMsgRsp InitRspMsg = 3;
  if (_internal_has_initrspmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::initrspmsg(this), target, stream);
  }

  // .service_layer.SLVrfRouteReplayErrorNotif VrfReplayErrorNotif = 4;
  if (_internal_has_vrfreplayerrornotif()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vrfreplayerrornotif(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLGlobalNotif)
  return target;
}

size_t SLGlobalNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLGlobalNotif)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLGlobalNotifType EventType = 1;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  switch (Event_case()) {
    // .service_layer.SLInitMsgRsp InitRspMsg = 3;
    case kInitRspMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.initrspmsg_);
      break;
    }
    // .service_layer.SLVrfRouteReplayErrorNotif VrfReplayErrorNotif = 4;
    case kVrfReplayErrorNotif: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.vrfreplayerrornotif_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLGlobalNotif::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLGlobalNotif)
  GOOGLE_DCHECK_NE(&from, this);
  const SLGlobalNotif* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLGlobalNotif>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLGlobalNotif)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLGlobalNotif)
    MergeFrom(*source);
  }
}

void SLGlobalNotif::MergeFrom(const SLGlobalNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLGlobalNotif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  switch (from.Event_case()) {
    case kInitRspMsg: {
      _internal_mutable_initrspmsg()->::service_layer::SLInitMsgRsp::MergeFrom(from._internal_initrspmsg());
      break;
    }
    case kVrfReplayErrorNotif: {
      _internal_mutable_vrfreplayerrornotif()->::service_layer::SLVrfRouteReplayErrorNotif::MergeFrom(from._internal_vrfreplayerrornotif());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void SLGlobalNotif::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLGlobalNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLGlobalNotif::CopyFrom(const SLGlobalNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLGlobalNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLGlobalNotif::IsInitialized() const {
  return true;
}

void SLGlobalNotif::InternalSwap(SLGlobalNotif* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLGlobalNotif, eventtype_)
      + sizeof(SLGlobalNotif::eventtype_)
      - PROTOBUF_FIELD_OFFSET(SLGlobalNotif, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLGlobalNotif::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLGlobalsGetMsg::_Internal {
 public:
};

SLGlobalsGetMsg::SLGlobalsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLGlobalsGetMsg)
}
SLGlobalsGetMsg::SLGlobalsGetMsg(const SLGlobalsGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLGlobalsGetMsg)
}

void SLGlobalsGetMsg::SharedCtor() {
}

SLGlobalsGetMsg::~SLGlobalsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLGlobalsGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLGlobalsGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLGlobalsGetMsg::ArenaDtor(void* object) {
  SLGlobalsGetMsg* _this = reinterpret_cast< SLGlobalsGetMsg* >(object);
  (void)_this;
}
void SLGlobalsGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLGlobalsGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLGlobalsGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLGlobalsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLGlobalsGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLGlobalsGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLGlobalsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLGlobalsGetMsg)
  return target;
}

size_t SLGlobalsGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLGlobalsGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLGlobalsGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLGlobalsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLGlobalsGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLGlobalsGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLGlobalsGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLGlobalsGetMsg)
    MergeFrom(*source);
  }
}

void SLGlobalsGetMsg::MergeFrom(const SLGlobalsGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLGlobalsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLGlobalsGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLGlobalsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLGlobalsGetMsg::CopyFrom(const SLGlobalsGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLGlobalsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLGlobalsGetMsg::IsInitialized() const {
  return true;
}

void SLGlobalsGetMsg::InternalSwap(SLGlobalsGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLGlobalsGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLGlobalsGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLGlobalsGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLGlobalsGetMsgRsp::_Internal::errstatus(const SLGlobalsGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLGlobalsGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLGlobalsGetMsgRsp::SLGlobalsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLGlobalsGetMsgRsp)
}
SLGlobalsGetMsgRsp::SLGlobalsGetMsgRsp(const SLGlobalsGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&maxvrfnamelength_, &from.maxvrfnamelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlabelblockclientnamelength_) -
    reinterpret_cast<char*>(&maxvrfnamelength_)) + sizeof(maxlabelblockclientnamelength_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLGlobalsGetMsgRsp)
}

void SLGlobalsGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxlabelblockclientnamelength_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(maxlabelblockclientnamelength_));
}

SLGlobalsGetMsgRsp::~SLGlobalsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLGlobalsGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLGlobalsGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLGlobalsGetMsgRsp::ArenaDtor(void* object) {
  SLGlobalsGetMsgRsp* _this = reinterpret_cast< SLGlobalsGetMsgRsp* >(object);
  (void)_this;
}
void SLGlobalsGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLGlobalsGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLGlobalsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLGlobalsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&maxvrfnamelength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlabelblockclientnamelength_) -
      reinterpret_cast<char*>(&maxvrfnamelength_)) + sizeof(maxlabelblockclientnamelength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLGlobalsGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxVrfNameLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxvrfnamelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxInterfaceNameLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxinterfacenamelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxPathsPerEntry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxpathsperentry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxPrimaryPathPerEntry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxprimarypathperentry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxBackupPathPerEntry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxbackuppathperentry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxMplsLabelsPerPath = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxmplslabelsperpath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinPrimaryPathIdNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          minprimarypathidnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxPrimaryPathIdNum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          maxprimarypathidnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinBackupPathIdNum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          minbackuppathidnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxBackupPathIdNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          maxbackuppathidnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxRemoteAddressNum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          maxremoteaddressnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxL2BdNameLength = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          maxl2bdnamelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxL2PmsiTunnelIdLength = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          maxl2pmsitunnelidlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxLabelBlockClientNameLength = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          maxlabelblockclientnamelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLGlobalsGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLGlobalsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxVrfNameLength = 2;
  if (this->maxvrfnamelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxvrfnamelength(), target);
  }

  // uint32 MaxInterfaceNameLength = 3;
  if (this->maxinterfacenamelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxinterfacenamelength(), target);
  }

  // uint32 MaxPathsPerEntry = 4;
  if (this->maxpathsperentry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxpathsperentry(), target);
  }

  // uint32 MaxPrimaryPathPerEntry = 5;
  if (this->maxprimarypathperentry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxprimarypathperentry(), target);
  }

  // uint32 MaxBackupPathPerEntry = 6;
  if (this->maxbackuppathperentry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxbackuppathperentry(), target);
  }

  // uint32 MaxMplsLabelsPerPath = 7;
  if (this->maxmplslabelsperpath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_maxmplslabelsperpath(), target);
  }

  // uint32 MinPrimaryPathIdNum = 8;
  if (this->minprimarypathidnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_minprimarypathidnum(), target);
  }

  // uint32 MaxPrimaryPathIdNum = 9;
  if (this->maxprimarypathidnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_maxprimarypathidnum(), target);
  }

  // uint32 MinBackupPathIdNum = 10;
  if (this->minbackuppathidnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_minbackuppathidnum(), target);
  }

  // uint32 MaxBackupPathIdNum = 11;
  if (this->maxbackuppathidnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_maxbackuppathidnum(), target);
  }

  // uint32 MaxRemoteAddressNum = 12;
  if (this->maxremoteaddressnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_maxremoteaddressnum(), target);
  }

  // uint32 MaxL2BdNameLength = 13;
  if (this->maxl2bdnamelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_maxl2bdnamelength(), target);
  }

  // uint32 MaxL2PmsiTunnelIdLength = 14;
  if (this->maxl2pmsitunnelidlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_maxl2pmsitunnelidlength(), target);
  }

  // uint32 MaxLabelBlockClientNameLength = 15;
  if (this->maxlabelblockclientnamelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_maxlabelblockclientnamelength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLGlobalsGetMsgRsp)
  return target;
}

size_t SLGlobalsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLGlobalsGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxVrfNameLength = 2;
  if (this->maxvrfnamelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxvrfnamelength());
  }

  // uint32 MaxInterfaceNameLength = 3;
  if (this->maxinterfacenamelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxinterfacenamelength());
  }

  // uint32 MaxPathsPerEntry = 4;
  if (this->maxpathsperentry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxpathsperentry());
  }

  // uint32 MaxPrimaryPathPerEntry = 5;
  if (this->maxprimarypathperentry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxprimarypathperentry());
  }

  // uint32 MaxBackupPathPerEntry = 6;
  if (this->maxbackuppathperentry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbackuppathperentry());
  }

  // uint32 MaxMplsLabelsPerPath = 7;
  if (this->maxmplslabelsperpath() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxmplslabelsperpath());
  }

  // uint32 MinPrimaryPathIdNum = 8;
  if (this->minprimarypathidnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minprimarypathidnum());
  }

  // uint32 MaxPrimaryPathIdNum = 9;
  if (this->maxprimarypathidnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxprimarypathidnum());
  }

  // uint32 MinBackupPathIdNum = 10;
  if (this->minbackuppathidnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minbackuppathidnum());
  }

  // uint32 MaxBackupPathIdNum = 11;
  if (this->maxbackuppathidnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbackuppathidnum());
  }

  // uint32 MaxRemoteAddressNum = 12;
  if (this->maxremoteaddressnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxremoteaddressnum());
  }

  // uint32 MaxL2BdNameLength = 13;
  if (this->maxl2bdnamelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxl2bdnamelength());
  }

  // uint32 MaxL2PmsiTunnelIdLength = 14;
  if (this->maxl2pmsitunnelidlength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxl2pmsitunnelidlength());
  }

  // uint32 MaxLabelBlockClientNameLength = 15;
  if (this->maxlabelblockclientnamelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxlabelblockclientnamelength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLGlobalsGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLGlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLGlobalsGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLGlobalsGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLGlobalsGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLGlobalsGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLGlobalsGetMsgRsp::MergeFrom(const SLGlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLGlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.maxvrfnamelength() != 0) {
    _internal_set_maxvrfnamelength(from._internal_maxvrfnamelength());
  }
  if (from.maxinterfacenamelength() != 0) {
    _internal_set_maxinterfacenamelength(from._internal_maxinterfacenamelength());
  }
  if (from.maxpathsperentry() != 0) {
    _internal_set_maxpathsperentry(from._internal_maxpathsperentry());
  }
  if (from.maxprimarypathperentry() != 0) {
    _internal_set_maxprimarypathperentry(from._internal_maxprimarypathperentry());
  }
  if (from.maxbackuppathperentry() != 0) {
    _internal_set_maxbackuppathperentry(from._internal_maxbackuppathperentry());
  }
  if (from.maxmplslabelsperpath() != 0) {
    _internal_set_maxmplslabelsperpath(from._internal_maxmplslabelsperpath());
  }
  if (from.minprimarypathidnum() != 0) {
    _internal_set_minprimarypathidnum(from._internal_minprimarypathidnum());
  }
  if (from.maxprimarypathidnum() != 0) {
    _internal_set_maxprimarypathidnum(from._internal_maxprimarypathidnum());
  }
  if (from.minbackuppathidnum() != 0) {
    _internal_set_minbackuppathidnum(from._internal_minbackuppathidnum());
  }
  if (from.maxbackuppathidnum() != 0) {
    _internal_set_maxbackuppathidnum(from._internal_maxbackuppathidnum());
  }
  if (from.maxremoteaddressnum() != 0) {
    _internal_set_maxremoteaddressnum(from._internal_maxremoteaddressnum());
  }
  if (from.maxl2bdnamelength() != 0) {
    _internal_set_maxl2bdnamelength(from._internal_maxl2bdnamelength());
  }
  if (from.maxl2pmsitunnelidlength() != 0) {
    _internal_set_maxl2pmsitunnelidlength(from._internal_maxl2pmsitunnelidlength());
  }
  if (from.maxlabelblockclientnamelength() != 0) {
    _internal_set_maxlabelblockclientnamelength(from._internal_maxlabelblockclientnamelength());
  }
}

void SLGlobalsGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLGlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLGlobalsGetMsgRsp::CopyFrom(const SLGlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLGlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLGlobalsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLGlobalsGetMsgRsp::InternalSwap(SLGlobalsGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLGlobalsGetMsgRsp, maxlabelblockclientnamelength_)
      + sizeof(SLGlobalsGetMsgRsp::maxlabelblockclientnamelength_)
      - PROTOBUF_FIELD_OFFSET(SLGlobalsGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLGlobalsGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLInitMsg* Arena::CreateMaybeMessage< ::service_layer::SLInitMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInitMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInitMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLInitMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInitMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfRouteReplayErrorNotif* Arena::CreateMaybeMessage< ::service_layer::SLVrfRouteReplayErrorNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfRouteReplayErrorNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLGlobalNotif* Arena::CreateMaybeMessage< ::service_layer::SLGlobalNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLGlobalNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLGlobalsGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLGlobalsGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLGlobalsGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLGlobalsGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLGlobalsGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLGlobalsGetMsgRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
