// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_global.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fglobal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fglobal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fglobal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fglobal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fglobal_2eproto;
namespace service_layer {
class SLGlobalNotif;
class SLGlobalNotifDefaultTypeInternal;
extern SLGlobalNotifDefaultTypeInternal _SLGlobalNotif_default_instance_;
class SLGlobalsGetMsg;
class SLGlobalsGetMsgDefaultTypeInternal;
extern SLGlobalsGetMsgDefaultTypeInternal _SLGlobalsGetMsg_default_instance_;
class SLGlobalsGetMsgRsp;
class SLGlobalsGetMsgRspDefaultTypeInternal;
extern SLGlobalsGetMsgRspDefaultTypeInternal _SLGlobalsGetMsgRsp_default_instance_;
class SLInitMsg;
class SLInitMsgDefaultTypeInternal;
extern SLInitMsgDefaultTypeInternal _SLInitMsg_default_instance_;
class SLInitMsgRsp;
class SLInitMsgRspDefaultTypeInternal;
extern SLInitMsgRspDefaultTypeInternal _SLInitMsgRsp_default_instance_;
class SLVrfRouteReplayErrorNotif;
class SLVrfRouteReplayErrorNotifDefaultTypeInternal;
extern SLVrfRouteReplayErrorNotifDefaultTypeInternal _SLVrfRouteReplayErrorNotif_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLGlobalNotif* Arena::CreateMaybeMessage<::service_layer::SLGlobalNotif>(Arena*);
template<> ::service_layer::SLGlobalsGetMsg* Arena::CreateMaybeMessage<::service_layer::SLGlobalsGetMsg>(Arena*);
template<> ::service_layer::SLGlobalsGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLGlobalsGetMsgRsp>(Arena*);
template<> ::service_layer::SLInitMsg* Arena::CreateMaybeMessage<::service_layer::SLInitMsg>(Arena*);
template<> ::service_layer::SLInitMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLInitMsgRsp>(Arena*);
template<> ::service_layer::SLVrfRouteReplayErrorNotif* Arena::CreateMaybeMessage<::service_layer::SLVrfRouteReplayErrorNotif>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLGlobalNotifType : int {
  SL_GLOBAL_EVENT_TYPE_RESERVED = 0,
  SL_GLOBAL_EVENT_TYPE_ERROR = 1,
  SL_GLOBAL_EVENT_TYPE_HEARTBEAT = 2,
  SL_GLOBAL_EVENT_TYPE_VERSION = 3,
  SLGlobalNotifType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SLGlobalNotifType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SLGlobalNotifType_IsValid(int value);
constexpr SLGlobalNotifType SLGlobalNotifType_MIN = SL_GLOBAL_EVENT_TYPE_RESERVED;
constexpr SLGlobalNotifType SLGlobalNotifType_MAX = SL_GLOBAL_EVENT_TYPE_VERSION;
constexpr int SLGlobalNotifType_ARRAYSIZE = SLGlobalNotifType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLGlobalNotifType_descriptor();
template<typename T>
inline const std::string& SLGlobalNotifType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLGlobalNotifType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLGlobalNotifType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLGlobalNotifType_descriptor(), enum_t_value);
}
inline bool SLGlobalNotifType_Parse(
    const std::string& name, SLGlobalNotifType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLGlobalNotifType>(
    SLGlobalNotifType_descriptor(), name, value);
}
// ===================================================================

class SLInitMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInitMsg) */ {
 public:
  inline SLInitMsg() : SLInitMsg(nullptr) {};
  virtual ~SLInitMsg();

  SLInitMsg(const SLInitMsg& from);
  SLInitMsg(SLInitMsg&& from) noexcept
    : SLInitMsg() {
    *this = ::std::move(from);
  }

  inline SLInitMsg& operator=(const SLInitMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLInitMsg& operator=(SLInitMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLInitMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInitMsg* internal_default_instance() {
    return reinterpret_cast<const SLInitMsg*>(
               &_SLInitMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLInitMsg& a, SLInitMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLInitMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLInitMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLInitMsg* New() const final {
    return CreateMaybeMessage<SLInitMsg>(nullptr);
  }

  SLInitMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLInitMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLInitMsg& from);
  void MergeFrom(const SLInitMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLInitMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLInitMsg";
  }
  protected:
  explicit SLInitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fglobal_2eproto);
    return ::descriptor_table_sl_5fglobal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorVerFieldNumber = 1,
    kMinorVerFieldNumber = 2,
    kSubVerFieldNumber = 3,
  };
  // uint32 MajorVer = 1;
  void clear_majorver();
  ::PROTOBUF_NAMESPACE_ID::uint32 majorver() const;
  void set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_majorver() const;
  void _internal_set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinorVer = 2;
  void clear_minorver();
  ::PROTOBUF_NAMESPACE_ID::uint32 minorver() const;
  void set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minorver() const;
  void _internal_set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SubVer = 3;
  void clear_subver();
  ::PROTOBUF_NAMESPACE_ID::uint32 subver() const;
  void set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subver() const;
  void _internal_set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLInitMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 majorver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minorver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class SLInitMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLInitMsgRsp) */ {
 public:
  inline SLInitMsgRsp() : SLInitMsgRsp(nullptr) {};
  virtual ~SLInitMsgRsp();

  SLInitMsgRsp(const SLInitMsgRsp& from);
  SLInitMsgRsp(SLInitMsgRsp&& from) noexcept
    : SLInitMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLInitMsgRsp& operator=(const SLInitMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLInitMsgRsp& operator=(SLInitMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLInitMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInitMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLInitMsgRsp*>(
               &_SLInitMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLInitMsgRsp& a, SLInitMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLInitMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLInitMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLInitMsgRsp* New() const final {
    return CreateMaybeMessage<SLInitMsgRsp>(nullptr);
  }

  SLInitMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLInitMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLInitMsgRsp& from);
  void MergeFrom(const SLInitMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLInitMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLInitMsgRsp";
  }
  protected:
  explicit SLInitMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fglobal_2eproto);
    return ::descriptor_table_sl_5fglobal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorVerFieldNumber = 1,
    kMinorVerFieldNumber = 2,
    kSubVerFieldNumber = 3,
  };
  // uint32 MajorVer = 1;
  void clear_majorver();
  ::PROTOBUF_NAMESPACE_ID::uint32 majorver() const;
  void set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_majorver() const;
  void _internal_set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinorVer = 2;
  void clear_minorver();
  ::PROTOBUF_NAMESPACE_ID::uint32 minorver() const;
  void set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minorver() const;
  void _internal_set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SubVer = 3;
  void clear_subver();
  ::PROTOBUF_NAMESPACE_ID::uint32 subver() const;
  void set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subver() const;
  void _internal_set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLInitMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 majorver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minorver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class SLVrfRouteReplayErrorNotif PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfRouteReplayErrorNotif) */ {
 public:
  inline SLVrfRouteReplayErrorNotif() : SLVrfRouteReplayErrorNotif(nullptr) {};
  virtual ~SLVrfRouteReplayErrorNotif();

  SLVrfRouteReplayErrorNotif(const SLVrfRouteReplayErrorNotif& from);
  SLVrfRouteReplayErrorNotif(SLVrfRouteReplayErrorNotif&& from) noexcept
    : SLVrfRouteReplayErrorNotif() {
    *this = ::std::move(from);
  }

  inline SLVrfRouteReplayErrorNotif& operator=(const SLVrfRouteReplayErrorNotif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfRouteReplayErrorNotif& operator=(SLVrfRouteReplayErrorNotif&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfRouteReplayErrorNotif& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfRouteReplayErrorNotif* internal_default_instance() {
    return reinterpret_cast<const SLVrfRouteReplayErrorNotif*>(
               &_SLVrfRouteReplayErrorNotif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLVrfRouteReplayErrorNotif& a, SLVrfRouteReplayErrorNotif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfRouteReplayErrorNotif* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfRouteReplayErrorNotif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfRouteReplayErrorNotif* New() const final {
    return CreateMaybeMessage<SLVrfRouteReplayErrorNotif>(nullptr);
  }

  SLVrfRouteReplayErrorNotif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfRouteReplayErrorNotif>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfRouteReplayErrorNotif& from);
  void MergeFrom(const SLVrfRouteReplayErrorNotif& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfRouteReplayErrorNotif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfRouteReplayErrorNotif";
  }
  protected:
  explicit SLVrfRouteReplayErrorNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fglobal_2eproto);
    return ::descriptor_table_sl_5fglobal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfRouteReplayErrorNotif)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class SLGlobalNotif PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLGlobalNotif) */ {
 public:
  inline SLGlobalNotif() : SLGlobalNotif(nullptr) {};
  virtual ~SLGlobalNotif();

  SLGlobalNotif(const SLGlobalNotif& from);
  SLGlobalNotif(SLGlobalNotif&& from) noexcept
    : SLGlobalNotif() {
    *this = ::std::move(from);
  }

  inline SLGlobalNotif& operator=(const SLGlobalNotif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLGlobalNotif& operator=(SLGlobalNotif&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLGlobalNotif& default_instance();

  enum EventCase {
    kInitRspMsg = 3,
    kVrfReplayErrorNotif = 4,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLGlobalNotif* internal_default_instance() {
    return reinterpret_cast<const SLGlobalNotif*>(
               &_SLGlobalNotif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLGlobalNotif& a, SLGlobalNotif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLGlobalNotif* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLGlobalNotif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLGlobalNotif* New() const final {
    return CreateMaybeMessage<SLGlobalNotif>(nullptr);
  }

  SLGlobalNotif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLGlobalNotif>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLGlobalNotif& from);
  void MergeFrom(const SLGlobalNotif& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLGlobalNotif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLGlobalNotif";
  }
  protected:
  explicit SLGlobalNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fglobal_2eproto);
    return ::descriptor_table_sl_5fglobal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 2,
    kEventTypeFieldNumber = 1,
    kInitRspMsgFieldNumber = 3,
    kVrfReplayErrorNotifFieldNumber = 4,
  };
  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLGlobalNotifType EventType = 1;
  void clear_eventtype();
  ::service_layer::SLGlobalNotifType eventtype() const;
  void set_eventtype(::service_layer::SLGlobalNotifType value);
  private:
  ::service_layer::SLGlobalNotifType _internal_eventtype() const;
  void _internal_set_eventtype(::service_layer::SLGlobalNotifType value);
  public:

  // .service_layer.SLInitMsgRsp InitRspMsg = 3;
  bool has_initrspmsg() const;
  private:
  bool _internal_has_initrspmsg() const;
  public:
  void clear_initrspmsg();
  const ::service_layer::SLInitMsgRsp& initrspmsg() const;
  ::service_layer::SLInitMsgRsp* release_initrspmsg();
  ::service_layer::SLInitMsgRsp* mutable_initrspmsg();
  void set_allocated_initrspmsg(::service_layer::SLInitMsgRsp* initrspmsg);
  private:
  const ::service_layer::SLInitMsgRsp& _internal_initrspmsg() const;
  ::service_layer::SLInitMsgRsp* _internal_mutable_initrspmsg();
  public:
  void unsafe_arena_set_allocated_initrspmsg(
      ::service_layer::SLInitMsgRsp* initrspmsg);
  ::service_layer::SLInitMsgRsp* unsafe_arena_release_initrspmsg();

  // .service_layer.SLVrfRouteReplayErrorNotif VrfReplayErrorNotif = 4;
  bool has_vrfreplayerrornotif() const;
  private:
  bool _internal_has_vrfreplayerrornotif() const;
  public:
  void clear_vrfreplayerrornotif();
  const ::service_layer::SLVrfRouteReplayErrorNotif& vrfreplayerrornotif() const;
  ::service_layer::SLVrfRouteReplayErrorNotif* release_vrfreplayerrornotif();
  ::service_layer::SLVrfRouteReplayErrorNotif* mutable_vrfreplayerrornotif();
  void set_allocated_vrfreplayerrornotif(::service_layer::SLVrfRouteReplayErrorNotif* vrfreplayerrornotif);
  private:
  const ::service_layer::SLVrfRouteReplayErrorNotif& _internal_vrfreplayerrornotif() const;
  ::service_layer::SLVrfRouteReplayErrorNotif* _internal_mutable_vrfreplayerrornotif();
  public:
  void unsafe_arena_set_allocated_vrfreplayerrornotif(
      ::service_layer::SLVrfRouteReplayErrorNotif* vrfreplayerrornotif);
  ::service_layer::SLVrfRouteReplayErrorNotif* unsafe_arena_release_vrfreplayerrornotif();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLGlobalNotif)
 private:
  class _Internal;
  void set_has_initrspmsg();
  void set_has_vrfreplayerrornotif();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  int eventtype_;
  union EventUnion {
    EventUnion() {}
    ::service_layer::SLInitMsgRsp* initrspmsg_;
    ::service_layer::SLVrfRouteReplayErrorNotif* vrfreplayerrornotif_;
  } Event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sl_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class SLGlobalsGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLGlobalsGetMsg) */ {
 public:
  inline SLGlobalsGetMsg() : SLGlobalsGetMsg(nullptr) {};
  virtual ~SLGlobalsGetMsg();

  SLGlobalsGetMsg(const SLGlobalsGetMsg& from);
  SLGlobalsGetMsg(SLGlobalsGetMsg&& from) noexcept
    : SLGlobalsGetMsg() {
    *this = ::std::move(from);
  }

  inline SLGlobalsGetMsg& operator=(const SLGlobalsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLGlobalsGetMsg& operator=(SLGlobalsGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLGlobalsGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLGlobalsGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLGlobalsGetMsg*>(
               &_SLGlobalsGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLGlobalsGetMsg& a, SLGlobalsGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLGlobalsGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLGlobalsGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLGlobalsGetMsg* New() const final {
    return CreateMaybeMessage<SLGlobalsGetMsg>(nullptr);
  }

  SLGlobalsGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLGlobalsGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLGlobalsGetMsg& from);
  void MergeFrom(const SLGlobalsGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLGlobalsGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLGlobalsGetMsg";
  }
  protected:
  explicit SLGlobalsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fglobal_2eproto);
    return ::descriptor_table_sl_5fglobal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLGlobalsGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class SLGlobalsGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLGlobalsGetMsgRsp) */ {
 public:
  inline SLGlobalsGetMsgRsp() : SLGlobalsGetMsgRsp(nullptr) {};
  virtual ~SLGlobalsGetMsgRsp();

  SLGlobalsGetMsgRsp(const SLGlobalsGetMsgRsp& from);
  SLGlobalsGetMsgRsp(SLGlobalsGetMsgRsp&& from) noexcept
    : SLGlobalsGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLGlobalsGetMsgRsp& operator=(const SLGlobalsGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLGlobalsGetMsgRsp& operator=(SLGlobalsGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLGlobalsGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLGlobalsGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLGlobalsGetMsgRsp*>(
               &_SLGlobalsGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLGlobalsGetMsgRsp& a, SLGlobalsGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLGlobalsGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLGlobalsGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLGlobalsGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLGlobalsGetMsgRsp>(nullptr);
  }

  SLGlobalsGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLGlobalsGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLGlobalsGetMsgRsp& from);
  void MergeFrom(const SLGlobalsGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLGlobalsGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLGlobalsGetMsgRsp";
  }
  protected:
  explicit SLGlobalsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fglobal_2eproto);
    return ::descriptor_table_sl_5fglobal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kMaxVrfNameLengthFieldNumber = 2,
    kMaxInterfaceNameLengthFieldNumber = 3,
    kMaxPathsPerEntryFieldNumber = 4,
    kMaxPrimaryPathPerEntryFieldNumber = 5,
    kMaxBackupPathPerEntryFieldNumber = 6,
    kMaxMplsLabelsPerPathFieldNumber = 7,
    kMinPrimaryPathIdNumFieldNumber = 8,
    kMaxPrimaryPathIdNumFieldNumber = 9,
    kMinBackupPathIdNumFieldNumber = 10,
    kMaxBackupPathIdNumFieldNumber = 11,
    kMaxRemoteAddressNumFieldNumber = 12,
    kMaxL2BdNameLengthFieldNumber = 13,
    kMaxL2PmsiTunnelIdLengthFieldNumber = 14,
    kMaxLabelBlockClientNameLengthFieldNumber = 15,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 MaxVrfNameLength = 2;
  void clear_maxvrfnamelength();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxvrfnamelength() const;
  void set_maxvrfnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxvrfnamelength() const;
  void _internal_set_maxvrfnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxInterfaceNameLength = 3;
  void clear_maxinterfacenamelength();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxinterfacenamelength() const;
  void set_maxinterfacenamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxinterfacenamelength() const;
  void _internal_set_maxinterfacenamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxPathsPerEntry = 4;
  void clear_maxpathsperentry();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxpathsperentry() const;
  void set_maxpathsperentry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxpathsperentry() const;
  void _internal_set_maxpathsperentry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxPrimaryPathPerEntry = 5;
  void clear_maxprimarypathperentry();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxprimarypathperentry() const;
  void set_maxprimarypathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxprimarypathperentry() const;
  void _internal_set_maxprimarypathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxBackupPathPerEntry = 6;
  void clear_maxbackuppathperentry();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbackuppathperentry() const;
  void set_maxbackuppathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbackuppathperentry() const;
  void _internal_set_maxbackuppathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxMplsLabelsPerPath = 7;
  void clear_maxmplslabelsperpath();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxmplslabelsperpath() const;
  void set_maxmplslabelsperpath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxmplslabelsperpath() const;
  void _internal_set_maxmplslabelsperpath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinPrimaryPathIdNum = 8;
  void clear_minprimarypathidnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 minprimarypathidnum() const;
  void set_minprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minprimarypathidnum() const;
  void _internal_set_minprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxPrimaryPathIdNum = 9;
  void clear_maxprimarypathidnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxprimarypathidnum() const;
  void set_maxprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxprimarypathidnum() const;
  void _internal_set_maxprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinBackupPathIdNum = 10;
  void clear_minbackuppathidnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 minbackuppathidnum() const;
  void set_minbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minbackuppathidnum() const;
  void _internal_set_minbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxBackupPathIdNum = 11;
  void clear_maxbackuppathidnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbackuppathidnum() const;
  void set_maxbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbackuppathidnum() const;
  void _internal_set_maxbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxRemoteAddressNum = 12;
  void clear_maxremoteaddressnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxremoteaddressnum() const;
  void set_maxremoteaddressnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxremoteaddressnum() const;
  void _internal_set_maxremoteaddressnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxL2BdNameLength = 13;
  void clear_maxl2bdnamelength();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxl2bdnamelength() const;
  void set_maxl2bdnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxl2bdnamelength() const;
  void _internal_set_maxl2bdnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxL2PmsiTunnelIdLength = 14;
  void clear_maxl2pmsitunnelidlength();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxl2pmsitunnelidlength() const;
  void set_maxl2pmsitunnelidlength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxl2pmsitunnelidlength() const;
  void _internal_set_maxl2pmsitunnelidlength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxLabelBlockClientNameLength = 15;
  void clear_maxlabelblockclientnamelength();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlabelblockclientnamelength() const;
  void set_maxlabelblockclientnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxlabelblockclientnamelength() const;
  void _internal_set_maxlabelblockclientnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLGlobalsGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxvrfnamelength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxinterfacenamelength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxpathsperentry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxprimarypathperentry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbackuppathperentry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxmplslabelsperpath_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minprimarypathidnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxprimarypathidnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minbackuppathidnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbackuppathidnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxremoteaddressnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxl2bdnamelength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxl2pmsitunnelidlength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlabelblockclientnamelength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fglobal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLInitMsg

// uint32 MajorVer = 1;
inline void SLInitMsg::clear_majorver() {
  majorver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsg::_internal_majorver() const {
  return majorver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsg::majorver() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInitMsg.MajorVer)
  return _internal_majorver();
}
inline void SLInitMsg::_internal_set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  majorver_ = value;
}
inline void SLInitMsg::set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_majorver(value);
  // @@protoc_insertion_point(field_set:service_layer.SLInitMsg.MajorVer)
}

// uint32 MinorVer = 2;
inline void SLInitMsg::clear_minorver() {
  minorver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsg::_internal_minorver() const {
  return minorver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsg::minorver() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInitMsg.MinorVer)
  return _internal_minorver();
}
inline void SLInitMsg::_internal_set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minorver_ = value;
}
inline void SLInitMsg::set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minorver(value);
  // @@protoc_insertion_point(field_set:service_layer.SLInitMsg.MinorVer)
}

// uint32 SubVer = 3;
inline void SLInitMsg::clear_subver() {
  subver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsg::_internal_subver() const {
  return subver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsg::subver() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInitMsg.SubVer)
  return _internal_subver();
}
inline void SLInitMsg::_internal_set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subver_ = value;
}
inline void SLInitMsg::set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subver(value);
  // @@protoc_insertion_point(field_set:service_layer.SLInitMsg.SubVer)
}

// -------------------------------------------------------------------

// SLInitMsgRsp

// uint32 MajorVer = 1;
inline void SLInitMsgRsp::clear_majorver() {
  majorver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsgRsp::_internal_majorver() const {
  return majorver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsgRsp::majorver() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInitMsgRsp.MajorVer)
  return _internal_majorver();
}
inline void SLInitMsgRsp::_internal_set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  majorver_ = value;
}
inline void SLInitMsgRsp::set_majorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_majorver(value);
  // @@protoc_insertion_point(field_set:service_layer.SLInitMsgRsp.MajorVer)
}

// uint32 MinorVer = 2;
inline void SLInitMsgRsp::clear_minorver() {
  minorver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsgRsp::_internal_minorver() const {
  return minorver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsgRsp::minorver() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInitMsgRsp.MinorVer)
  return _internal_minorver();
}
inline void SLInitMsgRsp::_internal_set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minorver_ = value;
}
inline void SLInitMsgRsp::set_minorver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minorver(value);
  // @@protoc_insertion_point(field_set:service_layer.SLInitMsgRsp.MinorVer)
}

// uint32 SubVer = 3;
inline void SLInitMsgRsp::clear_subver() {
  subver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsgRsp::_internal_subver() const {
  return subver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInitMsgRsp::subver() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInitMsgRsp.SubVer)
  return _internal_subver();
}
inline void SLInitMsgRsp::_internal_set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subver_ = value;
}
inline void SLInitMsgRsp::set_subver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subver(value);
  // @@protoc_insertion_point(field_set:service_layer.SLInitMsgRsp.SubVer)
}

// -------------------------------------------------------------------

// SLVrfRouteReplayErrorNotif

// string VrfName = 1;
inline void SLVrfRouteReplayErrorNotif::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLVrfRouteReplayErrorNotif::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
  return _internal_vrfname();
}
inline void SLVrfRouteReplayErrorNotif::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
}
inline std::string* SLVrfRouteReplayErrorNotif::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLVrfRouteReplayErrorNotif::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLVrfRouteReplayErrorNotif::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLVrfRouteReplayErrorNotif::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
}
inline void SLVrfRouteReplayErrorNotif::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
}
inline void SLVrfRouteReplayErrorNotif::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
}
inline std::string* SLVrfRouteReplayErrorNotif::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLVrfRouteReplayErrorNotif::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLVrfRouteReplayErrorNotif::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
}
inline std::string* SLVrfRouteReplayErrorNotif::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLVrfRouteReplayErrorNotif::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfRouteReplayErrorNotif.VrfName)
}

// -------------------------------------------------------------------

// SLGlobalNotif

// .service_layer.SLGlobalNotifType EventType = 1;
inline void SLGlobalNotif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLGlobalNotifType SLGlobalNotif::_internal_eventtype() const {
  return static_cast< ::service_layer::SLGlobalNotifType >(eventtype_);
}
inline ::service_layer::SLGlobalNotifType SLGlobalNotif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalNotif.EventType)
  return _internal_eventtype();
}
inline void SLGlobalNotif::_internal_set_eventtype(::service_layer::SLGlobalNotifType value) {
  
  eventtype_ = value;
}
inline void SLGlobalNotif::set_eventtype(::service_layer::SLGlobalNotifType value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalNotif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLGlobalNotif::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLGlobalNotif::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLGlobalNotif::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLGlobalNotif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalNotif.ErrStatus)
  return _internal_errstatus();
}
inline void SLGlobalNotif::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLGlobalNotif.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLGlobalNotif::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLGlobalNotif::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLGlobalNotif.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLGlobalNotif::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLGlobalNotif::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLGlobalNotif.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLGlobalNotif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLGlobalNotif.ErrStatus)
}

// .service_layer.SLInitMsgRsp InitRspMsg = 3;
inline bool SLGlobalNotif::_internal_has_initrspmsg() const {
  return Event_case() == kInitRspMsg;
}
inline bool SLGlobalNotif::has_initrspmsg() const {
  return _internal_has_initrspmsg();
}
inline void SLGlobalNotif::set_has_initrspmsg() {
  _oneof_case_[0] = kInitRspMsg;
}
inline void SLGlobalNotif::clear_initrspmsg() {
  if (_internal_has_initrspmsg()) {
    if (GetArena() == nullptr) {
      delete Event_.initrspmsg_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLInitMsgRsp* SLGlobalNotif::release_initrspmsg() {
  // @@protoc_insertion_point(field_release:service_layer.SLGlobalNotif.InitRspMsg)
  if (_internal_has_initrspmsg()) {
    clear_has_Event();
      ::service_layer::SLInitMsgRsp* temp = Event_.initrspmsg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.initrspmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLInitMsgRsp& SLGlobalNotif::_internal_initrspmsg() const {
  return _internal_has_initrspmsg()
      ? *Event_.initrspmsg_
      : *reinterpret_cast< ::service_layer::SLInitMsgRsp*>(&::service_layer::_SLInitMsgRsp_default_instance_);
}
inline const ::service_layer::SLInitMsgRsp& SLGlobalNotif::initrspmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalNotif.InitRspMsg)
  return _internal_initrspmsg();
}
inline ::service_layer::SLInitMsgRsp* SLGlobalNotif::unsafe_arena_release_initrspmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLGlobalNotif.InitRspMsg)
  if (_internal_has_initrspmsg()) {
    clear_has_Event();
    ::service_layer::SLInitMsgRsp* temp = Event_.initrspmsg_;
    Event_.initrspmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLGlobalNotif::unsafe_arena_set_allocated_initrspmsg(::service_layer::SLInitMsgRsp* initrspmsg) {
  clear_Event();
  if (initrspmsg) {
    set_has_initrspmsg();
    Event_.initrspmsg_ = initrspmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLGlobalNotif.InitRspMsg)
}
inline ::service_layer::SLInitMsgRsp* SLGlobalNotif::_internal_mutable_initrspmsg() {
  if (!_internal_has_initrspmsg()) {
    clear_Event();
    set_has_initrspmsg();
    Event_.initrspmsg_ = CreateMaybeMessage< ::service_layer::SLInitMsgRsp >(GetArena());
  }
  return Event_.initrspmsg_;
}
inline ::service_layer::SLInitMsgRsp* SLGlobalNotif::mutable_initrspmsg() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLGlobalNotif.InitRspMsg)
  return _internal_mutable_initrspmsg();
}

// .service_layer.SLVrfRouteReplayErrorNotif VrfReplayErrorNotif = 4;
inline bool SLGlobalNotif::_internal_has_vrfreplayerrornotif() const {
  return Event_case() == kVrfReplayErrorNotif;
}
inline bool SLGlobalNotif::has_vrfreplayerrornotif() const {
  return _internal_has_vrfreplayerrornotif();
}
inline void SLGlobalNotif::set_has_vrfreplayerrornotif() {
  _oneof_case_[0] = kVrfReplayErrorNotif;
}
inline void SLGlobalNotif::clear_vrfreplayerrornotif() {
  if (_internal_has_vrfreplayerrornotif()) {
    if (GetArena() == nullptr) {
      delete Event_.vrfreplayerrornotif_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLVrfRouteReplayErrorNotif* SLGlobalNotif::release_vrfreplayerrornotif() {
  // @@protoc_insertion_point(field_release:service_layer.SLGlobalNotif.VrfReplayErrorNotif)
  if (_internal_has_vrfreplayerrornotif()) {
    clear_has_Event();
      ::service_layer::SLVrfRouteReplayErrorNotif* temp = Event_.vrfreplayerrornotif_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.vrfreplayerrornotif_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLVrfRouteReplayErrorNotif& SLGlobalNotif::_internal_vrfreplayerrornotif() const {
  return _internal_has_vrfreplayerrornotif()
      ? *Event_.vrfreplayerrornotif_
      : *reinterpret_cast< ::service_layer::SLVrfRouteReplayErrorNotif*>(&::service_layer::_SLVrfRouteReplayErrorNotif_default_instance_);
}
inline const ::service_layer::SLVrfRouteReplayErrorNotif& SLGlobalNotif::vrfreplayerrornotif() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalNotif.VrfReplayErrorNotif)
  return _internal_vrfreplayerrornotif();
}
inline ::service_layer::SLVrfRouteReplayErrorNotif* SLGlobalNotif::unsafe_arena_release_vrfreplayerrornotif() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLGlobalNotif.VrfReplayErrorNotif)
  if (_internal_has_vrfreplayerrornotif()) {
    clear_has_Event();
    ::service_layer::SLVrfRouteReplayErrorNotif* temp = Event_.vrfreplayerrornotif_;
    Event_.vrfreplayerrornotif_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLGlobalNotif::unsafe_arena_set_allocated_vrfreplayerrornotif(::service_layer::SLVrfRouteReplayErrorNotif* vrfreplayerrornotif) {
  clear_Event();
  if (vrfreplayerrornotif) {
    set_has_vrfreplayerrornotif();
    Event_.vrfreplayerrornotif_ = vrfreplayerrornotif;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLGlobalNotif.VrfReplayErrorNotif)
}
inline ::service_layer::SLVrfRouteReplayErrorNotif* SLGlobalNotif::_internal_mutable_vrfreplayerrornotif() {
  if (!_internal_has_vrfreplayerrornotif()) {
    clear_Event();
    set_has_vrfreplayerrornotif();
    Event_.vrfreplayerrornotif_ = CreateMaybeMessage< ::service_layer::SLVrfRouteReplayErrorNotif >(GetArena());
  }
  return Event_.vrfreplayerrornotif_;
}
inline ::service_layer::SLVrfRouteReplayErrorNotif* SLGlobalNotif::mutable_vrfreplayerrornotif() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLGlobalNotif.VrfReplayErrorNotif)
  return _internal_mutable_vrfreplayerrornotif();
}

inline bool SLGlobalNotif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLGlobalNotif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLGlobalNotif::EventCase SLGlobalNotif::Event_case() const {
  return SLGlobalNotif::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLGlobalsGetMsg

// -------------------------------------------------------------------

// SLGlobalsGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLGlobalsGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLGlobalsGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLGlobalsGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLGlobalsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLGlobalsGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLGlobalsGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLGlobalsGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLGlobalsGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLGlobalsGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLGlobalsGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLGlobalsGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLGlobalsGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLGlobalsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLGlobalsGetMsgRsp.ErrStatus)
}

// uint32 MaxVrfNameLength = 2;
inline void SLGlobalsGetMsgRsp::clear_maxvrfnamelength() {
  maxvrfnamelength_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxvrfnamelength() const {
  return maxvrfnamelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxvrfnamelength() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxVrfNameLength)
  return _internal_maxvrfnamelength();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxvrfnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxvrfnamelength_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxvrfnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxvrfnamelength(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxVrfNameLength)
}

// uint32 MaxInterfaceNameLength = 3;
inline void SLGlobalsGetMsgRsp::clear_maxinterfacenamelength() {
  maxinterfacenamelength_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxinterfacenamelength() const {
  return maxinterfacenamelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxinterfacenamelength() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxInterfaceNameLength)
  return _internal_maxinterfacenamelength();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxinterfacenamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxinterfacenamelength_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxinterfacenamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxinterfacenamelength(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxInterfaceNameLength)
}

// uint32 MaxPathsPerEntry = 4;
inline void SLGlobalsGetMsgRsp::clear_maxpathsperentry() {
  maxpathsperentry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxpathsperentry() const {
  return maxpathsperentry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxpathsperentry() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxPathsPerEntry)
  return _internal_maxpathsperentry();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxpathsperentry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxpathsperentry_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxpathsperentry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxpathsperentry(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxPathsPerEntry)
}

// uint32 MaxPrimaryPathPerEntry = 5;
inline void SLGlobalsGetMsgRsp::clear_maxprimarypathperentry() {
  maxprimarypathperentry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxprimarypathperentry() const {
  return maxprimarypathperentry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxprimarypathperentry() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxPrimaryPathPerEntry)
  return _internal_maxprimarypathperentry();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxprimarypathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxprimarypathperentry_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxprimarypathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxprimarypathperentry(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxPrimaryPathPerEntry)
}

// uint32 MaxBackupPathPerEntry = 6;
inline void SLGlobalsGetMsgRsp::clear_maxbackuppathperentry() {
  maxbackuppathperentry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxbackuppathperentry() const {
  return maxbackuppathperentry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxbackuppathperentry() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxBackupPathPerEntry)
  return _internal_maxbackuppathperentry();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxbackuppathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbackuppathperentry_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxbackuppathperentry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbackuppathperentry(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxBackupPathPerEntry)
}

// uint32 MaxMplsLabelsPerPath = 7;
inline void SLGlobalsGetMsgRsp::clear_maxmplslabelsperpath() {
  maxmplslabelsperpath_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxmplslabelsperpath() const {
  return maxmplslabelsperpath_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxmplslabelsperpath() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxMplsLabelsPerPath)
  return _internal_maxmplslabelsperpath();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxmplslabelsperpath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxmplslabelsperpath_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxmplslabelsperpath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxmplslabelsperpath(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxMplsLabelsPerPath)
}

// uint32 MinPrimaryPathIdNum = 8;
inline void SLGlobalsGetMsgRsp::clear_minprimarypathidnum() {
  minprimarypathidnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_minprimarypathidnum() const {
  return minprimarypathidnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::minprimarypathidnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MinPrimaryPathIdNum)
  return _internal_minprimarypathidnum();
}
inline void SLGlobalsGetMsgRsp::_internal_set_minprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minprimarypathidnum_ = value;
}
inline void SLGlobalsGetMsgRsp::set_minprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minprimarypathidnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MinPrimaryPathIdNum)
}

// uint32 MaxPrimaryPathIdNum = 9;
inline void SLGlobalsGetMsgRsp::clear_maxprimarypathidnum() {
  maxprimarypathidnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxprimarypathidnum() const {
  return maxprimarypathidnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxprimarypathidnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxPrimaryPathIdNum)
  return _internal_maxprimarypathidnum();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxprimarypathidnum_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxprimarypathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxprimarypathidnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxPrimaryPathIdNum)
}

// uint32 MinBackupPathIdNum = 10;
inline void SLGlobalsGetMsgRsp::clear_minbackuppathidnum() {
  minbackuppathidnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_minbackuppathidnum() const {
  return minbackuppathidnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::minbackuppathidnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MinBackupPathIdNum)
  return _internal_minbackuppathidnum();
}
inline void SLGlobalsGetMsgRsp::_internal_set_minbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minbackuppathidnum_ = value;
}
inline void SLGlobalsGetMsgRsp::set_minbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minbackuppathidnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MinBackupPathIdNum)
}

// uint32 MaxBackupPathIdNum = 11;
inline void SLGlobalsGetMsgRsp::clear_maxbackuppathidnum() {
  maxbackuppathidnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxbackuppathidnum() const {
  return maxbackuppathidnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxbackuppathidnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxBackupPathIdNum)
  return _internal_maxbackuppathidnum();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbackuppathidnum_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxbackuppathidnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbackuppathidnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxBackupPathIdNum)
}

// uint32 MaxRemoteAddressNum = 12;
inline void SLGlobalsGetMsgRsp::clear_maxremoteaddressnum() {
  maxremoteaddressnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxremoteaddressnum() const {
  return maxremoteaddressnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxremoteaddressnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxRemoteAddressNum)
  return _internal_maxremoteaddressnum();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxremoteaddressnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxremoteaddressnum_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxremoteaddressnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxremoteaddressnum(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxRemoteAddressNum)
}

// uint32 MaxL2BdNameLength = 13;
inline void SLGlobalsGetMsgRsp::clear_maxl2bdnamelength() {
  maxl2bdnamelength_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxl2bdnamelength() const {
  return maxl2bdnamelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxl2bdnamelength() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxL2BdNameLength)
  return _internal_maxl2bdnamelength();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxl2bdnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxl2bdnamelength_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxl2bdnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxl2bdnamelength(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxL2BdNameLength)
}

// uint32 MaxL2PmsiTunnelIdLength = 14;
inline void SLGlobalsGetMsgRsp::clear_maxl2pmsitunnelidlength() {
  maxl2pmsitunnelidlength_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxl2pmsitunnelidlength() const {
  return maxl2pmsitunnelidlength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxl2pmsitunnelidlength() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxL2PmsiTunnelIdLength)
  return _internal_maxl2pmsitunnelidlength();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxl2pmsitunnelidlength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxl2pmsitunnelidlength_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxl2pmsitunnelidlength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxl2pmsitunnelidlength(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxL2PmsiTunnelIdLength)
}

// uint32 MaxLabelBlockClientNameLength = 15;
inline void SLGlobalsGetMsgRsp::clear_maxlabelblockclientnamelength() {
  maxlabelblockclientnamelength_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::_internal_maxlabelblockclientnamelength() const {
  return maxlabelblockclientnamelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLGlobalsGetMsgRsp::maxlabelblockclientnamelength() const {
  // @@protoc_insertion_point(field_get:service_layer.SLGlobalsGetMsgRsp.MaxLabelBlockClientNameLength)
  return _internal_maxlabelblockclientnamelength();
}
inline void SLGlobalsGetMsgRsp::_internal_set_maxlabelblockclientnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxlabelblockclientnamelength_ = value;
}
inline void SLGlobalsGetMsgRsp::set_maxlabelblockclientnamelength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxlabelblockclientnamelength(value);
  // @@protoc_insertion_point(field_set:service_layer.SLGlobalsGetMsgRsp.MaxLabelBlockClientNameLength)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLGlobalNotifType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLGlobalNotifType>() {
  return ::service_layer::SLGlobalNotifType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fglobal_2eproto
