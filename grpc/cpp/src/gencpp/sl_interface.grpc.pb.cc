// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: sl_interface.proto

#include "sl_interface.pb.h"
#include "sl_interface.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLInterfaceOper_method_names[] = {
  "/service_layer.SLInterfaceOper/SLInterfaceGlobalsRegOp",
  "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGet",
  "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGetStats",
  "/service_layer.SLInterfaceOper/SLInterfaceGet",
  "/service_layer.SLInterfaceOper/SLInterfaceGetNotifStream",
  "/service_layer.SLInterfaceOper/SLInterfaceNotifOp",
};

std::unique_ptr< SLInterfaceOper::Stub> SLInterfaceOper::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SLInterfaceOper::Stub> stub(new SLInterfaceOper::Stub(channel));
  return stub;
}

SLInterfaceOper::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SLInterfaceGlobalsRegOp_(SLInterfaceOper_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLInterfaceGlobalsGet_(SLInterfaceOper_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLInterfaceGlobalsGetStats_(SLInterfaceOper_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLInterfaceGet_(SLInterfaceOper_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLInterfaceGetNotifStream_(SLInterfaceOper_method_names[4], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SLInterfaceNotifOp_(SLInterfaceOper_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SLInterfaceOper::Stub::SLInterfaceGlobalsRegOp(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGlobalsRegMsg& request, ::service_layer::SLInterfaceGlobalsRegMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLInterfaceGlobalsRegOp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGlobalsRegMsgRsp>* SLInterfaceOper::Stub::AsyncSLInterfaceGlobalsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGlobalsRegMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGlobalsRegMsgRsp>(channel_.get(), cq, rpcmethod_SLInterfaceGlobalsRegOp_, context, request);
}

::grpc::Status SLInterfaceOper::Stub::SLInterfaceGlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGlobalsGetMsg& request, ::service_layer::SLInterfaceGlobalsGetMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLInterfaceGlobalsGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGlobalsGetMsgRsp>* SLInterfaceOper::Stub::AsyncSLInterfaceGlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGlobalsGetMsgRsp>(channel_.get(), cq, rpcmethod_SLInterfaceGlobalsGet_, context, request);
}

::grpc::Status SLInterfaceOper::Stub::SLInterfaceGlobalsGetStats(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGlobalsGetMsg& request, ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLInterfaceGlobalsGetStats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp>* SLInterfaceOper::Stub::AsyncSLInterfaceGlobalsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp>(channel_.get(), cq, rpcmethod_SLInterfaceGlobalsGetStats_, context, request);
}

::grpc::Status SLInterfaceOper::Stub::SLInterfaceGet(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGetMsg& request, ::service_layer::SLInterfaceGetMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLInterfaceGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGetMsgRsp>* SLInterfaceOper::Stub::AsyncSLInterfaceGetRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGetMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceGetMsgRsp>(channel_.get(), cq, rpcmethod_SLInterfaceGet_, context, request);
}

::grpc::ClientReader< ::service_layer::SLInterfaceNotif>* SLInterfaceOper::Stub::SLInterfaceGetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGetNotifMsg& request) {
  return new ::grpc::ClientReader< ::service_layer::SLInterfaceNotif>(channel_.get(), rpcmethod_SLInterfaceGetNotifStream_, context, request);
}

::grpc::ClientAsyncReader< ::service_layer::SLInterfaceNotif>* SLInterfaceOper::Stub::AsyncSLInterfaceGetNotifStreamRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceGetNotifMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::service_layer::SLInterfaceNotif>(channel_.get(), cq, rpcmethod_SLInterfaceGetNotifStream_, context, request, tag);
}

::grpc::Status SLInterfaceOper::Stub::SLInterfaceNotifOp(::grpc::ClientContext* context, const ::service_layer::SLInterfaceNotifMsg& request, ::service_layer::SLInterfaceNotifMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLInterfaceNotifOp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceNotifMsgRsp>* SLInterfaceOper::Stub::AsyncSLInterfaceNotifOpRaw(::grpc::ClientContext* context, const ::service_layer::SLInterfaceNotifMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service_layer::SLInterfaceNotifMsgRsp>(channel_.get(), cq, rpcmethod_SLInterfaceNotifOp_, context, request);
}

SLInterfaceOper::Service::Service() {
  (void)SLInterfaceOper_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      SLInterfaceOper_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLInterfaceOper::Service, ::service_layer::SLInterfaceGlobalsRegMsg, ::service_layer::SLInterfaceGlobalsRegMsgRsp>(
          std::mem_fn(&SLInterfaceOper::Service::SLInterfaceGlobalsRegOp), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLInterfaceOper_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLInterfaceOper::Service, ::service_layer::SLInterfaceGlobalsGetMsg, ::service_layer::SLInterfaceGlobalsGetMsgRsp>(
          std::mem_fn(&SLInterfaceOper::Service::SLInterfaceGlobalsGet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLInterfaceOper_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLInterfaceOper::Service, ::service_layer::SLInterfaceGlobalsGetMsg, ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp>(
          std::mem_fn(&SLInterfaceOper::Service::SLInterfaceGlobalsGetStats), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLInterfaceOper_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLInterfaceOper::Service, ::service_layer::SLInterfaceGetMsg, ::service_layer::SLInterfaceGetMsgRsp>(
          std::mem_fn(&SLInterfaceOper::Service::SLInterfaceGet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLInterfaceOper_method_names[4],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< SLInterfaceOper::Service, ::service_layer::SLInterfaceGetNotifMsg, ::service_layer::SLInterfaceNotif>(
          std::mem_fn(&SLInterfaceOper::Service::SLInterfaceGetNotifStream), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLInterfaceOper_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLInterfaceOper::Service, ::service_layer::SLInterfaceNotifMsg, ::service_layer::SLInterfaceNotifMsgRsp>(
          std::mem_fn(&SLInterfaceOper::Service::SLInterfaceNotifOp), this)));
}

SLInterfaceOper::Service::~Service() {
}

::grpc::Status SLInterfaceOper::Service::SLInterfaceGlobalsRegOp(::grpc::ServerContext* context, const ::service_layer::SLInterfaceGlobalsRegMsg* request, ::service_layer::SLInterfaceGlobalsRegMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLInterfaceOper::Service::SLInterfaceGlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLInterfaceGlobalsGetMsg* request, ::service_layer::SLInterfaceGlobalsGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLInterfaceOper::Service::SLInterfaceGlobalsGetStats(::grpc::ServerContext* context, const ::service_layer::SLInterfaceGlobalsGetMsg* request, ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLInterfaceOper::Service::SLInterfaceGet(::grpc::ServerContext* context, const ::service_layer::SLInterfaceGetMsg* request, ::service_layer::SLInterfaceGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLInterfaceOper::Service::SLInterfaceGetNotifStream(::grpc::ServerContext* context, const ::service_layer::SLInterfaceGetNotifMsg* request, ::grpc::ServerWriter< ::service_layer::SLInterfaceNotif>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLInterfaceOper::Service::SLInterfaceNotifOp(::grpc::ServerContext* context, const ::service_layer::SLInterfaceNotifMsg* request, ::service_layer::SLInterfaceNotifMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

