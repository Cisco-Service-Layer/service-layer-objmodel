// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sl_interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_layer {

namespace {

const ::google::protobuf::Descriptor* SLInterfaceGlobalsRegMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGlobalsRegMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGlobalsRegMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGlobalsRegMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGlobalsGetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGlobalsGetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGlobalsGetMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGlobalsGetMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGlobalsGetStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGlobalsGetStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGetMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGetMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceGetNotifMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceGetNotifMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceNotif_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceNotif_reflection_ = NULL;
struct SLInterfaceNotifOneofInstance {
  const ::service_layer::SLErrorStatus* errstatus_;
  const ::service_layer::SLInterfaceInfoMsg* info_;
}* SLInterfaceNotif_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceNotifMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceNotifMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceNotifMsgRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceNotifMsgRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLInterfaceNotifMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLInterfaceNotifMsgRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SLInterfaceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SLInterfaceNotifType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sl_5finterface_2eproto() {
  protobuf_AddDesc_sl_5finterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sl_interface.proto");
  GOOGLE_CHECK(file != NULL);
  SLInterfaceGlobalsRegMsg_descriptor_ = file->message_type(0);
  static const int SLInterfaceGlobalsRegMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsRegMsg, oper_),
  };
  SLInterfaceGlobalsRegMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGlobalsRegMsg_descriptor_,
      SLInterfaceGlobalsRegMsg::default_instance_,
      SLInterfaceGlobalsRegMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGlobalsRegMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsRegMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsRegMsg, _is_default_instance_));
  SLInterfaceGlobalsRegMsgRsp_descriptor_ = file->message_type(1);
  static const int SLInterfaceGlobalsRegMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsRegMsgRsp, errstatus_),
  };
  SLInterfaceGlobalsRegMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGlobalsRegMsgRsp_descriptor_,
      SLInterfaceGlobalsRegMsgRsp::default_instance_,
      SLInterfaceGlobalsRegMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGlobalsRegMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsRegMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsRegMsgRsp, _is_default_instance_));
  SLInterfaceGlobalsGetMsg_descriptor_ = file->message_type(2);
  static const int SLInterfaceGlobalsGetMsg_offsets_[1] = {
  };
  SLInterfaceGlobalsGetMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGlobalsGetMsg_descriptor_,
      SLInterfaceGlobalsGetMsg::default_instance_,
      SLInterfaceGlobalsGetMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGlobalsGetMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetMsg, _is_default_instance_));
  SLInterfaceGlobalsGetMsgRsp_descriptor_ = file->message_type(3);
  static const int SLInterfaceGlobalsGetMsgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetMsgRsp, maxinterfacesperbatch_),
  };
  SLInterfaceGlobalsGetMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGlobalsGetMsgRsp_descriptor_,
      SLInterfaceGlobalsGetMsgRsp::default_instance_,
      SLInterfaceGlobalsGetMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGlobalsGetMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetMsgRsp, _is_default_instance_));
  SLInterfaceGlobalsGetStatsMsgRsp_descriptor_ = file->message_type(4);
  static const int SLInterfaceGlobalsGetStatsMsgRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, interfacenotifcount_),
  };
  SLInterfaceGlobalsGetStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGlobalsGetStatsMsgRsp_descriptor_,
      SLInterfaceGlobalsGetStatsMsgRsp::default_instance_,
      SLInterfaceGlobalsGetStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGlobalsGetStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, _is_default_instance_));
  SLInterfaceGetMsg_descriptor_ = file->message_type(5);
  static const int SLInterfaceGetMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsg, entriescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsg, getnext_),
  };
  SLInterfaceGetMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGetMsg_descriptor_,
      SLInterfaceGetMsg::default_instance_,
      SLInterfaceGetMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGetMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsg, _is_default_instance_));
  SLInterfaceInfoMsg_descriptor_ = file->message_type(6);
  static const int SLInterfaceInfoMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceInfoMsg, slifinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceInfoMsg, ifstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceInfoMsg, seqnum_),
  };
  SLInterfaceInfoMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceInfoMsg_descriptor_,
      SLInterfaceInfoMsg::default_instance_,
      SLInterfaceInfoMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceInfoMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceInfoMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceInfoMsg, _is_default_instance_));
  SLInterfaceGetMsgRsp_descriptor_ = file->message_type(7);
  static const int SLInterfaceGetMsgRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsgRsp, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsgRsp, entries_),
  };
  SLInterfaceGetMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGetMsgRsp_descriptor_,
      SLInterfaceGetMsgRsp::default_instance_,
      SLInterfaceGetMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGetMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetMsgRsp, _is_default_instance_));
  SLInterfaceGetNotifMsg_descriptor_ = file->message_type(8);
  static const int SLInterfaceGetNotifMsg_offsets_[1] = {
  };
  SLInterfaceGetNotifMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceGetNotifMsg_descriptor_,
      SLInterfaceGetNotifMsg::default_instance_,
      SLInterfaceGetNotifMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceGetNotifMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetNotifMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceGetNotifMsg, _is_default_instance_));
  SLInterfaceNotif_descriptor_ = file->message_type(9);
  static const int SLInterfaceNotif_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotif, eventtype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SLInterfaceNotif_default_oneof_instance_, errstatus_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SLInterfaceNotif_default_oneof_instance_, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotif, Event_),
  };
  SLInterfaceNotif_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceNotif_descriptor_,
      SLInterfaceNotif::default_instance_,
      SLInterfaceNotif_offsets_,
      -1,
      -1,
      -1,
      SLInterfaceNotif_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotif, _oneof_case_[0]),
      sizeof(SLInterfaceNotif),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotif, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotif, _is_default_instance_));
  SLInterfaceNotifMsg_descriptor_ = file->message_type(10);
  static const int SLInterfaceNotifMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsg, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsg, entries_),
  };
  SLInterfaceNotifMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceNotifMsg_descriptor_,
      SLInterfaceNotifMsg::default_instance_,
      SLInterfaceNotifMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceNotifMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsg, _is_default_instance_));
  SLInterfaceNotifMsgRes_descriptor_ = file->message_type(11);
  static const int SLInterfaceNotifMsgRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRes, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRes, key_),
  };
  SLInterfaceNotifMsgRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceNotifMsgRes_descriptor_,
      SLInterfaceNotifMsgRes::default_instance_,
      SLInterfaceNotifMsgRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceNotifMsgRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRes, _is_default_instance_));
  SLInterfaceNotifMsgRsp_descriptor_ = file->message_type(12);
  static const int SLInterfaceNotifMsgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRsp, statussummary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRsp, results_),
  };
  SLInterfaceNotifMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLInterfaceNotifMsgRsp_descriptor_,
      SLInterfaceNotifMsgRsp::default_instance_,
      SLInterfaceNotifMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLInterfaceNotifMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLInterfaceNotifMsgRsp, _is_default_instance_));
  SLInterfaceState_descriptor_ = file->enum_type(0);
  SLInterfaceNotifType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sl_5finterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGlobalsRegMsg_descriptor_, &SLInterfaceGlobalsRegMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGlobalsRegMsgRsp_descriptor_, &SLInterfaceGlobalsRegMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGlobalsGetMsg_descriptor_, &SLInterfaceGlobalsGetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGlobalsGetMsgRsp_descriptor_, &SLInterfaceGlobalsGetMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGlobalsGetStatsMsgRsp_descriptor_, &SLInterfaceGlobalsGetStatsMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGetMsg_descriptor_, &SLInterfaceGetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceInfoMsg_descriptor_, &SLInterfaceInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGetMsgRsp_descriptor_, &SLInterfaceGetMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceGetNotifMsg_descriptor_, &SLInterfaceGetNotifMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceNotif_descriptor_, &SLInterfaceNotif::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceNotifMsg_descriptor_, &SLInterfaceNotifMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceNotifMsgRes_descriptor_, &SLInterfaceNotifMsgRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLInterfaceNotifMsgRsp_descriptor_, &SLInterfaceNotifMsgRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sl_5finterface_2eproto() {
  delete SLInterfaceGlobalsRegMsg::default_instance_;
  delete SLInterfaceGlobalsRegMsg_reflection_;
  delete SLInterfaceGlobalsRegMsgRsp::default_instance_;
  delete SLInterfaceGlobalsRegMsgRsp_reflection_;
  delete SLInterfaceGlobalsGetMsg::default_instance_;
  delete SLInterfaceGlobalsGetMsg_reflection_;
  delete SLInterfaceGlobalsGetMsgRsp::default_instance_;
  delete SLInterfaceGlobalsGetMsgRsp_reflection_;
  delete SLInterfaceGlobalsGetStatsMsgRsp::default_instance_;
  delete SLInterfaceGlobalsGetStatsMsgRsp_reflection_;
  delete SLInterfaceGetMsg::default_instance_;
  delete SLInterfaceGetMsg_reflection_;
  delete SLInterfaceInfoMsg::default_instance_;
  delete SLInterfaceInfoMsg_reflection_;
  delete SLInterfaceGetMsgRsp::default_instance_;
  delete SLInterfaceGetMsgRsp_reflection_;
  delete SLInterfaceGetNotifMsg::default_instance_;
  delete SLInterfaceGetNotifMsg_reflection_;
  delete SLInterfaceNotif::default_instance_;
  delete SLInterfaceNotif_default_oneof_instance_;
  delete SLInterfaceNotif_reflection_;
  delete SLInterfaceNotifMsg::default_instance_;
  delete SLInterfaceNotifMsg_reflection_;
  delete SLInterfaceNotifMsgRes::default_instance_;
  delete SLInterfaceNotifMsgRes_reflection_;
  delete SLInterfaceNotifMsgRsp::default_instance_;
  delete SLInterfaceNotifMsgRsp_reflection_;
}

void protobuf_AddDesc_sl_5finterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_layer::protobuf_AddDesc_sl_5fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022sl_interface.proto\022\rservice_layer\032\025sl_"
    "common_types.proto\"@\n\030SLInterfaceGlobals"
    "RegMsg\022$\n\004Oper\030\001 \001(\0162\026.service_layer.SLR"
    "egOp\"N\n\033SLInterfaceGlobalsRegMsgRsp\022/\n\tE"
    "rrStatus\030\001 \001(\0132\034.service_layer.SLErrorSt"
    "atus\"\032\n\030SLInterfaceGlobalsGetMsg\"m\n\033SLIn"
    "terfaceGlobalsGetMsgRsp\022/\n\tErrStatus\030\001 \001"
    "(\0132\034.service_layer.SLErrorStatus\022\035\n\025MaxI"
    "nterfacesPerBatch\030\002 \001(\r\"\200\001\n SLInterfaceG"
    "lobalsGetStatsMsgRsp\022/\n\tErrStatus\030\001 \001(\0132"
    "\034.service_layer.SLErrorStatus\022\016\n\006SeqNum\030"
    "\002 \001(\004\022\033\n\023InterfaceNotifCount\030\003 \001(\r\"c\n\021SL"
    "InterfaceGetMsg\022\'\n\003Key\030\001 \001(\0132\032.service_l"
    "ayer.SLInterface\022\024\n\014EntriesCount\030\002 \001(\r\022\017"
    "\n\007GetNext\030\003 \001(\010\"\204\001\n\022SLInterfaceInfoMsg\022,"
    "\n\010SLIfInfo\030\001 \001(\0132\032.service_layer.SLInter"
    "face\0220\n\007IfState\030\002 \001(\0162\037.service_layer.SL"
    "InterfaceState\022\016\n\006SeqNum\030\003 \001(\004\"\210\001\n\024SLInt"
    "erfaceGetMsgRsp\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatu"
    "s\030\002 \001(\0132\034.service_layer.SLErrorStatus\0222\n"
    "\007Entries\030\003 \003(\0132!.service_layer.SLInterfa"
    "ceInfoMsg\"\030\n\026SLInterfaceGetNotifMsg\"\271\001\n\020"
    "SLInterfaceNotif\0226\n\tEventType\030\001 \001(\0162#.se"
    "rvice_layer.SLInterfaceNotifType\0221\n\tErrS"
    "tatus\030\002 \001(\0132\034.service_layer.SLErrorStatu"
    "sH\000\0221\n\004Info\030\003 \001(\0132!.service_layer.SLInte"
    "rfaceInfoMsgH\000B\007\n\005Event\"j\n\023SLInterfaceNo"
    "tifMsg\022&\n\004Oper\030\001 \001(\0162\030.service_layer.SLN"
    "otifOp\022+\n\007Entries\030\002 \003(\0132\032.service_layer."
    "SLInterface\"r\n\026SLInterfaceNotifMsgRes\022/\n"
    "\tErrStatus\030\001 \001(\0132\034.service_layer.SLError"
    "Status\022\'\n\003Key\030\002 \001(\0132\032.service_layer.SLIn"
    "terface\"\205\001\n\026SLInterfaceNotifMsgRsp\0223\n\rSt"
    "atusSummary\030\001 \001(\0132\034.service_layer.SLErro"
    "rStatus\0226\n\007Results\030\002 \003(\0132%.service_layer"
    ".SLInterfaceNotifMsgRes*U\n\020SLInterfaceSt"
    "ate\022\027\n\023SL_IF_STATE_UNKNOWN\020\000\022\024\n\020SL_IF_ST"
    "ATE_DOWN\020\001\022\022\n\016SL_IF_STATE_UP\020\002*\213\001\n\024SLInt"
    "erfaceNotifType\022$\n SL_INTERFACE_EVENT_TY"
    "PE_RESERVED\020\000\022!\n\035SL_INTERFACE_EVENT_TYPE"
    "_ERROR\020\001\022*\n&SL_INTERFACE_EVENT_TYPE_INTE"
    "RFACE_INFO\020\0022\210\005\n\017SLInterfaceOper\022n\n\027SLIn"
    "terfaceGlobalsRegOp\022\'.service_layer.SLIn"
    "terfaceGlobalsRegMsg\032*.service_layer.SLI"
    "nterfaceGlobalsRegMsgRsp\022l\n\025SLInterfaceG"
    "lobalsGet\022\'.service_layer.SLInterfaceGlo"
    "balsGetMsg\032*.service_layer.SLInterfaceGl"
    "obalsGetMsgRsp\022v\n\032SLInterfaceGlobalsGetS"
    "tats\022\'.service_layer.SLInterfaceGlobalsG"
    "etMsg\032/.service_layer.SLInterfaceGlobals"
    "GetStatsMsgRsp\022W\n\016SLInterfaceGet\022 .servi"
    "ce_layer.SLInterfaceGetMsg\032#.service_lay"
    "er.SLInterfaceGetMsgRsp\022e\n\031SLInterfaceGe"
    "tNotifStream\022%.service_layer.SLInterface"
    "GetNotifMsg\032\037.service_layer.SLInterfaceN"
    "otif0\001\022_\n\022SLInterfaceNotifOp\022\".service_l"
    "ayer.SLInterfaceNotifMsg\032%.service_layer"
    ".SLInterfaceNotifMsgRspb\006proto3", 2311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl_interface.proto", &protobuf_RegisterTypes);
  SLInterfaceGlobalsRegMsg::default_instance_ = new SLInterfaceGlobalsRegMsg();
  SLInterfaceGlobalsRegMsgRsp::default_instance_ = new SLInterfaceGlobalsRegMsgRsp();
  SLInterfaceGlobalsGetMsg::default_instance_ = new SLInterfaceGlobalsGetMsg();
  SLInterfaceGlobalsGetMsgRsp::default_instance_ = new SLInterfaceGlobalsGetMsgRsp();
  SLInterfaceGlobalsGetStatsMsgRsp::default_instance_ = new SLInterfaceGlobalsGetStatsMsgRsp();
  SLInterfaceGetMsg::default_instance_ = new SLInterfaceGetMsg();
  SLInterfaceInfoMsg::default_instance_ = new SLInterfaceInfoMsg();
  SLInterfaceGetMsgRsp::default_instance_ = new SLInterfaceGetMsgRsp();
  SLInterfaceGetNotifMsg::default_instance_ = new SLInterfaceGetNotifMsg();
  SLInterfaceNotif::default_instance_ = new SLInterfaceNotif();
  SLInterfaceNotif_default_oneof_instance_ = new SLInterfaceNotifOneofInstance();
  SLInterfaceNotifMsg::default_instance_ = new SLInterfaceNotifMsg();
  SLInterfaceNotifMsgRes::default_instance_ = new SLInterfaceNotifMsgRes();
  SLInterfaceNotifMsgRsp::default_instance_ = new SLInterfaceNotifMsgRsp();
  SLInterfaceGlobalsRegMsg::default_instance_->InitAsDefaultInstance();
  SLInterfaceGlobalsRegMsgRsp::default_instance_->InitAsDefaultInstance();
  SLInterfaceGlobalsGetMsg::default_instance_->InitAsDefaultInstance();
  SLInterfaceGlobalsGetMsgRsp::default_instance_->InitAsDefaultInstance();
  SLInterfaceGlobalsGetStatsMsgRsp::default_instance_->InitAsDefaultInstance();
  SLInterfaceGetMsg::default_instance_->InitAsDefaultInstance();
  SLInterfaceInfoMsg::default_instance_->InitAsDefaultInstance();
  SLInterfaceGetMsgRsp::default_instance_->InitAsDefaultInstance();
  SLInterfaceGetNotifMsg::default_instance_->InitAsDefaultInstance();
  SLInterfaceNotif::default_instance_->InitAsDefaultInstance();
  SLInterfaceNotifMsg::default_instance_->InitAsDefaultInstance();
  SLInterfaceNotifMsgRes::default_instance_->InitAsDefaultInstance();
  SLInterfaceNotifMsgRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sl_5finterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sl_5finterface_2eproto {
  StaticDescriptorInitializer_sl_5finterface_2eproto() {
    protobuf_AddDesc_sl_5finterface_2eproto();
  }
} static_descriptor_initializer_sl_5finterface_2eproto_;
const ::google::protobuf::EnumDescriptor* SLInterfaceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceState_descriptor_;
}
bool SLInterfaceState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLInterfaceNotifType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceNotifType_descriptor_;
}
bool SLInterfaceNotifType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceGlobalsRegMsg::kOperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGlobalsRegMsg::SLInterfaceGlobalsRegMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGlobalsRegMsg)
}

void SLInterfaceGlobalsRegMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLInterfaceGlobalsRegMsg::SLInterfaceGlobalsRegMsg(const SLInterfaceGlobalsRegMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsRegMsg)
}

void SLInterfaceGlobalsRegMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oper_ = 0;
}

SLInterfaceGlobalsRegMsg::~SLInterfaceGlobalsRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsRegMsg)
  SharedDtor();
}

void SLInterfaceGlobalsRegMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLInterfaceGlobalsRegMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGlobalsRegMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGlobalsRegMsg_descriptor_;
}

const SLInterfaceGlobalsRegMsg& SLInterfaceGlobalsRegMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGlobalsRegMsg* SLInterfaceGlobalsRegMsg::default_instance_ = NULL;

SLInterfaceGlobalsRegMsg* SLInterfaceGlobalsRegMsg::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGlobalsRegMsg* n = new SLInterfaceGlobalsRegMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGlobalsRegMsg::Clear() {
  oper_ = 0;
}

bool SLInterfaceGlobalsRegMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGlobalsRegMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLRegOp Oper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLRegOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGlobalsRegMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGlobalsRegMsg)
  return false;
#undef DO_
}

void SLInterfaceGlobalsRegMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGlobalsRegMsg)
  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGlobalsRegMsg)
}

::google::protobuf::uint8* SLInterfaceGlobalsRegMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsRegMsg)
  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsRegMsg)
  return target;
}

int SLInterfaceGlobalsRegMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGlobalsRegMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGlobalsRegMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGlobalsRegMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGlobalsRegMsg::MergeFrom(const SLInterfaceGlobalsRegMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLInterfaceGlobalsRegMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGlobalsRegMsg::CopyFrom(const SLInterfaceGlobalsRegMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsRegMsg::IsInitialized() const {

  return true;
}

void SLInterfaceGlobalsRegMsg::Swap(SLInterfaceGlobalsRegMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGlobalsRegMsg::InternalSwap(SLInterfaceGlobalsRegMsg* other) {
  std::swap(oper_, other->oper_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGlobalsRegMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGlobalsRegMsg_descriptor_;
  metadata.reflection = SLInterfaceGlobalsRegMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGlobalsRegMsg

// optional .service_layer.SLRegOp Oper = 1;
void SLInterfaceGlobalsRegMsg::clear_oper() {
  oper_ = 0;
}
 ::service_layer::SLRegOp SLInterfaceGlobalsRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsRegMsg.Oper)
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
 void SLInterfaceGlobalsRegMsg::set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsRegMsg.Oper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceGlobalsRegMsgRsp::kErrStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGlobalsRegMsgRsp::SLInterfaceGlobalsRegMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGlobalsRegMsgRsp)
}

void SLInterfaceGlobalsRegMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLInterfaceGlobalsRegMsgRsp::SLInterfaceGlobalsRegMsgRsp(const SLInterfaceGlobalsRegMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsRegMsgRsp)
}

void SLInterfaceGlobalsRegMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
}

SLInterfaceGlobalsRegMsgRsp::~SLInterfaceGlobalsRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsRegMsgRsp)
  SharedDtor();
}

void SLInterfaceGlobalsRegMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLInterfaceGlobalsRegMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGlobalsRegMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGlobalsRegMsgRsp_descriptor_;
}

const SLInterfaceGlobalsRegMsgRsp& SLInterfaceGlobalsRegMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGlobalsRegMsgRsp* SLInterfaceGlobalsRegMsgRsp::default_instance_ = NULL;

SLInterfaceGlobalsRegMsgRsp* SLInterfaceGlobalsRegMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGlobalsRegMsgRsp* n = new SLInterfaceGlobalsRegMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGlobalsRegMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}

bool SLInterfaceGlobalsRegMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGlobalsRegMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGlobalsRegMsgRsp)
  return false;
#undef DO_
}

void SLInterfaceGlobalsRegMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGlobalsRegMsgRsp)
}

::google::protobuf::uint8* SLInterfaceGlobalsRegMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsRegMsgRsp)
  return target;
}

int SLInterfaceGlobalsRegMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGlobalsRegMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGlobalsRegMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGlobalsRegMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGlobalsRegMsgRsp::MergeFrom(const SLInterfaceGlobalsRegMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLInterfaceGlobalsRegMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGlobalsRegMsgRsp::CopyFrom(const SLInterfaceGlobalsRegMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsRegMsgRsp::IsInitialized() const {

  return true;
}

void SLInterfaceGlobalsRegMsgRsp::Swap(SLInterfaceGlobalsRegMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGlobalsRegMsgRsp::InternalSwap(SLInterfaceGlobalsRegMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGlobalsRegMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGlobalsRegMsgRsp_descriptor_;
  metadata.reflection = SLInterfaceGlobalsRegMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGlobalsRegMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLInterfaceGlobalsRegMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLInterfaceGlobalsRegMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLInterfaceGlobalsRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGlobalsRegMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGlobalsRegMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLInterfaceGlobalsRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGlobalsGetMsg::SLInterfaceGlobalsGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGlobalsGetMsg)
}

void SLInterfaceGlobalsGetMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLInterfaceGlobalsGetMsg::SLInterfaceGlobalsGetMsg(const SLInterfaceGlobalsGetMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsGetMsg)
}

void SLInterfaceGlobalsGetMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SLInterfaceGlobalsGetMsg::~SLInterfaceGlobalsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsGetMsg)
  SharedDtor();
}

void SLInterfaceGlobalsGetMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLInterfaceGlobalsGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGlobalsGetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGlobalsGetMsg_descriptor_;
}

const SLInterfaceGlobalsGetMsg& SLInterfaceGlobalsGetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGlobalsGetMsg* SLInterfaceGlobalsGetMsg::default_instance_ = NULL;

SLInterfaceGlobalsGetMsg* SLInterfaceGlobalsGetMsg::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGlobalsGetMsg* n = new SLInterfaceGlobalsGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGlobalsGetMsg::Clear() {
}

bool SLInterfaceGlobalsGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGlobalsGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGlobalsGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGlobalsGetMsg)
  return false;
#undef DO_
}

void SLInterfaceGlobalsGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGlobalsGetMsg)
  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGlobalsGetMsg)
}

::google::protobuf::uint8* SLInterfaceGlobalsGetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsGetMsg)
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsGetMsg)
  return target;
}

int SLInterfaceGlobalsGetMsg::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGlobalsGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGlobalsGetMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGlobalsGetMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGlobalsGetMsg::MergeFrom(const SLInterfaceGlobalsGetMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SLInterfaceGlobalsGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGlobalsGetMsg::CopyFrom(const SLInterfaceGlobalsGetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsGetMsg::IsInitialized() const {

  return true;
}

void SLInterfaceGlobalsGetMsg::Swap(SLInterfaceGlobalsGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGlobalsGetMsg::InternalSwap(SLInterfaceGlobalsGetMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGlobalsGetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGlobalsGetMsg_descriptor_;
  metadata.reflection = SLInterfaceGlobalsGetMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGlobalsGetMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceGlobalsGetMsgRsp::kErrStatusFieldNumber;
const int SLInterfaceGlobalsGetMsgRsp::kMaxInterfacesPerBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGlobalsGetMsgRsp::SLInterfaceGlobalsGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGlobalsGetMsgRsp)
}

void SLInterfaceGlobalsGetMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLInterfaceGlobalsGetMsgRsp::SLInterfaceGlobalsGetMsgRsp(const SLInterfaceGlobalsGetMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsGetMsgRsp)
}

void SLInterfaceGlobalsGetMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  maxinterfacesperbatch_ = 0u;
}

SLInterfaceGlobalsGetMsgRsp::~SLInterfaceGlobalsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsGetMsgRsp)
  SharedDtor();
}

void SLInterfaceGlobalsGetMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLInterfaceGlobalsGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGlobalsGetMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGlobalsGetMsgRsp_descriptor_;
}

const SLInterfaceGlobalsGetMsgRsp& SLInterfaceGlobalsGetMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGlobalsGetMsgRsp* SLInterfaceGlobalsGetMsgRsp::default_instance_ = NULL;

SLInterfaceGlobalsGetMsgRsp* SLInterfaceGlobalsGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGlobalsGetMsgRsp* n = new SLInterfaceGlobalsGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGlobalsGetMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  maxinterfacesperbatch_ = 0u;
}

bool SLInterfaceGlobalsGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxInterfacesPerBatch;
        break;
      }

      // optional uint32 MaxInterfacesPerBatch = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxInterfacesPerBatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxinterfacesperbatch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGlobalsGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGlobalsGetMsgRsp)
  return false;
#undef DO_
}

void SLInterfaceGlobalsGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional uint32 MaxInterfacesPerBatch = 2;
  if (this->maxinterfacesperbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxinterfacesperbatch(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGlobalsGetMsgRsp)
}

::google::protobuf::uint8* SLInterfaceGlobalsGetMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional uint32 MaxInterfacesPerBatch = 2;
  if (this->maxinterfacesperbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxinterfacesperbatch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsGetMsgRsp)
  return target;
}

int SLInterfaceGlobalsGetMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional uint32 MaxInterfacesPerBatch = 2;
  if (this->maxinterfacesperbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxinterfacesperbatch());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGlobalsGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGlobalsGetMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGlobalsGetMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGlobalsGetMsgRsp::MergeFrom(const SLInterfaceGlobalsGetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.maxinterfacesperbatch() != 0) {
    set_maxinterfacesperbatch(from.maxinterfacesperbatch());
  }
}

void SLInterfaceGlobalsGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGlobalsGetMsgRsp::CopyFrom(const SLInterfaceGlobalsGetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsGetMsgRsp::IsInitialized() const {

  return true;
}

void SLInterfaceGlobalsGetMsgRsp::Swap(SLInterfaceGlobalsGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGlobalsGetMsgRsp::InternalSwap(SLInterfaceGlobalsGetMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(maxinterfacesperbatch_, other->maxinterfacesperbatch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGlobalsGetMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGlobalsGetMsgRsp_descriptor_;
  metadata.reflection = SLInterfaceGlobalsGetMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGlobalsGetMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLInterfaceGlobalsGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLInterfaceGlobalsGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLInterfaceGlobalsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGlobalsGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGlobalsGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLInterfaceGlobalsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
}

// optional uint32 MaxInterfacesPerBatch = 2;
void SLInterfaceGlobalsGetMsgRsp::clear_maxinterfacesperbatch() {
  maxinterfacesperbatch_ = 0u;
}
 ::google::protobuf::uint32 SLInterfaceGlobalsGetMsgRsp::maxinterfacesperbatch() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetMsgRsp.MaxInterfacesPerBatch)
  return maxinterfacesperbatch_;
}
 void SLInterfaceGlobalsGetMsgRsp::set_maxinterfacesperbatch(::google::protobuf::uint32 value) {
  
  maxinterfacesperbatch_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetMsgRsp.MaxInterfacesPerBatch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceGlobalsGetStatsMsgRsp::kErrStatusFieldNumber;
const int SLInterfaceGlobalsGetStatsMsgRsp::kSeqNumFieldNumber;
const int SLInterfaceGlobalsGetStatsMsgRsp::kInterfaceNotifCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGlobalsGetStatsMsgRsp::SLInterfaceGlobalsGetStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
}

void SLInterfaceGlobalsGetStatsMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLInterfaceGlobalsGetStatsMsgRsp::SLInterfaceGlobalsGetStatsMsgRsp(const SLInterfaceGlobalsGetStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
}

void SLInterfaceGlobalsGetStatsMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  seqnum_ = GOOGLE_ULONGLONG(0);
  interfacenotifcount_ = 0u;
}

SLInterfaceGlobalsGetStatsMsgRsp::~SLInterfaceGlobalsGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  SharedDtor();
}

void SLInterfaceGlobalsGetStatsMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLInterfaceGlobalsGetStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGlobalsGetStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGlobalsGetStatsMsgRsp_descriptor_;
}

const SLInterfaceGlobalsGetStatsMsgRsp& SLInterfaceGlobalsGetStatsMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGlobalsGetStatsMsgRsp* SLInterfaceGlobalsGetStatsMsgRsp::default_instance_ = NULL;

SLInterfaceGlobalsGetStatsMsgRsp* SLInterfaceGlobalsGetStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGlobalsGetStatsMsgRsp* n = new SLInterfaceGlobalsGetStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGlobalsGetStatsMsgRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLInterfaceGlobalsGetStatsMsgRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seqnum_, interfacenotifcount_);
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLInterfaceGlobalsGetStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SeqNum;
        break;
      }

      // optional uint64 SeqNum = 2;
      case 2: {
        if (tag == 16) {
         parse_SeqNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seqnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_InterfaceNotifCount;
        break;
      }

      // optional uint32 InterfaceNotifCount = 3;
      case 3: {
        if (tag == 24) {
         parse_InterfaceNotifCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interfacenotifcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  return false;
#undef DO_
}

void SLInterfaceGlobalsGetStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seqnum(), output);
  }

  // optional uint32 InterfaceNotifCount = 3;
  if (this->interfacenotifcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->interfacenotifcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
}

::google::protobuf::uint8* SLInterfaceGlobalsGetStatsMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seqnum(), target);
  }

  // optional uint32 InterfaceNotifCount = 3;
  if (this->interfacenotifcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->interfacenotifcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  return target;
}

int SLInterfaceGlobalsGetStatsMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional uint64 SeqNum = 2;
  if (this->seqnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seqnum());
  }

  // optional uint32 InterfaceNotifCount = 3;
  if (this->interfacenotifcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interfacenotifcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGlobalsGetStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGlobalsGetStatsMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGlobalsGetStatsMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGlobalsGetStatsMsgRsp::MergeFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.seqnum() != 0) {
    set_seqnum(from.seqnum());
  }
  if (from.interfacenotifcount() != 0) {
    set_interfacenotifcount(from.interfacenotifcount());
  }
}

void SLInterfaceGlobalsGetStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGlobalsGetStatsMsgRsp::CopyFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsGetStatsMsgRsp::IsInitialized() const {

  return true;
}

void SLInterfaceGlobalsGetStatsMsgRsp::Swap(SLInterfaceGlobalsGetStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGlobalsGetStatsMsgRsp::InternalSwap(SLInterfaceGlobalsGetStatsMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(seqnum_, other->seqnum_);
  std::swap(interfacenotifcount_, other->interfacenotifcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGlobalsGetStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGlobalsGetStatsMsgRsp_descriptor_;
  metadata.reflection = SLInterfaceGlobalsGetStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGlobalsGetStatsMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLInterfaceGlobalsGetStatsMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLInterfaceGlobalsGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLInterfaceGlobalsGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGlobalsGetStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGlobalsGetStatsMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLInterfaceGlobalsGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
}

// optional uint64 SeqNum = 2;
void SLInterfaceGlobalsGetStatsMsgRsp::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLInterfaceGlobalsGetStatsMsgRsp::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.SeqNum)
  return seqnum_;
}
 void SLInterfaceGlobalsGetStatsMsgRsp::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.SeqNum)
}

// optional uint32 InterfaceNotifCount = 3;
void SLInterfaceGlobalsGetStatsMsgRsp::clear_interfacenotifcount() {
  interfacenotifcount_ = 0u;
}
 ::google::protobuf::uint32 SLInterfaceGlobalsGetStatsMsgRsp::interfacenotifcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.InterfaceNotifCount)
  return interfacenotifcount_;
}
 void SLInterfaceGlobalsGetStatsMsgRsp::set_interfacenotifcount(::google::protobuf::uint32 value) {
  
  interfacenotifcount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.InterfaceNotifCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceGetMsg::kKeyFieldNumber;
const int SLInterfaceGetMsg::kEntriesCountFieldNumber;
const int SLInterfaceGetMsg::kGetNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGetMsg::SLInterfaceGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGetMsg)
}

void SLInterfaceGetMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::service_layer::SLInterface*>(&::service_layer::SLInterface::default_instance());
}

SLInterfaceGetMsg::SLInterfaceGetMsg(const SLInterfaceGetMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGetMsg)
}

void SLInterfaceGetMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
  entriescount_ = 0u;
  getnext_ = false;
}

SLInterfaceGetMsg::~SLInterfaceGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGetMsg)
  SharedDtor();
}

void SLInterfaceGetMsg::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void SLInterfaceGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGetMsg_descriptor_;
}

const SLInterfaceGetMsg& SLInterfaceGetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGetMsg* SLInterfaceGetMsg::default_instance_ = NULL;

SLInterfaceGetMsg* SLInterfaceGetMsg::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGetMsg* n = new SLInterfaceGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGetMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLInterfaceGetMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(entriescount_, getnext_);
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLInterfaceGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLInterface Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EntriesCount;
        break;
      }

      // optional uint32 EntriesCount = 2;
      case 2: {
        if (tag == 16) {
         parse_EntriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entriescount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GetNext;
        break;
      }

      // optional bool GetNext = 3;
      case 3: {
        if (tag == 24) {
         parse_GetNext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getnext_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGetMsg)
  return false;
#undef DO_
}

void SLInterfaceGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGetMsg)
  // optional .service_layer.SLInterface Key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entriescount(), output);
  }

  // optional bool GetNext = 3;
  if (this->getnext() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->getnext(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGetMsg)
}

::google::protobuf::uint8* SLInterfaceGetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGetMsg)
  // optional .service_layer.SLInterface Key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->key_, target);
  }

  // optional uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entriescount(), target);
  }

  // optional bool GetNext = 3;
  if (this->getnext() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->getnext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGetMsg)
  return target;
}

int SLInterfaceGetMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLInterface Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entriescount());
  }

  // optional bool GetNext = 3;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGetMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGetMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGetMsg::MergeFrom(const SLInterfaceGetMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_key()) {
    mutable_key()->::service_layer::SLInterface::MergeFrom(from.key());
  }
  if (from.entriescount() != 0) {
    set_entriescount(from.entriescount());
  }
  if (from.getnext() != 0) {
    set_getnext(from.getnext());
  }
}

void SLInterfaceGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGetMsg::CopyFrom(const SLInterfaceGetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGetMsg::IsInitialized() const {

  return true;
}

void SLInterfaceGetMsg::Swap(SLInterfaceGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGetMsg::InternalSwap(SLInterfaceGetMsg* other) {
  std::swap(key_, other->key_);
  std::swap(entriescount_, other->entriescount_);
  std::swap(getnext_, other->getnext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGetMsg_descriptor_;
  metadata.reflection = SLInterfaceGetMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGetMsg

// optional .service_layer.SLInterface Key = 1;
bool SLInterfaceGetMsg::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLInterfaceGetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLInterface& SLInterfaceGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLInterface* SLInterfaceGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsg.Key)
  return key_;
}
::service_layer::SLInterface* SLInterfaceGetMsg::release_key() {
  
  ::service_layer::SLInterface* temp = key_;
  key_ = NULL;
  return temp;
}
void SLInterfaceGetMsg::set_allocated_key(::service_layer::SLInterface* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGetMsg.Key)
}

// optional uint32 EntriesCount = 2;
void SLInterfaceGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
 ::google::protobuf::uint32 SLInterfaceGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.EntriesCount)
  return entriescount_;
}
 void SLInterfaceGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsg.EntriesCount)
}

// optional bool GetNext = 3;
void SLInterfaceGetMsg::clear_getnext() {
  getnext_ = false;
}
 bool SLInterfaceGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.GetNext)
  return getnext_;
}
 void SLInterfaceGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsg.GetNext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceInfoMsg::kSLIfInfoFieldNumber;
const int SLInterfaceInfoMsg::kIfStateFieldNumber;
const int SLInterfaceInfoMsg::kSeqNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceInfoMsg::SLInterfaceInfoMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceInfoMsg)
}

void SLInterfaceInfoMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  slifinfo_ = const_cast< ::service_layer::SLInterface*>(&::service_layer::SLInterface::default_instance());
}

SLInterfaceInfoMsg::SLInterfaceInfoMsg(const SLInterfaceInfoMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceInfoMsg)
}

void SLInterfaceInfoMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  slifinfo_ = NULL;
  ifstate_ = 0;
  seqnum_ = GOOGLE_ULONGLONG(0);
}

SLInterfaceInfoMsg::~SLInterfaceInfoMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceInfoMsg)
  SharedDtor();
}

void SLInterfaceInfoMsg::SharedDtor() {
  if (this != default_instance_) {
    delete slifinfo_;
  }
}

void SLInterfaceInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceInfoMsg_descriptor_;
}

const SLInterfaceInfoMsg& SLInterfaceInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceInfoMsg* SLInterfaceInfoMsg::default_instance_ = NULL;

SLInterfaceInfoMsg* SLInterfaceInfoMsg::New(::google::protobuf::Arena* arena) const {
  SLInterfaceInfoMsg* n = new SLInterfaceInfoMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceInfoMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLInterfaceInfoMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seqnum_, ifstate_);
  if (GetArenaNoVirtual() == NULL && slifinfo_ != NULL) delete slifinfo_;
  slifinfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLInterfaceInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceInfoMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLInterface SLIfInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slifinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IfState;
        break;
      }

      // optional .service_layer.SLInterfaceState IfState = 2;
      case 2: {
        if (tag == 16) {
         parse_IfState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ifstate(static_cast< ::service_layer::SLInterfaceState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SeqNum;
        break;
      }

      // optional uint64 SeqNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SeqNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seqnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceInfoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceInfoMsg)
  return false;
#undef DO_
}

void SLInterfaceInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceInfoMsg)
  // optional .service_layer.SLInterface SLIfInfo = 1;
  if (this->has_slifinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->slifinfo_, output);
  }

  // optional .service_layer.SLInterfaceState IfState = 2;
  if (this->ifstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ifstate(), output);
  }

  // optional uint64 SeqNum = 3;
  if (this->seqnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seqnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceInfoMsg)
}

::google::protobuf::uint8* SLInterfaceInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceInfoMsg)
  // optional .service_layer.SLInterface SLIfInfo = 1;
  if (this->has_slifinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->slifinfo_, target);
  }

  // optional .service_layer.SLInterfaceState IfState = 2;
  if (this->ifstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ifstate(), target);
  }

  // optional uint64 SeqNum = 3;
  if (this->seqnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seqnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceInfoMsg)
  return target;
}

int SLInterfaceInfoMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLInterface SLIfInfo = 1;
  if (this->has_slifinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slifinfo_);
  }

  // optional .service_layer.SLInterfaceState IfState = 2;
  if (this->ifstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ifstate());
  }

  // optional uint64 SeqNum = 3;
  if (this->seqnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seqnum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceInfoMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceInfoMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceInfoMsg::MergeFrom(const SLInterfaceInfoMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_slifinfo()) {
    mutable_slifinfo()->::service_layer::SLInterface::MergeFrom(from.slifinfo());
  }
  if (from.ifstate() != 0) {
    set_ifstate(from.ifstate());
  }
  if (from.seqnum() != 0) {
    set_seqnum(from.seqnum());
  }
}

void SLInterfaceInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceInfoMsg::CopyFrom(const SLInterfaceInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceInfoMsg::IsInitialized() const {

  return true;
}

void SLInterfaceInfoMsg::Swap(SLInterfaceInfoMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceInfoMsg::InternalSwap(SLInterfaceInfoMsg* other) {
  std::swap(slifinfo_, other->slifinfo_);
  std::swap(ifstate_, other->ifstate_);
  std::swap(seqnum_, other->seqnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceInfoMsg_descriptor_;
  metadata.reflection = SLInterfaceInfoMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceInfoMsg

// optional .service_layer.SLInterface SLIfInfo = 1;
bool SLInterfaceInfoMsg::has_slifinfo() const {
  return !_is_default_instance_ && slifinfo_ != NULL;
}
void SLInterfaceInfoMsg::clear_slifinfo() {
  if (GetArenaNoVirtual() == NULL && slifinfo_ != NULL) delete slifinfo_;
  slifinfo_ = NULL;
}
const ::service_layer::SLInterface& SLInterfaceInfoMsg::slifinfo() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  return slifinfo_ != NULL ? *slifinfo_ : *default_instance_->slifinfo_;
}
::service_layer::SLInterface* SLInterfaceInfoMsg::mutable_slifinfo() {
  
  if (slifinfo_ == NULL) {
    slifinfo_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  return slifinfo_;
}
::service_layer::SLInterface* SLInterfaceInfoMsg::release_slifinfo() {
  
  ::service_layer::SLInterface* temp = slifinfo_;
  slifinfo_ = NULL;
  return temp;
}
void SLInterfaceInfoMsg::set_allocated_slifinfo(::service_layer::SLInterface* slifinfo) {
  delete slifinfo_;
  slifinfo_ = slifinfo;
  if (slifinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceInfoMsg.SLIfInfo)
}

// optional .service_layer.SLInterfaceState IfState = 2;
void SLInterfaceInfoMsg::clear_ifstate() {
  ifstate_ = 0;
}
 ::service_layer::SLInterfaceState SLInterfaceInfoMsg::ifstate() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.IfState)
  return static_cast< ::service_layer::SLInterfaceState >(ifstate_);
}
 void SLInterfaceInfoMsg::set_ifstate(::service_layer::SLInterfaceState value) {
  
  ifstate_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceInfoMsg.IfState)
}

// optional uint64 SeqNum = 3;
void SLInterfaceInfoMsg::clear_seqnum() {
  seqnum_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLInterfaceInfoMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.SeqNum)
  return seqnum_;
}
 void SLInterfaceInfoMsg::set_seqnum(::google::protobuf::uint64 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceInfoMsg.SeqNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceGetMsgRsp::kEofFieldNumber;
const int SLInterfaceGetMsgRsp::kErrStatusFieldNumber;
const int SLInterfaceGetMsgRsp::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGetMsgRsp::SLInterfaceGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGetMsgRsp)
}

void SLInterfaceGetMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLInterfaceGetMsgRsp::SLInterfaceGetMsgRsp(const SLInterfaceGetMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGetMsgRsp)
}

void SLInterfaceGetMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eof_ = false;
  errstatus_ = NULL;
}

SLInterfaceGetMsgRsp::~SLInterfaceGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGetMsgRsp)
  SharedDtor();
}

void SLInterfaceGetMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLInterfaceGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGetMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGetMsgRsp_descriptor_;
}

const SLInterfaceGetMsgRsp& SLInterfaceGetMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGetMsgRsp* SLInterfaceGetMsgRsp::default_instance_ = NULL;

SLInterfaceGetMsgRsp* SLInterfaceGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGetMsgRsp* n = new SLInterfaceGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGetMsgRsp::Clear() {
  eof_ = false;
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  entries_.Clear();
}

bool SLInterfaceGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Eof = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ErrStatus;
        break;
      }

      // optional .service_layer.SLErrorStatus ErrStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_ErrStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Entries;
        break;
      }

      // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
      case 3: {
        if (tag == 26) {
         parse_Entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGetMsgRsp)
  return false;
#undef DO_
}

void SLInterfaceGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGetMsgRsp)
  // optional bool Eof = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->eof(), output);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->errstatus_, output);
  }

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGetMsgRsp)
}

::google::protobuf::uint8* SLInterfaceGetMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGetMsgRsp)
  // optional bool Eof = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->eof(), target);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->errstatus_, target);
  }

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGetMsgRsp)
  return target;
}

int SLInterfaceGetMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGetMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGetMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGetMsgRsp::MergeFrom(const SLInterfaceGetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entries_.MergeFrom(from.entries_);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLInterfaceGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGetMsgRsp::CopyFrom(const SLInterfaceGetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGetMsgRsp::IsInitialized() const {

  return true;
}

void SLInterfaceGetMsgRsp::Swap(SLInterfaceGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGetMsgRsp::InternalSwap(SLInterfaceGetMsgRsp* other) {
  std::swap(eof_, other->eof_);
  std::swap(errstatus_, other->errstatus_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGetMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGetMsgRsp_descriptor_;
  metadata.reflection = SLInterfaceGetMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGetMsgRsp

// optional bool Eof = 1;
void SLInterfaceGetMsgRsp::clear_eof() {
  eof_ = false;
}
 bool SLInterfaceGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.Eof)
  return eof_;
}
 void SLInterfaceGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsgRsp.Eof)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
bool SLInterfaceGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLInterfaceGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLInterfaceGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLInterfaceGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
int SLInterfaceGetMsgRsp::entries_size() const {
  return entries_.size();
}
void SLInterfaceGetMsgRsp::clear_entries() {
  entries_.Clear();
}
const ::service_layer::SLInterfaceInfoMsg& SLInterfaceGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Get(index);
}
::service_layer::SLInterfaceInfoMsg* SLInterfaceGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
::service_layer::SLInterfaceInfoMsg* SLInterfaceGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >*
SLInterfaceGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceGetMsgRsp.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >&
SLInterfaceGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceGetNotifMsg::SLInterfaceGetNotifMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceGetNotifMsg)
}

void SLInterfaceGetNotifMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLInterfaceGetNotifMsg::SLInterfaceGetNotifMsg(const SLInterfaceGetNotifMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGetNotifMsg)
}

void SLInterfaceGetNotifMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SLInterfaceGetNotifMsg::~SLInterfaceGetNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGetNotifMsg)
  SharedDtor();
}

void SLInterfaceGetNotifMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLInterfaceGetNotifMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceGetNotifMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceGetNotifMsg_descriptor_;
}

const SLInterfaceGetNotifMsg& SLInterfaceGetNotifMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceGetNotifMsg* SLInterfaceGetNotifMsg::default_instance_ = NULL;

SLInterfaceGetNotifMsg* SLInterfaceGetNotifMsg::New(::google::protobuf::Arena* arena) const {
  SLInterfaceGetNotifMsg* n = new SLInterfaceGetNotifMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceGetNotifMsg::Clear() {
}

bool SLInterfaceGetNotifMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceGetNotifMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceGetNotifMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceGetNotifMsg)
  return false;
#undef DO_
}

void SLInterfaceGetNotifMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceGetNotifMsg)
  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceGetNotifMsg)
}

::google::protobuf::uint8* SLInterfaceGetNotifMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGetNotifMsg)
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGetNotifMsg)
  return target;
}

int SLInterfaceGetNotifMsg::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceGetNotifMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceGetNotifMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceGetNotifMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceGetNotifMsg::MergeFrom(const SLInterfaceGetNotifMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SLInterfaceGetNotifMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceGetNotifMsg::CopyFrom(const SLInterfaceGetNotifMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGetNotifMsg::IsInitialized() const {

  return true;
}

void SLInterfaceGetNotifMsg::Swap(SLInterfaceGetNotifMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceGetNotifMsg::InternalSwap(SLInterfaceGetNotifMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceGetNotifMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceGetNotifMsg_descriptor_;
  metadata.reflection = SLInterfaceGetNotifMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGetNotifMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceNotif::kEventTypeFieldNumber;
const int SLInterfaceNotif::kErrStatusFieldNumber;
const int SLInterfaceNotif::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceNotif::SLInterfaceNotif()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceNotif)
}

void SLInterfaceNotif::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SLInterfaceNotif_default_oneof_instance_->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
  SLInterfaceNotif_default_oneof_instance_->info_ = const_cast< ::service_layer::SLInterfaceInfoMsg*>(&::service_layer::SLInterfaceInfoMsg::default_instance());
}

SLInterfaceNotif::SLInterfaceNotif(const SLInterfaceNotif& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotif)
}

void SLInterfaceNotif::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eventtype_ = 0;
  clear_has_Event();
}

SLInterfaceNotif::~SLInterfaceNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotif)
  SharedDtor();
}

void SLInterfaceNotif::SharedDtor() {
  if (has_Event()) {
    clear_Event();
  }
  if (this != default_instance_) {
  }
}

void SLInterfaceNotif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceNotif::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceNotif_descriptor_;
}

const SLInterfaceNotif& SLInterfaceNotif::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceNotif* SLInterfaceNotif::default_instance_ = NULL;

SLInterfaceNotif* SLInterfaceNotif::New(::google::protobuf::Arena* arena) const {
  SLInterfaceNotif* n = new SLInterfaceNotif;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceNotif::clear_Event() {
  switch(Event_case()) {
    case kErrStatus: {
      delete Event_.errstatus_;
      break;
    }
    case kInfo: {
      delete Event_.info_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLInterfaceNotif::Clear() {
  eventtype_ = 0;
  clear_Event();
}

bool SLInterfaceNotif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceNotif)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLInterfaceNotifType EventType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eventtype(static_cast< ::service_layer::SLInterfaceNotifType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ErrStatus;
        break;
      }

      // optional .service_layer.SLErrorStatus ErrStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_ErrStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Info;
        break;
      }

      // optional .service_layer.SLInterfaceInfoMsg Info = 3;
      case 3: {
        if (tag == 26) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceNotif)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceNotif)
  return false;
#undef DO_
}

void SLInterfaceNotif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceNotif)
  // optional .service_layer.SLInterfaceNotifType EventType = 1;
  if (this->eventtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eventtype(), output);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Event_.errstatus_, output);
  }

  // optional .service_layer.SLInterfaceInfoMsg Info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Event_.info_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceNotif)
}

::google::protobuf::uint8* SLInterfaceNotif::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotif)
  // optional .service_layer.SLInterfaceNotifType EventType = 1;
  if (this->eventtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eventtype(), target);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *Event_.errstatus_, target);
  }

  // optional .service_layer.SLInterfaceInfoMsg Info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *Event_.info_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotif)
  return target;
}

int SLInterfaceNotif::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLInterfaceNotifType EventType = 1;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
  }

  switch (Event_case()) {
    // optional .service_layer.SLErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Event_.errstatus_);
      break;
    }
    // optional .service_layer.SLInterfaceInfoMsg Info = 3;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Event_.info_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceNotif::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceNotif* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceNotif>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceNotif::MergeFrom(const SLInterfaceNotif& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Event_case()) {
    case kErrStatus: {
      mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
      break;
    }
    case kInfo: {
      mutable_info()->::service_layer::SLInterfaceInfoMsg::MergeFrom(from.info());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (from.eventtype() != 0) {
    set_eventtype(from.eventtype());
  }
}

void SLInterfaceNotif::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceNotif::CopyFrom(const SLInterfaceNotif& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotif::IsInitialized() const {

  return true;
}

void SLInterfaceNotif::Swap(SLInterfaceNotif* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceNotif::InternalSwap(SLInterfaceNotif* other) {
  std::swap(eventtype_, other->eventtype_);
  std::swap(Event_, other->Event_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceNotif::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceNotif_descriptor_;
  metadata.reflection = SLInterfaceNotif_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceNotif

// optional .service_layer.SLInterfaceNotifType EventType = 1;
void SLInterfaceNotif::clear_eventtype() {
  eventtype_ = 0;
}
 ::service_layer::SLInterfaceNotifType SLInterfaceNotif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.EventType)
  return static_cast< ::service_layer::SLInterfaceNotifType >(eventtype_);
}
 void SLInterfaceNotif::set_eventtype(::service_layer::SLInterfaceNotifType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceNotif.EventType)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
bool SLInterfaceNotif::has_errstatus() const {
  return Event_case() == kErrStatus;
}
void SLInterfaceNotif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
void SLInterfaceNotif::clear_errstatus() {
  if (has_errstatus()) {
    delete Event_.errstatus_;
    clear_has_Event();
  }
}
 const ::service_layer::SLErrorStatus& SLInterfaceNotif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.ErrStatus)
  return has_errstatus()
      ? *Event_.errstatus_
      : ::service_layer::SLErrorStatus::default_instance();
}
::service_layer::SLErrorStatus* SLInterfaceNotif::mutable_errstatus() {
  if (!has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotif.ErrStatus)
  return Event_.errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceNotif::release_errstatus() {
  if (has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SLInterfaceNotif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.ErrStatus)
}

// optional .service_layer.SLInterfaceInfoMsg Info = 3;
bool SLInterfaceNotif::has_info() const {
  return Event_case() == kInfo;
}
void SLInterfaceNotif::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void SLInterfaceNotif::clear_info() {
  if (has_info()) {
    delete Event_.info_;
    clear_has_Event();
  }
}
 const ::service_layer::SLInterfaceInfoMsg& SLInterfaceNotif::info() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.Info)
  return has_info()
      ? *Event_.info_
      : ::service_layer::SLInterfaceInfoMsg::default_instance();
}
::service_layer::SLInterfaceInfoMsg* SLInterfaceNotif::mutable_info() {
  if (!has_info()) {
    clear_Event();
    set_has_info();
    Event_.info_ = new ::service_layer::SLInterfaceInfoMsg;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotif.Info)
  return Event_.info_;
}
::service_layer::SLInterfaceInfoMsg* SLInterfaceNotif::release_info() {
  if (has_info()) {
    clear_has_Event();
    ::service_layer::SLInterfaceInfoMsg* temp = Event_.info_;
    Event_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SLInterfaceNotif::set_allocated_info(::service_layer::SLInterfaceInfoMsg* info) {
  clear_Event();
  if (info) {
    set_has_info();
    Event_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.Info)
}

bool SLInterfaceNotif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
void SLInterfaceNotif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
SLInterfaceNotif::EventCase SLInterfaceNotif::Event_case() const {
  return SLInterfaceNotif::EventCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceNotifMsg::kOperFieldNumber;
const int SLInterfaceNotifMsg::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceNotifMsg::SLInterfaceNotifMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceNotifMsg)
}

void SLInterfaceNotifMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLInterfaceNotifMsg::SLInterfaceNotifMsg(const SLInterfaceNotifMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsg)
}

void SLInterfaceNotifMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oper_ = 0;
}

SLInterfaceNotifMsg::~SLInterfaceNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsg)
  SharedDtor();
}

void SLInterfaceNotifMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLInterfaceNotifMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceNotifMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceNotifMsg_descriptor_;
}

const SLInterfaceNotifMsg& SLInterfaceNotifMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceNotifMsg* SLInterfaceNotifMsg::default_instance_ = NULL;

SLInterfaceNotifMsg* SLInterfaceNotifMsg::New(::google::protobuf::Arena* arena) const {
  SLInterfaceNotifMsg* n = new SLInterfaceNotifMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceNotifMsg::Clear() {
  oper_ = 0;
  entries_.Clear();
}

bool SLInterfaceNotifMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceNotifMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLNotifOp Oper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLNotifOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Entries;
        break;
      }

      // repeated .service_layer.SLInterface Entries = 2;
      case 2: {
        if (tag == 18) {
         parse_Entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceNotifMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceNotifMsg)
  return false;
#undef DO_
}

void SLInterfaceNotifMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceNotifMsg)
  // optional .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // repeated .service_layer.SLInterface Entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceNotifMsg)
}

::google::protobuf::uint8* SLInterfaceNotifMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsg)
  // optional .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // repeated .service_layer.SLInterface Entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsg)
  return target;
}

int SLInterfaceNotifMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  // repeated .service_layer.SLInterface Entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceNotifMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceNotifMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceNotifMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceNotifMsg::MergeFrom(const SLInterfaceNotifMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entries_.MergeFrom(from.entries_);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLInterfaceNotifMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceNotifMsg::CopyFrom(const SLInterfaceNotifMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsg::IsInitialized() const {

  return true;
}

void SLInterfaceNotifMsg::Swap(SLInterfaceNotifMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceNotifMsg::InternalSwap(SLInterfaceNotifMsg* other) {
  std::swap(oper_, other->oper_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceNotifMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceNotifMsg_descriptor_;
  metadata.reflection = SLInterfaceNotifMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceNotifMsg

// optional .service_layer.SLNotifOp Oper = 1;
void SLInterfaceNotifMsg::clear_oper() {
  oper_ = 0;
}
 ::service_layer::SLNotifOp SLInterfaceNotifMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsg.Oper)
  return static_cast< ::service_layer::SLNotifOp >(oper_);
}
 void SLInterfaceNotifMsg::set_oper(::service_layer::SLNotifOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceNotifMsg.Oper)
}

// repeated .service_layer.SLInterface Entries = 2;
int SLInterfaceNotifMsg::entries_size() const {
  return entries_.size();
}
void SLInterfaceNotifMsg::clear_entries() {
  entries_.Clear();
}
const ::service_layer::SLInterface& SLInterfaceNotifMsg::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Get(index);
}
::service_layer::SLInterface* SLInterfaceNotifMsg::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Mutable(index);
}
::service_layer::SLInterface* SLInterfaceNotifMsg::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >*
SLInterfaceNotifMsg::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceNotifMsg.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >&
SLInterfaceNotifMsg::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceNotifMsgRes::kErrStatusFieldNumber;
const int SLInterfaceNotifMsgRes::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceNotifMsgRes)
}

void SLInterfaceNotifMsgRes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
  key_ = const_cast< ::service_layer::SLInterface*>(&::service_layer::SLInterface::default_instance());
}

SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(const SLInterfaceNotifMsgRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgRes)
}

void SLInterfaceNotifMsgRes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  key_ = NULL;
}

SLInterfaceNotifMsgRes::~SLInterfaceNotifMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgRes)
  SharedDtor();
}

void SLInterfaceNotifMsgRes::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
    delete key_;
  }
}

void SLInterfaceNotifMsgRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceNotifMsgRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceNotifMsgRes_descriptor_;
}

const SLInterfaceNotifMsgRes& SLInterfaceNotifMsgRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRes::default_instance_ = NULL;

SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRes::New(::google::protobuf::Arena* arena) const {
  SLInterfaceNotifMsgRes* n = new SLInterfaceNotifMsgRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceNotifMsgRes::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool SLInterfaceNotifMsgRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceNotifMsgRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // optional .service_layer.SLInterface Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceNotifMsgRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceNotifMsgRes)
  return false;
#undef DO_
}

void SLInterfaceNotifMsgRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceNotifMsgRes)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional .service_layer.SLInterface Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceNotifMsgRes)
}

::google::protobuf::uint8* SLInterfaceNotifMsgRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgRes)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional .service_layer.SLInterface Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgRes)
  return target;
}

int SLInterfaceNotifMsgRes::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional .service_layer.SLInterface Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceNotifMsgRes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceNotifMsgRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceNotifMsgRes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceNotifMsgRes::MergeFrom(const SLInterfaceNotifMsgRes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.has_key()) {
    mutable_key()->::service_layer::SLInterface::MergeFrom(from.key());
  }
}

void SLInterfaceNotifMsgRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceNotifMsgRes::CopyFrom(const SLInterfaceNotifMsgRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgRes::IsInitialized() const {

  return true;
}

void SLInterfaceNotifMsgRes::Swap(SLInterfaceNotifMsgRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceNotifMsgRes::InternalSwap(SLInterfaceNotifMsgRes* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceNotifMsgRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceNotifMsgRes_descriptor_;
  metadata.reflection = SLInterfaceNotifMsgRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceNotifMsgRes

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLInterfaceNotifMsgRes::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLInterfaceNotifMsgRes::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLInterfaceNotifMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceNotifMsgRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLInterfaceNotifMsgRes::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLInterfaceNotifMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
}

// optional .service_layer.SLInterface Key = 2;
bool SLInterfaceNotifMsgRes::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLInterfaceNotifMsgRes::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLInterface& SLInterfaceNotifMsgRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRes.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLInterface* SLInterfaceNotifMsgRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRes.Key)
  return key_;
}
::service_layer::SLInterface* SLInterfaceNotifMsgRes::release_key() {
  
  ::service_layer::SLInterface* temp = key_;
  key_ = NULL;
  return temp;
}
void SLInterfaceNotifMsgRes::set_allocated_key(::service_layer::SLInterface* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRes.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLInterfaceNotifMsgRsp::kStatusSummaryFieldNumber;
const int SLInterfaceNotifMsgRsp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLInterfaceNotifMsgRsp::SLInterfaceNotifMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLInterfaceNotifMsgRsp)
}

void SLInterfaceNotifMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLInterfaceNotifMsgRsp::SLInterfaceNotifMsgRsp(const SLInterfaceNotifMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgRsp)
}

void SLInterfaceNotifMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  statussummary_ = NULL;
}

SLInterfaceNotifMsgRsp::~SLInterfaceNotifMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgRsp)
  SharedDtor();
}

void SLInterfaceNotifMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete statussummary_;
  }
}

void SLInterfaceNotifMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLInterfaceNotifMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLInterfaceNotifMsgRsp_descriptor_;
}

const SLInterfaceNotifMsgRsp& SLInterfaceNotifMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5finterface_2eproto();
  return *default_instance_;
}

SLInterfaceNotifMsgRsp* SLInterfaceNotifMsgRsp::default_instance_ = NULL;

SLInterfaceNotifMsgRsp* SLInterfaceNotifMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLInterfaceNotifMsgRsp* n = new SLInterfaceNotifMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLInterfaceNotifMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
  results_.Clear();
}

bool SLInterfaceNotifMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLInterfaceNotifMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus StatusSummary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statussummary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Results;
        break;
      }

      // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
      case 2: {
        if (tag == 18) {
         parse_Results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLInterfaceNotifMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLInterfaceNotifMsgRsp)
  return false;
#undef DO_
}

void SLInterfaceNotifMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLInterfaceNotifMsgRsp)
  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statussummary_, output);
  }

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLInterfaceNotifMsgRsp)
}

::google::protobuf::uint8* SLInterfaceNotifMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgRsp)
  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->statussummary_, target);
  }

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgRsp)
  return target;
}

int SLInterfaceNotifMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statussummary_);
  }

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLInterfaceNotifMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLInterfaceNotifMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLInterfaceNotifMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLInterfaceNotifMsgRsp::MergeFrom(const SLInterfaceNotifMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from.statussummary());
  }
}

void SLInterfaceNotifMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLInterfaceNotifMsgRsp::CopyFrom(const SLInterfaceNotifMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgRsp::IsInitialized() const {

  return true;
}

void SLInterfaceNotifMsgRsp::Swap(SLInterfaceNotifMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLInterfaceNotifMsgRsp::InternalSwap(SLInterfaceNotifMsgRsp* other) {
  std::swap(statussummary_, other->statussummary_);
  results_.UnsafeArenaSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLInterfaceNotifMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLInterfaceNotifMsgRsp_descriptor_;
  metadata.reflection = SLInterfaceNotifMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceNotifMsgRsp

// optional .service_layer.SLErrorStatus StatusSummary = 1;
bool SLInterfaceNotifMsgRsp::has_statussummary() const {
  return !_is_default_instance_ && statussummary_ != NULL;
}
void SLInterfaceNotifMsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
const ::service_layer::SLErrorStatus& SLInterfaceNotifMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_ : *default_instance_->statussummary_;
}
::service_layer::SLErrorStatus* SLInterfaceNotifMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  return statussummary_;
}
::service_layer::SLErrorStatus* SLInterfaceNotifMsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
void SLInterfaceNotifMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
}

// repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
int SLInterfaceNotifMsgRsp::results_size() const {
  return results_.size();
}
void SLInterfaceNotifMsgRsp::clear_results() {
  results_.Clear();
}
const ::service_layer::SLInterfaceNotifMsgRes& SLInterfaceNotifMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Get(index);
}
::service_layer::SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Mutable(index);
}
::service_layer::SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >*
SLInterfaceNotifMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceNotifMsgRsp.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >&
SLInterfaceNotifMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)
