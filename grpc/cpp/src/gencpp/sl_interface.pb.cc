// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_interface.proto

#include "sl_interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLInterfaceInfoMsgBw::SLInterfaceInfoMsgBw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : newbandwidth_(uint64_t{0u})
  , oldbandwidth_(uint64_t{0u}){}
struct SLInterfaceInfoMsgBwDefaultTypeInternal {
  constexpr SLInterfaceInfoMsgBwDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceInfoMsgBwDefaultTypeInternal() {}
  union {
    SLInterfaceInfoMsgBw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceInfoMsgBwDefaultTypeInternal _SLInterfaceInfoMsgBw_default_instance_;
constexpr SLInterfaceInfoMsg::SLInterfaceInfoMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slifinfo_(nullptr)
  , timestamp_(int64_t{0})
  , ifstate_(0)

  , _oneof_case_{}{}
struct SLInterfaceInfoMsgDefaultTypeInternal {
  constexpr SLInterfaceInfoMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceInfoMsgDefaultTypeInternal() {}
  union {
    SLInterfaceInfoMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceInfoMsgDefaultTypeInternal _SLInterfaceInfoMsg_default_instance_;
constexpr SLInterfaceNotifMsgEntry::SLInterfaceNotifMsgEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , _states_cached_byte_size_(0)
  , interface_(nullptr)
  , operationid_(uint64_t{0u})
  , regex_(false){}
struct SLInterfaceNotifMsgEntryDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgEntryDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsgEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgEntryDefaultTypeInternal _SLInterfaceNotifMsgEntry_default_instance_;
constexpr SLInterfaceNotifMsg::SLInterfaceNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , oper_(0)
{}
struct SLInterfaceNotifMsgDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgDefaultTypeInternal _SLInterfaceNotifMsg_default_instance_;
constexpr SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , key_(nullptr)
  , operationid_(uint64_t{0u}){}
struct SLInterfaceNotifMsgResDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgResDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsgRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgResDefaultTypeInternal _SLInterfaceNotifMsgRes_default_instance_;
constexpr SLInterfaceNotifMsgErr::SLInterfaceNotifMsgErr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(){}
struct SLInterfaceNotifMsgErrDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgErrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgErrDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsgErr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgErrDefaultTypeInternal _SLInterfaceNotifMsgErr_default_instance_;
constexpr SLInterfaceNotif::SLInterfaceNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLInterfaceNotifDefaultTypeInternal {
  constexpr SLInterfaceNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifDefaultTypeInternal() {}
  union {
    SLInterfaceNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifDefaultTypeInternal _SLInterfaceNotif_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5finterface_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5finterface_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5finterface_2eproto = nullptr;

const uint32_t TableStruct_sl_5finterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsgBw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsgBw, newbandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsgBw, oldbandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, slifinfo_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, ifstate_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgEntry, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgEntry, regex_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgEntry, interface_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgEntry, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsg, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgErr, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, Event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLInterfaceInfoMsgBw)},
  { 8, -1, -1, sizeof(::service_layer::SLInterfaceInfoMsg)},
  { 19, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsgEntry)},
  { 29, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsg)},
  { 37, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsgRes)},
  { 46, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsgErr)},
  { 53, -1, -1, sizeof(::service_layer::SLInterfaceNotif)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceInfoMsgBw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceInfoMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsgEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsgErr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotif_default_instance_),
};

const char descriptor_table_protodef_sl_5finterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022sl_interface.proto\022\rservice_layer\032\025sl_"
  "common_types.proto\"B\n\024SLInterfaceInfoMsg"
  "Bw\022\024\n\014NewBandwidth\030\001 \001(\004\022\024\n\014OldBandwidth"
  "\030\002 \001(\004\"\307\001\n\022SLInterfaceInfoMsg\022,\n\010SLIfInf"
  "o\030\001 \001(\0132\032.service_layer.SLInterface\0220\n\007I"
  "fState\030\002 \001(\0162\037.service_layer.SLInterface"
  "State\022\021\n\tTimestamp\030\003 \001(\003\0225\n\006BwInfo\030\n \001(\013"
  "2#.service_layer.SLInterfaceInfoMsgBwH\000B"
  "\007\n\005Value\"\236\001\n\030SLInterfaceNotifMsgEntry\022\023\n"
  "\013OperationId\030\001 \001(\004\022\r\n\005Regex\030\002 \001(\010\022-\n\tInt"
  "erface\030\003 \001(\0132\032.service_layer.SLInterface"
  "\022/\n\006States\030\004 \003(\0162\037.service_layer.SLInter"
  "faceState\"w\n\023SLInterfaceNotifMsg\022&\n\004Oper"
  "\030\001 \001(\0162\030.service_layer.SLNotifOp\0228\n\007Entr"
  "ies\030\002 \003(\0132\'.service_layer.SLInterfaceNot"
  "ifMsgEntry\"\207\001\n\026SLInterfaceNotifMsgRes\022\023\n"
  "\013OperationId\030\001 \001(\004\022/\n\tErrStatus\030\002 \001(\0132\034."
  "service_layer.SLErrorStatus\022\'\n\003Key\030\003 \001(\013"
  "2\032.service_layer.SLInterface\"P\n\026SLInterf"
  "aceNotifMsgErr\0226\n\007Details\030\001 \003(\0132%.servic"
  "e_layer.SLInterfaceNotifMsgRes\"\206\001\n\020SLInt"
  "erfaceNotif\0226\n\005Error\030\001 \001(\0132%.service_lay"
  "er.SLInterfaceNotifMsgErrH\000\0221\n\004Info\030\002 \001("
  "\0132!.service_layer.SLInterfaceInfoMsgH\000B\007"
  "\n\005Event*\243\001\n\020SLInterfaceState\022\027\n\023SL_IF_ST"
  "ATE_UNKNOWN\020\000\022\027\n\023SL_IF_STATE_CREATED\020\001\022\024"
  "\n\020SL_IF_STATE_DOWN\020\002\022\022\n\016SL_IF_STATE_UP\020\003"
  "\022\027\n\023SL_IF_STATE_DELETED\020\004\022\032\n\026SL_IF_STATE"
  "_BW_CHANGED\020\0052t\n\017SLInterfaceOper\022a\n\026SLIn"
  "terfaceNotifStream\022\".service_layer.SLInt"
  "erfaceNotifMsg\032\037.service_layer.SLInterfa"
  "ceNotif(\0010\001BQZOgithub.com/Cisco-service-"
  "layer/service-layer-objmodel/grpc/protos"
  ";service_layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5finterface_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5finterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5finterface_2eproto = {
  false, false, 1342, descriptor_table_protodef_sl_5finterface_2eproto, "sl_interface.proto", 
  &descriptor_table_sl_5finterface_2eproto_once, descriptor_table_sl_5finterface_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_sl_5finterface_2eproto::offsets,
  file_level_metadata_sl_5finterface_2eproto, file_level_enum_descriptors_sl_5finterface_2eproto, file_level_service_descriptors_sl_5finterface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5finterface_2eproto_getter() {
  return &descriptor_table_sl_5finterface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5finterface_2eproto(&descriptor_table_sl_5finterface_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLInterfaceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5finterface_2eproto);
  return file_level_enum_descriptors_sl_5finterface_2eproto[0];
}
bool SLInterfaceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLInterfaceInfoMsgBw::_Internal {
 public:
};

SLInterfaceInfoMsgBw::SLInterfaceInfoMsgBw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceInfoMsgBw)
}
SLInterfaceInfoMsgBw::SLInterfaceInfoMsgBw(const SLInterfaceInfoMsgBw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&newbandwidth_, &from.newbandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&oldbandwidth_) -
    reinterpret_cast<char*>(&newbandwidth_)) + sizeof(oldbandwidth_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceInfoMsgBw)
}

inline void SLInterfaceInfoMsgBw::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&newbandwidth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oldbandwidth_) -
    reinterpret_cast<char*>(&newbandwidth_)) + sizeof(oldbandwidth_));
}

SLInterfaceInfoMsgBw::~SLInterfaceInfoMsgBw() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceInfoMsgBw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceInfoMsgBw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLInterfaceInfoMsgBw::ArenaDtor(void* object) {
  SLInterfaceInfoMsgBw* _this = reinterpret_cast< SLInterfaceInfoMsgBw* >(object);
  (void)_this;
}
void SLInterfaceInfoMsgBw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceInfoMsgBw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceInfoMsgBw::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceInfoMsgBw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&newbandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oldbandwidth_) -
      reinterpret_cast<char*>(&newbandwidth_)) + sizeof(oldbandwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceInfoMsgBw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 NewBandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          newbandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 OldBandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          oldbandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceInfoMsgBw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceInfoMsgBw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 NewBandwidth = 1;
  if (this->_internal_newbandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_newbandwidth(), target);
  }

  // uint64 OldBandwidth = 2;
  if (this->_internal_oldbandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_oldbandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceInfoMsgBw)
  return target;
}

size_t SLInterfaceInfoMsgBw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceInfoMsgBw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 NewBandwidth = 1;
  if (this->_internal_newbandwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_newbandwidth());
  }

  // uint64 OldBandwidth = 2;
  if (this->_internal_oldbandwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_oldbandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceInfoMsgBw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceInfoMsgBw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceInfoMsgBw::GetClassData() const { return &_class_data_; }

void SLInterfaceInfoMsgBw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceInfoMsgBw *>(to)->MergeFrom(
      static_cast<const SLInterfaceInfoMsgBw &>(from));
}


void SLInterfaceInfoMsgBw::MergeFrom(const SLInterfaceInfoMsgBw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceInfoMsgBw)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_newbandwidth() != 0) {
    _internal_set_newbandwidth(from._internal_newbandwidth());
  }
  if (from._internal_oldbandwidth() != 0) {
    _internal_set_oldbandwidth(from._internal_oldbandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceInfoMsgBw::CopyFrom(const SLInterfaceInfoMsgBw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceInfoMsgBw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceInfoMsgBw::IsInitialized() const {
  return true;
}

void SLInterfaceInfoMsgBw::InternalSwap(SLInterfaceInfoMsgBw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceInfoMsgBw, oldbandwidth_)
      + sizeof(SLInterfaceInfoMsgBw::oldbandwidth_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceInfoMsgBw, newbandwidth_)>(
          reinterpret_cast<char*>(&newbandwidth_),
          reinterpret_cast<char*>(&other->newbandwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceInfoMsgBw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[0]);
}

// ===================================================================

class SLInterfaceInfoMsg::_Internal {
 public:
  static const ::service_layer::SLInterface& slifinfo(const SLInterfaceInfoMsg* msg);
  static const ::service_layer::SLInterfaceInfoMsgBw& bwinfo(const SLInterfaceInfoMsg* msg);
};

const ::service_layer::SLInterface&
SLInterfaceInfoMsg::_Internal::slifinfo(const SLInterfaceInfoMsg* msg) {
  return *msg->slifinfo_;
}
const ::service_layer::SLInterfaceInfoMsgBw&
SLInterfaceInfoMsg::_Internal::bwinfo(const SLInterfaceInfoMsg* msg) {
  return *msg->Value_.bwinfo_;
}
void SLInterfaceInfoMsg::clear_slifinfo() {
  if (GetArenaForAllocation() == nullptr && slifinfo_ != nullptr) {
    delete slifinfo_;
  }
  slifinfo_ = nullptr;
}
void SLInterfaceInfoMsg::set_allocated_bwinfo(::service_layer::SLInterfaceInfoMsgBw* bwinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (bwinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLInterfaceInfoMsgBw>::GetOwningArena(bwinfo);
    if (message_arena != submessage_arena) {
      bwinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bwinfo, submessage_arena);
    }
    set_has_bwinfo();
    Value_.bwinfo_ = bwinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceInfoMsg.BwInfo)
}
SLInterfaceInfoMsg::SLInterfaceInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceInfoMsg)
}
SLInterfaceInfoMsg::SLInterfaceInfoMsg(const SLInterfaceInfoMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slifinfo()) {
    slifinfo_ = new ::service_layer::SLInterface(*from.slifinfo_);
  } else {
    slifinfo_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ifstate_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(ifstate_));
  clear_has_Value();
  switch (from.Value_case()) {
    case kBwInfo: {
      _internal_mutable_bwinfo()->::service_layer::SLInterfaceInfoMsgBw::MergeFrom(from._internal_bwinfo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceInfoMsg)
}

inline void SLInterfaceInfoMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slifinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ifstate_) -
    reinterpret_cast<char*>(&slifinfo_)) + sizeof(ifstate_));
clear_has_Value();
}

SLInterfaceInfoMsg::~SLInterfaceInfoMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceInfoMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceInfoMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slifinfo_;
  if (has_Value()) {
    clear_Value();
  }
}

void SLInterfaceInfoMsg::ArenaDtor(void* object) {
  SLInterfaceInfoMsg* _this = reinterpret_cast< SLInterfaceInfoMsg* >(object);
  (void)_this;
}
void SLInterfaceInfoMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceInfoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceInfoMsg::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLInterfaceInfoMsg)
  switch (Value_case()) {
    case kBwInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete Value_.bwinfo_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SLInterfaceInfoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceInfoMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && slifinfo_ != nullptr) {
    delete slifinfo_;
  }
  slifinfo_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ifstate_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ifstate_));
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceInfoMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterface SLIfInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slifinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterfaceState IfState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ifstate(static_cast<::service_layer::SLInterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 Timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterfaceInfoMsgBw BwInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bwinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceInfoMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceInfoMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterface SLIfInfo = 1;
  if (this->_internal_has_slifinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slifinfo(this), target, stream);
  }

  // .service_layer.SLInterfaceState IfState = 2;
  if (this->_internal_ifstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ifstate(), target);
  }

  // int64 Timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .service_layer.SLInterfaceInfoMsgBw BwInfo = 10;
  if (_internal_has_bwinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bwinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceInfoMsg)
  return target;
}

size_t SLInterfaceInfoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceInfoMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLInterface SLIfInfo = 1;
  if (this->_internal_has_slifinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slifinfo_);
  }

  // int64 Timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .service_layer.SLInterfaceState IfState = 2;
  if (this->_internal_ifstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ifstate());
  }

  switch (Value_case()) {
    // .service_layer.SLInterfaceInfoMsgBw BwInfo = 10;
    case kBwInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.bwinfo_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceInfoMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceInfoMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceInfoMsg::GetClassData() const { return &_class_data_; }

void SLInterfaceInfoMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceInfoMsg *>(to)->MergeFrom(
      static_cast<const SLInterfaceInfoMsg &>(from));
}


void SLInterfaceInfoMsg::MergeFrom(const SLInterfaceInfoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slifinfo()) {
    _internal_mutable_slifinfo()->::service_layer::SLInterface::MergeFrom(from._internal_slifinfo());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_ifstate() != 0) {
    _internal_set_ifstate(from._internal_ifstate());
  }
  switch (from.Value_case()) {
    case kBwInfo: {
      _internal_mutable_bwinfo()->::service_layer::SLInterfaceInfoMsgBw::MergeFrom(from._internal_bwinfo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceInfoMsg::CopyFrom(const SLInterfaceInfoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceInfoMsg::IsInitialized() const {
  return true;
}

void SLInterfaceInfoMsg::InternalSwap(SLInterfaceInfoMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceInfoMsg, ifstate_)
      + sizeof(SLInterfaceInfoMsg::ifstate_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceInfoMsg, slifinfo_)>(
          reinterpret_cast<char*>(&slifinfo_),
          reinterpret_cast<char*>(&other->slifinfo_));
  swap(Value_, other->Value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceInfoMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[1]);
}

// ===================================================================

class SLInterfaceNotifMsgEntry::_Internal {
 public:
  static const ::service_layer::SLInterface& interface(const SLInterfaceNotifMsgEntry* msg);
};

const ::service_layer::SLInterface&
SLInterfaceNotifMsgEntry::_Internal::interface(const SLInterfaceNotifMsgEntry* msg) {
  return *msg->interface_;
}
void SLInterfaceNotifMsgEntry::clear_interface() {
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
SLInterfaceNotifMsgEntry::SLInterfaceNotifMsgEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsgEntry)
}
SLInterfaceNotifMsgEntry::SLInterfaceNotifMsgEntry(const SLInterfaceNotifMsgEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::service_layer::SLInterface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&regex_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(regex_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgEntry)
}

inline void SLInterfaceNotifMsgEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&regex_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(regex_));
}

SLInterfaceNotifMsgEntry::~SLInterfaceNotifMsgEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsgEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void SLInterfaceNotifMsgEntry::ArenaDtor(void* object) {
  SLInterfaceNotifMsgEntry* _this = reinterpret_cast< SLInterfaceNotifMsgEntry* >(object);
  (void)_this;
}
void SLInterfaceNotifMsgEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsgEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsgEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsgEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&regex_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(regex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsgEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 OperationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          regex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterface Interface = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLInterfaceState States = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_states(static_cast<::service_layer::SLInterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsgEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 OperationId = 1;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_operationid(), target);
  }

  // bool Regex = 2;
  if (this->_internal_regex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_regex(), target);
  }

  // .service_layer.SLInterface Interface = 3;
  if (this->_internal_has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interface(this), target, stream);
  }

  // repeated .service_layer.SLInterfaceState States = 4;
  {
    int byte_size = _states_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, states_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgEntry)
  return target;
}

size_t SLInterfaceNotifMsgEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsgEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLInterfaceState States = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_states_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_states(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .service_layer.SLInterface Interface = 3;
  if (this->_internal_has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  // uint64 OperationId = 1;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  // bool Regex = 2;
  if (this->_internal_regex() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsgEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsgEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsgEntry::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsgEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsgEntry *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsgEntry &>(from));
}


void SLInterfaceNotifMsgEntry::MergeFrom(const SLInterfaceNotifMsgEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsgEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from._internal_has_interface()) {
    _internal_mutable_interface()->::service_layer::SLInterface::MergeFrom(from._internal_interface());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from._internal_regex() != 0) {
    _internal_set_regex(from._internal_regex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsgEntry::CopyFrom(const SLInterfaceNotifMsgEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsgEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgEntry::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsgEntry::InternalSwap(SLInterfaceNotifMsgEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceNotifMsgEntry, regex_)
      + sizeof(SLInterfaceNotifMsgEntry::regex_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceNotifMsgEntry, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsgEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[2]);
}

// ===================================================================

class SLInterfaceNotifMsg::_Internal {
 public:
};

SLInterfaceNotifMsg::SLInterfaceNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsg)
}
SLInterfaceNotifMsg::SLInterfaceNotifMsg(const SLInterfaceNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsg)
}

inline void SLInterfaceNotifMsg::SharedCtor() {
oper_ = 0;
}

SLInterfaceNotifMsg::~SLInterfaceNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLInterfaceNotifMsg::ArenaDtor(void* object) {
  SLInterfaceNotifMsg* _this = reinterpret_cast< SLInterfaceNotifMsg* >(object);
  (void)_this;
}
void SLInterfaceNotifMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLNotifOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLNotifOp>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLInterfaceNotifMsgEntry Entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLInterfaceNotifMsgEntry Entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsg)
  return target;
}

size_t SLInterfaceNotifMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLInterfaceNotifMsgEntry Entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLNotifOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsg::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsg *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsg &>(from));
}


void SLInterfaceNotifMsg::MergeFrom(const SLInterfaceNotifMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsg::CopyFrom(const SLInterfaceNotifMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsg::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsg::InternalSwap(SLInterfaceNotifMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[3]);
}

// ===================================================================

class SLInterfaceNotifMsgRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceNotifMsgRes* msg);
  static const ::service_layer::SLInterface& key(const SLInterfaceNotifMsgRes* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceNotifMsgRes::_Internal::errstatus(const SLInterfaceNotifMsgRes* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLInterface&
SLInterfaceNotifMsgRes::_Internal::key(const SLInterfaceNotifMsgRes* msg) {
  return *msg->key_;
}
void SLInterfaceNotifMsgRes::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
void SLInterfaceNotifMsgRes::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsgRes)
}
SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(const SLInterfaceNotifMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLInterface(*from.key_);
  } else {
    key_ = nullptr;
  }
  operationid_ = from.operationid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgRes)
}

inline void SLInterfaceNotifMsgRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operationid_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(operationid_));
}

SLInterfaceNotifMsgRes::~SLInterfaceNotifMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete key_;
}

void SLInterfaceNotifMsgRes::ArenaDtor(void* object) {
  SLInterfaceNotifMsgRes* _this = reinterpret_cast< SLInterfaceNotifMsgRes* >(object);
  (void)_this;
}
void SLInterfaceNotifMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsgRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  operationid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 OperationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterface Key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsgRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 OperationId = 1;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_operationid(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLInterface Key = 3;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgRes)
  return target;
}

size_t SLInterfaceNotifMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsgRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLInterface Key = 3;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint64 OperationId = 1;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsgRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsgRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsgRes::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsgRes *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsgRes &>(from));
}


void SLInterfaceNotifMsgRes::MergeFrom(const SLInterfaceNotifMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLInterface::MergeFrom(from._internal_key());
  }
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsgRes::CopyFrom(const SLInterfaceNotifMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgRes::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsgRes::InternalSwap(SLInterfaceNotifMsgRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceNotifMsgRes, operationid_)
      + sizeof(SLInterfaceNotifMsgRes::operationid_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceNotifMsgRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsgRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[4]);
}

// ===================================================================

class SLInterfaceNotifMsgErr::_Internal {
 public:
};

SLInterfaceNotifMsgErr::SLInterfaceNotifMsgErr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  details_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsgErr)
}
SLInterfaceNotifMsgErr::SLInterfaceNotifMsgErr(const SLInterfaceNotifMsgErr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      details_(from.details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgErr)
}

inline void SLInterfaceNotifMsgErr::SharedCtor() {
}

SLInterfaceNotifMsgErr::~SLInterfaceNotifMsgErr() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgErr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsgErr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLInterfaceNotifMsgErr::ArenaDtor(void* object) {
  SLInterfaceNotifMsgErr* _this = reinterpret_cast< SLInterfaceNotifMsgErr* >(object);
  (void)_this;
}
void SLInterfaceNotifMsgErr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsgErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsgErr::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsgErr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsgErr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLInterfaceNotifMsgRes Details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsgErr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgErr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLInterfaceNotifMsgRes Details = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgErr)
  return target;
}

size_t SLInterfaceNotifMsgErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsgErr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLInterfaceNotifMsgRes Details = 1;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsgErr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsgErr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsgErr::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsgErr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsgErr *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsgErr &>(from));
}


void SLInterfaceNotifMsgErr::MergeFrom(const SLInterfaceNotifMsgErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsgErr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsgErr::CopyFrom(const SLInterfaceNotifMsgErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsgErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgErr::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsgErr::InternalSwap(SLInterfaceNotifMsgErr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  details_.InternalSwap(&other->details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsgErr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[5]);
}

// ===================================================================

class SLInterfaceNotif::_Internal {
 public:
  static const ::service_layer::SLInterfaceNotifMsgErr& error(const SLInterfaceNotif* msg);
  static const ::service_layer::SLInterfaceInfoMsg& info(const SLInterfaceNotif* msg);
};

const ::service_layer::SLInterfaceNotifMsgErr&
SLInterfaceNotif::_Internal::error(const SLInterfaceNotif* msg) {
  return *msg->Event_.error_;
}
const ::service_layer::SLInterfaceInfoMsg&
SLInterfaceNotif::_Internal::info(const SLInterfaceNotif* msg) {
  return *msg->Event_.info_;
}
void SLInterfaceNotif::set_allocated_error(::service_layer::SLInterfaceNotifMsgErr* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLInterfaceNotifMsgErr>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    Event_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.Error)
}
void SLInterfaceNotif::set_allocated_info(::service_layer::SLInterfaceInfoMsg* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLInterfaceInfoMsg>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    Event_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.Info)
}
SLInterfaceNotif::SLInterfaceNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotif)
}
SLInterfaceNotif::SLInterfaceNotif(const SLInterfaceNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Event();
  switch (from.Event_case()) {
    case kError: {
      _internal_mutable_error()->::service_layer::SLInterfaceNotifMsgErr::MergeFrom(from._internal_error());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::service_layer::SLInterfaceInfoMsg::MergeFrom(from._internal_info());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotif)
}

inline void SLInterfaceNotif::SharedCtor() {
clear_has_Event();
}

SLInterfaceNotif::~SLInterfaceNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotif)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLInterfaceNotif::ArenaDtor(void* object) {
  SLInterfaceNotif* _this = reinterpret_cast< SLInterfaceNotif* >(object);
  (void)_this;
}
void SLInterfaceNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLInterfaceNotif)
  switch (Event_case()) {
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.error_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.info_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLInterfaceNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotif)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterfaceNotifMsgErr Error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterfaceInfoMsg Info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotif::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotif)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterfaceNotifMsgErr Error = 1;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  // .service_layer.SLInterfaceInfoMsg Info = 2;
  if (_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotif)
  return target;
}

size_t SLInterfaceNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotif)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Event_case()) {
    // .service_layer.SLInterfaceNotifMsgErr Error = 1;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.error_);
      break;
    }
    // .service_layer.SLInterfaceInfoMsg Info = 2;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.info_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotif::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotif::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotif::GetClassData() const { return &_class_data_; }

void SLInterfaceNotif::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotif *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotif &>(from));
}


void SLInterfaceNotif::MergeFrom(const SLInterfaceNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotif)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Event_case()) {
    case kError: {
      _internal_mutable_error()->::service_layer::SLInterfaceNotifMsgErr::MergeFrom(from._internal_error());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::service_layer::SLInterfaceInfoMsg::MergeFrom(from._internal_info());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotif::CopyFrom(const SLInterfaceNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotif::IsInitialized() const {
  return true;
}

void SLInterfaceNotif::InternalSwap(SLInterfaceNotif* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotif::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceInfoMsgBw* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceInfoMsgBw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceInfoMsgBw >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceInfoMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceInfoMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceInfoMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsgEntry* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsgEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsgEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsgErr* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsgErr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsgErr >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotif* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotif >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
