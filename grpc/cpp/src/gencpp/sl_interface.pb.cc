// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_interface.proto

#include "sl_interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLInterfaceGlobalsRegMsg::SLInterfaceGlobalsRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oper_(0)
{}
struct SLInterfaceGlobalsRegMsgDefaultTypeInternal {
  constexpr SLInterfaceGlobalsRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGlobalsRegMsgDefaultTypeInternal() {}
  union {
    SLInterfaceGlobalsRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGlobalsRegMsgDefaultTypeInternal _SLInterfaceGlobalsRegMsg_default_instance_;
constexpr SLInterfaceGlobalsRegMsgRsp::SLInterfaceGlobalsRegMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr){}
struct SLInterfaceGlobalsRegMsgRspDefaultTypeInternal {
  constexpr SLInterfaceGlobalsRegMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGlobalsRegMsgRspDefaultTypeInternal() {}
  union {
    SLInterfaceGlobalsRegMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGlobalsRegMsgRspDefaultTypeInternal _SLInterfaceGlobalsRegMsgRsp_default_instance_;
constexpr SLInterfaceGlobalsGetMsg::SLInterfaceGlobalsGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLInterfaceGlobalsGetMsgDefaultTypeInternal {
  constexpr SLInterfaceGlobalsGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGlobalsGetMsgDefaultTypeInternal() {}
  union {
    SLInterfaceGlobalsGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGlobalsGetMsgDefaultTypeInternal _SLInterfaceGlobalsGetMsg_default_instance_;
constexpr SLInterfaceGlobalsGetMsgRsp::SLInterfaceGlobalsGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , maxinterfacesperbatch_(0u){}
struct SLInterfaceGlobalsGetMsgRspDefaultTypeInternal {
  constexpr SLInterfaceGlobalsGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGlobalsGetMsgRspDefaultTypeInternal() {}
  union {
    SLInterfaceGlobalsGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGlobalsGetMsgRspDefaultTypeInternal _SLInterfaceGlobalsGetMsgRsp_default_instance_;
constexpr SLInterfaceGlobalsGetStatsMsgRsp::SLInterfaceGlobalsGetStatsMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , seqnum_(uint64_t{0u})
  , interfacenotifcount_(0u){}
struct SLInterfaceGlobalsGetStatsMsgRspDefaultTypeInternal {
  constexpr SLInterfaceGlobalsGetStatsMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGlobalsGetStatsMsgRspDefaultTypeInternal() {}
  union {
    SLInterfaceGlobalsGetStatsMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGlobalsGetStatsMsgRspDefaultTypeInternal _SLInterfaceGlobalsGetStatsMsgRsp_default_instance_;
constexpr SLInterfaceGetMsg::SLInterfaceGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , entriescount_(0u)
  , getnext_(false){}
struct SLInterfaceGetMsgDefaultTypeInternal {
  constexpr SLInterfaceGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGetMsgDefaultTypeInternal() {}
  union {
    SLInterfaceGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGetMsgDefaultTypeInternal _SLInterfaceGetMsg_default_instance_;
constexpr SLInterfaceInfoMsg::SLInterfaceInfoMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slifinfo_(nullptr)
  , seqnum_(uint64_t{0u})
  , ifstate_(0)
{}
struct SLInterfaceInfoMsgDefaultTypeInternal {
  constexpr SLInterfaceInfoMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceInfoMsgDefaultTypeInternal() {}
  union {
    SLInterfaceInfoMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceInfoMsgDefaultTypeInternal _SLInterfaceInfoMsg_default_instance_;
constexpr SLInterfaceGetMsgRsp::SLInterfaceGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , errstatus_(nullptr)
  , eof_(false){}
struct SLInterfaceGetMsgRspDefaultTypeInternal {
  constexpr SLInterfaceGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGetMsgRspDefaultTypeInternal() {}
  union {
    SLInterfaceGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGetMsgRspDefaultTypeInternal _SLInterfaceGetMsgRsp_default_instance_;
constexpr SLInterfaceGetNotifMsg::SLInterfaceGetNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLInterfaceGetNotifMsgDefaultTypeInternal {
  constexpr SLInterfaceGetNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceGetNotifMsgDefaultTypeInternal() {}
  union {
    SLInterfaceGetNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceGetNotifMsgDefaultTypeInternal _SLInterfaceGetNotifMsg_default_instance_;
constexpr SLInterfaceNotif::SLInterfaceNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventtype_(0)

  , _oneof_case_{}{}
struct SLInterfaceNotifDefaultTypeInternal {
  constexpr SLInterfaceNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifDefaultTypeInternal() {}
  union {
    SLInterfaceNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifDefaultTypeInternal _SLInterfaceNotif_default_instance_;
constexpr SLInterfaceNotifMsg::SLInterfaceNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , oper_(0)
{}
struct SLInterfaceNotifMsgDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgDefaultTypeInternal _SLInterfaceNotifMsg_default_instance_;
constexpr SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , key_(nullptr){}
struct SLInterfaceNotifMsgResDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgResDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsgRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgResDefaultTypeInternal _SLInterfaceNotifMsgRes_default_instance_;
constexpr SLInterfaceNotifMsgRsp::SLInterfaceNotifMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr){}
struct SLInterfaceNotifMsgRspDefaultTypeInternal {
  constexpr SLInterfaceNotifMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLInterfaceNotifMsgRspDefaultTypeInternal() {}
  union {
    SLInterfaceNotifMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLInterfaceNotifMsgRspDefaultTypeInternal _SLInterfaceNotifMsgRsp_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5finterface_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5finterface_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5finterface_2eproto = nullptr;

const uint32_t TableStruct_sl_5finterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsRegMsg, oper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsRegMsgRsp, errstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetMsgRsp, maxinterfacesperbatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetStatsMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetStatsMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetStatsMsgRsp, seqnum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGlobalsGetStatsMsgRsp, interfacenotifcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, slifinfo_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, ifstate_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceInfoMsg, seqnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceGetNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, eventtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotif, Event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsg, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRes, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLInterfaceNotifMsgRsp, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLInterfaceGlobalsRegMsg)},
  { 7, -1, -1, sizeof(::service_layer::SLInterfaceGlobalsRegMsgRsp)},
  { 14, -1, -1, sizeof(::service_layer::SLInterfaceGlobalsGetMsg)},
  { 20, -1, -1, sizeof(::service_layer::SLInterfaceGlobalsGetMsgRsp)},
  { 28, -1, -1, sizeof(::service_layer::SLInterfaceGlobalsGetStatsMsgRsp)},
  { 37, -1, -1, sizeof(::service_layer::SLInterfaceGetMsg)},
  { 46, -1, -1, sizeof(::service_layer::SLInterfaceInfoMsg)},
  { 55, -1, -1, sizeof(::service_layer::SLInterfaceGetMsgRsp)},
  { 64, -1, -1, sizeof(::service_layer::SLInterfaceGetNotifMsg)},
  { 70, -1, -1, sizeof(::service_layer::SLInterfaceNotif)},
  { 80, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsg)},
  { 88, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsgRes)},
  { 96, -1, -1, sizeof(::service_layer::SLInterfaceNotifMsgRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGlobalsRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGlobalsRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGlobalsGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGlobalsGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGlobalsGetStatsMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceInfoMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceGetNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLInterfaceNotifMsgRsp_default_instance_),
};

const char descriptor_table_protodef_sl_5finterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022sl_interface.proto\022\rservice_layer\032\025sl_"
  "common_types.proto\"@\n\030SLInterfaceGlobals"
  "RegMsg\022$\n\004Oper\030\001 \001(\0162\026.service_layer.SLR"
  "egOp\"N\n\033SLInterfaceGlobalsRegMsgRsp\022/\n\tE"
  "rrStatus\030\001 \001(\0132\034.service_layer.SLErrorSt"
  "atus\"\032\n\030SLInterfaceGlobalsGetMsg\"m\n\033SLIn"
  "terfaceGlobalsGetMsgRsp\022/\n\tErrStatus\030\001 \001"
  "(\0132\034.service_layer.SLErrorStatus\022\035\n\025MaxI"
  "nterfacesPerBatch\030\002 \001(\r\"\200\001\n SLInterfaceG"
  "lobalsGetStatsMsgRsp\022/\n\tErrStatus\030\001 \001(\0132"
  "\034.service_layer.SLErrorStatus\022\016\n\006SeqNum\030"
  "\002 \001(\004\022\033\n\023InterfaceNotifCount\030\003 \001(\r\"c\n\021SL"
  "InterfaceGetMsg\022\'\n\003Key\030\001 \001(\0132\032.service_l"
  "ayer.SLInterface\022\024\n\014EntriesCount\030\002 \001(\r\022\017"
  "\n\007GetNext\030\003 \001(\010\"\204\001\n\022SLInterfaceInfoMsg\022,"
  "\n\010SLIfInfo\030\001 \001(\0132\032.service_layer.SLInter"
  "face\0220\n\007IfState\030\002 \001(\0162\037.service_layer.SL"
  "InterfaceState\022\016\n\006SeqNum\030\003 \001(\004\"\210\001\n\024SLInt"
  "erfaceGetMsgRsp\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatu"
  "s\030\002 \001(\0132\034.service_layer.SLErrorStatus\0222\n"
  "\007Entries\030\003 \003(\0132!.service_layer.SLInterfa"
  "ceInfoMsg\"\030\n\026SLInterfaceGetNotifMsg\"\271\001\n\020"
  "SLInterfaceNotif\0226\n\tEventType\030\001 \001(\0162#.se"
  "rvice_layer.SLInterfaceNotifType\0221\n\tErrS"
  "tatus\030\002 \001(\0132\034.service_layer.SLErrorStatu"
  "sH\000\0221\n\004Info\030\003 \001(\0132!.service_layer.SLInte"
  "rfaceInfoMsgH\000B\007\n\005Event\"j\n\023SLInterfaceNo"
  "tifMsg\022&\n\004Oper\030\001 \001(\0162\030.service_layer.SLN"
  "otifOp\022+\n\007Entries\030\002 \003(\0132\032.service_layer."
  "SLInterface\"r\n\026SLInterfaceNotifMsgRes\022/\n"
  "\tErrStatus\030\001 \001(\0132\034.service_layer.SLError"
  "Status\022\'\n\003Key\030\002 \001(\0132\032.service_layer.SLIn"
  "terface\"\205\001\n\026SLInterfaceNotifMsgRsp\0223\n\rSt"
  "atusSummary\030\001 \001(\0132\034.service_layer.SLErro"
  "rStatus\0226\n\007Results\030\002 \003(\0132%.service_layer"
  ".SLInterfaceNotifMsgRes*U\n\020SLInterfaceSt"
  "ate\022\027\n\023SL_IF_STATE_UNKNOWN\020\000\022\024\n\020SL_IF_ST"
  "ATE_DOWN\020\001\022\022\n\016SL_IF_STATE_UP\020\002*\213\001\n\024SLInt"
  "erfaceNotifType\022$\n SL_INTERFACE_EVENT_TY"
  "PE_RESERVED\020\000\022!\n\035SL_INTERFACE_EVENT_TYPE"
  "_ERROR\020\001\022*\n&SL_INTERFACE_EVENT_TYPE_INTE"
  "RFACE_INFO\020\0022\210\005\n\017SLInterfaceOper\022n\n\027SLIn"
  "terfaceGlobalsRegOp\022\'.service_layer.SLIn"
  "terfaceGlobalsRegMsg\032*.service_layer.SLI"
  "nterfaceGlobalsRegMsgRsp\022l\n\025SLInterfaceG"
  "lobalsGet\022\'.service_layer.SLInterfaceGlo"
  "balsGetMsg\032*.service_layer.SLInterfaceGl"
  "obalsGetMsgRsp\022v\n\032SLInterfaceGlobalsGetS"
  "tats\022\'.service_layer.SLInterfaceGlobalsG"
  "etMsg\032/.service_layer.SLInterfaceGlobals"
  "GetStatsMsgRsp\022W\n\016SLInterfaceGet\022 .servi"
  "ce_layer.SLInterfaceGetMsg\032#.service_lay"
  "er.SLInterfaceGetMsgRsp\022e\n\031SLInterfaceGe"
  "tNotifStream\022%.service_layer.SLInterface"
  "GetNotifMsg\032\037.service_layer.SLInterfaceN"
  "otif0\001\022_\n\022SLInterfaceNotifOp\022\".service_l"
  "ayer.SLInterfaceNotifMsg\032%.service_layer"
  ".SLInterfaceNotifMsgRspBCZAgithub.com/Ci"
  "sco-service-layer/service-layer-objmodel"
  "/grpc/protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5finterface_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5finterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5finterface_2eproto = {
  false, false, 2380, descriptor_table_protodef_sl_5finterface_2eproto, "sl_interface.proto", 
  &descriptor_table_sl_5finterface_2eproto_once, descriptor_table_sl_5finterface_2eproto_deps, 1, 13,
  schemas, file_default_instances, TableStruct_sl_5finterface_2eproto::offsets,
  file_level_metadata_sl_5finterface_2eproto, file_level_enum_descriptors_sl_5finterface_2eproto, file_level_service_descriptors_sl_5finterface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5finterface_2eproto_getter() {
  return &descriptor_table_sl_5finterface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5finterface_2eproto(&descriptor_table_sl_5finterface_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLInterfaceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5finterface_2eproto);
  return file_level_enum_descriptors_sl_5finterface_2eproto[0];
}
bool SLInterfaceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLInterfaceNotifType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5finterface_2eproto);
  return file_level_enum_descriptors_sl_5finterface_2eproto[1];
}
bool SLInterfaceNotifType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLInterfaceGlobalsRegMsg::_Internal {
 public:
};

SLInterfaceGlobalsRegMsg::SLInterfaceGlobalsRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGlobalsRegMsg)
}
SLInterfaceGlobalsRegMsg::SLInterfaceGlobalsRegMsg(const SLInterfaceGlobalsRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsRegMsg)
}

inline void SLInterfaceGlobalsRegMsg::SharedCtor() {
oper_ = 0;
}

SLInterfaceGlobalsRegMsg::~SLInterfaceGlobalsRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsRegMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceGlobalsRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLInterfaceGlobalsRegMsg::ArenaDtor(void* object) {
  SLInterfaceGlobalsRegMsg* _this = reinterpret_cast< SLInterfaceGlobalsRegMsg* >(object);
  (void)_this;
}
void SLInterfaceGlobalsRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceGlobalsRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceGlobalsRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceGlobalsRegMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceGlobalsRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceGlobalsRegMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsRegMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsRegMsg)
  return target;
}

size_t SLInterfaceGlobalsRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceGlobalsRegMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGlobalsRegMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceGlobalsRegMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGlobalsRegMsg::GetClassData() const { return &_class_data_; }

void SLInterfaceGlobalsRegMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceGlobalsRegMsg *>(to)->MergeFrom(
      static_cast<const SLInterfaceGlobalsRegMsg &>(from));
}


void SLInterfaceGlobalsRegMsg::MergeFrom(const SLInterfaceGlobalsRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceGlobalsRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceGlobalsRegMsg::CopyFrom(const SLInterfaceGlobalsRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceGlobalsRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsRegMsg::IsInitialized() const {
  return true;
}

void SLInterfaceGlobalsRegMsg::InternalSwap(SLInterfaceGlobalsRegMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGlobalsRegMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[0]);
}

// ===================================================================

class SLInterfaceGlobalsRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceGlobalsRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceGlobalsRegMsgRsp::_Internal::errstatus(const SLInterfaceGlobalsRegMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLInterfaceGlobalsRegMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLInterfaceGlobalsRegMsgRsp::SLInterfaceGlobalsRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGlobalsRegMsgRsp)
}
SLInterfaceGlobalsRegMsgRsp::SLInterfaceGlobalsRegMsgRsp(const SLInterfaceGlobalsRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsRegMsgRsp)
}

inline void SLInterfaceGlobalsRegMsgRsp::SharedCtor() {
errstatus_ = nullptr;
}

SLInterfaceGlobalsRegMsgRsp::~SLInterfaceGlobalsRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsRegMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceGlobalsRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLInterfaceGlobalsRegMsgRsp::ArenaDtor(void* object) {
  SLInterfaceGlobalsRegMsgRsp* _this = reinterpret_cast< SLInterfaceGlobalsRegMsgRsp* >(object);
  (void)_this;
}
void SLInterfaceGlobalsRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceGlobalsRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceGlobalsRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceGlobalsRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceGlobalsRegMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsRegMsgRsp)
  return target;
}

size_t SLInterfaceGlobalsRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGlobalsRegMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceGlobalsRegMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGlobalsRegMsgRsp::GetClassData() const { return &_class_data_; }

void SLInterfaceGlobalsRegMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceGlobalsRegMsgRsp *>(to)->MergeFrom(
      static_cast<const SLInterfaceGlobalsRegMsgRsp &>(from));
}


void SLInterfaceGlobalsRegMsgRsp::MergeFrom(const SLInterfaceGlobalsRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceGlobalsRegMsgRsp::CopyFrom(const SLInterfaceGlobalsRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceGlobalsRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsRegMsgRsp::IsInitialized() const {
  return true;
}

void SLInterfaceGlobalsRegMsgRsp::InternalSwap(SLInterfaceGlobalsRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(errstatus_, other->errstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGlobalsRegMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[1]);
}

// ===================================================================

class SLInterfaceGlobalsGetMsg::_Internal {
 public:
};

SLInterfaceGlobalsGetMsg::SLInterfaceGlobalsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGlobalsGetMsg)
}
SLInterfaceGlobalsGetMsg::SLInterfaceGlobalsGetMsg(const SLInterfaceGlobalsGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsGetMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGlobalsGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGlobalsGetMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGlobalsGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[2]);
}

// ===================================================================

class SLInterfaceGlobalsGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceGlobalsGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceGlobalsGetMsgRsp::_Internal::errstatus(const SLInterfaceGlobalsGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLInterfaceGlobalsGetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLInterfaceGlobalsGetMsgRsp::SLInterfaceGlobalsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGlobalsGetMsgRsp)
}
SLInterfaceGlobalsGetMsgRsp::SLInterfaceGlobalsGetMsgRsp(const SLInterfaceGlobalsGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  maxinterfacesperbatch_ = from.maxinterfacesperbatch_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsGetMsgRsp)
}

inline void SLInterfaceGlobalsGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxinterfacesperbatch_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(maxinterfacesperbatch_));
}

SLInterfaceGlobalsGetMsgRsp::~SLInterfaceGlobalsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceGlobalsGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLInterfaceGlobalsGetMsgRsp::ArenaDtor(void* object) {
  SLInterfaceGlobalsGetMsgRsp* _this = reinterpret_cast< SLInterfaceGlobalsGetMsgRsp* >(object);
  (void)_this;
}
void SLInterfaceGlobalsGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceGlobalsGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceGlobalsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  maxinterfacesperbatch_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceGlobalsGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxInterfacesPerBatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maxinterfacesperbatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceGlobalsGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxInterfacesPerBatch = 2;
  if (this->_internal_maxinterfacesperbatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxinterfacesperbatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsGetMsgRsp)
  return target;
}

size_t SLInterfaceGlobalsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxInterfacesPerBatch = 2;
  if (this->_internal_maxinterfacesperbatch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxinterfacesperbatch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGlobalsGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceGlobalsGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGlobalsGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLInterfaceGlobalsGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceGlobalsGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLInterfaceGlobalsGetMsgRsp &>(from));
}


void SLInterfaceGlobalsGetMsgRsp::MergeFrom(const SLInterfaceGlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_maxinterfacesperbatch() != 0) {
    _internal_set_maxinterfacesperbatch(from._internal_maxinterfacesperbatch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceGlobalsGetMsgRsp::CopyFrom(const SLInterfaceGlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceGlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLInterfaceGlobalsGetMsgRsp::InternalSwap(SLInterfaceGlobalsGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceGlobalsGetMsgRsp, maxinterfacesperbatch_)
      + sizeof(SLInterfaceGlobalsGetMsgRsp::maxinterfacesperbatch_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceGlobalsGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGlobalsGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[3]);
}

// ===================================================================

class SLInterfaceGlobalsGetStatsMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceGlobalsGetStatsMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceGlobalsGetStatsMsgRsp::_Internal::errstatus(const SLInterfaceGlobalsGetStatsMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLInterfaceGlobalsGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLInterfaceGlobalsGetStatsMsgRsp::SLInterfaceGlobalsGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
}
SLInterfaceGlobalsGetStatsMsgRsp::SLInterfaceGlobalsGetStatsMsgRsp(const SLInterfaceGlobalsGetStatsMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&interfacenotifcount_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(interfacenotifcount_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
}

inline void SLInterfaceGlobalsGetStatsMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interfacenotifcount_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(interfacenotifcount_));
}

SLInterfaceGlobalsGetStatsMsgRsp::~SLInterfaceGlobalsGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceGlobalsGetStatsMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLInterfaceGlobalsGetStatsMsgRsp::ArenaDtor(void* object) {
  SLInterfaceGlobalsGetStatsMsgRsp* _this = reinterpret_cast< SLInterfaceGlobalsGetStatsMsgRsp* >(object);
  (void)_this;
}
void SLInterfaceGlobalsGetStatsMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceGlobalsGetStatsMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceGlobalsGetStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interfacenotifcount_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(interfacenotifcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceGlobalsGetStatsMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 SeqNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 InterfaceNotifCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          interfacenotifcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceGlobalsGetStatsMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint64 SeqNum = 2;
  if (this->_internal_seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seqnum(), target);
  }

  // uint32 InterfaceNotifCount = 3;
  if (this->_internal_interfacenotifcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_interfacenotifcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  return target;
}

size_t SLInterfaceGlobalsGetStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 SeqNum = 2;
  if (this->_internal_seqnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seqnum());
  }

  // uint32 InterfaceNotifCount = 3;
  if (this->_internal_interfacenotifcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_interfacenotifcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGlobalsGetStatsMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceGlobalsGetStatsMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGlobalsGetStatsMsgRsp::GetClassData() const { return &_class_data_; }

void SLInterfaceGlobalsGetStatsMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceGlobalsGetStatsMsgRsp *>(to)->MergeFrom(
      static_cast<const SLInterfaceGlobalsGetStatsMsgRsp &>(from));
}


void SLInterfaceGlobalsGetStatsMsgRsp::MergeFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_interfacenotifcount() != 0) {
    _internal_set_interfacenotifcount(from._internal_interfacenotifcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceGlobalsGetStatsMsgRsp::CopyFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGlobalsGetStatsMsgRsp::IsInitialized() const {
  return true;
}

void SLInterfaceGlobalsGetStatsMsgRsp::InternalSwap(SLInterfaceGlobalsGetStatsMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, interfacenotifcount_)
      + sizeof(SLInterfaceGlobalsGetStatsMsgRsp::interfacenotifcount_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceGlobalsGetStatsMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGlobalsGetStatsMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[4]);
}

// ===================================================================

class SLInterfaceGetMsg::_Internal {
 public:
  static const ::service_layer::SLInterface& key(const SLInterfaceGetMsg* msg);
};

const ::service_layer::SLInterface&
SLInterfaceGetMsg::_Internal::key(const SLInterfaceGetMsg* msg) {
  return *msg->key_;
}
void SLInterfaceGetMsg::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLInterfaceGetMsg::SLInterfaceGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGetMsg)
}
SLInterfaceGetMsg::SLInterfaceGetMsg(const SLInterfaceGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLInterface(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&entriescount_, &from.entriescount_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGetMsg)
}

inline void SLInterfaceGetMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&key_)) + sizeof(getnext_));
}

SLInterfaceGetMsg::~SLInterfaceGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGetMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLInterfaceGetMsg::ArenaDtor(void* object) {
  SLInterfaceGetMsg* _this = reinterpret_cast< SLInterfaceGetMsg* >(object);
  (void)_this;
}
void SLInterfaceGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceGetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&entriescount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterface Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EntriesCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetNext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceGetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterface Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // uint32 EntriesCount = 2;
  if (this->_internal_entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entriescount(), target);
  }

  // bool GetNext = 3;
  if (this->_internal_getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGetMsg)
  return target;
}

size_t SLInterfaceGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceGetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLInterface Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint32 EntriesCount = 2;
  if (this->_internal_entriescount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_entriescount());
  }

  // bool GetNext = 3;
  if (this->_internal_getnext() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceGetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGetMsg::GetClassData() const { return &_class_data_; }

void SLInterfaceGetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceGetMsg *>(to)->MergeFrom(
      static_cast<const SLInterfaceGetMsg &>(from));
}


void SLInterfaceGetMsg::MergeFrom(const SLInterfaceGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLInterface::MergeFrom(from._internal_key());
  }
  if (from._internal_entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from._internal_getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceGetMsg::CopyFrom(const SLInterfaceGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGetMsg::IsInitialized() const {
  return true;
}

void SLInterfaceGetMsg::InternalSwap(SLInterfaceGetMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceGetMsg, getnext_)
      + sizeof(SLInterfaceGetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceGetMsg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[5]);
}

// ===================================================================

class SLInterfaceInfoMsg::_Internal {
 public:
  static const ::service_layer::SLInterface& slifinfo(const SLInterfaceInfoMsg* msg);
};

const ::service_layer::SLInterface&
SLInterfaceInfoMsg::_Internal::slifinfo(const SLInterfaceInfoMsg* msg) {
  return *msg->slifinfo_;
}
void SLInterfaceInfoMsg::clear_slifinfo() {
  if (GetArenaForAllocation() == nullptr && slifinfo_ != nullptr) {
    delete slifinfo_;
  }
  slifinfo_ = nullptr;
}
SLInterfaceInfoMsg::SLInterfaceInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceInfoMsg)
}
SLInterfaceInfoMsg::SLInterfaceInfoMsg(const SLInterfaceInfoMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slifinfo()) {
    slifinfo_ = new ::service_layer::SLInterface(*from.slifinfo_);
  } else {
    slifinfo_ = nullptr;
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&ifstate_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(ifstate_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceInfoMsg)
}

inline void SLInterfaceInfoMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slifinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ifstate_) -
    reinterpret_cast<char*>(&slifinfo_)) + sizeof(ifstate_));
}

SLInterfaceInfoMsg::~SLInterfaceInfoMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceInfoMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceInfoMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slifinfo_;
}

void SLInterfaceInfoMsg::ArenaDtor(void* object) {
  SLInterfaceInfoMsg* _this = reinterpret_cast< SLInterfaceInfoMsg* >(object);
  (void)_this;
}
void SLInterfaceInfoMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceInfoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceInfoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceInfoMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && slifinfo_ != nullptr) {
    delete slifinfo_;
  }
  slifinfo_ = nullptr;
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ifstate_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(ifstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceInfoMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterface SLIfInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slifinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterfaceState IfState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ifstate(static_cast<::service_layer::SLInterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 SeqNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceInfoMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceInfoMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterface SLIfInfo = 1;
  if (this->_internal_has_slifinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slifinfo(this), target, stream);
  }

  // .service_layer.SLInterfaceState IfState = 2;
  if (this->_internal_ifstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ifstate(), target);
  }

  // uint64 SeqNum = 3;
  if (this->_internal_seqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceInfoMsg)
  return target;
}

size_t SLInterfaceInfoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceInfoMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLInterface SLIfInfo = 1;
  if (this->_internal_has_slifinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slifinfo_);
  }

  // uint64 SeqNum = 3;
  if (this->_internal_seqnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seqnum());
  }

  // .service_layer.SLInterfaceState IfState = 2;
  if (this->_internal_ifstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ifstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceInfoMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceInfoMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceInfoMsg::GetClassData() const { return &_class_data_; }

void SLInterfaceInfoMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceInfoMsg *>(to)->MergeFrom(
      static_cast<const SLInterfaceInfoMsg &>(from));
}


void SLInterfaceInfoMsg::MergeFrom(const SLInterfaceInfoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slifinfo()) {
    _internal_mutable_slifinfo()->::service_layer::SLInterface::MergeFrom(from._internal_slifinfo());
  }
  if (from._internal_seqnum() != 0) {
    _internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_ifstate() != 0) {
    _internal_set_ifstate(from._internal_ifstate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceInfoMsg::CopyFrom(const SLInterfaceInfoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceInfoMsg::IsInitialized() const {
  return true;
}

void SLInterfaceInfoMsg::InternalSwap(SLInterfaceInfoMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceInfoMsg, ifstate_)
      + sizeof(SLInterfaceInfoMsg::ifstate_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceInfoMsg, slifinfo_)>(
          reinterpret_cast<char*>(&slifinfo_),
          reinterpret_cast<char*>(&other->slifinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceInfoMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[6]);
}

// ===================================================================

class SLInterfaceGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceGetMsgRsp::_Internal::errstatus(const SLInterfaceGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLInterfaceGetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLInterfaceGetMsgRsp::SLInterfaceGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGetMsgRsp)
}
SLInterfaceGetMsgRsp::SLInterfaceGetMsgRsp(const SLInterfaceGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGetMsgRsp)
}

inline void SLInterfaceGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLInterfaceGetMsgRsp::~SLInterfaceGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLInterfaceGetMsgRsp::ArenaDtor(void* object) {
  SLInterfaceGetMsgRsp* _this = reinterpret_cast< SLInterfaceGetMsgRsp* >(object);
  (void)_this;
}
void SLInterfaceGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Eof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Eof = 1;
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceGetMsgRsp)
  return target;
}

size_t SLInterfaceGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 1;
  if (this->_internal_eof() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLInterfaceGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLInterfaceGetMsgRsp &>(from));
}


void SLInterfaceGetMsgRsp::MergeFrom(const SLInterfaceGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceGetMsgRsp::CopyFrom(const SLInterfaceGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceGetMsgRsp::IsInitialized() const {
  return true;
}

void SLInterfaceGetMsgRsp::InternalSwap(SLInterfaceGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceGetMsgRsp, eof_)
      + sizeof(SLInterfaceGetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[7]);
}

// ===================================================================

class SLInterfaceGetNotifMsg::_Internal {
 public:
};

SLInterfaceGetNotifMsg::SLInterfaceGetNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceGetNotifMsg)
}
SLInterfaceGetNotifMsg::SLInterfaceGetNotifMsg(const SLInterfaceGetNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceGetNotifMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceGetNotifMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceGetNotifMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceGetNotifMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[8]);
}

// ===================================================================

class SLInterfaceNotif::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceNotif* msg);
  static const ::service_layer::SLInterfaceInfoMsg& info(const SLInterfaceNotif* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceNotif::_Internal::errstatus(const SLInterfaceNotif* msg) {
  return *msg->Event_.errstatus_;
}
const ::service_layer::SLInterfaceInfoMsg&
SLInterfaceNotif::_Internal::info(const SLInterfaceNotif* msg) {
  return *msg->Event_.info_;
}
void SLInterfaceNotif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.ErrStatus)
}
void SLInterfaceNotif::clear_errstatus() {
  if (_internal_has_errstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.errstatus_;
    }
    clear_has_Event();
  }
}
void SLInterfaceNotif::set_allocated_info(::service_layer::SLInterfaceInfoMsg* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLInterfaceInfoMsg>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    Event_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.Info)
}
SLInterfaceNotif::SLInterfaceNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotif)
}
SLInterfaceNotif::SLInterfaceNotif(const SLInterfaceNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventtype_ = from.eventtype_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::service_layer::SLInterfaceInfoMsg::MergeFrom(from._internal_info());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotif)
}

inline void SLInterfaceNotif::SharedCtor() {
eventtype_ = 0;
clear_has_Event();
}

SLInterfaceNotif::~SLInterfaceNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotif)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLInterfaceNotif::ArenaDtor(void* object) {
  SLInterfaceNotif* _this = reinterpret_cast< SLInterfaceNotif* >(object);
  (void)_this;
}
void SLInterfaceNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLInterfaceNotif)
  switch (Event_case()) {
    case kErrStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.errstatus_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.info_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLInterfaceNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotif)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventtype_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterfaceNotifType EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::service_layer::SLInterfaceNotifType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterfaceInfoMsg Info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotif::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotif)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterfaceNotifType EventType = 1;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventtype(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLInterfaceInfoMsg Info = 3;
  if (_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotif)
  return target;
}

size_t SLInterfaceNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotif)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLInterfaceNotifType EventType = 1;
  if (this->_internal_eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  switch (Event_case()) {
    // .service_layer.SLErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.errstatus_);
      break;
    }
    // .service_layer.SLInterfaceInfoMsg Info = 3;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.info_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotif::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotif::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotif::GetClassData() const { return &_class_data_; }

void SLInterfaceNotif::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotif *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotif &>(from));
}


void SLInterfaceNotif::MergeFrom(const SLInterfaceNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotif)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::service_layer::SLInterfaceInfoMsg::MergeFrom(from._internal_info());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotif::CopyFrom(const SLInterfaceNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotif::IsInitialized() const {
  return true;
}

void SLInterfaceNotif::InternalSwap(SLInterfaceNotif* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(eventtype_, other->eventtype_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotif::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[9]);
}

// ===================================================================

class SLInterfaceNotifMsg::_Internal {
 public:
};

void SLInterfaceNotifMsg::clear_entries() {
  entries_.Clear();
}
SLInterfaceNotifMsg::SLInterfaceNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsg)
}
SLInterfaceNotifMsg::SLInterfaceNotifMsg(const SLInterfaceNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsg)
}

inline void SLInterfaceNotifMsg::SharedCtor() {
oper_ = 0;
}

SLInterfaceNotifMsg::~SLInterfaceNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLInterfaceNotifMsg::ArenaDtor(void* object) {
  SLInterfaceNotifMsg* _this = reinterpret_cast< SLInterfaceNotifMsg* >(object);
  (void)_this;
}
void SLInterfaceNotifMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLNotifOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLNotifOp>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLInterface Entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLInterface Entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsg)
  return target;
}

size_t SLInterfaceNotifMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLInterface Entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLNotifOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsg::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsg *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsg &>(from));
}


void SLInterfaceNotifMsg::MergeFrom(const SLInterfaceNotifMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsg::CopyFrom(const SLInterfaceNotifMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsg::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsg::InternalSwap(SLInterfaceNotifMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[10]);
}

// ===================================================================

class SLInterfaceNotifMsgRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLInterfaceNotifMsgRes* msg);
  static const ::service_layer::SLInterface& key(const SLInterfaceNotifMsgRes* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceNotifMsgRes::_Internal::errstatus(const SLInterfaceNotifMsgRes* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLInterface&
SLInterfaceNotifMsgRes::_Internal::key(const SLInterfaceNotifMsgRes* msg) {
  return *msg->key_;
}
void SLInterfaceNotifMsgRes::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
void SLInterfaceNotifMsgRes::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsgRes)
}
SLInterfaceNotifMsgRes::SLInterfaceNotifMsgRes(const SLInterfaceNotifMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLInterface(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgRes)
}

inline void SLInterfaceNotifMsgRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(key_));
}

SLInterfaceNotifMsgRes::~SLInterfaceNotifMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete key_;
}

void SLInterfaceNotifMsgRes::ArenaDtor(void* object) {
  SLInterfaceNotifMsgRes* _this = reinterpret_cast< SLInterfaceNotifMsgRes* >(object);
  (void)_this;
}
void SLInterfaceNotifMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsgRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLInterface Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsgRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLInterface Key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgRes)
  return target;
}

size_t SLInterfaceNotifMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsgRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLInterface Key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsgRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsgRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsgRes::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsgRes *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsgRes &>(from));
}


void SLInterfaceNotifMsgRes::MergeFrom(const SLInterfaceNotifMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLInterface::MergeFrom(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsgRes::CopyFrom(const SLInterfaceNotifMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgRes::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsgRes::InternalSwap(SLInterfaceNotifMsgRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLInterfaceNotifMsgRes, key_)
      + sizeof(SLInterfaceNotifMsgRes::key_)
      - PROTOBUF_FIELD_OFFSET(SLInterfaceNotifMsgRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsgRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[11]);
}

// ===================================================================

class SLInterfaceNotifMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLInterfaceNotifMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLInterfaceNotifMsgRsp::_Internal::statussummary(const SLInterfaceNotifMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLInterfaceNotifMsgRsp::clear_statussummary() {
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLInterfaceNotifMsgRsp::SLInterfaceNotifMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLInterfaceNotifMsgRsp)
}
SLInterfaceNotifMsgRsp::SLInterfaceNotifMsgRsp(const SLInterfaceNotifMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLInterfaceNotifMsgRsp)
}

inline void SLInterfaceNotifMsgRsp::SharedCtor() {
statussummary_ = nullptr;
}

SLInterfaceNotifMsgRsp::~SLInterfaceNotifMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLInterfaceNotifMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLInterfaceNotifMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLInterfaceNotifMsgRsp::ArenaDtor(void* object) {
  SLInterfaceNotifMsgRsp* _this = reinterpret_cast< SLInterfaceNotifMsgRsp* >(object);
  (void)_this;
}
void SLInterfaceNotifMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLInterfaceNotifMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLInterfaceNotifMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLInterfaceNotifMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLInterfaceNotifMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLInterfaceNotifMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLInterfaceNotifMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLInterfaceNotifMsgRsp)
  return target;
}

size_t SLInterfaceNotifMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLInterfaceNotifMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->_internal_has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLInterfaceNotifMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLInterfaceNotifMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLInterfaceNotifMsgRsp::GetClassData() const { return &_class_data_; }

void SLInterfaceNotifMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLInterfaceNotifMsgRsp *>(to)->MergeFrom(
      static_cast<const SLInterfaceNotifMsgRsp &>(from));
}


void SLInterfaceNotifMsgRsp::MergeFrom(const SLInterfaceNotifMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLInterfaceNotifMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLInterfaceNotifMsgRsp::CopyFrom(const SLInterfaceNotifMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLInterfaceNotifMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLInterfaceNotifMsgRsp::IsInitialized() const {
  return true;
}

void SLInterfaceNotifMsgRsp::InternalSwap(SLInterfaceNotifMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLInterfaceNotifMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5finterface_2eproto_getter, &descriptor_table_sl_5finterface_2eproto_once,
      file_level_metadata_sl_5finterface_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGlobalsRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGlobalsRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGlobalsRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGlobalsRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGlobalsRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGlobalsRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGlobalsGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGlobalsGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGlobalsGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGlobalsGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGlobalsGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGlobalsGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGlobalsGetStatsMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceInfoMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceInfoMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceInfoMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceGetNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceGetNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceGetNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotif* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLInterfaceNotifMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLInterfaceNotifMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLInterfaceNotifMsgRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
