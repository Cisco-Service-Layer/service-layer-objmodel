// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_interface.proto

#ifndef PROTOBUF_sl_5finterface_2eproto__INCLUDED
#define PROTOBUF_sl_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)

namespace service_layer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sl_5finterface_2eproto();
void protobuf_AssignDesc_sl_5finterface_2eproto();
void protobuf_ShutdownFile_sl_5finterface_2eproto();

class SLInterfaceGetMsg;
class SLInterfaceGetMsgRsp;
class SLInterfaceGetNotifMsg;
class SLInterfaceGlobalsGetMsg;
class SLInterfaceGlobalsGetMsgRsp;
class SLInterfaceGlobalsGetStatsMsgRsp;
class SLInterfaceGlobalsRegMsg;
class SLInterfaceGlobalsRegMsgRsp;
class SLInterfaceInfoMsg;
class SLInterfaceNotif;
class SLInterfaceNotifMsg;
class SLInterfaceNotifMsgRes;
class SLInterfaceNotifMsgRsp;

enum SLInterfaceInfoMsg_SLInterfaceState {
  SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_UNKNOWN = 0,
  SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_DOWN = 1,
  SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_UP = 2,
  SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceInfoMsg_SLInterfaceState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceInfoMsg_SLInterfaceState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SLInterfaceInfoMsg_SLInterfaceState_IsValid(int value);
const SLInterfaceInfoMsg_SLInterfaceState SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_MIN = SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_UNKNOWN;
const SLInterfaceInfoMsg_SLInterfaceState SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_MAX = SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_UP;
const int SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_ARRAYSIZE = SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SLInterfaceInfoMsg_SLInterfaceState_descriptor();
inline const ::std::string& SLInterfaceInfoMsg_SLInterfaceState_Name(SLInterfaceInfoMsg_SLInterfaceState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SLInterfaceInfoMsg_SLInterfaceState_descriptor(), value);
}
inline bool SLInterfaceInfoMsg_SLInterfaceState_Parse(
    const ::std::string& name, SLInterfaceInfoMsg_SLInterfaceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SLInterfaceInfoMsg_SLInterfaceState>(
    SLInterfaceInfoMsg_SLInterfaceState_descriptor(), name, value);
}
enum SLInterfaceNotif_SLInterfaceNotifType {
  SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_RESERVED = 0,
  SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_ERROR = 1,
  SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO = 2,
  SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotif_SLInterfaceNotifType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotif_SLInterfaceNotifType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SLInterfaceNotif_SLInterfaceNotifType_IsValid(int value);
const SLInterfaceNotif_SLInterfaceNotifType SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_MIN = SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_RESERVED;
const SLInterfaceNotif_SLInterfaceNotifType SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_MAX = SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO;
const int SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_ARRAYSIZE = SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SLInterfaceNotif_SLInterfaceNotifType_descriptor();
inline const ::std::string& SLInterfaceNotif_SLInterfaceNotifType_Name(SLInterfaceNotif_SLInterfaceNotifType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SLInterfaceNotif_SLInterfaceNotifType_descriptor(), value);
}
inline bool SLInterfaceNotif_SLInterfaceNotifType_Parse(
    const ::std::string& name, SLInterfaceNotif_SLInterfaceNotifType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SLInterfaceNotif_SLInterfaceNotifType>(
    SLInterfaceNotif_SLInterfaceNotifType_descriptor(), name, value);
}
// ===================================================================

class SLInterfaceGlobalsRegMsg : public ::google::protobuf::Message {
 public:
  SLInterfaceGlobalsRegMsg();
  virtual ~SLInterfaceGlobalsRegMsg();

  SLInterfaceGlobalsRegMsg(const SLInterfaceGlobalsRegMsg& from);

  inline SLInterfaceGlobalsRegMsg& operator=(const SLInterfaceGlobalsRegMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsRegMsg& default_instance();

  void Swap(SLInterfaceGlobalsRegMsg* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsRegMsg* New() const { return New(NULL); }

  SLInterfaceGlobalsRegMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGlobalsRegMsg& from);
  void MergeFrom(const SLInterfaceGlobalsRegMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGlobalsRegMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLRegOp Oper = 1;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::service_layer::SLRegOp oper() const;
  void set_oper(::service_layer::SLRegOp value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsRegMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int oper_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGlobalsRegMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsRegMsgRsp : public ::google::protobuf::Message {
 public:
  SLInterfaceGlobalsRegMsgRsp();
  virtual ~SLInterfaceGlobalsRegMsgRsp();

  SLInterfaceGlobalsRegMsgRsp(const SLInterfaceGlobalsRegMsgRsp& from);

  inline SLInterfaceGlobalsRegMsgRsp& operator=(const SLInterfaceGlobalsRegMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsRegMsgRsp& default_instance();

  void Swap(SLInterfaceGlobalsRegMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsRegMsgRsp* New() const { return New(NULL); }

  SLInterfaceGlobalsRegMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGlobalsRegMsgRsp& from);
  void MergeFrom(const SLInterfaceGlobalsRegMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGlobalsRegMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsRegMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGlobalsRegMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsGetMsg : public ::google::protobuf::Message {
 public:
  SLInterfaceGlobalsGetMsg();
  virtual ~SLInterfaceGlobalsGetMsg();

  SLInterfaceGlobalsGetMsg(const SLInterfaceGlobalsGetMsg& from);

  inline SLInterfaceGlobalsGetMsg& operator=(const SLInterfaceGlobalsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsGetMsg& default_instance();

  void Swap(SLInterfaceGlobalsGetMsg* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsGetMsg* New() const { return New(NULL); }

  SLInterfaceGlobalsGetMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGlobalsGetMsg& from);
  void MergeFrom(const SLInterfaceGlobalsGetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGlobalsGetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsGetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGlobalsGetMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsGetMsgRsp : public ::google::protobuf::Message {
 public:
  SLInterfaceGlobalsGetMsgRsp();
  virtual ~SLInterfaceGlobalsGetMsgRsp();

  SLInterfaceGlobalsGetMsgRsp(const SLInterfaceGlobalsGetMsgRsp& from);

  inline SLInterfaceGlobalsGetMsgRsp& operator=(const SLInterfaceGlobalsGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsGetMsgRsp& default_instance();

  void Swap(SLInterfaceGlobalsGetMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsGetMsgRsp* New() const { return New(NULL); }

  SLInterfaceGlobalsGetMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGlobalsGetMsgRsp& from);
  void MergeFrom(const SLInterfaceGlobalsGetMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGlobalsGetMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // optional uint32 MaxInterfacesPerBatch = 2;
  void clear_maxinterfacesperbatch();
  static const int kMaxInterfacesPerBatchFieldNumber = 2;
  ::google::protobuf::uint32 maxinterfacesperbatch() const;
  void set_maxinterfacesperbatch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsGetMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::google::protobuf::uint32 maxinterfacesperbatch_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGlobalsGetMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGlobalsGetStatsMsgRsp : public ::google::protobuf::Message {
 public:
  SLInterfaceGlobalsGetStatsMsgRsp();
  virtual ~SLInterfaceGlobalsGetStatsMsgRsp();

  SLInterfaceGlobalsGetStatsMsgRsp(const SLInterfaceGlobalsGetStatsMsgRsp& from);

  inline SLInterfaceGlobalsGetStatsMsgRsp& operator=(const SLInterfaceGlobalsGetStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGlobalsGetStatsMsgRsp& default_instance();

  void Swap(SLInterfaceGlobalsGetStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGlobalsGetStatsMsgRsp* New() const { return New(NULL); }

  SLInterfaceGlobalsGetStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from);
  void MergeFrom(const SLInterfaceGlobalsGetStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGlobalsGetStatsMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGlobalsGetStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGlobalsGetStatsMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGetMsg : public ::google::protobuf::Message {
 public:
  SLInterfaceGetMsg();
  virtual ~SLInterfaceGetMsg();

  SLInterfaceGetMsg(const SLInterfaceGetMsg& from);

  inline SLInterfaceGetMsg& operator=(const SLInterfaceGetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGetMsg& default_instance();

  void Swap(SLInterfaceGetMsg* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGetMsg* New() const { return New(NULL); }

  SLInterfaceGetMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGetMsg& from);
  void MergeFrom(const SLInterfaceGetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLInterface Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::service_layer::SLInterface& key() const;
  ::service_layer::SLInterface* mutable_key();
  ::service_layer::SLInterface* release_key();
  void set_allocated_key(::service_layer::SLInterface* key);

  // optional uint32 EntriesCount = 2;
  void clear_entriescount();
  static const int kEntriesCountFieldNumber = 2;
  ::google::protobuf::uint32 entriescount() const;
  void set_entriescount(::google::protobuf::uint32 value);

  // optional bool GetNext = 3;
  void clear_getnext();
  static const int kGetNextFieldNumber = 3;
  bool getnext() const;
  void set_getnext(bool value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLInterface* key_;
  ::google::protobuf::uint32 entriescount_;
  bool getnext_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGetMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceInfoMsg : public ::google::protobuf::Message {
 public:
  SLInterfaceInfoMsg();
  virtual ~SLInterfaceInfoMsg();

  SLInterfaceInfoMsg(const SLInterfaceInfoMsg& from);

  inline SLInterfaceInfoMsg& operator=(const SLInterfaceInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceInfoMsg& default_instance();

  void Swap(SLInterfaceInfoMsg* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceInfoMsg* New() const { return New(NULL); }

  SLInterfaceInfoMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceInfoMsg& from);
  void MergeFrom(const SLInterfaceInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceInfoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SLInterfaceInfoMsg_SLInterfaceState SLInterfaceState;
  static const SLInterfaceState SL_IF_STATE_UNKNOWN = SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_UNKNOWN;
  static const SLInterfaceState SL_IF_STATE_DOWN = SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_DOWN;
  static const SLInterfaceState SL_IF_STATE_UP = SLInterfaceInfoMsg_SLInterfaceState_SL_IF_STATE_UP;
  static inline bool SLInterfaceState_IsValid(int value) {
    return SLInterfaceInfoMsg_SLInterfaceState_IsValid(value);
  }
  static const SLInterfaceState SLInterfaceState_MIN =
    SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_MIN;
  static const SLInterfaceState SLInterfaceState_MAX =
    SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_MAX;
  static const int SLInterfaceState_ARRAYSIZE =
    SLInterfaceInfoMsg_SLInterfaceState_SLInterfaceState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SLInterfaceState_descriptor() {
    return SLInterfaceInfoMsg_SLInterfaceState_descriptor();
  }
  static inline const ::std::string& SLInterfaceState_Name(SLInterfaceState value) {
    return SLInterfaceInfoMsg_SLInterfaceState_Name(value);
  }
  static inline bool SLInterfaceState_Parse(const ::std::string& name,
      SLInterfaceState* value) {
    return SLInterfaceInfoMsg_SLInterfaceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .service_layer.SLInterface SLIfInfo = 1;
  bool has_slifinfo() const;
  void clear_slifinfo();
  static const int kSLIfInfoFieldNumber = 1;
  const ::service_layer::SLInterface& slifinfo() const;
  ::service_layer::SLInterface* mutable_slifinfo();
  ::service_layer::SLInterface* release_slifinfo();
  void set_allocated_slifinfo(::service_layer::SLInterface* slifinfo);

  // optional .service_layer.SLInterfaceInfoMsg.SLInterfaceState IfState = 2;
  void clear_ifstate();
  static const int kIfStateFieldNumber = 2;
  ::service_layer::SLInterfaceInfoMsg_SLInterfaceState ifstate() const;
  void set_ifstate(::service_layer::SLInterfaceInfoMsg_SLInterfaceState value);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceInfoMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLInterface* slifinfo_;
  int ifstate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGetMsgRsp : public ::google::protobuf::Message {
 public:
  SLInterfaceGetMsgRsp();
  virtual ~SLInterfaceGetMsgRsp();

  SLInterfaceGetMsgRsp(const SLInterfaceGetMsgRsp& from);

  inline SLInterfaceGetMsgRsp& operator=(const SLInterfaceGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGetMsgRsp& default_instance();

  void Swap(SLInterfaceGetMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGetMsgRsp* New() const { return New(NULL); }

  SLInterfaceGetMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGetMsgRsp& from);
  void MergeFrom(const SLInterfaceGetMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGetMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Eof = 1;
  void clear_eof();
  static const int kEofFieldNumber = 1;
  bool eof() const;
  void set_eof(bool value);

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 3;
  const ::service_layer::SLInterfaceInfoMsg& entries(int index) const;
  ::service_layer::SLInterfaceInfoMsg* mutable_entries(int index);
  ::service_layer::SLInterfaceInfoMsg* add_entries();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >&
      entries() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGetMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg > entries_;
  bool eof_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGetMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceGetNotifMsg : public ::google::protobuf::Message {
 public:
  SLInterfaceGetNotifMsg();
  virtual ~SLInterfaceGetNotifMsg();

  SLInterfaceGetNotifMsg(const SLInterfaceGetNotifMsg& from);

  inline SLInterfaceGetNotifMsg& operator=(const SLInterfaceGetNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceGetNotifMsg& default_instance();

  void Swap(SLInterfaceGetNotifMsg* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceGetNotifMsg* New() const { return New(NULL); }

  SLInterfaceGetNotifMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceGetNotifMsg& from);
  void MergeFrom(const SLInterfaceGetNotifMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceGetNotifMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceGetNotifMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceGetNotifMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceNotif : public ::google::protobuf::Message {
 public:
  SLInterfaceNotif();
  virtual ~SLInterfaceNotif();

  SLInterfaceNotif(const SLInterfaceNotif& from);

  inline SLInterfaceNotif& operator=(const SLInterfaceNotif& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotif& default_instance();

  enum EventCase {
    kErrStatus = 2,
    kInfo = 3,
    EVENT_NOT_SET = 0,
  };

  void Swap(SLInterfaceNotif* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceNotif* New() const { return New(NULL); }

  SLInterfaceNotif* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceNotif& from);
  void MergeFrom(const SLInterfaceNotif& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceNotif* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SLInterfaceNotif_SLInterfaceNotifType SLInterfaceNotifType;
  static const SLInterfaceNotifType SL_INTERFACE_EVENT_TYPE_RESERVED = SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_RESERVED;
  static const SLInterfaceNotifType SL_INTERFACE_EVENT_TYPE_ERROR = SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_ERROR;
  static const SLInterfaceNotifType SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO = SLInterfaceNotif_SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO;
  static inline bool SLInterfaceNotifType_IsValid(int value) {
    return SLInterfaceNotif_SLInterfaceNotifType_IsValid(value);
  }
  static const SLInterfaceNotifType SLInterfaceNotifType_MIN =
    SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_MIN;
  static const SLInterfaceNotifType SLInterfaceNotifType_MAX =
    SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_MAX;
  static const int SLInterfaceNotifType_ARRAYSIZE =
    SLInterfaceNotif_SLInterfaceNotifType_SLInterfaceNotifType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SLInterfaceNotifType_descriptor() {
    return SLInterfaceNotif_SLInterfaceNotifType_descriptor();
  }
  static inline const ::std::string& SLInterfaceNotifType_Name(SLInterfaceNotifType value) {
    return SLInterfaceNotif_SLInterfaceNotifType_Name(value);
  }
  static inline bool SLInterfaceNotifType_Parse(const ::std::string& name,
      SLInterfaceNotifType* value) {
    return SLInterfaceNotif_SLInterfaceNotifType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .service_layer.SLInterfaceNotif.SLInterfaceNotifType EventType = 1;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  ::service_layer::SLInterfaceNotif_SLInterfaceNotifType eventtype() const;
  void set_eventtype(::service_layer::SLInterfaceNotif_SLInterfaceNotifType value);

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 2;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // optional .service_layer.SLInterfaceInfoMsg Info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::service_layer::SLInterfaceInfoMsg& info() const;
  ::service_layer::SLInterfaceInfoMsg* mutable_info();
  ::service_layer::SLInterfaceInfoMsg* release_info();
  void set_allocated_info(::service_layer::SLInterfaceInfoMsg* info);

  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotif)
 private:
  inline void set_has_errstatus();
  inline void set_has_info();

  inline bool has_Event() const;
  void clear_Event();
  inline void clear_has_Event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int eventtype_;
  union EventUnion {
    EventUnion() {}
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLInterfaceInfoMsg* info_;
  } Event_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceNotif* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceNotifMsg : public ::google::protobuf::Message {
 public:
  SLInterfaceNotifMsg();
  virtual ~SLInterfaceNotifMsg();

  SLInterfaceNotifMsg(const SLInterfaceNotifMsg& from);

  inline SLInterfaceNotifMsg& operator=(const SLInterfaceNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotifMsg& default_instance();

  void Swap(SLInterfaceNotifMsg* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceNotifMsg* New() const { return New(NULL); }

  SLInterfaceNotifMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceNotifMsg& from);
  void MergeFrom(const SLInterfaceNotifMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceNotifMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLNotifOp Oper = 1;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::service_layer::SLNotifOp oper() const;
  void set_oper(::service_layer::SLNotifOp value);

  // repeated .service_layer.SLInterface Entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::service_layer::SLInterface& entries(int index) const;
  ::service_layer::SLInterface* mutable_entries(int index);
  ::service_layer::SLInterface* add_entries();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >&
      entries() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotifMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface > entries_;
  int oper_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceNotifMsg* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceNotifMsgRes : public ::google::protobuf::Message {
 public:
  SLInterfaceNotifMsgRes();
  virtual ~SLInterfaceNotifMsgRes();

  SLInterfaceNotifMsgRes(const SLInterfaceNotifMsgRes& from);

  inline SLInterfaceNotifMsgRes& operator=(const SLInterfaceNotifMsgRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotifMsgRes& default_instance();

  void Swap(SLInterfaceNotifMsgRes* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceNotifMsgRes* New() const { return New(NULL); }

  SLInterfaceNotifMsgRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceNotifMsgRes& from);
  void MergeFrom(const SLInterfaceNotifMsgRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceNotifMsgRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* mutable_errstatus();
  ::service_layer::SLErrorStatus* release_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);

  // optional .service_layer.SLInterface Key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::service_layer::SLInterface& key() const;
  ::service_layer::SLInterface* mutable_key();
  ::service_layer::SLInterface* release_key();
  void set_allocated_key(::service_layer::SLInterface* key);

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotifMsgRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLInterface* key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceNotifMsgRes* default_instance_;
};
// -------------------------------------------------------------------

class SLInterfaceNotifMsgRsp : public ::google::protobuf::Message {
 public:
  SLInterfaceNotifMsgRsp();
  virtual ~SLInterfaceNotifMsgRsp();

  SLInterfaceNotifMsgRsp(const SLInterfaceNotifMsgRsp& from);

  inline SLInterfaceNotifMsgRsp& operator=(const SLInterfaceNotifMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLInterfaceNotifMsgRsp& default_instance();

  void Swap(SLInterfaceNotifMsgRsp* other);

  // implements Message ----------------------------------------------

  inline SLInterfaceNotifMsgRsp* New() const { return New(NULL); }

  SLInterfaceNotifMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SLInterfaceNotifMsgRsp& from);
  void MergeFrom(const SLInterfaceNotifMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLInterfaceNotifMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  void clear_statussummary();
  static const int kStatusSummaryFieldNumber = 1;
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* mutable_statussummary();
  ::service_layer::SLErrorStatus* release_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);

  // repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::service_layer::SLInterfaceNotifMsgRes& results(int index) const;
  ::service_layer::SLInterfaceNotifMsgRes* mutable_results(int index);
  ::service_layer::SLInterfaceNotifMsgRes* add_results();
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >&
      results() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLInterfaceNotifMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::service_layer::SLErrorStatus* statussummary_;
  ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes > results_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sl_5finterface_2eproto();
  friend void protobuf_AssignDesc_sl_5finterface_2eproto();
  friend void protobuf_ShutdownFile_sl_5finterface_2eproto();

  void InitAsDefaultInstance();
  static SLInterfaceNotifMsgRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SLInterfaceGlobalsRegMsg

// optional .service_layer.SLRegOp Oper = 1;
inline void SLInterfaceGlobalsRegMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLRegOp SLInterfaceGlobalsRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsRegMsg.Oper)
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
inline void SLInterfaceGlobalsRegMsg::set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsRegMsg.Oper)
}

// -------------------------------------------------------------------

// SLInterfaceGlobalsRegMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceGlobalsRegMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLInterfaceGlobalsRegMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGlobalsRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsRegMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsRegMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLInterfaceGlobalsRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus)
}

// -------------------------------------------------------------------

// SLInterfaceGlobalsGetMsg

// -------------------------------------------------------------------

// SLInterfaceGlobalsGetMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceGlobalsGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLInterfaceGlobalsGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGlobalsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLInterfaceGlobalsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus)
}

// optional uint32 MaxInterfacesPerBatch = 2;
inline void SLInterfaceGlobalsGetMsgRsp::clear_maxinterfacesperbatch() {
  maxinterfacesperbatch_ = 0u;
}
inline ::google::protobuf::uint32 SLInterfaceGlobalsGetMsgRsp::maxinterfacesperbatch() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetMsgRsp.MaxInterfacesPerBatch)
  return maxinterfacesperbatch_;
}
inline void SLInterfaceGlobalsGetMsgRsp::set_maxinterfacesperbatch(::google::protobuf::uint32 value) {
  
  maxinterfacesperbatch_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGlobalsGetMsgRsp.MaxInterfacesPerBatch)
}

// -------------------------------------------------------------------

// SLInterfaceGlobalsGetStatsMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceGlobalsGetStatsMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLInterfaceGlobalsGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGlobalsGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGlobalsGetStatsMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLInterfaceGlobalsGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus)
}

// -------------------------------------------------------------------

// SLInterfaceGetMsg

// optional .service_layer.SLInterface Key = 1;
inline bool SLInterfaceGetMsg::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLInterfaceGetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLInterface& SLInterfaceGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLInterface* SLInterfaceGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsg.Key)
  return key_;
}
inline ::service_layer::SLInterface* SLInterfaceGetMsg::release_key() {
  
  ::service_layer::SLInterface* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLInterfaceGetMsg::set_allocated_key(::service_layer::SLInterface* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGetMsg.Key)
}

// optional uint32 EntriesCount = 2;
inline void SLInterfaceGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::google::protobuf::uint32 SLInterfaceGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.EntriesCount)
  return entriescount_;
}
inline void SLInterfaceGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsg.EntriesCount)
}

// optional bool GetNext = 3;
inline void SLInterfaceGetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLInterfaceGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsg.GetNext)
  return getnext_;
}
inline void SLInterfaceGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLInterfaceInfoMsg

// optional .service_layer.SLInterface SLIfInfo = 1;
inline bool SLInterfaceInfoMsg::has_slifinfo() const {
  return !_is_default_instance_ && slifinfo_ != NULL;
}
inline void SLInterfaceInfoMsg::clear_slifinfo() {
  if (GetArenaNoVirtual() == NULL && slifinfo_ != NULL) delete slifinfo_;
  slifinfo_ = NULL;
}
inline const ::service_layer::SLInterface& SLInterfaceInfoMsg::slifinfo() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  return slifinfo_ != NULL ? *slifinfo_ : *default_instance_->slifinfo_;
}
inline ::service_layer::SLInterface* SLInterfaceInfoMsg::mutable_slifinfo() {
  
  if (slifinfo_ == NULL) {
    slifinfo_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceInfoMsg.SLIfInfo)
  return slifinfo_;
}
inline ::service_layer::SLInterface* SLInterfaceInfoMsg::release_slifinfo() {
  
  ::service_layer::SLInterface* temp = slifinfo_;
  slifinfo_ = NULL;
  return temp;
}
inline void SLInterfaceInfoMsg::set_allocated_slifinfo(::service_layer::SLInterface* slifinfo) {
  delete slifinfo_;
  slifinfo_ = slifinfo;
  if (slifinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceInfoMsg.SLIfInfo)
}

// optional .service_layer.SLInterfaceInfoMsg.SLInterfaceState IfState = 2;
inline void SLInterfaceInfoMsg::clear_ifstate() {
  ifstate_ = 0;
}
inline ::service_layer::SLInterfaceInfoMsg_SLInterfaceState SLInterfaceInfoMsg::ifstate() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceInfoMsg.IfState)
  return static_cast< ::service_layer::SLInterfaceInfoMsg_SLInterfaceState >(ifstate_);
}
inline void SLInterfaceInfoMsg::set_ifstate(::service_layer::SLInterfaceInfoMsg_SLInterfaceState value) {
  
  ifstate_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceInfoMsg.IfState)
}

// -------------------------------------------------------------------

// SLInterfaceGetMsgRsp

// optional bool Eof = 1;
inline void SLInterfaceGetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLInterfaceGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.Eof)
  return eof_;
}
inline void SLInterfaceGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceGetMsgRsp.Eof)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLInterfaceGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLInterfaceGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLInterfaceGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLInterfaceInfoMsg Entries = 3;
inline int SLInterfaceGetMsgRsp::entries_size() const {
  return entries_.size();
}
inline void SLInterfaceGetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline const ::service_layer::SLInterfaceInfoMsg& SLInterfaceGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Get(index);
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >*
SLInterfaceGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceGetMsgRsp.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceInfoMsg >&
SLInterfaceGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceGetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLInterfaceGetNotifMsg

// -------------------------------------------------------------------

// SLInterfaceNotif

// optional .service_layer.SLInterfaceNotif.SLInterfaceNotifType EventType = 1;
inline void SLInterfaceNotif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLInterfaceNotif_SLInterfaceNotifType SLInterfaceNotif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.EventType)
  return static_cast< ::service_layer::SLInterfaceNotif_SLInterfaceNotifType >(eventtype_);
}
inline void SLInterfaceNotif::set_eventtype(::service_layer::SLInterfaceNotif_SLInterfaceNotifType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceNotif.EventType)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLInterfaceNotif::has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline void SLInterfaceNotif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline void SLInterfaceNotif::clear_errstatus() {
  if (has_errstatus()) {
    delete Event_.errstatus_;
    clear_has_Event();
  }
}
inline  const ::service_layer::SLErrorStatus& SLInterfaceNotif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.ErrStatus)
  return has_errstatus()
      ? *Event_.errstatus_
      : ::service_layer::SLErrorStatus::default_instance();
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotif::mutable_errstatus() {
  if (!has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotif.ErrStatus)
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotif::release_errstatus() {
  if (has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SLInterfaceNotif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.ErrStatus)
}

// optional .service_layer.SLInterfaceInfoMsg Info = 3;
inline bool SLInterfaceNotif::has_info() const {
  return Event_case() == kInfo;
}
inline void SLInterfaceNotif::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void SLInterfaceNotif::clear_info() {
  if (has_info()) {
    delete Event_.info_;
    clear_has_Event();
  }
}
inline  const ::service_layer::SLInterfaceInfoMsg& SLInterfaceNotif::info() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotif.Info)
  return has_info()
      ? *Event_.info_
      : ::service_layer::SLInterfaceInfoMsg::default_instance();
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceNotif::mutable_info() {
  if (!has_info()) {
    clear_Event();
    set_has_info();
    Event_.info_ = new ::service_layer::SLInterfaceInfoMsg;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotif.Info)
  return Event_.info_;
}
inline ::service_layer::SLInterfaceInfoMsg* SLInterfaceNotif::release_info() {
  if (has_info()) {
    clear_has_Event();
    ::service_layer::SLInterfaceInfoMsg* temp = Event_.info_;
    Event_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SLInterfaceNotif::set_allocated_info(::service_layer::SLInterfaceInfoMsg* info) {
  clear_Event();
  if (info) {
    set_has_info();
    Event_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotif.Info)
}

inline bool SLInterfaceNotif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLInterfaceNotif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLInterfaceNotif::EventCase SLInterfaceNotif::Event_case() const {
  return SLInterfaceNotif::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLInterfaceNotifMsg

// optional .service_layer.SLNotifOp Oper = 1;
inline void SLInterfaceNotifMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLNotifOp SLInterfaceNotifMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsg.Oper)
  return static_cast< ::service_layer::SLNotifOp >(oper_);
}
inline void SLInterfaceNotifMsg::set_oper(::service_layer::SLNotifOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLInterfaceNotifMsg.Oper)
}

// repeated .service_layer.SLInterface Entries = 2;
inline int SLInterfaceNotifMsg::entries_size() const {
  return entries_.size();
}
inline void SLInterfaceNotifMsg::clear_entries() {
  entries_.Clear();
}
inline const ::service_layer::SLInterface& SLInterfaceNotifMsg::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Get(index);
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsg::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Mutable(index);
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsg::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >*
SLInterfaceNotifMsg::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceNotifMsg.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterface >&
SLInterfaceNotifMsg::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceNotifMsg.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLInterfaceNotifMsgRes

// optional .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLInterfaceNotifMsgRes::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
inline void SLInterfaceNotifMsgRes::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceNotifMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRes::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void SLInterfaceNotifMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRes.ErrStatus)
}

// optional .service_layer.SLInterface Key = 2;
inline bool SLInterfaceNotifMsgRes::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
inline void SLInterfaceNotifMsgRes::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::service_layer::SLInterface& SLInterfaceNotifMsgRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRes.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsgRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRes.Key)
  return key_;
}
inline ::service_layer::SLInterface* SLInterfaceNotifMsgRes::release_key() {
  
  ::service_layer::SLInterface* temp = key_;
  key_ = NULL;
  return temp;
}
inline void SLInterfaceNotifMsgRes::set_allocated_key(::service_layer::SLInterface* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRes.Key)
}

// -------------------------------------------------------------------

// SLInterfaceNotifMsgRsp

// optional .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLInterfaceNotifMsgRsp::has_statussummary() const {
  return !_is_default_instance_ && statussummary_ != NULL;
}
inline void SLInterfaceNotifMsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
inline const ::service_layer::SLErrorStatus& SLInterfaceNotifMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_ : *default_instance_->statussummary_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLInterfaceNotifMsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
inline void SLInterfaceNotifMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLInterfaceNotifMsgRsp.StatusSummary)
}

// repeated .service_layer.SLInterfaceNotifMsgRes Results = 2;
inline int SLInterfaceNotifMsgRsp::results_size() const {
  return results_.size();
}
inline void SLInterfaceNotifMsgRsp::clear_results() {
  results_.Clear();
}
inline const ::service_layer::SLInterfaceNotifMsgRes& SLInterfaceNotifMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Get(index);
}
inline ::service_layer::SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Mutable(index);
}
inline ::service_layer::SLInterfaceNotifMsgRes* SLInterfaceNotifMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >*
SLInterfaceNotifMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLInterfaceNotifMsgRsp.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::service_layer::SLInterfaceNotifMsgRes >&
SLInterfaceNotifMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLInterfaceNotifMsgRsp.Results)
  return results_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::service_layer::SLInterfaceInfoMsg_SLInterfaceState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLInterfaceInfoMsg_SLInterfaceState>() {
  return ::service_layer::SLInterfaceInfoMsg_SLInterfaceState_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLInterfaceNotif_SLInterfaceNotifType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLInterfaceNotif_SLInterfaceNotifType>() {
  return ::service_layer::SLInterfaceNotif_SLInterfaceNotifType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sl_5finterface_2eproto__INCLUDED
