// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_l2_route.proto

#include "sl_l2_route.pb.h"
#include "sl_l2_route.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLL2Oper_method_names[] = {
  "/service_layer.SLL2Oper/SLL2GlobalsGet",
  "/service_layer.SLL2Oper/SLL2RegOp",
  "/service_layer.SLL2Oper/SLL2BdRegOp",
  "/service_layer.SLL2Oper/SLL2RouteOp",
  "/service_layer.SLL2Oper/SLL2RouteOpStream",
  "/service_layer.SLL2Oper/SLL2GetNotifStream",
};

std::unique_ptr< SLL2Oper::Stub> SLL2Oper::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLL2Oper::Stub> stub(new SLL2Oper::Stub(channel, options));
  return stub;
}

SLL2Oper::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SLL2GlobalsGet_(SLL2Oper_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLL2RegOp_(SLL2Oper_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLL2BdRegOp_(SLL2Oper_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLL2RouteOp_(SLL2Oper_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLL2RouteOpStream_(SLL2Oper_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SLL2GetNotifStream_(SLL2Oper_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SLL2Oper::Stub::SLL2GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLL2GlobalsGetMsg& request, ::service_layer::SLL2GlobalsGetMsgRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service_layer::SLL2GlobalsGetMsg, ::service_layer::SLL2GlobalsGetMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SLL2GlobalsGet_, context, request, response);
}

void SLL2Oper::Stub::async::SLL2GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLL2GlobalsGetMsg* request, ::service_layer::SLL2GlobalsGetMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service_layer::SLL2GlobalsGetMsg, ::service_layer::SLL2GlobalsGetMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2GlobalsGet_, context, request, response, std::move(f));
}

void SLL2Oper::Stub::async::SLL2GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLL2GlobalsGetMsg* request, ::service_layer::SLL2GlobalsGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2GlobalsGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2GlobalsGetMsgRsp>* SLL2Oper::Stub::PrepareAsyncSLL2GlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLL2GlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service_layer::SLL2GlobalsGetMsgRsp, ::service_layer::SLL2GlobalsGetMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SLL2GlobalsGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2GlobalsGetMsgRsp>* SLL2Oper::Stub::AsyncSLL2GlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLL2GlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSLL2GlobalsGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLL2Oper::Stub::SLL2RegOp(::grpc::ClientContext* context, const ::service_layer::SLL2RegMsg& request, ::service_layer::SLL2RegMsgRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service_layer::SLL2RegMsg, ::service_layer::SLL2RegMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SLL2RegOp_, context, request, response);
}

void SLL2Oper::Stub::async::SLL2RegOp(::grpc::ClientContext* context, const ::service_layer::SLL2RegMsg* request, ::service_layer::SLL2RegMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service_layer::SLL2RegMsg, ::service_layer::SLL2RegMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2RegOp_, context, request, response, std::move(f));
}

void SLL2Oper::Stub::async::SLL2RegOp(::grpc::ClientContext* context, const ::service_layer::SLL2RegMsg* request, ::service_layer::SLL2RegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2RegOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2RegMsgRsp>* SLL2Oper::Stub::PrepareAsyncSLL2RegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLL2RegMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service_layer::SLL2RegMsgRsp, ::service_layer::SLL2RegMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SLL2RegOp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2RegMsgRsp>* SLL2Oper::Stub::AsyncSLL2RegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLL2RegMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSLL2RegOpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLL2Oper::Stub::SLL2BdRegOp(::grpc::ClientContext* context, const ::service_layer::SLL2BdRegMsg& request, ::service_layer::SLL2BdRegMsgRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service_layer::SLL2BdRegMsg, ::service_layer::SLL2BdRegMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SLL2BdRegOp_, context, request, response);
}

void SLL2Oper::Stub::async::SLL2BdRegOp(::grpc::ClientContext* context, const ::service_layer::SLL2BdRegMsg* request, ::service_layer::SLL2BdRegMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service_layer::SLL2BdRegMsg, ::service_layer::SLL2BdRegMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2BdRegOp_, context, request, response, std::move(f));
}

void SLL2Oper::Stub::async::SLL2BdRegOp(::grpc::ClientContext* context, const ::service_layer::SLL2BdRegMsg* request, ::service_layer::SLL2BdRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2BdRegOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2BdRegMsgRsp>* SLL2Oper::Stub::PrepareAsyncSLL2BdRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLL2BdRegMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service_layer::SLL2BdRegMsgRsp, ::service_layer::SLL2BdRegMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SLL2BdRegOp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2BdRegMsgRsp>* SLL2Oper::Stub::AsyncSLL2BdRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLL2BdRegMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSLL2BdRegOpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLL2Oper::Stub::SLL2RouteOp(::grpc::ClientContext* context, const ::service_layer::SLL2RouteMsg& request, ::service_layer::SLL2RouteMsgRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SLL2RouteOp_, context, request, response);
}

void SLL2Oper::Stub::async::SLL2RouteOp(::grpc::ClientContext* context, const ::service_layer::SLL2RouteMsg* request, ::service_layer::SLL2RouteMsgRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2RouteOp_, context, request, response, std::move(f));
}

void SLL2Oper::Stub::async::SLL2RouteOp(::grpc::ClientContext* context, const ::service_layer::SLL2RouteMsg* request, ::service_layer::SLL2RouteMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLL2RouteOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2RouteMsgRsp>* SLL2Oper::Stub::PrepareAsyncSLL2RouteOpRaw(::grpc::ClientContext* context, const ::service_layer::SLL2RouteMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service_layer::SLL2RouteMsgRsp, ::service_layer::SLL2RouteMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SLL2RouteOp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLL2RouteMsgRsp>* SLL2Oper::Stub::AsyncSLL2RouteOpRaw(::grpc::ClientContext* context, const ::service_layer::SLL2RouteMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSLL2RouteOpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>* SLL2Oper::Stub::SLL2RouteOpStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>::Create(channel_.get(), rpcmethod_SLL2RouteOpStream_, context);
}

void SLL2Oper::Stub::async::SLL2RouteOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLL2RouteMsg,::service_layer::SLL2RouteMsgRsp>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::service_layer::SLL2RouteMsg,::service_layer::SLL2RouteMsgRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_SLL2RouteOpStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>* SLL2Oper::Stub::AsyncSLL2RouteOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLL2RouteOpStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>* SLL2Oper::Stub::PrepareAsyncSLL2RouteOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLL2RouteOpStream_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>* SLL2Oper::Stub::SLL2GetNotifStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>::Create(channel_.get(), rpcmethod_SLL2GetNotifStream_, context);
}

void SLL2Oper::Stub::async::SLL2GetNotifStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLL2GetNotifMsg,::service_layer::SLL2Notif>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::service_layer::SLL2GetNotifMsg,::service_layer::SLL2Notif>::Create(stub_->channel_.get(), stub_->rpcmethod_SLL2GetNotifStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>* SLL2Oper::Stub::AsyncSLL2GetNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>::Create(channel_.get(), cq, rpcmethod_SLL2GetNotifStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>* SLL2Oper::Stub::PrepareAsyncSLL2GetNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>::Create(channel_.get(), cq, rpcmethod_SLL2GetNotifStream_, context, false, nullptr);
}

SLL2Oper::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLL2Oper_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLL2Oper::Service, ::service_layer::SLL2GlobalsGetMsg, ::service_layer::SLL2GlobalsGetMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLL2Oper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLL2GlobalsGetMsg* req,
             ::service_layer::SLL2GlobalsGetMsgRsp* resp) {
               return service->SLL2GlobalsGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLL2Oper_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLL2Oper::Service, ::service_layer::SLL2RegMsg, ::service_layer::SLL2RegMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLL2Oper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLL2RegMsg* req,
             ::service_layer::SLL2RegMsgRsp* resp) {
               return service->SLL2RegOp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLL2Oper_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLL2Oper::Service, ::service_layer::SLL2BdRegMsg, ::service_layer::SLL2BdRegMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLL2Oper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLL2BdRegMsg* req,
             ::service_layer::SLL2BdRegMsgRsp* resp) {
               return service->SLL2BdRegOp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLL2Oper_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLL2Oper::Service, ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLL2Oper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLL2RouteMsg* req,
             ::service_layer::SLL2RouteMsgRsp* resp) {
               return service->SLL2RouteOp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLL2Oper_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SLL2Oper::Service, ::service_layer::SLL2RouteMsg, ::service_layer::SLL2RouteMsgRsp>(
          [](SLL2Oper::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::service_layer::SLL2RouteMsgRsp,
             ::service_layer::SLL2RouteMsg>* stream) {
               return service->SLL2RouteOpStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLL2Oper_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SLL2Oper::Service, ::service_layer::SLL2GetNotifMsg, ::service_layer::SLL2Notif>(
          [](SLL2Oper::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::service_layer::SLL2Notif,
             ::service_layer::SLL2GetNotifMsg>* stream) {
               return service->SLL2GetNotifStream(ctx, stream);
             }, this)));
}

SLL2Oper::Service::~Service() {
}

::grpc::Status SLL2Oper::Service::SLL2GlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLL2GlobalsGetMsg* request, ::service_layer::SLL2GlobalsGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLL2Oper::Service::SLL2RegOp(::grpc::ServerContext* context, const ::service_layer::SLL2RegMsg* request, ::service_layer::SLL2RegMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLL2Oper::Service::SLL2BdRegOp(::grpc::ServerContext* context, const ::service_layer::SLL2BdRegMsg* request, ::service_layer::SLL2BdRegMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLL2Oper::Service::SLL2RouteOp(::grpc::ServerContext* context, const ::service_layer::SLL2RouteMsg* request, ::service_layer::SLL2RouteMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLL2Oper::Service::SLL2RouteOpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLL2RouteMsgRsp, ::service_layer::SLL2RouteMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLL2Oper::Service::SLL2GetNotifStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLL2Notif, ::service_layer::SLL2GetNotifMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

