// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_l2_route.proto

#include "sl_l2_route.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLL2GlobalsGetMsg::SLL2GlobalsGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLL2GlobalsGetMsgDefaultTypeInternal {
  constexpr SLL2GlobalsGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2GlobalsGetMsgDefaultTypeInternal() {}
  union {
    SLL2GlobalsGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2GlobalsGetMsgDefaultTypeInternal _SLL2GlobalsGetMsg_default_instance_;
constexpr SLL2GlobalsGetMsgRsp::SLL2GlobalsGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , maxbdregperbdregmsg_(0u)
  , maxrouteperroutemsg_(0u){}
struct SLL2GlobalsGetMsgRspDefaultTypeInternal {
  constexpr SLL2GlobalsGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2GlobalsGetMsgRspDefaultTypeInternal() {}
  union {
    SLL2GlobalsGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2GlobalsGetMsgRspDefaultTypeInternal _SLL2GlobalsGetMsgRsp_default_instance_;
constexpr SLL2RegMsg::SLL2RegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oper_(0)

  , admindistance_(0u)
  , purgeintervalseconds_(0u){}
struct SLL2RegMsgDefaultTypeInternal {
  constexpr SLL2RegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RegMsgDefaultTypeInternal() {}
  union {
    SLL2RegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RegMsgDefaultTypeInternal _SLL2RegMsg_default_instance_;
constexpr SLL2RegMsgRsp::SLL2RegMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : regstatus_(nullptr){}
struct SLL2RegMsgRspDefaultTypeInternal {
  constexpr SLL2RegMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RegMsgRspDefaultTypeInternal() {}
  union {
    SLL2RegMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RegMsgRspDefaultTypeInternal _SLL2RegMsgRsp_default_instance_;
constexpr SLL2BdRegMsg::SLL2BdRegMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdregname_()
  , oper_(0)
{}
struct SLL2BdRegMsgDefaultTypeInternal {
  constexpr SLL2BdRegMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2BdRegMsgDefaultTypeInternal() {}
  union {
    SLL2BdRegMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2BdRegMsgDefaultTypeInternal _SLL2BdRegMsg_default_instance_;
constexpr SLL2BdRegRes::SLL2BdRegRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr){}
struct SLL2BdRegResDefaultTypeInternal {
  constexpr SLL2BdRegResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2BdRegResDefaultTypeInternal() {}
  union {
    SLL2BdRegRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2BdRegResDefaultTypeInternal _SLL2BdRegRes_default_instance_;
constexpr SLL2BdRegMsgRsp::SLL2BdRegMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr){}
struct SLL2BdRegMsgRspDefaultTypeInternal {
  constexpr SLL2BdRegMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2BdRegMsgRspDefaultTypeInternal() {}
  union {
    SLL2BdRegMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2BdRegMsgRspDefaultTypeInternal _SLL2BdRegMsgRsp_default_instance_;
constexpr SLL2RouteEsi::SLL2RouteEsi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : esi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLL2RouteEsiDefaultTypeInternal {
  constexpr SLL2RouteEsiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteEsiDefaultTypeInternal() {}
  union {
    SLL2RouteEsi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteEsiDefaultTypeInternal _SLL2RouteEsi_default_instance_;
constexpr SLL2RouteNh::SLL2RouteNh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nhtype_(0)

  , _oneof_case_{}{}
struct SLL2RouteNhDefaultTypeInternal {
  constexpr SLL2RouteNhDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteNhDefaultTypeInternal() {}
  union {
    SLL2RouteNh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteNhDefaultTypeInternal _SLL2RouteNh_default_instance_;
constexpr SLL2OverlayNh::SLL2OverlayNh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overlaynhl3label_()
  , _overlaynhl3label_cached_byte_size_()
  , overlaynhroutermac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overlaynhip_(nullptr)
  , overlaynhencap_(0)

  , overlaynhlabel_(0u){}
struct SLL2OverlayNhDefaultTypeInternal {
  constexpr SLL2OverlayNhDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2OverlayNhDefaultTypeInternal() {}
  union {
    SLL2OverlayNh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2OverlayNhDefaultTypeInternal _SLL2OverlayNh_default_instance_;
constexpr SLL2MacRouteKey::SLL2MacRouteKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : macaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipaddress_(nullptr){}
struct SLL2MacRouteKeyDefaultTypeInternal {
  constexpr SLL2MacRouteKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2MacRouteKeyDefaultTypeInternal() {}
  union {
    SLL2MacRouteKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2MacRouteKeyDefaultTypeInternal _SLL2MacRouteKey_default_instance_;
constexpr SLL2MacRoute::SLL2MacRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nexthoplist_()
  , routekey_(nullptr)
  , macesi_(nullptr)
  , sequencenum_(0u){}
struct SLL2MacRouteDefaultTypeInternal {
  constexpr SLL2MacRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2MacRouteDefaultTypeInternal() {}
  union {
    SLL2MacRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2MacRouteDefaultTypeInternal _SLL2MacRoute_default_instance_;
constexpr SLL2ImetRouteKey::SLL2ImetRouteKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipaddress_(nullptr)
  , ethtagid_(0u){}
struct SLL2ImetRouteKeyDefaultTypeInternal {
  constexpr SLL2ImetRouteKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2ImetRouteKeyDefaultTypeInternal() {}
  union {
    SLL2ImetRouteKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2ImetRouteKeyDefaultTypeInternal _SLL2ImetRouteKey_default_instance_;
constexpr SLL2ImetRoute::SLL2ImetRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tunnelidvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routekey_(nullptr)
  , encaptype_(0)

  , label_(0u)
  , tunneltype_(0)

  , tunnelidlength_(0u){}
struct SLL2ImetRouteDefaultTypeInternal {
  constexpr SLL2ImetRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2ImetRouteDefaultTypeInternal() {}
  union {
    SLL2ImetRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2ImetRouteDefaultTypeInternal _SLL2ImetRoute_default_instance_;
constexpr SLL2RouteKey::SLL2RouteKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct SLL2RouteKeyDefaultTypeInternal {
  constexpr SLL2RouteKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteKeyDefaultTypeInternal() {}
  union {
    SLL2RouteKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteKeyDefaultTypeInternal _SLL2RouteKey_default_instance_;
constexpr SLL2Route::SLL2Route(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct SLL2RouteDefaultTypeInternal {
  constexpr SLL2RouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteDefaultTypeInternal() {}
  union {
    SLL2Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteDefaultTypeInternal _SLL2Route_default_instance_;
constexpr SLL2RouteMsg::SLL2RouteMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_()
  , correlator_(PROTOBUF_ULONGLONG(0))
  , oper_(0)
{}
struct SLL2RouteMsgDefaultTypeInternal {
  constexpr SLL2RouteMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteMsgDefaultTypeInternal() {}
  union {
    SLL2RouteMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteMsgDefaultTypeInternal _SLL2RouteMsg_default_instance_;
constexpr SLL2RouteRes::SLL2RouteRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , routekey_(nullptr){}
struct SLL2RouteResDefaultTypeInternal {
  constexpr SLL2RouteResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteResDefaultTypeInternal() {}
  union {
    SLL2RouteRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteResDefaultTypeInternal _SLL2RouteRes_default_instance_;
constexpr SLL2RouteMsgRsp::SLL2RouteMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , statussummary_(nullptr)
  , correlator_(PROTOBUF_ULONGLONG(0)){}
struct SLL2RouteMsgRspDefaultTypeInternal {
  constexpr SLL2RouteMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteMsgRspDefaultTypeInternal() {}
  union {
    SLL2RouteMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteMsgRspDefaultTypeInternal _SLL2RouteMsgRsp_default_instance_;
constexpr SLL2GetNotifMsg::SLL2GetNotifMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlator_(PROTOBUF_ULONGLONG(0))
  , oper_(0)

  , getnotifeof_(false)
  , _oneof_case_{}{}
struct SLL2GetNotifMsgDefaultTypeInternal {
  constexpr SLL2GetNotifMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2GetNotifMsgDefaultTypeInternal() {}
  union {
    SLL2GetNotifMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2GetNotifMsgDefaultTypeInternal _SLL2GetNotifMsg_default_instance_;
constexpr SLL2RouteNotif::SLL2RouteNotif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_(nullptr)
  , oper_(0)
{}
struct SLL2RouteNotifDefaultTypeInternal {
  constexpr SLL2RouteNotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2RouteNotifDefaultTypeInternal() {}
  union {
    SLL2RouteNotif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2RouteNotifDefaultTypeInternal _SLL2RouteNotif_default_instance_;
constexpr SLL2BdStateInfo::SLL2BdStateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bdstate_(0)
{}
struct SLL2BdStateInfoDefaultTypeInternal {
  constexpr SLL2BdStateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2BdStateInfoDefaultTypeInternal() {}
  union {
    SLL2BdStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2BdStateInfoDefaultTypeInternal _SLL2BdStateInfo_default_instance_;
constexpr SLL2NotifStatusMsg::SLL2NotifStatusMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notifstatus_(nullptr)
  , correlator_(PROTOBUF_ULONGLONG(0))
  , oper_(0)
{}
struct SLL2NotifStatusMsgDefaultTypeInternal {
  constexpr SLL2NotifStatusMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2NotifStatusMsgDefaultTypeInternal() {}
  union {
    SLL2NotifStatusMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2NotifStatusMsgDefaultTypeInternal _SLL2NotifStatusMsg_default_instance_;
constexpr SLL2Notif::SLL2Notif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventtype_(0)

  , _oneof_case_{}{}
struct SLL2NotifDefaultTypeInternal {
  constexpr SLL2NotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLL2NotifDefaultTypeInternal() {}
  union {
    SLL2Notif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLL2NotifDefaultTypeInternal _SLL2Notif_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fl2_5froute_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fl2_5froute_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fl2_5froute_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sl_5fl2_5froute_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GlobalsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GlobalsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GlobalsGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GlobalsGetMsgRsp, maxbdregperbdregmsg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GlobalsGetMsgRsp, maxrouteperroutemsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RegMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RegMsg, admindistance_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RegMsg, purgeintervalseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RegMsgRsp, regstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegMsg, bdregname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegRes, bdname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdRegMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteEsi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteEsi, esi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNh, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNh, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNh, nhtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNh, NhData_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2OverlayNh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2OverlayNh, overlaynhip_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2OverlayNh, overlaynhencap_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2OverlayNh, overlaynhlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2OverlayNh, overlaynhl3label_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2OverlayNh, overlaynhroutermac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRouteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRouteKey, macaddress_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRouteKey, ipaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRoute, routekey_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRoute, sequencenum_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRoute, macesi_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2MacRoute, nexthoplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRouteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRouteKey, ethtagid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRouteKey, ipaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, routekey_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, encaptype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, label_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, tunneltype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, tunnelidlength_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2ImetRoute, tunnelidvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteKey, bdname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteKey, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteKey, Event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Route, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Route, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Route, bdname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Route, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Route, Event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsg, routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteRes, routekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsgRsp, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GetNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GetNotifMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GetNotifMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GetNotifMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GetNotifMsg, getnotifeof_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2GetNotifMsg, Request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNotif, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2RouteNotif, routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdStateInfo, bdname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2BdStateInfo, bdstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2NotifStatusMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2NotifStatusMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2NotifStatusMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2NotifStatusMsg, bdname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2NotifStatusMsg, notifstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Notif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Notif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Notif, eventtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLL2Notif, Event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service_layer::SLL2GlobalsGetMsg)},
  { 5, -1, sizeof(::service_layer::SLL2GlobalsGetMsgRsp)},
  { 13, -1, sizeof(::service_layer::SLL2RegMsg)},
  { 21, -1, sizeof(::service_layer::SLL2RegMsgRsp)},
  { 27, -1, sizeof(::service_layer::SLL2BdRegMsg)},
  { 34, -1, sizeof(::service_layer::SLL2BdRegRes)},
  { 41, -1, sizeof(::service_layer::SLL2BdRegMsgRsp)},
  { 48, -1, sizeof(::service_layer::SLL2RouteEsi)},
  { 54, -1, sizeof(::service_layer::SLL2RouteNh)},
  { 63, -1, sizeof(::service_layer::SLL2OverlayNh)},
  { 73, -1, sizeof(::service_layer::SLL2MacRouteKey)},
  { 80, -1, sizeof(::service_layer::SLL2MacRoute)},
  { 89, -1, sizeof(::service_layer::SLL2ImetRouteKey)},
  { 96, -1, sizeof(::service_layer::SLL2ImetRoute)},
  { 107, -1, sizeof(::service_layer::SLL2RouteKey)},
  { 117, -1, sizeof(::service_layer::SLL2Route)},
  { 127, -1, sizeof(::service_layer::SLL2RouteMsg)},
  { 135, -1, sizeof(::service_layer::SLL2RouteRes)},
  { 142, -1, sizeof(::service_layer::SLL2RouteMsgRsp)},
  { 150, -1, sizeof(::service_layer::SLL2GetNotifMsg)},
  { 161, -1, sizeof(::service_layer::SLL2RouteNotif)},
  { 168, -1, sizeof(::service_layer::SLL2BdStateInfo)},
  { 175, -1, sizeof(::service_layer::SLL2NotifStatusMsg)},
  { 184, -1, sizeof(::service_layer::SLL2Notif)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2GlobalsGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2GlobalsGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2BdRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2BdRegRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2BdRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteEsi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteNh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2OverlayNh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2MacRouteKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2MacRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2ImetRouteKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2ImetRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2GetNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2RouteNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2BdStateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2NotifStatusMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLL2Notif_default_instance_),
};

const char descriptor_table_protodef_sl_5fl2_5froute_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sl_l2_route.proto\022\rservice_layer\032\025sl_c"
  "ommon_types.proto\"\023\n\021SLL2GlobalsGetMsg\"\201"
  "\001\n\024SLL2GlobalsGetMsgRsp\022/\n\tErrStatus\030\001 \001"
  "(\0132\034.service_layer.SLErrorStatus\022\033\n\023MaxB"
  "dRegPerBdRegmsg\030\002 \001(\r\022\033\n\023MaxRoutePerRout"
  "emsg\030\003 \001(\r\"g\n\nSLL2RegMsg\022$\n\004Oper\030\001 \001(\0162\026"
  ".service_layer.SLRegOp\022\025\n\rAdminDistance\030"
  "\002 \001(\r\022\034\n\024PurgeIntervalSeconds\030\003 \001(\r\"@\n\rS"
  "LL2RegMsgRsp\022/\n\tRegStatus\030\001 \001(\0132\034.servic"
  "e_layer.SLErrorStatus\"G\n\014SLL2BdRegMsg\022$\n"
  "\004Oper\030\001 \001(\0162\026.service_layer.SLRegOp\022\021\n\tB"
  "dRegName\030\002 \003(\t\"O\n\014SLL2BdRegRes\022/\n\tErrSta"
  "tus\030\001 \001(\0132\034.service_layer.SLErrorStatus\022"
  "\016\n\006BdName\030\002 \001(\t\"t\n\017SLL2BdRegMsgRsp\0223\n\rSt"
  "atusSummary\030\001 \001(\0132\034.service_layer.SLErro"
  "rStatus\022,\n\007Results\030\002 \003(\0132\033.service_layer"
  ".SLL2BdRegRes\"\033\n\014SLL2RouteEsi\022\013\n\003Esi\030\001 \001"
  "(\014\"\221\002\n\013SLL2RouteNh\022:\n\006NhType\030\001 \001(\0162*.ser"
  "vice_layer.SLL2RouteNh.SLL2RouteNhType\0221"
  "\n\013NhInterface\030\002 \001(\0132\032.service_layer.SLIn"
  "terfaceH\000\0221\n\tNhOverlay\030\003 \001(\0132\034.service_l"
  "ayer.SLL2OverlayNhH\000\"V\n\017SLL2RouteNhType\022"
  "\025\n\021SL_L2_NH_RESERVED\020\000\022\026\n\022SL_L2_NH_INTER"
  "FACE\020\001\022\024\n\020SL_L2_NH_OVERLAY\020\002B\010\n\006NhData\"\302"
  "\001\n\rSLL2OverlayNh\022/\n\013OverlayNhIp\030\001 \001(\0132\032."
  "service_layer.SLIpAddress\0222\n\016OverlayNhEn"
  "cap\030\002 \001(\0162\032.service_layer.SLEncapType\022\026\n"
  "\016OverlayNhLabel\030\003 \001(\r\022\030\n\020OverlayNhL3Labe"
  "l\030\004 \003(\r\022\032\n\022OverlayNhRouterMac\030\005 \001(\014\"T\n\017S"
  "LL2MacRouteKey\022\022\n\nMacAddress\030\001 \001(\014\022-\n\tIp"
  "Address\030\002 \001(\0132\032.service_layer.SLIpAddres"
  "s\"\263\001\n\014SLL2MacRoute\0220\n\010RouteKey\030\001 \001(\0132\036.s"
  "ervice_layer.SLL2MacRouteKey\022\023\n\013Sequence"
  "Num\030\002 \001(\r\022+\n\006MacEsi\030\003 \001(\0132\033.service_laye"
  "r.SLL2RouteEsi\022/\n\013NextHopList\030\004 \003(\0132\032.se"
  "rvice_layer.SLL2RouteNh\"S\n\020SLL2ImetRoute"
  "Key\022\020\n\010EthTagId\030\001 \001(\r\022-\n\tIpAddress\030\002 \001(\013"
  "2\032.service_layer.SLIpAddress\"\307\003\n\rSLL2Ime"
  "tRoute\0221\n\010RouteKey\030\001 \001(\0132\037.service_layer"
  ".SLL2ImetRouteKey\022-\n\tEncapType\030\002 \001(\0162\032.s"
  "ervice_layer.SLEncapType\022\r\n\005Label\030\003 \001(\r\022"
  "\?\n\nTunnelType\030\004 \001(\0162+.service_layer.SLL2"
  "ImetRoute.PMSITunnelType\022\026\n\016TunnelIdLeng"
  "th\030\005 \001(\r\022\025\n\rTunnelIdValue\030\006 \001(\014\"\324\001\n\016PMSI"
  "TunnelType\022\022\n\016PMSI_NO_TUNNEL\020\000\022\030\n\024PMSI_R"
  "SVPP2MP_TUNNEL\020\001\022\030\n\024PMSI_MLDPP2MP_TUNNEL"
  "\020\002\022\026\n\022PMSI_PIMSSM_TUNNEL\020\003\022\025\n\021PMSI_PIMSM"
  "_TUNNEL\020\004\022\030\n\024PMSI_PIMBIDIR_TUNNEL\020\005\022\026\n\022P"
  "MSI_INGREP_TUNNEL\020\006\022\031\n\025PMSI_MLDPMP2MP_TU"
  "NNEL\020\007\"\271\001\n\014SLL2RouteKey\022\016\n\006BdName\030\001 \001(\t\022"
  "*\n\004Type\030\002 \001(\0162\034.service_layer.SLL2RouteT"
  "ype\0220\n\006MacKey\030\003 \001(\0132\036.service_layer.SLL2"
  "MacRouteKeyH\000\0222\n\007ImetKey\030\004 \001(\0132\037.service"
  "_layer.SLL2ImetRouteKeyH\000B\007\n\005Event\"\264\001\n\tS"
  "LL2Route\022\016\n\006BdName\030\001 \001(\t\022*\n\004Type\030\002 \001(\0162\034"
  ".service_layer.SLL2RouteType\022/\n\010MacRoute"
  "\030\003 \001(\0132\033.service_layer.SLL2MacRouteH\000\0221\n"
  "\tImetRoute\030\004 \001(\0132\034.service_layer.SLL2Ime"
  "tRouteH\000B\007\n\005Event\"u\n\014SLL2RouteMsg\022\022\n\nCor"
  "relator\030\001 \001(\004\022\'\n\004Oper\030\002 \001(\0162\031.service_la"
  "yer.SLObjectOp\022(\n\006Routes\030\003 \003(\0132\030.service"
  "_layer.SLL2Route\"n\n\014SLL2RouteRes\022/\n\tErrS"
  "tatus\030\001 \001(\0132\034.service_layer.SLErrorStatu"
  "s\022-\n\010RouteKey\030\002 \001(\0132\033.service_layer.SLL2"
  "RouteKey\"\210\001\n\017SLL2RouteMsgRsp\022\022\n\nCorrelat"
  "or\030\001 \001(\004\0223\n\rStatusSummary\030\002 \001(\0132\034.servic"
  "e_layer.SLErrorStatus\022,\n\007Results\030\003 \003(\0132\033"
  ".service_layer.SLL2RouteRes\"\220\001\n\017SLL2GetN"
  "otifMsg\022&\n\004Oper\030\001 \001(\0162\030.service_layer.SL"
  "NotifOp\022\022\n\nCorrelator\030\002 \001(\004\022\023\n\013GetNotifE"
  "of\030\003 \001(\010\022\017\n\005BdAll\030\004 \001(\010H\000\022\020\n\006BdName\030\005 \001("
  "\tH\000B\t\n\007Request\"c\n\016SLL2RouteNotif\022\'\n\004Oper"
  "\030\001 \001(\0162\031.service_layer.SLObjectOp\022(\n\006Rou"
  "tes\030\002 \001(\0132\030.service_layer.SLL2Route\"\343\001\n\017"
  "SLL2BdStateInfo\022\016\n\006BdName\030\001 \001(\t\022;\n\007BdSta"
  "te\030\002 \001(\0162*.service_layer.SLL2BdStateInfo"
  ".SLL2BdState\"\202\001\n\013SLL2BdState\022\033\n\027SL_L2_BD"
  "_STATE_RESERVED\020\000\022\030\n\024SL_L2_BD_STATE_ADDE"
  "D\020\001\022\032\n\026SL_L2_BD_STATE_DELETED\020\002\022 \n\034SL_L2"
  "_BD_STATE_REPLAY_NEEDED\020\003\"\223\001\n\022SLL2NotifS"
  "tatusMsg\022&\n\004Oper\030\001 \001(\0162\030.service_layer.S"
  "LNotifOp\022\022\n\nCorrelator\030\002 \001(\004\022\016\n\006BdName\030\003"
  " \001(\t\0221\n\013NotifStatus\030\004 \001(\0132\034.service_laye"
  "r.SLErrorStatus\"\231\002\n\tSLL2Notif\022/\n\tEventTy"
  "pe\030\001 \001(\0162\034.service_layer.SLL2NotifType\0221"
  "\n\tErrStatus\030\002 \001(\0132\034.service_layer.SLErro"
  "rStatusH\000\0228\n\013NotifStatus\030\003 \001(\0132!.service"
  "_layer.SLL2NotifStatusMsgH\000\0225\n\013BdStateIn"
  "fo\030\004 \001(\0132\036.service_layer.SLL2BdStateInfo"
  "H\000\022.\n\005Route\030\005 \001(\0132\035.service_layer.SLL2Ro"
  "uteNotifH\000B\007\n\005Event*T\n\rSLL2RouteType\022\030\n\024"
  "SL_L2_ROUTE_RESERVED\020\000\022\023\n\017SL_L2_ROUTE_MA"
  "C\020\001\022\024\n\020SL_L2_ROUTE_IMET\020\002*\226\002\n\rSLL2NotifT"
  "ype\022\035\n\031SL_L2_EVENT_TYPE_RESERVED\020\000\022\032\n\026SL"
  "_L2_EVENT_TYPE_ERROR\020\001\022\033\n\027SL_L2_EVENT_TY"
  "PE_STATUS\020\002\022!\n\035SL_L2_EVENT_TYPE_START_MA"
  "RKER\020\003\022\035\n\031SL_L2_EVENT_TYPE_BD_STATE\020\004\022(\n"
  "$SL_L2_EVENT_TYPE_BD_STATE_END_MARKER\020\005\022"
  "\032\n\026SL_L2_EVENT_TYPE_ROUTE\020\006\022%\n!SL_L2_EVE"
  "NT_TYPE_ROUTE_END_MARKER\020\0072\353\003\n\010SLL2Oper\022"
  "W\n\016SLL2GlobalsGet\022 .service_layer.SLL2Gl"
  "obalsGetMsg\032#.service_layer.SLL2GlobalsG"
  "etMsgRsp\022D\n\tSLL2RegOp\022\031.service_layer.SL"
  "L2RegMsg\032\034.service_layer.SLL2RegMsgRsp\022J"
  "\n\013SLL2BdRegOp\022\033.service_layer.SLL2BdRegM"
  "sg\032\036.service_layer.SLL2BdRegMsgRsp\022J\n\013SL"
  "L2RouteOp\022\033.service_layer.SLL2RouteMsg\032\036"
  ".service_layer.SLL2RouteMsgRsp\022T\n\021SLL2Ro"
  "uteOpStream\022\033.service_layer.SLL2RouteMsg"
  "\032\036.service_layer.SLL2RouteMsgRsp(\0010\001\022R\n\022"
  "SLL2GetNotifStream\022\036.service_layer.SLL2G"
  "etNotifMsg\032\030.service_layer.SLL2Notif(\0010\001"
  "BCZAgithub.com/Cisco-service-layer/servi"
  "ce-layer-objmodel/grpc/protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fl2_5froute_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fl2_5froute_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fl2_5froute_2eproto = {
  false, false, 4557, descriptor_table_protodef_sl_5fl2_5froute_2eproto, "sl_l2_route.proto", 
  &descriptor_table_sl_5fl2_5froute_2eproto_once, descriptor_table_sl_5fl2_5froute_2eproto_deps, 1, 24,
  schemas, file_default_instances, TableStruct_sl_5fl2_5froute_2eproto::offsets,
  file_level_metadata_sl_5fl2_5froute_2eproto, file_level_enum_descriptors_sl_5fl2_5froute_2eproto, file_level_service_descriptors_sl_5fl2_5froute_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_sl_5fl2_5froute_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fl2_5froute_2eproto);
  return descriptor_table_sl_5fl2_5froute_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fl2_5froute_2eproto(&descriptor_table_sl_5fl2_5froute_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLL2RouteNh_SLL2RouteNhType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fl2_5froute_2eproto);
  return file_level_enum_descriptors_sl_5fl2_5froute_2eproto[0];
}
bool SLL2RouteNh_SLL2RouteNhType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLL2RouteNh_SLL2RouteNhType SLL2RouteNh::SL_L2_NH_RESERVED;
constexpr SLL2RouteNh_SLL2RouteNhType SLL2RouteNh::SL_L2_NH_INTERFACE;
constexpr SLL2RouteNh_SLL2RouteNhType SLL2RouteNh::SL_L2_NH_OVERLAY;
constexpr SLL2RouteNh_SLL2RouteNhType SLL2RouteNh::SLL2RouteNhType_MIN;
constexpr SLL2RouteNh_SLL2RouteNhType SLL2RouteNh::SLL2RouteNhType_MAX;
constexpr int SLL2RouteNh::SLL2RouteNhType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLL2ImetRoute_PMSITunnelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fl2_5froute_2eproto);
  return file_level_enum_descriptors_sl_5fl2_5froute_2eproto[1];
}
bool SLL2ImetRoute_PMSITunnelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_NO_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_RSVPP2MP_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_MLDPP2MP_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_PIMSSM_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_PIMSM_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_PIMBIDIR_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_INGREP_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSI_MLDPMP2MP_TUNNEL;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSITunnelType_MIN;
constexpr SLL2ImetRoute_PMSITunnelType SLL2ImetRoute::PMSITunnelType_MAX;
constexpr int SLL2ImetRoute::PMSITunnelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLL2BdStateInfo_SLL2BdState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fl2_5froute_2eproto);
  return file_level_enum_descriptors_sl_5fl2_5froute_2eproto[2];
}
bool SLL2BdStateInfo_SLL2BdState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SLL2BdStateInfo_SLL2BdState SLL2BdStateInfo::SL_L2_BD_STATE_RESERVED;
constexpr SLL2BdStateInfo_SLL2BdState SLL2BdStateInfo::SL_L2_BD_STATE_ADDED;
constexpr SLL2BdStateInfo_SLL2BdState SLL2BdStateInfo::SL_L2_BD_STATE_DELETED;
constexpr SLL2BdStateInfo_SLL2BdState SLL2BdStateInfo::SL_L2_BD_STATE_REPLAY_NEEDED;
constexpr SLL2BdStateInfo_SLL2BdState SLL2BdStateInfo::SLL2BdState_MIN;
constexpr SLL2BdStateInfo_SLL2BdState SLL2BdStateInfo::SLL2BdState_MAX;
constexpr int SLL2BdStateInfo::SLL2BdState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLL2RouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fl2_5froute_2eproto);
  return file_level_enum_descriptors_sl_5fl2_5froute_2eproto[3];
}
bool SLL2RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLL2NotifType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fl2_5froute_2eproto);
  return file_level_enum_descriptors_sl_5fl2_5froute_2eproto[4];
}
bool SLL2NotifType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLL2GlobalsGetMsg::_Internal {
 public:
};

SLL2GlobalsGetMsg::SLL2GlobalsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2GlobalsGetMsg)
}
SLL2GlobalsGetMsg::SLL2GlobalsGetMsg(const SLL2GlobalsGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2GlobalsGetMsg)
}

void SLL2GlobalsGetMsg::SharedCtor() {
}

SLL2GlobalsGetMsg::~SLL2GlobalsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2GlobalsGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2GlobalsGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLL2GlobalsGetMsg::ArenaDtor(void* object) {
  SLL2GlobalsGetMsg* _this = reinterpret_cast< SLL2GlobalsGetMsg* >(object);
  (void)_this;
}
void SLL2GlobalsGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2GlobalsGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2GlobalsGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2GlobalsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2GlobalsGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2GlobalsGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2GlobalsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2GlobalsGetMsg)
  return target;
}

size_t SLL2GlobalsGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2GlobalsGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2GlobalsGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2GlobalsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2GlobalsGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2GlobalsGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2GlobalsGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2GlobalsGetMsg)
    MergeFrom(*source);
  }
}

void SLL2GlobalsGetMsg::MergeFrom(const SLL2GlobalsGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2GlobalsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLL2GlobalsGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2GlobalsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2GlobalsGetMsg::CopyFrom(const SLL2GlobalsGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2GlobalsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2GlobalsGetMsg::IsInitialized() const {
  return true;
}

void SLL2GlobalsGetMsg::InternalSwap(SLL2GlobalsGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2GlobalsGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2GlobalsGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLL2GlobalsGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLL2GlobalsGetMsgRsp::_Internal::errstatus(const SLL2GlobalsGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLL2GlobalsGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLL2GlobalsGetMsgRsp::SLL2GlobalsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2GlobalsGetMsgRsp)
}
SLL2GlobalsGetMsgRsp::SLL2GlobalsGetMsgRsp(const SLL2GlobalsGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&maxbdregperbdregmsg_, &from.maxbdregperbdregmsg_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxrouteperroutemsg_) -
    reinterpret_cast<char*>(&maxbdregperbdregmsg_)) + sizeof(maxrouteperroutemsg_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2GlobalsGetMsgRsp)
}

void SLL2GlobalsGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxrouteperroutemsg_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(maxrouteperroutemsg_));
}

SLL2GlobalsGetMsgRsp::~SLL2GlobalsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2GlobalsGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2GlobalsGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLL2GlobalsGetMsgRsp::ArenaDtor(void* object) {
  SLL2GlobalsGetMsgRsp* _this = reinterpret_cast< SLL2GlobalsGetMsgRsp* >(object);
  (void)_this;
}
void SLL2GlobalsGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2GlobalsGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2GlobalsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2GlobalsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&maxbdregperbdregmsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrouteperroutemsg_) -
      reinterpret_cast<char*>(&maxbdregperbdregmsg_)) + sizeof(maxrouteperroutemsg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2GlobalsGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxBdRegPerBdRegmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxbdregperbdregmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxRoutePerRoutemsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxrouteperroutemsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2GlobalsGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2GlobalsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxBdRegPerBdRegmsg = 2;
  if (this->maxbdregperbdregmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxbdregperbdregmsg(), target);
  }

  // uint32 MaxRoutePerRoutemsg = 3;
  if (this->maxrouteperroutemsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxrouteperroutemsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2GlobalsGetMsgRsp)
  return target;
}

size_t SLL2GlobalsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2GlobalsGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxBdRegPerBdRegmsg = 2;
  if (this->maxbdregperbdregmsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbdregperbdregmsg());
  }

  // uint32 MaxRoutePerRoutemsg = 3;
  if (this->maxrouteperroutemsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxrouteperroutemsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2GlobalsGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2GlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2GlobalsGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2GlobalsGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2GlobalsGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2GlobalsGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLL2GlobalsGetMsgRsp::MergeFrom(const SLL2GlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2GlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.maxbdregperbdregmsg() != 0) {
    _internal_set_maxbdregperbdregmsg(from._internal_maxbdregperbdregmsg());
  }
  if (from.maxrouteperroutemsg() != 0) {
    _internal_set_maxrouteperroutemsg(from._internal_maxrouteperroutemsg());
  }
}

void SLL2GlobalsGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2GlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2GlobalsGetMsgRsp::CopyFrom(const SLL2GlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2GlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2GlobalsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLL2GlobalsGetMsgRsp::InternalSwap(SLL2GlobalsGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2GlobalsGetMsgRsp, maxrouteperroutemsg_)
      + sizeof(SLL2GlobalsGetMsgRsp::maxrouteperroutemsg_)
      - PROTOBUF_FIELD_OFFSET(SLL2GlobalsGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2GlobalsGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RegMsg::_Internal {
 public:
};

SLL2RegMsg::SLL2RegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RegMsg)
}
SLL2RegMsg::SLL2RegMsg(const SLL2RegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oper_, &from.oper_,
    static_cast<size_t>(reinterpret_cast<char*>(&purgeintervalseconds_) -
    reinterpret_cast<char*>(&oper_)) + sizeof(purgeintervalseconds_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RegMsg)
}

void SLL2RegMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purgeintervalseconds_) -
    reinterpret_cast<char*>(&oper_)) + sizeof(purgeintervalseconds_));
}

SLL2RegMsg::~SLL2RegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RegMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLL2RegMsg::ArenaDtor(void* object) {
  SLL2RegMsg* _this = reinterpret_cast< SLL2RegMsg* >(object);
  (void)_this;
}
void SLL2RegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purgeintervalseconds_) -
      reinterpret_cast<char*>(&oper_)) + sizeof(purgeintervalseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else goto handle_unusual;
        continue;
      // uint32 AdminDistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PurgeIntervalSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          purgeintervalseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RegMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint32 AdminDistance = 2;
  if (this->admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_admindistance(), target);
  }

  // uint32 PurgeIntervalSeconds = 3;
  if (this->purgeintervalseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_purgeintervalseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RegMsg)
  return target;
}

size_t SLL2RegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RegMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  // uint32 AdminDistance = 2;
  if (this->admindistance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admindistance());
  }

  // uint32 PurgeIntervalSeconds = 3;
  if (this->purgeintervalseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_purgeintervalseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RegMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RegMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RegMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RegMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RegMsg)
    MergeFrom(*source);
  }
}

void SLL2RegMsg::MergeFrom(const SLL2RegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  if (from.admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  if (from.purgeintervalseconds() != 0) {
    _internal_set_purgeintervalseconds(from._internal_purgeintervalseconds());
  }
}

void SLL2RegMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RegMsg::CopyFrom(const SLL2RegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RegMsg::IsInitialized() const {
  return true;
}

void SLL2RegMsg::InternalSwap(SLL2RegMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2RegMsg, purgeintervalseconds_)
      + sizeof(SLL2RegMsg::purgeintervalseconds_)
      - PROTOBUF_FIELD_OFFSET(SLL2RegMsg, oper_)>(
          reinterpret_cast<char*>(&oper_),
          reinterpret_cast<char*>(&other->oper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RegMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& regstatus(const SLL2RegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLL2RegMsgRsp::_Internal::regstatus(const SLL2RegMsgRsp* msg) {
  return *msg->regstatus_;
}
void SLL2RegMsgRsp::clear_regstatus() {
  if (GetArena() == nullptr && regstatus_ != nullptr) {
    delete regstatus_;
  }
  regstatus_ = nullptr;
}
SLL2RegMsgRsp::SLL2RegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RegMsgRsp)
}
SLL2RegMsgRsp::SLL2RegMsgRsp(const SLL2RegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_regstatus()) {
    regstatus_ = new ::service_layer::SLErrorStatus(*from.regstatus_);
  } else {
    regstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RegMsgRsp)
}

void SLL2RegMsgRsp::SharedCtor() {
regstatus_ = nullptr;
}

SLL2RegMsgRsp::~SLL2RegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RegMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete regstatus_;
}

void SLL2RegMsgRsp::ArenaDtor(void* object) {
  SLL2RegMsgRsp* _this = reinterpret_cast< SLL2RegMsgRsp* >(object);
  (void)_this;
}
void SLL2RegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && regstatus_ != nullptr) {
    delete regstatus_;
  }
  regstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus RegStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_regstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RegMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus RegStatus = 1;
  if (this->has_regstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::regstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RegMsgRsp)
  return target;
}

size_t SLL2RegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RegMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus RegStatus = 1;
  if (this->has_regstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RegMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RegMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RegMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RegMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RegMsgRsp)
    MergeFrom(*source);
  }
}

void SLL2RegMsgRsp::MergeFrom(const SLL2RegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_regstatus()) {
    _internal_mutable_regstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_regstatus());
  }
}

void SLL2RegMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RegMsgRsp::CopyFrom(const SLL2RegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RegMsgRsp::IsInitialized() const {
  return true;
}

void SLL2RegMsgRsp::InternalSwap(SLL2RegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(regstatus_, other->regstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RegMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2BdRegMsg::_Internal {
 public:
};

SLL2BdRegMsg::SLL2BdRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bdregname_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2BdRegMsg)
}
SLL2BdRegMsg::SLL2BdRegMsg(const SLL2BdRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bdregname_(from.bdregname_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2BdRegMsg)
}

void SLL2BdRegMsg::SharedCtor() {
oper_ = 0;
}

SLL2BdRegMsg::~SLL2BdRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2BdRegMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2BdRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLL2BdRegMsg::ArenaDtor(void* object) {
  SLL2BdRegMsg* _this = reinterpret_cast< SLL2BdRegMsg* >(object);
  (void)_this;
}
void SLL2BdRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2BdRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2BdRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2BdRegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdregname_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2BdRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else goto handle_unusual;
        continue;
      // repeated string BdRegName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bdregname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2BdRegMsg.BdRegName"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2BdRegMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2BdRegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated string BdRegName = 2;
  for (int i = 0, n = this->_internal_bdregname_size(); i < n; i++) {
    const auto& s = this->_internal_bdregname(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2BdRegMsg.BdRegName");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2BdRegMsg)
  return target;
}

size_t SLL2BdRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2BdRegMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string BdRegName = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bdregname_.size());
  for (int i = 0, n = bdregname_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bdregname_.Get(i));
  }

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2BdRegMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2BdRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2BdRegMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2BdRegMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2BdRegMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2BdRegMsg)
    MergeFrom(*source);
  }
}

void SLL2BdRegMsg::MergeFrom(const SLL2BdRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2BdRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bdregname_.MergeFrom(from.bdregname_);
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLL2BdRegMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2BdRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2BdRegMsg::CopyFrom(const SLL2BdRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2BdRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2BdRegMsg::IsInitialized() const {
  return true;
}

void SLL2BdRegMsg::InternalSwap(SLL2BdRegMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bdregname_.InternalSwap(&other->bdregname_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2BdRegMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2BdRegRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLL2BdRegRes* msg);
};

const ::service_layer::SLErrorStatus&
SLL2BdRegRes::_Internal::errstatus(const SLL2BdRegRes* msg) {
  return *msg->errstatus_;
}
void SLL2BdRegRes::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLL2BdRegRes::SLL2BdRegRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2BdRegRes)
}
SLL2BdRegRes::SLL2BdRegRes(const SLL2BdRegRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bdname().empty()) {
    bdname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdname(), 
      GetArena());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2BdRegRes)
}

void SLL2BdRegRes::SharedCtor() {
bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
errstatus_ = nullptr;
}

SLL2BdRegRes::~SLL2BdRegRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2BdRegRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2BdRegRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bdname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLL2BdRegRes::ArenaDtor(void* object) {
  SLL2BdRegRes* _this = reinterpret_cast< SLL2BdRegRes* >(object);
  (void)_this;
}
void SLL2BdRegRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2BdRegRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2BdRegRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2BdRegRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdname_.ClearToEmpty();
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2BdRegRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BdName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bdname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2BdRegRes.BdName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2BdRegRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2BdRegRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // string BdName = 2;
  if (this->bdname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdname().data(), static_cast<int>(this->_internal_bdname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2BdRegRes.BdName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bdname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2BdRegRes)
  return target;
}

size_t SLL2BdRegRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2BdRegRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BdName = 2;
  if (this->bdname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdname());
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2BdRegRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2BdRegRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2BdRegRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2BdRegRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2BdRegRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2BdRegRes)
    MergeFrom(*source);
  }
}

void SLL2BdRegRes::MergeFrom(const SLL2BdRegRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2BdRegRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bdname().size() > 0) {
    _internal_set_bdname(from._internal_bdname());
  }
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
}

void SLL2BdRegRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2BdRegRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2BdRegRes::CopyFrom(const SLL2BdRegRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2BdRegRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2BdRegRes::IsInitialized() const {
  return true;
}

void SLL2BdRegRes::InternalSwap(SLL2BdRegRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bdname_.Swap(&other->bdname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errstatus_, other->errstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2BdRegRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2BdRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLL2BdRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLL2BdRegMsgRsp::_Internal::statussummary(const SLL2BdRegMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLL2BdRegMsgRsp::clear_statussummary() {
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLL2BdRegMsgRsp::SLL2BdRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2BdRegMsgRsp)
}
SLL2BdRegMsgRsp::SLL2BdRegMsgRsp(const SLL2BdRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2BdRegMsgRsp)
}

void SLL2BdRegMsgRsp::SharedCtor() {
statussummary_ = nullptr;
}

SLL2BdRegMsgRsp::~SLL2BdRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2BdRegMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2BdRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLL2BdRegMsgRsp::ArenaDtor(void* object) {
  SLL2BdRegMsgRsp* _this = reinterpret_cast< SLL2BdRegMsgRsp* >(object);
  (void)_this;
}
void SLL2BdRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2BdRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2BdRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2BdRegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2BdRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLL2BdRegRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2BdRegMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2BdRegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLL2BdRegRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2BdRegMsgRsp)
  return target;
}

size_t SLL2BdRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2BdRegMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLL2BdRegRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2BdRegMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2BdRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2BdRegMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2BdRegMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2BdRegMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2BdRegMsgRsp)
    MergeFrom(*source);
  }
}

void SLL2BdRegMsgRsp::MergeFrom(const SLL2BdRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2BdRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
}

void SLL2BdRegMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2BdRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2BdRegMsgRsp::CopyFrom(const SLL2BdRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2BdRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2BdRegMsgRsp::IsInitialized() const {
  return true;
}

void SLL2BdRegMsgRsp::InternalSwap(SLL2BdRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2BdRegMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteEsi::_Internal {
 public:
};

SLL2RouteEsi::SLL2RouteEsi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteEsi)
}
SLL2RouteEsi::SLL2RouteEsi(const SLL2RouteEsi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  esi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_esi().empty()) {
    esi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_esi(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteEsi)
}

void SLL2RouteEsi::SharedCtor() {
esi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLL2RouteEsi::~SLL2RouteEsi() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteEsi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteEsi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  esi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLL2RouteEsi::ArenaDtor(void* object) {
  SLL2RouteEsi* _this = reinterpret_cast< SLL2RouteEsi* >(object);
  (void)_this;
}
void SLL2RouteEsi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteEsi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteEsi::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteEsi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  esi_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteEsi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Esi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_esi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteEsi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteEsi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Esi = 1;
  if (this->esi().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_esi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteEsi)
  return target;
}

size_t SLL2RouteEsi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteEsi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Esi = 1;
  if (this->esi().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_esi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteEsi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteEsi)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteEsi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteEsi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteEsi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteEsi)
    MergeFrom(*source);
  }
}

void SLL2RouteEsi::MergeFrom(const SLL2RouteEsi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteEsi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.esi().size() > 0) {
    _internal_set_esi(from._internal_esi());
  }
}

void SLL2RouteEsi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteEsi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteEsi::CopyFrom(const SLL2RouteEsi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteEsi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteEsi::IsInitialized() const {
  return true;
}

void SLL2RouteEsi::InternalSwap(SLL2RouteEsi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  esi_.Swap(&other->esi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteEsi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteNh::_Internal {
 public:
  static const ::service_layer::SLInterface& nhinterface(const SLL2RouteNh* msg);
  static const ::service_layer::SLL2OverlayNh& nhoverlay(const SLL2RouteNh* msg);
};

const ::service_layer::SLInterface&
SLL2RouteNh::_Internal::nhinterface(const SLL2RouteNh* msg) {
  return *msg->NhData_.nhinterface_;
}
const ::service_layer::SLL2OverlayNh&
SLL2RouteNh::_Internal::nhoverlay(const SLL2RouteNh* msg) {
  return *msg->NhData_.nhoverlay_;
}
void SLL2RouteNh::set_allocated_nhinterface(::service_layer::SLInterface* nhinterface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_NhData();
  if (nhinterface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nhinterface)->GetArena();
    if (message_arena != submessage_arena) {
      nhinterface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nhinterface, submessage_arena);
    }
    set_has_nhinterface();
    NhData_.nhinterface_ = nhinterface;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2RouteNh.NhInterface)
}
void SLL2RouteNh::clear_nhinterface() {
  if (_internal_has_nhinterface()) {
    if (GetArena() == nullptr) {
      delete NhData_.nhinterface_;
    }
    clear_has_NhData();
  }
}
void SLL2RouteNh::set_allocated_nhoverlay(::service_layer::SLL2OverlayNh* nhoverlay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_NhData();
  if (nhoverlay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nhoverlay);
    if (message_arena != submessage_arena) {
      nhoverlay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nhoverlay, submessage_arena);
    }
    set_has_nhoverlay();
    NhData_.nhoverlay_ = nhoverlay;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2RouteNh.NhOverlay)
}
SLL2RouteNh::SLL2RouteNh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteNh)
}
SLL2RouteNh::SLL2RouteNh(const SLL2RouteNh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nhtype_ = from.nhtype_;
  clear_has_NhData();
  switch (from.NhData_case()) {
    case kNhInterface: {
      _internal_mutable_nhinterface()->::service_layer::SLInterface::MergeFrom(from._internal_nhinterface());
      break;
    }
    case kNhOverlay: {
      _internal_mutable_nhoverlay()->::service_layer::SLL2OverlayNh::MergeFrom(from._internal_nhoverlay());
      break;
    }
    case NHDATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteNh)
}

void SLL2RouteNh::SharedCtor() {
nhtype_ = 0;
clear_has_NhData();
}

SLL2RouteNh::~SLL2RouteNh() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteNh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteNh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_NhData()) {
    clear_NhData();
  }
}

void SLL2RouteNh::ArenaDtor(void* object) {
  SLL2RouteNh* _this = reinterpret_cast< SLL2RouteNh* >(object);
  (void)_this;
}
void SLL2RouteNh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteNh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteNh::clear_NhData() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLL2RouteNh)
  switch (NhData_case()) {
    case kNhInterface: {
      if (GetArena() == nullptr) {
        delete NhData_.nhinterface_;
      }
      break;
    }
    case kNhOverlay: {
      if (GetArena() == nullptr) {
        delete NhData_.nhoverlay_;
      }
      break;
    }
    case NHDATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NHDATA_NOT_SET;
}


void SLL2RouteNh::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteNh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nhtype_ = 0;
  clear_NhData();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteNh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLL2RouteNh.SLL2RouteNhType NhType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nhtype(static_cast<::service_layer::SLL2RouteNh_SLL2RouteNhType>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLInterface NhInterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nhinterface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2OverlayNh NhOverlay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nhoverlay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteNh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteNh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLL2RouteNh.SLL2RouteNhType NhType = 1;
  if (this->nhtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_nhtype(), target);
  }

  // .service_layer.SLInterface NhInterface = 2;
  if (_internal_has_nhinterface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nhinterface(this), target, stream);
  }

  // .service_layer.SLL2OverlayNh NhOverlay = 3;
  if (_internal_has_nhoverlay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nhoverlay(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteNh)
  return target;
}

size_t SLL2RouteNh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteNh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLL2RouteNh.SLL2RouteNhType NhType = 1;
  if (this->nhtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nhtype());
  }

  switch (NhData_case()) {
    // .service_layer.SLInterface NhInterface = 2;
    case kNhInterface: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NhData_.nhinterface_);
      break;
    }
    // .service_layer.SLL2OverlayNh NhOverlay = 3;
    case kNhOverlay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *NhData_.nhoverlay_);
      break;
    }
    case NHDATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteNh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteNh)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteNh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteNh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteNh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteNh)
    MergeFrom(*source);
  }
}

void SLL2RouteNh::MergeFrom(const SLL2RouteNh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteNh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nhtype() != 0) {
    _internal_set_nhtype(from._internal_nhtype());
  }
  switch (from.NhData_case()) {
    case kNhInterface: {
      _internal_mutable_nhinterface()->::service_layer::SLInterface::MergeFrom(from._internal_nhinterface());
      break;
    }
    case kNhOverlay: {
      _internal_mutable_nhoverlay()->::service_layer::SLL2OverlayNh::MergeFrom(from._internal_nhoverlay());
      break;
    }
    case NHDATA_NOT_SET: {
      break;
    }
  }
}

void SLL2RouteNh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteNh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteNh::CopyFrom(const SLL2RouteNh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteNh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteNh::IsInitialized() const {
  return true;
}

void SLL2RouteNh::InternalSwap(SLL2RouteNh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nhtype_, other->nhtype_);
  swap(NhData_, other->NhData_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteNh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2OverlayNh::_Internal {
 public:
  static const ::service_layer::SLIpAddress& overlaynhip(const SLL2OverlayNh* msg);
};

const ::service_layer::SLIpAddress&
SLL2OverlayNh::_Internal::overlaynhip(const SLL2OverlayNh* msg) {
  return *msg->overlaynhip_;
}
void SLL2OverlayNh::clear_overlaynhip() {
  if (GetArena() == nullptr && overlaynhip_ != nullptr) {
    delete overlaynhip_;
  }
  overlaynhip_ = nullptr;
}
SLL2OverlayNh::SLL2OverlayNh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overlaynhl3label_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2OverlayNh)
}
SLL2OverlayNh::SLL2OverlayNh(const SLL2OverlayNh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      overlaynhl3label_(from.overlaynhl3label_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  overlaynhroutermac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_overlaynhroutermac().empty()) {
    overlaynhroutermac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_overlaynhroutermac(), 
      GetArena());
  }
  if (from._internal_has_overlaynhip()) {
    overlaynhip_ = new ::service_layer::SLIpAddress(*from.overlaynhip_);
  } else {
    overlaynhip_ = nullptr;
  }
  ::memcpy(&overlaynhencap_, &from.overlaynhencap_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlaynhlabel_) -
    reinterpret_cast<char*>(&overlaynhencap_)) + sizeof(overlaynhlabel_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2OverlayNh)
}

void SLL2OverlayNh::SharedCtor() {
overlaynhroutermac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&overlaynhip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&overlaynhlabel_) -
    reinterpret_cast<char*>(&overlaynhip_)) + sizeof(overlaynhlabel_));
}

SLL2OverlayNh::~SLL2OverlayNh() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2OverlayNh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2OverlayNh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  overlaynhroutermac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overlaynhip_;
}

void SLL2OverlayNh::ArenaDtor(void* object) {
  SLL2OverlayNh* _this = reinterpret_cast< SLL2OverlayNh* >(object);
  (void)_this;
}
void SLL2OverlayNh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2OverlayNh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2OverlayNh::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2OverlayNh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlaynhl3label_.Clear();
  overlaynhroutermac_.ClearToEmpty();
  if (GetArena() == nullptr && overlaynhip_ != nullptr) {
    delete overlaynhip_;
  }
  overlaynhip_ = nullptr;
  ::memset(&overlaynhencap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlaynhlabel_) -
      reinterpret_cast<char*>(&overlaynhencap_)) + sizeof(overlaynhlabel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2OverlayNh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLIpAddress OverlayNhIp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlaynhip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLEncapType OverlayNhEncap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_overlaynhencap(static_cast<::service_layer::SLEncapType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 OverlayNhLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          overlaynhlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 OverlayNhL3Label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_overlaynhl3label(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_overlaynhl3label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OverlayNhRouterMac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_overlaynhroutermac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2OverlayNh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2OverlayNh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLIpAddress OverlayNhIp = 1;
  if (this->has_overlaynhip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::overlaynhip(this), target, stream);
  }

  // .service_layer.SLEncapType OverlayNhEncap = 2;
  if (this->overlaynhencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_overlaynhencap(), target);
  }

  // uint32 OverlayNhLabel = 3;
  if (this->overlaynhlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_overlaynhlabel(), target);
  }

  // repeated uint32 OverlayNhL3Label = 4;
  {
    int byte_size = _overlaynhl3label_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_overlaynhl3label(), byte_size, target);
    }
  }

  // bytes OverlayNhRouterMac = 5;
  if (this->overlaynhroutermac().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_overlaynhroutermac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2OverlayNh)
  return target;
}

size_t SLL2OverlayNh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2OverlayNh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 OverlayNhL3Label = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->overlaynhl3label_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _overlaynhl3label_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes OverlayNhRouterMac = 5;
  if (this->overlaynhroutermac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_overlaynhroutermac());
  }

  // .service_layer.SLIpAddress OverlayNhIp = 1;
  if (this->has_overlaynhip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overlaynhip_);
  }

  // .service_layer.SLEncapType OverlayNhEncap = 2;
  if (this->overlaynhencap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_overlaynhencap());
  }

  // uint32 OverlayNhLabel = 3;
  if (this->overlaynhlabel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_overlaynhlabel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2OverlayNh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2OverlayNh)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2OverlayNh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2OverlayNh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2OverlayNh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2OverlayNh)
    MergeFrom(*source);
  }
}

void SLL2OverlayNh::MergeFrom(const SLL2OverlayNh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2OverlayNh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlaynhl3label_.MergeFrom(from.overlaynhl3label_);
  if (from.overlaynhroutermac().size() > 0) {
    _internal_set_overlaynhroutermac(from._internal_overlaynhroutermac());
  }
  if (from.has_overlaynhip()) {
    _internal_mutable_overlaynhip()->::service_layer::SLIpAddress::MergeFrom(from._internal_overlaynhip());
  }
  if (from.overlaynhencap() != 0) {
    _internal_set_overlaynhencap(from._internal_overlaynhencap());
  }
  if (from.overlaynhlabel() != 0) {
    _internal_set_overlaynhlabel(from._internal_overlaynhlabel());
  }
}

void SLL2OverlayNh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2OverlayNh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2OverlayNh::CopyFrom(const SLL2OverlayNh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2OverlayNh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2OverlayNh::IsInitialized() const {
  return true;
}

void SLL2OverlayNh::InternalSwap(SLL2OverlayNh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  overlaynhl3label_.InternalSwap(&other->overlaynhl3label_);
  overlaynhroutermac_.Swap(&other->overlaynhroutermac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2OverlayNh, overlaynhlabel_)
      + sizeof(SLL2OverlayNh::overlaynhlabel_)
      - PROTOBUF_FIELD_OFFSET(SLL2OverlayNh, overlaynhip_)>(
          reinterpret_cast<char*>(&overlaynhip_),
          reinterpret_cast<char*>(&other->overlaynhip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2OverlayNh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2MacRouteKey::_Internal {
 public:
  static const ::service_layer::SLIpAddress& ipaddress(const SLL2MacRouteKey* msg);
};

const ::service_layer::SLIpAddress&
SLL2MacRouteKey::_Internal::ipaddress(const SLL2MacRouteKey* msg) {
  return *msg->ipaddress_;
}
void SLL2MacRouteKey::clear_ipaddress() {
  if (GetArena() == nullptr && ipaddress_ != nullptr) {
    delete ipaddress_;
  }
  ipaddress_ = nullptr;
}
SLL2MacRouteKey::SLL2MacRouteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2MacRouteKey)
}
SLL2MacRouteKey::SLL2MacRouteKey(const SLL2MacRouteKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_macaddress().empty()) {
    macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_macaddress(), 
      GetArena());
  }
  if (from._internal_has_ipaddress()) {
    ipaddress_ = new ::service_layer::SLIpAddress(*from.ipaddress_);
  } else {
    ipaddress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2MacRouteKey)
}

void SLL2MacRouteKey::SharedCtor() {
macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipaddress_ = nullptr;
}

SLL2MacRouteKey::~SLL2MacRouteKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2MacRouteKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2MacRouteKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  macaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ipaddress_;
}

void SLL2MacRouteKey::ArenaDtor(void* object) {
  SLL2MacRouteKey* _this = reinterpret_cast< SLL2MacRouteKey* >(object);
  (void)_this;
}
void SLL2MacRouteKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2MacRouteKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2MacRouteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2MacRouteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  macaddress_.ClearToEmpty();
  if (GetArena() == nullptr && ipaddress_ != nullptr) {
    delete ipaddress_;
  }
  ipaddress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2MacRouteKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes MacAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_macaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLIpAddress IpAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2MacRouteKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2MacRouteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes MacAddress = 1;
  if (this->macaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_macaddress(), target);
  }

  // .service_layer.SLIpAddress IpAddress = 2;
  if (this->has_ipaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipaddress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2MacRouteKey)
  return target;
}

size_t SLL2MacRouteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2MacRouteKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes MacAddress = 1;
  if (this->macaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_macaddress());
  }

  // .service_layer.SLIpAddress IpAddress = 2;
  if (this->has_ipaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipaddress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2MacRouteKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2MacRouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2MacRouteKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2MacRouteKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2MacRouteKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2MacRouteKey)
    MergeFrom(*source);
  }
}

void SLL2MacRouteKey::MergeFrom(const SLL2MacRouteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2MacRouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.macaddress().size() > 0) {
    _internal_set_macaddress(from._internal_macaddress());
  }
  if (from.has_ipaddress()) {
    _internal_mutable_ipaddress()->::service_layer::SLIpAddress::MergeFrom(from._internal_ipaddress());
  }
}

void SLL2MacRouteKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2MacRouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2MacRouteKey::CopyFrom(const SLL2MacRouteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2MacRouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2MacRouteKey::IsInitialized() const {
  return true;
}

void SLL2MacRouteKey::InternalSwap(SLL2MacRouteKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  macaddress_.Swap(&other->macaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ipaddress_, other->ipaddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2MacRouteKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2MacRoute::_Internal {
 public:
  static const ::service_layer::SLL2MacRouteKey& routekey(const SLL2MacRoute* msg);
  static const ::service_layer::SLL2RouteEsi& macesi(const SLL2MacRoute* msg);
};

const ::service_layer::SLL2MacRouteKey&
SLL2MacRoute::_Internal::routekey(const SLL2MacRoute* msg) {
  return *msg->routekey_;
}
const ::service_layer::SLL2RouteEsi&
SLL2MacRoute::_Internal::macesi(const SLL2MacRoute* msg) {
  return *msg->macesi_;
}
SLL2MacRoute::SLL2MacRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nexthoplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2MacRoute)
}
SLL2MacRoute::SLL2MacRoute(const SLL2MacRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nexthoplist_(from.nexthoplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routekey()) {
    routekey_ = new ::service_layer::SLL2MacRouteKey(*from.routekey_);
  } else {
    routekey_ = nullptr;
  }
  if (from._internal_has_macesi()) {
    macesi_ = new ::service_layer::SLL2RouteEsi(*from.macesi_);
  } else {
    macesi_ = nullptr;
  }
  sequencenum_ = from.sequencenum_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2MacRoute)
}

void SLL2MacRoute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routekey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequencenum_) -
    reinterpret_cast<char*>(&routekey_)) + sizeof(sequencenum_));
}

SLL2MacRoute::~SLL2MacRoute() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2MacRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2MacRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete routekey_;
  if (this != internal_default_instance()) delete macesi_;
}

void SLL2MacRoute::ArenaDtor(void* object) {
  SLL2MacRoute* _this = reinterpret_cast< SLL2MacRoute* >(object);
  (void)_this;
}
void SLL2MacRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2MacRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2MacRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2MacRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nexthoplist_.Clear();
  if (GetArena() == nullptr && routekey_ != nullptr) {
    delete routekey_;
  }
  routekey_ = nullptr;
  if (GetArena() == nullptr && macesi_ != nullptr) {
    delete macesi_;
  }
  macesi_ = nullptr;
  sequencenum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2MacRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLL2MacRouteKey RouteKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routekey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SequenceNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequencenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2RouteEsi MacEsi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_macesi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLL2RouteNh NextHopList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nexthoplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2MacRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2MacRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLL2MacRouteKey RouteKey = 1;
  if (this->has_routekey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routekey(this), target, stream);
  }

  // uint32 SequenceNum = 2;
  if (this->sequencenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequencenum(), target);
  }

  // .service_layer.SLL2RouteEsi MacEsi = 3;
  if (this->has_macesi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::macesi(this), target, stream);
  }

  // repeated .service_layer.SLL2RouteNh NextHopList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nexthoplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nexthoplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2MacRoute)
  return target;
}

size_t SLL2MacRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2MacRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLL2RouteNh NextHopList = 4;
  total_size += 1UL * this->_internal_nexthoplist_size();
  for (const auto& msg : this->nexthoplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLL2MacRouteKey RouteKey = 1;
  if (this->has_routekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routekey_);
  }

  // .service_layer.SLL2RouteEsi MacEsi = 3;
  if (this->has_macesi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *macesi_);
  }

  // uint32 SequenceNum = 2;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequencenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2MacRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2MacRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2MacRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2MacRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2MacRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2MacRoute)
    MergeFrom(*source);
  }
}

void SLL2MacRoute::MergeFrom(const SLL2MacRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2MacRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nexthoplist_.MergeFrom(from.nexthoplist_);
  if (from.has_routekey()) {
    _internal_mutable_routekey()->::service_layer::SLL2MacRouteKey::MergeFrom(from._internal_routekey());
  }
  if (from.has_macesi()) {
    _internal_mutable_macesi()->::service_layer::SLL2RouteEsi::MergeFrom(from._internal_macesi());
  }
  if (from.sequencenum() != 0) {
    _internal_set_sequencenum(from._internal_sequencenum());
  }
}

void SLL2MacRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2MacRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2MacRoute::CopyFrom(const SLL2MacRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2MacRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2MacRoute::IsInitialized() const {
  return true;
}

void SLL2MacRoute::InternalSwap(SLL2MacRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nexthoplist_.InternalSwap(&other->nexthoplist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2MacRoute, sequencenum_)
      + sizeof(SLL2MacRoute::sequencenum_)
      - PROTOBUF_FIELD_OFFSET(SLL2MacRoute, routekey_)>(
          reinterpret_cast<char*>(&routekey_),
          reinterpret_cast<char*>(&other->routekey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2MacRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2ImetRouteKey::_Internal {
 public:
  static const ::service_layer::SLIpAddress& ipaddress(const SLL2ImetRouteKey* msg);
};

const ::service_layer::SLIpAddress&
SLL2ImetRouteKey::_Internal::ipaddress(const SLL2ImetRouteKey* msg) {
  return *msg->ipaddress_;
}
void SLL2ImetRouteKey::clear_ipaddress() {
  if (GetArena() == nullptr && ipaddress_ != nullptr) {
    delete ipaddress_;
  }
  ipaddress_ = nullptr;
}
SLL2ImetRouteKey::SLL2ImetRouteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2ImetRouteKey)
}
SLL2ImetRouteKey::SLL2ImetRouteKey(const SLL2ImetRouteKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ipaddress()) {
    ipaddress_ = new ::service_layer::SLIpAddress(*from.ipaddress_);
  } else {
    ipaddress_ = nullptr;
  }
  ethtagid_ = from.ethtagid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2ImetRouteKey)
}

void SLL2ImetRouteKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipaddress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ethtagid_) -
    reinterpret_cast<char*>(&ipaddress_)) + sizeof(ethtagid_));
}

SLL2ImetRouteKey::~SLL2ImetRouteKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2ImetRouteKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2ImetRouteKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ipaddress_;
}

void SLL2ImetRouteKey::ArenaDtor(void* object) {
  SLL2ImetRouteKey* _this = reinterpret_cast< SLL2ImetRouteKey* >(object);
  (void)_this;
}
void SLL2ImetRouteKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2ImetRouteKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2ImetRouteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2ImetRouteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ipaddress_ != nullptr) {
    delete ipaddress_;
  }
  ipaddress_ = nullptr;
  ethtagid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2ImetRouteKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 EthTagId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ethtagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLIpAddress IpAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2ImetRouteKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2ImetRouteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 EthTagId = 1;
  if (this->ethtagid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ethtagid(), target);
  }

  // .service_layer.SLIpAddress IpAddress = 2;
  if (this->has_ipaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipaddress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2ImetRouteKey)
  return target;
}

size_t SLL2ImetRouteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2ImetRouteKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLIpAddress IpAddress = 2;
  if (this->has_ipaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipaddress_);
  }

  // uint32 EthTagId = 1;
  if (this->ethtagid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethtagid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2ImetRouteKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2ImetRouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2ImetRouteKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2ImetRouteKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2ImetRouteKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2ImetRouteKey)
    MergeFrom(*source);
  }
}

void SLL2ImetRouteKey::MergeFrom(const SLL2ImetRouteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2ImetRouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ipaddress()) {
    _internal_mutable_ipaddress()->::service_layer::SLIpAddress::MergeFrom(from._internal_ipaddress());
  }
  if (from.ethtagid() != 0) {
    _internal_set_ethtagid(from._internal_ethtagid());
  }
}

void SLL2ImetRouteKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2ImetRouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2ImetRouteKey::CopyFrom(const SLL2ImetRouteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2ImetRouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2ImetRouteKey::IsInitialized() const {
  return true;
}

void SLL2ImetRouteKey::InternalSwap(SLL2ImetRouteKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2ImetRouteKey, ethtagid_)
      + sizeof(SLL2ImetRouteKey::ethtagid_)
      - PROTOBUF_FIELD_OFFSET(SLL2ImetRouteKey, ipaddress_)>(
          reinterpret_cast<char*>(&ipaddress_),
          reinterpret_cast<char*>(&other->ipaddress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2ImetRouteKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2ImetRoute::_Internal {
 public:
  static const ::service_layer::SLL2ImetRouteKey& routekey(const SLL2ImetRoute* msg);
};

const ::service_layer::SLL2ImetRouteKey&
SLL2ImetRoute::_Internal::routekey(const SLL2ImetRoute* msg) {
  return *msg->routekey_;
}
SLL2ImetRoute::SLL2ImetRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2ImetRoute)
}
SLL2ImetRoute::SLL2ImetRoute(const SLL2ImetRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tunnelidvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tunnelidvalue().empty()) {
    tunnelidvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tunnelidvalue(), 
      GetArena());
  }
  if (from._internal_has_routekey()) {
    routekey_ = new ::service_layer::SLL2ImetRouteKey(*from.routekey_);
  } else {
    routekey_ = nullptr;
  }
  ::memcpy(&encaptype_, &from.encaptype_,
    static_cast<size_t>(reinterpret_cast<char*>(&tunnelidlength_) -
    reinterpret_cast<char*>(&encaptype_)) + sizeof(tunnelidlength_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2ImetRoute)
}

void SLL2ImetRoute::SharedCtor() {
tunnelidvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routekey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tunnelidlength_) -
    reinterpret_cast<char*>(&routekey_)) + sizeof(tunnelidlength_));
}

SLL2ImetRoute::~SLL2ImetRoute() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2ImetRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2ImetRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tunnelidvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete routekey_;
}

void SLL2ImetRoute::ArenaDtor(void* object) {
  SLL2ImetRoute* _this = reinterpret_cast< SLL2ImetRoute* >(object);
  (void)_this;
}
void SLL2ImetRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2ImetRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2ImetRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2ImetRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tunnelidvalue_.ClearToEmpty();
  if (GetArena() == nullptr && routekey_ != nullptr) {
    delete routekey_;
  }
  routekey_ = nullptr;
  ::memset(&encaptype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tunnelidlength_) -
      reinterpret_cast<char*>(&encaptype_)) + sizeof(tunnelidlength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2ImetRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLL2ImetRouteKey RouteKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routekey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLEncapType EncapType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encaptype(static_cast<::service_layer::SLEncapType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 Label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2ImetRoute.PMSITunnelType TunnelType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tunneltype(static_cast<::service_layer::SLL2ImetRoute_PMSITunnelType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 TunnelIdLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tunnelidlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TunnelIdValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tunnelidvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2ImetRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2ImetRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLL2ImetRouteKey RouteKey = 1;
  if (this->has_routekey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routekey(this), target, stream);
  }

  // .service_layer.SLEncapType EncapType = 2;
  if (this->encaptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_encaptype(), target);
  }

  // uint32 Label = 3;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_label(), target);
  }

  // .service_layer.SLL2ImetRoute.PMSITunnelType TunnelType = 4;
  if (this->tunneltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tunneltype(), target);
  }

  // uint32 TunnelIdLength = 5;
  if (this->tunnelidlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tunnelidlength(), target);
  }

  // bytes TunnelIdValue = 6;
  if (this->tunnelidvalue().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tunnelidvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2ImetRoute)
  return target;
}

size_t SLL2ImetRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2ImetRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TunnelIdValue = 6;
  if (this->tunnelidvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tunnelidvalue());
  }

  // .service_layer.SLL2ImetRouteKey RouteKey = 1;
  if (this->has_routekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routekey_);
  }

  // .service_layer.SLEncapType EncapType = 2;
  if (this->encaptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encaptype());
  }

  // uint32 Label = 3;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  // .service_layer.SLL2ImetRoute.PMSITunnelType TunnelType = 4;
  if (this->tunneltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tunneltype());
  }

  // uint32 TunnelIdLength = 5;
  if (this->tunnelidlength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tunnelidlength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2ImetRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2ImetRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2ImetRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2ImetRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2ImetRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2ImetRoute)
    MergeFrom(*source);
  }
}

void SLL2ImetRoute::MergeFrom(const SLL2ImetRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2ImetRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tunnelidvalue().size() > 0) {
    _internal_set_tunnelidvalue(from._internal_tunnelidvalue());
  }
  if (from.has_routekey()) {
    _internal_mutable_routekey()->::service_layer::SLL2ImetRouteKey::MergeFrom(from._internal_routekey());
  }
  if (from.encaptype() != 0) {
    _internal_set_encaptype(from._internal_encaptype());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.tunneltype() != 0) {
    _internal_set_tunneltype(from._internal_tunneltype());
  }
  if (from.tunnelidlength() != 0) {
    _internal_set_tunnelidlength(from._internal_tunnelidlength());
  }
}

void SLL2ImetRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2ImetRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2ImetRoute::CopyFrom(const SLL2ImetRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2ImetRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2ImetRoute::IsInitialized() const {
  return true;
}

void SLL2ImetRoute::InternalSwap(SLL2ImetRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tunnelidvalue_.Swap(&other->tunnelidvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2ImetRoute, tunnelidlength_)
      + sizeof(SLL2ImetRoute::tunnelidlength_)
      - PROTOBUF_FIELD_OFFSET(SLL2ImetRoute, routekey_)>(
          reinterpret_cast<char*>(&routekey_),
          reinterpret_cast<char*>(&other->routekey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2ImetRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteKey::_Internal {
 public:
  static const ::service_layer::SLL2MacRouteKey& mackey(const SLL2RouteKey* msg);
  static const ::service_layer::SLL2ImetRouteKey& imetkey(const SLL2RouteKey* msg);
};

const ::service_layer::SLL2MacRouteKey&
SLL2RouteKey::_Internal::mackey(const SLL2RouteKey* msg) {
  return *msg->Event_.mackey_;
}
const ::service_layer::SLL2ImetRouteKey&
SLL2RouteKey::_Internal::imetkey(const SLL2RouteKey* msg) {
  return *msg->Event_.imetkey_;
}
void SLL2RouteKey::set_allocated_mackey(::service_layer::SLL2MacRouteKey* mackey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (mackey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mackey);
    if (message_arena != submessage_arena) {
      mackey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mackey, submessage_arena);
    }
    set_has_mackey();
    Event_.mackey_ = mackey;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2RouteKey.MacKey)
}
void SLL2RouteKey::set_allocated_imetkey(::service_layer::SLL2ImetRouteKey* imetkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (imetkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imetkey);
    if (message_arena != submessage_arena) {
      imetkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imetkey, submessage_arena);
    }
    set_has_imetkey();
    Event_.imetkey_ = imetkey;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2RouteKey.ImetKey)
}
SLL2RouteKey::SLL2RouteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteKey)
}
SLL2RouteKey::SLL2RouteKey(const SLL2RouteKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bdname().empty()) {
    bdname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdname(), 
      GetArena());
  }
  type_ = from.type_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kMacKey: {
      _internal_mutable_mackey()->::service_layer::SLL2MacRouteKey::MergeFrom(from._internal_mackey());
      break;
    }
    case kImetKey: {
      _internal_mutable_imetkey()->::service_layer::SLL2ImetRouteKey::MergeFrom(from._internal_imetkey());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteKey)
}

void SLL2RouteKey::SharedCtor() {
bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
clear_has_Event();
}

SLL2RouteKey::~SLL2RouteKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bdname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_Event()) {
    clear_Event();
  }
}

void SLL2RouteKey::ArenaDtor(void* object) {
  SLL2RouteKey* _this = reinterpret_cast< SLL2RouteKey* >(object);
  (void)_this;
}
void SLL2RouteKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteKey::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLL2RouteKey)
  switch (Event_case()) {
    case kMacKey: {
      if (GetArena() == nullptr) {
        delete Event_.mackey_;
      }
      break;
    }
    case kImetKey: {
      if (GetArena() == nullptr) {
        delete Event_.imetkey_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLL2RouteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdname_.ClearToEmpty();
  type_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BdName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bdname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2RouteKey.BdName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2RouteType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLL2RouteType>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2MacRouteKey MacKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mackey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2ImetRouteKey ImetKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_imetkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BdName = 1;
  if (this->bdname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdname().data(), static_cast<int>(this->_internal_bdname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2RouteKey.BdName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bdname(), target);
  }

  // .service_layer.SLL2RouteType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .service_layer.SLL2MacRouteKey MacKey = 3;
  if (_internal_has_mackey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mackey(this), target, stream);
  }

  // .service_layer.SLL2ImetRouteKey ImetKey = 4;
  if (_internal_has_imetkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::imetkey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteKey)
  return target;
}

size_t SLL2RouteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BdName = 1;
  if (this->bdname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdname());
  }

  // .service_layer.SLL2RouteType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Event_case()) {
    // .service_layer.SLL2MacRouteKey MacKey = 3;
    case kMacKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.mackey_);
      break;
    }
    // .service_layer.SLL2ImetRouteKey ImetKey = 4;
    case kImetKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.imetkey_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteKey)
    MergeFrom(*source);
  }
}

void SLL2RouteKey::MergeFrom(const SLL2RouteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bdname().size() > 0) {
    _internal_set_bdname(from._internal_bdname());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.Event_case()) {
    case kMacKey: {
      _internal_mutable_mackey()->::service_layer::SLL2MacRouteKey::MergeFrom(from._internal_mackey());
      break;
    }
    case kImetKey: {
      _internal_mutable_imetkey()->::service_layer::SLL2ImetRouteKey::MergeFrom(from._internal_imetkey());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void SLL2RouteKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteKey::CopyFrom(const SLL2RouteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteKey::IsInitialized() const {
  return true;
}

void SLL2RouteKey::InternalSwap(SLL2RouteKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bdname_.Swap(&other->bdname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2Route::_Internal {
 public:
  static const ::service_layer::SLL2MacRoute& macroute(const SLL2Route* msg);
  static const ::service_layer::SLL2ImetRoute& imetroute(const SLL2Route* msg);
};

const ::service_layer::SLL2MacRoute&
SLL2Route::_Internal::macroute(const SLL2Route* msg) {
  return *msg->Event_.macroute_;
}
const ::service_layer::SLL2ImetRoute&
SLL2Route::_Internal::imetroute(const SLL2Route* msg) {
  return *msg->Event_.imetroute_;
}
void SLL2Route::set_allocated_macroute(::service_layer::SLL2MacRoute* macroute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (macroute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(macroute);
    if (message_arena != submessage_arena) {
      macroute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, macroute, submessage_arena);
    }
    set_has_macroute();
    Event_.macroute_ = macroute;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2Route.MacRoute)
}
void SLL2Route::set_allocated_imetroute(::service_layer::SLL2ImetRoute* imetroute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (imetroute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imetroute);
    if (message_arena != submessage_arena) {
      imetroute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imetroute, submessage_arena);
    }
    set_has_imetroute();
    Event_.imetroute_ = imetroute;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2Route.ImetRoute)
}
SLL2Route::SLL2Route(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2Route)
}
SLL2Route::SLL2Route(const SLL2Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bdname().empty()) {
    bdname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdname(), 
      GetArena());
  }
  type_ = from.type_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kMacRoute: {
      _internal_mutable_macroute()->::service_layer::SLL2MacRoute::MergeFrom(from._internal_macroute());
      break;
    }
    case kImetRoute: {
      _internal_mutable_imetroute()->::service_layer::SLL2ImetRoute::MergeFrom(from._internal_imetroute());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2Route)
}

void SLL2Route::SharedCtor() {
bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
clear_has_Event();
}

SLL2Route::~SLL2Route() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2Route)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2Route::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bdname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_Event()) {
    clear_Event();
  }
}

void SLL2Route::ArenaDtor(void* object) {
  SLL2Route* _this = reinterpret_cast< SLL2Route* >(object);
  (void)_this;
}
void SLL2Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2Route::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLL2Route)
  switch (Event_case()) {
    case kMacRoute: {
      if (GetArena() == nullptr) {
        delete Event_.macroute_;
      }
      break;
    }
    case kImetRoute: {
      if (GetArena() == nullptr) {
        delete Event_.imetroute_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLL2Route::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdname_.ClearToEmpty();
  type_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BdName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bdname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2Route.BdName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2RouteType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLL2RouteType>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2MacRoute MacRoute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_macroute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2ImetRoute ImetRoute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_imetroute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BdName = 1;
  if (this->bdname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdname().data(), static_cast<int>(this->_internal_bdname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2Route.BdName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bdname(), target);
  }

  // .service_layer.SLL2RouteType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .service_layer.SLL2MacRoute MacRoute = 3;
  if (_internal_has_macroute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::macroute(this), target, stream);
  }

  // .service_layer.SLL2ImetRoute ImetRoute = 4;
  if (_internal_has_imetroute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::imetroute(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2Route)
  return target;
}

size_t SLL2Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BdName = 1;
  if (this->bdname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdname());
  }

  // .service_layer.SLL2RouteType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Event_case()) {
    // .service_layer.SLL2MacRoute MacRoute = 3;
    case kMacRoute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.macroute_);
      break;
    }
    // .service_layer.SLL2ImetRoute ImetRoute = 4;
    case kImetRoute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.imetroute_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2Route)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2Route)
    MergeFrom(*source);
  }
}

void SLL2Route::MergeFrom(const SLL2Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bdname().size() > 0) {
    _internal_set_bdname(from._internal_bdname());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.Event_case()) {
    case kMacRoute: {
      _internal_mutable_macroute()->::service_layer::SLL2MacRoute::MergeFrom(from._internal_macroute());
      break;
    }
    case kImetRoute: {
      _internal_mutable_imetroute()->::service_layer::SLL2ImetRoute::MergeFrom(from._internal_imetroute());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void SLL2Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2Route::CopyFrom(const SLL2Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2Route::IsInitialized() const {
  return true;
}

void SLL2Route::InternalSwap(SLL2Route* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bdname_.Swap(&other->bdname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteMsg::_Internal {
 public:
};

SLL2RouteMsg::SLL2RouteMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteMsg)
}
SLL2RouteMsg::SLL2RouteMsg(const SLL2RouteMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteMsg)
}

void SLL2RouteMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
}

SLL2RouteMsg::~SLL2RouteMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLL2RouteMsg::ArenaDtor(void* object) {
  SLL2RouteMsg* _this = reinterpret_cast< SLL2RouteMsg* >(object);
  (void)_this;
}
void SLL2RouteMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLObjectOp Oper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLL2Route Routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // .service_layer.SLObjectOp Oper = 2;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLL2Route Routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteMsg)
  return target;
}

size_t SLL2RouteMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLL2Route Routes = 3;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // .service_layer.SLObjectOp Oper = 2;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteMsg)
    MergeFrom(*source);
  }
}

void SLL2RouteMsg::MergeFrom(const SLL2RouteMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLL2RouteMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteMsg::CopyFrom(const SLL2RouteMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteMsg::IsInitialized() const {
  return true;
}

void SLL2RouteMsg::InternalSwap(SLL2RouteMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2RouteMsg, oper_)
      + sizeof(SLL2RouteMsg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLL2RouteMsg, correlator_)>(
          reinterpret_cast<char*>(&correlator_),
          reinterpret_cast<char*>(&other->correlator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLL2RouteRes* msg);
  static const ::service_layer::SLL2RouteKey& routekey(const SLL2RouteRes* msg);
};

const ::service_layer::SLErrorStatus&
SLL2RouteRes::_Internal::errstatus(const SLL2RouteRes* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLL2RouteKey&
SLL2RouteRes::_Internal::routekey(const SLL2RouteRes* msg) {
  return *msg->routekey_;
}
void SLL2RouteRes::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLL2RouteRes::SLL2RouteRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteRes)
}
SLL2RouteRes::SLL2RouteRes(const SLL2RouteRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_routekey()) {
    routekey_ = new ::service_layer::SLL2RouteKey(*from.routekey_);
  } else {
    routekey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteRes)
}

void SLL2RouteRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routekey_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(routekey_));
}

SLL2RouteRes::~SLL2RouteRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete routekey_;
}

void SLL2RouteRes::ArenaDtor(void* object) {
  SLL2RouteRes* _this = reinterpret_cast< SLL2RouteRes* >(object);
  (void)_this;
}
void SLL2RouteRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArena() == nullptr && routekey_ != nullptr) {
    delete routekey_;
  }
  routekey_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2RouteKey RouteKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routekey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLL2RouteKey RouteKey = 2;
  if (this->has_routekey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routekey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteRes)
  return target;
}

size_t SLL2RouteRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLL2RouteKey RouteKey = 2;
  if (this->has_routekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routekey_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteRes)
    MergeFrom(*source);
  }
}

void SLL2RouteRes::MergeFrom(const SLL2RouteRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.has_routekey()) {
    _internal_mutable_routekey()->::service_layer::SLL2RouteKey::MergeFrom(from._internal_routekey());
  }
}

void SLL2RouteRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteRes::CopyFrom(const SLL2RouteRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteRes::IsInitialized() const {
  return true;
}

void SLL2RouteRes::InternalSwap(SLL2RouteRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2RouteRes, routekey_)
      + sizeof(SLL2RouteRes::routekey_)
      - PROTOBUF_FIELD_OFFSET(SLL2RouteRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLL2RouteMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLL2RouteMsgRsp::_Internal::statussummary(const SLL2RouteMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLL2RouteMsgRsp::clear_statussummary() {
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLL2RouteMsgRsp::SLL2RouteMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteMsgRsp)
}
SLL2RouteMsgRsp::SLL2RouteMsgRsp(const SLL2RouteMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  correlator_ = from.correlator_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteMsgRsp)
}

void SLL2RouteMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statussummary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correlator_) -
    reinterpret_cast<char*>(&statussummary_)) + sizeof(correlator_));
}

SLL2RouteMsgRsp::~SLL2RouteMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLL2RouteMsgRsp::ArenaDtor(void* object) {
  SLL2RouteMsgRsp* _this = reinterpret_cast< SLL2RouteMsgRsp* >(object);
  (void)_this;
}
void SLL2RouteMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  correlator_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus StatusSummary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLL2RouteRes Results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLL2RouteRes Results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteMsgRsp)
  return target;
}

size_t SLL2RouteMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLL2RouteRes Results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteMsgRsp)
    MergeFrom(*source);
  }
}

void SLL2RouteMsgRsp::MergeFrom(const SLL2RouteMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
}

void SLL2RouteMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteMsgRsp::CopyFrom(const SLL2RouteMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteMsgRsp::IsInitialized() const {
  return true;
}

void SLL2RouteMsgRsp::InternalSwap(SLL2RouteMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2RouteMsgRsp, correlator_)
      + sizeof(SLL2RouteMsgRsp::correlator_)
      - PROTOBUF_FIELD_OFFSET(SLL2RouteMsgRsp, statussummary_)>(
          reinterpret_cast<char*>(&statussummary_),
          reinterpret_cast<char*>(&other->statussummary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2GetNotifMsg::_Internal {
 public:
};

SLL2GetNotifMsg::SLL2GetNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2GetNotifMsg)
}
SLL2GetNotifMsg::SLL2GetNotifMsg(const SLL2GetNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnotifeof_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(getnotifeof_));
  clear_has_Request();
  switch (from.Request_case()) {
    case kBdAll: {
      _internal_set_bdall(from._internal_bdall());
      break;
    }
    case kBdName: {
      _internal_set_bdname(from._internal_bdname());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2GetNotifMsg)
}

void SLL2GetNotifMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getnotifeof_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(getnotifeof_));
clear_has_Request();
}

SLL2GetNotifMsg::~SLL2GetNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2GetNotifMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2GetNotifMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Request()) {
    clear_Request();
  }
}

void SLL2GetNotifMsg::ArenaDtor(void* object) {
  SLL2GetNotifMsg* _this = reinterpret_cast< SLL2GetNotifMsg* >(object);
  (void)_this;
}
void SLL2GetNotifMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2GetNotifMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2GetNotifMsg::clear_Request() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLL2GetNotifMsg)
  switch (Request_case()) {
    case kBdAll: {
      // No need to clear
      break;
    }
    case kBdName: {
      Request_.bdname_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void SLL2GetNotifMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2GetNotifMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnotifeof_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(getnotifeof_));
  clear_Request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2GetNotifMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLNotifOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLNotifOp>(val));
        } else goto handle_unusual;
        continue;
      // uint64 Correlator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GetNotifEof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          getnotifeof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool BdAll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_bdall(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BdName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bdname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2GetNotifMsg.BdName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2GetNotifMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2GetNotifMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_correlator(), target);
  }

  // bool GetNotifEof = 3;
  if (this->getnotifeof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_getnotifeof(), target);
  }

  // bool BdAll = 4;
  if (_internal_has_bdall()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bdall(), target);
  }

  // string BdName = 5;
  if (_internal_has_bdname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdname().data(), static_cast<int>(this->_internal_bdname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2GetNotifMsg.BdName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bdname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2GetNotifMsg)
  return target;
}

size_t SLL2GetNotifMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2GetNotifMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  // bool GetNotifEof = 3;
  if (this->getnotifeof() != 0) {
    total_size += 1 + 1;
  }

  switch (Request_case()) {
    // bool BdAll = 4;
    case kBdAll: {
      total_size += 1 + 1;
      break;
    }
    // string BdName = 5;
    case kBdName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bdname());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2GetNotifMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2GetNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2GetNotifMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2GetNotifMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2GetNotifMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2GetNotifMsg)
    MergeFrom(*source);
  }
}

void SLL2GetNotifMsg::MergeFrom(const SLL2GetNotifMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2GetNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  if (from.getnotifeof() != 0) {
    _internal_set_getnotifeof(from._internal_getnotifeof());
  }
  switch (from.Request_case()) {
    case kBdAll: {
      _internal_set_bdall(from._internal_bdall());
      break;
    }
    case kBdName: {
      _internal_set_bdname(from._internal_bdname());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void SLL2GetNotifMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2GetNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2GetNotifMsg::CopyFrom(const SLL2GetNotifMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2GetNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2GetNotifMsg::IsInitialized() const {
  return true;
}

void SLL2GetNotifMsg::InternalSwap(SLL2GetNotifMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2GetNotifMsg, getnotifeof_)
      + sizeof(SLL2GetNotifMsg::getnotifeof_)
      - PROTOBUF_FIELD_OFFSET(SLL2GetNotifMsg, correlator_)>(
          reinterpret_cast<char*>(&correlator_),
          reinterpret_cast<char*>(&other->correlator_));
  swap(Request_, other->Request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2GetNotifMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2RouteNotif::_Internal {
 public:
  static const ::service_layer::SLL2Route& routes(const SLL2RouteNotif* msg);
};

const ::service_layer::SLL2Route&
SLL2RouteNotif::_Internal::routes(const SLL2RouteNotif* msg) {
  return *msg->routes_;
}
SLL2RouteNotif::SLL2RouteNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2RouteNotif)
}
SLL2RouteNotif::SLL2RouteNotif(const SLL2RouteNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routes()) {
    routes_ = new ::service_layer::SLL2Route(*from.routes_);
  } else {
    routes_ = nullptr;
  }
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2RouteNotif)
}

void SLL2RouteNotif::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&routes_)) + sizeof(oper_));
}

SLL2RouteNotif::~SLL2RouteNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2RouteNotif)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2RouteNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete routes_;
}

void SLL2RouteNotif::ArenaDtor(void* object) {
  SLL2RouteNotif* _this = reinterpret_cast< SLL2RouteNotif* >(object);
  (void)_this;
}
void SLL2RouteNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2RouteNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2RouteNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2RouteNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && routes_ != nullptr) {
    delete routes_;
  }
  routes_ = nullptr;
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2RouteNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2Route Routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2RouteNotif::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2RouteNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // .service_layer.SLL2Route Routes = 2;
  if (this->has_routes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2RouteNotif)
  return target;
}

size_t SLL2RouteNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2RouteNotif)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLL2Route Routes = 2;
  if (this->has_routes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routes_);
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2RouteNotif::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2RouteNotif)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2RouteNotif* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2RouteNotif>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2RouteNotif)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2RouteNotif)
    MergeFrom(*source);
  }
}

void SLL2RouteNotif::MergeFrom(const SLL2RouteNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2RouteNotif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_routes()) {
    _internal_mutable_routes()->::service_layer::SLL2Route::MergeFrom(from._internal_routes());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLL2RouteNotif::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2RouteNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2RouteNotif::CopyFrom(const SLL2RouteNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2RouteNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2RouteNotif::IsInitialized() const {
  return true;
}

void SLL2RouteNotif::InternalSwap(SLL2RouteNotif* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2RouteNotif, oper_)
      + sizeof(SLL2RouteNotif::oper_)
      - PROTOBUF_FIELD_OFFSET(SLL2RouteNotif, routes_)>(
          reinterpret_cast<char*>(&routes_),
          reinterpret_cast<char*>(&other->routes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2RouteNotif::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2BdStateInfo::_Internal {
 public:
};

SLL2BdStateInfo::SLL2BdStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2BdStateInfo)
}
SLL2BdStateInfo::SLL2BdStateInfo(const SLL2BdStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bdname().empty()) {
    bdname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdname(), 
      GetArena());
  }
  bdstate_ = from.bdstate_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2BdStateInfo)
}

void SLL2BdStateInfo::SharedCtor() {
bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bdstate_ = 0;
}

SLL2BdStateInfo::~SLL2BdStateInfo() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2BdStateInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2BdStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bdname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLL2BdStateInfo::ArenaDtor(void* object) {
  SLL2BdStateInfo* _this = reinterpret_cast< SLL2BdStateInfo* >(object);
  (void)_this;
}
void SLL2BdStateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2BdStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2BdStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2BdStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdname_.ClearToEmpty();
  bdstate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2BdStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BdName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bdname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2BdStateInfo.BdName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2BdStateInfo.SLL2BdState BdState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bdstate(static_cast<::service_layer::SLL2BdStateInfo_SLL2BdState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2BdStateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2BdStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BdName = 1;
  if (this->bdname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdname().data(), static_cast<int>(this->_internal_bdname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2BdStateInfo.BdName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bdname(), target);
  }

  // .service_layer.SLL2BdStateInfo.SLL2BdState BdState = 2;
  if (this->bdstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bdstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2BdStateInfo)
  return target;
}

size_t SLL2BdStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2BdStateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BdName = 1;
  if (this->bdname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdname());
  }

  // .service_layer.SLL2BdStateInfo.SLL2BdState BdState = 2;
  if (this->bdstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bdstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2BdStateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2BdStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2BdStateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2BdStateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2BdStateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2BdStateInfo)
    MergeFrom(*source);
  }
}

void SLL2BdStateInfo::MergeFrom(const SLL2BdStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2BdStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bdname().size() > 0) {
    _internal_set_bdname(from._internal_bdname());
  }
  if (from.bdstate() != 0) {
    _internal_set_bdstate(from._internal_bdstate());
  }
}

void SLL2BdStateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2BdStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2BdStateInfo::CopyFrom(const SLL2BdStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2BdStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2BdStateInfo::IsInitialized() const {
  return true;
}

void SLL2BdStateInfo::InternalSwap(SLL2BdStateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bdname_.Swap(&other->bdname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bdstate_, other->bdstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2BdStateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2NotifStatusMsg::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& notifstatus(const SLL2NotifStatusMsg* msg);
};

const ::service_layer::SLErrorStatus&
SLL2NotifStatusMsg::_Internal::notifstatus(const SLL2NotifStatusMsg* msg) {
  return *msg->notifstatus_;
}
void SLL2NotifStatusMsg::clear_notifstatus() {
  if (GetArena() == nullptr && notifstatus_ != nullptr) {
    delete notifstatus_;
  }
  notifstatus_ = nullptr;
}
SLL2NotifStatusMsg::SLL2NotifStatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2NotifStatusMsg)
}
SLL2NotifStatusMsg::SLL2NotifStatusMsg(const SLL2NotifStatusMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bdname().empty()) {
    bdname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdname(), 
      GetArena());
  }
  if (from._internal_has_notifstatus()) {
    notifstatus_ = new ::service_layer::SLErrorStatus(*from.notifstatus_);
  } else {
    notifstatus_ = nullptr;
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2NotifStatusMsg)
}

void SLL2NotifStatusMsg::SharedCtor() {
bdname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notifstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&notifstatus_)) + sizeof(oper_));
}

SLL2NotifStatusMsg::~SLL2NotifStatusMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2NotifStatusMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2NotifStatusMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bdname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete notifstatus_;
}

void SLL2NotifStatusMsg::ArenaDtor(void* object) {
  SLL2NotifStatusMsg* _this = reinterpret_cast< SLL2NotifStatusMsg* >(object);
  (void)_this;
}
void SLL2NotifStatusMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2NotifStatusMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2NotifStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2NotifStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdname_.ClearToEmpty();
  if (GetArena() == nullptr && notifstatus_ != nullptr) {
    delete notifstatus_;
  }
  notifstatus_ = nullptr;
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2NotifStatusMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLNotifOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLNotifOp>(val));
        } else goto handle_unusual;
        continue;
      // uint64 Correlator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BdName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bdname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLL2NotifStatusMsg.BdName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus NotifStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2NotifStatusMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2NotifStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_correlator(), target);
  }

  // string BdName = 3;
  if (this->bdname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdname().data(), static_cast<int>(this->_internal_bdname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLL2NotifStatusMsg.BdName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bdname(), target);
  }

  // .service_layer.SLErrorStatus NotifStatus = 4;
  if (this->has_notifstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::notifstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2NotifStatusMsg)
  return target;
}

size_t SLL2NotifStatusMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2NotifStatusMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BdName = 3;
  if (this->bdname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdname());
  }

  // .service_layer.SLErrorStatus NotifStatus = 4;
  if (this->has_notifstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notifstatus_);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2NotifStatusMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2NotifStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2NotifStatusMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2NotifStatusMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2NotifStatusMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2NotifStatusMsg)
    MergeFrom(*source);
  }
}

void SLL2NotifStatusMsg::MergeFrom(const SLL2NotifStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2NotifStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bdname().size() > 0) {
    _internal_set_bdname(from._internal_bdname());
  }
  if (from.has_notifstatus()) {
    _internal_mutable_notifstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_notifstatus());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLL2NotifStatusMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2NotifStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2NotifStatusMsg::CopyFrom(const SLL2NotifStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2NotifStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2NotifStatusMsg::IsInitialized() const {
  return true;
}

void SLL2NotifStatusMsg::InternalSwap(SLL2NotifStatusMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bdname_.Swap(&other->bdname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLL2NotifStatusMsg, oper_)
      + sizeof(SLL2NotifStatusMsg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLL2NotifStatusMsg, notifstatus_)>(
          reinterpret_cast<char*>(&notifstatus_),
          reinterpret_cast<char*>(&other->notifstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2NotifStatusMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLL2Notif::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLL2Notif* msg);
  static const ::service_layer::SLL2NotifStatusMsg& notifstatus(const SLL2Notif* msg);
  static const ::service_layer::SLL2BdStateInfo& bdstateinfo(const SLL2Notif* msg);
  static const ::service_layer::SLL2RouteNotif& route(const SLL2Notif* msg);
};

const ::service_layer::SLErrorStatus&
SLL2Notif::_Internal::errstatus(const SLL2Notif* msg) {
  return *msg->Event_.errstatus_;
}
const ::service_layer::SLL2NotifStatusMsg&
SLL2Notif::_Internal::notifstatus(const SLL2Notif* msg) {
  return *msg->Event_.notifstatus_;
}
const ::service_layer::SLL2BdStateInfo&
SLL2Notif::_Internal::bdstateinfo(const SLL2Notif* msg) {
  return *msg->Event_.bdstateinfo_;
}
const ::service_layer::SLL2RouteNotif&
SLL2Notif::_Internal::route(const SLL2Notif* msg) {
  return *msg->Event_.route_;
}
void SLL2Notif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2Notif.ErrStatus)
}
void SLL2Notif::clear_errstatus() {
  if (_internal_has_errstatus()) {
    if (GetArena() == nullptr) {
      delete Event_.errstatus_;
    }
    clear_has_Event();
  }
}
void SLL2Notif::set_allocated_notifstatus(::service_layer::SLL2NotifStatusMsg* notifstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (notifstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notifstatus);
    if (message_arena != submessage_arena) {
      notifstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notifstatus, submessage_arena);
    }
    set_has_notifstatus();
    Event_.notifstatus_ = notifstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2Notif.NotifStatus)
}
void SLL2Notif::set_allocated_bdstateinfo(::service_layer::SLL2BdStateInfo* bdstateinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (bdstateinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bdstateinfo);
    if (message_arena != submessage_arena) {
      bdstateinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bdstateinfo, submessage_arena);
    }
    set_has_bdstateinfo();
    Event_.bdstateinfo_ = bdstateinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2Notif.BdStateInfo)
}
void SLL2Notif::set_allocated_route(::service_layer::SLL2RouteNotif* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Event();
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(route);
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    set_has_route();
    Event_.route_ = route;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLL2Notif.Route)
}
SLL2Notif::SLL2Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLL2Notif)
}
SLL2Notif::SLL2Notif(const SLL2Notif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventtype_ = from.eventtype_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kNotifStatus: {
      _internal_mutable_notifstatus()->::service_layer::SLL2NotifStatusMsg::MergeFrom(from._internal_notifstatus());
      break;
    }
    case kBdStateInfo: {
      _internal_mutable_bdstateinfo()->::service_layer::SLL2BdStateInfo::MergeFrom(from._internal_bdstateinfo());
      break;
    }
    case kRoute: {
      _internal_mutable_route()->::service_layer::SLL2RouteNotif::MergeFrom(from._internal_route());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLL2Notif)
}

void SLL2Notif::SharedCtor() {
eventtype_ = 0;
clear_has_Event();
}

SLL2Notif::~SLL2Notif() {
  // @@protoc_insertion_point(destructor:service_layer.SLL2Notif)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLL2Notif::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLL2Notif::ArenaDtor(void* object) {
  SLL2Notif* _this = reinterpret_cast< SLL2Notif* >(object);
  (void)_this;
}
void SLL2Notif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLL2Notif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLL2Notif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLL2Notif)
  switch (Event_case()) {
    case kErrStatus: {
      if (GetArena() == nullptr) {
        delete Event_.errstatus_;
      }
      break;
    }
    case kNotifStatus: {
      if (GetArena() == nullptr) {
        delete Event_.notifstatus_;
      }
      break;
    }
    case kBdStateInfo: {
      if (GetArena() == nullptr) {
        delete Event_.bdstateinfo_;
      }
      break;
    }
    case kRoute: {
      if (GetArena() == nullptr) {
        delete Event_.route_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLL2Notif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLL2Notif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventtype_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLL2Notif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLL2NotifType EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::service_layer::SLL2NotifType>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2NotifStatusMsg NotifStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2BdStateInfo BdStateInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bdstateinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLL2RouteNotif Route = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLL2Notif::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLL2Notif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLL2NotifType EventType = 1;
  if (this->eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventtype(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLL2NotifStatusMsg NotifStatus = 3;
  if (_internal_has_notifstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::notifstatus(this), target, stream);
  }

  // .service_layer.SLL2BdStateInfo BdStateInfo = 4;
  if (_internal_has_bdstateinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bdstateinfo(this), target, stream);
  }

  // .service_layer.SLL2RouteNotif Route = 5;
  if (_internal_has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::route(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLL2Notif)
  return target;
}

size_t SLL2Notif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLL2Notif)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLL2NotifType EventType = 1;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  switch (Event_case()) {
    // .service_layer.SLErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.errstatus_);
      break;
    }
    // .service_layer.SLL2NotifStatusMsg NotifStatus = 3;
    case kNotifStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.notifstatus_);
      break;
    }
    // .service_layer.SLL2BdStateInfo BdStateInfo = 4;
    case kBdStateInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.bdstateinfo_);
      break;
    }
    // .service_layer.SLL2RouteNotif Route = 5;
    case kRoute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.route_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLL2Notif::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLL2Notif)
  GOOGLE_DCHECK_NE(&from, this);
  const SLL2Notif* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLL2Notif>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLL2Notif)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLL2Notif)
    MergeFrom(*source);
  }
}

void SLL2Notif::MergeFrom(const SLL2Notif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLL2Notif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kNotifStatus: {
      _internal_mutable_notifstatus()->::service_layer::SLL2NotifStatusMsg::MergeFrom(from._internal_notifstatus());
      break;
    }
    case kBdStateInfo: {
      _internal_mutable_bdstateinfo()->::service_layer::SLL2BdStateInfo::MergeFrom(from._internal_bdstateinfo());
      break;
    }
    case kRoute: {
      _internal_mutable_route()->::service_layer::SLL2RouteNotif::MergeFrom(from._internal_route());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void SLL2Notif::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLL2Notif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLL2Notif::CopyFrom(const SLL2Notif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLL2Notif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLL2Notif::IsInitialized() const {
  return true;
}

void SLL2Notif::InternalSwap(SLL2Notif* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(eventtype_, other->eventtype_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLL2Notif::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLL2GlobalsGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLL2GlobalsGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2GlobalsGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2GlobalsGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLL2GlobalsGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2GlobalsGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RegMsg* Arena::CreateMaybeMessage< ::service_layer::SLL2RegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLL2RegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2BdRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLL2BdRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2BdRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2BdRegRes* Arena::CreateMaybeMessage< ::service_layer::SLL2BdRegRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2BdRegRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2BdRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLL2BdRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2BdRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteEsi* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteEsi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteEsi >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteNh* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteNh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteNh >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2OverlayNh* Arena::CreateMaybeMessage< ::service_layer::SLL2OverlayNh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2OverlayNh >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2MacRouteKey* Arena::CreateMaybeMessage< ::service_layer::SLL2MacRouteKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2MacRouteKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2MacRoute* Arena::CreateMaybeMessage< ::service_layer::SLL2MacRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2MacRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2ImetRouteKey* Arena::CreateMaybeMessage< ::service_layer::SLL2ImetRouteKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2ImetRouteKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2ImetRoute* Arena::CreateMaybeMessage< ::service_layer::SLL2ImetRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2ImetRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteKey* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2Route* Arena::CreateMaybeMessage< ::service_layer::SLL2Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2Route >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteMsg* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteRes* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2GetNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLL2GetNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2GetNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2RouteNotif* Arena::CreateMaybeMessage< ::service_layer::SLL2RouteNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2RouteNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2BdStateInfo* Arena::CreateMaybeMessage< ::service_layer::SLL2BdStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2BdStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2NotifStatusMsg* Arena::CreateMaybeMessage< ::service_layer::SLL2NotifStatusMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2NotifStatusMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLL2Notif* Arena::CreateMaybeMessage< ::service_layer::SLL2Notif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLL2Notif >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
