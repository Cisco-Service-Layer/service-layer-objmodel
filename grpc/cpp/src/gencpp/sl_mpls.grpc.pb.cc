// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_mpls.proto

#include "sl_mpls.pb.h"
#include "sl_mpls.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLMplsOper_method_names[] = {
  "/service_layer.SLMplsOper/SLMplsRegOp",
  "/service_layer.SLMplsOper/SLMplsGet",
  "/service_layer.SLMplsOper/SLMplsGetStats",
  "/service_layer.SLMplsOper/SLMplsLabelBlockOp",
  "/service_layer.SLMplsOper/SLMplsLabelBlockGet",
  "/service_layer.SLMplsOper/SLMplsIlmOp",
  "/service_layer.SLMplsOper/SLMplsIlmGet",
  "/service_layer.SLMplsOper/SLMplsIlmOpStream",
  "/service_layer.SLMplsOper/SLMplsIlmGetStream",
};

std::unique_ptr< SLMplsOper::Stub> SLMplsOper::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SLMplsOper::Stub> stub(new SLMplsOper::Stub(channel));
  return stub;
}

SLMplsOper::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SLMplsRegOp_(SLMplsOper_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsGet_(SLMplsOper_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsGetStats_(SLMplsOper_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsLabelBlockOp_(SLMplsOper_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsLabelBlockGet_(SLMplsOper_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsIlmOp_(SLMplsOper_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsIlmGet_(SLMplsOper_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLMplsIlmOpStream_(SLMplsOper_method_names[7], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SLMplsIlmGetStream_(SLMplsOper_method_names[8], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SLMplsOper::Stub::SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::service_layer::SLMplsRegMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsRegOp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>* SLMplsOper::Stub::AsyncSLMplsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsRegOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsRegOp_, context, request, false);
}

::grpc::Status SLMplsOper::Stub::SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::service_layer::SLMplsGetMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>* SLMplsOper::Stub::AsyncSLMplsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsGet_, context, request, false);
}

::grpc::Status SLMplsOper::Stub::SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::service_layer::SLMplsGetStatsMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsGetStats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>* SLMplsOper::Stub::AsyncSLMplsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsGetStats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsGetStats_, context, request, false);
}

::grpc::Status SLMplsOper::Stub::SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::service_layer::SLMplsLabelBlockMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsLabelBlockOp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>* SLMplsOper::Stub::AsyncSLMplsLabelBlockOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsLabelBlockOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsLabelBlockOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsLabelBlockOp_, context, request, false);
}

::grpc::Status SLMplsOper::Stub::SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsLabelBlockGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>* SLMplsOper::Stub::AsyncSLMplsLabelBlockGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsLabelBlockGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsLabelBlockGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsLabelBlockGet_, context, request, false);
}

::grpc::Status SLMplsOper::Stub::SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::service_layer::SLMplsIlmMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsIlmOp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>* SLMplsOper::Stub::AsyncSLMplsIlmOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsIlmOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmOp_, context, request, false);
}

::grpc::Status SLMplsOper::Stub::SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::service_layer::SLMplsIlmGetMsgRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SLMplsIlmGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsOper::Stub::AsyncSLMplsIlmGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsIlmGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmGet_, context, request, false);
}

::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* SLMplsOper::Stub::SLMplsIlmOpStreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>(channel_.get(), rpcmethod_SLMplsIlmOpStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* SLMplsOper::Stub::AsyncSLMplsIlmOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmOpStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsIlmOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmOpStream_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsOper::Stub::SLMplsIlmGetStreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>(channel_.get(), rpcmethod_SLMplsIlmGetStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsOper::Stub::AsyncSLMplsIlmGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmGetStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsOper::Stub::PrepareAsyncSLMplsIlmGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>::Create(channel_.get(), cq, rpcmethod_SLMplsIlmGetStream_, context, false, nullptr);
}

SLMplsOper::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsRegMsg, ::service_layer::SLMplsRegMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsRegOp), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsGet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetStatsMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsGetStats), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsLabelBlockMsg, ::service_layer::SLMplsLabelBlockMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsLabelBlockOp), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsLabelBlockGetMsg, ::service_layer::SLMplsLabelBlockGetMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsLabelBlockGet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsIlmOp), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SLMplsOper::Service, ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsIlmGet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[7],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< SLMplsOper::Service, ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsIlmOpStream), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SLMplsOper_method_names[8],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< SLMplsOper::Service, ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>(
          std::mem_fn(&SLMplsOper::Service::SLMplsIlmGetStream), this)));
}

SLMplsOper::Service::~Service() {
}

::grpc::Status SLMplsOper::Service::SLMplsRegOp(::grpc::ServerContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsGet(::grpc::ServerContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsGetStats(::grpc::ServerContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsLabelBlockOp(::grpc::ServerContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsLabelBlockGet(::grpc::ServerContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsIlmOp(::grpc::ServerContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsIlmGet(::grpc::ServerContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsIlmOpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLMplsOper::Service::SLMplsIlmGetStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

