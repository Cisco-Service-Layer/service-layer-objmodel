// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_mpls.proto
// Original file comments:
// @file
// @brief RPC proto file for MPLS types.
//
// ----------------------------------------------------------------
//  Copyright (c) 2019 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
// @defgroup MPLS
// @brief MPLS service definitions.
//
#ifndef GRPC_sl_5fmpls_2eproto__INCLUDED
#define GRPC_sl_5fmpls_2eproto__INCLUDED

#include "sl_mpls.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLMpls
// @ingroup MPLS
// Defines RPCs for MPLS Registrations, label block reservations, and ILM entries
// manipulations.
// Clients Must register for MPLS operations e.g. Incoming Label Map operations.
// Once registered, a client Must reserve an MPLS label (dynamic allocation) 
// before using it as an incoming label map. 
// Labels are reserved in blocks through the block reservation operations.
//
// This file also defines RPC calls for adding, deleting, updating, and querying
// incoming label map entries (see RFC 3031)
//
// Incoming Label Map (ILM): A mapping from incoming labels to 
// corresponding NHLFEs. It is used when forwarding packets that
// arrive as labeled packets. 
//
// Next Hop Forwarding Entry (NHLE): An entry containing next-hop
// information and label manipulation instructions. This is also referred to
// as the ILM Path.
//
// @{
class SLMplsOper final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLMplsOper";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // MPLS Registration operations.
    //
    //
    // SLMplsRegMsg.Oper = SL_REGOP_REGISTER.
    //     Global MPLS registration.
    //     A client Must Register BEFORE MPLS objects can be added/modified.
    //
    // SLMplsRegMsg.Oper = SL_REGOP_UNREGISTER.
    //     Global MPLS un-registration.
    //     This call is used to end all MPLS notifications and unregister any
    //     interest in MPLS object configuration.
    //     This call cleans up all MPLS objects previously requested.
    //
    // SLMplsRegMsg.Oper = SL_REGOP_EOF.
    //     MPLS End Of File.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their MPLS objects.
    virtual ::grpc::Status SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::service_layer::SLMplsRegMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsRegMsgRsp>> AsyncSLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsRegMsgRsp>>(AsyncSLMplsRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsRegMsgRsp>> PrepareAsyncSLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsRegMsgRsp>>(PrepareAsyncSLMplsRegOpRaw(context, request, cq));
    }
    // Retrieve global MPLS info from the server.
    virtual ::grpc::Status SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::service_layer::SLMplsGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetMsgRsp>> AsyncSLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetMsgRsp>>(AsyncSLMplsGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetMsgRsp>> PrepareAsyncSLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetMsgRsp>>(PrepareAsyncSLMplsGetRaw(context, request, cq));
    }
    // Retrieve global MPLS Stats from the server.
    virtual ::grpc::Status SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::service_layer::SLMplsGetStatsMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetStatsMsgRsp>> AsyncSLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetStatsMsgRsp>>(AsyncSLMplsGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetStatsMsgRsp>> PrepareAsyncSLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetStatsMsgRsp>>(PrepareAsyncSLMplsGetStatsRaw(context, request, cq));
    }
    //
    // MPLS Label Block operations
    //
    //
    // SLMplsLabelBlockMsg.Oper = SL_OBJOP_ADD.
    //     Add a contiguous label block.
    //     Add request may fail if the full block cannot be allocated.
    //
    // SLMplsLabelBlockMsg.Oper = SL_OBJOP_DELETE.
    //     Delete a contiguous label block.
    //     Delete request may fail if the block is in use or the keys don't
    //     match the keys used on add.
    virtual ::grpc::Status SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::service_layer::SLMplsLabelBlockMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockMsgRsp>> AsyncSLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockMsgRsp>>(AsyncSLMplsLabelBlockOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockMsgRsp>> PrepareAsyncSLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockMsgRsp>>(PrepareAsyncSLMplsLabelBlockOpRaw(context, request, cq));
    }
    // Retrieve Label Block attributes.
    virtual ::grpc::Status SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockGetMsgRsp>> AsyncSLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockGetMsgRsp>>(AsyncSLMplsLabelBlockGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockGetMsgRsp>> PrepareAsyncSLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockGetMsgRsp>>(PrepareAsyncSLMplsLabelBlockGetRaw(context, request, cq));
    }
    //
    // MPLS ILM operations
    //
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_ADD:
    //     Add incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_UPDATE:
    //     Update incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_DELETE:
    //     Delete incoming label map entry.
    virtual ::grpc::Status SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::service_layer::SLMplsIlmMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmMsgRsp>> AsyncSLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmMsgRsp>>(AsyncSLMplsIlmOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmMsgRsp>> PrepareAsyncSLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmMsgRsp>>(PrepareAsyncSLMplsIlmOpRaw(context, request, cq));
    }
    // Retrieve MPLS ILM entry attributes.
    virtual ::grpc::Status SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::service_layer::SLMplsIlmGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmGetMsgRsp>> AsyncSLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmGetMsgRsp>>(AsyncSLMplsIlmGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmGetMsgRsp>> PrepareAsyncSLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmGetMsgRsp>>(PrepareAsyncSLMplsIlmGetRaw(context, request, cq));
    }
    //
    // MPLS ILM stream operations
    //
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_ADD:
    //     Add incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_UPDATE:
    //     Update incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_DELETE:
    //     Delete incoming label map entry.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>> SLMplsIlmOpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>>(SLMplsIlmOpStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>> AsyncSLMplsIlmOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>>(AsyncSLMplsIlmOpStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>> PrepareAsyncSLMplsIlmOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>>(PrepareAsyncSLMplsIlmOpStreamRaw(context, cq));
    }
    // Stream-Get of incoming label map
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>> SLMplsIlmGetStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>>(SLMplsIlmGetStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>> AsyncSLMplsIlmGetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>>(AsyncSLMplsIlmGetStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>> PrepareAsyncSLMplsIlmGetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>>(PrepareAsyncSLMplsIlmGetStreamRaw(context, cq));
    }
    // @}
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // MPLS Registration operations.
      //
      //
      // SLMplsRegMsg.Oper = SL_REGOP_REGISTER.
      //     Global MPLS registration.
      //     A client Must Register BEFORE MPLS objects can be added/modified.
      //
      // SLMplsRegMsg.Oper = SL_REGOP_UNREGISTER.
      //     Global MPLS un-registration.
      //     This call is used to end all MPLS notifications and unregister any
      //     interest in MPLS object configuration.
      //     This call cleans up all MPLS objects previously requested.
      //
      // SLMplsRegMsg.Oper = SL_REGOP_EOF.
      //     MPLS End Of File.
      //     After Registration, the client is expected to send an EOF
      //     message to convey the end of replay of the client's known objects.
      //     This is especially useful under certain restart scenarios when the
      //     client and the server are trying to synchronize their MPLS objects.
      virtual void SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve global MPLS info from the server.
      virtual void SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve global MPLS Stats from the server.
      virtual void SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // MPLS Label Block operations
      //
      //
      // SLMplsLabelBlockMsg.Oper = SL_OBJOP_ADD.
      //     Add a contiguous label block.
      //     Add request may fail if the full block cannot be allocated.
      //
      // SLMplsLabelBlockMsg.Oper = SL_OBJOP_DELETE.
      //     Delete a contiguous label block.
      //     Delete request may fail if the block is in use or the keys don't
      //     match the keys used on add.
      virtual void SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve Label Block attributes.
      virtual void SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // MPLS ILM operations
      //
      //
      // SLMplsIlmMsg.Oper = SL_OBJOP_ADD:
      //     Add incoming label map entry.
      //
      // SLMplsIlmMsg.Oper = SL_OBJOP_UPDATE:
      //     Update incoming label map entry.
      //
      // SLMplsIlmMsg.Oper = SL_OBJOP_DELETE:
      //     Delete incoming label map entry.
      virtual void SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve MPLS ILM entry attributes.
      virtual void SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // MPLS ILM stream operations
      //
      //
      // SLMplsIlmMsg.Oper = SL_OBJOP_ADD:
      //     Add incoming label map entry.
      //
      // SLMplsIlmMsg.Oper = SL_OBJOP_UPDATE:
      //     Update incoming label map entry.
      //
      // SLMplsIlmMsg.Oper = SL_OBJOP_DELETE:
      //     Delete incoming label map entry.
      virtual void SLMplsIlmOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLMplsIlmMsg,::service_layer::SLMplsIlmMsgRsp>* reactor) = 0;
      // Stream-Get of incoming label map
      virtual void SLMplsIlmGetStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLMplsIlmGetMsg,::service_layer::SLMplsIlmGetMsgRsp>* reactor) = 0;
      // @}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsRegMsgRsp>* AsyncSLMplsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsRegMsgRsp>* PrepareAsyncSLMplsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetMsgRsp>* AsyncSLMplsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetMsgRsp>* PrepareAsyncSLMplsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetStatsMsgRsp>* AsyncSLMplsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsGetStatsMsgRsp>* PrepareAsyncSLMplsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockMsgRsp>* AsyncSLMplsLabelBlockOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockMsgRsp>* PrepareAsyncSLMplsLabelBlockOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockGetMsgRsp>* AsyncSLMplsLabelBlockGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsLabelBlockGetMsgRsp>* PrepareAsyncSLMplsLabelBlockGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmMsgRsp>* AsyncSLMplsIlmOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmMsgRsp>* PrepareAsyncSLMplsIlmOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmGetMsgRsp>* AsyncSLMplsIlmGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLMplsIlmGetMsgRsp>* PrepareAsyncSLMplsIlmGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* SLMplsIlmOpStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* AsyncSLMplsIlmOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* PrepareAsyncSLMplsIlmOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsIlmGetStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* AsyncSLMplsIlmGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* PrepareAsyncSLMplsIlmGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::service_layer::SLMplsRegMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>> AsyncSLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>>(AsyncSLMplsRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>> PrepareAsyncSLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>>(PrepareAsyncSLMplsRegOpRaw(context, request, cq));
    }
    ::grpc::Status SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::service_layer::SLMplsGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>> AsyncSLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>>(AsyncSLMplsGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>> PrepareAsyncSLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>>(PrepareAsyncSLMplsGetRaw(context, request, cq));
    }
    ::grpc::Status SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::service_layer::SLMplsGetStatsMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>> AsyncSLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>>(AsyncSLMplsGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>> PrepareAsyncSLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>>(PrepareAsyncSLMplsGetStatsRaw(context, request, cq));
    }
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::service_layer::SLMplsLabelBlockMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>> AsyncSLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>>(AsyncSLMplsLabelBlockOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>> PrepareAsyncSLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>>(PrepareAsyncSLMplsLabelBlockOpRaw(context, request, cq));
    }
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>> AsyncSLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>>(AsyncSLMplsLabelBlockGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>> PrepareAsyncSLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>>(PrepareAsyncSLMplsLabelBlockGetRaw(context, request, cq));
    }
    ::grpc::Status SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::service_layer::SLMplsIlmMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>> AsyncSLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>>(AsyncSLMplsIlmOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>> PrepareAsyncSLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>>(PrepareAsyncSLMplsIlmOpRaw(context, request, cq));
    }
    ::grpc::Status SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::service_layer::SLMplsIlmGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>> AsyncSLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>>(AsyncSLMplsIlmGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>> PrepareAsyncSLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>>(PrepareAsyncSLMplsIlmGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>> SLMplsIlmOpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>>(SLMplsIlmOpStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>> AsyncSLMplsIlmOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>>(AsyncSLMplsIlmOpStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>> PrepareAsyncSLMplsIlmOpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>>(PrepareAsyncSLMplsIlmOpStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>> SLMplsIlmGetStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>>(SLMplsIlmGetStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>> AsyncSLMplsIlmGetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>>(AsyncSLMplsIlmGetStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>> PrepareAsyncSLMplsIlmGetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>>(PrepareAsyncSLMplsIlmGetStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsRegOp(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsGet(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsGetStats(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsLabelBlockOp(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsLabelBlockGet(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsIlmOp(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLMplsIlmGet(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLMplsIlmOpStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLMplsIlmMsg,::service_layer::SLMplsIlmMsgRsp>* reactor) override;
      void SLMplsIlmGetStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLMplsIlmGetMsg,::service_layer::SLMplsIlmGetMsgRsp>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>* AsyncSLMplsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsRegMsgRsp>* PrepareAsyncSLMplsRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>* AsyncSLMplsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetMsgRsp>* PrepareAsyncSLMplsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>* AsyncSLMplsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsGetStatsMsgRsp>* PrepareAsyncSLMplsGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>* AsyncSLMplsLabelBlockOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockMsgRsp>* PrepareAsyncSLMplsLabelBlockOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>* AsyncSLMplsLabelBlockGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsLabelBlockGetMsgRsp>* PrepareAsyncSLMplsLabelBlockGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsLabelBlockGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>* AsyncSLMplsIlmOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmMsgRsp>* PrepareAsyncSLMplsIlmOpRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>* AsyncSLMplsIlmGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLMplsIlmGetMsgRsp>* PrepareAsyncSLMplsIlmGetRaw(::grpc::ClientContext* context, const ::service_layer::SLMplsIlmGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* SLMplsIlmOpStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* AsyncSLMplsIlmOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* PrepareAsyncSLMplsIlmOpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsIlmGetStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* AsyncSLMplsIlmGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* PrepareAsyncSLMplsIlmGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsRegOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsGetStats_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsLabelBlockOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsLabelBlockGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsIlmOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsIlmGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsIlmOpStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SLMplsIlmGetStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // MPLS Registration operations.
    //
    //
    // SLMplsRegMsg.Oper = SL_REGOP_REGISTER.
    //     Global MPLS registration.
    //     A client Must Register BEFORE MPLS objects can be added/modified.
    //
    // SLMplsRegMsg.Oper = SL_REGOP_UNREGISTER.
    //     Global MPLS un-registration.
    //     This call is used to end all MPLS notifications and unregister any
    //     interest in MPLS object configuration.
    //     This call cleans up all MPLS objects previously requested.
    //
    // SLMplsRegMsg.Oper = SL_REGOP_EOF.
    //     MPLS End Of File.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their MPLS objects.
    virtual ::grpc::Status SLMplsRegOp(::grpc::ServerContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response);
    // Retrieve global MPLS info from the server.
    virtual ::grpc::Status SLMplsGet(::grpc::ServerContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response);
    // Retrieve global MPLS Stats from the server.
    virtual ::grpc::Status SLMplsGetStats(::grpc::ServerContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response);
    //
    // MPLS Label Block operations
    //
    //
    // SLMplsLabelBlockMsg.Oper = SL_OBJOP_ADD.
    //     Add a contiguous label block.
    //     Add request may fail if the full block cannot be allocated.
    //
    // SLMplsLabelBlockMsg.Oper = SL_OBJOP_DELETE.
    //     Delete a contiguous label block.
    //     Delete request may fail if the block is in use or the keys don't
    //     match the keys used on add.
    virtual ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response);
    // Retrieve Label Block attributes.
    virtual ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response);
    //
    // MPLS ILM operations
    //
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_ADD:
    //     Add incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_UPDATE:
    //     Update incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_DELETE:
    //     Delete incoming label map entry.
    virtual ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response);
    // Retrieve MPLS ILM entry attributes.
    virtual ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response);
    //
    // MPLS ILM stream operations
    //
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_ADD:
    //     Add incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_UPDATE:
    //     Update incoming label map entry.
    //
    // SLMplsIlmMsg.Oper = SL_OBJOP_DELETE:
    //     Delete incoming label map entry.
    virtual ::grpc::Status SLMplsIlmOpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* stream);
    // Stream-Get of incoming label map
    virtual ::grpc::Status SLMplsIlmGetStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* stream);
    // @}
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsRegOp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLMplsRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsRegOp(::grpc::ServerContext* context, ::service_layer::SLMplsRegMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsRegMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLMplsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsGet(::grpc::ServerContext* context, ::service_layer::SLMplsGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsGetStats() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SLMplsGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsGetStats(::grpc::ServerContext* context, ::service_layer::SLMplsGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsGetStatsMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsLabelBlockOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsLabelBlockOp() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SLMplsLabelBlockOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsLabelBlockOp(::grpc::ServerContext* context, ::service_layer::SLMplsLabelBlockMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsLabelBlockMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsLabelBlockGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsLabelBlockGet() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SLMplsLabelBlockGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsLabelBlockGet(::grpc::ServerContext* context, ::service_layer::SLMplsLabelBlockGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsLabelBlockGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsIlmOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsIlmOp() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SLMplsIlmOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmOp(::grpc::ServerContext* context, ::service_layer::SLMplsIlmMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsIlmMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsIlmGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsIlmGet() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SLMplsIlmGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmGet(::grpc::ServerContext* context, ::service_layer::SLMplsIlmGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLMplsIlmGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsIlmOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsIlmOpStream() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SLMplsIlmOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmOpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLMplsIlmGetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLMplsIlmGetStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SLMplsIlmGetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmGetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLMplsRegOp<WithAsyncMethod_SLMplsGet<WithAsyncMethod_SLMplsGetStats<WithAsyncMethod_SLMplsLabelBlockOp<WithAsyncMethod_SLMplsLabelBlockGet<WithAsyncMethod_SLMplsIlmOp<WithAsyncMethod_SLMplsIlmGet<WithAsyncMethod_SLMplsIlmOpStream<WithAsyncMethod_SLMplsIlmGetStream<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLMplsRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsRegOp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsRegMsg, ::service_layer::SLMplsRegMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsRegMsg* request, ::service_layer::SLMplsRegMsgRsp* response) { return this->SLMplsRegOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsRegOp(
        ::grpc::MessageAllocator< ::service_layer::SLMplsRegMsg, ::service_layer::SLMplsRegMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsRegMsg, ::service_layer::SLMplsRegMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsRegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsGet() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetMsgRsp* response) { return this->SLMplsGet(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsGet(
        ::grpc::MessageAllocator< ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsGetStats() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetStatsMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsGetMsg* request, ::service_layer::SLMplsGetStatsMsgRsp* response) { return this->SLMplsGetStats(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsGetStats(
        ::grpc::MessageAllocator< ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetStatsMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetStatsMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsGetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsLabelBlockOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsLabelBlockOp() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsLabelBlockMsg, ::service_layer::SLMplsLabelBlockMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsLabelBlockMsg* request, ::service_layer::SLMplsLabelBlockMsgRsp* response) { return this->SLMplsLabelBlockOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsLabelBlockOp(
        ::grpc::MessageAllocator< ::service_layer::SLMplsLabelBlockMsg, ::service_layer::SLMplsLabelBlockMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsLabelBlockMsg, ::service_layer::SLMplsLabelBlockMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsLabelBlockOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsLabelBlockOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsLabelBlockGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsLabelBlockGet() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsLabelBlockGetMsg, ::service_layer::SLMplsLabelBlockGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsLabelBlockGetMsg* request, ::service_layer::SLMplsLabelBlockGetMsgRsp* response) { return this->SLMplsLabelBlockGet(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsLabelBlockGet(
        ::grpc::MessageAllocator< ::service_layer::SLMplsLabelBlockGetMsg, ::service_layer::SLMplsLabelBlockGetMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsLabelBlockGetMsg, ::service_layer::SLMplsLabelBlockGetMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsLabelBlockGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsLabelBlockGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsIlmOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsIlmOp() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsIlmMsg* request, ::service_layer::SLMplsIlmMsgRsp* response) { return this->SLMplsIlmOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsIlmOp(
        ::grpc::MessageAllocator< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsIlmOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsIlmOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsIlmGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsIlmGet() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLMplsIlmGetMsg* request, ::service_layer::SLMplsIlmGetMsgRsp* response) { return this->SLMplsIlmGet(context, request, response); }));}
    void SetMessageAllocatorFor_SLMplsIlmGet(
        ::grpc::MessageAllocator< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLMplsIlmGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsIlmGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsIlmOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsIlmOpStream() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLMplsIlmOpStream(context); }));
    }
    ~WithCallbackMethod_SLMplsIlmOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* SLMplsIlmOpStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLMplsIlmGetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLMplsIlmGetStream() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLMplsIlmGetStream(context); }));
    }
    ~WithCallbackMethod_SLMplsIlmGetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* SLMplsIlmGetStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SLMplsRegOp<WithCallbackMethod_SLMplsGet<WithCallbackMethod_SLMplsGetStats<WithCallbackMethod_SLMplsLabelBlockOp<WithCallbackMethod_SLMplsLabelBlockGet<WithCallbackMethod_SLMplsIlmOp<WithCallbackMethod_SLMplsIlmGet<WithCallbackMethod_SLMplsIlmOpStream<WithCallbackMethod_SLMplsIlmGetStream<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLMplsRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsRegOp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLMplsRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLMplsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsGetStats() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SLMplsGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsLabelBlockOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsLabelBlockOp() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SLMplsLabelBlockOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsLabelBlockGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsLabelBlockGet() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SLMplsLabelBlockGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsIlmOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsIlmOp() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SLMplsIlmOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsIlmGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsIlmGet() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SLMplsIlmGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsIlmOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsIlmOpStream() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SLMplsIlmOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLMplsIlmGetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLMplsIlmGetStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SLMplsIlmGetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsRegOp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLMplsRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsRegOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsGet() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SLMplsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsGetStats() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SLMplsGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsGetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsLabelBlockOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsLabelBlockOp() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SLMplsLabelBlockOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsLabelBlockOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsLabelBlockGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsLabelBlockGet() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SLMplsLabelBlockGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsLabelBlockGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsIlmOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsIlmOp() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SLMplsIlmOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsIlmGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsIlmGet() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SLMplsIlmGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsIlmOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsIlmOpStream() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SLMplsIlmOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmOpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLMplsIlmGetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLMplsIlmGetStream() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SLMplsIlmGetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLMplsIlmGetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsRegOp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsRegOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsRegOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsGet() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsGetStats() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsGetStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsGetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsGetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsLabelBlockOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsLabelBlockOp() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsLabelBlockOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsLabelBlockOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsLabelBlockOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsLabelBlockGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsLabelBlockGet() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsLabelBlockGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsLabelBlockGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsLabelBlockGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsIlmOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsIlmOp() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsIlmOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsIlmOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsIlmOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsIlmGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsIlmGet() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLMplsIlmGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLMplsIlmGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLMplsIlmGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsIlmOpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsIlmOpStream() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLMplsIlmOpStream(context); }));
    }
    ~WithRawCallbackMethod_SLMplsIlmOpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmOpStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmMsgRsp, ::service_layer::SLMplsIlmMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLMplsIlmOpStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLMplsIlmGetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLMplsIlmGetStream() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLMplsIlmGetStream(context); }));
    }
    ~WithRawCallbackMethod_SLMplsIlmGetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLMplsIlmGetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLMplsIlmGetMsgRsp, ::service_layer::SLMplsIlmGetMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLMplsIlmGetStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsRegOp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsRegMsg, ::service_layer::SLMplsRegMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsRegMsg, ::service_layer::SLMplsRegMsgRsp>* streamer) {
                       return this->StreamedSLMplsRegOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsRegOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsRegMsg* /*request*/, ::service_layer::SLMplsRegMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsRegOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsRegMsg,::service_layer::SLMplsRegMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetMsgRsp>* streamer) {
                       return this->StreamedSLMplsGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsGetMsg,::service_layer::SLMplsGetMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsGetStats() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetStatsMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsGetMsg, ::service_layer::SLMplsGetStatsMsgRsp>* streamer) {
                       return this->StreamedSLMplsGetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsGetStats(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsGetMsg* /*request*/, ::service_layer::SLMplsGetStatsMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsGetMsg,::service_layer::SLMplsGetStatsMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsLabelBlockOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsLabelBlockOp() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsLabelBlockMsg, ::service_layer::SLMplsLabelBlockMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsLabelBlockMsg, ::service_layer::SLMplsLabelBlockMsgRsp>* streamer) {
                       return this->StreamedSLMplsLabelBlockOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsLabelBlockOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsLabelBlockOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockMsg* /*request*/, ::service_layer::SLMplsLabelBlockMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsLabelBlockOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsLabelBlockMsg,::service_layer::SLMplsLabelBlockMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsLabelBlockGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsLabelBlockGet() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsLabelBlockGetMsg, ::service_layer::SLMplsLabelBlockGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsLabelBlockGetMsg, ::service_layer::SLMplsLabelBlockGetMsgRsp>* streamer) {
                       return this->StreamedSLMplsLabelBlockGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsLabelBlockGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsLabelBlockGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsLabelBlockGetMsg* /*request*/, ::service_layer::SLMplsLabelBlockGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsLabelBlockGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsLabelBlockGetMsg,::service_layer::SLMplsLabelBlockGetMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsIlmOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsIlmOp() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsIlmMsg, ::service_layer::SLMplsIlmMsgRsp>* streamer) {
                       return this->StreamedSLMplsIlmOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsIlmOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsIlmOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmMsg* /*request*/, ::service_layer::SLMplsIlmMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsIlmOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsIlmMsg,::service_layer::SLMplsIlmMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLMplsIlmGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLMplsIlmGet() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLMplsIlmGetMsg, ::service_layer::SLMplsIlmGetMsgRsp>* streamer) {
                       return this->StreamedSLMplsIlmGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLMplsIlmGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLMplsIlmGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLMplsIlmGetMsg* /*request*/, ::service_layer::SLMplsIlmGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLMplsIlmGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLMplsIlmGetMsg,::service_layer::SLMplsIlmGetMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLMplsRegOp<WithStreamedUnaryMethod_SLMplsGet<WithStreamedUnaryMethod_SLMplsGetStats<WithStreamedUnaryMethod_SLMplsLabelBlockOp<WithStreamedUnaryMethod_SLMplsLabelBlockGet<WithStreamedUnaryMethod_SLMplsIlmOp<WithStreamedUnaryMethod_SLMplsIlmGet<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLMplsRegOp<WithStreamedUnaryMethod_SLMplsGet<WithStreamedUnaryMethod_SLMplsGetStats<WithStreamedUnaryMethod_SLMplsLabelBlockOp<WithStreamedUnaryMethod_SLMplsLabelBlockGet<WithStreamedUnaryMethod_SLMplsIlmOp<WithStreamedUnaryMethod_SLMplsIlmGet<Service > > > > > > > StreamedService;
};
// @addtogroup SLMpls
// @{
// /;

}  // namespace service_layer


#endif  // GRPC_sl_5fmpls_2eproto__INCLUDED
