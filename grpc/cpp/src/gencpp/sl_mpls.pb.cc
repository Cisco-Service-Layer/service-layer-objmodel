// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_mpls.proto

#include "sl_mpls.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sl_5fcommon_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fcommon_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLInterface_sl_5fcommon_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fcommon_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLIpAddress_sl_5fcommon_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLMplsCos_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsIlmKey_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsIlmRes_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsPath_sl_5fmpls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlMplsReg_sl_5fmpls_2eproto;
namespace service_layer {
class SLMplsLabelBlockKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsLabelBlockKey> _instance;
} _SLMplsLabelBlockKey_default_instance_;
class SLMplsLabelBlockMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsLabelBlockMsg> _instance;
} _SLMplsLabelBlockMsg_default_instance_;
class SLMplsLabelBlockMsgResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsLabelBlockMsgRes> _instance;
} _SLMplsLabelBlockMsgRes_default_instance_;
class SLMplsLabelBlockMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsLabelBlockMsgRsp> _instance;
} _SLMplsLabelBlockMsgRsp_default_instance_;
class SLMplsLabelBlockGetMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsLabelBlockGetMsg> _instance;
} _SLMplsLabelBlockGetMsg_default_instance_;
class SLMplsLabelBlockGetMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsLabelBlockGetMsgRsp> _instance;
} _SLMplsLabelBlockGetMsgRsp_default_instance_;
class SlMplsRegDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlMplsReg> _instance;
} _SlMplsReg_default_instance_;
class SLMplsRegMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsRegMsg> _instance;
} _SLMplsRegMsg_default_instance_;
class SLMplsRegMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsRegMsgRsp> _instance;
} _SLMplsRegMsgRsp_default_instance_;
class SLMplsGetMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsGetMsg> _instance;
} _SLMplsGetMsg_default_instance_;
class SLMplsGetMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsGetMsgRsp> _instance;
} _SLMplsGetMsgRsp_default_instance_;
class SLMplsGetStatsMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsGetStatsMsgRsp> _instance;
} _SLMplsGetStatsMsgRsp_default_instance_;
class SLMplsPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsPath> _instance;
} _SLMplsPath_default_instance_;
class SLMplsIlmKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmKey> _instance;
} _SLMplsIlmKey_default_instance_;
class SLMplsCosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsCos> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  bool defaultelsppath_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forwardingclass_;
} _SLMplsCos_default_instance_;
class SLMplsIlmEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmEntry> _instance;
} _SLMplsIlmEntry_default_instance_;
class SLMplsIlmMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmMsg> _instance;
} _SLMplsIlmMsg_default_instance_;
class SLMplsIlmResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmRes> _instance;
} _SLMplsIlmRes_default_instance_;
class SLMplsIlmMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmMsgRsp> _instance;
} _SLMplsIlmMsgRsp_default_instance_;
class SLMplsIlmGetMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmGetMsg> _instance;
} _SLMplsIlmGetMsg_default_instance_;
class SLMplsIlmGetMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLMplsIlmGetMsgRsp> _instance;
} _SLMplsIlmGetMsgRsp_default_instance_;
}  // namespace service_layer
static void InitDefaultsscc_info_SLMplsCos_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsCos_default_instance_;
    new (ptr) ::service_layer::SLMplsCos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsCos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLMplsCos_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLMplsCos_sl_5fmpls_2eproto}, {}};

static void InitDefaultsscc_info_SLMplsGetMsg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsGetMsg_default_instance_;
    new (ptr) ::service_layer::SLMplsGetMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsGetMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLMplsGetMsg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLMplsGetMsg_sl_5fmpls_2eproto}, {}};

static void InitDefaultsscc_info_SLMplsGetMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsGetMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsGetMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsGetMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsGetMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsGetMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsGetStatsMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsGetStatsMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsGetStatsMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsGetStatsMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsGetStatsMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsGetStatsMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmEntry_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmEntry_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsIlmEntry_sl_5fmpls_2eproto}, {
      &scc_info_SLMplsIlmKey_sl_5fmpls_2eproto.base,
      &scc_info_SLMplsPath_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmGetMsg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmGetMsg_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmGetMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmGetMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsIlmGetMsg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsIlmGetMsg_sl_5fmpls_2eproto}, {
      &scc_info_SLMplsIlmKey_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmGetMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmGetMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmGetMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmGetMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsIlmGetMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsIlmGetMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmKey_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmKey_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsIlmKey_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsIlmKey_sl_5fmpls_2eproto}, {
      &scc_info_SLMplsCos_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmMsg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmMsg_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsIlmMsg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsIlmMsg_sl_5fmpls_2eproto}, {
      &scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsIlmMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsIlmMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLMplsIlmRes_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsIlmRes_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsIlmRes_default_instance_;
    new (ptr) ::service_layer::SLMplsIlmRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsIlmRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsIlmRes_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsIlmRes_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLMplsIlmKey_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsLabelBlockGetMsg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsLabelBlockGetMsg_default_instance_;
    new (ptr) ::service_layer::SLMplsLabelBlockGetMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsLabelBlockGetMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsLabelBlockGetMsg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsLabelBlockGetMsg_sl_5fmpls_2eproto}, {
      &scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsLabelBlockGetMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsLabelBlockGetMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsLabelBlockGetMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsLabelBlockGetMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsLabelBlockGetMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsLabelBlockGetMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsLabelBlockKey_default_instance_;
    new (ptr) ::service_layer::SLMplsLabelBlockKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsLabelBlockKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto}, {}};

static void InitDefaultsscc_info_SLMplsLabelBlockMsg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsLabelBlockMsg_default_instance_;
    new (ptr) ::service_layer::SLMplsLabelBlockMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsLabelBlockMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsLabelBlockMsg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsLabelBlockMsg_sl_5fmpls_2eproto}, {
      &scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsLabelBlockMsgRes_default_instance_;
    new (ptr) ::service_layer::SLMplsLabelBlockMsgRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsLabelBlockMsgRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsLabelBlockMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsLabelBlockMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsLabelBlockMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsLabelBlockMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsLabelBlockMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsLabelBlockMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsPath_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsPath_default_instance_;
    new (ptr) ::service_layer::SLMplsPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLMplsPath_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLMplsPath_sl_5fmpls_2eproto}, {
      &scc_info_SLIpAddress_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLInterface_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsRegMsg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsRegMsg_default_instance_;
    new (ptr) ::service_layer::SLMplsRegMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsRegMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsRegMsg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsRegMsg_sl_5fmpls_2eproto}, {
      &scc_info_SlMplsReg_sl_5fmpls_2eproto.base,}};

static void InitDefaultsscc_info_SLMplsRegMsgRsp_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLMplsRegMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLMplsRegMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLMplsRegMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLMplsRegMsgRsp_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLMplsRegMsgRsp_sl_5fmpls_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SlMplsReg_sl_5fmpls_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SlMplsReg_default_instance_;
    new (ptr) ::service_layer::SlMplsReg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SlMplsReg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlMplsReg_sl_5fmpls_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SlMplsReg_sl_5fmpls_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fmpls_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fmpls_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fmpls_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sl_5fmpls_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockKey, startlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockKey, labelblocksize_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockKey, blocktype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockKey, clientname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsg, mplsblocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsgRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsgRes, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsLabelBlockGetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SlMplsReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SlMplsReg, purgeintervalseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsRegMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsRegMsg, regmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsRegMsgRsp, errstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, maxlabelsperblock_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, maxlabelblocksperlabelblockmsg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, minstartlabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, labeltablesize_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, maxilmperilmmsg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetMsgRsp, maxpathsperilm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetStatsMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetStatsMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetStatsMsgRsp, labelblockcount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsGetStatsMsgRsp, ilmcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, nexthopaddress_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, nexthopinterface_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, loadmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, action_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, pathid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, protectedpathbitmap_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, labelstack_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsPath, remoteaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmKey, locallabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmKey, slmplscosval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsCos, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsCos, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::service_layer::SLMplsCosDefaultTypeInternal, exp_),
  offsetof(::service_layer::SLMplsCosDefaultTypeInternal, defaultelsppath_),
  offsetof(::service_layer::SLMplsCosDefaultTypeInternal, forwardingclass_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsCos, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmEntry, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmEntry, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsg, mplsilms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmRes, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsgRsp, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsg, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsgRsp, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLMplsIlmGetMsgRsp, entries_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service_layer::SLMplsLabelBlockKey)},
  { 9, -1, sizeof(::service_layer::SLMplsLabelBlockMsg)},
  { 16, -1, sizeof(::service_layer::SLMplsLabelBlockMsgRes)},
  { 23, -1, sizeof(::service_layer::SLMplsLabelBlockMsgRsp)},
  { 30, -1, sizeof(::service_layer::SLMplsLabelBlockGetMsg)},
  { 38, -1, sizeof(::service_layer::SLMplsLabelBlockGetMsgRsp)},
  { 46, -1, sizeof(::service_layer::SlMplsReg)},
  { 52, -1, sizeof(::service_layer::SLMplsRegMsg)},
  { 59, -1, sizeof(::service_layer::SLMplsRegMsgRsp)},
  { 65, -1, sizeof(::service_layer::SLMplsGetMsg)},
  { 70, -1, sizeof(::service_layer::SLMplsGetMsgRsp)},
  { 82, -1, sizeof(::service_layer::SLMplsGetStatsMsgRsp)},
  { 90, -1, sizeof(::service_layer::SLMplsPath)},
  { 104, -1, sizeof(::service_layer::SLMplsIlmKey)},
  { 111, -1, sizeof(::service_layer::SLMplsCos)},
  { 120, -1, sizeof(::service_layer::SLMplsIlmEntry)},
  { 127, -1, sizeof(::service_layer::SLMplsIlmMsg)},
  { 135, -1, sizeof(::service_layer::SLMplsIlmRes)},
  { 142, -1, sizeof(::service_layer::SLMplsIlmMsgRsp)},
  { 150, -1, sizeof(::service_layer::SLMplsIlmGetMsg)},
  { 159, -1, sizeof(::service_layer::SLMplsIlmGetMsgRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsLabelBlockKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsLabelBlockMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsLabelBlockMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsLabelBlockMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsLabelBlockGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsLabelBlockGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SlMplsReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsGetStatsMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsCos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLMplsIlmGetMsgRsp_default_instance_),
};

const char descriptor_table_protodef_sl_5fmpls_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsl_mpls.proto\022\rservice_layer\032\025sl_commo"
  "n_types.proto\"\215\001\n\023SLMplsLabelBlockKey\022\022\n"
  "\nStartLabel\030\001 \001(\r\022\026\n\016LabelBlockSize\030\002 \001("
  "\r\0226\n\tBlockType\030\003 \001(\0162#.service_layer.SLM"
  "plsLabelBlockType\022\022\n\nClientName\030\004 \001(\t\"v\n"
  "\023SLMplsLabelBlockMsg\022\'\n\004Oper\030\001 \001(\0162\031.ser"
  "vice_layer.SLObjectOp\0226\n\nMplsBlocks\030\002 \003("
  "\0132\".service_layer.SLMplsLabelBlockKey\"z\n"
  "\026SLMplsLabelBlockMsgRes\022/\n\tErrStatus\030\001 \001"
  "(\0132\034.service_layer.SLErrorStatus\022/\n\003Key\030"
  "\002 \001(\0132\".service_layer.SLMplsLabelBlockKe"
  "y\"\205\001\n\026SLMplsLabelBlockMsgRsp\0223\n\rStatusSu"
  "mmary\030\001 \001(\0132\034.service_layer.SLErrorStatu"
  "s\0226\n\007Results\030\002 \003(\0132%.service_layer.SLMpl"
  "sLabelBlockMsgRes\"p\n\026SLMplsLabelBlockGet"
  "Msg\022/\n\003Key\030\001 \001(\0132\".service_layer.SLMplsL"
  "abelBlockKey\022\024\n\014EntriesCount\030\002 \001(\r\022\017\n\007Ge"
  "tNext\030\003 \001(\010\"\216\001\n\031SLMplsLabelBlockGetMsgRs"
  "p\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001(\0132\034.serv"
  "ice_layer.SLErrorStatus\0223\n\007Entries\030\003 \003(\013"
  "2\".service_layer.SLMplsLabelBlockKey\")\n\t"
  "SlMplsReg\022\034\n\024PurgeIntervalSeconds\030\001 \001(\r\""
  "^\n\014SLMplsRegMsg\022$\n\004Oper\030\001 \001(\0162\026.service_"
  "layer.SLRegOp\022(\n\006RegMsg\030\002 \001(\0132\030.service_"
  "layer.SlMplsReg\"B\n\017SLMplsRegMsgRsp\022/\n\tEr"
  "rStatus\030\001 \001(\0132\034.service_layer.SLErrorSta"
  "tus\"\016\n\014SLMplsGetMsg\"\345\001\n\017SLMplsGetMsgRsp\022"
  "/\n\tErrStatus\030\001 \001(\0132\034.service_layer.SLErr"
  "orStatus\022\031\n\021MaxLabelsPerBlock\030\002 \001(\r\022&\n\036M"
  "axLabelblocksPerLabelblockmsg\030\003 \001(\r\022\025\n\rM"
  "inStartLabel\030\004 \001(\r\022\026\n\016LabelTableSize\030\005 \001"
  "(\r\022\027\n\017MaxIlmPerIlmmsg\030\006 \001(\r\022\026\n\016MaxPathsP"
  "erIlm\030\007 \001(\r\"r\n\024SLMplsGetStatsMsgRsp\022/\n\tE"
  "rrStatus\030\001 \001(\0132\034.service_layer.SLErrorSt"
  "atus\022\027\n\017LabelBlockCount\030\002 \001(\r\022\020\n\010IlmCoun"
  "t\030\003 \001(\r\"\275\002\n\nSLMplsPath\0222\n\016NexthopAddress"
  "\030\001 \001(\0132\032.service_layer.SLIpAddress\0224\n\020Ne"
  "xthopInterface\030\002 \001(\0132\032.service_layer.SLI"
  "nterface\022\022\n\nLoadMetric\030\003 \001(\r\022\017\n\007VrfName\030"
  "\004 \001(\t\022,\n\006Action\030\005 \001(\0162\034.service_layer.Sl"
  "LabelAction\022\016\n\006PathId\030\006 \001(\r\022\033\n\023Protected"
  "PathBitmap\030\007 \003(\004\022\022\n\nLabelStack\030\010 \003(\r\0221\n\r"
  "RemoteAddress\030\t \003(\0132\032.service_layer.SLIp"
  "Address\"R\n\014SLMplsIlmKey\022\022\n\nLocalLabel\030\001 "
  "\001(\r\022.\n\014SlMplsCosVal\030\002 \001(\0132\030.service_laye"
  "r.SLMplsCos\"Y\n\tSLMplsCos\022\r\n\003Exp\030\001 \001(\rH\000\022"
  "\031\n\017DefaultElspPath\030\002 \001(\010H\000\022\031\n\017Forwarding"
  "Class\030\003 \001(\rH\000B\007\n\005value\"d\n\016SLMplsIlmEntry"
  "\022(\n\003Key\030\001 \001(\0132\033.service_layer.SLMplsIlmK"
  "ey\022(\n\005Paths\030\002 \003(\0132\031.service_layer.SLMpls"
  "Path\"|\n\014SLMplsIlmMsg\022\'\n\004Oper\030\001 \001(\0162\031.ser"
  "vice_layer.SLObjectOp\022\022\n\nCorrelator\030\002 \001("
  "\004\022/\n\010MplsIlms\030\003 \003(\0132\035.service_layer.SLMp"
  "lsIlmEntry\"i\n\014SLMplsIlmRes\022/\n\tErrStatus\030"
  "\001 \001(\0132\034.service_layer.SLErrorStatus\022(\n\003K"
  "ey\030\002 \001(\0132\033.service_layer.SLMplsIlmKey\"\210\001"
  "\n\017SLMplsIlmMsgRsp\022\022\n\nCorrelator\030\001 \001(\004\0223\n"
  "\rStatusSummary\030\002 \001(\0132\034.service_layer.SLE"
  "rrorStatus\022,\n\007Results\030\003 \003(\0132\033.service_la"
  "yer.SLMplsIlmRes\"v\n\017SLMplsIlmGetMsg\022\022\n\nC"
  "orrelator\030\001 \001(\004\022(\n\003Key\030\002 \001(\0132\033.service_l"
  "ayer.SLMplsIlmKey\022\024\n\014EntriesCount\030\003 \001(\r\022"
  "\017\n\007GetNext\030\004 \001(\010\"\226\001\n\022SLMplsIlmGetMsgRsp\022"
  "\022\n\nCorrelator\030\001 \001(\004\022\013\n\003Eof\030\002 \001(\010\022/\n\tErrS"
  "tatus\030\003 \001(\0132\034.service_layer.SLErrorStatu"
  "s\022.\n\007Entries\030\004 \003(\0132\035.service_layer.SLMpl"
  "sIlmEntry*\342\001\n\rSlLabelAction\022\034\n\030SL_LABEL_"
  "ACTION_RESERVED\020\000\022\030\n\024SL_LABEL_ACTION_SWA"
  "P\020\001\022#\n\037SL_LABEL_ACTION_POP_AND_FORWARD\020\002"
  "\022\'\n#SL_LABEL_ACTION_POP_AND_LOOKUP_IPV4\020"
  "\003\022\'\n#SL_LABEL_ACTION_POP_AND_LOOKUP_IPV6"
  "\020\004\022\"\n\036SL_LABEL_ACTION_POP_AND_LOOKUP\020\005*\202"
  "\001\n\024SLMplsLabelBlockType\022%\n!SL_MPLS_LABEL"
  "_BLOCK_TYPE_RESERVED\020\000\022!\n\035SL_MPLS_LABEL_"
  "BLOCK_TYPE_SRGB\020\001\022 \n\034SL_MPLS_LABEL_BLOCK"
  "_TYPE_CBF\020\0022\221\006\n\nSLMplsOper\022J\n\013SLMplsRegO"
  "p\022\033.service_layer.SLMplsRegMsg\032\036.service"
  "_layer.SLMplsRegMsgRsp\022H\n\tSLMplsGet\022\033.se"
  "rvice_layer.SLMplsGetMsg\032\036.service_layer"
  ".SLMplsGetMsgRsp\022R\n\016SLMplsGetStats\022\033.ser"
  "vice_layer.SLMplsGetMsg\032#.service_layer."
  "SLMplsGetStatsMsgRsp\022_\n\022SLMplsLabelBlock"
  "Op\022\".service_layer.SLMplsLabelBlockMsg\032%"
  ".service_layer.SLMplsLabelBlockMsgRsp\022f\n"
  "\023SLMplsLabelBlockGet\022%.service_layer.SLM"
  "plsLabelBlockGetMsg\032(.service_layer.SLMp"
  "lsLabelBlockGetMsgRsp\022J\n\013SLMplsIlmOp\022\033.s"
  "ervice_layer.SLMplsIlmMsg\032\036.service_laye"
  "r.SLMplsIlmMsgRsp\022Q\n\014SLMplsIlmGet\022\036.serv"
  "ice_layer.SLMplsIlmGetMsg\032!.service_laye"
  "r.SLMplsIlmGetMsgRsp\022T\n\021SLMplsIlmOpStrea"
  "m\022\033.service_layer.SLMplsIlmMsg\032\036.service"
  "_layer.SLMplsIlmMsgRsp(\0010\001\022[\n\022SLMplsIlmG"
  "etStream\022\036.service_layer.SLMplsIlmGetMsg"
  "\032!.service_layer.SLMplsIlmGetMsgRsp(\0010\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fmpls_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sl_5fmpls_2eproto_sccs[21] = {
  &scc_info_SLMplsCos_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsGetMsg_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsGetMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsGetStatsMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmGetMsg_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmGetMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmKey_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmMsg_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsIlmRes_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsLabelBlockGetMsg_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsLabelBlockGetMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsLabelBlockMsg_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsLabelBlockMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsPath_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsRegMsg_sl_5fmpls_2eproto.base,
  &scc_info_SLMplsRegMsgRsp_sl_5fmpls_2eproto.base,
  &scc_info_SlMplsReg_sl_5fmpls_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fmpls_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fmpls_2eproto = {
  false, false, descriptor_table_protodef_sl_5fmpls_2eproto, "sl_mpls.proto", 3807,
  &descriptor_table_sl_5fmpls_2eproto_once, descriptor_table_sl_5fmpls_2eproto_sccs, descriptor_table_sl_5fmpls_2eproto_deps, 21, 1,
  schemas, file_default_instances, TableStruct_sl_5fmpls_2eproto::offsets,
  file_level_metadata_sl_5fmpls_2eproto, 21, file_level_enum_descriptors_sl_5fmpls_2eproto, file_level_service_descriptors_sl_5fmpls_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sl_5fmpls_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sl_5fmpls_2eproto)), true);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlLabelAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fmpls_2eproto);
  return file_level_enum_descriptors_sl_5fmpls_2eproto[0];
}
bool SlLabelAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLMplsLabelBlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fmpls_2eproto);
  return file_level_enum_descriptors_sl_5fmpls_2eproto[1];
}
bool SLMplsLabelBlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SLMplsLabelBlockKey::InitAsDefaultInstance() {
}
class SLMplsLabelBlockKey::_Internal {
 public:
};

SLMplsLabelBlockKey::SLMplsLabelBlockKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsLabelBlockKey)
}
SLMplsLabelBlockKey::SLMplsLabelBlockKey(const SLMplsLabelBlockKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientname().empty()) {
    clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientname(),
      GetArena());
  }
  ::memcpy(&startlabel_, &from.startlabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocktype_) -
    reinterpret_cast<char*>(&startlabel_)) + sizeof(blocktype_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockKey)
}

void SLMplsLabelBlockKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocktype_) -
      reinterpret_cast<char*>(&startlabel_)) + sizeof(blocktype_));
}

SLMplsLabelBlockKey::~SLMplsLabelBlockKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsLabelBlockKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLMplsLabelBlockKey::ArenaDtor(void* object) {
  SLMplsLabelBlockKey* _this = reinterpret_cast< SLMplsLabelBlockKey* >(object);
  (void)_this;
}
void SLMplsLabelBlockKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsLabelBlockKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsLabelBlockKey& SLMplsLabelBlockKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsLabelBlockKey_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsLabelBlockKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&startlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocktype_) -
      reinterpret_cast<char*>(&startlabel_)) + sizeof(blocktype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsLabelBlockKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 StartLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LabelBlockSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          labelblocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLMplsLabelBlockType BlockType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_blocktype(static_cast<::service_layer::SLMplsLabelBlockType>(val));
        } else goto handle_unusual;
        continue;
      // string ClientName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLMplsLabelBlockKey.ClientName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsLabelBlockKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startlabel(), target);
  }

  // uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_labelblocksize(), target);
  }

  // .service_layer.SLMplsLabelBlockType BlockType = 3;
  if (this->blocktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_blocktype(), target);
  }

  // string ClientName = 4;
  if (this->clientname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsLabelBlockKey.ClientName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clientname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockKey)
  return target;
}

size_t SLMplsLabelBlockKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientName = 4;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startlabel());
  }

  // uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_labelblocksize());
  }

  // .service_layer.SLMplsLabelBlockType BlockType = 3;
  if (this->blocktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blocktype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsLabelBlockKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsLabelBlockKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockKey)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockKey::MergeFrom(const SLMplsLabelBlockKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {
    _internal_set_clientname(from._internal_clientname());
  }
  if (from.startlabel() != 0) {
    _internal_set_startlabel(from._internal_startlabel());
  }
  if (from.labelblocksize() != 0) {
    _internal_set_labelblocksize(from._internal_labelblocksize());
  }
  if (from.blocktype() != 0) {
    _internal_set_blocktype(from._internal_blocktype());
  }
}

void SLMplsLabelBlockKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockKey::CopyFrom(const SLMplsLabelBlockKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockKey::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockKey::InternalSwap(SLMplsLabelBlockKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clientname_.Swap(&other->clientname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockKey, blocktype_)
      + sizeof(SLMplsLabelBlockKey::blocktype_)
      - PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockKey, startlabel_)>(
          reinterpret_cast<char*>(&startlabel_),
          reinterpret_cast<char*>(&other->startlabel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsLabelBlockKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsLabelBlockMsg::InitAsDefaultInstance() {
}
class SLMplsLabelBlockMsg::_Internal {
 public:
};

SLMplsLabelBlockMsg::SLMplsLabelBlockMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mplsblocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsLabelBlockMsg)
}
SLMplsLabelBlockMsg::SLMplsLabelBlockMsg(const SLMplsLabelBlockMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mplsblocks_(from.mplsblocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsg)
}

void SLMplsLabelBlockMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsLabelBlockMsg_sl_5fmpls_2eproto.base);
  oper_ = 0;
}

SLMplsLabelBlockMsg::~SLMplsLabelBlockMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsLabelBlockMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLMplsLabelBlockMsg::ArenaDtor(void* object) {
  SLMplsLabelBlockMsg* _this = reinterpret_cast< SLMplsLabelBlockMsg* >(object);
  (void)_this;
}
void SLMplsLabelBlockMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsLabelBlockMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsLabelBlockMsg& SLMplsLabelBlockMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsLabelBlockMsg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsLabelBlockMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mplsblocks_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsLabelBlockMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mplsblocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsLabelBlockMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mplsblocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mplsblocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsg)
  return target;
}

size_t SLMplsLabelBlockMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  total_size += 1UL * this->_internal_mplsblocks_size();
  for (const auto& msg : this->mplsblocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsLabelBlockMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsLabelBlockMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockMsg)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsg::MergeFrom(const SLMplsLabelBlockMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mplsblocks_.MergeFrom(from.mplsblocks_);
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLMplsLabelBlockMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsg::CopyFrom(const SLMplsLabelBlockMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsg::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockMsg::InternalSwap(SLMplsLabelBlockMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mplsblocks_.InternalSwap(&other->mplsblocks_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsLabelBlockMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsLabelBlockMsgRes::InitAsDefaultInstance() {
  ::service_layer::_SLMplsLabelBlockMsgRes_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  ::service_layer::_SLMplsLabelBlockMsgRes_default_instance_._instance.get_mutable()->key_ = const_cast< ::service_layer::SLMplsLabelBlockKey*>(
      ::service_layer::SLMplsLabelBlockKey::internal_default_instance());
}
class SLMplsLabelBlockMsgRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsLabelBlockMsgRes* msg);
  static const ::service_layer::SLMplsLabelBlockKey& key(const SLMplsLabelBlockMsgRes* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsLabelBlockMsgRes::_Internal::errstatus(const SLMplsLabelBlockMsgRes* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLMplsLabelBlockKey&
SLMplsLabelBlockMsgRes::_Internal::key(const SLMplsLabelBlockMsgRes* msg) {
  return *msg->key_;
}
void SLMplsLabelBlockMsgRes::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsLabelBlockMsgRes::SLMplsLabelBlockMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsLabelBlockMsgRes)
}
SLMplsLabelBlockMsgRes::SLMplsLabelBlockMsgRes(const SLMplsLabelBlockMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLMplsLabelBlockKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsgRes)
}

void SLMplsLabelBlockMsgRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(key_));
}

SLMplsLabelBlockMsgRes::~SLMplsLabelBlockMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsgRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsLabelBlockMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete key_;
}

void SLMplsLabelBlockMsgRes::ArenaDtor(void* object) {
  SLMplsLabelBlockMsgRes* _this = reinterpret_cast< SLMplsLabelBlockMsgRes* >(object);
  (void)_this;
}
void SLMplsLabelBlockMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsLabelBlockMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsLabelBlockMsgRes_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsLabelBlockMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockMsgRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsLabelBlockMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLMplsLabelBlockKey Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsLabelBlockMsgRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsgRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsgRes)
  return target;
}

size_t SLMplsLabelBlockMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockMsgRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsLabelBlockMsgRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockMsgRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsLabelBlockMsgRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockMsgRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockMsgRes)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsgRes::MergeFrom(const SLMplsLabelBlockMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLMplsLabelBlockKey::MergeFrom(from._internal_key());
  }
}

void SLMplsLabelBlockMsgRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsgRes::CopyFrom(const SLMplsLabelBlockMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsgRes::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockMsgRes::InternalSwap(SLMplsLabelBlockMsgRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockMsgRes, key_)
      + sizeof(SLMplsLabelBlockMsgRes::key_)
      - PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockMsgRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsLabelBlockMsgRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsLabelBlockMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsLabelBlockMsgRsp_default_instance_._instance.get_mutable()->statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsLabelBlockMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLMplsLabelBlockMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsLabelBlockMsgRsp::_Internal::statussummary(const SLMplsLabelBlockMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLMplsLabelBlockMsgRsp::clear_statussummary() {
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLMplsLabelBlockMsgRsp::SLMplsLabelBlockMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsLabelBlockMsgRsp)
}
SLMplsLabelBlockMsgRsp::SLMplsLabelBlockMsgRsp(const SLMplsLabelBlockMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsgRsp)
}

void SLMplsLabelBlockMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsLabelBlockMsgRsp_sl_5fmpls_2eproto.base);
  statussummary_ = nullptr;
}

SLMplsLabelBlockMsgRsp::~SLMplsLabelBlockMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsLabelBlockMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLMplsLabelBlockMsgRsp::ArenaDtor(void* object) {
  SLMplsLabelBlockMsgRsp* _this = reinterpret_cast< SLMplsLabelBlockMsgRsp* >(object);
  (void)_this;
}
void SLMplsLabelBlockMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsLabelBlockMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsLabelBlockMsgRsp& SLMplsLabelBlockMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsLabelBlockMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsLabelBlockMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsLabelBlockMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsLabelBlockMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsgRsp)
  return target;
}

size_t SLMplsLabelBlockMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsLabelBlockMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsLabelBlockMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsgRsp::MergeFrom(const SLMplsLabelBlockMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
}

void SLMplsLabelBlockMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsgRsp::CopyFrom(const SLMplsLabelBlockMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockMsgRsp::InternalSwap(SLMplsLabelBlockMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsLabelBlockMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsLabelBlockGetMsg::InitAsDefaultInstance() {
  ::service_layer::_SLMplsLabelBlockGetMsg_default_instance_._instance.get_mutable()->key_ = const_cast< ::service_layer::SLMplsLabelBlockKey*>(
      ::service_layer::SLMplsLabelBlockKey::internal_default_instance());
}
class SLMplsLabelBlockGetMsg::_Internal {
 public:
  static const ::service_layer::SLMplsLabelBlockKey& key(const SLMplsLabelBlockGetMsg* msg);
};

const ::service_layer::SLMplsLabelBlockKey&
SLMplsLabelBlockGetMsg::_Internal::key(const SLMplsLabelBlockGetMsg* msg) {
  return *msg->key_;
}
SLMplsLabelBlockGetMsg::SLMplsLabelBlockGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsLabelBlockGetMsg)
}
SLMplsLabelBlockGetMsg::SLMplsLabelBlockGetMsg(const SLMplsLabelBlockGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLMplsLabelBlockKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&entriescount_, &from.entriescount_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockGetMsg)
}

void SLMplsLabelBlockGetMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsLabelBlockGetMsg_sl_5fmpls_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&key_)) + sizeof(getnext_));
}

SLMplsLabelBlockGetMsg::~SLMplsLabelBlockGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsLabelBlockGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLMplsLabelBlockGetMsg::ArenaDtor(void* object) {
  SLMplsLabelBlockGetMsg* _this = reinterpret_cast< SLMplsLabelBlockGetMsg* >(object);
  (void)_this;
}
void SLMplsLabelBlockGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsLabelBlockGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsLabelBlockGetMsg& SLMplsLabelBlockGetMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsLabelBlockGetMsg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsLabelBlockGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&entriescount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsLabelBlockGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLMplsLabelBlockKey Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EntriesCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GetNext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsLabelBlockGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entriescount(), target);
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockGetMsg)
  return target;
}

size_t SLMplsLabelBlockGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entriescount());
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsLabelBlockGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsLabelBlockGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockGetMsg)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockGetMsg::MergeFrom(const SLMplsLabelBlockGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLMplsLabelBlockKey::MergeFrom(from._internal_key());
  }
  if (from.entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from.getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
}

void SLMplsLabelBlockGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockGetMsg::CopyFrom(const SLMplsLabelBlockGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockGetMsg::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockGetMsg::InternalSwap(SLMplsLabelBlockGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockGetMsg, getnext_)
      + sizeof(SLMplsLabelBlockGetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockGetMsg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsLabelBlockGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsLabelBlockGetMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsLabelBlockGetMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsLabelBlockGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsLabelBlockGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsLabelBlockGetMsgRsp::_Internal::errstatus(const SLMplsLabelBlockGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLMplsLabelBlockGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsLabelBlockGetMsgRsp::SLMplsLabelBlockGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsLabelBlockGetMsgRsp)
}
SLMplsLabelBlockGetMsgRsp::SLMplsLabelBlockGetMsgRsp(const SLMplsLabelBlockGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockGetMsgRsp)
}

void SLMplsLabelBlockGetMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsLabelBlockGetMsgRsp_sl_5fmpls_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLMplsLabelBlockGetMsgRsp::~SLMplsLabelBlockGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsLabelBlockGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLMplsLabelBlockGetMsgRsp::ArenaDtor(void* object) {
  SLMplsLabelBlockGetMsgRsp* _this = reinterpret_cast< SLMplsLabelBlockGetMsgRsp* >(object);
  (void)_this;
}
void SLMplsLabelBlockGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsLabelBlockGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsLabelBlockGetMsgRsp& SLMplsLabelBlockGetMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsLabelBlockGetMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsLabelBlockGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsLabelBlockGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Eof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsLabelBlockGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Eof = 1;
  if (this->eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockGetMsgRsp)
  return target;
}

size_t SLMplsLabelBlockGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsLabelBlockGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsLabelBlockGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockGetMsgRsp::MergeFrom(const SLMplsLabelBlockGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
}

void SLMplsLabelBlockGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockGetMsgRsp::CopyFrom(const SLMplsLabelBlockGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockGetMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockGetMsgRsp::InternalSwap(SLMplsLabelBlockGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, eof_)
      + sizeof(SLMplsLabelBlockGetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsLabelBlockGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlMplsReg::InitAsDefaultInstance() {
}
class SlMplsReg::_Internal {
 public:
};

SlMplsReg::SlMplsReg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SlMplsReg)
}
SlMplsReg::SlMplsReg(const SlMplsReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purgeintervalseconds_ = from.purgeintervalseconds_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SlMplsReg)
}

void SlMplsReg::SharedCtor() {
  purgeintervalseconds_ = 0u;
}

SlMplsReg::~SlMplsReg() {
  // @@protoc_insertion_point(destructor:service_layer.SlMplsReg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlMplsReg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SlMplsReg::ArenaDtor(void* object) {
  SlMplsReg* _this = reinterpret_cast< SlMplsReg* >(object);
  (void)_this;
}
void SlMplsReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlMplsReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlMplsReg& SlMplsReg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlMplsReg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SlMplsReg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SlMplsReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purgeintervalseconds_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlMplsReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 PurgeIntervalSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          purgeintervalseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlMplsReg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SlMplsReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PurgeIntervalSeconds = 1;
  if (this->purgeintervalseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_purgeintervalseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SlMplsReg)
  return target;
}

size_t SlMplsReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SlMplsReg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 PurgeIntervalSeconds = 1;
  if (this->purgeintervalseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_purgeintervalseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlMplsReg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SlMplsReg)
  GOOGLE_DCHECK_NE(&from, this);
  const SlMplsReg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlMplsReg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SlMplsReg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SlMplsReg)
    MergeFrom(*source);
  }
}

void SlMplsReg::MergeFrom(const SlMplsReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SlMplsReg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.purgeintervalseconds() != 0) {
    _internal_set_purgeintervalseconds(from._internal_purgeintervalseconds());
  }
}

void SlMplsReg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SlMplsReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlMplsReg::CopyFrom(const SlMplsReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SlMplsReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlMplsReg::IsInitialized() const {
  return true;
}

void SlMplsReg::InternalSwap(SlMplsReg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(purgeintervalseconds_, other->purgeintervalseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlMplsReg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsRegMsg::InitAsDefaultInstance() {
  ::service_layer::_SLMplsRegMsg_default_instance_._instance.get_mutable()->regmsg_ = const_cast< ::service_layer::SlMplsReg*>(
      ::service_layer::SlMplsReg::internal_default_instance());
}
class SLMplsRegMsg::_Internal {
 public:
  static const ::service_layer::SlMplsReg& regmsg(const SLMplsRegMsg* msg);
};

const ::service_layer::SlMplsReg&
SLMplsRegMsg::_Internal::regmsg(const SLMplsRegMsg* msg) {
  return *msg->regmsg_;
}
SLMplsRegMsg::SLMplsRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsRegMsg)
}
SLMplsRegMsg::SLMplsRegMsg(const SLMplsRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_regmsg()) {
    regmsg_ = new ::service_layer::SlMplsReg(*from.regmsg_);
  } else {
    regmsg_ = nullptr;
  }
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsRegMsg)
}

void SLMplsRegMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsRegMsg_sl_5fmpls_2eproto.base);
  ::memset(&regmsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&regmsg_)) + sizeof(oper_));
}

SLMplsRegMsg::~SLMplsRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsRegMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete regmsg_;
}

void SLMplsRegMsg::ArenaDtor(void* object) {
  SLMplsRegMsg* _this = reinterpret_cast< SLMplsRegMsg* >(object);
  (void)_this;
}
void SLMplsRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsRegMsg& SLMplsRegMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsRegMsg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsRegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && regmsg_ != nullptr) {
    delete regmsg_;
  }
  regmsg_ = nullptr;
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else goto handle_unusual;
        continue;
      // .service_layer.SlMplsReg RegMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsRegMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsRegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // .service_layer.SlMplsReg RegMsg = 2;
  if (this->has_regmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::regmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsRegMsg)
  return target;
}

size_t SLMplsRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsRegMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SlMplsReg RegMsg = 2;
  if (this->has_regmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regmsg_);
  }

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsRegMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsRegMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsRegMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsRegMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsRegMsg)
    MergeFrom(*source);
  }
}

void SLMplsRegMsg::MergeFrom(const SLMplsRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_regmsg()) {
    _internal_mutable_regmsg()->::service_layer::SlMplsReg::MergeFrom(from._internal_regmsg());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLMplsRegMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsRegMsg::CopyFrom(const SLMplsRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsRegMsg::IsInitialized() const {
  return true;
}

void SLMplsRegMsg::InternalSwap(SLMplsRegMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsRegMsg, oper_)
      + sizeof(SLMplsRegMsg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLMplsRegMsg, regmsg_)>(
          reinterpret_cast<char*>(&regmsg_),
          reinterpret_cast<char*>(&other->regmsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsRegMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsRegMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsRegMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsRegMsgRsp::_Internal::errstatus(const SLMplsRegMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLMplsRegMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsRegMsgRsp::SLMplsRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsRegMsgRsp)
}
SLMplsRegMsgRsp::SLMplsRegMsgRsp(const SLMplsRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsRegMsgRsp)
}

void SLMplsRegMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsRegMsgRsp_sl_5fmpls_2eproto.base);
  errstatus_ = nullptr;
}

SLMplsRegMsgRsp::~SLMplsRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsRegMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLMplsRegMsgRsp::ArenaDtor(void* object) {
  SLMplsRegMsgRsp* _this = reinterpret_cast< SLMplsRegMsgRsp* >(object);
  (void)_this;
}
void SLMplsRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsRegMsgRsp& SLMplsRegMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsRegMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsRegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsRegMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsRegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsRegMsgRsp)
  return target;
}

size_t SLMplsRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsRegMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsRegMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsRegMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsRegMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsRegMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsRegMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsRegMsgRsp::MergeFrom(const SLMplsRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
}

void SLMplsRegMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsRegMsgRsp::CopyFrom(const SLMplsRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsRegMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsRegMsgRsp::InternalSwap(SLMplsRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(errstatus_, other->errstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsRegMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsGetMsg::InitAsDefaultInstance() {
}
class SLMplsGetMsg::_Internal {
 public:
};

SLMplsGetMsg::SLMplsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsGetMsg)
}
SLMplsGetMsg::SLMplsGetMsg(const SLMplsGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetMsg)
}

void SLMplsGetMsg::SharedCtor() {
}

SLMplsGetMsg::~SLMplsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLMplsGetMsg::ArenaDtor(void* object) {
  SLMplsGetMsg* _this = reinterpret_cast< SLMplsGetMsg* >(object);
  (void)_this;
}
void SLMplsGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsGetMsg& SLMplsGetMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsGetMsg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetMsg)
  return target;
}

size_t SLMplsGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsGetMsg)
    MergeFrom(*source);
  }
}

void SLMplsGetMsg::MergeFrom(const SLMplsGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLMplsGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetMsg::CopyFrom(const SLMplsGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetMsg::IsInitialized() const {
  return true;
}

void SLMplsGetMsg::InternalSwap(SLMplsGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsGetMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsGetMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsGetMsgRsp::_Internal::errstatus(const SLMplsGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLMplsGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsGetMsgRsp::SLMplsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsGetMsgRsp)
}
SLMplsGetMsgRsp::SLMplsGetMsgRsp(const SLMplsGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&maxlabelsperblock_, &from.maxlabelsperblock_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxpathsperilm_) -
    reinterpret_cast<char*>(&maxlabelsperblock_)) + sizeof(maxpathsperilm_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetMsgRsp)
}

void SLMplsGetMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsGetMsgRsp_sl_5fmpls_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxpathsperilm_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(maxpathsperilm_));
}

SLMplsGetMsgRsp::~SLMplsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLMplsGetMsgRsp::ArenaDtor(void* object) {
  SLMplsGetMsgRsp* _this = reinterpret_cast< SLMplsGetMsgRsp* >(object);
  (void)_this;
}
void SLMplsGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsGetMsgRsp& SLMplsGetMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsGetMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&maxlabelsperblock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxpathsperilm_) -
      reinterpret_cast<char*>(&maxlabelsperblock_)) + sizeof(maxpathsperilm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxLabelsPerBlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxlabelsperblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxLabelblocksPerLabelblockmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxlabelblocksperlabelblockmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinStartLabel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minstartlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LabelTableSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          labeltablesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxIlmPerIlmmsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxilmperilmmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxPathsPerIlm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxpathsperilm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxlabelsperblock(), target);
  }

  // uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxlabelblocksperlabelblockmsg(), target);
  }

  // uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minstartlabel(), target);
  }

  // uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_labeltablesize(), target);
  }

  // uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxilmperilmmsg(), target);
  }

  // uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_maxpathsperilm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetMsgRsp)
  return target;
}

size_t SLMplsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxlabelsperblock());
  }

  // uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxlabelblocksperlabelblockmsg());
  }

  // uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minstartlabel());
  }

  // uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_labeltablesize());
  }

  // uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxilmperilmmsg());
  }

  // uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxpathsperilm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsGetMsgRsp::MergeFrom(const SLMplsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.maxlabelsperblock() != 0) {
    _internal_set_maxlabelsperblock(from._internal_maxlabelsperblock());
  }
  if (from.maxlabelblocksperlabelblockmsg() != 0) {
    _internal_set_maxlabelblocksperlabelblockmsg(from._internal_maxlabelblocksperlabelblockmsg());
  }
  if (from.minstartlabel() != 0) {
    _internal_set_minstartlabel(from._internal_minstartlabel());
  }
  if (from.labeltablesize() != 0) {
    _internal_set_labeltablesize(from._internal_labeltablesize());
  }
  if (from.maxilmperilmmsg() != 0) {
    _internal_set_maxilmperilmmsg(from._internal_maxilmperilmmsg());
  }
  if (from.maxpathsperilm() != 0) {
    _internal_set_maxpathsperilm(from._internal_maxpathsperilm());
  }
}

void SLMplsGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetMsgRsp::CopyFrom(const SLMplsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsGetMsgRsp::InternalSwap(SLMplsGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsGetMsgRsp, maxpathsperilm_)
      + sizeof(SLMplsGetMsgRsp::maxpathsperilm_)
      - PROTOBUF_FIELD_OFFSET(SLMplsGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsGetStatsMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsGetStatsMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsGetStatsMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsGetStatsMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsGetStatsMsgRsp::_Internal::errstatus(const SLMplsGetStatsMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLMplsGetStatsMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsGetStatsMsgRsp::SLMplsGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsGetStatsMsgRsp)
}
SLMplsGetStatsMsgRsp::SLMplsGetStatsMsgRsp(const SLMplsGetStatsMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&labelblockcount_, &from.labelblockcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&ilmcount_) -
    reinterpret_cast<char*>(&labelblockcount_)) + sizeof(ilmcount_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetStatsMsgRsp)
}

void SLMplsGetStatsMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsGetStatsMsgRsp_sl_5fmpls_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ilmcount_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(ilmcount_));
}

SLMplsGetStatsMsgRsp::~SLMplsGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetStatsMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsGetStatsMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLMplsGetStatsMsgRsp::ArenaDtor(void* object) {
  SLMplsGetStatsMsgRsp* _this = reinterpret_cast< SLMplsGetStatsMsgRsp* >(object);
  (void)_this;
}
void SLMplsGetStatsMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsGetStatsMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsGetStatsMsgRsp& SLMplsGetStatsMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsGetStatsMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsGetStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsGetStatsMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&labelblockcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ilmcount_) -
      reinterpret_cast<char*>(&labelblockcount_)) + sizeof(ilmcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsGetStatsMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LabelBlockCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          labelblockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IlmCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilmcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsGetStatsMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetStatsMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 LabelBlockCount = 2;
  if (this->labelblockcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_labelblockcount(), target);
  }

  // uint32 IlmCount = 3;
  if (this->ilmcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ilmcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetStatsMsgRsp)
  return target;
}

size_t SLMplsGetStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsGetStatsMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 LabelBlockCount = 2;
  if (this->labelblockcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_labelblockcount());
  }

  // uint32 IlmCount = 3;
  if (this->ilmcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilmcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsGetStatsMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsGetStatsMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsGetStatsMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsGetStatsMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsGetStatsMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsGetStatsMsgRsp::MergeFrom(const SLMplsGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.labelblockcount() != 0) {
    _internal_set_labelblockcount(from._internal_labelblockcount());
  }
  if (from.ilmcount() != 0) {
    _internal_set_ilmcount(from._internal_ilmcount());
  }
}

void SLMplsGetStatsMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetStatsMsgRsp::CopyFrom(const SLMplsGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetStatsMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsGetStatsMsgRsp::InternalSwap(SLMplsGetStatsMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsGetStatsMsgRsp, ilmcount_)
      + sizeof(SLMplsGetStatsMsgRsp::ilmcount_)
      - PROTOBUF_FIELD_OFFSET(SLMplsGetStatsMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsGetStatsMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsPath::InitAsDefaultInstance() {
  ::service_layer::_SLMplsPath_default_instance_._instance.get_mutable()->nexthopaddress_ = const_cast< ::service_layer::SLIpAddress*>(
      ::service_layer::SLIpAddress::internal_default_instance());
  ::service_layer::_SLMplsPath_default_instance_._instance.get_mutable()->nexthopinterface_ = const_cast< ::service_layer::SLInterface*>(
      ::service_layer::SLInterface::internal_default_instance());
}
class SLMplsPath::_Internal {
 public:
  static const ::service_layer::SLIpAddress& nexthopaddress(const SLMplsPath* msg);
  static const ::service_layer::SLInterface& nexthopinterface(const SLMplsPath* msg);
};

const ::service_layer::SLIpAddress&
SLMplsPath::_Internal::nexthopaddress(const SLMplsPath* msg) {
  return *msg->nexthopaddress_;
}
const ::service_layer::SLInterface&
SLMplsPath::_Internal::nexthopinterface(const SLMplsPath* msg) {
  return *msg->nexthopinterface_;
}
void SLMplsPath::clear_nexthopaddress() {
  if (GetArena() == nullptr && nexthopaddress_ != nullptr) {
    delete nexthopaddress_;
  }
  nexthopaddress_ = nullptr;
}
void SLMplsPath::clear_nexthopinterface() {
  if (GetArena() == nullptr && nexthopinterface_ != nullptr) {
    delete nexthopinterface_;
  }
  nexthopinterface_ = nullptr;
}
void SLMplsPath::clear_remoteaddress() {
  remoteaddress_.Clear();
}
SLMplsPath::SLMplsPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  protectedpathbitmap_(arena),
  labelstack_(arena),
  remoteaddress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsPath)
}
SLMplsPath::SLMplsPath(const SLMplsPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protectedpathbitmap_(from.protectedpathbitmap_),
      labelstack_(from.labelstack_),
      remoteaddress_(from.remoteaddress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  if (from._internal_has_nexthopaddress()) {
    nexthopaddress_ = new ::service_layer::SLIpAddress(*from.nexthopaddress_);
  } else {
    nexthopaddress_ = nullptr;
  }
  if (from._internal_has_nexthopinterface()) {
    nexthopinterface_ = new ::service_layer::SLInterface(*from.nexthopinterface_);
  } else {
    nexthopinterface_ = nullptr;
  }
  ::memcpy(&loadmetric_, &from.loadmetric_,
    static_cast<size_t>(reinterpret_cast<char*>(&pathid_) -
    reinterpret_cast<char*>(&loadmetric_)) + sizeof(pathid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsPath)
}

void SLMplsPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsPath_sl_5fmpls_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nexthopaddress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathid_) -
      reinterpret_cast<char*>(&nexthopaddress_)) + sizeof(pathid_));
}

SLMplsPath::~SLMplsPath() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nexthopaddress_;
  if (this != internal_default_instance()) delete nexthopinterface_;
}

void SLMplsPath::ArenaDtor(void* object) {
  SLMplsPath* _this = reinterpret_cast< SLMplsPath* >(object);
  (void)_this;
}
void SLMplsPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsPath& SLMplsPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsPath_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsPath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protectedpathbitmap_.Clear();
  labelstack_.Clear();
  remoteaddress_.Clear();
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && nexthopaddress_ != nullptr) {
    delete nexthopaddress_;
  }
  nexthopaddress_ = nullptr;
  if (GetArena() == nullptr && nexthopinterface_ != nullptr) {
    delete nexthopinterface_;
  }
  nexthopinterface_ = nullptr;
  ::memset(&loadmetric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathid_) -
      reinterpret_cast<char*>(&loadmetric_)) + sizeof(pathid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLIpAddress NexthopAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLInterface NexthopInterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopinterface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LoadMetric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          loadmetric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VrfName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLMplsPath.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SlLabelAction Action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::service_layer::SlLabelAction>(val));
        } else goto handle_unusual;
        continue;
      // uint32 PathId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pathid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 ProtectedPathBitmap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_protectedpathbitmap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 LabelStack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labelstack(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_labelstack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLIpAddress RemoteAddress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remoteaddress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nexthopaddress(this), target, stream);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nexthopinterface(this), target, stream);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_loadmetric(), target);
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsPath.VrfName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vrfname(), target);
  }

  // .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_action(), target);
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pathid(), target);
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  {
    int byte_size = _protectedpathbitmap_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_protectedpathbitmap(), byte_size, target);
    }
  }

  // repeated uint32 LabelStack = 8;
  {
    int byte_size = _labelstack_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_labelstack(), byte_size, target);
    }
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remoteaddress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_remoteaddress(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsPath)
  return target;
}

size_t SLMplsPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ProtectedPathBitmap = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->protectedpathbitmap_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _protectedpathbitmap_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 LabelStack = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labelstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labelstack_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  total_size += 1UL * this->_internal_remoteaddress_size();
  for (const auto& msg : this->remoteaddress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopaddress_);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopinterface_);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loadmetric());
  }

  // .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pathid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsPath)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsPath)
    MergeFrom(*source);
  }
}

void SLMplsPath::MergeFrom(const SLMplsPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protectedpathbitmap_.MergeFrom(from.protectedpathbitmap_);
  labelstack_.MergeFrom(from.labelstack_);
  remoteaddress_.MergeFrom(from.remoteaddress_);
  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.has_nexthopaddress()) {
    _internal_mutable_nexthopaddress()->::service_layer::SLIpAddress::MergeFrom(from._internal_nexthopaddress());
  }
  if (from.has_nexthopinterface()) {
    _internal_mutable_nexthopinterface()->::service_layer::SLInterface::MergeFrom(from._internal_nexthopinterface());
  }
  if (from.loadmetric() != 0) {
    _internal_set_loadmetric(from._internal_loadmetric());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.pathid() != 0) {
    _internal_set_pathid(from._internal_pathid());
  }
}

void SLMplsPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsPath::CopyFrom(const SLMplsPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsPath::IsInitialized() const {
  return true;
}

void SLMplsPath::InternalSwap(SLMplsPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protectedpathbitmap_.InternalSwap(&other->protectedpathbitmap_);
  labelstack_.InternalSwap(&other->labelstack_);
  remoteaddress_.InternalSwap(&other->remoteaddress_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsPath, pathid_)
      + sizeof(SLMplsPath::pathid_)
      - PROTOBUF_FIELD_OFFSET(SLMplsPath, nexthopaddress_)>(
          reinterpret_cast<char*>(&nexthopaddress_),
          reinterpret_cast<char*>(&other->nexthopaddress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmKey::InitAsDefaultInstance() {
  ::service_layer::_SLMplsIlmKey_default_instance_._instance.get_mutable()->slmplscosval_ = const_cast< ::service_layer::SLMplsCos*>(
      ::service_layer::SLMplsCos::internal_default_instance());
}
class SLMplsIlmKey::_Internal {
 public:
  static const ::service_layer::SLMplsCos& slmplscosval(const SLMplsIlmKey* msg);
};

const ::service_layer::SLMplsCos&
SLMplsIlmKey::_Internal::slmplscosval(const SLMplsIlmKey* msg) {
  return *msg->slmplscosval_;
}
SLMplsIlmKey::SLMplsIlmKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmKey)
}
SLMplsIlmKey::SLMplsIlmKey(const SLMplsIlmKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slmplscosval()) {
    slmplscosval_ = new ::service_layer::SLMplsCos(*from.slmplscosval_);
  } else {
    slmplscosval_ = nullptr;
  }
  locallabel_ = from.locallabel_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmKey)
}

void SLMplsIlmKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmKey_sl_5fmpls_2eproto.base);
  ::memset(&slmplscosval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locallabel_) -
      reinterpret_cast<char*>(&slmplscosval_)) + sizeof(locallabel_));
}

SLMplsIlmKey::~SLMplsIlmKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete slmplscosval_;
}

void SLMplsIlmKey::ArenaDtor(void* object) {
  SLMplsIlmKey* _this = reinterpret_cast< SLMplsIlmKey* >(object);
  (void)_this;
}
void SLMplsIlmKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmKey& SLMplsIlmKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmKey_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && slmplscosval_ != nullptr) {
    delete slmplscosval_;
  }
  slmplscosval_ = nullptr;
  locallabel_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 LocalLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          locallabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLMplsCos SlMplsCosVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slmplscosval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_locallabel(), target);
  }

  // .service_layer.SLMplsCos SlMplsCosVal = 2;
  if (this->has_slmplscosval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slmplscosval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmKey)
  return target;
}

size_t SLMplsIlmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLMplsCos SlMplsCosVal = 2;
  if (this->has_slmplscosval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slmplscosval_);
  }

  // uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_locallabel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmKey)
    MergeFrom(*source);
  }
}

void SLMplsIlmKey::MergeFrom(const SLMplsIlmKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slmplscosval()) {
    _internal_mutable_slmplscosval()->::service_layer::SLMplsCos::MergeFrom(from._internal_slmplscosval());
  }
  if (from.locallabel() != 0) {
    _internal_set_locallabel(from._internal_locallabel());
  }
}

void SLMplsIlmKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmKey::CopyFrom(const SLMplsIlmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmKey::IsInitialized() const {
  return true;
}

void SLMplsIlmKey::InternalSwap(SLMplsIlmKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsIlmKey, locallabel_)
      + sizeof(SLMplsIlmKey::locallabel_)
      - PROTOBUF_FIELD_OFFSET(SLMplsIlmKey, slmplscosval_)>(
          reinterpret_cast<char*>(&slmplscosval_),
          reinterpret_cast<char*>(&other->slmplscosval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsCos::InitAsDefaultInstance() {
  ::service_layer::_SLMplsCos_default_instance_.exp_ = 0u;
  ::service_layer::_SLMplsCos_default_instance_.defaultelsppath_ = false;
  ::service_layer::_SLMplsCos_default_instance_.forwardingclass_ = 0u;
}
class SLMplsCos::_Internal {
 public:
};

SLMplsCos::SLMplsCos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsCos)
}
SLMplsCos::SLMplsCos(const SLMplsCos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kExp: {
      _internal_set_exp(from._internal_exp());
      break;
    }
    case kDefaultElspPath: {
      _internal_set_defaultelsppath(from._internal_defaultelsppath());
      break;
    }
    case kForwardingClass: {
      _internal_set_forwardingclass(from._internal_forwardingclass());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsCos)
}

void SLMplsCos::SharedCtor() {
  clear_has_value();
}

SLMplsCos::~SLMplsCos() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsCos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsCos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void SLMplsCos::ArenaDtor(void* object) {
  SLMplsCos* _this = reinterpret_cast< SLMplsCos* >(object);
  (void)_this;
}
void SLMplsCos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsCos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsCos& SLMplsCos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsCos_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsCos::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLMplsCos)
  switch (value_case()) {
    case kExp: {
      // No need to clear
      break;
    }
    case kDefaultElspPath: {
      // No need to clear
      break;
    }
    case kForwardingClass: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SLMplsCos::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsCos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsCos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_exp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool DefaultElspPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_defaultelsppath(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ForwardingClass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_forwardingclass(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsCos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsCos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Exp = 1;
  if (_internal_has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_exp(), target);
  }

  // bool DefaultElspPath = 2;
  if (_internal_has_defaultelsppath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_defaultelsppath(), target);
  }

  // uint32 ForwardingClass = 3;
  if (_internal_has_forwardingclass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_forwardingclass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsCos)
  return target;
}

size_t SLMplsCos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsCos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // uint32 Exp = 1;
    case kExp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exp());
      break;
    }
    // bool DefaultElspPath = 2;
    case kDefaultElspPath: {
      total_size += 1 + 1;
      break;
    }
    // uint32 ForwardingClass = 3;
    case kForwardingClass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_forwardingclass());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsCos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsCos)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsCos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsCos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsCos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsCos)
    MergeFrom(*source);
  }
}

void SLMplsCos::MergeFrom(const SLMplsCos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsCos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kExp: {
      _internal_set_exp(from._internal_exp());
      break;
    }
    case kDefaultElspPath: {
      _internal_set_defaultelsppath(from._internal_defaultelsppath());
      break;
    }
    case kForwardingClass: {
      _internal_set_forwardingclass(from._internal_forwardingclass());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void SLMplsCos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsCos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsCos::CopyFrom(const SLMplsCos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsCos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsCos::IsInitialized() const {
  return true;
}

void SLMplsCos::InternalSwap(SLMplsCos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsCos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmEntry::InitAsDefaultInstance() {
  ::service_layer::_SLMplsIlmEntry_default_instance_._instance.get_mutable()->key_ = const_cast< ::service_layer::SLMplsIlmKey*>(
      ::service_layer::SLMplsIlmKey::internal_default_instance());
}
class SLMplsIlmEntry::_Internal {
 public:
  static const ::service_layer::SLMplsIlmKey& key(const SLMplsIlmEntry* msg);
};

const ::service_layer::SLMplsIlmKey&
SLMplsIlmEntry::_Internal::key(const SLMplsIlmEntry* msg) {
  return *msg->key_;
}
SLMplsIlmEntry::SLMplsIlmEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmEntry)
}
SLMplsIlmEntry::SLMplsIlmEntry(const SLMplsIlmEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLMplsIlmKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmEntry)
}

void SLMplsIlmEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto.base);
  key_ = nullptr;
}

SLMplsIlmEntry::~SLMplsIlmEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLMplsIlmEntry::ArenaDtor(void* object) {
  SLMplsIlmEntry* _this = reinterpret_cast< SLMplsIlmEntry* >(object);
  (void)_this;
}
void SLMplsIlmEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmEntry& SLMplsIlmEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmEntry_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLMplsIlmKey Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsPath Paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // repeated .service_layer.SLMplsPath Paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmEntry)
  return target;
}

size_t SLMplsIlmEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsPath Paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmEntry)
    MergeFrom(*source);
  }
}

void SLMplsIlmEntry::MergeFrom(const SLMplsIlmEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from._internal_key());
  }
}

void SLMplsIlmEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmEntry::CopyFrom(const SLMplsIlmEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmEntry::IsInitialized() const {
  return true;
}

void SLMplsIlmEntry::InternalSwap(SLMplsIlmEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmMsg::InitAsDefaultInstance() {
}
class SLMplsIlmMsg::_Internal {
 public:
};

SLMplsIlmMsg::SLMplsIlmMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mplsilms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmMsg)
}
SLMplsIlmMsg::SLMplsIlmMsg(const SLMplsIlmMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mplsilms_(from.mplsilms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmMsg)
}

void SLMplsIlmMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmMsg_sl_5fmpls_2eproto.base);
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
}

SLMplsIlmMsg::~SLMplsIlmMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLMplsIlmMsg::ArenaDtor(void* object) {
  SLMplsIlmMsg* _this = reinterpret_cast< SLMplsIlmMsg* >(object);
  (void)_this;
}
void SLMplsIlmMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmMsg& SLMplsIlmMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmMsg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mplsilms_.Clear();
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else goto handle_unusual;
        continue;
      // uint64 Correlator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mplsilms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_correlator(), target);
  }

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mplsilms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mplsilms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmMsg)
  return target;
}

size_t SLMplsIlmMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  total_size += 1UL * this->_internal_mplsilms_size();
  for (const auto& msg : this->mplsilms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmMsg)
    MergeFrom(*source);
  }
}

void SLMplsIlmMsg::MergeFrom(const SLMplsIlmMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mplsilms_.MergeFrom(from.mplsilms_);
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLMplsIlmMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmMsg::CopyFrom(const SLMplsIlmMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmMsg::IsInitialized() const {
  return true;
}

void SLMplsIlmMsg::InternalSwap(SLMplsIlmMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mplsilms_.InternalSwap(&other->mplsilms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsIlmMsg, oper_)
      + sizeof(SLMplsIlmMsg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLMplsIlmMsg, correlator_)>(
          reinterpret_cast<char*>(&correlator_),
          reinterpret_cast<char*>(&other->correlator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmRes::InitAsDefaultInstance() {
  ::service_layer::_SLMplsIlmRes_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  ::service_layer::_SLMplsIlmRes_default_instance_._instance.get_mutable()->key_ = const_cast< ::service_layer::SLMplsIlmKey*>(
      ::service_layer::SLMplsIlmKey::internal_default_instance());
}
class SLMplsIlmRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsIlmRes* msg);
  static const ::service_layer::SLMplsIlmKey& key(const SLMplsIlmRes* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsIlmRes::_Internal::errstatus(const SLMplsIlmRes* msg) {
  return *msg->errstatus_;
}
const ::service_layer::SLMplsIlmKey&
SLMplsIlmRes::_Internal::key(const SLMplsIlmRes* msg) {
  return *msg->key_;
}
void SLMplsIlmRes::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsIlmRes::SLMplsIlmRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmRes)
}
SLMplsIlmRes::SLMplsIlmRes(const SLMplsIlmRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLMplsIlmKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmRes)
}

void SLMplsIlmRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmRes_sl_5fmpls_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(key_));
}

SLMplsIlmRes::~SLMplsIlmRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
  if (this != internal_default_instance()) delete key_;
}

void SLMplsIlmRes::ArenaDtor(void* object) {
  SLMplsIlmRes* _this = reinterpret_cast< SLMplsIlmRes* >(object);
  (void)_this;
}
void SLMplsIlmRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmRes& SLMplsIlmRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmRes_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLMplsIlmKey Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmRes)
  return target;
}

size_t SLMplsIlmRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmRes)
    MergeFrom(*source);
  }
}

void SLMplsIlmRes::MergeFrom(const SLMplsIlmRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from._internal_key());
  }
}

void SLMplsIlmRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmRes::CopyFrom(const SLMplsIlmRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmRes::IsInitialized() const {
  return true;
}

void SLMplsIlmRes::InternalSwap(SLMplsIlmRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsIlmRes, key_)
      + sizeof(SLMplsIlmRes::key_)
      - PROTOBUF_FIELD_OFFSET(SLMplsIlmRes, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsIlmMsgRsp_default_instance_._instance.get_mutable()->statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsIlmMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLMplsIlmMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsIlmMsgRsp::_Internal::statussummary(const SLMplsIlmMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLMplsIlmMsgRsp::clear_statussummary() {
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLMplsIlmMsgRsp::SLMplsIlmMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmMsgRsp)
}
SLMplsIlmMsgRsp::SLMplsIlmMsgRsp(const SLMplsIlmMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  correlator_ = from.correlator_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmMsgRsp)
}

void SLMplsIlmMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmMsgRsp_sl_5fmpls_2eproto.base);
  ::memset(&statussummary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correlator_) -
      reinterpret_cast<char*>(&statussummary_)) + sizeof(correlator_));
}

SLMplsIlmMsgRsp::~SLMplsIlmMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLMplsIlmMsgRsp::ArenaDtor(void* object) {
  SLMplsIlmMsgRsp* _this = reinterpret_cast< SLMplsIlmMsgRsp* >(object);
  (void)_this;
}
void SLMplsIlmMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmMsgRsp& SLMplsIlmMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  correlator_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus StatusSummary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsIlmRes Results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmMsgRsp)
  return target;
}

size_t SLMplsIlmMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsIlmMsgRsp::MergeFrom(const SLMplsIlmMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
}

void SLMplsIlmMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmMsgRsp::CopyFrom(const SLMplsIlmMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsIlmMsgRsp::InternalSwap(SLMplsIlmMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsIlmMsgRsp, correlator_)
      + sizeof(SLMplsIlmMsgRsp::correlator_)
      - PROTOBUF_FIELD_OFFSET(SLMplsIlmMsgRsp, statussummary_)>(
          reinterpret_cast<char*>(&statussummary_),
          reinterpret_cast<char*>(&other->statussummary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmGetMsg::InitAsDefaultInstance() {
  ::service_layer::_SLMplsIlmGetMsg_default_instance_._instance.get_mutable()->key_ = const_cast< ::service_layer::SLMplsIlmKey*>(
      ::service_layer::SLMplsIlmKey::internal_default_instance());
}
class SLMplsIlmGetMsg::_Internal {
 public:
  static const ::service_layer::SLMplsIlmKey& key(const SLMplsIlmGetMsg* msg);
};

const ::service_layer::SLMplsIlmKey&
SLMplsIlmGetMsg::_Internal::key(const SLMplsIlmGetMsg* msg) {
  return *msg->key_;
}
SLMplsIlmGetMsg::SLMplsIlmGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmGetMsg)
}
SLMplsIlmGetMsg::SLMplsIlmGetMsg(const SLMplsIlmGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLMplsIlmKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmGetMsg)
}

void SLMplsIlmGetMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmGetMsg_sl_5fmpls_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&key_)) + sizeof(getnext_));
}

SLMplsIlmGetMsg::~SLMplsIlmGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLMplsIlmGetMsg::ArenaDtor(void* object) {
  SLMplsIlmGetMsg* _this = reinterpret_cast< SLMplsIlmGetMsg* >(object);
  (void)_this;
}
void SLMplsIlmGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmGetMsg& SLMplsIlmGetMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmGetMsg_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLMplsIlmKey Key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EntriesCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GetNext = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entriescount(), target);
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmGetMsg)
  return target;
}

size_t SLMplsIlmGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entriescount());
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmGetMsg)
    MergeFrom(*source);
  }
}

void SLMplsIlmGetMsg::MergeFrom(const SLMplsIlmGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from._internal_key());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from.getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
}

void SLMplsIlmGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmGetMsg::CopyFrom(const SLMplsIlmGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmGetMsg::IsInitialized() const {
  return true;
}

void SLMplsIlmGetMsg::InternalSwap(SLMplsIlmGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsIlmGetMsg, getnext_)
      + sizeof(SLMplsIlmGetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLMplsIlmGetMsg, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLMplsIlmGetMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLMplsIlmGetMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLMplsIlmGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLMplsIlmGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLMplsIlmGetMsgRsp::_Internal::errstatus(const SLMplsIlmGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLMplsIlmGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLMplsIlmGetMsgRsp::SLMplsIlmGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLMplsIlmGetMsgRsp)
}
SLMplsIlmGetMsgRsp::SLMplsIlmGetMsgRsp(const SLMplsIlmGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(eof_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmGetMsgRsp)
}

void SLMplsIlmGetMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLMplsIlmGetMsgRsp_sl_5fmpls_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLMplsIlmGetMsgRsp::~SLMplsIlmGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLMplsIlmGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLMplsIlmGetMsgRsp::ArenaDtor(void* object) {
  SLMplsIlmGetMsgRsp* _this = reinterpret_cast< SLMplsIlmGetMsgRsp* >(object);
  (void)_this;
}
void SLMplsIlmGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLMplsIlmGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLMplsIlmGetMsgRsp& SLMplsIlmGetMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLMplsIlmGetMsgRsp_sl_5fmpls_2eproto.base);
  return *internal_default_instance();
}


void SLMplsIlmGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(eof_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLMplsIlmGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Eof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLMplsIlmEntry Entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLMplsIlmGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // bool Eof = 2;
  if (this->eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmGetMsgRsp)
  return target;
}

size_t SLMplsIlmGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // bool Eof = 2;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLMplsIlmGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLMplsIlmGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsIlmGetMsgRsp::MergeFrom(const SLMplsIlmGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
}

void SLMplsIlmGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmGetMsgRsp::CopyFrom(const SLMplsIlmGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmGetMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsIlmGetMsgRsp::InternalSwap(SLMplsIlmGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLMplsIlmGetMsgRsp, eof_)
      + sizeof(SLMplsIlmGetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLMplsIlmGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLMplsIlmGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsLabelBlockKey* Arena::CreateMaybeMessage< ::service_layer::SLMplsLabelBlockKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsLabelBlockKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsLabelBlockMsg* Arena::CreateMaybeMessage< ::service_layer::SLMplsLabelBlockMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsLabelBlockMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsLabelBlockMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLMplsLabelBlockMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsLabelBlockMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsLabelBlockMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsLabelBlockMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsLabelBlockMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsLabelBlockGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLMplsLabelBlockGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsLabelBlockGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsLabelBlockGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsLabelBlockGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsLabelBlockGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SlMplsReg* Arena::CreateMaybeMessage< ::service_layer::SlMplsReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SlMplsReg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLMplsRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLMplsGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsGetStatsMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsGetStatsMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsGetStatsMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsPath* Arena::CreateMaybeMessage< ::service_layer::SLMplsPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsPath >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmKey* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsCos* Arena::CreateMaybeMessage< ::service_layer::SLMplsCos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsCos >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmEntry* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmMsg* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmRes* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLMplsIlmGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLMplsIlmGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLMplsIlmGetMsgRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
