// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_mpls.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sl_mpls.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_layer {
class SLMplsLabelBlockKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsLabelBlockKey> {
} _SLMplsLabelBlockKey_default_instance_;
class SLMplsLabelBlockMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsLabelBlockMsg> {
} _SLMplsLabelBlockMsg_default_instance_;
class SLMplsLabelBlockMsgResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsLabelBlockMsgRes> {
} _SLMplsLabelBlockMsgRes_default_instance_;
class SLMplsLabelBlockMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsLabelBlockMsgRsp> {
} _SLMplsLabelBlockMsgRsp_default_instance_;
class SLMplsLabelBlockGetMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsLabelBlockGetMsg> {
} _SLMplsLabelBlockGetMsg_default_instance_;
class SLMplsLabelBlockGetMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsLabelBlockGetMsgRsp> {
} _SLMplsLabelBlockGetMsgRsp_default_instance_;
class SlMplsRegDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SlMplsReg> {
} _SlMplsReg_default_instance_;
class SLMplsRegMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsRegMsg> {
} _SLMplsRegMsg_default_instance_;
class SLMplsRegMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsRegMsgRsp> {
} _SLMplsRegMsgRsp_default_instance_;
class SLMplsGetMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsGetMsg> {
} _SLMplsGetMsg_default_instance_;
class SLMplsGetMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsGetMsgRsp> {
} _SLMplsGetMsgRsp_default_instance_;
class SLMplsGetStatsMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsGetStatsMsgRsp> {
} _SLMplsGetStatsMsgRsp_default_instance_;
class SLMplsPathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsPath> {
} _SLMplsPath_default_instance_;
class SLMplsIlmKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmKey> {
} _SLMplsIlmKey_default_instance_;
class SLMplsCosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsCos> {
  public:
  ::google::protobuf::uint32 exp_;
  bool defaultelsppath_;
  ::google::protobuf::uint32 forwardingclass_;
} _SLMplsCos_default_instance_;
class SLMplsIlmEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmEntry> {
} _SLMplsIlmEntry_default_instance_;
class SLMplsIlmMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmMsg> {
} _SLMplsIlmMsg_default_instance_;
class SLMplsIlmResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmRes> {
} _SLMplsIlmRes_default_instance_;
class SLMplsIlmMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmMsgRsp> {
} _SLMplsIlmMsgRsp_default_instance_;
class SLMplsIlmGetMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmGetMsg> {
} _SLMplsIlmGetMsg_default_instance_;
class SLMplsIlmGetMsgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLMplsIlmGetMsgRsp> {
} _SLMplsIlmGetMsgRsp_default_instance_;

namespace protobuf_sl_5fmpls_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, startlabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, labelblocksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, blocktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, clientname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, oper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, mplsblocks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, errstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, statussummary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, entriescount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, getnext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, eof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, errstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlMplsReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlMplsReg, purgeintervalseconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsg, oper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsg, regmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsgRsp, errstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, errstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxlabelsperblock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxlabelblocksperlabelblockmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, minstartlabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, labeltablesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxilmperilmmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxpathsperilm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, errstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, labelblockcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, ilmcount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, nexthopaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, nexthopinterface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, loadmetric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, vrfname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, pathid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, protectedpathbitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, labelstack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, remoteaddress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmKey, locallabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmKey, slmplscosval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsCos, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsCos, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLMplsCos_default_instance_), exp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLMplsCos_default_instance_), defaultelsppath_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SLMplsCos_default_instance_), forwardingclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsCos, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, oper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, correlator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, mplsilms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, errstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, correlator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, statussummary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, correlator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, entriescount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, getnext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, correlator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, eof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, errstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, entries_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SLMplsLabelBlockKey)},
  { 8, -1, sizeof(SLMplsLabelBlockMsg)},
  { 14, -1, sizeof(SLMplsLabelBlockMsgRes)},
  { 20, -1, sizeof(SLMplsLabelBlockMsgRsp)},
  { 26, -1, sizeof(SLMplsLabelBlockGetMsg)},
  { 33, -1, sizeof(SLMplsLabelBlockGetMsgRsp)},
  { 40, -1, sizeof(SlMplsReg)},
  { 45, -1, sizeof(SLMplsRegMsg)},
  { 51, -1, sizeof(SLMplsRegMsgRsp)},
  { 56, -1, sizeof(SLMplsGetMsg)},
  { 60, -1, sizeof(SLMplsGetMsgRsp)},
  { 71, -1, sizeof(SLMplsGetStatsMsgRsp)},
  { 78, -1, sizeof(SLMplsPath)},
  { 91, -1, sizeof(SLMplsIlmKey)},
  { 97, -1, sizeof(SLMplsCos)},
  { 105, -1, sizeof(SLMplsIlmEntry)},
  { 111, -1, sizeof(SLMplsIlmMsg)},
  { 118, -1, sizeof(SLMplsIlmRes)},
  { 124, -1, sizeof(SLMplsIlmMsgRsp)},
  { 131, -1, sizeof(SLMplsIlmGetMsg)},
  { 139, -1, sizeof(SLMplsIlmGetMsgRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsLabelBlockKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsLabelBlockMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsLabelBlockMsgRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsLabelBlockMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsLabelBlockGetMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsLabelBlockGetMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SlMplsReg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsRegMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsRegMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsGetMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsGetMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsGetStatsMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsCos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmMsgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmGetMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLMplsIlmGetMsgRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sl_mpls.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace

void TableStruct::Shutdown() {
  _SLMplsLabelBlockKey_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SLMplsLabelBlockMsg_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SLMplsLabelBlockMsgRes_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SLMplsLabelBlockMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SLMplsLabelBlockGetMsg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SLMplsLabelBlockGetMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SlMplsReg_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SLMplsRegMsg_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SLMplsRegMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SLMplsGetMsg_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SLMplsGetMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SLMplsGetStatsMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SLMplsPath_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SLMplsIlmKey_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SLMplsCos_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SLMplsIlmEntry_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SLMplsIlmMsg_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SLMplsIlmRes_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SLMplsIlmMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SLMplsIlmGetMsg_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SLMplsIlmGetMsgRsp_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::service_layer::protobuf_sl_5fcommon_5ftypes_2eproto::InitDefaults();
  _SLMplsLabelBlockKey_default_instance_.DefaultConstruct();
  _SLMplsLabelBlockMsg_default_instance_.DefaultConstruct();
  _SLMplsLabelBlockMsgRes_default_instance_.DefaultConstruct();
  _SLMplsLabelBlockMsgRsp_default_instance_.DefaultConstruct();
  _SLMplsLabelBlockGetMsg_default_instance_.DefaultConstruct();
  _SLMplsLabelBlockGetMsgRsp_default_instance_.DefaultConstruct();
  _SlMplsReg_default_instance_.DefaultConstruct();
  _SLMplsRegMsg_default_instance_.DefaultConstruct();
  _SLMplsRegMsgRsp_default_instance_.DefaultConstruct();
  _SLMplsGetMsg_default_instance_.DefaultConstruct();
  _SLMplsGetMsgRsp_default_instance_.DefaultConstruct();
  _SLMplsGetStatsMsgRsp_default_instance_.DefaultConstruct();
  _SLMplsPath_default_instance_.DefaultConstruct();
  _SLMplsIlmKey_default_instance_.DefaultConstruct();
  _SLMplsCos_default_instance_.DefaultConstruct();
  _SLMplsIlmEntry_default_instance_.DefaultConstruct();
  _SLMplsIlmMsg_default_instance_.DefaultConstruct();
  _SLMplsIlmRes_default_instance_.DefaultConstruct();
  _SLMplsIlmMsgRsp_default_instance_.DefaultConstruct();
  _SLMplsIlmGetMsg_default_instance_.DefaultConstruct();
  _SLMplsIlmGetMsgRsp_default_instance_.DefaultConstruct();
  _SLMplsLabelBlockMsgRes_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsLabelBlockMsgRes_default_instance_.get_mutable()->key_ = const_cast< ::service_layer::SLMplsLabelBlockKey*>(
      ::service_layer::SLMplsLabelBlockKey::internal_default_instance());
  _SLMplsLabelBlockMsgRsp_default_instance_.get_mutable()->statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsLabelBlockGetMsg_default_instance_.get_mutable()->key_ = const_cast< ::service_layer::SLMplsLabelBlockKey*>(
      ::service_layer::SLMplsLabelBlockKey::internal_default_instance());
  _SLMplsLabelBlockGetMsgRsp_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsRegMsg_default_instance_.get_mutable()->regmsg_ = const_cast< ::service_layer::SlMplsReg*>(
      ::service_layer::SlMplsReg::internal_default_instance());
  _SLMplsRegMsgRsp_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsGetMsgRsp_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsGetStatsMsgRsp_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsPath_default_instance_.get_mutable()->nexthopaddress_ = const_cast< ::service_layer::SLIpAddress*>(
      ::service_layer::SLIpAddress::internal_default_instance());
  _SLMplsPath_default_instance_.get_mutable()->nexthopinterface_ = const_cast< ::service_layer::SLInterface*>(
      ::service_layer::SLInterface::internal_default_instance());
  _SLMplsIlmKey_default_instance_.get_mutable()->slmplscosval_ = const_cast< ::service_layer::SLMplsCos*>(
      ::service_layer::SLMplsCos::internal_default_instance());
  _SLMplsCos_default_instance_.exp_ = 0u;
  _SLMplsCos_default_instance_.defaultelsppath_ = false;
  _SLMplsCos_default_instance_.forwardingclass_ = 0u;
  _SLMplsIlmEntry_default_instance_.get_mutable()->key_ = const_cast< ::service_layer::SLMplsIlmKey*>(
      ::service_layer::SLMplsIlmKey::internal_default_instance());
  _SLMplsIlmRes_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsIlmRes_default_instance_.get_mutable()->key_ = const_cast< ::service_layer::SLMplsIlmKey*>(
      ::service_layer::SLMplsIlmKey::internal_default_instance());
  _SLMplsIlmMsgRsp_default_instance_.get_mutable()->statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
  _SLMplsIlmGetMsg_default_instance_.get_mutable()->key_ = const_cast< ::service_layer::SLMplsIlmKey*>(
      ::service_layer::SLMplsIlmKey::internal_default_instance());
  _SLMplsIlmGetMsgRsp_default_instance_.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rsl_mpls.proto\022\rservice_layer\032\025sl_commo"
      "n_types.proto\"\215\001\n\023SLMplsLabelBlockKey\022\022\n"
      "\nStartLabel\030\001 \001(\r\022\026\n\016LabelBlockSize\030\002 \001("
      "\r\0226\n\tBlockType\030\003 \001(\0162#.service_layer.SLM"
      "plsLabelBlockType\022\022\n\nClientName\030\004 \001(\t\"v\n"
      "\023SLMplsLabelBlockMsg\022\'\n\004Oper\030\001 \001(\0162\031.ser"
      "vice_layer.SLObjectOp\0226\n\nMplsBlocks\030\002 \003("
      "\0132\".service_layer.SLMplsLabelBlockKey\"z\n"
      "\026SLMplsLabelBlockMsgRes\022/\n\tErrStatus\030\001 \001"
      "(\0132\034.service_layer.SLErrorStatus\022/\n\003Key\030"
      "\002 \001(\0132\".service_layer.SLMplsLabelBlockKe"
      "y\"\205\001\n\026SLMplsLabelBlockMsgRsp\0223\n\rStatusSu"
      "mmary\030\001 \001(\0132\034.service_layer.SLErrorStatu"
      "s\0226\n\007Results\030\002 \003(\0132%.service_layer.SLMpl"
      "sLabelBlockMsgRes\"p\n\026SLMplsLabelBlockGet"
      "Msg\022/\n\003Key\030\001 \001(\0132\".service_layer.SLMplsL"
      "abelBlockKey\022\024\n\014EntriesCount\030\002 \001(\r\022\017\n\007Ge"
      "tNext\030\003 \001(\010\"\216\001\n\031SLMplsLabelBlockGetMsgRs"
      "p\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001(\0132\034.serv"
      "ice_layer.SLErrorStatus\0223\n\007Entries\030\003 \003(\013"
      "2\".service_layer.SLMplsLabelBlockKey\")\n\t"
      "SlMplsReg\022\034\n\024PurgeIntervalSeconds\030\001 \001(\r\""
      "^\n\014SLMplsRegMsg\022$\n\004Oper\030\001 \001(\0162\026.service_"
      "layer.SLRegOp\022(\n\006RegMsg\030\002 \001(\0132\030.service_"
      "layer.SlMplsReg\"B\n\017SLMplsRegMsgRsp\022/\n\tEr"
      "rStatus\030\001 \001(\0132\034.service_layer.SLErrorSta"
      "tus\"\016\n\014SLMplsGetMsg\"\345\001\n\017SLMplsGetMsgRsp\022"
      "/\n\tErrStatus\030\001 \001(\0132\034.service_layer.SLErr"
      "orStatus\022\031\n\021MaxLabelsPerBlock\030\002 \001(\r\022&\n\036M"
      "axLabelblocksPerLabelblockmsg\030\003 \001(\r\022\025\n\rM"
      "inStartLabel\030\004 \001(\r\022\026\n\016LabelTableSize\030\005 \001"
      "(\r\022\027\n\017MaxIlmPerIlmmsg\030\006 \001(\r\022\026\n\016MaxPathsP"
      "erIlm\030\007 \001(\r\"r\n\024SLMplsGetStatsMsgRsp\022/\n\tE"
      "rrStatus\030\001 \001(\0132\034.service_layer.SLErrorSt"
      "atus\022\027\n\017LabelBlockCount\030\002 \001(\r\022\020\n\010IlmCoun"
      "t\030\003 \001(\r\"\275\002\n\nSLMplsPath\0222\n\016NexthopAddress"
      "\030\001 \001(\0132\032.service_layer.SLIpAddress\0224\n\020Ne"
      "xthopInterface\030\002 \001(\0132\032.service_layer.SLI"
      "nterface\022\022\n\nLoadMetric\030\003 \001(\r\022\017\n\007VrfName\030"
      "\004 \001(\t\022,\n\006Action\030\005 \001(\0162\034.service_layer.Sl"
      "LabelAction\022\016\n\006PathId\030\006 \001(\r\022\033\n\023Protected"
      "PathBitmap\030\007 \003(\004\022\022\n\nLabelStack\030\010 \003(\r\0221\n\r"
      "RemoteAddress\030\t \003(\0132\032.service_layer.SLIp"
      "Address\"R\n\014SLMplsIlmKey\022\022\n\nLocalLabel\030\001 "
      "\001(\r\022.\n\014SlMplsCosVal\030\002 \001(\0132\030.service_laye"
      "r.SLMplsCos\"Y\n\tSLMplsCos\022\r\n\003Exp\030\001 \001(\rH\000\022"
      "\031\n\017DefaultElspPath\030\002 \001(\010H\000\022\031\n\017Forwarding"
      "Class\030\003 \001(\rH\000B\007\n\005value\"d\n\016SLMplsIlmEntry"
      "\022(\n\003Key\030\001 \001(\0132\033.service_layer.SLMplsIlmK"
      "ey\022(\n\005Paths\030\002 \003(\0132\031.service_layer.SLMpls"
      "Path\"|\n\014SLMplsIlmMsg\022\'\n\004Oper\030\001 \001(\0162\031.ser"
      "vice_layer.SLObjectOp\022\022\n\nCorrelator\030\002 \001("
      "\004\022/\n\010MplsIlms\030\003 \003(\0132\035.service_layer.SLMp"
      "lsIlmEntry\"i\n\014SLMplsIlmRes\022/\n\tErrStatus\030"
      "\001 \001(\0132\034.service_layer.SLErrorStatus\022(\n\003K"
      "ey\030\002 \001(\0132\033.service_layer.SLMplsIlmKey\"\210\001"
      "\n\017SLMplsIlmMsgRsp\022\022\n\nCorrelator\030\001 \001(\004\0223\n"
      "\rStatusSummary\030\002 \001(\0132\034.service_layer.SLE"
      "rrorStatus\022,\n\007Results\030\003 \003(\0132\033.service_la"
      "yer.SLMplsIlmRes\"v\n\017SLMplsIlmGetMsg\022\022\n\nC"
      "orrelator\030\001 \001(\004\022(\n\003Key\030\002 \001(\0132\033.service_l"
      "ayer.SLMplsIlmKey\022\024\n\014EntriesCount\030\003 \001(\r\022"
      "\017\n\007GetNext\030\004 \001(\010\"\226\001\n\022SLMplsIlmGetMsgRsp\022"
      "\022\n\nCorrelator\030\001 \001(\004\022\013\n\003Eof\030\002 \001(\010\022/\n\tErrS"
      "tatus\030\003 \001(\0132\034.service_layer.SLErrorStatu"
      "s\022.\n\007Entries\030\004 \003(\0132\035.service_layer.SLMpl"
      "sIlmEntry*\342\001\n\rSlLabelAction\022\034\n\030SL_LABEL_"
      "ACTION_RESERVED\020\000\022\030\n\024SL_LABEL_ACTION_SWA"
      "P\020\001\022#\n\037SL_LABEL_ACTION_POP_AND_FORWARD\020\002"
      "\022\'\n#SL_LABEL_ACTION_POP_AND_LOOKUP_IPV4\020"
      "\003\022\'\n#SL_LABEL_ACTION_POP_AND_LOOKUP_IPV6"
      "\020\004\022\"\n\036SL_LABEL_ACTION_POP_AND_LOOKUP\020\005*\202"
      "\001\n\024SLMplsLabelBlockType\022%\n!SL_MPLS_LABEL"
      "_BLOCK_TYPE_RESERVED\020\000\022!\n\035SL_MPLS_LABEL_"
      "BLOCK_TYPE_SRGB\020\001\022 \n\034SL_MPLS_LABEL_BLOCK"
      "_TYPE_CBF\020\0022\221\006\n\nSLMplsOper\022J\n\013SLMplsRegO"
      "p\022\033.service_layer.SLMplsRegMsg\032\036.service"
      "_layer.SLMplsRegMsgRsp\022H\n\tSLMplsGet\022\033.se"
      "rvice_layer.SLMplsGetMsg\032\036.service_layer"
      ".SLMplsGetMsgRsp\022R\n\016SLMplsGetStats\022\033.ser"
      "vice_layer.SLMplsGetMsg\032#.service_layer."
      "SLMplsGetStatsMsgRsp\022_\n\022SLMplsLabelBlock"
      "Op\022\".service_layer.SLMplsLabelBlockMsg\032%"
      ".service_layer.SLMplsLabelBlockMsgRsp\022f\n"
      "\023SLMplsLabelBlockGet\022%.service_layer.SLM"
      "plsLabelBlockGetMsg\032(.service_layer.SLMp"
      "lsLabelBlockGetMsgRsp\022J\n\013SLMplsIlmOp\022\033.s"
      "ervice_layer.SLMplsIlmMsg\032\036.service_laye"
      "r.SLMplsIlmMsgRsp\022Q\n\014SLMplsIlmGet\022\036.serv"
      "ice_layer.SLMplsIlmGetMsg\032!.service_laye"
      "r.SLMplsIlmGetMsgRsp\022T\n\021SLMplsIlmOpStrea"
      "m\022\033.service_layer.SLMplsIlmMsg\032\036.service"
      "_layer.SLMplsIlmMsgRsp(\0010\001\022[\n\022SLMplsIlmG"
      "etStream\022\036.service_layer.SLMplsIlmGetMsg"
      "\032!.service_layer.SLMplsIlmGetMsgRsp(\0010\001b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl_mpls.proto", &protobuf_RegisterTypes);
  ::service_layer::protobuf_sl_5fcommon_5ftypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sl_5fmpls_2eproto

const ::google::protobuf::EnumDescriptor* SlLabelAction_descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_enum_descriptors[0];
}
bool SlLabelAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLMplsLabelBlockType_descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_enum_descriptors[1];
}
bool SLMplsLabelBlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockKey::kStartLabelFieldNumber;
const int SLMplsLabelBlockKey::kLabelBlockSizeFieldNumber;
const int SLMplsLabelBlockKey::kBlockTypeFieldNumber;
const int SLMplsLabelBlockKey::kClientNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockKey::SLMplsLabelBlockKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockKey)
}
SLMplsLabelBlockKey::SLMplsLabelBlockKey(const SLMplsLabelBlockKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  ::memcpy(&startlabel_, &from.startlabel_,
    reinterpret_cast<char*>(&blocktype_) -
    reinterpret_cast<char*>(&startlabel_) + sizeof(blocktype_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockKey)
}

void SLMplsLabelBlockKey::SharedCtor() {
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startlabel_, 0, reinterpret_cast<char*>(&blocktype_) -
    reinterpret_cast<char*>(&startlabel_) + sizeof(blocktype_));
  _cached_size_ = 0;
}

SLMplsLabelBlockKey::~SLMplsLabelBlockKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockKey)
  SharedDtor();
}

void SLMplsLabelBlockKey::SharedDtor() {
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SLMplsLabelBlockKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockKey::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[0].descriptor;
}

const SLMplsLabelBlockKey& SLMplsLabelBlockKey::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsLabelBlockKey* SLMplsLabelBlockKey::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockKey* n = new SLMplsLabelBlockKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockKey)
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startlabel_, 0, reinterpret_cast<char*>(&blocktype_) -
    reinterpret_cast<char*>(&startlabel_) + sizeof(blocktype_));
}

bool SLMplsLabelBlockKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 StartLabel = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startlabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LabelBlockSize = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelblocksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLMplsLabelBlockType BlockType = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blocktype(static_cast< ::service_layer::SLMplsLabelBlockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientName = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "service_layer.SLMplsLabelBlockKey.ClientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockKey)
  return false;
#undef DO_
}

void SLMplsLabelBlockKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockKey)
  // uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startlabel(), output);
  }

  // uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelblocksize(), output);
  }

  // .service_layer.SLMplsLabelBlockType BlockType = 3;
  if (this->blocktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->blocktype(), output);
  }

  // string ClientName = 4;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsLabelBlockKey.ClientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientname(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockKey)
}

::google::protobuf::uint8* SLMplsLabelBlockKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockKey)
  // uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startlabel(), target);
  }

  // uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelblocksize(), target);
  }

  // .service_layer.SLMplsLabelBlockType BlockType = 3;
  if (this->blocktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->blocktype(), target);
  }

  // string ClientName = 4;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsLabelBlockKey.ClientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockKey)
  return target;
}

size_t SLMplsLabelBlockKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockKey)
  size_t total_size = 0;

  // string ClientName = 4;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startlabel());
  }

  // uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelblocksize());
  }

  // .service_layer.SLMplsLabelBlockType BlockType = 3;
  if (this->blocktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocktype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockKey)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockKey::MergeFrom(const SLMplsLabelBlockKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.startlabel() != 0) {
    set_startlabel(from.startlabel());
  }
  if (from.labelblocksize() != 0) {
    set_labelblocksize(from.labelblocksize());
  }
  if (from.blocktype() != 0) {
    set_blocktype(from.blocktype());
  }
}

void SLMplsLabelBlockKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockKey::CopyFrom(const SLMplsLabelBlockKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockKey::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockKey::Swap(SLMplsLabelBlockKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockKey::InternalSwap(SLMplsLabelBlockKey* other) {
  clientname_.Swap(&other->clientname_);
  std::swap(startlabel_, other->startlabel_);
  std::swap(labelblocksize_, other->labelblocksize_);
  std::swap(blocktype_, other->blocktype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockKey::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockKey

// uint32 StartLabel = 1;
void SLMplsLabelBlockKey::clear_startlabel() {
  startlabel_ = 0u;
}
::google::protobuf::uint32 SLMplsLabelBlockKey::startlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.StartLabel)
  return startlabel_;
}
void SLMplsLabelBlockKey::set_startlabel(::google::protobuf::uint32 value) {
  
  startlabel_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.StartLabel)
}

// uint32 LabelBlockSize = 2;
void SLMplsLabelBlockKey::clear_labelblocksize() {
  labelblocksize_ = 0u;
}
::google::protobuf::uint32 SLMplsLabelBlockKey::labelblocksize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.LabelBlockSize)
  return labelblocksize_;
}
void SLMplsLabelBlockKey::set_labelblocksize(::google::protobuf::uint32 value) {
  
  labelblocksize_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.LabelBlockSize)
}

// .service_layer.SLMplsLabelBlockType BlockType = 3;
void SLMplsLabelBlockKey::clear_blocktype() {
  blocktype_ = 0;
}
::service_layer::SLMplsLabelBlockType SLMplsLabelBlockKey::blocktype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.BlockType)
  return static_cast< ::service_layer::SLMplsLabelBlockType >(blocktype_);
}
void SLMplsLabelBlockKey::set_blocktype(::service_layer::SLMplsLabelBlockType value) {
  
  blocktype_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.BlockType)
}

// string ClientName = 4;
void SLMplsLabelBlockKey::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SLMplsLabelBlockKey::clientname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.ClientName)
  return clientname_.GetNoArena();
}
void SLMplsLabelBlockKey::set_clientname(const ::std::string& value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.ClientName)
}
#if LANG_CXX11
void SLMplsLabelBlockKey::set_clientname(::std::string&& value) {
  
  clientname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLMplsLabelBlockKey.ClientName)
}
#endif
void SLMplsLabelBlockKey::set_clientname(const char* value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLMplsLabelBlockKey.ClientName)
}
void SLMplsLabelBlockKey::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLMplsLabelBlockKey.ClientName)
}
::std::string* SLMplsLabelBlockKey::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockKey.ClientName)
  return clientname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SLMplsLabelBlockKey::release_clientname() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockKey.ClientName)
  
  return clientname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SLMplsLabelBlockKey::set_allocated_clientname(::std::string* clientname) {
  if (clientname != NULL) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockKey.ClientName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockMsg::kOperFieldNumber;
const int SLMplsLabelBlockMsg::kMplsBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockMsg::SLMplsLabelBlockMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockMsg)
}
SLMplsLabelBlockMsg::SLMplsLabelBlockMsg(const SLMplsLabelBlockMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mplsblocks_(from.mplsblocks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsg)
}

void SLMplsLabelBlockMsg::SharedCtor() {
  oper_ = 0;
  _cached_size_ = 0;
}

SLMplsLabelBlockMsg::~SLMplsLabelBlockMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsg)
  SharedDtor();
}

void SLMplsLabelBlockMsg::SharedDtor() {
}

void SLMplsLabelBlockMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[1].descriptor;
}

const SLMplsLabelBlockMsg& SLMplsLabelBlockMsg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsLabelBlockMsg* SLMplsLabelBlockMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockMsg* n = new SLMplsLabelBlockMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockMsg)
  mplsblocks_.Clear();
  oper_ = 0;
}

bool SLMplsLabelBlockMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLObjectOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mplsblocks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockMsg)
  return false;
#undef DO_
}

void SLMplsLabelBlockMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockMsg)
  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  for (unsigned int i = 0, n = this->mplsblocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mplsblocks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockMsg)
}

::google::protobuf::uint8* SLMplsLabelBlockMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsg)
  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  for (unsigned int i = 0, n = this->mplsblocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mplsblocks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsg)
  return target;
}

size_t SLMplsLabelBlockMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockMsg)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  {
    unsigned int count = this->mplsblocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mplsblocks(i));
    }
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockMsg)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsg::MergeFrom(const SLMplsLabelBlockMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mplsblocks_.MergeFrom(from.mplsblocks_);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLMplsLabelBlockMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsg::CopyFrom(const SLMplsLabelBlockMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsg::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockMsg::Swap(SLMplsLabelBlockMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockMsg::InternalSwap(SLMplsLabelBlockMsg* other) {
  mplsblocks_.UnsafeArenaSwap(&other->mplsblocks_);
  std::swap(oper_, other->oper_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockMsg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockMsg

// .service_layer.SLObjectOp Oper = 1;
void SLMplsLabelBlockMsg::clear_oper() {
  oper_ = 0;
}
::service_layer::SLObjectOp SLMplsLabelBlockMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsg.Oper)
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
void SLMplsLabelBlockMsg::set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockMsg.Oper)
}

// repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
int SLMplsLabelBlockMsg::mplsblocks_size() const {
  return mplsblocks_.size();
}
void SLMplsLabelBlockMsg::clear_mplsblocks() {
  mplsblocks_.Clear();
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsg::mplsblocks(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Get(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::mutable_mplsblocks(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Mutable(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::add_mplsblocks() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
SLMplsLabelBlockMsg::mutable_mplsblocks() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return &mplsblocks_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
SLMplsLabelBlockMsg::mplsblocks() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockMsgRes::kErrStatusFieldNumber;
const int SLMplsLabelBlockMsgRes::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockMsgRes::SLMplsLabelBlockMsgRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockMsgRes)
}
SLMplsLabelBlockMsgRes::SLMplsLabelBlockMsgRes(const SLMplsLabelBlockMsgRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::service_layer::SLMplsLabelBlockKey(*from.key_);
  } else {
    key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsgRes)
}

void SLMplsLabelBlockMsgRes::SharedCtor() {
  ::memset(&errstatus_, 0, reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&errstatus_) + sizeof(key_));
  _cached_size_ = 0;
}

SLMplsLabelBlockMsgRes::~SLMplsLabelBlockMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsgRes)
  SharedDtor();
}

void SLMplsLabelBlockMsgRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void SLMplsLabelBlockMsgRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsgRes::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[2].descriptor;
}

const SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRes::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRes::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockMsgRes* n = new SLMplsLabelBlockMsgRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockMsgRes)
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}

bool SLMplsLabelBlockMsgRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockMsgRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLMplsLabelBlockKey Key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockMsgRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockMsgRes)
  return false;
#undef DO_
}

void SLMplsLabelBlockMsgRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockMsgRes)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockMsgRes)
}

::google::protobuf::uint8* SLMplsLabelBlockMsgRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsgRes)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->errstatus_, false, target);
  }

  // .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsgRes)
  return target;
}

size_t SLMplsLabelBlockMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockMsgRes)
  size_t total_size = 0;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockMsgRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockMsgRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockMsgRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockMsgRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockMsgRes)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsgRes::MergeFrom(const SLMplsLabelBlockMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsLabelBlockKey::MergeFrom(from.key());
  }
}

void SLMplsLabelBlockMsgRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsgRes::CopyFrom(const SLMplsLabelBlockMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsgRes::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockMsgRes::Swap(SLMplsLabelBlockMsgRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockMsgRes::InternalSwap(SLMplsLabelBlockMsgRes* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(key_, other->key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockMsgRes::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockMsgRes

// .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsLabelBlockMsgRes::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsLabelBlockMsgRes::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsLabelBlockMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
}

// .service_layer.SLMplsLabelBlockKey Key = 2;
bool SLMplsLabelBlockMsgRes::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void SLMplsLabelBlockMsgRes::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsgRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRes.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLMplsLabelBlockKey::internal_default_instance();
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsLabelBlockKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRes.Key)
  return key_;
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockMsgRes.Key)
  
  ::service_layer::SLMplsLabelBlockKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsLabelBlockMsgRes::set_allocated_key(::service_layer::SLMplsLabelBlockKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRes.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockMsgRsp::kStatusSummaryFieldNumber;
const int SLMplsLabelBlockMsgRsp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockMsgRsp::SLMplsLabelBlockMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockMsgRsp)
}
SLMplsLabelBlockMsgRsp::SLMplsLabelBlockMsgRsp(const SLMplsLabelBlockMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsgRsp)
}

void SLMplsLabelBlockMsgRsp::SharedCtor() {
  statussummary_ = NULL;
  _cached_size_ = 0;
}

SLMplsLabelBlockMsgRsp::~SLMplsLabelBlockMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsgRsp)
  SharedDtor();
}

void SLMplsLabelBlockMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statussummary_;
  }
}

void SLMplsLabelBlockMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[3].descriptor;
}

const SLMplsLabelBlockMsgRsp& SLMplsLabelBlockMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsLabelBlockMsgRsp* SLMplsLabelBlockMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockMsgRsp* n = new SLMplsLabelBlockMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockMsgRsp)
  results_.Clear();
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) {
    delete statussummary_;
  }
  statussummary_ = NULL;
}

bool SLMplsLabelBlockMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statussummary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockMsgRsp)
  return false;
#undef DO_
}

void SLMplsLabelBlockMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockMsgRsp)
  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statussummary_, output);
  }

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockMsgRsp)
}

::google::protobuf::uint8* SLMplsLabelBlockMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsgRsp)
  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->statussummary_, false, target);
  }

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsgRsp)
  return target;
}

size_t SLMplsLabelBlockMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockMsgRsp)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statussummary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsgRsp::MergeFrom(const SLMplsLabelBlockMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from.statussummary());
  }
}

void SLMplsLabelBlockMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsgRsp::CopyFrom(const SLMplsLabelBlockMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockMsgRsp::Swap(SLMplsLabelBlockMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockMsgRsp::InternalSwap(SLMplsLabelBlockMsgRsp* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(statussummary_, other->statussummary_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockMsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
bool SLMplsLabelBlockMsgRsp::has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != NULL;
}
void SLMplsLabelBlockMsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  return statussummary_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
void SLMplsLabelBlockMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
}

// repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
int SLMplsLabelBlockMsgRsp::results_size() const {
  return results_.size();
}
void SLMplsLabelBlockMsgRsp::clear_results() {
  results_.Clear();
}
const ::service_layer::SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Get(index);
}
::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Mutable(index);
}
::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >*
SLMplsLabelBlockMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >&
SLMplsLabelBlockMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockGetMsg::kKeyFieldNumber;
const int SLMplsLabelBlockGetMsg::kEntriesCountFieldNumber;
const int SLMplsLabelBlockGetMsg::kGetNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockGetMsg::SLMplsLabelBlockGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockGetMsg)
}
SLMplsLabelBlockGetMsg::SLMplsLabelBlockGetMsg(const SLMplsLabelBlockGetMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::service_layer::SLMplsLabelBlockKey(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&entriescount_, &from.entriescount_,
    reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&entriescount_) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockGetMsg)
}

void SLMplsLabelBlockGetMsg::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&key_) + sizeof(getnext_));
  _cached_size_ = 0;
}

SLMplsLabelBlockGetMsg::~SLMplsLabelBlockGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockGetMsg)
  SharedDtor();
}

void SLMplsLabelBlockGetMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void SLMplsLabelBlockGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockGetMsg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[4].descriptor;
}

const SLMplsLabelBlockGetMsg& SLMplsLabelBlockGetMsg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsLabelBlockGetMsg* SLMplsLabelBlockGetMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockGetMsg* n = new SLMplsLabelBlockGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockGetMsg)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  ::memset(&entriescount_, 0, reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&entriescount_) + sizeof(getnext_));
}

bool SLMplsLabelBlockGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLMplsLabelBlockKey Key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 EntriesCount = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entriescount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GetNext = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getnext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockGetMsg)
  return false;
#undef DO_
}

void SLMplsLabelBlockGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockGetMsg)
  // .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entriescount(), output);
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->getnext(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockGetMsg)
}

::google::protobuf::uint8* SLMplsLabelBlockGetMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockGetMsg)
  // .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entriescount(), target);
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->getnext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockGetMsg)
  return target;
}

size_t SLMplsLabelBlockGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockGetMsg)
  size_t total_size = 0;

  // .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entriescount());
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockGetMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockGetMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockGetMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockGetMsg)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockGetMsg::MergeFrom(const SLMplsLabelBlockGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsLabelBlockKey::MergeFrom(from.key());
  }
  if (from.entriescount() != 0) {
    set_entriescount(from.entriescount());
  }
  if (from.getnext() != 0) {
    set_getnext(from.getnext());
  }
}

void SLMplsLabelBlockGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockGetMsg::CopyFrom(const SLMplsLabelBlockGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockGetMsg::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockGetMsg::Swap(SLMplsLabelBlockGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockGetMsg::InternalSwap(SLMplsLabelBlockGetMsg* other) {
  std::swap(key_, other->key_);
  std::swap(entriescount_, other->entriescount_);
  std::swap(getnext_, other->getnext_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockGetMsg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockGetMsg

// .service_layer.SLMplsLabelBlockKey Key = 1;
bool SLMplsLabelBlockGetMsg::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void SLMplsLabelBlockGetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLMplsLabelBlockKey::internal_default_instance();
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsLabelBlockKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsg.Key)
  return key_;
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockGetMsg.Key)
  
  ::service_layer::SLMplsLabelBlockKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsLabelBlockGetMsg::set_allocated_key(::service_layer::SLMplsLabelBlockKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockGetMsg.Key)
}

// uint32 EntriesCount = 2;
void SLMplsLabelBlockGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
::google::protobuf::uint32 SLMplsLabelBlockGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.EntriesCount)
  return entriescount_;
}
void SLMplsLabelBlockGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsg.EntriesCount)
}

// bool GetNext = 3;
void SLMplsLabelBlockGetMsg::clear_getnext() {
  getnext_ = false;
}
bool SLMplsLabelBlockGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.GetNext)
  return getnext_;
}
void SLMplsLabelBlockGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsg.GetNext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockGetMsgRsp::kEofFieldNumber;
const int SLMplsLabelBlockGetMsgRsp::kErrStatusFieldNumber;
const int SLMplsLabelBlockGetMsgRsp::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockGetMsgRsp::SLMplsLabelBlockGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockGetMsgRsp)
}
SLMplsLabelBlockGetMsgRsp::SLMplsLabelBlockGetMsgRsp(const SLMplsLabelBlockGetMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockGetMsgRsp)
}

void SLMplsLabelBlockGetMsgRsp::SharedCtor() {
  ::memset(&errstatus_, 0, reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_) + sizeof(eof_));
  _cached_size_ = 0;
}

SLMplsLabelBlockGetMsgRsp::~SLMplsLabelBlockGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockGetMsgRsp)
  SharedDtor();
}

void SLMplsLabelBlockGetMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
}

void SLMplsLabelBlockGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockGetMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[5].descriptor;
}

const SLMplsLabelBlockGetMsgRsp& SLMplsLabelBlockGetMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsLabelBlockGetMsgRsp* SLMplsLabelBlockGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockGetMsgRsp* n = new SLMplsLabelBlockGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  entries_.Clear();
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
  eof_ = false;
}

bool SLMplsLabelBlockGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool Eof = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockGetMsgRsp)
  return false;
#undef DO_
}

void SLMplsLabelBlockGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  // bool Eof = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->eof(), output);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->errstatus_, output);
  }

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockGetMsgRsp)
}

::google::protobuf::uint8* SLMplsLabelBlockGetMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  // bool Eof = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->errstatus_, false, target);
  }

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockGetMsgRsp)
  return target;
}

size_t SLMplsLabelBlockGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsLabelBlockGetMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockGetMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsLabelBlockGetMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsLabelBlockGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockGetMsgRsp::MergeFrom(const SLMplsLabelBlockGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
}

void SLMplsLabelBlockGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockGetMsgRsp::CopyFrom(const SLMplsLabelBlockGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockGetMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsLabelBlockGetMsgRsp::Swap(SLMplsLabelBlockGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockGetMsgRsp::InternalSwap(SLMplsLabelBlockGetMsgRsp* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(errstatus_, other->errstatus_);
  std::swap(eof_, other->eof_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockGetMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockGetMsgRsp

// bool Eof = 1;
void SLMplsLabelBlockGetMsgRsp::clear_eof() {
  eof_ = false;
}
bool SLMplsLabelBlockGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.Eof)
  return eof_;
}
void SLMplsLabelBlockGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
bool SLMplsLabelBlockGetMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsLabelBlockGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsLabelBlockGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsLabelBlockGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
int SLMplsLabelBlockGetMsgRsp::entries_size() const {
  return entries_.size();
}
void SLMplsLabelBlockGetMsgRsp::clear_entries() {
  entries_.Clear();
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Get(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
SLMplsLabelBlockGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
SLMplsLabelBlockGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlMplsReg::kPurgeIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlMplsReg::SlMplsReg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SlMplsReg)
}
SlMplsReg::SlMplsReg(const SlMplsReg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  purgeintervalseconds_ = from.purgeintervalseconds_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SlMplsReg)
}

void SlMplsReg::SharedCtor() {
  purgeintervalseconds_ = 0u;
  _cached_size_ = 0;
}

SlMplsReg::~SlMplsReg() {
  // @@protoc_insertion_point(destructor:service_layer.SlMplsReg)
  SharedDtor();
}

void SlMplsReg::SharedDtor() {
}

void SlMplsReg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlMplsReg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[6].descriptor;
}

const SlMplsReg& SlMplsReg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SlMplsReg* SlMplsReg::New(::google::protobuf::Arena* arena) const {
  SlMplsReg* n = new SlMplsReg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlMplsReg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SlMplsReg)
  purgeintervalseconds_ = 0u;
}

bool SlMplsReg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SlMplsReg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 PurgeIntervalSeconds = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purgeintervalseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SlMplsReg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SlMplsReg)
  return false;
#undef DO_
}

void SlMplsReg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SlMplsReg)
  // uint32 PurgeIntervalSeconds = 1;
  if (this->purgeintervalseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->purgeintervalseconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SlMplsReg)
}

::google::protobuf::uint8* SlMplsReg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SlMplsReg)
  // uint32 PurgeIntervalSeconds = 1;
  if (this->purgeintervalseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->purgeintervalseconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SlMplsReg)
  return target;
}

size_t SlMplsReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SlMplsReg)
  size_t total_size = 0;

  // uint32 PurgeIntervalSeconds = 1;
  if (this->purgeintervalseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->purgeintervalseconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlMplsReg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SlMplsReg)
  GOOGLE_DCHECK_NE(&from, this);
  const SlMplsReg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlMplsReg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SlMplsReg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SlMplsReg)
    MergeFrom(*source);
  }
}

void SlMplsReg::MergeFrom(const SlMplsReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SlMplsReg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.purgeintervalseconds() != 0) {
    set_purgeintervalseconds(from.purgeintervalseconds());
  }
}

void SlMplsReg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SlMplsReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlMplsReg::CopyFrom(const SlMplsReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SlMplsReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlMplsReg::IsInitialized() const {
  return true;
}

void SlMplsReg::Swap(SlMplsReg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlMplsReg::InternalSwap(SlMplsReg* other) {
  std::swap(purgeintervalseconds_, other->purgeintervalseconds_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlMplsReg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlMplsReg

// uint32 PurgeIntervalSeconds = 1;
void SlMplsReg::clear_purgeintervalseconds() {
  purgeintervalseconds_ = 0u;
}
::google::protobuf::uint32 SlMplsReg::purgeintervalseconds() const {
  // @@protoc_insertion_point(field_get:service_layer.SlMplsReg.PurgeIntervalSeconds)
  return purgeintervalseconds_;
}
void SlMplsReg::set_purgeintervalseconds(::google::protobuf::uint32 value) {
  
  purgeintervalseconds_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SlMplsReg.PurgeIntervalSeconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsRegMsg::kOperFieldNumber;
const int SLMplsRegMsg::kRegMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsRegMsg::SLMplsRegMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsRegMsg)
}
SLMplsRegMsg::SLMplsRegMsg(const SLMplsRegMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regmsg()) {
    regmsg_ = new ::service_layer::SlMplsReg(*from.regmsg_);
  } else {
    regmsg_ = NULL;
  }
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsRegMsg)
}

void SLMplsRegMsg::SharedCtor() {
  ::memset(&regmsg_, 0, reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&regmsg_) + sizeof(oper_));
  _cached_size_ = 0;
}

SLMplsRegMsg::~SLMplsRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsRegMsg)
  SharedDtor();
}

void SLMplsRegMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete regmsg_;
  }
}

void SLMplsRegMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsRegMsg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[7].descriptor;
}

const SLMplsRegMsg& SLMplsRegMsg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsRegMsg* SLMplsRegMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsRegMsg* n = new SLMplsRegMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsRegMsg)
  if (GetArenaNoVirtual() == NULL && regmsg_ != NULL) {
    delete regmsg_;
  }
  regmsg_ = NULL;
  oper_ = 0;
}

bool SLMplsRegMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsRegMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLRegOp Oper = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLRegOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SlMplsReg RegMsg = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsRegMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsRegMsg)
  return false;
#undef DO_
}

void SLMplsRegMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsRegMsg)
  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // .service_layer.SlMplsReg RegMsg = 2;
  if (this->has_regmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->regmsg_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsRegMsg)
}

::google::protobuf::uint8* SLMplsRegMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsRegMsg)
  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // .service_layer.SlMplsReg RegMsg = 2;
  if (this->has_regmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->regmsg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsRegMsg)
  return target;
}

size_t SLMplsRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsRegMsg)
  size_t total_size = 0;

  // .service_layer.SlMplsReg RegMsg = 2;
  if (this->has_regmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->regmsg_);
  }

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsRegMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsRegMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsRegMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsRegMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsRegMsg)
    MergeFrom(*source);
  }
}

void SLMplsRegMsg::MergeFrom(const SLMplsRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regmsg()) {
    mutable_regmsg()->::service_layer::SlMplsReg::MergeFrom(from.regmsg());
  }
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLMplsRegMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsRegMsg::CopyFrom(const SLMplsRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsRegMsg::IsInitialized() const {
  return true;
}

void SLMplsRegMsg::Swap(SLMplsRegMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsRegMsg::InternalSwap(SLMplsRegMsg* other) {
  std::swap(regmsg_, other->regmsg_);
  std::swap(oper_, other->oper_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsRegMsg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsRegMsg

// .service_layer.SLRegOp Oper = 1;
void SLMplsRegMsg::clear_oper() {
  oper_ = 0;
}
::service_layer::SLRegOp SLMplsRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsg.Oper)
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
void SLMplsRegMsg::set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsRegMsg.Oper)
}

// .service_layer.SlMplsReg RegMsg = 2;
bool SLMplsRegMsg::has_regmsg() const {
  return this != internal_default_instance() && regmsg_ != NULL;
}
void SLMplsRegMsg::clear_regmsg() {
  if (GetArenaNoVirtual() == NULL && regmsg_ != NULL) delete regmsg_;
  regmsg_ = NULL;
}
const ::service_layer::SlMplsReg& SLMplsRegMsg::regmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsg.RegMsg)
  return regmsg_ != NULL ? *regmsg_
                         : *::service_layer::SlMplsReg::internal_default_instance();
}
::service_layer::SlMplsReg* SLMplsRegMsg::mutable_regmsg() {
  
  if (regmsg_ == NULL) {
    regmsg_ = new ::service_layer::SlMplsReg;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsRegMsg.RegMsg)
  return regmsg_;
}
::service_layer::SlMplsReg* SLMplsRegMsg::release_regmsg() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsRegMsg.RegMsg)
  
  ::service_layer::SlMplsReg* temp = regmsg_;
  regmsg_ = NULL;
  return temp;
}
void SLMplsRegMsg::set_allocated_regmsg(::service_layer::SlMplsReg* regmsg) {
  delete regmsg_;
  regmsg_ = regmsg;
  if (regmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsRegMsg.RegMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsRegMsgRsp::kErrStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsRegMsgRsp::SLMplsRegMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsRegMsgRsp)
}
SLMplsRegMsgRsp::SLMplsRegMsgRsp(const SLMplsRegMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsRegMsgRsp)
}

void SLMplsRegMsgRsp::SharedCtor() {
  errstatus_ = NULL;
  _cached_size_ = 0;
}

SLMplsRegMsgRsp::~SLMplsRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsRegMsgRsp)
  SharedDtor();
}

void SLMplsRegMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
}

void SLMplsRegMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsRegMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[8].descriptor;
}

const SLMplsRegMsgRsp& SLMplsRegMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsRegMsgRsp* SLMplsRegMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsRegMsgRsp* n = new SLMplsRegMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsRegMsgRsp)
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
}

bool SLMplsRegMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsRegMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsRegMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsRegMsgRsp)
  return false;
#undef DO_
}

void SLMplsRegMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsRegMsgRsp)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsRegMsgRsp)
}

::google::protobuf::uint8* SLMplsRegMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsRegMsgRsp)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->errstatus_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsRegMsgRsp)
  return target;
}

size_t SLMplsRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsRegMsgRsp)
  size_t total_size = 0;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsRegMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsRegMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsRegMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsRegMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsRegMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsRegMsgRsp::MergeFrom(const SLMplsRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLMplsRegMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsRegMsgRsp::CopyFrom(const SLMplsRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsRegMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsRegMsgRsp::Swap(SLMplsRegMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsRegMsgRsp::InternalSwap(SLMplsRegMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsRegMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsRegMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsRegMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsRegMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsRegMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsRegMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsRegMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsRegMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsRegMsgRsp.ErrStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsGetMsg::SLMplsGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsGetMsg)
}
SLMplsGetMsg::SLMplsGetMsg(const SLMplsGetMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetMsg)
}

void SLMplsGetMsg::SharedCtor() {
  _cached_size_ = 0;
}

SLMplsGetMsg::~SLMplsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetMsg)
  SharedDtor();
}

void SLMplsGetMsg::SharedDtor() {
}

void SLMplsGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsGetMsg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[9].descriptor;
}

const SLMplsGetMsg& SLMplsGetMsg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsGetMsg* SLMplsGetMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsGetMsg* n = new SLMplsGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsGetMsg)
}

bool SLMplsGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsGetMsg)
  return false;
#undef DO_
}

void SLMplsGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsGetMsg)
  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsGetMsg)
}

::google::protobuf::uint8* SLMplsGetMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetMsg)
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetMsg)
  return target;
}

size_t SLMplsGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsGetMsg)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsGetMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsGetMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsGetMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsGetMsg)
    MergeFrom(*source);
  }
}

void SLMplsGetMsg::MergeFrom(const SLMplsGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SLMplsGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetMsg::CopyFrom(const SLMplsGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetMsg::IsInitialized() const {
  return true;
}

void SLMplsGetMsg::Swap(SLMplsGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsGetMsg::InternalSwap(SLMplsGetMsg* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsGetMsg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsGetMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsGetMsgRsp::kErrStatusFieldNumber;
const int SLMplsGetMsgRsp::kMaxLabelsPerBlockFieldNumber;
const int SLMplsGetMsgRsp::kMaxLabelblocksPerLabelblockmsgFieldNumber;
const int SLMplsGetMsgRsp::kMinStartLabelFieldNumber;
const int SLMplsGetMsgRsp::kLabelTableSizeFieldNumber;
const int SLMplsGetMsgRsp::kMaxIlmPerIlmmsgFieldNumber;
const int SLMplsGetMsgRsp::kMaxPathsPerIlmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsGetMsgRsp::SLMplsGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsGetMsgRsp)
}
SLMplsGetMsgRsp::SLMplsGetMsgRsp(const SLMplsGetMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  ::memcpy(&maxlabelsperblock_, &from.maxlabelsperblock_,
    reinterpret_cast<char*>(&maxpathsperilm_) -
    reinterpret_cast<char*>(&maxlabelsperblock_) + sizeof(maxpathsperilm_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetMsgRsp)
}

void SLMplsGetMsgRsp::SharedCtor() {
  ::memset(&errstatus_, 0, reinterpret_cast<char*>(&maxpathsperilm_) -
    reinterpret_cast<char*>(&errstatus_) + sizeof(maxpathsperilm_));
  _cached_size_ = 0;
}

SLMplsGetMsgRsp::~SLMplsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetMsgRsp)
  SharedDtor();
}

void SLMplsGetMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
}

void SLMplsGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsGetMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[10].descriptor;
}

const SLMplsGetMsgRsp& SLMplsGetMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsGetMsgRsp* SLMplsGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsGetMsgRsp* n = new SLMplsGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsGetMsgRsp)
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
  ::memset(&maxlabelsperblock_, 0, reinterpret_cast<char*>(&maxpathsperilm_) -
    reinterpret_cast<char*>(&maxlabelsperblock_) + sizeof(maxpathsperilm_));
}

bool SLMplsGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MaxLabelsPerBlock = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlabelsperblock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MaxLabelblocksPerLabelblockmsg = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlabelblocksperlabelblockmsg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MinStartLabel = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minstartlabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LabelTableSize = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labeltablesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MaxIlmPerIlmmsg = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxilmperilmmsg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MaxPathsPerIlm = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpathsperilm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsGetMsgRsp)
  return false;
#undef DO_
}

void SLMplsGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsGetMsgRsp)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxlabelsperblock(), output);
  }

  // uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlabelblocksperlabelblockmsg(), output);
  }

  // uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minstartlabel(), output);
  }

  // uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->labeltablesize(), output);
  }

  // uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxilmperilmmsg(), output);
  }

  // uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxpathsperilm(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsGetMsgRsp)
}

::google::protobuf::uint8* SLMplsGetMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetMsgRsp)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->errstatus_, false, target);
  }

  // uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxlabelsperblock(), target);
  }

  // uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlabelblocksperlabelblockmsg(), target);
  }

  // uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minstartlabel(), target);
  }

  // uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->labeltablesize(), target);
  }

  // uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxilmperilmmsg(), target);
  }

  // uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxpathsperilm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetMsgRsp)
  return target;
}

size_t SLMplsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsGetMsgRsp)
  size_t total_size = 0;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlabelsperblock());
  }

  // uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlabelblocksperlabelblockmsg());
  }

  // uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minstartlabel());
  }

  // uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labeltablesize());
  }

  // uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxilmperilmmsg());
  }

  // uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxpathsperilm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsGetMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsGetMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsGetMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsGetMsgRsp::MergeFrom(const SLMplsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.maxlabelsperblock() != 0) {
    set_maxlabelsperblock(from.maxlabelsperblock());
  }
  if (from.maxlabelblocksperlabelblockmsg() != 0) {
    set_maxlabelblocksperlabelblockmsg(from.maxlabelblocksperlabelblockmsg());
  }
  if (from.minstartlabel() != 0) {
    set_minstartlabel(from.minstartlabel());
  }
  if (from.labeltablesize() != 0) {
    set_labeltablesize(from.labeltablesize());
  }
  if (from.maxilmperilmmsg() != 0) {
    set_maxilmperilmmsg(from.maxilmperilmmsg());
  }
  if (from.maxpathsperilm() != 0) {
    set_maxpathsperilm(from.maxpathsperilm());
  }
}

void SLMplsGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetMsgRsp::CopyFrom(const SLMplsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsGetMsgRsp::Swap(SLMplsGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsGetMsgRsp::InternalSwap(SLMplsGetMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(maxlabelsperblock_, other->maxlabelsperblock_);
  std::swap(maxlabelblocksperlabelblockmsg_, other->maxlabelblocksperlabelblockmsg_);
  std::swap(minstartlabel_, other->minstartlabel_);
  std::swap(labeltablesize_, other->labeltablesize_);
  std::swap(maxilmperilmmsg_, other->maxilmperilmmsg_);
  std::swap(maxpathsperilm_, other->maxpathsperilm_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsGetMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsGetMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsGetMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsGetMsgRsp.ErrStatus)
}

// uint32 MaxLabelsPerBlock = 2;
void SLMplsGetMsgRsp::clear_maxlabelsperblock() {
  maxlabelsperblock_ = 0u;
}
::google::protobuf::uint32 SLMplsGetMsgRsp::maxlabelsperblock() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxLabelsPerBlock)
  return maxlabelsperblock_;
}
void SLMplsGetMsgRsp::set_maxlabelsperblock(::google::protobuf::uint32 value) {
  
  maxlabelsperblock_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxLabelsPerBlock)
}

// uint32 MaxLabelblocksPerLabelblockmsg = 3;
void SLMplsGetMsgRsp::clear_maxlabelblocksperlabelblockmsg() {
  maxlabelblocksperlabelblockmsg_ = 0u;
}
::google::protobuf::uint32 SLMplsGetMsgRsp::maxlabelblocksperlabelblockmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxLabelblocksPerLabelblockmsg)
  return maxlabelblocksperlabelblockmsg_;
}
void SLMplsGetMsgRsp::set_maxlabelblocksperlabelblockmsg(::google::protobuf::uint32 value) {
  
  maxlabelblocksperlabelblockmsg_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxLabelblocksPerLabelblockmsg)
}

// uint32 MinStartLabel = 4;
void SLMplsGetMsgRsp::clear_minstartlabel() {
  minstartlabel_ = 0u;
}
::google::protobuf::uint32 SLMplsGetMsgRsp::minstartlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MinStartLabel)
  return minstartlabel_;
}
void SLMplsGetMsgRsp::set_minstartlabel(::google::protobuf::uint32 value) {
  
  minstartlabel_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MinStartLabel)
}

// uint32 LabelTableSize = 5;
void SLMplsGetMsgRsp::clear_labeltablesize() {
  labeltablesize_ = 0u;
}
::google::protobuf::uint32 SLMplsGetMsgRsp::labeltablesize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.LabelTableSize)
  return labeltablesize_;
}
void SLMplsGetMsgRsp::set_labeltablesize(::google::protobuf::uint32 value) {
  
  labeltablesize_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.LabelTableSize)
}

// uint32 MaxIlmPerIlmmsg = 6;
void SLMplsGetMsgRsp::clear_maxilmperilmmsg() {
  maxilmperilmmsg_ = 0u;
}
::google::protobuf::uint32 SLMplsGetMsgRsp::maxilmperilmmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxIlmPerIlmmsg)
  return maxilmperilmmsg_;
}
void SLMplsGetMsgRsp::set_maxilmperilmmsg(::google::protobuf::uint32 value) {
  
  maxilmperilmmsg_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxIlmPerIlmmsg)
}

// uint32 MaxPathsPerIlm = 7;
void SLMplsGetMsgRsp::clear_maxpathsperilm() {
  maxpathsperilm_ = 0u;
}
::google::protobuf::uint32 SLMplsGetMsgRsp::maxpathsperilm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxPathsPerIlm)
  return maxpathsperilm_;
}
void SLMplsGetMsgRsp::set_maxpathsperilm(::google::protobuf::uint32 value) {
  
  maxpathsperilm_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxPathsPerIlm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsGetStatsMsgRsp::kErrStatusFieldNumber;
const int SLMplsGetStatsMsgRsp::kLabelBlockCountFieldNumber;
const int SLMplsGetStatsMsgRsp::kIlmCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsGetStatsMsgRsp::SLMplsGetStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsGetStatsMsgRsp)
}
SLMplsGetStatsMsgRsp::SLMplsGetStatsMsgRsp(const SLMplsGetStatsMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  ::memcpy(&labelblockcount_, &from.labelblockcount_,
    reinterpret_cast<char*>(&ilmcount_) -
    reinterpret_cast<char*>(&labelblockcount_) + sizeof(ilmcount_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetStatsMsgRsp)
}

void SLMplsGetStatsMsgRsp::SharedCtor() {
  ::memset(&errstatus_, 0, reinterpret_cast<char*>(&ilmcount_) -
    reinterpret_cast<char*>(&errstatus_) + sizeof(ilmcount_));
  _cached_size_ = 0;
}

SLMplsGetStatsMsgRsp::~SLMplsGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetStatsMsgRsp)
  SharedDtor();
}

void SLMplsGetStatsMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
}

void SLMplsGetStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsGetStatsMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[11].descriptor;
}

const SLMplsGetStatsMsgRsp& SLMplsGetStatsMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsGetStatsMsgRsp* SLMplsGetStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsGetStatsMsgRsp* n = new SLMplsGetStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsGetStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsGetStatsMsgRsp)
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
  ::memset(&labelblockcount_, 0, reinterpret_cast<char*>(&ilmcount_) -
    reinterpret_cast<char*>(&labelblockcount_) + sizeof(ilmcount_));
}

bool SLMplsGetStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsGetStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LabelBlockCount = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelblockcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IlmCount = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ilmcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsGetStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsGetStatsMsgRsp)
  return false;
#undef DO_
}

void SLMplsGetStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsGetStatsMsgRsp)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // uint32 LabelBlockCount = 2;
  if (this->labelblockcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelblockcount(), output);
  }

  // uint32 IlmCount = 3;
  if (this->ilmcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ilmcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsGetStatsMsgRsp)
}

::google::protobuf::uint8* SLMplsGetStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetStatsMsgRsp)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->errstatus_, false, target);
  }

  // uint32 LabelBlockCount = 2;
  if (this->labelblockcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelblockcount(), target);
  }

  // uint32 IlmCount = 3;
  if (this->ilmcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ilmcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetStatsMsgRsp)
  return target;
}

size_t SLMplsGetStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsGetStatsMsgRsp)
  size_t total_size = 0;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // uint32 LabelBlockCount = 2;
  if (this->labelblockcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelblockcount());
  }

  // uint32 IlmCount = 3;
  if (this->ilmcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ilmcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsGetStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsGetStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsGetStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsGetStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsGetStatsMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsGetStatsMsgRsp::MergeFrom(const SLMplsGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.labelblockcount() != 0) {
    set_labelblockcount(from.labelblockcount());
  }
  if (from.ilmcount() != 0) {
    set_ilmcount(from.ilmcount());
  }
}

void SLMplsGetStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetStatsMsgRsp::CopyFrom(const SLMplsGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetStatsMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsGetStatsMsgRsp::Swap(SLMplsGetStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsGetStatsMsgRsp::InternalSwap(SLMplsGetStatsMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(labelblockcount_, other->labelblockcount_);
  std::swap(ilmcount_, other->ilmcount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsGetStatsMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsGetStatsMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsGetStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
}

// uint32 LabelBlockCount = 2;
void SLMplsGetStatsMsgRsp::clear_labelblockcount() {
  labelblockcount_ = 0u;
}
::google::protobuf::uint32 SLMplsGetStatsMsgRsp::labelblockcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.LabelBlockCount)
  return labelblockcount_;
}
void SLMplsGetStatsMsgRsp::set_labelblockcount(::google::protobuf::uint32 value) {
  
  labelblockcount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetStatsMsgRsp.LabelBlockCount)
}

// uint32 IlmCount = 3;
void SLMplsGetStatsMsgRsp::clear_ilmcount() {
  ilmcount_ = 0u;
}
::google::protobuf::uint32 SLMplsGetStatsMsgRsp::ilmcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.IlmCount)
  return ilmcount_;
}
void SLMplsGetStatsMsgRsp::set_ilmcount(::google::protobuf::uint32 value) {
  
  ilmcount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetStatsMsgRsp.IlmCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsPath::kNexthopAddressFieldNumber;
const int SLMplsPath::kNexthopInterfaceFieldNumber;
const int SLMplsPath::kLoadMetricFieldNumber;
const int SLMplsPath::kVrfNameFieldNumber;
const int SLMplsPath::kActionFieldNumber;
const int SLMplsPath::kPathIdFieldNumber;
const int SLMplsPath::kProtectedPathBitmapFieldNumber;
const int SLMplsPath::kLabelStackFieldNumber;
const int SLMplsPath::kRemoteAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsPath::SLMplsPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsPath)
}
SLMplsPath::SLMplsPath(const SLMplsPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      protectedpathbitmap_(from.protectedpathbitmap_),
      labelstack_(from.labelstack_),
      remoteaddress_(from.remoteaddress_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrfname().size() > 0) {
    vrfname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrfname_);
  }
  if (from.has_nexthopaddress()) {
    nexthopaddress_ = new ::service_layer::SLIpAddress(*from.nexthopaddress_);
  } else {
    nexthopaddress_ = NULL;
  }
  if (from.has_nexthopinterface()) {
    nexthopinterface_ = new ::service_layer::SLInterface(*from.nexthopinterface_);
  } else {
    nexthopinterface_ = NULL;
  }
  ::memcpy(&loadmetric_, &from.loadmetric_,
    reinterpret_cast<char*>(&pathid_) -
    reinterpret_cast<char*>(&loadmetric_) + sizeof(pathid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsPath)
}

void SLMplsPath::SharedCtor() {
  vrfname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nexthopaddress_, 0, reinterpret_cast<char*>(&pathid_) -
    reinterpret_cast<char*>(&nexthopaddress_) + sizeof(pathid_));
  _cached_size_ = 0;
}

SLMplsPath::~SLMplsPath() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsPath)
  SharedDtor();
}

void SLMplsPath::SharedDtor() {
  vrfname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete nexthopaddress_;
  }
  if (this != internal_default_instance()) {
    delete nexthopinterface_;
  }
}

void SLMplsPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsPath::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[12].descriptor;
}

const SLMplsPath& SLMplsPath::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsPath* SLMplsPath::New(::google::protobuf::Arena* arena) const {
  SLMplsPath* n = new SLMplsPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsPath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsPath)
  protectedpathbitmap_.Clear();
  labelstack_.Clear();
  remoteaddress_.Clear();
  vrfname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && nexthopaddress_ != NULL) {
    delete nexthopaddress_;
  }
  nexthopaddress_ = NULL;
  if (GetArenaNoVirtual() == NULL && nexthopinterface_ != NULL) {
    delete nexthopinterface_;
  }
  nexthopinterface_ = NULL;
  ::memset(&loadmetric_, 0, reinterpret_cast<char*>(&pathid_) -
    reinterpret_cast<char*>(&loadmetric_) + sizeof(pathid_));
}

bool SLMplsPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLIpAddress NexthopAddress = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nexthopaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLInterface NexthopInterface = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nexthopinterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LoadMetric = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loadmetric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string VrfName = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vrfname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vrfname().data(), this->vrfname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "service_layer.SLMplsPath.VrfName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SlLabelAction Action = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::service_layer::SlLabelAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 PathId = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pathid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ProtectedPathBitmap = 7;
      case 7: {
        if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_protectedpathbitmap())));
        } else if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 58u, input, this->mutable_protectedpathbitmap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 LabelStack = 8;
      case 8: {
        if (tag == 66u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labelstack())));
        } else if (tag == 64u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_labelstack())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLIpAddress RemoteAddress = 9;
      case 9: {
        if (tag == 74u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_remoteaddress()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsPath)
  return false;
#undef DO_
}

void SLMplsPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsPath)
  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nexthopaddress_, output);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nexthopinterface_, output);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loadmetric(), output);
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrfname().data(), this->vrfname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsPath.VrfName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vrfname(), output);
  }

  // .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pathid(), output);
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  if (this->protectedpathbitmap_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_protectedpathbitmap_cached_byte_size_);
  }
  for (int i = 0; i < this->protectedpathbitmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->protectedpathbitmap(i), output);
  }

  // repeated uint32 LabelStack = 8;
  if (this->labelstack_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_labelstack_cached_byte_size_);
  }
  for (int i = 0; i < this->labelstack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->labelstack(i), output);
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  for (unsigned int i = 0, n = this->remoteaddress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->remoteaddress(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsPath)
}

::google::protobuf::uint8* SLMplsPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsPath)
  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nexthopaddress_, false, target);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nexthopinterface_, false, target);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loadmetric(), target);
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrfname().data(), this->vrfname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsPath.VrfName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vrfname(), target);
  }

  // .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pathid(), target);
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  if (this->protectedpathbitmap_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _protectedpathbitmap_cached_byte_size_, target);
  }
  for (int i = 0; i < this->protectedpathbitmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->protectedpathbitmap(i), target);
  }

  // repeated uint32 LabelStack = 8;
  if (this->labelstack_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _labelstack_cached_byte_size_, target);
  }
  for (int i = 0; i < this->labelstack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->labelstack(i), target);
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  for (unsigned int i = 0, n = this->remoteaddress_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->remoteaddress(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsPath)
  return target;
}

size_t SLMplsPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsPath)
  size_t total_size = 0;

  // repeated uint64 ProtectedPathBitmap = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->protectedpathbitmap_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _protectedpathbitmap_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 LabelStack = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->labelstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _labelstack_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  {
    unsigned int count = this->remoteaddress_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remoteaddress(i));
    }
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vrfname());
  }

  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nexthopaddress_);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nexthopinterface_);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->loadmetric());
  }

  // .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pathid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsPath)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsPath)
    MergeFrom(*source);
  }
}

void SLMplsPath::MergeFrom(const SLMplsPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protectedpathbitmap_.MergeFrom(from.protectedpathbitmap_);
  labelstack_.MergeFrom(from.labelstack_);
  remoteaddress_.MergeFrom(from.remoteaddress_);
  if (from.vrfname().size() > 0) {

    vrfname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrfname_);
  }
  if (from.has_nexthopaddress()) {
    mutable_nexthopaddress()->::service_layer::SLIpAddress::MergeFrom(from.nexthopaddress());
  }
  if (from.has_nexthopinterface()) {
    mutable_nexthopinterface()->::service_layer::SLInterface::MergeFrom(from.nexthopinterface());
  }
  if (from.loadmetric() != 0) {
    set_loadmetric(from.loadmetric());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.pathid() != 0) {
    set_pathid(from.pathid());
  }
}

void SLMplsPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsPath::CopyFrom(const SLMplsPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsPath::IsInitialized() const {
  return true;
}

void SLMplsPath::Swap(SLMplsPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsPath::InternalSwap(SLMplsPath* other) {
  protectedpathbitmap_.UnsafeArenaSwap(&other->protectedpathbitmap_);
  labelstack_.UnsafeArenaSwap(&other->labelstack_);
  remoteaddress_.UnsafeArenaSwap(&other->remoteaddress_);
  vrfname_.Swap(&other->vrfname_);
  std::swap(nexthopaddress_, other->nexthopaddress_);
  std::swap(nexthopinterface_, other->nexthopinterface_);
  std::swap(loadmetric_, other->loadmetric_);
  std::swap(action_, other->action_);
  std::swap(pathid_, other->pathid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsPath::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsPath

// .service_layer.SLIpAddress NexthopAddress = 1;
bool SLMplsPath::has_nexthopaddress() const {
  return this != internal_default_instance() && nexthopaddress_ != NULL;
}
void SLMplsPath::clear_nexthopaddress() {
  if (GetArenaNoVirtual() == NULL && nexthopaddress_ != NULL) delete nexthopaddress_;
  nexthopaddress_ = NULL;
}
const ::service_layer::SLIpAddress& SLMplsPath::nexthopaddress() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.NexthopAddress)
  return nexthopaddress_ != NULL ? *nexthopaddress_
                         : *::service_layer::SLIpAddress::internal_default_instance();
}
::service_layer::SLIpAddress* SLMplsPath::mutable_nexthopaddress() {
  
  if (nexthopaddress_ == NULL) {
    nexthopaddress_ = new ::service_layer::SLIpAddress;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.NexthopAddress)
  return nexthopaddress_;
}
::service_layer::SLIpAddress* SLMplsPath::release_nexthopaddress() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsPath.NexthopAddress)
  
  ::service_layer::SLIpAddress* temp = nexthopaddress_;
  nexthopaddress_ = NULL;
  return temp;
}
void SLMplsPath::set_allocated_nexthopaddress(::service_layer::SLIpAddress* nexthopaddress) {
  delete nexthopaddress_;
  nexthopaddress_ = nexthopaddress;
  if (nexthopaddress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.NexthopAddress)
}

// .service_layer.SLInterface NexthopInterface = 2;
bool SLMplsPath::has_nexthopinterface() const {
  return this != internal_default_instance() && nexthopinterface_ != NULL;
}
void SLMplsPath::clear_nexthopinterface() {
  if (GetArenaNoVirtual() == NULL && nexthopinterface_ != NULL) delete nexthopinterface_;
  nexthopinterface_ = NULL;
}
const ::service_layer::SLInterface& SLMplsPath::nexthopinterface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.NexthopInterface)
  return nexthopinterface_ != NULL ? *nexthopinterface_
                         : *::service_layer::SLInterface::internal_default_instance();
}
::service_layer::SLInterface* SLMplsPath::mutable_nexthopinterface() {
  
  if (nexthopinterface_ == NULL) {
    nexthopinterface_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.NexthopInterface)
  return nexthopinterface_;
}
::service_layer::SLInterface* SLMplsPath::release_nexthopinterface() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsPath.NexthopInterface)
  
  ::service_layer::SLInterface* temp = nexthopinterface_;
  nexthopinterface_ = NULL;
  return temp;
}
void SLMplsPath::set_allocated_nexthopinterface(::service_layer::SLInterface* nexthopinterface) {
  delete nexthopinterface_;
  nexthopinterface_ = nexthopinterface;
  if (nexthopinterface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.NexthopInterface)
}

// uint32 LoadMetric = 3;
void SLMplsPath::clear_loadmetric() {
  loadmetric_ = 0u;
}
::google::protobuf::uint32 SLMplsPath::loadmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.LoadMetric)
  return loadmetric_;
}
void SLMplsPath::set_loadmetric(::google::protobuf::uint32 value) {
  
  loadmetric_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.LoadMetric)
}

// string VrfName = 4;
void SLMplsPath::clear_vrfname() {
  vrfname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SLMplsPath::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.VrfName)
  return vrfname_.GetNoArena();
}
void SLMplsPath::set_vrfname(const ::std::string& value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.VrfName)
}
#if LANG_CXX11
void SLMplsPath::set_vrfname(::std::string&& value) {
  
  vrfname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLMplsPath.VrfName)
}
#endif
void SLMplsPath::set_vrfname(const char* value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLMplsPath.VrfName)
}
void SLMplsPath::set_vrfname(const char* value, size_t size) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLMplsPath.VrfName)
}
::std::string* SLMplsPath::mutable_vrfname() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.VrfName)
  return vrfname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SLMplsPath::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsPath.VrfName)
  
  return vrfname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SLMplsPath::set_allocated_vrfname(::std::string* vrfname) {
  if (vrfname != NULL) {
    
  } else {
    
  }
  vrfname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrfname);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.VrfName)
}

// .service_layer.SlLabelAction Action = 5;
void SLMplsPath::clear_action() {
  action_ = 0;
}
::service_layer::SlLabelAction SLMplsPath::action() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.Action)
  return static_cast< ::service_layer::SlLabelAction >(action_);
}
void SLMplsPath::set_action(::service_layer::SlLabelAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.Action)
}

// uint32 PathId = 6;
void SLMplsPath::clear_pathid() {
  pathid_ = 0u;
}
::google::protobuf::uint32 SLMplsPath::pathid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.PathId)
  return pathid_;
}
void SLMplsPath::set_pathid(::google::protobuf::uint32 value) {
  
  pathid_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.PathId)
}

// repeated uint64 ProtectedPathBitmap = 7;
int SLMplsPath::protectedpathbitmap_size() const {
  return protectedpathbitmap_.size();
}
void SLMplsPath::clear_protectedpathbitmap() {
  protectedpathbitmap_.Clear();
}
::google::protobuf::uint64 SLMplsPath::protectedpathbitmap(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.ProtectedPathBitmap)
  return protectedpathbitmap_.Get(index);
}
void SLMplsPath::set_protectedpathbitmap(int index, ::google::protobuf::uint64 value) {
  protectedpathbitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.ProtectedPathBitmap)
}
void SLMplsPath::add_protectedpathbitmap(::google::protobuf::uint64 value) {
  protectedpathbitmap_.Add(value);
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.ProtectedPathBitmap)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SLMplsPath::protectedpathbitmap() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.ProtectedPathBitmap)
  return protectedpathbitmap_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SLMplsPath::mutable_protectedpathbitmap() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.ProtectedPathBitmap)
  return &protectedpathbitmap_;
}

// repeated uint32 LabelStack = 8;
int SLMplsPath::labelstack_size() const {
  return labelstack_.size();
}
void SLMplsPath::clear_labelstack() {
  labelstack_.Clear();
}
::google::protobuf::uint32 SLMplsPath::labelstack(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.LabelStack)
  return labelstack_.Get(index);
}
void SLMplsPath::set_labelstack(int index, ::google::protobuf::uint32 value) {
  labelstack_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.LabelStack)
}
void SLMplsPath::add_labelstack(::google::protobuf::uint32 value) {
  labelstack_.Add(value);
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.LabelStack)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SLMplsPath::labelstack() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.LabelStack)
  return labelstack_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SLMplsPath::mutable_labelstack() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.LabelStack)
  return &labelstack_;
}

// repeated .service_layer.SLIpAddress RemoteAddress = 9;
int SLMplsPath::remoteaddress_size() const {
  return remoteaddress_.size();
}
void SLMplsPath::clear_remoteaddress() {
  remoteaddress_.Clear();
}
const ::service_layer::SLIpAddress& SLMplsPath::remoteaddress(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Get(index);
}
::service_layer::SLIpAddress* SLMplsPath::mutable_remoteaddress(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Mutable(index);
}
::service_layer::SLIpAddress* SLMplsPath::add_remoteaddress() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLIpAddress >*
SLMplsPath::mutable_remoteaddress() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.RemoteAddress)
  return &remoteaddress_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLIpAddress >&
SLMplsPath::remoteaddress() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmKey::kLocalLabelFieldNumber;
const int SLMplsIlmKey::kSlMplsCosValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmKey::SLMplsIlmKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmKey)
}
SLMplsIlmKey::SLMplsIlmKey(const SLMplsIlmKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slmplscosval()) {
    slmplscosval_ = new ::service_layer::SLMplsCos(*from.slmplscosval_);
  } else {
    slmplscosval_ = NULL;
  }
  locallabel_ = from.locallabel_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmKey)
}

void SLMplsIlmKey::SharedCtor() {
  ::memset(&slmplscosval_, 0, reinterpret_cast<char*>(&locallabel_) -
    reinterpret_cast<char*>(&slmplscosval_) + sizeof(locallabel_));
  _cached_size_ = 0;
}

SLMplsIlmKey::~SLMplsIlmKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmKey)
  SharedDtor();
}

void SLMplsIlmKey::SharedDtor() {
  if (this != internal_default_instance()) {
    delete slmplscosval_;
  }
}

void SLMplsIlmKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmKey::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[13].descriptor;
}

const SLMplsIlmKey& SLMplsIlmKey::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmKey* SLMplsIlmKey::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmKey* n = new SLMplsIlmKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmKey)
  if (GetArenaNoVirtual() == NULL && slmplscosval_ != NULL) {
    delete slmplscosval_;
  }
  slmplscosval_ = NULL;
  locallabel_ = 0u;
}

bool SLMplsIlmKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 LocalLabel = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locallabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLMplsCos SlMplsCosVal = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slmplscosval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmKey)
  return false;
#undef DO_
}

void SLMplsIlmKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmKey)
  // uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->locallabel(), output);
  }

  // .service_layer.SLMplsCos SlMplsCosVal = 2;
  if (this->has_slmplscosval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->slmplscosval_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmKey)
}

::google::protobuf::uint8* SLMplsIlmKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmKey)
  // uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->locallabel(), target);
  }

  // .service_layer.SLMplsCos SlMplsCosVal = 2;
  if (this->has_slmplscosval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->slmplscosval_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmKey)
  return target;
}

size_t SLMplsIlmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmKey)
  size_t total_size = 0;

  // .service_layer.SLMplsCos SlMplsCosVal = 2;
  if (this->has_slmplscosval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slmplscosval_);
  }

  // uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallabel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmKey)
    MergeFrom(*source);
  }
}

void SLMplsIlmKey::MergeFrom(const SLMplsIlmKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slmplscosval()) {
    mutable_slmplscosval()->::service_layer::SLMplsCos::MergeFrom(from.slmplscosval());
  }
  if (from.locallabel() != 0) {
    set_locallabel(from.locallabel());
  }
}

void SLMplsIlmKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmKey::CopyFrom(const SLMplsIlmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmKey::IsInitialized() const {
  return true;
}

void SLMplsIlmKey::Swap(SLMplsIlmKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmKey::InternalSwap(SLMplsIlmKey* other) {
  std::swap(slmplscosval_, other->slmplscosval_);
  std::swap(locallabel_, other->locallabel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmKey::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmKey

// uint32 LocalLabel = 1;
void SLMplsIlmKey::clear_locallabel() {
  locallabel_ = 0u;
}
::google::protobuf::uint32 SLMplsIlmKey::locallabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmKey.LocalLabel)
  return locallabel_;
}
void SLMplsIlmKey::set_locallabel(::google::protobuf::uint32 value) {
  
  locallabel_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmKey.LocalLabel)
}

// .service_layer.SLMplsCos SlMplsCosVal = 2;
bool SLMplsIlmKey::has_slmplscosval() const {
  return this != internal_default_instance() && slmplscosval_ != NULL;
}
void SLMplsIlmKey::clear_slmplscosval() {
  if (GetArenaNoVirtual() == NULL && slmplscosval_ != NULL) delete slmplscosval_;
  slmplscosval_ = NULL;
}
const ::service_layer::SLMplsCos& SLMplsIlmKey::slmplscosval() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmKey.SlMplsCosVal)
  return slmplscosval_ != NULL ? *slmplscosval_
                         : *::service_layer::SLMplsCos::internal_default_instance();
}
::service_layer::SLMplsCos* SLMplsIlmKey::mutable_slmplscosval() {
  
  if (slmplscosval_ == NULL) {
    slmplscosval_ = new ::service_layer::SLMplsCos;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmKey.SlMplsCosVal)
  return slmplscosval_;
}
::service_layer::SLMplsCos* SLMplsIlmKey::release_slmplscosval() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmKey.SlMplsCosVal)
  
  ::service_layer::SLMplsCos* temp = slmplscosval_;
  slmplscosval_ = NULL;
  return temp;
}
void SLMplsIlmKey::set_allocated_slmplscosval(::service_layer::SLMplsCos* slmplscosval) {
  delete slmplscosval_;
  slmplscosval_ = slmplscosval;
  if (slmplscosval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmKey.SlMplsCosVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsCos::kExpFieldNumber;
const int SLMplsCos::kDefaultElspPathFieldNumber;
const int SLMplsCos::kForwardingClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsCos::SLMplsCos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsCos)
}
SLMplsCos::SLMplsCos(const SLMplsCos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kExp: {
      set_exp(from.exp());
      break;
    }
    case kDefaultElspPath: {
      set_defaultelsppath(from.defaultelsppath());
      break;
    }
    case kForwardingClass: {
      set_forwardingclass(from.forwardingclass());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsCos)
}

void SLMplsCos::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

SLMplsCos::~SLMplsCos() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsCos)
  SharedDtor();
}

void SLMplsCos::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void SLMplsCos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsCos::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[14].descriptor;
}

const SLMplsCos& SLMplsCos::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsCos* SLMplsCos::New(::google::protobuf::Arena* arena) const {
  SLMplsCos* n = new SLMplsCos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsCos::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLMplsCos)
  switch (value_case()) {
    case kExp: {
      // No need to clear
      break;
    }
    case kDefaultElspPath: {
      // No need to clear
      break;
    }
    case kForwardingClass: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SLMplsCos::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsCos)
  clear_value();
}

bool SLMplsCos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsCos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Exp = 1;
      case 1: {
        if (tag == 8u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_.exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool DefaultElspPath = 2;
      case 2: {
        if (tag == 16u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.defaultelsppath_)));
          set_has_defaultelsppath();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ForwardingClass = 3;
      case 3: {
        if (tag == 24u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_.forwardingclass_)));
          set_has_forwardingclass();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsCos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsCos)
  return false;
#undef DO_
}

void SLMplsCos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsCos)
  // uint32 Exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  // bool DefaultElspPath = 2;
  if (has_defaultelsppath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->defaultelsppath(), output);
  }

  // uint32 ForwardingClass = 3;
  if (has_forwardingclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forwardingclass(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsCos)
}

::google::protobuf::uint8* SLMplsCos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsCos)
  // uint32 Exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  // bool DefaultElspPath = 2;
  if (has_defaultelsppath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->defaultelsppath(), target);
  }

  // uint32 ForwardingClass = 3;
  if (has_forwardingclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forwardingclass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsCos)
  return target;
}

size_t SLMplsCos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsCos)
  size_t total_size = 0;

  switch (value_case()) {
    // uint32 Exp = 1;
    case kExp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
      break;
    }
    // bool DefaultElspPath = 2;
    case kDefaultElspPath: {
      total_size += 1 + 1;
      break;
    }
    // uint32 ForwardingClass = 3;
    case kForwardingClass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forwardingclass());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsCos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsCos)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsCos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsCos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsCos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsCos)
    MergeFrom(*source);
  }
}

void SLMplsCos::MergeFrom(const SLMplsCos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsCos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.value_case()) {
    case kExp: {
      set_exp(from.exp());
      break;
    }
    case kDefaultElspPath: {
      set_defaultelsppath(from.defaultelsppath());
      break;
    }
    case kForwardingClass: {
      set_forwardingclass(from.forwardingclass());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void SLMplsCos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsCos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsCos::CopyFrom(const SLMplsCos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsCos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsCos::IsInitialized() const {
  return true;
}

void SLMplsCos::Swap(SLMplsCos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsCos::InternalSwap(SLMplsCos* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsCos::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsCos

// uint32 Exp = 1;
bool SLMplsCos::has_exp() const {
  return value_case() == kExp;
}
void SLMplsCos::set_has_exp() {
  _oneof_case_[0] = kExp;
}
void SLMplsCos::clear_exp() {
  if (has_exp()) {
    value_.exp_ = 0u;
    clear_has_value();
  }
}
::google::protobuf::uint32 SLMplsCos::exp() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsCos.Exp)
  if (has_exp()) {
    return value_.exp_;
  }
  return 0u;
}
void SLMplsCos::set_exp(::google::protobuf::uint32 value) {
  if (!has_exp()) {
    clear_value();
    set_has_exp();
  }
  value_.exp_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsCos.Exp)
}

// bool DefaultElspPath = 2;
bool SLMplsCos::has_defaultelsppath() const {
  return value_case() == kDefaultElspPath;
}
void SLMplsCos::set_has_defaultelsppath() {
  _oneof_case_[0] = kDefaultElspPath;
}
void SLMplsCos::clear_defaultelsppath() {
  if (has_defaultelsppath()) {
    value_.defaultelsppath_ = false;
    clear_has_value();
  }
}
bool SLMplsCos::defaultelsppath() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsCos.DefaultElspPath)
  if (has_defaultelsppath()) {
    return value_.defaultelsppath_;
  }
  return false;
}
void SLMplsCos::set_defaultelsppath(bool value) {
  if (!has_defaultelsppath()) {
    clear_value();
    set_has_defaultelsppath();
  }
  value_.defaultelsppath_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsCos.DefaultElspPath)
}

// uint32 ForwardingClass = 3;
bool SLMplsCos::has_forwardingclass() const {
  return value_case() == kForwardingClass;
}
void SLMplsCos::set_has_forwardingclass() {
  _oneof_case_[0] = kForwardingClass;
}
void SLMplsCos::clear_forwardingclass() {
  if (has_forwardingclass()) {
    value_.forwardingclass_ = 0u;
    clear_has_value();
  }
}
::google::protobuf::uint32 SLMplsCos::forwardingclass() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsCos.ForwardingClass)
  if (has_forwardingclass()) {
    return value_.forwardingclass_;
  }
  return 0u;
}
void SLMplsCos::set_forwardingclass(::google::protobuf::uint32 value) {
  if (!has_forwardingclass()) {
    clear_value();
    set_has_forwardingclass();
  }
  value_.forwardingclass_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsCos.ForwardingClass)
}

bool SLMplsCos::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void SLMplsCos::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
SLMplsCos::ValueCase SLMplsCos::value_case() const {
  return SLMplsCos::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmEntry::kKeyFieldNumber;
const int SLMplsIlmEntry::kPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmEntry::SLMplsIlmEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmEntry)
}
SLMplsIlmEntry::SLMplsIlmEntry(const SLMplsIlmEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      paths_(from.paths_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::service_layer::SLMplsIlmKey(*from.key_);
  } else {
    key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmEntry)
}

void SLMplsIlmEntry::SharedCtor() {
  key_ = NULL;
  _cached_size_ = 0;
}

SLMplsIlmEntry::~SLMplsIlmEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmEntry)
  SharedDtor();
}

void SLMplsIlmEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void SLMplsIlmEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmEntry::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[15].descriptor;
}

const SLMplsIlmEntry& SLMplsIlmEntry::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmEntry* SLMplsIlmEntry::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmEntry* n = new SLMplsIlmEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmEntry)
  paths_.Clear();
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}

bool SLMplsIlmEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLMplsIlmKey Key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsPath Paths = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmEntry)
  return false;
#undef DO_
}

void SLMplsIlmEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmEntry)
  // .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // repeated .service_layer.SLMplsPath Paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmEntry)
}

::google::protobuf::uint8* SLMplsIlmEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmEntry)
  // .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // repeated .service_layer.SLMplsPath Paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->paths(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmEntry)
  return target;
}

size_t SLMplsIlmEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmEntry)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsPath Paths = 2;
  {
    unsigned int count = this->paths_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paths(i));
    }
  }

  // .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmEntry)
    MergeFrom(*source);
  }
}

void SLMplsIlmEntry::MergeFrom(const SLMplsIlmEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paths_.MergeFrom(from.paths_);
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from.key());
  }
}

void SLMplsIlmEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmEntry::CopyFrom(const SLMplsIlmEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmEntry::IsInitialized() const {
  return true;
}

void SLMplsIlmEntry::Swap(SLMplsIlmEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmEntry::InternalSwap(SLMplsIlmEntry* other) {
  paths_.UnsafeArenaSwap(&other->paths_);
  std::swap(key_, other->key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmEntry::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmEntry

// .service_layer.SLMplsIlmKey Key = 1;
bool SLMplsIlmEntry::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void SLMplsIlmEntry::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsIlmKey& SLMplsIlmEntry::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmEntry.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLMplsIlmKey::internal_default_instance();
}
::service_layer::SLMplsIlmKey* SLMplsIlmEntry::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsIlmKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmEntry.Key)
  return key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmEntry::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmEntry.Key)
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsIlmEntry::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmEntry.Key)
}

// repeated .service_layer.SLMplsPath Paths = 2;
int SLMplsIlmEntry::paths_size() const {
  return paths_.size();
}
void SLMplsIlmEntry::clear_paths() {
  paths_.Clear();
}
const ::service_layer::SLMplsPath& SLMplsIlmEntry::paths(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Get(index);
}
::service_layer::SLMplsPath* SLMplsIlmEntry::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Mutable(index);
}
::service_layer::SLMplsPath* SLMplsIlmEntry::add_paths() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsPath >*
SLMplsIlmEntry::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmEntry.Paths)
  return &paths_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsPath >&
SLMplsIlmEntry::paths() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmEntry.Paths)
  return paths_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmMsg::kOperFieldNumber;
const int SLMplsIlmMsg::kCorrelatorFieldNumber;
const int SLMplsIlmMsg::kMplsIlmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmMsg::SLMplsIlmMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmMsg)
}
SLMplsIlmMsg::SLMplsIlmMsg(const SLMplsIlmMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mplsilms_(from.mplsilms_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&correlator_, &from.correlator_,
    reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmMsg)
}

void SLMplsIlmMsg::SharedCtor() {
  ::memset(&correlator_, 0, reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(oper_));
  _cached_size_ = 0;
}

SLMplsIlmMsg::~SLMplsIlmMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmMsg)
  SharedDtor();
}

void SLMplsIlmMsg::SharedDtor() {
}

void SLMplsIlmMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmMsg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[16].descriptor;
}

const SLMplsIlmMsg& SLMplsIlmMsg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmMsg* SLMplsIlmMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmMsg* n = new SLMplsIlmMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmMsg)
  mplsilms_.Clear();
  ::memset(&correlator_, 0, reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(oper_));
}

bool SLMplsIlmMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLObjectOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Correlator = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mplsilms()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmMsg)
  return false;
#undef DO_
}

void SLMplsIlmMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmMsg)
  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->correlator(), output);
  }

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  for (unsigned int i = 0, n = this->mplsilms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mplsilms(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmMsg)
}

::google::protobuf::uint8* SLMplsIlmMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmMsg)
  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->correlator(), target);
  }

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  for (unsigned int i = 0, n = this->mplsilms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mplsilms(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmMsg)
  return target;
}

size_t SLMplsIlmMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmMsg)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  {
    unsigned int count = this->mplsilms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mplsilms(i));
    }
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmMsg)
    MergeFrom(*source);
  }
}

void SLMplsIlmMsg::MergeFrom(const SLMplsIlmMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mplsilms_.MergeFrom(from.mplsilms_);
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLMplsIlmMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmMsg::CopyFrom(const SLMplsIlmMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmMsg::IsInitialized() const {
  return true;
}

void SLMplsIlmMsg::Swap(SLMplsIlmMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmMsg::InternalSwap(SLMplsIlmMsg* other) {
  mplsilms_.UnsafeArenaSwap(&other->mplsilms_);
  std::swap(correlator_, other->correlator_);
  std::swap(oper_, other->oper_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmMsg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmMsg

// .service_layer.SLObjectOp Oper = 1;
void SLMplsIlmMsg::clear_oper() {
  oper_ = 0;
}
::service_layer::SLObjectOp SLMplsIlmMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.Oper)
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
void SLMplsIlmMsg::set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsg.Oper)
}

// uint64 Correlator = 2;
void SLMplsIlmMsg::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SLMplsIlmMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.Correlator)
  return correlator_;
}
void SLMplsIlmMsg::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsg.Correlator)
}

// repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
int SLMplsIlmMsg::mplsilms_size() const {
  return mplsilms_.size();
}
void SLMplsIlmMsg::clear_mplsilms() {
  mplsilms_.Clear();
}
const ::service_layer::SLMplsIlmEntry& SLMplsIlmMsg::mplsilms(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Get(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::mutable_mplsilms(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Mutable(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::add_mplsilms() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
SLMplsIlmMsg::mutable_mplsilms() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmMsg.MplsIlms)
  return &mplsilms_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
SLMplsIlmMsg::mplsilms() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmRes::kErrStatusFieldNumber;
const int SLMplsIlmRes::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmRes::SLMplsIlmRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmRes)
}
SLMplsIlmRes::SLMplsIlmRes(const SLMplsIlmRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::service_layer::SLMplsIlmKey(*from.key_);
  } else {
    key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmRes)
}

void SLMplsIlmRes::SharedCtor() {
  ::memset(&errstatus_, 0, reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&errstatus_) + sizeof(key_));
  _cached_size_ = 0;
}

SLMplsIlmRes::~SLMplsIlmRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmRes)
  SharedDtor();
}

void SLMplsIlmRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void SLMplsIlmRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmRes::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[17].descriptor;
}

const SLMplsIlmRes& SLMplsIlmRes::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmRes* SLMplsIlmRes::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmRes* n = new SLMplsIlmRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmRes)
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}

bool SLMplsIlmRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLMplsIlmKey Key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmRes)
  return false;
#undef DO_
}

void SLMplsIlmRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmRes)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmRes)
}

::google::protobuf::uint8* SLMplsIlmRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmRes)
  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->errstatus_, false, target);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmRes)
  return target;
}

size_t SLMplsIlmRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmRes)
  size_t total_size = 0;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmRes)
    MergeFrom(*source);
  }
}

void SLMplsIlmRes::MergeFrom(const SLMplsIlmRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from.key());
  }
}

void SLMplsIlmRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmRes::CopyFrom(const SLMplsIlmRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmRes::IsInitialized() const {
  return true;
}

void SLMplsIlmRes::Swap(SLMplsIlmRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmRes::InternalSwap(SLMplsIlmRes* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(key_, other->key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmRes::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmRes

// .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsIlmRes::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsIlmRes::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsIlmRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmRes.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsIlmRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmRes.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsIlmRes::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsIlmRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmRes.ErrStatus)
}

// .service_layer.SLMplsIlmKey Key = 2;
bool SLMplsIlmRes::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void SLMplsIlmRes::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsIlmKey& SLMplsIlmRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmRes.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLMplsIlmKey::internal_default_instance();
}
::service_layer::SLMplsIlmKey* SLMplsIlmRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsIlmKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmRes.Key)
  return key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmRes::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmRes.Key)
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsIlmRes::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmRes.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmMsgRsp::kCorrelatorFieldNumber;
const int SLMplsIlmMsgRsp::kStatusSummaryFieldNumber;
const int SLMplsIlmMsgRsp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmMsgRsp::SLMplsIlmMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmMsgRsp)
}
SLMplsIlmMsgRsp::SLMplsIlmMsgRsp(const SLMplsIlmMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = NULL;
  }
  correlator_ = from.correlator_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmMsgRsp)
}

void SLMplsIlmMsgRsp::SharedCtor() {
  ::memset(&statussummary_, 0, reinterpret_cast<char*>(&correlator_) -
    reinterpret_cast<char*>(&statussummary_) + sizeof(correlator_));
  _cached_size_ = 0;
}

SLMplsIlmMsgRsp::~SLMplsIlmMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmMsgRsp)
  SharedDtor();
}

void SLMplsIlmMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statussummary_;
  }
}

void SLMplsIlmMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[18].descriptor;
}

const SLMplsIlmMsgRsp& SLMplsIlmMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmMsgRsp* SLMplsIlmMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmMsgRsp* n = new SLMplsIlmMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmMsgRsp)
  results_.Clear();
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) {
    delete statussummary_;
  }
  statussummary_ = NULL;
  correlator_ = GOOGLE_ULONGLONG(0);
}

bool SLMplsIlmMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Correlator = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLErrorStatus StatusSummary = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statussummary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsIlmRes Results = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmMsgRsp)
  return false;
#undef DO_
}

void SLMplsIlmMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmMsgRsp)
  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlator(), output);
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->statussummary_, output);
  }

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmMsgRsp)
}

::google::protobuf::uint8* SLMplsIlmMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmMsgRsp)
  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlator(), target);
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->statussummary_, false, target);
  }

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->results(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmMsgRsp)
  return target;
}

size_t SLMplsIlmMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmMsgRsp)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  // .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statussummary_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsIlmMsgRsp::MergeFrom(const SLMplsIlmMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from.statussummary());
  }
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
}

void SLMplsIlmMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmMsgRsp::CopyFrom(const SLMplsIlmMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsIlmMsgRsp::Swap(SLMplsIlmMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmMsgRsp::InternalSwap(SLMplsIlmMsgRsp* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(statussummary_, other->statussummary_);
  std::swap(correlator_, other->correlator_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmMsgRsp

// uint64 Correlator = 1;
void SLMplsIlmMsgRsp::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SLMplsIlmMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.Correlator)
  return correlator_;
}
void SLMplsIlmMsgRsp::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsgRsp.Correlator)
}

// .service_layer.SLErrorStatus StatusSummary = 2;
bool SLMplsIlmMsgRsp::has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != NULL;
}
void SLMplsIlmMsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsIlmMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  return statussummary_;
}
::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
void SLMplsIlmMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmMsgRsp.StatusSummary)
}

// repeated .service_layer.SLMplsIlmRes Results = 3;
int SLMplsIlmMsgRsp::results_size() const {
  return results_.size();
}
void SLMplsIlmMsgRsp::clear_results() {
  results_.Clear();
}
const ::service_layer::SLMplsIlmRes& SLMplsIlmMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Get(index);
}
::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Mutable(index);
}
::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmRes >*
SLMplsIlmMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmMsgRsp.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmRes >&
SLMplsIlmMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmMsgRsp.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmGetMsg::kCorrelatorFieldNumber;
const int SLMplsIlmGetMsg::kKeyFieldNumber;
const int SLMplsIlmGetMsg::kEntriesCountFieldNumber;
const int SLMplsIlmGetMsg::kGetNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmGetMsg::SLMplsIlmGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmGetMsg)
}
SLMplsIlmGetMsg::SLMplsIlmGetMsg(const SLMplsIlmGetMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::service_layer::SLMplsIlmKey(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&correlator_, &from.correlator_,
    reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmGetMsg)
}

void SLMplsIlmGetMsg::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&key_) + sizeof(getnext_));
  _cached_size_ = 0;
}

SLMplsIlmGetMsg::~SLMplsIlmGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmGetMsg)
  SharedDtor();
}

void SLMplsIlmGetMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void SLMplsIlmGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmGetMsg::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[19].descriptor;
}

const SLMplsIlmGetMsg& SLMplsIlmGetMsg::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmGetMsg* SLMplsIlmGetMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmGetMsg* n = new SLMplsIlmGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmGetMsg)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  ::memset(&correlator_, 0, reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(getnext_));
}

bool SLMplsIlmGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Correlator = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLMplsIlmKey Key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 EntriesCount = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entriescount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GetNext = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getnext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmGetMsg)
  return false;
#undef DO_
}

void SLMplsIlmGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmGetMsg)
  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlator(), output);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entriescount(), output);
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->getnext(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmGetMsg)
}

::google::protobuf::uint8* SLMplsIlmGetMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmGetMsg)
  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlator(), target);
  }

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, false, target);
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entriescount(), target);
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->getnext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmGetMsg)
  return target;
}

size_t SLMplsIlmGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmGetMsg)
  size_t total_size = 0;

  // .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entriescount());
  }

  // bool GetNext = 4;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmGetMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmGetMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmGetMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmGetMsg)
    MergeFrom(*source);
  }
}

void SLMplsIlmGetMsg::MergeFrom(const SLMplsIlmGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from.key());
  }
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
  if (from.entriescount() != 0) {
    set_entriescount(from.entriescount());
  }
  if (from.getnext() != 0) {
    set_getnext(from.getnext());
  }
}

void SLMplsIlmGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmGetMsg::CopyFrom(const SLMplsIlmGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmGetMsg::IsInitialized() const {
  return true;
}

void SLMplsIlmGetMsg::Swap(SLMplsIlmGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmGetMsg::InternalSwap(SLMplsIlmGetMsg* other) {
  std::swap(key_, other->key_);
  std::swap(correlator_, other->correlator_);
  std::swap(entriescount_, other->entriescount_);
  std::swap(getnext_, other->getnext_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmGetMsg::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmGetMsg

// uint64 Correlator = 1;
void SLMplsIlmGetMsg::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SLMplsIlmGetMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.Correlator)
  return correlator_;
}
void SLMplsIlmGetMsg::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.Correlator)
}

// .service_layer.SLMplsIlmKey Key = 2;
bool SLMplsIlmGetMsg::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void SLMplsIlmGetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsIlmKey& SLMplsIlmGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.Key)
  return key_ != NULL ? *key_
                         : *::service_layer::SLMplsIlmKey::internal_default_instance();
}
::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsIlmKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsg.Key)
  return key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmGetMsg.Key)
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsIlmGetMsg::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmGetMsg.Key)
}

// uint32 EntriesCount = 3;
void SLMplsIlmGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
::google::protobuf::uint32 SLMplsIlmGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.EntriesCount)
  return entriescount_;
}
void SLMplsIlmGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.EntriesCount)
}

// bool GetNext = 4;
void SLMplsIlmGetMsg::clear_getnext() {
  getnext_ = false;
}
bool SLMplsIlmGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.GetNext)
  return getnext_;
}
void SLMplsIlmGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.GetNext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmGetMsgRsp::kCorrelatorFieldNumber;
const int SLMplsIlmGetMsgRsp::kEofFieldNumber;
const int SLMplsIlmGetMsgRsp::kErrStatusFieldNumber;
const int SLMplsIlmGetMsgRsp::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmGetMsgRsp::SLMplsIlmGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sl_5fmpls_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmGetMsgRsp)
}
SLMplsIlmGetMsgRsp::SLMplsIlmGetMsgRsp(const SLMplsIlmGetMsgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = NULL;
  }
  ::memcpy(&correlator_, &from.correlator_,
    reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(eof_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmGetMsgRsp)
}

void SLMplsIlmGetMsgRsp::SharedCtor() {
  ::memset(&errstatus_, 0, reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_) + sizeof(eof_));
  _cached_size_ = 0;
}

SLMplsIlmGetMsgRsp::~SLMplsIlmGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmGetMsgRsp)
  SharedDtor();
}

void SLMplsIlmGetMsgRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errstatus_;
  }
}

void SLMplsIlmGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmGetMsgRsp::descriptor() {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[20].descriptor;
}

const SLMplsIlmGetMsgRsp& SLMplsIlmGetMsgRsp::default_instance() {
  protobuf_sl_5fmpls_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLMplsIlmGetMsgRsp* SLMplsIlmGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmGetMsgRsp* n = new SLMplsIlmGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLMplsIlmGetMsgRsp)
  entries_.Clear();
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) {
    delete errstatus_;
  }
  errstatus_ = NULL;
  ::memset(&correlator_, 0, reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&correlator_) + sizeof(eof_));
}

bool SLMplsIlmGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Correlator = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Eof = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .service_layer.SLErrorStatus ErrStatus = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .service_layer.SLMplsIlmEntry Entries = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmGetMsgRsp)
  return false;
#undef DO_
}

void SLMplsIlmGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmGetMsgRsp)
  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlator(), output);
  }

  // bool Eof = 2;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->eof(), output);
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->errstatus_, output);
  }

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmGetMsgRsp)
}

::google::protobuf::uint8* SLMplsIlmGetMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmGetMsgRsp)
  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlator(), target);
  }

  // bool Eof = 2;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->errstatus_, false, target);
  }

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmGetMsgRsp)
  return target;
}

size_t SLMplsIlmGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLMplsIlmGetMsgRsp)
  size_t total_size = 0;

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  // .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // bool Eof = 2;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLMplsIlmGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLMplsIlmGetMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmGetMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLMplsIlmGetMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLMplsIlmGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLMplsIlmGetMsgRsp::MergeFrom(const SLMplsIlmGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLMplsIlmGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
}

void SLMplsIlmGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLMplsIlmGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmGetMsgRsp::CopyFrom(const SLMplsIlmGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLMplsIlmGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmGetMsgRsp::IsInitialized() const {
  return true;
}

void SLMplsIlmGetMsgRsp::Swap(SLMplsIlmGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmGetMsgRsp::InternalSwap(SLMplsIlmGetMsgRsp* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(errstatus_, other->errstatus_);
  std::swap(correlator_, other->correlator_);
  std::swap(eof_, other->eof_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmGetMsgRsp::GetMetadata() const {
  protobuf_sl_5fmpls_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_5fmpls_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmGetMsgRsp

// uint64 Correlator = 1;
void SLMplsIlmGetMsgRsp::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SLMplsIlmGetMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Correlator)
  return correlator_;
}
void SLMplsIlmGetMsgRsp::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsgRsp.Correlator)
}

// bool Eof = 2;
void SLMplsIlmGetMsgRsp::clear_eof() {
  eof_ = false;
}
bool SLMplsIlmGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Eof)
  return eof_;
}
void SLMplsIlmGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 3;
bool SLMplsIlmGetMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void SLMplsIlmGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsIlmGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::service_layer::SLErrorStatus::internal_default_instance();
}
::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsIlmGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLMplsIlmEntry Entries = 4;
int SLMplsIlmGetMsgRsp::entries_size() const {
  return entries_.size();
}
void SLMplsIlmGetMsgRsp::clear_entries() {
  entries_.Clear();
}
const ::service_layer::SLMplsIlmEntry& SLMplsIlmGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Get(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
SLMplsIlmGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
SLMplsIlmGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)
