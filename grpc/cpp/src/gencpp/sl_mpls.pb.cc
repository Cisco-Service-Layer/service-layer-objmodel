// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_mpls.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sl_mpls.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_layer {

namespace {

const ::google::protobuf::Descriptor* SLMplsLabelBlockKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsLabelBlockKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsLabelBlockMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsgRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsLabelBlockMsgRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsLabelBlockMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsLabelBlockGetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsLabelBlockGetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsLabelBlockGetMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsLabelBlockGetMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsRegMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsRegMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsRegMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsRegMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsGetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsGetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsGetMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsGetMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsGetStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsGetStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmGetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmGetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLMplsIlmGetMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLMplsIlmGetMsgRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SlLabelAction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sl_5fmpls_2eproto() {
  protobuf_AddDesc_sl_5fmpls_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sl_mpls.proto");
  GOOGLE_CHECK(file != NULL);
  SLMplsLabelBlockKey_descriptor_ = file->message_type(0);
  static const int SLMplsLabelBlockKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, startlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, labelblocksize_),
  };
  SLMplsLabelBlockKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsLabelBlockKey_descriptor_,
      SLMplsLabelBlockKey::default_instance_,
      SLMplsLabelBlockKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsLabelBlockKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockKey, _is_default_instance_));
  SLMplsLabelBlockMsg_descriptor_ = file->message_type(1);
  static const int SLMplsLabelBlockMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, mplsblocks_),
  };
  SLMplsLabelBlockMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsLabelBlockMsg_descriptor_,
      SLMplsLabelBlockMsg::default_instance_,
      SLMplsLabelBlockMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsLabelBlockMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsg, _is_default_instance_));
  SLMplsLabelBlockMsgRes_descriptor_ = file->message_type(2);
  static const int SLMplsLabelBlockMsgRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, key_),
  };
  SLMplsLabelBlockMsgRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsLabelBlockMsgRes_descriptor_,
      SLMplsLabelBlockMsgRes::default_instance_,
      SLMplsLabelBlockMsgRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsLabelBlockMsgRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRes, _is_default_instance_));
  SLMplsLabelBlockMsgRsp_descriptor_ = file->message_type(3);
  static const int SLMplsLabelBlockMsgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, statussummary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, results_),
  };
  SLMplsLabelBlockMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsLabelBlockMsgRsp_descriptor_,
      SLMplsLabelBlockMsgRsp::default_instance_,
      SLMplsLabelBlockMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsLabelBlockMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockMsgRsp, _is_default_instance_));
  SLMplsLabelBlockGetMsg_descriptor_ = file->message_type(4);
  static const int SLMplsLabelBlockGetMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, entriescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, getnext_),
  };
  SLMplsLabelBlockGetMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsLabelBlockGetMsg_descriptor_,
      SLMplsLabelBlockGetMsg::default_instance_,
      SLMplsLabelBlockGetMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsLabelBlockGetMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsg, _is_default_instance_));
  SLMplsLabelBlockGetMsgRsp_descriptor_ = file->message_type(5);
  static const int SLMplsLabelBlockGetMsgRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, entries_),
  };
  SLMplsLabelBlockGetMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsLabelBlockGetMsgRsp_descriptor_,
      SLMplsLabelBlockGetMsgRsp::default_instance_,
      SLMplsLabelBlockGetMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsLabelBlockGetMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsLabelBlockGetMsgRsp, _is_default_instance_));
  SLMplsRegMsg_descriptor_ = file->message_type(6);
  static const int SLMplsRegMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsg, oper_),
  };
  SLMplsRegMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsRegMsg_descriptor_,
      SLMplsRegMsg::default_instance_,
      SLMplsRegMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsRegMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsg, _is_default_instance_));
  SLMplsRegMsgRsp_descriptor_ = file->message_type(7);
  static const int SLMplsRegMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsgRsp, errstatus_),
  };
  SLMplsRegMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsRegMsgRsp_descriptor_,
      SLMplsRegMsgRsp::default_instance_,
      SLMplsRegMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsRegMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsRegMsgRsp, _is_default_instance_));
  SLMplsGetMsg_descriptor_ = file->message_type(8);
  static const int SLMplsGetMsg_offsets_[1] = {
  };
  SLMplsGetMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsGetMsg_descriptor_,
      SLMplsGetMsg::default_instance_,
      SLMplsGetMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsGetMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsg, _is_default_instance_));
  SLMplsGetMsgRsp_descriptor_ = file->message_type(9);
  static const int SLMplsGetMsgRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxlabelsperblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxlabelblocksperlabelblockmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, minstartlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, labeltablesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxilmperilmmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, maxpathsperilm_),
  };
  SLMplsGetMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsGetMsgRsp_descriptor_,
      SLMplsGetMsgRsp::default_instance_,
      SLMplsGetMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsGetMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetMsgRsp, _is_default_instance_));
  SLMplsGetStatsMsgRsp_descriptor_ = file->message_type(10);
  static const int SLMplsGetStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, errstatus_),
  };
  SLMplsGetStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsGetStatsMsgRsp_descriptor_,
      SLMplsGetStatsMsgRsp::default_instance_,
      SLMplsGetStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsGetStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsGetStatsMsgRsp, _is_default_instance_));
  SLMplsPath_descriptor_ = file->message_type(11);
  static const int SLMplsPath_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, nexthopaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, nexthopinterface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, loadmetric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, vrfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, protectedpathbitmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, labelstack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, remoteaddress_),
  };
  SLMplsPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsPath_descriptor_,
      SLMplsPath::default_instance_,
      SLMplsPath_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsPath, _is_default_instance_));
  SLMplsIlmKey_descriptor_ = file->message_type(12);
  static const int SLMplsIlmKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmKey, locallabel_),
  };
  SLMplsIlmKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmKey_descriptor_,
      SLMplsIlmKey::default_instance_,
      SLMplsIlmKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmKey, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmKey, _is_default_instance_));
  SLMplsIlmEntry_descriptor_ = file->message_type(13);
  static const int SLMplsIlmEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, paths_),
  };
  SLMplsIlmEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmEntry_descriptor_,
      SLMplsIlmEntry::default_instance_,
      SLMplsIlmEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmEntry, _is_default_instance_));
  SLMplsIlmMsg_descriptor_ = file->message_type(14);
  static const int SLMplsIlmMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, correlator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, mplsilms_),
  };
  SLMplsIlmMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmMsg_descriptor_,
      SLMplsIlmMsg::default_instance_,
      SLMplsIlmMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsg, _is_default_instance_));
  SLMplsIlmRes_descriptor_ = file->message_type(15);
  static const int SLMplsIlmRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, key_),
  };
  SLMplsIlmRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmRes_descriptor_,
      SLMplsIlmRes::default_instance_,
      SLMplsIlmRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmRes, _is_default_instance_));
  SLMplsIlmMsgRsp_descriptor_ = file->message_type(16);
  static const int SLMplsIlmMsgRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, correlator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, statussummary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, results_),
  };
  SLMplsIlmMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmMsgRsp_descriptor_,
      SLMplsIlmMsgRsp::default_instance_,
      SLMplsIlmMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmMsgRsp, _is_default_instance_));
  SLMplsIlmGetMsg_descriptor_ = file->message_type(17);
  static const int SLMplsIlmGetMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, correlator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, entriescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, getnext_),
  };
  SLMplsIlmGetMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmGetMsg_descriptor_,
      SLMplsIlmGetMsg::default_instance_,
      SLMplsIlmGetMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmGetMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsg, _is_default_instance_));
  SLMplsIlmGetMsgRsp_descriptor_ = file->message_type(18);
  static const int SLMplsIlmGetMsgRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, correlator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, errstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, entries_),
  };
  SLMplsIlmGetMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SLMplsIlmGetMsgRsp_descriptor_,
      SLMplsIlmGetMsgRsp::default_instance_,
      SLMplsIlmGetMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(SLMplsIlmGetMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLMplsIlmGetMsgRsp, _is_default_instance_));
  SlLabelAction_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sl_5fmpls_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsLabelBlockKey_descriptor_, &SLMplsLabelBlockKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsLabelBlockMsg_descriptor_, &SLMplsLabelBlockMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsLabelBlockMsgRes_descriptor_, &SLMplsLabelBlockMsgRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsLabelBlockMsgRsp_descriptor_, &SLMplsLabelBlockMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsLabelBlockGetMsg_descriptor_, &SLMplsLabelBlockGetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsLabelBlockGetMsgRsp_descriptor_, &SLMplsLabelBlockGetMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsRegMsg_descriptor_, &SLMplsRegMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsRegMsgRsp_descriptor_, &SLMplsRegMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsGetMsg_descriptor_, &SLMplsGetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsGetMsgRsp_descriptor_, &SLMplsGetMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsGetStatsMsgRsp_descriptor_, &SLMplsGetStatsMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsPath_descriptor_, &SLMplsPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmKey_descriptor_, &SLMplsIlmKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmEntry_descriptor_, &SLMplsIlmEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmMsg_descriptor_, &SLMplsIlmMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmRes_descriptor_, &SLMplsIlmRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmMsgRsp_descriptor_, &SLMplsIlmMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmGetMsg_descriptor_, &SLMplsIlmGetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SLMplsIlmGetMsgRsp_descriptor_, &SLMplsIlmGetMsgRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sl_5fmpls_2eproto() {
  delete SLMplsLabelBlockKey::default_instance_;
  delete SLMplsLabelBlockKey_reflection_;
  delete SLMplsLabelBlockMsg::default_instance_;
  delete SLMplsLabelBlockMsg_reflection_;
  delete SLMplsLabelBlockMsgRes::default_instance_;
  delete SLMplsLabelBlockMsgRes_reflection_;
  delete SLMplsLabelBlockMsgRsp::default_instance_;
  delete SLMplsLabelBlockMsgRsp_reflection_;
  delete SLMplsLabelBlockGetMsg::default_instance_;
  delete SLMplsLabelBlockGetMsg_reflection_;
  delete SLMplsLabelBlockGetMsgRsp::default_instance_;
  delete SLMplsLabelBlockGetMsgRsp_reflection_;
  delete SLMplsRegMsg::default_instance_;
  delete SLMplsRegMsg_reflection_;
  delete SLMplsRegMsgRsp::default_instance_;
  delete SLMplsRegMsgRsp_reflection_;
  delete SLMplsGetMsg::default_instance_;
  delete SLMplsGetMsg_reflection_;
  delete SLMplsGetMsgRsp::default_instance_;
  delete SLMplsGetMsgRsp_reflection_;
  delete SLMplsGetStatsMsgRsp::default_instance_;
  delete SLMplsGetStatsMsgRsp_reflection_;
  delete SLMplsPath::default_instance_;
  delete SLMplsPath_reflection_;
  delete SLMplsIlmKey::default_instance_;
  delete SLMplsIlmKey_reflection_;
  delete SLMplsIlmEntry::default_instance_;
  delete SLMplsIlmEntry_reflection_;
  delete SLMplsIlmMsg::default_instance_;
  delete SLMplsIlmMsg_reflection_;
  delete SLMplsIlmRes::default_instance_;
  delete SLMplsIlmRes_reflection_;
  delete SLMplsIlmMsgRsp::default_instance_;
  delete SLMplsIlmMsgRsp_reflection_;
  delete SLMplsIlmGetMsg::default_instance_;
  delete SLMplsIlmGetMsg_reflection_;
  delete SLMplsIlmGetMsgRsp::default_instance_;
  delete SLMplsIlmGetMsgRsp_reflection_;
}

void protobuf_AddDesc_sl_5fmpls_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_layer::protobuf_AddDesc_sl_5fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsl_mpls.proto\022\rservice_layer\032\025sl_commo"
    "n_types.proto\"A\n\023SLMplsLabelBlockKey\022\022\n\n"
    "StartLabel\030\001 \001(\r\022\026\n\016LabelBlockSize\030\002 \001(\r"
    "\"v\n\023SLMplsLabelBlockMsg\022\'\n\004Oper\030\001 \001(\0162\031."
    "service_layer.SLObjectOp\0226\n\nMplsBlocks\030\002"
    " \003(\0132\".service_layer.SLMplsLabelBlockKey"
    "\"z\n\026SLMplsLabelBlockMsgRes\022/\n\tErrStatus\030"
    "\001 \001(\0132\034.service_layer.SLErrorStatus\022/\n\003K"
    "ey\030\002 \001(\0132\".service_layer.SLMplsLabelBloc"
    "kKey\"\205\001\n\026SLMplsLabelBlockMsgRsp\0223\n\rStatu"
    "sSummary\030\001 \001(\0132\034.service_layer.SLErrorSt"
    "atus\0226\n\007Results\030\002 \003(\0132%.service_layer.SL"
    "MplsLabelBlockMsgRes\"p\n\026SLMplsLabelBlock"
    "GetMsg\022/\n\003Key\030\001 \001(\0132\".service_layer.SLMp"
    "lsLabelBlockKey\022\024\n\014EntriesCount\030\002 \001(\r\022\017\n"
    "\007GetNext\030\003 \001(\010\"\216\001\n\031SLMplsLabelBlockGetMs"
    "gRsp\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001(\0132\034.s"
    "ervice_layer.SLErrorStatus\0223\n\007Entries\030\003 "
    "\003(\0132\".service_layer.SLMplsLabelBlockKey\""
    "4\n\014SLMplsRegMsg\022$\n\004Oper\030\001 \001(\0162\026.service_"
    "layer.SLRegOp\"B\n\017SLMplsRegMsgRsp\022/\n\tErrS"
    "tatus\030\001 \001(\0132\034.service_layer.SLErrorStatu"
    "s\"\016\n\014SLMplsGetMsg\"\345\001\n\017SLMplsGetMsgRsp\022/\n"
    "\tErrStatus\030\001 \001(\0132\034.service_layer.SLError"
    "Status\022\031\n\021MaxLabelsPerBlock\030\002 \001(\r\022&\n\036Max"
    "LabelblocksPerLabelblockmsg\030\003 \001(\r\022\025\n\rMin"
    "StartLabel\030\004 \001(\r\022\026\n\016LabelTableSize\030\005 \001(\r"
    "\022\027\n\017MaxIlmPerIlmmsg\030\006 \001(\r\022\026\n\016MaxPathsPer"
    "Ilm\030\007 \001(\r\"G\n\024SLMplsGetStatsMsgRsp\022/\n\tErr"
    "Status\030\001 \001(\0132\034.service_layer.SLErrorStat"
    "us\"\275\002\n\nSLMplsPath\0222\n\016NexthopAddress\030\001 \001("
    "\0132\032.service_layer.SLIpAddress\0224\n\020Nexthop"
    "Interface\030\002 \001(\0132\032.service_layer.SLInterf"
    "ace\022\022\n\nLoadMetric\030\003 \001(\r\022\017\n\007VrfName\030\004 \001(\t"
    "\022,\n\006Action\030\005 \001(\0162\034.service_layer.SlLabel"
    "Action\022\016\n\006PathId\030\006 \001(\r\022\033\n\023ProtectedPathB"
    "itmap\030\007 \003(\004\022\022\n\nLabelStack\030\010 \003(\r\0221\n\rRemot"
    "eAddress\030\t \003(\0132\032.service_layer.SLIpAddre"
    "ss\"\"\n\014SLMplsIlmKey\022\022\n\nLocalLabel\030\001 \001(\r\"d"
    "\n\016SLMplsIlmEntry\022(\n\003Key\030\001 \001(\0132\033.service_"
    "layer.SLMplsIlmKey\022(\n\005Paths\030\002 \003(\0132\031.serv"
    "ice_layer.SLMplsPath\"|\n\014SLMplsIlmMsg\022\'\n\004"
    "Oper\030\001 \001(\0162\031.service_layer.SLObjectOp\022\022\n"
    "\nCorrelator\030\002 \001(\004\022/\n\010MplsIlms\030\003 \003(\0132\035.se"
    "rvice_layer.SLMplsIlmEntry\"i\n\014SLMplsIlmR"
    "es\022/\n\tErrStatus\030\001 \001(\0132\034.service_layer.SL"
    "ErrorStatus\022(\n\003Key\030\002 \001(\0132\033.service_layer"
    ".SLMplsIlmKey\"\210\001\n\017SLMplsIlmMsgRsp\022\022\n\nCor"
    "relator\030\001 \001(\004\0223\n\rStatusSummary\030\002 \001(\0132\034.s"
    "ervice_layer.SLErrorStatus\022,\n\007Results\030\003 "
    "\003(\0132\033.service_layer.SLMplsIlmRes\"v\n\017SLMp"
    "lsIlmGetMsg\022\022\n\nCorrelator\030\001 \001(\004\022(\n\003Key\030\002"
    " \001(\0132\033.service_layer.SLMplsIlmKey\022\024\n\014Ent"
    "riesCount\030\003 \001(\r\022\017\n\007GetNext\030\004 \001(\010\"\226\001\n\022SLM"
    "plsIlmGetMsgRsp\022\022\n\nCorrelator\030\001 \001(\004\022\013\n\003E"
    "of\030\002 \001(\010\022/\n\tErrStatus\030\003 \001(\0132\034.service_la"
    "yer.SLErrorStatus\022.\n\007Entries\030\004 \003(\0132\035.ser"
    "vice_layer.SLMplsIlmEntry*\276\001\n\rSlLabelAct"
    "ion\022\034\n\030SL_LABEL_ACTION_RESERVED\020\000\022\030\n\024SL_"
    "LABEL_ACTION_SWAP\020\001\022#\n\037SL_LABEL_ACTION_P"
    "OP_AND_FORWARD\020\002\022\'\n#SL_LABEL_ACTION_POP_"
    "AND_LOOKUP_IPV4\020\003\022\'\n#SL_LABEL_ACTION_POP"
    "_AND_LOOKUP_IPV6\020\0042\221\006\n\nSLMplsOper\022J\n\013SLM"
    "plsRegOp\022\033.service_layer.SLMplsRegMsg\032\036."
    "service_layer.SLMplsRegMsgRsp\022H\n\tSLMplsG"
    "et\022\033.service_layer.SLMplsGetMsg\032\036.servic"
    "e_layer.SLMplsGetMsgRsp\022R\n\016SLMplsGetStat"
    "s\022\033.service_layer.SLMplsGetMsg\032#.service"
    "_layer.SLMplsGetStatsMsgRsp\022_\n\022SLMplsLab"
    "elBlockOp\022\".service_layer.SLMplsLabelBlo"
    "ckMsg\032%.service_layer.SLMplsLabelBlockMs"
    "gRsp\022f\n\023SLMplsLabelBlockGet\022%.service_la"
    "yer.SLMplsLabelBlockGetMsg\032(.service_lay"
    "er.SLMplsLabelBlockGetMsgRsp\022J\n\013SLMplsIl"
    "mOp\022\033.service_layer.SLMplsIlmMsg\032\036.servi"
    "ce_layer.SLMplsIlmMsgRsp\022Q\n\014SLMplsIlmGet"
    "\022\036.service_layer.SLMplsIlmGetMsg\032!.servi"
    "ce_layer.SLMplsIlmGetMsgRsp\022T\n\021SLMplsIlm"
    "OpStream\022\033.service_layer.SLMplsIlmMsg\032\036."
    "service_layer.SLMplsIlmMsgRsp(\0010\001\022[\n\022SLM"
    "plsIlmGetStream\022\036.service_layer.SLMplsIl"
    "mGetMsg\032!.service_layer.SLMplsIlmGetMsgR"
    "sp(\0010\001b\006proto3", 3294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl_mpls.proto", &protobuf_RegisterTypes);
  SLMplsLabelBlockKey::default_instance_ = new SLMplsLabelBlockKey();
  SLMplsLabelBlockMsg::default_instance_ = new SLMplsLabelBlockMsg();
  SLMplsLabelBlockMsgRes::default_instance_ = new SLMplsLabelBlockMsgRes();
  SLMplsLabelBlockMsgRsp::default_instance_ = new SLMplsLabelBlockMsgRsp();
  SLMplsLabelBlockGetMsg::default_instance_ = new SLMplsLabelBlockGetMsg();
  SLMplsLabelBlockGetMsgRsp::default_instance_ = new SLMplsLabelBlockGetMsgRsp();
  SLMplsRegMsg::default_instance_ = new SLMplsRegMsg();
  SLMplsRegMsgRsp::default_instance_ = new SLMplsRegMsgRsp();
  SLMplsGetMsg::default_instance_ = new SLMplsGetMsg();
  SLMplsGetMsgRsp::default_instance_ = new SLMplsGetMsgRsp();
  SLMplsGetStatsMsgRsp::default_instance_ = new SLMplsGetStatsMsgRsp();
  SLMplsPath::default_instance_ = new SLMplsPath();
  SLMplsIlmKey::default_instance_ = new SLMplsIlmKey();
  SLMplsIlmEntry::default_instance_ = new SLMplsIlmEntry();
  SLMplsIlmMsg::default_instance_ = new SLMplsIlmMsg();
  SLMplsIlmRes::default_instance_ = new SLMplsIlmRes();
  SLMplsIlmMsgRsp::default_instance_ = new SLMplsIlmMsgRsp();
  SLMplsIlmGetMsg::default_instance_ = new SLMplsIlmGetMsg();
  SLMplsIlmGetMsgRsp::default_instance_ = new SLMplsIlmGetMsgRsp();
  SLMplsLabelBlockKey::default_instance_->InitAsDefaultInstance();
  SLMplsLabelBlockMsg::default_instance_->InitAsDefaultInstance();
  SLMplsLabelBlockMsgRes::default_instance_->InitAsDefaultInstance();
  SLMplsLabelBlockMsgRsp::default_instance_->InitAsDefaultInstance();
  SLMplsLabelBlockGetMsg::default_instance_->InitAsDefaultInstance();
  SLMplsLabelBlockGetMsgRsp::default_instance_->InitAsDefaultInstance();
  SLMplsRegMsg::default_instance_->InitAsDefaultInstance();
  SLMplsRegMsgRsp::default_instance_->InitAsDefaultInstance();
  SLMplsGetMsg::default_instance_->InitAsDefaultInstance();
  SLMplsGetMsgRsp::default_instance_->InitAsDefaultInstance();
  SLMplsGetStatsMsgRsp::default_instance_->InitAsDefaultInstance();
  SLMplsPath::default_instance_->InitAsDefaultInstance();
  SLMplsIlmKey::default_instance_->InitAsDefaultInstance();
  SLMplsIlmEntry::default_instance_->InitAsDefaultInstance();
  SLMplsIlmMsg::default_instance_->InitAsDefaultInstance();
  SLMplsIlmRes::default_instance_->InitAsDefaultInstance();
  SLMplsIlmMsgRsp::default_instance_->InitAsDefaultInstance();
  SLMplsIlmGetMsg::default_instance_->InitAsDefaultInstance();
  SLMplsIlmGetMsgRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sl_5fmpls_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sl_5fmpls_2eproto {
  StaticDescriptorInitializer_sl_5fmpls_2eproto() {
    protobuf_AddDesc_sl_5fmpls_2eproto();
  }
} static_descriptor_initializer_sl_5fmpls_2eproto_;
const ::google::protobuf::EnumDescriptor* SlLabelAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlLabelAction_descriptor_;
}
bool SlLabelAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockKey::kStartLabelFieldNumber;
const int SLMplsLabelBlockKey::kLabelBlockSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockKey::SLMplsLabelBlockKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockKey)
}

void SLMplsLabelBlockKey::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLMplsLabelBlockKey::SLMplsLabelBlockKey(const SLMplsLabelBlockKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockKey)
}

void SLMplsLabelBlockKey::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  startlabel_ = 0u;
  labelblocksize_ = 0u;
}

SLMplsLabelBlockKey::~SLMplsLabelBlockKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockKey)
  SharedDtor();
}

void SLMplsLabelBlockKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLMplsLabelBlockKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsLabelBlockKey_descriptor_;
}

const SLMplsLabelBlockKey& SLMplsLabelBlockKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsLabelBlockKey* SLMplsLabelBlockKey::default_instance_ = NULL;

SLMplsLabelBlockKey* SLMplsLabelBlockKey::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockKey* n = new SLMplsLabelBlockKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockKey::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLMplsLabelBlockKey*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(startlabel_, labelblocksize_);

#undef ZR_HELPER_
#undef ZR_

}

bool SLMplsLabelBlockKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StartLabel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startlabel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LabelBlockSize;
        break;
      }

      // optional uint32 LabelBlockSize = 2;
      case 2: {
        if (tag == 16) {
         parse_LabelBlockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labelblocksize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockKey)
  return false;
#undef DO_
}

void SLMplsLabelBlockKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockKey)
  // optional uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startlabel(), output);
  }

  // optional uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->labelblocksize(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockKey)
}

::google::protobuf::uint8* SLMplsLabelBlockKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockKey)
  // optional uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startlabel(), target);
  }

  // optional uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->labelblocksize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockKey)
  return target;
}

int SLMplsLabelBlockKey::ByteSize() const {
  int total_size = 0;

  // optional uint32 StartLabel = 1;
  if (this->startlabel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startlabel());
  }

  // optional uint32 LabelBlockSize = 2;
  if (this->labelblocksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labelblocksize());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockKey::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsLabelBlockKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockKey>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockKey::MergeFrom(const SLMplsLabelBlockKey& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.startlabel() != 0) {
    set_startlabel(from.startlabel());
  }
  if (from.labelblocksize() != 0) {
    set_labelblocksize(from.labelblocksize());
  }
}

void SLMplsLabelBlockKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockKey::CopyFrom(const SLMplsLabelBlockKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockKey::IsInitialized() const {

  return true;
}

void SLMplsLabelBlockKey::Swap(SLMplsLabelBlockKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockKey::InternalSwap(SLMplsLabelBlockKey* other) {
  std::swap(startlabel_, other->startlabel_);
  std::swap(labelblocksize_, other->labelblocksize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsLabelBlockKey_descriptor_;
  metadata.reflection = SLMplsLabelBlockKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockKey

// optional uint32 StartLabel = 1;
void SLMplsLabelBlockKey::clear_startlabel() {
  startlabel_ = 0u;
}
 ::google::protobuf::uint32 SLMplsLabelBlockKey::startlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.StartLabel)
  return startlabel_;
}
 void SLMplsLabelBlockKey::set_startlabel(::google::protobuf::uint32 value) {
  
  startlabel_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.StartLabel)
}

// optional uint32 LabelBlockSize = 2;
void SLMplsLabelBlockKey::clear_labelblocksize() {
  labelblocksize_ = 0u;
}
 ::google::protobuf::uint32 SLMplsLabelBlockKey::labelblocksize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.LabelBlockSize)
  return labelblocksize_;
}
 void SLMplsLabelBlockKey::set_labelblocksize(::google::protobuf::uint32 value) {
  
  labelblocksize_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.LabelBlockSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockMsg::kOperFieldNumber;
const int SLMplsLabelBlockMsg::kMplsBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockMsg::SLMplsLabelBlockMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockMsg)
}

void SLMplsLabelBlockMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLMplsLabelBlockMsg::SLMplsLabelBlockMsg(const SLMplsLabelBlockMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsg)
}

void SLMplsLabelBlockMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oper_ = 0;
}

SLMplsLabelBlockMsg::~SLMplsLabelBlockMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsg)
  SharedDtor();
}

void SLMplsLabelBlockMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLMplsLabelBlockMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsLabelBlockMsg_descriptor_;
}

const SLMplsLabelBlockMsg& SLMplsLabelBlockMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsLabelBlockMsg* SLMplsLabelBlockMsg::default_instance_ = NULL;

SLMplsLabelBlockMsg* SLMplsLabelBlockMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockMsg* n = new SLMplsLabelBlockMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockMsg::Clear() {
  oper_ = 0;
  mplsblocks_.Clear();
}

bool SLMplsLabelBlockMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLObjectOp Oper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLObjectOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MplsBlocks;
        break;
      }

      // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
      case 2: {
        if (tag == 18) {
         parse_MplsBlocks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_MplsBlocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mplsblocks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_MplsBlocks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockMsg)
  return false;
#undef DO_
}

void SLMplsLabelBlockMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockMsg)
  // optional .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  for (unsigned int i = 0, n = this->mplsblocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mplsblocks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockMsg)
}

::google::protobuf::uint8* SLMplsLabelBlockMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsg)
  // optional .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  for (unsigned int i = 0, n = this->mplsblocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mplsblocks(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsg)
  return target;
}

int SLMplsLabelBlockMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  total_size += 1 * this->mplsblocks_size();
  for (int i = 0; i < this->mplsblocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mplsblocks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsLabelBlockMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsg::MergeFrom(const SLMplsLabelBlockMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mplsblocks_.MergeFrom(from.mplsblocks_);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLMplsLabelBlockMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsg::CopyFrom(const SLMplsLabelBlockMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsg::IsInitialized() const {

  return true;
}

void SLMplsLabelBlockMsg::Swap(SLMplsLabelBlockMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockMsg::InternalSwap(SLMplsLabelBlockMsg* other) {
  std::swap(oper_, other->oper_);
  mplsblocks_.UnsafeArenaSwap(&other->mplsblocks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsLabelBlockMsg_descriptor_;
  metadata.reflection = SLMplsLabelBlockMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockMsg

// optional .service_layer.SLObjectOp Oper = 1;
void SLMplsLabelBlockMsg::clear_oper() {
  oper_ = 0;
}
 ::service_layer::SLObjectOp SLMplsLabelBlockMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsg.Oper)
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
 void SLMplsLabelBlockMsg::set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockMsg.Oper)
}

// repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
int SLMplsLabelBlockMsg::mplsblocks_size() const {
  return mplsblocks_.size();
}
void SLMplsLabelBlockMsg::clear_mplsblocks() {
  mplsblocks_.Clear();
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsg::mplsblocks(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Get(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::mutable_mplsblocks(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Mutable(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::add_mplsblocks() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
SLMplsLabelBlockMsg::mutable_mplsblocks() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return &mplsblocks_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
SLMplsLabelBlockMsg::mplsblocks() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockMsgRes::kErrStatusFieldNumber;
const int SLMplsLabelBlockMsgRes::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockMsgRes::SLMplsLabelBlockMsgRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockMsgRes)
}

void SLMplsLabelBlockMsgRes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
  key_ = const_cast< ::service_layer::SLMplsLabelBlockKey*>(&::service_layer::SLMplsLabelBlockKey::default_instance());
}

SLMplsLabelBlockMsgRes::SLMplsLabelBlockMsgRes(const SLMplsLabelBlockMsgRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsgRes)
}

void SLMplsLabelBlockMsgRes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  key_ = NULL;
}

SLMplsLabelBlockMsgRes::~SLMplsLabelBlockMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsgRes)
  SharedDtor();
}

void SLMplsLabelBlockMsgRes::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
    delete key_;
  }
}

void SLMplsLabelBlockMsgRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsgRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsLabelBlockMsgRes_descriptor_;
}

const SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRes::default_instance_ = NULL;

SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRes::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockMsgRes* n = new SLMplsLabelBlockMsgRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockMsgRes::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool SLMplsLabelBlockMsgRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockMsgRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // optional .service_layer.SLMplsLabelBlockKey Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockMsgRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockMsgRes)
  return false;
#undef DO_
}

void SLMplsLabelBlockMsgRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockMsgRes)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockMsgRes)
}

::google::protobuf::uint8* SLMplsLabelBlockMsgRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsgRes)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsgRes)
  return target;
}

int SLMplsLabelBlockMsgRes::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional .service_layer.SLMplsLabelBlockKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockMsgRes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsLabelBlockMsgRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockMsgRes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsgRes::MergeFrom(const SLMplsLabelBlockMsgRes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsLabelBlockKey::MergeFrom(from.key());
  }
}

void SLMplsLabelBlockMsgRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsgRes::CopyFrom(const SLMplsLabelBlockMsgRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsgRes::IsInitialized() const {

  return true;
}

void SLMplsLabelBlockMsgRes::Swap(SLMplsLabelBlockMsgRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockMsgRes::InternalSwap(SLMplsLabelBlockMsgRes* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockMsgRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsLabelBlockMsgRes_descriptor_;
  metadata.reflection = SLMplsLabelBlockMsgRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockMsgRes

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsLabelBlockMsgRes::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsLabelBlockMsgRes::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsLabelBlockMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
}

// optional .service_layer.SLMplsLabelBlockKey Key = 2;
bool SLMplsLabelBlockMsgRes::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLMplsLabelBlockMsgRes::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsgRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRes.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsLabelBlockKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRes.Key)
  return key_;
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::release_key() {
  
  ::service_layer::SLMplsLabelBlockKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsLabelBlockMsgRes::set_allocated_key(::service_layer::SLMplsLabelBlockKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRes.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockMsgRsp::kStatusSummaryFieldNumber;
const int SLMplsLabelBlockMsgRsp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockMsgRsp::SLMplsLabelBlockMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockMsgRsp)
}

void SLMplsLabelBlockMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsLabelBlockMsgRsp::SLMplsLabelBlockMsgRsp(const SLMplsLabelBlockMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockMsgRsp)
}

void SLMplsLabelBlockMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  statussummary_ = NULL;
}

SLMplsLabelBlockMsgRsp::~SLMplsLabelBlockMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockMsgRsp)
  SharedDtor();
}

void SLMplsLabelBlockMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete statussummary_;
  }
}

void SLMplsLabelBlockMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsLabelBlockMsgRsp_descriptor_;
}

const SLMplsLabelBlockMsgRsp& SLMplsLabelBlockMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsLabelBlockMsgRsp* SLMplsLabelBlockMsgRsp::default_instance_ = NULL;

SLMplsLabelBlockMsgRsp* SLMplsLabelBlockMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockMsgRsp* n = new SLMplsLabelBlockMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
  results_.Clear();
}

bool SLMplsLabelBlockMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus StatusSummary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statussummary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Results;
        break;
      }

      // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
      case 2: {
        if (tag == 18) {
         parse_Results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockMsgRsp)
  return false;
#undef DO_
}

void SLMplsLabelBlockMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockMsgRsp)
  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statussummary_, output);
  }

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockMsgRsp)
}

::google::protobuf::uint8* SLMplsLabelBlockMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockMsgRsp)
  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->statussummary_, target);
  }

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockMsgRsp)
  return target;
}

int SLMplsLabelBlockMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statussummary_);
  }

  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsLabelBlockMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockMsgRsp::MergeFrom(const SLMplsLabelBlockMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from.statussummary());
  }
}

void SLMplsLabelBlockMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockMsgRsp::CopyFrom(const SLMplsLabelBlockMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsLabelBlockMsgRsp::Swap(SLMplsLabelBlockMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockMsgRsp::InternalSwap(SLMplsLabelBlockMsgRsp* other) {
  std::swap(statussummary_, other->statussummary_);
  results_.UnsafeArenaSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsLabelBlockMsgRsp_descriptor_;
  metadata.reflection = SLMplsLabelBlockMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockMsgRsp

// optional .service_layer.SLErrorStatus StatusSummary = 1;
bool SLMplsLabelBlockMsgRsp::has_statussummary() const {
  return !_is_default_instance_ && statussummary_ != NULL;
}
void SLMplsLabelBlockMsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_ : *default_instance_->statussummary_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  return statussummary_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
void SLMplsLabelBlockMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
}

// repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
int SLMplsLabelBlockMsgRsp::results_size() const {
  return results_.size();
}
void SLMplsLabelBlockMsgRsp::clear_results() {
  results_.Clear();
}
const ::service_layer::SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Get(index);
}
::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Mutable(index);
}
::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >*
SLMplsLabelBlockMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >&
SLMplsLabelBlockMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockGetMsg::kKeyFieldNumber;
const int SLMplsLabelBlockGetMsg::kEntriesCountFieldNumber;
const int SLMplsLabelBlockGetMsg::kGetNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockGetMsg::SLMplsLabelBlockGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockGetMsg)
}

void SLMplsLabelBlockGetMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::service_layer::SLMplsLabelBlockKey*>(&::service_layer::SLMplsLabelBlockKey::default_instance());
}

SLMplsLabelBlockGetMsg::SLMplsLabelBlockGetMsg(const SLMplsLabelBlockGetMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockGetMsg)
}

void SLMplsLabelBlockGetMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
  entriescount_ = 0u;
  getnext_ = false;
}

SLMplsLabelBlockGetMsg::~SLMplsLabelBlockGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockGetMsg)
  SharedDtor();
}

void SLMplsLabelBlockGetMsg::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void SLMplsLabelBlockGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockGetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsLabelBlockGetMsg_descriptor_;
}

const SLMplsLabelBlockGetMsg& SLMplsLabelBlockGetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsLabelBlockGetMsg* SLMplsLabelBlockGetMsg::default_instance_ = NULL;

SLMplsLabelBlockGetMsg* SLMplsLabelBlockGetMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockGetMsg* n = new SLMplsLabelBlockGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockGetMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLMplsLabelBlockGetMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(entriescount_, getnext_);
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLMplsLabelBlockGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLMplsLabelBlockKey Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EntriesCount;
        break;
      }

      // optional uint32 EntriesCount = 2;
      case 2: {
        if (tag == 16) {
         parse_EntriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entriescount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GetNext;
        break;
      }

      // optional bool GetNext = 3;
      case 3: {
        if (tag == 24) {
         parse_GetNext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getnext_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockGetMsg)
  return false;
#undef DO_
}

void SLMplsLabelBlockGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockGetMsg)
  // optional .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entriescount(), output);
  }

  // optional bool GetNext = 3;
  if (this->getnext() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->getnext(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockGetMsg)
}

::google::protobuf::uint8* SLMplsLabelBlockGetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockGetMsg)
  // optional .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->key_, target);
  }

  // optional uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entriescount(), target);
  }

  // optional bool GetNext = 3;
  if (this->getnext() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->getnext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockGetMsg)
  return target;
}

int SLMplsLabelBlockGetMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLMplsLabelBlockKey Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entriescount());
  }

  // optional bool GetNext = 3;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsLabelBlockGetMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockGetMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockGetMsg::MergeFrom(const SLMplsLabelBlockGetMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsLabelBlockKey::MergeFrom(from.key());
  }
  if (from.entriescount() != 0) {
    set_entriescount(from.entriescount());
  }
  if (from.getnext() != 0) {
    set_getnext(from.getnext());
  }
}

void SLMplsLabelBlockGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockGetMsg::CopyFrom(const SLMplsLabelBlockGetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockGetMsg::IsInitialized() const {

  return true;
}

void SLMplsLabelBlockGetMsg::Swap(SLMplsLabelBlockGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockGetMsg::InternalSwap(SLMplsLabelBlockGetMsg* other) {
  std::swap(key_, other->key_);
  std::swap(entriescount_, other->entriescount_);
  std::swap(getnext_, other->getnext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockGetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsLabelBlockGetMsg_descriptor_;
  metadata.reflection = SLMplsLabelBlockGetMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockGetMsg

// optional .service_layer.SLMplsLabelBlockKey Key = 1;
bool SLMplsLabelBlockGetMsg::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLMplsLabelBlockGetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsLabelBlockKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsg.Key)
  return key_;
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::release_key() {
  
  ::service_layer::SLMplsLabelBlockKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsLabelBlockGetMsg::set_allocated_key(::service_layer::SLMplsLabelBlockKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockGetMsg.Key)
}

// optional uint32 EntriesCount = 2;
void SLMplsLabelBlockGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
 ::google::protobuf::uint32 SLMplsLabelBlockGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.EntriesCount)
  return entriescount_;
}
 void SLMplsLabelBlockGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsg.EntriesCount)
}

// optional bool GetNext = 3;
void SLMplsLabelBlockGetMsg::clear_getnext() {
  getnext_ = false;
}
 bool SLMplsLabelBlockGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.GetNext)
  return getnext_;
}
 void SLMplsLabelBlockGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsg.GetNext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsLabelBlockGetMsgRsp::kEofFieldNumber;
const int SLMplsLabelBlockGetMsgRsp::kErrStatusFieldNumber;
const int SLMplsLabelBlockGetMsgRsp::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsLabelBlockGetMsgRsp::SLMplsLabelBlockGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsLabelBlockGetMsgRsp)
}

void SLMplsLabelBlockGetMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsLabelBlockGetMsgRsp::SLMplsLabelBlockGetMsgRsp(const SLMplsLabelBlockGetMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsLabelBlockGetMsgRsp)
}

void SLMplsLabelBlockGetMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eof_ = false;
  errstatus_ = NULL;
}

SLMplsLabelBlockGetMsgRsp::~SLMplsLabelBlockGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsLabelBlockGetMsgRsp)
  SharedDtor();
}

void SLMplsLabelBlockGetMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLMplsLabelBlockGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsLabelBlockGetMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsLabelBlockGetMsgRsp_descriptor_;
}

const SLMplsLabelBlockGetMsgRsp& SLMplsLabelBlockGetMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsLabelBlockGetMsgRsp* SLMplsLabelBlockGetMsgRsp::default_instance_ = NULL;

SLMplsLabelBlockGetMsgRsp* SLMplsLabelBlockGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsLabelBlockGetMsgRsp* n = new SLMplsLabelBlockGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsLabelBlockGetMsgRsp::Clear() {
  eof_ = false;
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  entries_.Clear();
}

bool SLMplsLabelBlockGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Eof = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ErrStatus;
        break;
      }

      // optional .service_layer.SLErrorStatus ErrStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_ErrStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Entries;
        break;
      }

      // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
      case 3: {
        if (tag == 26) {
         parse_Entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsLabelBlockGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsLabelBlockGetMsgRsp)
  return false;
#undef DO_
}

void SLMplsLabelBlockGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  // optional bool Eof = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->eof(), output);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->errstatus_, output);
  }

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsLabelBlockGetMsgRsp)
}

::google::protobuf::uint8* SLMplsLabelBlockGetMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsLabelBlockGetMsgRsp)
  // optional bool Eof = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->eof(), target);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->errstatus_, target);
  }

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsLabelBlockGetMsgRsp)
  return target;
}

int SLMplsLabelBlockGetMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsLabelBlockGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsLabelBlockGetMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsLabelBlockGetMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsLabelBlockGetMsgRsp::MergeFrom(const SLMplsLabelBlockGetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entries_.MergeFrom(from.entries_);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLMplsLabelBlockGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsLabelBlockGetMsgRsp::CopyFrom(const SLMplsLabelBlockGetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsLabelBlockGetMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsLabelBlockGetMsgRsp::Swap(SLMplsLabelBlockGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsLabelBlockGetMsgRsp::InternalSwap(SLMplsLabelBlockGetMsgRsp* other) {
  std::swap(eof_, other->eof_);
  std::swap(errstatus_, other->errstatus_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsLabelBlockGetMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsLabelBlockGetMsgRsp_descriptor_;
  metadata.reflection = SLMplsLabelBlockGetMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsLabelBlockGetMsgRsp

// optional bool Eof = 1;
void SLMplsLabelBlockGetMsgRsp::clear_eof() {
  eof_ = false;
}
 bool SLMplsLabelBlockGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.Eof)
  return eof_;
}
 void SLMplsLabelBlockGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsgRsp.Eof)
}

// optional .service_layer.SLErrorStatus ErrStatus = 2;
bool SLMplsLabelBlockGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsLabelBlockGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsLabelBlockGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsLabelBlockGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
int SLMplsLabelBlockGetMsgRsp::entries_size() const {
  return entries_.size();
}
void SLMplsLabelBlockGetMsgRsp::clear_entries() {
  entries_.Clear();
}
const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Get(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
SLMplsLabelBlockGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
SLMplsLabelBlockGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsRegMsg::kOperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsRegMsg::SLMplsRegMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsRegMsg)
}

void SLMplsRegMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLMplsRegMsg::SLMplsRegMsg(const SLMplsRegMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsRegMsg)
}

void SLMplsRegMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oper_ = 0;
}

SLMplsRegMsg::~SLMplsRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsRegMsg)
  SharedDtor();
}

void SLMplsRegMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLMplsRegMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsRegMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsRegMsg_descriptor_;
}

const SLMplsRegMsg& SLMplsRegMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsRegMsg* SLMplsRegMsg::default_instance_ = NULL;

SLMplsRegMsg* SLMplsRegMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsRegMsg* n = new SLMplsRegMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsRegMsg::Clear() {
  oper_ = 0;
}

bool SLMplsRegMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsRegMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLRegOp Oper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLRegOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsRegMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsRegMsg)
  return false;
#undef DO_
}

void SLMplsRegMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsRegMsg)
  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsRegMsg)
}

::google::protobuf::uint8* SLMplsRegMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsRegMsg)
  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsRegMsg)
  return target;
}

int SLMplsRegMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsRegMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsRegMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsRegMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsRegMsg::MergeFrom(const SLMplsRegMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
}

void SLMplsRegMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsRegMsg::CopyFrom(const SLMplsRegMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsRegMsg::IsInitialized() const {

  return true;
}

void SLMplsRegMsg::Swap(SLMplsRegMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsRegMsg::InternalSwap(SLMplsRegMsg* other) {
  std::swap(oper_, other->oper_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsRegMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsRegMsg_descriptor_;
  metadata.reflection = SLMplsRegMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsRegMsg

// optional .service_layer.SLRegOp Oper = 1;
void SLMplsRegMsg::clear_oper() {
  oper_ = 0;
}
 ::service_layer::SLRegOp SLMplsRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsg.Oper)
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
 void SLMplsRegMsg::set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsRegMsg.Oper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsRegMsgRsp::kErrStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsRegMsgRsp::SLMplsRegMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsRegMsgRsp)
}

void SLMplsRegMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsRegMsgRsp::SLMplsRegMsgRsp(const SLMplsRegMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsRegMsgRsp)
}

void SLMplsRegMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
}

SLMplsRegMsgRsp::~SLMplsRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsRegMsgRsp)
  SharedDtor();
}

void SLMplsRegMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLMplsRegMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsRegMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsRegMsgRsp_descriptor_;
}

const SLMplsRegMsgRsp& SLMplsRegMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsRegMsgRsp* SLMplsRegMsgRsp::default_instance_ = NULL;

SLMplsRegMsgRsp* SLMplsRegMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsRegMsgRsp* n = new SLMplsRegMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsRegMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}

bool SLMplsRegMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsRegMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsRegMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsRegMsgRsp)
  return false;
#undef DO_
}

void SLMplsRegMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsRegMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsRegMsgRsp)
}

::google::protobuf::uint8* SLMplsRegMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsRegMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsRegMsgRsp)
  return target;
}

int SLMplsRegMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsRegMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsRegMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsRegMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsRegMsgRsp::MergeFrom(const SLMplsRegMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLMplsRegMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsRegMsgRsp::CopyFrom(const SLMplsRegMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsRegMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsRegMsgRsp::Swap(SLMplsRegMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsRegMsgRsp::InternalSwap(SLMplsRegMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsRegMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsRegMsgRsp_descriptor_;
  metadata.reflection = SLMplsRegMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsRegMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsRegMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsRegMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsRegMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsRegMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsRegMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsRegMsgRsp.ErrStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsGetMsg::SLMplsGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsGetMsg)
}

void SLMplsGetMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLMplsGetMsg::SLMplsGetMsg(const SLMplsGetMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetMsg)
}

void SLMplsGetMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SLMplsGetMsg::~SLMplsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetMsg)
  SharedDtor();
}

void SLMplsGetMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLMplsGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsGetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsGetMsg_descriptor_;
}

const SLMplsGetMsg& SLMplsGetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsGetMsg* SLMplsGetMsg::default_instance_ = NULL;

SLMplsGetMsg* SLMplsGetMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsGetMsg* n = new SLMplsGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsGetMsg::Clear() {
}

bool SLMplsGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsGetMsg)
  return false;
#undef DO_
}

void SLMplsGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsGetMsg)
  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsGetMsg)
}

::google::protobuf::uint8* SLMplsGetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetMsg)
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetMsg)
  return target;
}

int SLMplsGetMsg::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsGetMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsGetMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsGetMsg::MergeFrom(const SLMplsGetMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SLMplsGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetMsg::CopyFrom(const SLMplsGetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetMsg::IsInitialized() const {

  return true;
}

void SLMplsGetMsg::Swap(SLMplsGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsGetMsg::InternalSwap(SLMplsGetMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsGetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsGetMsg_descriptor_;
  metadata.reflection = SLMplsGetMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsGetMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsGetMsgRsp::kErrStatusFieldNumber;
const int SLMplsGetMsgRsp::kMaxLabelsPerBlockFieldNumber;
const int SLMplsGetMsgRsp::kMaxLabelblocksPerLabelblockmsgFieldNumber;
const int SLMplsGetMsgRsp::kMinStartLabelFieldNumber;
const int SLMplsGetMsgRsp::kLabelTableSizeFieldNumber;
const int SLMplsGetMsgRsp::kMaxIlmPerIlmmsgFieldNumber;
const int SLMplsGetMsgRsp::kMaxPathsPerIlmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsGetMsgRsp::SLMplsGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsGetMsgRsp)
}

void SLMplsGetMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsGetMsgRsp::SLMplsGetMsgRsp(const SLMplsGetMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetMsgRsp)
}

void SLMplsGetMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  maxlabelsperblock_ = 0u;
  maxlabelblocksperlabelblockmsg_ = 0u;
  minstartlabel_ = 0u;
  labeltablesize_ = 0u;
  maxilmperilmmsg_ = 0u;
  maxpathsperilm_ = 0u;
}

SLMplsGetMsgRsp::~SLMplsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetMsgRsp)
  SharedDtor();
}

void SLMplsGetMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLMplsGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsGetMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsGetMsgRsp_descriptor_;
}

const SLMplsGetMsgRsp& SLMplsGetMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsGetMsgRsp* SLMplsGetMsgRsp::default_instance_ = NULL;

SLMplsGetMsgRsp* SLMplsGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsGetMsgRsp* n = new SLMplsGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsGetMsgRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLMplsGetMsgRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(maxlabelsperblock_, maxpathsperilm_);
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLMplsGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxLabelsPerBlock;
        break;
      }

      // optional uint32 MaxLabelsPerBlock = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxLabelsPerBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlabelsperblock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxLabelblocksPerLabelblockmsg;
        break;
      }

      // optional uint32 MaxLabelblocksPerLabelblockmsg = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxLabelblocksPerLabelblockmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlabelblocksperlabelblockmsg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MinStartLabel;
        break;
      }

      // optional uint32 MinStartLabel = 4;
      case 4: {
        if (tag == 32) {
         parse_MinStartLabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minstartlabel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LabelTableSize;
        break;
      }

      // optional uint32 LabelTableSize = 5;
      case 5: {
        if (tag == 40) {
         parse_LabelTableSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labeltablesize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MaxIlmPerIlmmsg;
        break;
      }

      // optional uint32 MaxIlmPerIlmmsg = 6;
      case 6: {
        if (tag == 48) {
         parse_MaxIlmPerIlmmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxilmperilmmsg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MaxPathsPerIlm;
        break;
      }

      // optional uint32 MaxPathsPerIlm = 7;
      case 7: {
        if (tag == 56) {
         parse_MaxPathsPerIlm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpathsperilm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsGetMsgRsp)
  return false;
#undef DO_
}

void SLMplsGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsGetMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxlabelsperblock(), output);
  }

  // optional uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlabelblocksperlabelblockmsg(), output);
  }

  // optional uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minstartlabel(), output);
  }

  // optional uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->labeltablesize(), output);
  }

  // optional uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxilmperilmmsg(), output);
  }

  // optional uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxpathsperilm(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsGetMsgRsp)
}

::google::protobuf::uint8* SLMplsGetMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxlabelsperblock(), target);
  }

  // optional uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlabelblocksperlabelblockmsg(), target);
  }

  // optional uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minstartlabel(), target);
  }

  // optional uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->labeltablesize(), target);
  }

  // optional uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxilmperilmmsg(), target);
  }

  // optional uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxpathsperilm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetMsgRsp)
  return target;
}

int SLMplsGetMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional uint32 MaxLabelsPerBlock = 2;
  if (this->maxlabelsperblock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlabelsperblock());
  }

  // optional uint32 MaxLabelblocksPerLabelblockmsg = 3;
  if (this->maxlabelblocksperlabelblockmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlabelblocksperlabelblockmsg());
  }

  // optional uint32 MinStartLabel = 4;
  if (this->minstartlabel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minstartlabel());
  }

  // optional uint32 LabelTableSize = 5;
  if (this->labeltablesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->labeltablesize());
  }

  // optional uint32 MaxIlmPerIlmmsg = 6;
  if (this->maxilmperilmmsg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxilmperilmmsg());
  }

  // optional uint32 MaxPathsPerIlm = 7;
  if (this->maxpathsperilm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxpathsperilm());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsGetMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsGetMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsGetMsgRsp::MergeFrom(const SLMplsGetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.maxlabelsperblock() != 0) {
    set_maxlabelsperblock(from.maxlabelsperblock());
  }
  if (from.maxlabelblocksperlabelblockmsg() != 0) {
    set_maxlabelblocksperlabelblockmsg(from.maxlabelblocksperlabelblockmsg());
  }
  if (from.minstartlabel() != 0) {
    set_minstartlabel(from.minstartlabel());
  }
  if (from.labeltablesize() != 0) {
    set_labeltablesize(from.labeltablesize());
  }
  if (from.maxilmperilmmsg() != 0) {
    set_maxilmperilmmsg(from.maxilmperilmmsg());
  }
  if (from.maxpathsperilm() != 0) {
    set_maxpathsperilm(from.maxpathsperilm());
  }
}

void SLMplsGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetMsgRsp::CopyFrom(const SLMplsGetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsGetMsgRsp::Swap(SLMplsGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsGetMsgRsp::InternalSwap(SLMplsGetMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(maxlabelsperblock_, other->maxlabelsperblock_);
  std::swap(maxlabelblocksperlabelblockmsg_, other->maxlabelblocksperlabelblockmsg_);
  std::swap(minstartlabel_, other->minstartlabel_);
  std::swap(labeltablesize_, other->labeltablesize_);
  std::swap(maxilmperilmmsg_, other->maxilmperilmmsg_);
  std::swap(maxpathsperilm_, other->maxpathsperilm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsGetMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsGetMsgRsp_descriptor_;
  metadata.reflection = SLMplsGetMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsGetMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsGetMsgRsp.ErrStatus)
}

// optional uint32 MaxLabelsPerBlock = 2;
void SLMplsGetMsgRsp::clear_maxlabelsperblock() {
  maxlabelsperblock_ = 0u;
}
 ::google::protobuf::uint32 SLMplsGetMsgRsp::maxlabelsperblock() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxLabelsPerBlock)
  return maxlabelsperblock_;
}
 void SLMplsGetMsgRsp::set_maxlabelsperblock(::google::protobuf::uint32 value) {
  
  maxlabelsperblock_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxLabelsPerBlock)
}

// optional uint32 MaxLabelblocksPerLabelblockmsg = 3;
void SLMplsGetMsgRsp::clear_maxlabelblocksperlabelblockmsg() {
  maxlabelblocksperlabelblockmsg_ = 0u;
}
 ::google::protobuf::uint32 SLMplsGetMsgRsp::maxlabelblocksperlabelblockmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxLabelblocksPerLabelblockmsg)
  return maxlabelblocksperlabelblockmsg_;
}
 void SLMplsGetMsgRsp::set_maxlabelblocksperlabelblockmsg(::google::protobuf::uint32 value) {
  
  maxlabelblocksperlabelblockmsg_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxLabelblocksPerLabelblockmsg)
}

// optional uint32 MinStartLabel = 4;
void SLMplsGetMsgRsp::clear_minstartlabel() {
  minstartlabel_ = 0u;
}
 ::google::protobuf::uint32 SLMplsGetMsgRsp::minstartlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MinStartLabel)
  return minstartlabel_;
}
 void SLMplsGetMsgRsp::set_minstartlabel(::google::protobuf::uint32 value) {
  
  minstartlabel_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MinStartLabel)
}

// optional uint32 LabelTableSize = 5;
void SLMplsGetMsgRsp::clear_labeltablesize() {
  labeltablesize_ = 0u;
}
 ::google::protobuf::uint32 SLMplsGetMsgRsp::labeltablesize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.LabelTableSize)
  return labeltablesize_;
}
 void SLMplsGetMsgRsp::set_labeltablesize(::google::protobuf::uint32 value) {
  
  labeltablesize_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.LabelTableSize)
}

// optional uint32 MaxIlmPerIlmmsg = 6;
void SLMplsGetMsgRsp::clear_maxilmperilmmsg() {
  maxilmperilmmsg_ = 0u;
}
 ::google::protobuf::uint32 SLMplsGetMsgRsp::maxilmperilmmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxIlmPerIlmmsg)
  return maxilmperilmmsg_;
}
 void SLMplsGetMsgRsp::set_maxilmperilmmsg(::google::protobuf::uint32 value) {
  
  maxilmperilmmsg_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxIlmPerIlmmsg)
}

// optional uint32 MaxPathsPerIlm = 7;
void SLMplsGetMsgRsp::clear_maxpathsperilm() {
  maxpathsperilm_ = 0u;
}
 ::google::protobuf::uint32 SLMplsGetMsgRsp::maxpathsperilm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxPathsPerIlm)
  return maxpathsperilm_;
}
 void SLMplsGetMsgRsp::set_maxpathsperilm(::google::protobuf::uint32 value) {
  
  maxpathsperilm_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxPathsPerIlm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsGetStatsMsgRsp::kErrStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsGetStatsMsgRsp::SLMplsGetStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsGetStatsMsgRsp)
}

void SLMplsGetStatsMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsGetStatsMsgRsp::SLMplsGetStatsMsgRsp(const SLMplsGetStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsGetStatsMsgRsp)
}

void SLMplsGetStatsMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
}

SLMplsGetStatsMsgRsp::~SLMplsGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsGetStatsMsgRsp)
  SharedDtor();
}

void SLMplsGetStatsMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLMplsGetStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsGetStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsGetStatsMsgRsp_descriptor_;
}

const SLMplsGetStatsMsgRsp& SLMplsGetStatsMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsGetStatsMsgRsp* SLMplsGetStatsMsgRsp::default_instance_ = NULL;

SLMplsGetStatsMsgRsp* SLMplsGetStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsGetStatsMsgRsp* n = new SLMplsGetStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsGetStatsMsgRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}

bool SLMplsGetStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsGetStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsGetStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsGetStatsMsgRsp)
  return false;
#undef DO_
}

void SLMplsGetStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsGetStatsMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsGetStatsMsgRsp)
}

::google::protobuf::uint8* SLMplsGetStatsMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsGetStatsMsgRsp)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsGetStatsMsgRsp)
  return target;
}

int SLMplsGetStatsMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsGetStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsGetStatsMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsGetStatsMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsGetStatsMsgRsp::MergeFrom(const SLMplsGetStatsMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLMplsGetStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsGetStatsMsgRsp::CopyFrom(const SLMplsGetStatsMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsGetStatsMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsGetStatsMsgRsp::Swap(SLMplsGetStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsGetStatsMsgRsp::InternalSwap(SLMplsGetStatsMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsGetStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsGetStatsMsgRsp_descriptor_;
  metadata.reflection = SLMplsGetStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsGetStatsMsgRsp

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsGetStatsMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsGetStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsPath::kNexthopAddressFieldNumber;
const int SLMplsPath::kNexthopInterfaceFieldNumber;
const int SLMplsPath::kLoadMetricFieldNumber;
const int SLMplsPath::kVrfNameFieldNumber;
const int SLMplsPath::kActionFieldNumber;
const int SLMplsPath::kPathIdFieldNumber;
const int SLMplsPath::kProtectedPathBitmapFieldNumber;
const int SLMplsPath::kLabelStackFieldNumber;
const int SLMplsPath::kRemoteAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsPath::SLMplsPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsPath)
}

void SLMplsPath::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  nexthopaddress_ = const_cast< ::service_layer::SLIpAddress*>(&::service_layer::SLIpAddress::default_instance());
  nexthopinterface_ = const_cast< ::service_layer::SLInterface*>(&::service_layer::SLInterface::default_instance());
}

SLMplsPath::SLMplsPath(const SLMplsPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsPath)
}

void SLMplsPath::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nexthopaddress_ = NULL;
  nexthopinterface_ = NULL;
  loadmetric_ = 0u;
  vrfname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  pathid_ = 0u;
}

SLMplsPath::~SLMplsPath() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsPath)
  SharedDtor();
}

void SLMplsPath::SharedDtor() {
  vrfname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete nexthopaddress_;
    delete nexthopinterface_;
  }
}

void SLMplsPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsPath_descriptor_;
}

const SLMplsPath& SLMplsPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsPath* SLMplsPath::default_instance_ = NULL;

SLMplsPath* SLMplsPath::New(::google::protobuf::Arena* arena) const {
  SLMplsPath* n = new SLMplsPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsPath::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLMplsPath*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(loadmetric_, action_);
  if (GetArenaNoVirtual() == NULL && nexthopaddress_ != NULL) delete nexthopaddress_;
  nexthopaddress_ = NULL;
  if (GetArenaNoVirtual() == NULL && nexthopinterface_ != NULL) delete nexthopinterface_;
  nexthopinterface_ = NULL;
  vrfname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pathid_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  protectedpathbitmap_.Clear();
  labelstack_.Clear();
  remoteaddress_.Clear();
}

bool SLMplsPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLIpAddress NexthopAddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nexthopaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NexthopInterface;
        break;
      }

      // optional .service_layer.SLInterface NexthopInterface = 2;
      case 2: {
        if (tag == 18) {
         parse_NexthopInterface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nexthopinterface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LoadMetric;
        break;
      }

      // optional uint32 LoadMetric = 3;
      case 3: {
        if (tag == 24) {
         parse_LoadMetric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loadmetric_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_VrfName;
        break;
      }

      // optional string VrfName = 4;
      case 4: {
        if (tag == 34) {
         parse_VrfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vrfname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vrfname().data(), this->vrfname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "service_layer.SLMplsPath.VrfName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Action;
        break;
      }

      // optional .service_layer.SlLabelAction Action = 5;
      case 5: {
        if (tag == 40) {
         parse_Action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::service_layer::SlLabelAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PathId;
        break;
      }

      // optional uint32 PathId = 6;
      case 6: {
        if (tag == 48) {
         parse_PathId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pathid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ProtectedPathBitmap;
        break;
      }

      // repeated uint64 ProtectedPathBitmap = 7;
      case 7: {
        if (tag == 58) {
         parse_ProtectedPathBitmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_protectedpathbitmap())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 58, input, this->mutable_protectedpathbitmap())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LabelStack;
        break;
      }

      // repeated uint32 LabelStack = 8;
      case 8: {
        if (tag == 66) {
         parse_LabelStack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labelstack())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_labelstack())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RemoteAddress;
        break;
      }

      // repeated .service_layer.SLIpAddress RemoteAddress = 9;
      case 9: {
        if (tag == 74) {
         parse_RemoteAddress:
          DO_(input->IncrementRecursionDepth());
         parse_loop_RemoteAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_remoteaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_RemoteAddress;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsPath)
  return false;
#undef DO_
}

void SLMplsPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsPath)
  // optional .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nexthopaddress_, output);
  }

  // optional .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nexthopinterface_, output);
  }

  // optional uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loadmetric(), output);
  }

  // optional string VrfName = 4;
  if (this->vrfname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrfname().data(), this->vrfname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsPath.VrfName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vrfname(), output);
  }

  // optional .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional uint32 PathId = 6;
  if (this->pathid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pathid(), output);
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  if (this->protectedpathbitmap_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_protectedpathbitmap_cached_byte_size_);
  }
  for (int i = 0; i < this->protectedpathbitmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->protectedpathbitmap(i), output);
  }

  // repeated uint32 LabelStack = 8;
  if (this->labelstack_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_labelstack_cached_byte_size_);
  }
  for (int i = 0; i < this->labelstack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->labelstack(i), output);
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  for (unsigned int i = 0, n = this->remoteaddress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->remoteaddress(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsPath)
}

::google::protobuf::uint8* SLMplsPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsPath)
  // optional .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->nexthopaddress_, target);
  }

  // optional .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->nexthopinterface_, target);
  }

  // optional uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loadmetric(), target);
  }

  // optional string VrfName = 4;
  if (this->vrfname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrfname().data(), this->vrfname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLMplsPath.VrfName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vrfname(), target);
  }

  // optional .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // optional uint32 PathId = 6;
  if (this->pathid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pathid(), target);
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  if (this->protectedpathbitmap_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _protectedpathbitmap_cached_byte_size_, target);
  }
  for (int i = 0; i < this->protectedpathbitmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->protectedpathbitmap(i), target);
  }

  // repeated uint32 LabelStack = 8;
  if (this->labelstack_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _labelstack_cached_byte_size_, target);
  }
  for (int i = 0; i < this->labelstack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->labelstack(i), target);
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  for (unsigned int i = 0, n = this->remoteaddress_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->remoteaddress(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsPath)
  return target;
}

int SLMplsPath::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nexthopaddress_);
  }

  // optional .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nexthopinterface_);
  }

  // optional uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->loadmetric());
  }

  // optional string VrfName = 4;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vrfname());
  }

  // optional .service_layer.SlLabelAction Action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional uint32 PathId = 6;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pathid());
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->protectedpathbitmap_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->protectedpathbitmap(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _protectedpathbitmap_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 LabelStack = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->labelstack_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->labelstack(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _labelstack_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  total_size += 1 * this->remoteaddress_size();
  for (int i = 0; i < this->remoteaddress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remoteaddress(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsPath::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsPath* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsPath>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsPath::MergeFrom(const SLMplsPath& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  protectedpathbitmap_.MergeFrom(from.protectedpathbitmap_);
  labelstack_.MergeFrom(from.labelstack_);
  remoteaddress_.MergeFrom(from.remoteaddress_);
  if (from.has_nexthopaddress()) {
    mutable_nexthopaddress()->::service_layer::SLIpAddress::MergeFrom(from.nexthopaddress());
  }
  if (from.has_nexthopinterface()) {
    mutable_nexthopinterface()->::service_layer::SLInterface::MergeFrom(from.nexthopinterface());
  }
  if (from.loadmetric() != 0) {
    set_loadmetric(from.loadmetric());
  }
  if (from.vrfname().size() > 0) {

    vrfname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrfname_);
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.pathid() != 0) {
    set_pathid(from.pathid());
  }
}

void SLMplsPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsPath::CopyFrom(const SLMplsPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsPath::IsInitialized() const {

  return true;
}

void SLMplsPath::Swap(SLMplsPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsPath::InternalSwap(SLMplsPath* other) {
  std::swap(nexthopaddress_, other->nexthopaddress_);
  std::swap(nexthopinterface_, other->nexthopinterface_);
  std::swap(loadmetric_, other->loadmetric_);
  vrfname_.Swap(&other->vrfname_);
  std::swap(action_, other->action_);
  std::swap(pathid_, other->pathid_);
  protectedpathbitmap_.UnsafeArenaSwap(&other->protectedpathbitmap_);
  labelstack_.UnsafeArenaSwap(&other->labelstack_);
  remoteaddress_.UnsafeArenaSwap(&other->remoteaddress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsPath_descriptor_;
  metadata.reflection = SLMplsPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsPath

// optional .service_layer.SLIpAddress NexthopAddress = 1;
bool SLMplsPath::has_nexthopaddress() const {
  return !_is_default_instance_ && nexthopaddress_ != NULL;
}
void SLMplsPath::clear_nexthopaddress() {
  if (GetArenaNoVirtual() == NULL && nexthopaddress_ != NULL) delete nexthopaddress_;
  nexthopaddress_ = NULL;
}
const ::service_layer::SLIpAddress& SLMplsPath::nexthopaddress() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.NexthopAddress)
  return nexthopaddress_ != NULL ? *nexthopaddress_ : *default_instance_->nexthopaddress_;
}
::service_layer::SLIpAddress* SLMplsPath::mutable_nexthopaddress() {
  
  if (nexthopaddress_ == NULL) {
    nexthopaddress_ = new ::service_layer::SLIpAddress;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.NexthopAddress)
  return nexthopaddress_;
}
::service_layer::SLIpAddress* SLMplsPath::release_nexthopaddress() {
  
  ::service_layer::SLIpAddress* temp = nexthopaddress_;
  nexthopaddress_ = NULL;
  return temp;
}
void SLMplsPath::set_allocated_nexthopaddress(::service_layer::SLIpAddress* nexthopaddress) {
  delete nexthopaddress_;
  nexthopaddress_ = nexthopaddress;
  if (nexthopaddress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.NexthopAddress)
}

// optional .service_layer.SLInterface NexthopInterface = 2;
bool SLMplsPath::has_nexthopinterface() const {
  return !_is_default_instance_ && nexthopinterface_ != NULL;
}
void SLMplsPath::clear_nexthopinterface() {
  if (GetArenaNoVirtual() == NULL && nexthopinterface_ != NULL) delete nexthopinterface_;
  nexthopinterface_ = NULL;
}
const ::service_layer::SLInterface& SLMplsPath::nexthopinterface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.NexthopInterface)
  return nexthopinterface_ != NULL ? *nexthopinterface_ : *default_instance_->nexthopinterface_;
}
::service_layer::SLInterface* SLMplsPath::mutable_nexthopinterface() {
  
  if (nexthopinterface_ == NULL) {
    nexthopinterface_ = new ::service_layer::SLInterface;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.NexthopInterface)
  return nexthopinterface_;
}
::service_layer::SLInterface* SLMplsPath::release_nexthopinterface() {
  
  ::service_layer::SLInterface* temp = nexthopinterface_;
  nexthopinterface_ = NULL;
  return temp;
}
void SLMplsPath::set_allocated_nexthopinterface(::service_layer::SLInterface* nexthopinterface) {
  delete nexthopinterface_;
  nexthopinterface_ = nexthopinterface;
  if (nexthopinterface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.NexthopInterface)
}

// optional uint32 LoadMetric = 3;
void SLMplsPath::clear_loadmetric() {
  loadmetric_ = 0u;
}
 ::google::protobuf::uint32 SLMplsPath::loadmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.LoadMetric)
  return loadmetric_;
}
 void SLMplsPath::set_loadmetric(::google::protobuf::uint32 value) {
  
  loadmetric_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.LoadMetric)
}

// optional string VrfName = 4;
void SLMplsPath::clear_vrfname() {
  vrfname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SLMplsPath::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.VrfName)
  return vrfname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SLMplsPath::set_vrfname(const ::std::string& value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.VrfName)
}
 void SLMplsPath::set_vrfname(const char* value) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:service_layer.SLMplsPath.VrfName)
}
 void SLMplsPath::set_vrfname(const char* value, size_t size) {
  
  vrfname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLMplsPath.VrfName)
}
 ::std::string* SLMplsPath::mutable_vrfname() {
  
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.VrfName)
  return vrfname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SLMplsPath::release_vrfname() {
  
  return vrfname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SLMplsPath::set_allocated_vrfname(::std::string* vrfname) {
  if (vrfname != NULL) {
    
  } else {
    
  }
  vrfname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrfname);
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.VrfName)
}

// optional .service_layer.SlLabelAction Action = 5;
void SLMplsPath::clear_action() {
  action_ = 0;
}
 ::service_layer::SlLabelAction SLMplsPath::action() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.Action)
  return static_cast< ::service_layer::SlLabelAction >(action_);
}
 void SLMplsPath::set_action(::service_layer::SlLabelAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.Action)
}

// optional uint32 PathId = 6;
void SLMplsPath::clear_pathid() {
  pathid_ = 0u;
}
 ::google::protobuf::uint32 SLMplsPath::pathid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.PathId)
  return pathid_;
}
 void SLMplsPath::set_pathid(::google::protobuf::uint32 value) {
  
  pathid_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.PathId)
}

// repeated uint64 ProtectedPathBitmap = 7;
int SLMplsPath::protectedpathbitmap_size() const {
  return protectedpathbitmap_.size();
}
void SLMplsPath::clear_protectedpathbitmap() {
  protectedpathbitmap_.Clear();
}
 ::google::protobuf::uint64 SLMplsPath::protectedpathbitmap(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.ProtectedPathBitmap)
  return protectedpathbitmap_.Get(index);
}
 void SLMplsPath::set_protectedpathbitmap(int index, ::google::protobuf::uint64 value) {
  protectedpathbitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.ProtectedPathBitmap)
}
 void SLMplsPath::add_protectedpathbitmap(::google::protobuf::uint64 value) {
  protectedpathbitmap_.Add(value);
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.ProtectedPathBitmap)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SLMplsPath::protectedpathbitmap() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.ProtectedPathBitmap)
  return protectedpathbitmap_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SLMplsPath::mutable_protectedpathbitmap() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.ProtectedPathBitmap)
  return &protectedpathbitmap_;
}

// repeated uint32 LabelStack = 8;
int SLMplsPath::labelstack_size() const {
  return labelstack_.size();
}
void SLMplsPath::clear_labelstack() {
  labelstack_.Clear();
}
 ::google::protobuf::uint32 SLMplsPath::labelstack(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.LabelStack)
  return labelstack_.Get(index);
}
 void SLMplsPath::set_labelstack(int index, ::google::protobuf::uint32 value) {
  labelstack_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.LabelStack)
}
 void SLMplsPath::add_labelstack(::google::protobuf::uint32 value) {
  labelstack_.Add(value);
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.LabelStack)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SLMplsPath::labelstack() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.LabelStack)
  return labelstack_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SLMplsPath::mutable_labelstack() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.LabelStack)
  return &labelstack_;
}

// repeated .service_layer.SLIpAddress RemoteAddress = 9;
int SLMplsPath::remoteaddress_size() const {
  return remoteaddress_.size();
}
void SLMplsPath::clear_remoteaddress() {
  remoteaddress_.Clear();
}
const ::service_layer::SLIpAddress& SLMplsPath::remoteaddress(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Get(index);
}
::service_layer::SLIpAddress* SLMplsPath::mutable_remoteaddress(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Mutable(index);
}
::service_layer::SLIpAddress* SLMplsPath::add_remoteaddress() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLIpAddress >*
SLMplsPath::mutable_remoteaddress() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.RemoteAddress)
  return &remoteaddress_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLIpAddress >&
SLMplsPath::remoteaddress() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmKey::kLocalLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmKey::SLMplsIlmKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmKey)
}

void SLMplsIlmKey::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLMplsIlmKey::SLMplsIlmKey(const SLMplsIlmKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmKey)
}

void SLMplsIlmKey::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  locallabel_ = 0u;
}

SLMplsIlmKey::~SLMplsIlmKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmKey)
  SharedDtor();
}

void SLMplsIlmKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLMplsIlmKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmKey_descriptor_;
}

const SLMplsIlmKey& SLMplsIlmKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmKey* SLMplsIlmKey::default_instance_ = NULL;

SLMplsIlmKey* SLMplsIlmKey::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmKey* n = new SLMplsIlmKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmKey::Clear() {
  locallabel_ = 0u;
}

bool SLMplsIlmKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LocalLabel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locallabel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmKey)
  return false;
#undef DO_
}

void SLMplsIlmKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmKey)
  // optional uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->locallabel(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmKey)
}

::google::protobuf::uint8* SLMplsIlmKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmKey)
  // optional uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->locallabel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmKey)
  return target;
}

int SLMplsIlmKey::ByteSize() const {
  int total_size = 0;

  // optional uint32 LocalLabel = 1;
  if (this->locallabel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locallabel());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmKey::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmKey>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmKey::MergeFrom(const SLMplsIlmKey& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.locallabel() != 0) {
    set_locallabel(from.locallabel());
  }
}

void SLMplsIlmKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmKey::CopyFrom(const SLMplsIlmKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmKey::IsInitialized() const {

  return true;
}

void SLMplsIlmKey::Swap(SLMplsIlmKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmKey::InternalSwap(SLMplsIlmKey* other) {
  std::swap(locallabel_, other->locallabel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmKey_descriptor_;
  metadata.reflection = SLMplsIlmKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmKey

// optional uint32 LocalLabel = 1;
void SLMplsIlmKey::clear_locallabel() {
  locallabel_ = 0u;
}
 ::google::protobuf::uint32 SLMplsIlmKey::locallabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmKey.LocalLabel)
  return locallabel_;
}
 void SLMplsIlmKey::set_locallabel(::google::protobuf::uint32 value) {
  
  locallabel_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmKey.LocalLabel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmEntry::kKeyFieldNumber;
const int SLMplsIlmEntry::kPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmEntry::SLMplsIlmEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmEntry)
}

void SLMplsIlmEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::service_layer::SLMplsIlmKey*>(&::service_layer::SLMplsIlmKey::default_instance());
}

SLMplsIlmEntry::SLMplsIlmEntry(const SLMplsIlmEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmEntry)
}

void SLMplsIlmEntry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
}

SLMplsIlmEntry::~SLMplsIlmEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmEntry)
  SharedDtor();
}

void SLMplsIlmEntry::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void SLMplsIlmEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmEntry_descriptor_;
}

const SLMplsIlmEntry& SLMplsIlmEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmEntry* SLMplsIlmEntry::default_instance_ = NULL;

SLMplsIlmEntry* SLMplsIlmEntry::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmEntry* n = new SLMplsIlmEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmEntry::Clear() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  paths_.Clear();
}

bool SLMplsIlmEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLMplsIlmKey Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Paths;
        break;
      }

      // repeated .service_layer.SLMplsPath Paths = 2;
      case 2: {
        if (tag == 18) {
         parse_Paths:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Paths;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmEntry)
  return false;
#undef DO_
}

void SLMplsIlmEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmEntry)
  // optional .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // repeated .service_layer.SLMplsPath Paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmEntry)
}

::google::protobuf::uint8* SLMplsIlmEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmEntry)
  // optional .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->key_, target);
  }

  // repeated .service_layer.SLMplsPath Paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paths(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmEntry)
  return target;
}

int SLMplsIlmEntry::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLMplsIlmKey Key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .service_layer.SLMplsPath Paths = 2;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmEntry>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmEntry::MergeFrom(const SLMplsIlmEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  paths_.MergeFrom(from.paths_);
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from.key());
  }
}

void SLMplsIlmEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmEntry::CopyFrom(const SLMplsIlmEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmEntry::IsInitialized() const {

  return true;
}

void SLMplsIlmEntry::Swap(SLMplsIlmEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmEntry::InternalSwap(SLMplsIlmEntry* other) {
  std::swap(key_, other->key_);
  paths_.UnsafeArenaSwap(&other->paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmEntry_descriptor_;
  metadata.reflection = SLMplsIlmEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmEntry

// optional .service_layer.SLMplsIlmKey Key = 1;
bool SLMplsIlmEntry::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLMplsIlmEntry::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsIlmKey& SLMplsIlmEntry::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmEntry.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmEntry::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsIlmKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmEntry.Key)
  return key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmEntry::release_key() {
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsIlmEntry::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmEntry.Key)
}

// repeated .service_layer.SLMplsPath Paths = 2;
int SLMplsIlmEntry::paths_size() const {
  return paths_.size();
}
void SLMplsIlmEntry::clear_paths() {
  paths_.Clear();
}
const ::service_layer::SLMplsPath& SLMplsIlmEntry::paths(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Get(index);
}
::service_layer::SLMplsPath* SLMplsIlmEntry::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Mutable(index);
}
::service_layer::SLMplsPath* SLMplsIlmEntry::add_paths() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsPath >*
SLMplsIlmEntry::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmEntry.Paths)
  return &paths_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsPath >&
SLMplsIlmEntry::paths() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmEntry.Paths)
  return paths_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmMsg::kOperFieldNumber;
const int SLMplsIlmMsg::kCorrelatorFieldNumber;
const int SLMplsIlmMsg::kMplsIlmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmMsg::SLMplsIlmMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmMsg)
}

void SLMplsIlmMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SLMplsIlmMsg::SLMplsIlmMsg(const SLMplsIlmMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmMsg)
}

void SLMplsIlmMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oper_ = 0;
  correlator_ = GOOGLE_ULONGLONG(0);
}

SLMplsIlmMsg::~SLMplsIlmMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmMsg)
  SharedDtor();
}

void SLMplsIlmMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLMplsIlmMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmMsg_descriptor_;
}

const SLMplsIlmMsg& SLMplsIlmMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmMsg* SLMplsIlmMsg::default_instance_ = NULL;

SLMplsIlmMsg* SLMplsIlmMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmMsg* n = new SLMplsIlmMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmMsg::Clear() {
  oper_ = 0;
  correlator_ = GOOGLE_ULONGLONG(0);
  mplsilms_.Clear();
}

bool SLMplsIlmMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLObjectOp Oper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper(static_cast< ::service_layer::SLObjectOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Correlator;
        break;
      }

      // optional uint64 Correlator = 2;
      case 2: {
        if (tag == 16) {
         parse_Correlator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MplsIlms;
        break;
      }

      // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
      case 3: {
        if (tag == 26) {
         parse_MplsIlms:
          DO_(input->IncrementRecursionDepth());
         parse_loop_MplsIlms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mplsilms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_MplsIlms;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmMsg)
  return false;
#undef DO_
}

void SLMplsIlmMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmMsg)
  // optional .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional uint64 Correlator = 2;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->correlator(), output);
  }

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  for (unsigned int i = 0, n = this->mplsilms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mplsilms(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmMsg)
}

::google::protobuf::uint8* SLMplsIlmMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmMsg)
  // optional .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->oper(), target);
  }

  // optional uint64 Correlator = 2;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->correlator(), target);
  }

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  for (unsigned int i = 0, n = this->mplsilms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mplsilms(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmMsg)
  return target;
}

int SLMplsIlmMsg::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLObjectOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
  }

  // optional uint64 Correlator = 2;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  total_size += 1 * this->mplsilms_size();
  for (int i = 0; i < this->mplsilms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mplsilms(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmMsg::MergeFrom(const SLMplsIlmMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mplsilms_.MergeFrom(from.mplsilms_);
  if (from.oper() != 0) {
    set_oper(from.oper());
  }
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
}

void SLMplsIlmMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmMsg::CopyFrom(const SLMplsIlmMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmMsg::IsInitialized() const {

  return true;
}

void SLMplsIlmMsg::Swap(SLMplsIlmMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmMsg::InternalSwap(SLMplsIlmMsg* other) {
  std::swap(oper_, other->oper_);
  std::swap(correlator_, other->correlator_);
  mplsilms_.UnsafeArenaSwap(&other->mplsilms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmMsg_descriptor_;
  metadata.reflection = SLMplsIlmMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmMsg

// optional .service_layer.SLObjectOp Oper = 1;
void SLMplsIlmMsg::clear_oper() {
  oper_ = 0;
}
 ::service_layer::SLObjectOp SLMplsIlmMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.Oper)
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
 void SLMplsIlmMsg::set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsg.Oper)
}

// optional uint64 Correlator = 2;
void SLMplsIlmMsg::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLMplsIlmMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.Correlator)
  return correlator_;
}
 void SLMplsIlmMsg::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsg.Correlator)
}

// repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
int SLMplsIlmMsg::mplsilms_size() const {
  return mplsilms_.size();
}
void SLMplsIlmMsg::clear_mplsilms() {
  mplsilms_.Clear();
}
const ::service_layer::SLMplsIlmEntry& SLMplsIlmMsg::mplsilms(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Get(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::mutable_mplsilms(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Mutable(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::add_mplsilms() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
SLMplsIlmMsg::mutable_mplsilms() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmMsg.MplsIlms)
  return &mplsilms_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
SLMplsIlmMsg::mplsilms() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmRes::kErrStatusFieldNumber;
const int SLMplsIlmRes::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmRes::SLMplsIlmRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmRes)
}

void SLMplsIlmRes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
  key_ = const_cast< ::service_layer::SLMplsIlmKey*>(&::service_layer::SLMplsIlmKey::default_instance());
}

SLMplsIlmRes::SLMplsIlmRes(const SLMplsIlmRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmRes)
}

void SLMplsIlmRes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  errstatus_ = NULL;
  key_ = NULL;
}

SLMplsIlmRes::~SLMplsIlmRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmRes)
  SharedDtor();
}

void SLMplsIlmRes::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
    delete key_;
  }
}

void SLMplsIlmRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmRes_descriptor_;
}

const SLMplsIlmRes& SLMplsIlmRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmRes* SLMplsIlmRes::default_instance_ = NULL;

SLMplsIlmRes* SLMplsIlmRes::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmRes* n = new SLMplsIlmRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmRes::Clear() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool SLMplsIlmRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_layer.SLErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // optional .service_layer.SLMplsIlmKey Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmRes)
  return false;
#undef DO_
}

void SLMplsIlmRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmRes)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmRes)
}

::google::protobuf::uint8* SLMplsIlmRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmRes)
  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->errstatus_, target);
  }

  // optional .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmRes)
  return target;
}

int SLMplsIlmRes::ByteSize() const {
  int total_size = 0;

  // optional .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // optional .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmRes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmRes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmRes::MergeFrom(const SLMplsIlmRes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from.key());
  }
}

void SLMplsIlmRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmRes::CopyFrom(const SLMplsIlmRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmRes::IsInitialized() const {

  return true;
}

void SLMplsIlmRes::Swap(SLMplsIlmRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmRes::InternalSwap(SLMplsIlmRes* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmRes_descriptor_;
  metadata.reflection = SLMplsIlmRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmRes

// optional .service_layer.SLErrorStatus ErrStatus = 1;
bool SLMplsIlmRes::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsIlmRes::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsIlmRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmRes.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsIlmRes::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmRes.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsIlmRes::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsIlmRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmRes.ErrStatus)
}

// optional .service_layer.SLMplsIlmKey Key = 2;
bool SLMplsIlmRes::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLMplsIlmRes::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsIlmKey& SLMplsIlmRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmRes.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmRes::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsIlmKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmRes.Key)
  return key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmRes::release_key() {
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsIlmRes::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmRes.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmMsgRsp::kCorrelatorFieldNumber;
const int SLMplsIlmMsgRsp::kStatusSummaryFieldNumber;
const int SLMplsIlmMsgRsp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmMsgRsp::SLMplsIlmMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmMsgRsp)
}

void SLMplsIlmMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsIlmMsgRsp::SLMplsIlmMsgRsp(const SLMplsIlmMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmMsgRsp)
}

void SLMplsIlmMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  correlator_ = GOOGLE_ULONGLONG(0);
  statussummary_ = NULL;
}

SLMplsIlmMsgRsp::~SLMplsIlmMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmMsgRsp)
  SharedDtor();
}

void SLMplsIlmMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete statussummary_;
  }
}

void SLMplsIlmMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmMsgRsp_descriptor_;
}

const SLMplsIlmMsgRsp& SLMplsIlmMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmMsgRsp* SLMplsIlmMsgRsp::default_instance_ = NULL;

SLMplsIlmMsgRsp* SLMplsIlmMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmMsgRsp* n = new SLMplsIlmMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmMsgRsp::Clear() {
  correlator_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
  results_.Clear();
}

bool SLMplsIlmMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Correlator = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StatusSummary;
        break;
      }

      // optional .service_layer.SLErrorStatus StatusSummary = 2;
      case 2: {
        if (tag == 18) {
         parse_StatusSummary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statussummary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Results;
        break;
      }

      // repeated .service_layer.SLMplsIlmRes Results = 3;
      case 3: {
        if (tag == 26) {
         parse_Results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmMsgRsp)
  return false;
#undef DO_
}

void SLMplsIlmMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmMsgRsp)
  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlator(), output);
  }

  // optional .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->statussummary_, output);
  }

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmMsgRsp)
}

::google::protobuf::uint8* SLMplsIlmMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmMsgRsp)
  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlator(), target);
  }

  // optional .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->statussummary_, target);
  }

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->results(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmMsgRsp)
  return target;
}

int SLMplsIlmMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // optional .service_layer.SLErrorStatus StatusSummary = 2;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statussummary_);
  }

  // repeated .service_layer.SLMplsIlmRes Results = 3;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmMsgRsp::MergeFrom(const SLMplsIlmMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
  if (from.has_statussummary()) {
    mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from.statussummary());
  }
}

void SLMplsIlmMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmMsgRsp::CopyFrom(const SLMplsIlmMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsIlmMsgRsp::Swap(SLMplsIlmMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmMsgRsp::InternalSwap(SLMplsIlmMsgRsp* other) {
  std::swap(correlator_, other->correlator_);
  std::swap(statussummary_, other->statussummary_);
  results_.UnsafeArenaSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmMsgRsp_descriptor_;
  metadata.reflection = SLMplsIlmMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmMsgRsp

// optional uint64 Correlator = 1;
void SLMplsIlmMsgRsp::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLMplsIlmMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.Correlator)
  return correlator_;
}
 void SLMplsIlmMsgRsp::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsgRsp.Correlator)
}

// optional .service_layer.SLErrorStatus StatusSummary = 2;
bool SLMplsIlmMsgRsp::has_statussummary() const {
  return !_is_default_instance_ && statussummary_ != NULL;
}
void SLMplsIlmMsgRsp::clear_statussummary() {
  if (GetArenaNoVirtual() == NULL && statussummary_ != NULL) delete statussummary_;
  statussummary_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsIlmMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  return statussummary_ != NULL ? *statussummary_ : *default_instance_->statussummary_;
}
::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::mutable_statussummary() {
  
  if (statussummary_ == NULL) {
    statussummary_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  return statussummary_;
}
::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = NULL;
  return temp;
}
void SLMplsIlmMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  delete statussummary_;
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmMsgRsp.StatusSummary)
}

// repeated .service_layer.SLMplsIlmRes Results = 3;
int SLMplsIlmMsgRsp::results_size() const {
  return results_.size();
}
void SLMplsIlmMsgRsp::clear_results() {
  results_.Clear();
}
const ::service_layer::SLMplsIlmRes& SLMplsIlmMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Get(index);
}
::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Mutable(index);
}
::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmRes >*
SLMplsIlmMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmMsgRsp.Results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmRes >&
SLMplsIlmMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmMsgRsp.Results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmGetMsg::kCorrelatorFieldNumber;
const int SLMplsIlmGetMsg::kKeyFieldNumber;
const int SLMplsIlmGetMsg::kEntriesCountFieldNumber;
const int SLMplsIlmGetMsg::kGetNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmGetMsg::SLMplsIlmGetMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmGetMsg)
}

void SLMplsIlmGetMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::service_layer::SLMplsIlmKey*>(&::service_layer::SLMplsIlmKey::default_instance());
}

SLMplsIlmGetMsg::SLMplsIlmGetMsg(const SLMplsIlmGetMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmGetMsg)
}

void SLMplsIlmGetMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  correlator_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  entriescount_ = 0u;
  getnext_ = false;
}

SLMplsIlmGetMsg::~SLMplsIlmGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmGetMsg)
  SharedDtor();
}

void SLMplsIlmGetMsg::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void SLMplsIlmGetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmGetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmGetMsg_descriptor_;
}

const SLMplsIlmGetMsg& SLMplsIlmGetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmGetMsg* SLMplsIlmGetMsg::default_instance_ = NULL;

SLMplsIlmGetMsg* SLMplsIlmGetMsg::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmGetMsg* n = new SLMplsIlmGetMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmGetMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SLMplsIlmGetMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(entriescount_, getnext_);
  correlator_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SLMplsIlmGetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmGetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Correlator = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // optional .service_layer.SLMplsIlmKey Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EntriesCount;
        break;
      }

      // optional uint32 EntriesCount = 3;
      case 3: {
        if (tag == 24) {
         parse_EntriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entriescount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GetNext;
        break;
      }

      // optional bool GetNext = 4;
      case 4: {
        if (tag == 32) {
         parse_GetNext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getnext_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmGetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmGetMsg)
  return false;
#undef DO_
}

void SLMplsIlmGetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmGetMsg)
  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlator(), output);
  }

  // optional .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entriescount(), output);
  }

  // optional bool GetNext = 4;
  if (this->getnext() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->getnext(), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmGetMsg)
}

::google::protobuf::uint8* SLMplsIlmGetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmGetMsg)
  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlator(), target);
  }

  // optional .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entriescount(), target);
  }

  // optional bool GetNext = 4;
  if (this->getnext() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->getnext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmGetMsg)
  return target;
}

int SLMplsIlmGetMsg::ByteSize() const {
  int total_size = 0;

  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // optional .service_layer.SLMplsIlmKey Key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional uint32 EntriesCount = 3;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entriescount());
  }

  // optional bool GetNext = 4;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmGetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmGetMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmGetMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmGetMsg::MergeFrom(const SLMplsIlmGetMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
  if (from.has_key()) {
    mutable_key()->::service_layer::SLMplsIlmKey::MergeFrom(from.key());
  }
  if (from.entriescount() != 0) {
    set_entriescount(from.entriescount());
  }
  if (from.getnext() != 0) {
    set_getnext(from.getnext());
  }
}

void SLMplsIlmGetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmGetMsg::CopyFrom(const SLMplsIlmGetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmGetMsg::IsInitialized() const {

  return true;
}

void SLMplsIlmGetMsg::Swap(SLMplsIlmGetMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmGetMsg::InternalSwap(SLMplsIlmGetMsg* other) {
  std::swap(correlator_, other->correlator_);
  std::swap(key_, other->key_);
  std::swap(entriescount_, other->entriescount_);
  std::swap(getnext_, other->getnext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmGetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmGetMsg_descriptor_;
  metadata.reflection = SLMplsIlmGetMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmGetMsg

// optional uint64 Correlator = 1;
void SLMplsIlmGetMsg::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLMplsIlmGetMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.Correlator)
  return correlator_;
}
 void SLMplsIlmGetMsg::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.Correlator)
}

// optional .service_layer.SLMplsIlmKey Key = 2;
bool SLMplsIlmGetMsg::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SLMplsIlmGetMsg::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::service_layer::SLMplsIlmKey& SLMplsIlmGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.Key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::service_layer::SLMplsIlmKey;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsg.Key)
  return key_;
}
::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::release_key() {
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = NULL;
  return temp;
}
void SLMplsIlmGetMsg::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmGetMsg.Key)
}

// optional uint32 EntriesCount = 3;
void SLMplsIlmGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
 ::google::protobuf::uint32 SLMplsIlmGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.EntriesCount)
  return entriescount_;
}
 void SLMplsIlmGetMsg::set_entriescount(::google::protobuf::uint32 value) {
  
  entriescount_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.EntriesCount)
}

// optional bool GetNext = 4;
void SLMplsIlmGetMsg::clear_getnext() {
  getnext_ = false;
}
 bool SLMplsIlmGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.GetNext)
  return getnext_;
}
 void SLMplsIlmGetMsg::set_getnext(bool value) {
  
  getnext_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.GetNext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLMplsIlmGetMsgRsp::kCorrelatorFieldNumber;
const int SLMplsIlmGetMsgRsp::kEofFieldNumber;
const int SLMplsIlmGetMsgRsp::kErrStatusFieldNumber;
const int SLMplsIlmGetMsgRsp::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLMplsIlmGetMsgRsp::SLMplsIlmGetMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:service_layer.SLMplsIlmGetMsgRsp)
}

void SLMplsIlmGetMsgRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(&::service_layer::SLErrorStatus::default_instance());
}

SLMplsIlmGetMsgRsp::SLMplsIlmGetMsgRsp(const SLMplsIlmGetMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLMplsIlmGetMsgRsp)
}

void SLMplsIlmGetMsgRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  correlator_ = GOOGLE_ULONGLONG(0);
  eof_ = false;
  errstatus_ = NULL;
}

SLMplsIlmGetMsgRsp::~SLMplsIlmGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLMplsIlmGetMsgRsp)
  SharedDtor();
}

void SLMplsIlmGetMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete errstatus_;
  }
}

void SLMplsIlmGetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLMplsIlmGetMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLMplsIlmGetMsgRsp_descriptor_;
}

const SLMplsIlmGetMsgRsp& SLMplsIlmGetMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sl_5fmpls_2eproto();
  return *default_instance_;
}

SLMplsIlmGetMsgRsp* SLMplsIlmGetMsgRsp::default_instance_ = NULL;

SLMplsIlmGetMsgRsp* SLMplsIlmGetMsgRsp::New(::google::protobuf::Arena* arena) const {
  SLMplsIlmGetMsgRsp* n = new SLMplsIlmGetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLMplsIlmGetMsgRsp::Clear() {
  correlator_ = GOOGLE_ULONGLONG(0);
  eof_ = false;
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  entries_.Clear();
}

bool SLMplsIlmGetMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:service_layer.SLMplsIlmGetMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Correlator = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlator_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Eof;
        break;
      }

      // optional bool Eof = 2;
      case 2: {
        if (tag == 16) {
         parse_Eof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ErrStatus;
        break;
      }

      // optional .service_layer.SLErrorStatus ErrStatus = 3;
      case 3: {
        if (tag == 26) {
         parse_ErrStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Entries;
        break;
      }

      // repeated .service_layer.SLMplsIlmEntry Entries = 4;
      case 4: {
        if (tag == 34) {
         parse_Entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:service_layer.SLMplsIlmGetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:service_layer.SLMplsIlmGetMsgRsp)
  return false;
#undef DO_
}

void SLMplsIlmGetMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:service_layer.SLMplsIlmGetMsgRsp)
  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlator(), output);
  }

  // optional bool Eof = 2;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->eof(), output);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->errstatus_, output);
  }

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:service_layer.SLMplsIlmGetMsgRsp)
}

::google::protobuf::uint8* SLMplsIlmGetMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLMplsIlmGetMsgRsp)
  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlator(), target);
  }

  // optional bool Eof = 2;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->eof(), target);
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->errstatus_, target);
  }

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->entries(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLMplsIlmGetMsgRsp)
  return target;
}

int SLMplsIlmGetMsgRsp::ByteSize() const {
  int total_size = 0;

  // optional uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlator());
  }

  // optional bool Eof = 2;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  // optional .service_layer.SLErrorStatus ErrStatus = 3;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLMplsIlmGetMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SLMplsIlmGetMsgRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SLMplsIlmGetMsgRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLMplsIlmGetMsgRsp::MergeFrom(const SLMplsIlmGetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entries_.MergeFrom(from.entries_);
  if (from.correlator() != 0) {
    set_correlator(from.correlator());
  }
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.has_errstatus()) {
    mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from.errstatus());
  }
}

void SLMplsIlmGetMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLMplsIlmGetMsgRsp::CopyFrom(const SLMplsIlmGetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLMplsIlmGetMsgRsp::IsInitialized() const {

  return true;
}

void SLMplsIlmGetMsgRsp::Swap(SLMplsIlmGetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLMplsIlmGetMsgRsp::InternalSwap(SLMplsIlmGetMsgRsp* other) {
  std::swap(correlator_, other->correlator_);
  std::swap(eof_, other->eof_);
  std::swap(errstatus_, other->errstatus_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLMplsIlmGetMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLMplsIlmGetMsgRsp_descriptor_;
  metadata.reflection = SLMplsIlmGetMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLMplsIlmGetMsgRsp

// optional uint64 Correlator = 1;
void SLMplsIlmGetMsgRsp::clear_correlator() {
  correlator_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SLMplsIlmGetMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Correlator)
  return correlator_;
}
 void SLMplsIlmGetMsgRsp::set_correlator(::google::protobuf::uint64 value) {
  
  correlator_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsgRsp.Correlator)
}

// optional bool Eof = 2;
void SLMplsIlmGetMsgRsp::clear_eof() {
  eof_ = false;
}
 bool SLMplsIlmGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Eof)
  return eof_;
}
 void SLMplsIlmGetMsgRsp::set_eof(bool value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsgRsp.Eof)
}

// optional .service_layer.SLErrorStatus ErrStatus = 3;
bool SLMplsIlmGetMsgRsp::has_errstatus() const {
  return !_is_default_instance_ && errstatus_ != NULL;
}
void SLMplsIlmGetMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::service_layer::SLErrorStatus& SLMplsIlmGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_ : *default_instance_->errstatus_;
}
::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::service_layer::SLErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  return errstatus_;
}
::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void SLMplsIlmGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLMplsIlmEntry Entries = 4;
int SLMplsIlmGetMsgRsp::entries_size() const {
  return entries_.size();
}
void SLMplsIlmGetMsgRsp::clear_entries() {
  entries_.Clear();
}
const ::service_layer::SLMplsIlmEntry& SLMplsIlmGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Get(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
SLMplsIlmGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
SLMplsIlmGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)
