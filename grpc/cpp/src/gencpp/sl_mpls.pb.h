// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_mpls.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fmpls_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fmpls_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fmpls_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fmpls_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fmpls_2eproto;
namespace service_layer {
class SLMplsCos;
class SLMplsCosDefaultTypeInternal;
extern SLMplsCosDefaultTypeInternal _SLMplsCos_default_instance_;
class SLMplsGetMsg;
class SLMplsGetMsgDefaultTypeInternal;
extern SLMplsGetMsgDefaultTypeInternal _SLMplsGetMsg_default_instance_;
class SLMplsGetMsgRsp;
class SLMplsGetMsgRspDefaultTypeInternal;
extern SLMplsGetMsgRspDefaultTypeInternal _SLMplsGetMsgRsp_default_instance_;
class SLMplsGetStatsMsgRsp;
class SLMplsGetStatsMsgRspDefaultTypeInternal;
extern SLMplsGetStatsMsgRspDefaultTypeInternal _SLMplsGetStatsMsgRsp_default_instance_;
class SLMplsIlmEntry;
class SLMplsIlmEntryDefaultTypeInternal;
extern SLMplsIlmEntryDefaultTypeInternal _SLMplsIlmEntry_default_instance_;
class SLMplsIlmGetMsg;
class SLMplsIlmGetMsgDefaultTypeInternal;
extern SLMplsIlmGetMsgDefaultTypeInternal _SLMplsIlmGetMsg_default_instance_;
class SLMplsIlmGetMsgRsp;
class SLMplsIlmGetMsgRspDefaultTypeInternal;
extern SLMplsIlmGetMsgRspDefaultTypeInternal _SLMplsIlmGetMsgRsp_default_instance_;
class SLMplsIlmKey;
class SLMplsIlmKeyDefaultTypeInternal;
extern SLMplsIlmKeyDefaultTypeInternal _SLMplsIlmKey_default_instance_;
class SLMplsIlmMsg;
class SLMplsIlmMsgDefaultTypeInternal;
extern SLMplsIlmMsgDefaultTypeInternal _SLMplsIlmMsg_default_instance_;
class SLMplsIlmMsgRsp;
class SLMplsIlmMsgRspDefaultTypeInternal;
extern SLMplsIlmMsgRspDefaultTypeInternal _SLMplsIlmMsgRsp_default_instance_;
class SLMplsIlmRes;
class SLMplsIlmResDefaultTypeInternal;
extern SLMplsIlmResDefaultTypeInternal _SLMplsIlmRes_default_instance_;
class SLMplsLabelBlockGetMsg;
class SLMplsLabelBlockGetMsgDefaultTypeInternal;
extern SLMplsLabelBlockGetMsgDefaultTypeInternal _SLMplsLabelBlockGetMsg_default_instance_;
class SLMplsLabelBlockGetMsgRsp;
class SLMplsLabelBlockGetMsgRspDefaultTypeInternal;
extern SLMplsLabelBlockGetMsgRspDefaultTypeInternal _SLMplsLabelBlockGetMsgRsp_default_instance_;
class SLMplsLabelBlockKey;
class SLMplsLabelBlockKeyDefaultTypeInternal;
extern SLMplsLabelBlockKeyDefaultTypeInternal _SLMplsLabelBlockKey_default_instance_;
class SLMplsLabelBlockMsg;
class SLMplsLabelBlockMsgDefaultTypeInternal;
extern SLMplsLabelBlockMsgDefaultTypeInternal _SLMplsLabelBlockMsg_default_instance_;
class SLMplsLabelBlockMsgRes;
class SLMplsLabelBlockMsgResDefaultTypeInternal;
extern SLMplsLabelBlockMsgResDefaultTypeInternal _SLMplsLabelBlockMsgRes_default_instance_;
class SLMplsLabelBlockMsgRsp;
class SLMplsLabelBlockMsgRspDefaultTypeInternal;
extern SLMplsLabelBlockMsgRspDefaultTypeInternal _SLMplsLabelBlockMsgRsp_default_instance_;
class SLMplsPath;
class SLMplsPathDefaultTypeInternal;
extern SLMplsPathDefaultTypeInternal _SLMplsPath_default_instance_;
class SLMplsRegMsg;
class SLMplsRegMsgDefaultTypeInternal;
extern SLMplsRegMsgDefaultTypeInternal _SLMplsRegMsg_default_instance_;
class SLMplsRegMsgRsp;
class SLMplsRegMsgRspDefaultTypeInternal;
extern SLMplsRegMsgRspDefaultTypeInternal _SLMplsRegMsgRsp_default_instance_;
class SlMplsReg;
class SlMplsRegDefaultTypeInternal;
extern SlMplsRegDefaultTypeInternal _SlMplsReg_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLMplsCos* Arena::CreateMaybeMessage<::service_layer::SLMplsCos>(Arena*);
template<> ::service_layer::SLMplsGetMsg* Arena::CreateMaybeMessage<::service_layer::SLMplsGetMsg>(Arena*);
template<> ::service_layer::SLMplsGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsGetMsgRsp>(Arena*);
template<> ::service_layer::SLMplsGetStatsMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsGetStatsMsgRsp>(Arena*);
template<> ::service_layer::SLMplsIlmEntry* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmEntry>(Arena*);
template<> ::service_layer::SLMplsIlmGetMsg* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmGetMsg>(Arena*);
template<> ::service_layer::SLMplsIlmGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmGetMsgRsp>(Arena*);
template<> ::service_layer::SLMplsIlmKey* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmKey>(Arena*);
template<> ::service_layer::SLMplsIlmMsg* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmMsg>(Arena*);
template<> ::service_layer::SLMplsIlmMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmMsgRsp>(Arena*);
template<> ::service_layer::SLMplsIlmRes* Arena::CreateMaybeMessage<::service_layer::SLMplsIlmRes>(Arena*);
template<> ::service_layer::SLMplsLabelBlockGetMsg* Arena::CreateMaybeMessage<::service_layer::SLMplsLabelBlockGetMsg>(Arena*);
template<> ::service_layer::SLMplsLabelBlockGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsLabelBlockGetMsgRsp>(Arena*);
template<> ::service_layer::SLMplsLabelBlockKey* Arena::CreateMaybeMessage<::service_layer::SLMplsLabelBlockKey>(Arena*);
template<> ::service_layer::SLMplsLabelBlockMsg* Arena::CreateMaybeMessage<::service_layer::SLMplsLabelBlockMsg>(Arena*);
template<> ::service_layer::SLMplsLabelBlockMsgRes* Arena::CreateMaybeMessage<::service_layer::SLMplsLabelBlockMsgRes>(Arena*);
template<> ::service_layer::SLMplsLabelBlockMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsLabelBlockMsgRsp>(Arena*);
template<> ::service_layer::SLMplsPath* Arena::CreateMaybeMessage<::service_layer::SLMplsPath>(Arena*);
template<> ::service_layer::SLMplsRegMsg* Arena::CreateMaybeMessage<::service_layer::SLMplsRegMsg>(Arena*);
template<> ::service_layer::SLMplsRegMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLMplsRegMsgRsp>(Arena*);
template<> ::service_layer::SlMplsReg* Arena::CreateMaybeMessage<::service_layer::SlMplsReg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SlLabelAction : int {
  SL_LABEL_ACTION_RESERVED = 0,
  SL_LABEL_ACTION_SWAP = 1,
  SL_LABEL_ACTION_POP_AND_FORWARD = 2,
  SL_LABEL_ACTION_POP_AND_LOOKUP_IPV4 = 3,
  SL_LABEL_ACTION_POP_AND_LOOKUP_IPV6 = 4,
  SL_LABEL_ACTION_POP_AND_LOOKUP = 5,
  SlLabelAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SlLabelAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SlLabelAction_IsValid(int value);
constexpr SlLabelAction SlLabelAction_MIN = SL_LABEL_ACTION_RESERVED;
constexpr SlLabelAction SlLabelAction_MAX = SL_LABEL_ACTION_POP_AND_LOOKUP;
constexpr int SlLabelAction_ARRAYSIZE = SlLabelAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlLabelAction_descriptor();
template<typename T>
inline const std::string& SlLabelAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SlLabelAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SlLabelAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SlLabelAction_descriptor(), enum_t_value);
}
inline bool SlLabelAction_Parse(
    const std::string& name, SlLabelAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SlLabelAction>(
    SlLabelAction_descriptor(), name, value);
}
enum SLMplsLabelBlockType : int {
  SL_MPLS_LABEL_BLOCK_TYPE_RESERVED = 0,
  SL_MPLS_LABEL_BLOCK_TYPE_SRGB = 1,
  SL_MPLS_LABEL_BLOCK_TYPE_CBF = 2,
  SLMplsLabelBlockType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SLMplsLabelBlockType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SLMplsLabelBlockType_IsValid(int value);
constexpr SLMplsLabelBlockType SLMplsLabelBlockType_MIN = SL_MPLS_LABEL_BLOCK_TYPE_RESERVED;
constexpr SLMplsLabelBlockType SLMplsLabelBlockType_MAX = SL_MPLS_LABEL_BLOCK_TYPE_CBF;
constexpr int SLMplsLabelBlockType_ARRAYSIZE = SLMplsLabelBlockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLMplsLabelBlockType_descriptor();
template<typename T>
inline const std::string& SLMplsLabelBlockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLMplsLabelBlockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLMplsLabelBlockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLMplsLabelBlockType_descriptor(), enum_t_value);
}
inline bool SLMplsLabelBlockType_Parse(
    const std::string& name, SLMplsLabelBlockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLMplsLabelBlockType>(
    SLMplsLabelBlockType_descriptor(), name, value);
}
// ===================================================================

class SLMplsLabelBlockKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsLabelBlockKey) */ {
 public:
  inline SLMplsLabelBlockKey() : SLMplsLabelBlockKey(nullptr) {};
  virtual ~SLMplsLabelBlockKey();

  SLMplsLabelBlockKey(const SLMplsLabelBlockKey& from);
  SLMplsLabelBlockKey(SLMplsLabelBlockKey&& from) noexcept
    : SLMplsLabelBlockKey() {
    *this = ::std::move(from);
  }

  inline SLMplsLabelBlockKey& operator=(const SLMplsLabelBlockKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsLabelBlockKey& operator=(SLMplsLabelBlockKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsLabelBlockKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsLabelBlockKey* internal_default_instance() {
    return reinterpret_cast<const SLMplsLabelBlockKey*>(
               &_SLMplsLabelBlockKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLMplsLabelBlockKey& a, SLMplsLabelBlockKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsLabelBlockKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsLabelBlockKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsLabelBlockKey* New() const final {
    return CreateMaybeMessage<SLMplsLabelBlockKey>(nullptr);
  }

  SLMplsLabelBlockKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsLabelBlockKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsLabelBlockKey& from);
  void MergeFrom(const SLMplsLabelBlockKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsLabelBlockKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsLabelBlockKey";
  }
  protected:
  explicit SLMplsLabelBlockKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 4,
    kStartLabelFieldNumber = 1,
    kLabelBlockSizeFieldNumber = 2,
    kBlockTypeFieldNumber = 3,
  };
  // string ClientName = 4;
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clientname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clientname(
      std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // uint32 StartLabel = 1;
  void clear_startlabel();
  ::PROTOBUF_NAMESPACE_ID::uint32 startlabel() const;
  void set_startlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startlabel() const;
  void _internal_set_startlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LabelBlockSize = 2;
  void clear_labelblocksize();
  ::PROTOBUF_NAMESPACE_ID::uint32 labelblocksize() const;
  void set_labelblocksize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelblocksize() const;
  void _internal_set_labelblocksize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .service_layer.SLMplsLabelBlockType BlockType = 3;
  void clear_blocktype();
  ::service_layer::SLMplsLabelBlockType blocktype() const;
  void set_blocktype(::service_layer::SLMplsLabelBlockType value);
  private:
  ::service_layer::SLMplsLabelBlockType _internal_blocktype() const;
  void _internal_set_blocktype(::service_layer::SLMplsLabelBlockType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsLabelBlockKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startlabel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 labelblocksize_;
  int blocktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsLabelBlockMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsLabelBlockMsg) */ {
 public:
  inline SLMplsLabelBlockMsg() : SLMplsLabelBlockMsg(nullptr) {};
  virtual ~SLMplsLabelBlockMsg();

  SLMplsLabelBlockMsg(const SLMplsLabelBlockMsg& from);
  SLMplsLabelBlockMsg(SLMplsLabelBlockMsg&& from) noexcept
    : SLMplsLabelBlockMsg() {
    *this = ::std::move(from);
  }

  inline SLMplsLabelBlockMsg& operator=(const SLMplsLabelBlockMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsLabelBlockMsg& operator=(SLMplsLabelBlockMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsLabelBlockMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsLabelBlockMsg* internal_default_instance() {
    return reinterpret_cast<const SLMplsLabelBlockMsg*>(
               &_SLMplsLabelBlockMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLMplsLabelBlockMsg& a, SLMplsLabelBlockMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsLabelBlockMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsLabelBlockMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsLabelBlockMsg* New() const final {
    return CreateMaybeMessage<SLMplsLabelBlockMsg>(nullptr);
  }

  SLMplsLabelBlockMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsLabelBlockMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsLabelBlockMsg& from);
  void MergeFrom(const SLMplsLabelBlockMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsLabelBlockMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsLabelBlockMsg";
  }
  protected:
  explicit SLMplsLabelBlockMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMplsBlocksFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
  int mplsblocks_size() const;
  private:
  int _internal_mplsblocks_size() const;
  public:
  void clear_mplsblocks();
  ::service_layer::SLMplsLabelBlockKey* mutable_mplsblocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
      mutable_mplsblocks();
  private:
  const ::service_layer::SLMplsLabelBlockKey& _internal_mplsblocks(int index) const;
  ::service_layer::SLMplsLabelBlockKey* _internal_add_mplsblocks();
  public:
  const ::service_layer::SLMplsLabelBlockKey& mplsblocks(int index) const;
  ::service_layer::SLMplsLabelBlockKey* add_mplsblocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
      mplsblocks() const;

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsLabelBlockMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey > mplsblocks_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsLabelBlockMsgRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsLabelBlockMsgRes) */ {
 public:
  inline SLMplsLabelBlockMsgRes() : SLMplsLabelBlockMsgRes(nullptr) {};
  virtual ~SLMplsLabelBlockMsgRes();

  SLMplsLabelBlockMsgRes(const SLMplsLabelBlockMsgRes& from);
  SLMplsLabelBlockMsgRes(SLMplsLabelBlockMsgRes&& from) noexcept
    : SLMplsLabelBlockMsgRes() {
    *this = ::std::move(from);
  }

  inline SLMplsLabelBlockMsgRes& operator=(const SLMplsLabelBlockMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsLabelBlockMsgRes& operator=(SLMplsLabelBlockMsgRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsLabelBlockMsgRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsLabelBlockMsgRes* internal_default_instance() {
    return reinterpret_cast<const SLMplsLabelBlockMsgRes*>(
               &_SLMplsLabelBlockMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLMplsLabelBlockMsgRes& a, SLMplsLabelBlockMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsLabelBlockMsgRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsLabelBlockMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsLabelBlockMsgRes* New() const final {
    return CreateMaybeMessage<SLMplsLabelBlockMsgRes>(nullptr);
  }

  SLMplsLabelBlockMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsLabelBlockMsgRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsLabelBlockMsgRes& from);
  void MergeFrom(const SLMplsLabelBlockMsgRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsLabelBlockMsgRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsLabelBlockMsgRes";
  }
  protected:
  explicit SLMplsLabelBlockMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLMplsLabelBlockKey Key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLMplsLabelBlockKey& key() const;
  ::service_layer::SLMplsLabelBlockKey* release_key();
  ::service_layer::SLMplsLabelBlockKey* mutable_key();
  void set_allocated_key(::service_layer::SLMplsLabelBlockKey* key);
  private:
  const ::service_layer::SLMplsLabelBlockKey& _internal_key() const;
  ::service_layer::SLMplsLabelBlockKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLMplsLabelBlockKey* key);
  ::service_layer::SLMplsLabelBlockKey* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsLabelBlockMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLMplsLabelBlockKey* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsLabelBlockMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsLabelBlockMsgRsp) */ {
 public:
  inline SLMplsLabelBlockMsgRsp() : SLMplsLabelBlockMsgRsp(nullptr) {};
  virtual ~SLMplsLabelBlockMsgRsp();

  SLMplsLabelBlockMsgRsp(const SLMplsLabelBlockMsgRsp& from);
  SLMplsLabelBlockMsgRsp(SLMplsLabelBlockMsgRsp&& from) noexcept
    : SLMplsLabelBlockMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsLabelBlockMsgRsp& operator=(const SLMplsLabelBlockMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsLabelBlockMsgRsp& operator=(SLMplsLabelBlockMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsLabelBlockMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsLabelBlockMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsLabelBlockMsgRsp*>(
               &_SLMplsLabelBlockMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLMplsLabelBlockMsgRsp& a, SLMplsLabelBlockMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsLabelBlockMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsLabelBlockMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsLabelBlockMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsLabelBlockMsgRsp>(nullptr);
  }

  SLMplsLabelBlockMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsLabelBlockMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsLabelBlockMsgRsp& from);
  void MergeFrom(const SLMplsLabelBlockMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsLabelBlockMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsLabelBlockMsgRsp";
  }
  protected:
  explicit SLMplsLabelBlockMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusSummaryFieldNumber = 1,
  };
  // repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLMplsLabelBlockMsgRes* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >*
      mutable_results();
  private:
  const ::service_layer::SLMplsLabelBlockMsgRes& _internal_results(int index) const;
  ::service_layer::SLMplsLabelBlockMsgRes* _internal_add_results();
  public:
  const ::service_layer::SLMplsLabelBlockMsgRes& results(int index) const;
  ::service_layer::SLMplsLabelBlockMsgRes* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsLabelBlockMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsLabelBlockGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsLabelBlockGetMsg) */ {
 public:
  inline SLMplsLabelBlockGetMsg() : SLMplsLabelBlockGetMsg(nullptr) {};
  virtual ~SLMplsLabelBlockGetMsg();

  SLMplsLabelBlockGetMsg(const SLMplsLabelBlockGetMsg& from);
  SLMplsLabelBlockGetMsg(SLMplsLabelBlockGetMsg&& from) noexcept
    : SLMplsLabelBlockGetMsg() {
    *this = ::std::move(from);
  }

  inline SLMplsLabelBlockGetMsg& operator=(const SLMplsLabelBlockGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsLabelBlockGetMsg& operator=(SLMplsLabelBlockGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsLabelBlockGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsLabelBlockGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLMplsLabelBlockGetMsg*>(
               &_SLMplsLabelBlockGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLMplsLabelBlockGetMsg& a, SLMplsLabelBlockGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsLabelBlockGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsLabelBlockGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsLabelBlockGetMsg* New() const final {
    return CreateMaybeMessage<SLMplsLabelBlockGetMsg>(nullptr);
  }

  SLMplsLabelBlockGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsLabelBlockGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsLabelBlockGetMsg& from);
  void MergeFrom(const SLMplsLabelBlockGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsLabelBlockGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsLabelBlockGetMsg";
  }
  protected:
  explicit SLMplsLabelBlockGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kEntriesCountFieldNumber = 2,
    kGetNextFieldNumber = 3,
  };
  // .service_layer.SLMplsLabelBlockKey Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLMplsLabelBlockKey& key() const;
  ::service_layer::SLMplsLabelBlockKey* release_key();
  ::service_layer::SLMplsLabelBlockKey* mutable_key();
  void set_allocated_key(::service_layer::SLMplsLabelBlockKey* key);
  private:
  const ::service_layer::SLMplsLabelBlockKey& _internal_key() const;
  ::service_layer::SLMplsLabelBlockKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLMplsLabelBlockKey* key);
  ::service_layer::SLMplsLabelBlockKey* unsafe_arena_release_key();

  // uint32 EntriesCount = 2;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 3;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsLabelBlockGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLMplsLabelBlockKey* key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsLabelBlockGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsLabelBlockGetMsgRsp) */ {
 public:
  inline SLMplsLabelBlockGetMsgRsp() : SLMplsLabelBlockGetMsgRsp(nullptr) {};
  virtual ~SLMplsLabelBlockGetMsgRsp();

  SLMplsLabelBlockGetMsgRsp(const SLMplsLabelBlockGetMsgRsp& from);
  SLMplsLabelBlockGetMsgRsp(SLMplsLabelBlockGetMsgRsp&& from) noexcept
    : SLMplsLabelBlockGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsLabelBlockGetMsgRsp& operator=(const SLMplsLabelBlockGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsLabelBlockGetMsgRsp& operator=(SLMplsLabelBlockGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsLabelBlockGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsLabelBlockGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsLabelBlockGetMsgRsp*>(
               &_SLMplsLabelBlockGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLMplsLabelBlockGetMsgRsp& a, SLMplsLabelBlockGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsLabelBlockGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsLabelBlockGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsLabelBlockGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsLabelBlockGetMsgRsp>(nullptr);
  }

  SLMplsLabelBlockGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsLabelBlockGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsLabelBlockGetMsgRsp& from);
  void MergeFrom(const SLMplsLabelBlockGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsLabelBlockGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsLabelBlockGetMsgRsp";
  }
  protected:
  explicit SLMplsLabelBlockGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrStatusFieldNumber = 2,
    kEofFieldNumber = 1,
  };
  // repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLMplsLabelBlockKey* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
      mutable_entries();
  private:
  const ::service_layer::SLMplsLabelBlockKey& _internal_entries(int index) const;
  ::service_layer::SLMplsLabelBlockKey* _internal_add_entries();
  public:
  const ::service_layer::SLMplsLabelBlockKey& entries(int index) const;
  ::service_layer::SLMplsLabelBlockKey* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // bool Eof = 1;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsLabelBlockGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SlMplsReg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SlMplsReg) */ {
 public:
  inline SlMplsReg() : SlMplsReg(nullptr) {};
  virtual ~SlMplsReg();

  SlMplsReg(const SlMplsReg& from);
  SlMplsReg(SlMplsReg&& from) noexcept
    : SlMplsReg() {
    *this = ::std::move(from);
  }

  inline SlMplsReg& operator=(const SlMplsReg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlMplsReg& operator=(SlMplsReg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlMplsReg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlMplsReg* internal_default_instance() {
    return reinterpret_cast<const SlMplsReg*>(
               &_SlMplsReg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SlMplsReg& a, SlMplsReg& b) {
    a.Swap(&b);
  }
  inline void Swap(SlMplsReg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlMplsReg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlMplsReg* New() const final {
    return CreateMaybeMessage<SlMplsReg>(nullptr);
  }

  SlMplsReg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlMplsReg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlMplsReg& from);
  void MergeFrom(const SlMplsReg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlMplsReg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SlMplsReg";
  }
  protected:
  explicit SlMplsReg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurgeIntervalSecondsFieldNumber = 1,
  };
  // uint32 PurgeIntervalSeconds = 1;
  void clear_purgeintervalseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 purgeintervalseconds() const;
  void set_purgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_purgeintervalseconds() const;
  void _internal_set_purgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SlMplsReg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 purgeintervalseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsRegMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsRegMsg) */ {
 public:
  inline SLMplsRegMsg() : SLMplsRegMsg(nullptr) {};
  virtual ~SLMplsRegMsg();

  SLMplsRegMsg(const SLMplsRegMsg& from);
  SLMplsRegMsg(SLMplsRegMsg&& from) noexcept
    : SLMplsRegMsg() {
    *this = ::std::move(from);
  }

  inline SLMplsRegMsg& operator=(const SLMplsRegMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsRegMsg& operator=(SLMplsRegMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsRegMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsRegMsg* internal_default_instance() {
    return reinterpret_cast<const SLMplsRegMsg*>(
               &_SLMplsRegMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLMplsRegMsg& a, SLMplsRegMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsRegMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsRegMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsRegMsg* New() const final {
    return CreateMaybeMessage<SLMplsRegMsg>(nullptr);
  }

  SLMplsRegMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsRegMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsRegMsg& from);
  void MergeFrom(const SLMplsRegMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsRegMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsRegMsg";
  }
  protected:
  explicit SLMplsRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegMsgFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // .service_layer.SlMplsReg RegMsg = 2;
  bool has_regmsg() const;
  private:
  bool _internal_has_regmsg() const;
  public:
  void clear_regmsg();
  const ::service_layer::SlMplsReg& regmsg() const;
  ::service_layer::SlMplsReg* release_regmsg();
  ::service_layer::SlMplsReg* mutable_regmsg();
  void set_allocated_regmsg(::service_layer::SlMplsReg* regmsg);
  private:
  const ::service_layer::SlMplsReg& _internal_regmsg() const;
  ::service_layer::SlMplsReg* _internal_mutable_regmsg();
  public:
  void unsafe_arena_set_allocated_regmsg(
      ::service_layer::SlMplsReg* regmsg);
  ::service_layer::SlMplsReg* unsafe_arena_release_regmsg();

  // .service_layer.SLRegOp Oper = 1;
  void clear_oper();
  ::service_layer::SLRegOp oper() const;
  void set_oper(::service_layer::SLRegOp value);
  private:
  ::service_layer::SLRegOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLRegOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsRegMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SlMplsReg* regmsg_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsRegMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsRegMsgRsp) */ {
 public:
  inline SLMplsRegMsgRsp() : SLMplsRegMsgRsp(nullptr) {};
  virtual ~SLMplsRegMsgRsp();

  SLMplsRegMsgRsp(const SLMplsRegMsgRsp& from);
  SLMplsRegMsgRsp(SLMplsRegMsgRsp&& from) noexcept
    : SLMplsRegMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsRegMsgRsp& operator=(const SLMplsRegMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsRegMsgRsp& operator=(SLMplsRegMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsRegMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsRegMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsRegMsgRsp*>(
               &_SLMplsRegMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLMplsRegMsgRsp& a, SLMplsRegMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsRegMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsRegMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsRegMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsRegMsgRsp>(nullptr);
  }

  SLMplsRegMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsRegMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsRegMsgRsp& from);
  void MergeFrom(const SLMplsRegMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsRegMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsRegMsgRsp";
  }
  protected:
  explicit SLMplsRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsRegMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsGetMsg) */ {
 public:
  inline SLMplsGetMsg() : SLMplsGetMsg(nullptr) {};
  virtual ~SLMplsGetMsg();

  SLMplsGetMsg(const SLMplsGetMsg& from);
  SLMplsGetMsg(SLMplsGetMsg&& from) noexcept
    : SLMplsGetMsg() {
    *this = ::std::move(from);
  }

  inline SLMplsGetMsg& operator=(const SLMplsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsGetMsg& operator=(SLMplsGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLMplsGetMsg*>(
               &_SLMplsGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLMplsGetMsg& a, SLMplsGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsGetMsg* New() const final {
    return CreateMaybeMessage<SLMplsGetMsg>(nullptr);
  }

  SLMplsGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsGetMsg& from);
  void MergeFrom(const SLMplsGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsGetMsg";
  }
  protected:
  explicit SLMplsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsGetMsgRsp) */ {
 public:
  inline SLMplsGetMsgRsp() : SLMplsGetMsgRsp(nullptr) {};
  virtual ~SLMplsGetMsgRsp();

  SLMplsGetMsgRsp(const SLMplsGetMsgRsp& from);
  SLMplsGetMsgRsp(SLMplsGetMsgRsp&& from) noexcept
    : SLMplsGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsGetMsgRsp& operator=(const SLMplsGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsGetMsgRsp& operator=(SLMplsGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsGetMsgRsp*>(
               &_SLMplsGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLMplsGetMsgRsp& a, SLMplsGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsGetMsgRsp>(nullptr);
  }

  SLMplsGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsGetMsgRsp& from);
  void MergeFrom(const SLMplsGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsGetMsgRsp";
  }
  protected:
  explicit SLMplsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kMaxLabelsPerBlockFieldNumber = 2,
    kMaxLabelblocksPerLabelblockmsgFieldNumber = 3,
    kMinStartLabelFieldNumber = 4,
    kLabelTableSizeFieldNumber = 5,
    kMaxIlmPerIlmmsgFieldNumber = 6,
    kMaxPathsPerIlmFieldNumber = 7,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 MaxLabelsPerBlock = 2;
  void clear_maxlabelsperblock();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlabelsperblock() const;
  void set_maxlabelsperblock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxlabelsperblock() const;
  void _internal_set_maxlabelsperblock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxLabelblocksPerLabelblockmsg = 3;
  void clear_maxlabelblocksperlabelblockmsg();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlabelblocksperlabelblockmsg() const;
  void set_maxlabelblocksperlabelblockmsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxlabelblocksperlabelblockmsg() const;
  void _internal_set_maxlabelblocksperlabelblockmsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinStartLabel = 4;
  void clear_minstartlabel();
  ::PROTOBUF_NAMESPACE_ID::uint32 minstartlabel() const;
  void set_minstartlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minstartlabel() const;
  void _internal_set_minstartlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LabelTableSize = 5;
  void clear_labeltablesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 labeltablesize() const;
  void set_labeltablesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labeltablesize() const;
  void _internal_set_labeltablesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxIlmPerIlmmsg = 6;
  void clear_maxilmperilmmsg();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxilmperilmmsg() const;
  void set_maxilmperilmmsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxilmperilmmsg() const;
  void _internal_set_maxilmperilmmsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxPathsPerIlm = 7;
  void clear_maxpathsperilm();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxpathsperilm() const;
  void set_maxpathsperilm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxpathsperilm() const;
  void _internal_set_maxpathsperilm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlabelsperblock_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlabelblocksperlabelblockmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minstartlabel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 labeltablesize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxilmperilmmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxpathsperilm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsGetStatsMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsGetStatsMsgRsp) */ {
 public:
  inline SLMplsGetStatsMsgRsp() : SLMplsGetStatsMsgRsp(nullptr) {};
  virtual ~SLMplsGetStatsMsgRsp();

  SLMplsGetStatsMsgRsp(const SLMplsGetStatsMsgRsp& from);
  SLMplsGetStatsMsgRsp(SLMplsGetStatsMsgRsp&& from) noexcept
    : SLMplsGetStatsMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsGetStatsMsgRsp& operator=(const SLMplsGetStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsGetStatsMsgRsp& operator=(SLMplsGetStatsMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsGetStatsMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsGetStatsMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsGetStatsMsgRsp*>(
               &_SLMplsGetStatsMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SLMplsGetStatsMsgRsp& a, SLMplsGetStatsMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsGetStatsMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsGetStatsMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsGetStatsMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsGetStatsMsgRsp>(nullptr);
  }

  SLMplsGetStatsMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsGetStatsMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsGetStatsMsgRsp& from);
  void MergeFrom(const SLMplsGetStatsMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsGetStatsMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsGetStatsMsgRsp";
  }
  protected:
  explicit SLMplsGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kLabelBlockCountFieldNumber = 2,
    kIlmCountFieldNumber = 3,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 LabelBlockCount = 2;
  void clear_labelblockcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 labelblockcount() const;
  void set_labelblockcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelblockcount() const;
  void _internal_set_labelblockcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 IlmCount = 3;
  void clear_ilmcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilmcount() const;
  void set_ilmcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilmcount() const;
  void _internal_set_ilmcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsGetStatsMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 labelblockcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilmcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsPath) */ {
 public:
  inline SLMplsPath() : SLMplsPath(nullptr) {};
  virtual ~SLMplsPath();

  SLMplsPath(const SLMplsPath& from);
  SLMplsPath(SLMplsPath&& from) noexcept
    : SLMplsPath() {
    *this = ::std::move(from);
  }

  inline SLMplsPath& operator=(const SLMplsPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsPath& operator=(SLMplsPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsPath* internal_default_instance() {
    return reinterpret_cast<const SLMplsPath*>(
               &_SLMplsPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SLMplsPath& a, SLMplsPath& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsPath* New() const final {
    return CreateMaybeMessage<SLMplsPath>(nullptr);
  }

  SLMplsPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsPath& from);
  void MergeFrom(const SLMplsPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsPath";
  }
  protected:
  explicit SLMplsPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtectedPathBitmapFieldNumber = 7,
    kLabelStackFieldNumber = 8,
    kRemoteAddressFieldNumber = 9,
    kVrfNameFieldNumber = 4,
    kNexthopAddressFieldNumber = 1,
    kNexthopInterfaceFieldNumber = 2,
    kLoadMetricFieldNumber = 3,
    kActionFieldNumber = 5,
    kPathIdFieldNumber = 6,
  };
  // repeated uint64 ProtectedPathBitmap = 7;
  int protectedpathbitmap_size() const;
  private:
  int _internal_protectedpathbitmap_size() const;
  public:
  void clear_protectedpathbitmap();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_protectedpathbitmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_protectedpathbitmap() const;
  void _internal_add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_protectedpathbitmap();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 protectedpathbitmap(int index) const;
  void set_protectedpathbitmap(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      protectedpathbitmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_protectedpathbitmap();

  // repeated uint32 LabelStack = 8;
  int labelstack_size() const;
  private:
  int _internal_labelstack_size() const;
  public:
  void clear_labelstack();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelstack(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labelstack() const;
  void _internal_add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labelstack();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labelstack(int index) const;
  void set_labelstack(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labelstack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labelstack();

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  int remoteaddress_size() const;
  private:
  int _internal_remoteaddress_size() const;
  public:
  void clear_remoteaddress();
  ::service_layer::SLIpAddress* mutable_remoteaddress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >*
      mutable_remoteaddress();
  private:
  const ::service_layer::SLIpAddress& _internal_remoteaddress(int index) const;
  ::service_layer::SLIpAddress* _internal_add_remoteaddress();
  public:
  const ::service_layer::SLIpAddress& remoteaddress(int index) const;
  ::service_layer::SLIpAddress* add_remoteaddress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >&
      remoteaddress() const;

  // string VrfName = 4;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLIpAddress NexthopAddress = 1;
  bool has_nexthopaddress() const;
  private:
  bool _internal_has_nexthopaddress() const;
  public:
  void clear_nexthopaddress();
  const ::service_layer::SLIpAddress& nexthopaddress() const;
  ::service_layer::SLIpAddress* release_nexthopaddress();
  ::service_layer::SLIpAddress* mutable_nexthopaddress();
  void set_allocated_nexthopaddress(::service_layer::SLIpAddress* nexthopaddress);
  private:
  const ::service_layer::SLIpAddress& _internal_nexthopaddress() const;
  ::service_layer::SLIpAddress* _internal_mutable_nexthopaddress();
  public:
  void unsafe_arena_set_allocated_nexthopaddress(
      ::service_layer::SLIpAddress* nexthopaddress);
  ::service_layer::SLIpAddress* unsafe_arena_release_nexthopaddress();

  // .service_layer.SLInterface NexthopInterface = 2;
  bool has_nexthopinterface() const;
  private:
  bool _internal_has_nexthopinterface() const;
  public:
  void clear_nexthopinterface();
  const ::service_layer::SLInterface& nexthopinterface() const;
  ::service_layer::SLInterface* release_nexthopinterface();
  ::service_layer::SLInterface* mutable_nexthopinterface();
  void set_allocated_nexthopinterface(::service_layer::SLInterface* nexthopinterface);
  private:
  const ::service_layer::SLInterface& _internal_nexthopinterface() const;
  ::service_layer::SLInterface* _internal_mutable_nexthopinterface();
  public:
  void unsafe_arena_set_allocated_nexthopinterface(
      ::service_layer::SLInterface* nexthopinterface);
  ::service_layer::SLInterface* unsafe_arena_release_nexthopinterface();

  // uint32 LoadMetric = 3;
  void clear_loadmetric();
  ::PROTOBUF_NAMESPACE_ID::uint32 loadmetric() const;
  void set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loadmetric() const;
  void _internal_set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .service_layer.SlLabelAction Action = 5;
  void clear_action();
  ::service_layer::SlLabelAction action() const;
  void set_action(::service_layer::SlLabelAction value);
  private:
  ::service_layer::SlLabelAction _internal_action() const;
  void _internal_set_action(::service_layer::SlLabelAction value);
  public:

  // uint32 PathId = 6;
  void clear_pathid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathid() const;
  void set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathid() const;
  void _internal_set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > protectedpathbitmap_;
  mutable std::atomic<int> _protectedpathbitmap_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labelstack_;
  mutable std::atomic<int> _labelstack_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress > remoteaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLIpAddress* nexthopaddress_;
  ::service_layer::SLInterface* nexthopinterface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loadmetric_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmKey) */ {
 public:
  inline SLMplsIlmKey() : SLMplsIlmKey(nullptr) {};
  virtual ~SLMplsIlmKey();

  SLMplsIlmKey(const SLMplsIlmKey& from);
  SLMplsIlmKey(SLMplsIlmKey&& from) noexcept
    : SLMplsIlmKey() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmKey& operator=(const SLMplsIlmKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmKey& operator=(SLMplsIlmKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmKey* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmKey*>(
               &_SLMplsIlmKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SLMplsIlmKey& a, SLMplsIlmKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmKey* New() const final {
    return CreateMaybeMessage<SLMplsIlmKey>(nullptr);
  }

  SLMplsIlmKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmKey& from);
  void MergeFrom(const SLMplsIlmKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmKey";
  }
  protected:
  explicit SLMplsIlmKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlMplsCosValFieldNumber = 2,
    kLocalLabelFieldNumber = 1,
  };
  // .service_layer.SLMplsCos SlMplsCosVal = 2;
  bool has_slmplscosval() const;
  private:
  bool _internal_has_slmplscosval() const;
  public:
  void clear_slmplscosval();
  const ::service_layer::SLMplsCos& slmplscosval() const;
  ::service_layer::SLMplsCos* release_slmplscosval();
  ::service_layer::SLMplsCos* mutable_slmplscosval();
  void set_allocated_slmplscosval(::service_layer::SLMplsCos* slmplscosval);
  private:
  const ::service_layer::SLMplsCos& _internal_slmplscosval() const;
  ::service_layer::SLMplsCos* _internal_mutable_slmplscosval();
  public:
  void unsafe_arena_set_allocated_slmplscosval(
      ::service_layer::SLMplsCos* slmplscosval);
  ::service_layer::SLMplsCos* unsafe_arena_release_slmplscosval();

  // uint32 LocalLabel = 1;
  void clear_locallabel();
  ::PROTOBUF_NAMESPACE_ID::uint32 locallabel() const;
  void set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_locallabel() const;
  void _internal_set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLMplsCos* slmplscosval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 locallabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsCos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsCos) */ {
 public:
  inline SLMplsCos() : SLMplsCos(nullptr) {};
  virtual ~SLMplsCos();

  SLMplsCos(const SLMplsCos& from);
  SLMplsCos(SLMplsCos&& from) noexcept
    : SLMplsCos() {
    *this = ::std::move(from);
  }

  inline SLMplsCos& operator=(const SLMplsCos& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsCos& operator=(SLMplsCos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsCos& default_instance();

  enum ValueCase {
    kExp = 1,
    kDefaultElspPath = 2,
    kForwardingClass = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsCos* internal_default_instance() {
    return reinterpret_cast<const SLMplsCos*>(
               &_SLMplsCos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SLMplsCos& a, SLMplsCos& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsCos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsCos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsCos* New() const final {
    return CreateMaybeMessage<SLMplsCos>(nullptr);
  }

  SLMplsCos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsCos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsCos& from);
  void MergeFrom(const SLMplsCos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsCos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsCos";
  }
  protected:
  explicit SLMplsCos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpFieldNumber = 1,
    kDefaultElspPathFieldNumber = 2,
    kForwardingClassFieldNumber = 3,
  };
  // uint32 Exp = 1;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool DefaultElspPath = 2;
  private:
  bool _internal_has_defaultelsppath() const;
  public:
  void clear_defaultelsppath();
  bool defaultelsppath() const;
  void set_defaultelsppath(bool value);
  private:
  bool _internal_defaultelsppath() const;
  void _internal_set_defaultelsppath(bool value);
  public:

  // uint32 ForwardingClass = 3;
  private:
  bool _internal_has_forwardingclass() const;
  public:
  void clear_forwardingclass();
  ::PROTOBUF_NAMESPACE_ID::uint32 forwardingclass() const;
  void set_forwardingclass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forwardingclass() const;
  void _internal_set_forwardingclass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLMplsCos)
 private:
  class _Internal;
  void set_has_exp();
  void set_has_defaultelsppath();
  void set_has_forwardingclass();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
    bool defaultelsppath_;
    ::PROTOBUF_NAMESPACE_ID::uint32 forwardingclass_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmEntry) */ {
 public:
  inline SLMplsIlmEntry() : SLMplsIlmEntry(nullptr) {};
  virtual ~SLMplsIlmEntry();

  SLMplsIlmEntry(const SLMplsIlmEntry& from);
  SLMplsIlmEntry(SLMplsIlmEntry&& from) noexcept
    : SLMplsIlmEntry() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmEntry& operator=(const SLMplsIlmEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmEntry& operator=(SLMplsIlmEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmEntry* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmEntry*>(
               &_SLMplsIlmEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SLMplsIlmEntry& a, SLMplsIlmEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmEntry* New() const final {
    return CreateMaybeMessage<SLMplsIlmEntry>(nullptr);
  }

  SLMplsIlmEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmEntry& from);
  void MergeFrom(const SLMplsIlmEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmEntry";
  }
  protected:
  explicit SLMplsIlmEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .service_layer.SLMplsPath Paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::service_layer::SLMplsPath* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsPath >*
      mutable_paths();
  private:
  const ::service_layer::SLMplsPath& _internal_paths(int index) const;
  ::service_layer::SLMplsPath* _internal_add_paths();
  public:
  const ::service_layer::SLMplsPath& paths(int index) const;
  ::service_layer::SLMplsPath* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsPath >&
      paths() const;

  // .service_layer.SLMplsIlmKey Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLMplsIlmKey& key() const;
  ::service_layer::SLMplsIlmKey* release_key();
  ::service_layer::SLMplsIlmKey* mutable_key();
  void set_allocated_key(::service_layer::SLMplsIlmKey* key);
  private:
  const ::service_layer::SLMplsIlmKey& _internal_key() const;
  ::service_layer::SLMplsIlmKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLMplsIlmKey* key);
  ::service_layer::SLMplsIlmKey* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsPath > paths_;
  ::service_layer::SLMplsIlmKey* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmMsg) */ {
 public:
  inline SLMplsIlmMsg() : SLMplsIlmMsg(nullptr) {};
  virtual ~SLMplsIlmMsg();

  SLMplsIlmMsg(const SLMplsIlmMsg& from);
  SLMplsIlmMsg(SLMplsIlmMsg&& from) noexcept
    : SLMplsIlmMsg() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmMsg& operator=(const SLMplsIlmMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmMsg& operator=(SLMplsIlmMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmMsg* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmMsg*>(
               &_SLMplsIlmMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SLMplsIlmMsg& a, SLMplsIlmMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmMsg* New() const final {
    return CreateMaybeMessage<SLMplsIlmMsg>(nullptr);
  }

  SLMplsIlmMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmMsg& from);
  void MergeFrom(const SLMplsIlmMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmMsg";
  }
  protected:
  explicit SLMplsIlmMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMplsIlmsFieldNumber = 3,
    kCorrelatorFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
  int mplsilms_size() const;
  private:
  int _internal_mplsilms_size() const;
  public:
  void clear_mplsilms();
  ::service_layer::SLMplsIlmEntry* mutable_mplsilms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
      mutable_mplsilms();
  private:
  const ::service_layer::SLMplsIlmEntry& _internal_mplsilms(int index) const;
  ::service_layer::SLMplsIlmEntry* _internal_add_mplsilms();
  public:
  const ::service_layer::SLMplsIlmEntry& mplsilms(int index) const;
  ::service_layer::SLMplsIlmEntry* add_mplsilms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
      mplsilms() const;

  // uint64 Correlator = 2;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry > mplsilms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmRes) */ {
 public:
  inline SLMplsIlmRes() : SLMplsIlmRes(nullptr) {};
  virtual ~SLMplsIlmRes();

  SLMplsIlmRes(const SLMplsIlmRes& from);
  SLMplsIlmRes(SLMplsIlmRes&& from) noexcept
    : SLMplsIlmRes() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmRes& operator=(const SLMplsIlmRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmRes& operator=(SLMplsIlmRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmRes* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmRes*>(
               &_SLMplsIlmRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SLMplsIlmRes& a, SLMplsIlmRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmRes* New() const final {
    return CreateMaybeMessage<SLMplsIlmRes>(nullptr);
  }

  SLMplsIlmRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmRes& from);
  void MergeFrom(const SLMplsIlmRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmRes";
  }
  protected:
  explicit SLMplsIlmRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLMplsIlmKey Key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLMplsIlmKey& key() const;
  ::service_layer::SLMplsIlmKey* release_key();
  ::service_layer::SLMplsIlmKey* mutable_key();
  void set_allocated_key(::service_layer::SLMplsIlmKey* key);
  private:
  const ::service_layer::SLMplsIlmKey& _internal_key() const;
  ::service_layer::SLMplsIlmKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLMplsIlmKey* key);
  ::service_layer::SLMplsIlmKey* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::service_layer::SLMplsIlmKey* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmMsgRsp) */ {
 public:
  inline SLMplsIlmMsgRsp() : SLMplsIlmMsgRsp(nullptr) {};
  virtual ~SLMplsIlmMsgRsp();

  SLMplsIlmMsgRsp(const SLMplsIlmMsgRsp& from);
  SLMplsIlmMsgRsp(SLMplsIlmMsgRsp&& from) noexcept
    : SLMplsIlmMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmMsgRsp& operator=(const SLMplsIlmMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmMsgRsp& operator=(SLMplsIlmMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmMsgRsp*>(
               &_SLMplsIlmMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SLMplsIlmMsgRsp& a, SLMplsIlmMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsIlmMsgRsp>(nullptr);
  }

  SLMplsIlmMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmMsgRsp& from);
  void MergeFrom(const SLMplsIlmMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmMsgRsp";
  }
  protected:
  explicit SLMplsIlmMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kStatusSummaryFieldNumber = 2,
    kCorrelatorFieldNumber = 1,
  };
  // repeated .service_layer.SLMplsIlmRes Results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLMplsIlmRes* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmRes >*
      mutable_results();
  private:
  const ::service_layer::SLMplsIlmRes& _internal_results(int index) const;
  ::service_layer::SLMplsIlmRes* _internal_add_results();
  public:
  const ::service_layer::SLMplsIlmRes& results(int index) const;
  ::service_layer::SLMplsIlmRes* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmRes >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 2;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmRes > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmGetMsg) */ {
 public:
  inline SLMplsIlmGetMsg() : SLMplsIlmGetMsg(nullptr) {};
  virtual ~SLMplsIlmGetMsg();

  SLMplsIlmGetMsg(const SLMplsIlmGetMsg& from);
  SLMplsIlmGetMsg(SLMplsIlmGetMsg&& from) noexcept
    : SLMplsIlmGetMsg() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmGetMsg& operator=(const SLMplsIlmGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmGetMsg& operator=(SLMplsIlmGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmGetMsg*>(
               &_SLMplsIlmGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SLMplsIlmGetMsg& a, SLMplsIlmGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmGetMsg* New() const final {
    return CreateMaybeMessage<SLMplsIlmGetMsg>(nullptr);
  }

  SLMplsIlmGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmGetMsg& from);
  void MergeFrom(const SLMplsIlmGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmGetMsg";
  }
  protected:
  explicit SLMplsIlmGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kCorrelatorFieldNumber = 1,
    kEntriesCountFieldNumber = 3,
    kGetNextFieldNumber = 4,
  };
  // .service_layer.SLMplsIlmKey Key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLMplsIlmKey& key() const;
  ::service_layer::SLMplsIlmKey* release_key();
  ::service_layer::SLMplsIlmKey* mutable_key();
  void set_allocated_key(::service_layer::SLMplsIlmKey* key);
  private:
  const ::service_layer::SLMplsIlmKey& _internal_key() const;
  ::service_layer::SLMplsIlmKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLMplsIlmKey* key);
  ::service_layer::SLMplsIlmKey* unsafe_arena_release_key();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 EntriesCount = 3;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 4;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLMplsIlmKey* key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// -------------------------------------------------------------------

class SLMplsIlmGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLMplsIlmGetMsgRsp) */ {
 public:
  inline SLMplsIlmGetMsgRsp() : SLMplsIlmGetMsgRsp(nullptr) {};
  virtual ~SLMplsIlmGetMsgRsp();

  SLMplsIlmGetMsgRsp(const SLMplsIlmGetMsgRsp& from);
  SLMplsIlmGetMsgRsp(SLMplsIlmGetMsgRsp&& from) noexcept
    : SLMplsIlmGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLMplsIlmGetMsgRsp& operator=(const SLMplsIlmGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMplsIlmGetMsgRsp& operator=(SLMplsIlmGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMplsIlmGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMplsIlmGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLMplsIlmGetMsgRsp*>(
               &_SLMplsIlmGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SLMplsIlmGetMsgRsp& a, SLMplsIlmGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLMplsIlmGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLMplsIlmGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLMplsIlmGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLMplsIlmGetMsgRsp>(nullptr);
  }

  SLMplsIlmGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMplsIlmGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMplsIlmGetMsgRsp& from);
  void MergeFrom(const SLMplsIlmGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMplsIlmGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLMplsIlmGetMsgRsp";
  }
  protected:
  explicit SLMplsIlmGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5fmpls_2eproto);
    return ::descriptor_table_sl_5fmpls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 4,
    kErrStatusFieldNumber = 3,
    kCorrelatorFieldNumber = 1,
    kEofFieldNumber = 2,
  };
  // repeated .service_layer.SLMplsIlmEntry Entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLMplsIlmEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
      mutable_entries();
  private:
  const ::service_layer::SLMplsIlmEntry& _internal_entries(int index) const;
  ::service_layer::SLMplsIlmEntry* _internal_add_entries();
  public:
  const ::service_layer::SLMplsIlmEntry& entries(int index) const;
  ::service_layer::SLMplsIlmEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 3;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool Eof = 2;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLMplsIlmGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fmpls_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLMplsLabelBlockKey

// uint32 StartLabel = 1;
inline void SLMplsLabelBlockKey::clear_startlabel() {
  startlabel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsLabelBlockKey::_internal_startlabel() const {
  return startlabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsLabelBlockKey::startlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.StartLabel)
  return _internal_startlabel();
}
inline void SLMplsLabelBlockKey::_internal_set_startlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  startlabel_ = value;
}
inline void SLMplsLabelBlockKey::set_startlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startlabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.StartLabel)
}

// uint32 LabelBlockSize = 2;
inline void SLMplsLabelBlockKey::clear_labelblocksize() {
  labelblocksize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsLabelBlockKey::_internal_labelblocksize() const {
  return labelblocksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsLabelBlockKey::labelblocksize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.LabelBlockSize)
  return _internal_labelblocksize();
}
inline void SLMplsLabelBlockKey::_internal_set_labelblocksize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  labelblocksize_ = value;
}
inline void SLMplsLabelBlockKey::set_labelblocksize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_labelblocksize(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.LabelBlockSize)
}

// .service_layer.SLMplsLabelBlockType BlockType = 3;
inline void SLMplsLabelBlockKey::clear_blocktype() {
  blocktype_ = 0;
}
inline ::service_layer::SLMplsLabelBlockType SLMplsLabelBlockKey::_internal_blocktype() const {
  return static_cast< ::service_layer::SLMplsLabelBlockType >(blocktype_);
}
inline ::service_layer::SLMplsLabelBlockType SLMplsLabelBlockKey::blocktype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.BlockType)
  return _internal_blocktype();
}
inline void SLMplsLabelBlockKey::_internal_set_blocktype(::service_layer::SLMplsLabelBlockType value) {
  
  blocktype_ = value;
}
inline void SLMplsLabelBlockKey::set_blocktype(::service_layer::SLMplsLabelBlockType value) {
  _internal_set_blocktype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.BlockType)
}

// string ClientName = 4;
inline void SLMplsLabelBlockKey::clear_clientname() {
  clientname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLMplsLabelBlockKey::clientname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockKey.ClientName)
  return _internal_clientname();
}
inline void SLMplsLabelBlockKey::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockKey.ClientName)
}
inline std::string* SLMplsLabelBlockKey::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockKey.ClientName)
  return _internal_mutable_clientname();
}
inline const std::string& SLMplsLabelBlockKey::_internal_clientname() const {
  return clientname_.Get();
}
inline void SLMplsLabelBlockKey::_internal_set_clientname(const std::string& value) {
  
  clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLMplsLabelBlockKey::set_clientname(std::string&& value) {
  
  clientname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLMplsLabelBlockKey.ClientName)
}
inline void SLMplsLabelBlockKey::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLMplsLabelBlockKey.ClientName)
}
inline void SLMplsLabelBlockKey::set_clientname(const char* value,
    size_t size) {
  
  clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLMplsLabelBlockKey.ClientName)
}
inline std::string* SLMplsLabelBlockKey::_internal_mutable_clientname() {
  
  return clientname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLMplsLabelBlockKey::release_clientname() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockKey.ClientName)
  return clientname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLMplsLabelBlockKey::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockKey.ClientName)
}
inline std::string* SLMplsLabelBlockKey::unsafe_arena_release_clientname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLMplsLabelBlockKey.ClientName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return clientname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLMplsLabelBlockKey::unsafe_arena_set_allocated_clientname(
    std::string* clientname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clientname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsLabelBlockKey.ClientName)
}

// -------------------------------------------------------------------

// SLMplsLabelBlockMsg

// .service_layer.SLObjectOp Oper = 1;
inline void SLMplsLabelBlockMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLMplsLabelBlockMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline ::service_layer::SLObjectOp SLMplsLabelBlockMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsg.Oper)
  return _internal_oper();
}
inline void SLMplsLabelBlockMsg::_internal_set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
}
inline void SLMplsLabelBlockMsg::set_oper(::service_layer::SLObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockMsg.Oper)
}

// repeated .service_layer.SLMplsLabelBlockKey MplsBlocks = 2;
inline int SLMplsLabelBlockMsg::_internal_mplsblocks_size() const {
  return mplsblocks_.size();
}
inline int SLMplsLabelBlockMsg::mplsblocks_size() const {
  return _internal_mplsblocks_size();
}
inline void SLMplsLabelBlockMsg::clear_mplsblocks() {
  mplsblocks_.Clear();
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::mutable_mplsblocks(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
SLMplsLabelBlockMsg::mutable_mplsblocks() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return &mplsblocks_;
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsg::_internal_mplsblocks(int index) const {
  return mplsblocks_.Get(index);
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsg::mplsblocks(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return _internal_mplsblocks(index);
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::_internal_add_mplsblocks() {
  return mplsblocks_.Add();
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsg::add_mplsblocks() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return _internal_add_mplsblocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
SLMplsLabelBlockMsg::mplsblocks() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockMsg.MplsBlocks)
  return mplsblocks_;
}

// -------------------------------------------------------------------

// SLMplsLabelBlockMsgRes

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLMplsLabelBlockMsgRes::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsLabelBlockMsgRes::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRes::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsLabelBlockMsgRes::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRes::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsLabelBlockMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRes.ErrStatus)
}

// .service_layer.SLMplsLabelBlockKey Key = 2;
inline bool SLMplsLabelBlockMsgRes::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLMplsLabelBlockMsgRes::has_key() const {
  return _internal_has_key();
}
inline void SLMplsLabelBlockMsgRes::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsgRes::_internal_key() const {
  const ::service_layer::SLMplsLabelBlockKey* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLMplsLabelBlockKey*>(
      &::service_layer::_SLMplsLabelBlockKey_default_instance_);
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockMsgRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRes.Key)
  return _internal_key();
}
inline void SLMplsLabelBlockMsgRes::unsafe_arena_set_allocated_key(
    ::service_layer::SLMplsLabelBlockKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsLabelBlockMsgRes.Key)
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockMsgRes.Key)
  
  ::service_layer::SLMplsLabelBlockKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLMplsLabelBlockKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockMsgRes::mutable_key() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRes.Key)
  return _internal_mutable_key();
}
inline void SLMplsLabelBlockMsgRes::set_allocated_key(::service_layer::SLMplsLabelBlockKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRes.Key)
}

// -------------------------------------------------------------------

// SLMplsLabelBlockMsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLMplsLabelBlockMsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLMplsLabelBlockMsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsLabelBlockMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLMplsLabelBlockMsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::release_statussummary() {
  auto temp = unsafe_arena_release_statussummary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockMsgRsp::mutable_statussummary() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
  return _internal_mutable_statussummary();
}
inline void SLMplsLabelBlockMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary)->GetArena();
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockMsgRsp.StatusSummary)
}

// repeated .service_layer.SLMplsLabelBlockMsgRes Results = 2;
inline int SLMplsLabelBlockMsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLMplsLabelBlockMsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLMplsLabelBlockMsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >*
SLMplsLabelBlockMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLMplsLabelBlockMsgRes& SLMplsLabelBlockMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLMplsLabelBlockMsgRes* SLMplsLabelBlockMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockMsgRes >&
SLMplsLabelBlockMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockMsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLMplsLabelBlockGetMsg

// .service_layer.SLMplsLabelBlockKey Key = 1;
inline bool SLMplsLabelBlockGetMsg::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLMplsLabelBlockGetMsg::has_key() const {
  return _internal_has_key();
}
inline void SLMplsLabelBlockGetMsg::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsg::_internal_key() const {
  const ::service_layer::SLMplsLabelBlockKey* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLMplsLabelBlockKey*>(
      &::service_layer::_SLMplsLabelBlockKey_default_instance_);
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.Key)
  return _internal_key();
}
inline void SLMplsLabelBlockGetMsg::unsafe_arena_set_allocated_key(
    ::service_layer::SLMplsLabelBlockKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsLabelBlockGetMsg.Key)
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockGetMsg.Key)
  
  ::service_layer::SLMplsLabelBlockKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLMplsLabelBlockKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsg::mutable_key() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsg.Key)
  return _internal_mutable_key();
}
inline void SLMplsLabelBlockGetMsg::set_allocated_key(::service_layer::SLMplsLabelBlockKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockGetMsg.Key)
}

// uint32 EntriesCount = 2;
inline void SLMplsLabelBlockGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsLabelBlockGetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsLabelBlockGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLMplsLabelBlockGetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLMplsLabelBlockGetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsg.EntriesCount)
}

// bool GetNext = 3;
inline void SLMplsLabelBlockGetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLMplsLabelBlockGetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLMplsLabelBlockGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsg.GetNext)
  return _internal_getnext();
}
inline void SLMplsLabelBlockGetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLMplsLabelBlockGetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLMplsLabelBlockGetMsgRsp

// bool Eof = 1;
inline void SLMplsLabelBlockGetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLMplsLabelBlockGetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLMplsLabelBlockGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLMplsLabelBlockGetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLMplsLabelBlockGetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsLabelBlockGetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLMplsLabelBlockGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsLabelBlockGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsLabelBlockGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsLabelBlockGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsLabelBlockGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsLabelBlockGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsLabelBlockGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsLabelBlockGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLMplsLabelBlockKey Entries = 3;
inline int SLMplsLabelBlockGetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLMplsLabelBlockGetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLMplsLabelBlockGetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >*
SLMplsLabelBlockGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLMplsLabelBlockKey& SLMplsLabelBlockGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLMplsLabelBlockKey* SLMplsLabelBlockGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsLabelBlockKey >&
SLMplsLabelBlockGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsLabelBlockGetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SlMplsReg

// uint32 PurgeIntervalSeconds = 1;
inline void SlMplsReg::clear_purgeintervalseconds() {
  purgeintervalseconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlMplsReg::_internal_purgeintervalseconds() const {
  return purgeintervalseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlMplsReg::purgeintervalseconds() const {
  // @@protoc_insertion_point(field_get:service_layer.SlMplsReg.PurgeIntervalSeconds)
  return _internal_purgeintervalseconds();
}
inline void SlMplsReg::_internal_set_purgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  purgeintervalseconds_ = value;
}
inline void SlMplsReg::set_purgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_purgeintervalseconds(value);
  // @@protoc_insertion_point(field_set:service_layer.SlMplsReg.PurgeIntervalSeconds)
}

// -------------------------------------------------------------------

// SLMplsRegMsg

// .service_layer.SLRegOp Oper = 1;
inline void SLMplsRegMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLRegOp SLMplsRegMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
inline ::service_layer::SLRegOp SLMplsRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsg.Oper)
  return _internal_oper();
}
inline void SLMplsRegMsg::_internal_set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
}
inline void SLMplsRegMsg::set_oper(::service_layer::SLRegOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsRegMsg.Oper)
}

// .service_layer.SlMplsReg RegMsg = 2;
inline bool SLMplsRegMsg::_internal_has_regmsg() const {
  return this != internal_default_instance() && regmsg_ != nullptr;
}
inline bool SLMplsRegMsg::has_regmsg() const {
  return _internal_has_regmsg();
}
inline void SLMplsRegMsg::clear_regmsg() {
  if (GetArena() == nullptr && regmsg_ != nullptr) {
    delete regmsg_;
  }
  regmsg_ = nullptr;
}
inline const ::service_layer::SlMplsReg& SLMplsRegMsg::_internal_regmsg() const {
  const ::service_layer::SlMplsReg* p = regmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SlMplsReg*>(
      &::service_layer::_SlMplsReg_default_instance_);
}
inline const ::service_layer::SlMplsReg& SLMplsRegMsg::regmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsg.RegMsg)
  return _internal_regmsg();
}
inline void SLMplsRegMsg::unsafe_arena_set_allocated_regmsg(
    ::service_layer::SlMplsReg* regmsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regmsg_);
  }
  regmsg_ = regmsg;
  if (regmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsRegMsg.RegMsg)
}
inline ::service_layer::SlMplsReg* SLMplsRegMsg::release_regmsg() {
  auto temp = unsafe_arena_release_regmsg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SlMplsReg* SLMplsRegMsg::unsafe_arena_release_regmsg() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsRegMsg.RegMsg)
  
  ::service_layer::SlMplsReg* temp = regmsg_;
  regmsg_ = nullptr;
  return temp;
}
inline ::service_layer::SlMplsReg* SLMplsRegMsg::_internal_mutable_regmsg() {
  
  if (regmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SlMplsReg>(GetArena());
    regmsg_ = p;
  }
  return regmsg_;
}
inline ::service_layer::SlMplsReg* SLMplsRegMsg::mutable_regmsg() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsRegMsg.RegMsg)
  return _internal_mutable_regmsg();
}
inline void SLMplsRegMsg::set_allocated_regmsg(::service_layer::SlMplsReg* regmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regmsg_;
  }
  if (regmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regmsg);
    if (message_arena != submessage_arena) {
      regmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regmsg, submessage_arena);
    }
    
  } else {
    
  }
  regmsg_ = regmsg;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsRegMsg.RegMsg)
}

// -------------------------------------------------------------------

// SLMplsRegMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLMplsRegMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsRegMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsRegMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsRegMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsRegMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsRegMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsRegMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsRegMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsRegMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsRegMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsRegMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsRegMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsRegMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsRegMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsRegMsgRsp.ErrStatus)
}

// -------------------------------------------------------------------

// SLMplsGetMsg

// -------------------------------------------------------------------

// SLMplsGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLMplsGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsGetMsgRsp.ErrStatus)
}

// uint32 MaxLabelsPerBlock = 2;
inline void SLMplsGetMsgRsp::clear_maxlabelsperblock() {
  maxlabelsperblock_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::_internal_maxlabelsperblock() const {
  return maxlabelsperblock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::maxlabelsperblock() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxLabelsPerBlock)
  return _internal_maxlabelsperblock();
}
inline void SLMplsGetMsgRsp::_internal_set_maxlabelsperblock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxlabelsperblock_ = value;
}
inline void SLMplsGetMsgRsp::set_maxlabelsperblock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxlabelsperblock(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxLabelsPerBlock)
}

// uint32 MaxLabelblocksPerLabelblockmsg = 3;
inline void SLMplsGetMsgRsp::clear_maxlabelblocksperlabelblockmsg() {
  maxlabelblocksperlabelblockmsg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::_internal_maxlabelblocksperlabelblockmsg() const {
  return maxlabelblocksperlabelblockmsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::maxlabelblocksperlabelblockmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxLabelblocksPerLabelblockmsg)
  return _internal_maxlabelblocksperlabelblockmsg();
}
inline void SLMplsGetMsgRsp::_internal_set_maxlabelblocksperlabelblockmsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxlabelblocksperlabelblockmsg_ = value;
}
inline void SLMplsGetMsgRsp::set_maxlabelblocksperlabelblockmsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxlabelblocksperlabelblockmsg(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxLabelblocksPerLabelblockmsg)
}

// uint32 MinStartLabel = 4;
inline void SLMplsGetMsgRsp::clear_minstartlabel() {
  minstartlabel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::_internal_minstartlabel() const {
  return minstartlabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::minstartlabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MinStartLabel)
  return _internal_minstartlabel();
}
inline void SLMplsGetMsgRsp::_internal_set_minstartlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minstartlabel_ = value;
}
inline void SLMplsGetMsgRsp::set_minstartlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minstartlabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MinStartLabel)
}

// uint32 LabelTableSize = 5;
inline void SLMplsGetMsgRsp::clear_labeltablesize() {
  labeltablesize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::_internal_labeltablesize() const {
  return labeltablesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::labeltablesize() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.LabelTableSize)
  return _internal_labeltablesize();
}
inline void SLMplsGetMsgRsp::_internal_set_labeltablesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  labeltablesize_ = value;
}
inline void SLMplsGetMsgRsp::set_labeltablesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_labeltablesize(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.LabelTableSize)
}

// uint32 MaxIlmPerIlmmsg = 6;
inline void SLMplsGetMsgRsp::clear_maxilmperilmmsg() {
  maxilmperilmmsg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::_internal_maxilmperilmmsg() const {
  return maxilmperilmmsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::maxilmperilmmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxIlmPerIlmmsg)
  return _internal_maxilmperilmmsg();
}
inline void SLMplsGetMsgRsp::_internal_set_maxilmperilmmsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxilmperilmmsg_ = value;
}
inline void SLMplsGetMsgRsp::set_maxilmperilmmsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxilmperilmmsg(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxIlmPerIlmmsg)
}

// uint32 MaxPathsPerIlm = 7;
inline void SLMplsGetMsgRsp::clear_maxpathsperilm() {
  maxpathsperilm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::_internal_maxpathsperilm() const {
  return maxpathsperilm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetMsgRsp::maxpathsperilm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetMsgRsp.MaxPathsPerIlm)
  return _internal_maxpathsperilm();
}
inline void SLMplsGetMsgRsp::_internal_set_maxpathsperilm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxpathsperilm_ = value;
}
inline void SLMplsGetMsgRsp::set_maxpathsperilm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxpathsperilm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetMsgRsp.MaxPathsPerIlm)
}

// -------------------------------------------------------------------

// SLMplsGetStatsMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLMplsGetStatsMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsGetStatsMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsGetStatsMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsGetStatsMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsGetStatsMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsGetStatsMsgRsp.ErrStatus)
}

// uint32 LabelBlockCount = 2;
inline void SLMplsGetStatsMsgRsp::clear_labelblockcount() {
  labelblockcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetStatsMsgRsp::_internal_labelblockcount() const {
  return labelblockcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetStatsMsgRsp::labelblockcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.LabelBlockCount)
  return _internal_labelblockcount();
}
inline void SLMplsGetStatsMsgRsp::_internal_set_labelblockcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  labelblockcount_ = value;
}
inline void SLMplsGetStatsMsgRsp::set_labelblockcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_labelblockcount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetStatsMsgRsp.LabelBlockCount)
}

// uint32 IlmCount = 3;
inline void SLMplsGetStatsMsgRsp::clear_ilmcount() {
  ilmcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetStatsMsgRsp::_internal_ilmcount() const {
  return ilmcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsGetStatsMsgRsp::ilmcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsGetStatsMsgRsp.IlmCount)
  return _internal_ilmcount();
}
inline void SLMplsGetStatsMsgRsp::_internal_set_ilmcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilmcount_ = value;
}
inline void SLMplsGetStatsMsgRsp::set_ilmcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilmcount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsGetStatsMsgRsp.IlmCount)
}

// -------------------------------------------------------------------

// SLMplsPath

// .service_layer.SLIpAddress NexthopAddress = 1;
inline bool SLMplsPath::_internal_has_nexthopaddress() const {
  return this != internal_default_instance() && nexthopaddress_ != nullptr;
}
inline bool SLMplsPath::has_nexthopaddress() const {
  return _internal_has_nexthopaddress();
}
inline const ::service_layer::SLIpAddress& SLMplsPath::_internal_nexthopaddress() const {
  const ::service_layer::SLIpAddress* p = nexthopaddress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLIpAddress*>(
      &::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLMplsPath::nexthopaddress() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.NexthopAddress)
  return _internal_nexthopaddress();
}
inline void SLMplsPath::unsafe_arena_set_allocated_nexthopaddress(
    ::service_layer::SLIpAddress* nexthopaddress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopaddress_);
  }
  nexthopaddress_ = nexthopaddress;
  if (nexthopaddress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsPath.NexthopAddress)
}
inline ::service_layer::SLIpAddress* SLMplsPath::release_nexthopaddress() {
  auto temp = unsafe_arena_release_nexthopaddress();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLIpAddress* SLMplsPath::unsafe_arena_release_nexthopaddress() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsPath.NexthopAddress)
  
  ::service_layer::SLIpAddress* temp = nexthopaddress_;
  nexthopaddress_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLMplsPath::_internal_mutable_nexthopaddress() {
  
  if (nexthopaddress_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArena());
    nexthopaddress_ = p;
  }
  return nexthopaddress_;
}
inline ::service_layer::SLIpAddress* SLMplsPath::mutable_nexthopaddress() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.NexthopAddress)
  return _internal_mutable_nexthopaddress();
}
inline void SLMplsPath::set_allocated_nexthopaddress(::service_layer::SLIpAddress* nexthopaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopaddress_);
  }
  if (nexthopaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopaddress)->GetArena();
    if (message_arena != submessage_arena) {
      nexthopaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopaddress, submessage_arena);
    }
    
  } else {
    
  }
  nexthopaddress_ = nexthopaddress;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.NexthopAddress)
}

// .service_layer.SLInterface NexthopInterface = 2;
inline bool SLMplsPath::_internal_has_nexthopinterface() const {
  return this != internal_default_instance() && nexthopinterface_ != nullptr;
}
inline bool SLMplsPath::has_nexthopinterface() const {
  return _internal_has_nexthopinterface();
}
inline const ::service_layer::SLInterface& SLMplsPath::_internal_nexthopinterface() const {
  const ::service_layer::SLInterface* p = nexthopinterface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLInterface*>(
      &::service_layer::_SLInterface_default_instance_);
}
inline const ::service_layer::SLInterface& SLMplsPath::nexthopinterface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.NexthopInterface)
  return _internal_nexthopinterface();
}
inline void SLMplsPath::unsafe_arena_set_allocated_nexthopinterface(
    ::service_layer::SLInterface* nexthopinterface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopinterface_);
  }
  nexthopinterface_ = nexthopinterface;
  if (nexthopinterface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsPath.NexthopInterface)
}
inline ::service_layer::SLInterface* SLMplsPath::release_nexthopinterface() {
  auto temp = unsafe_arena_release_nexthopinterface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLInterface* SLMplsPath::unsafe_arena_release_nexthopinterface() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsPath.NexthopInterface)
  
  ::service_layer::SLInterface* temp = nexthopinterface_;
  nexthopinterface_ = nullptr;
  return temp;
}
inline ::service_layer::SLInterface* SLMplsPath::_internal_mutable_nexthopinterface() {
  
  if (nexthopinterface_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLInterface>(GetArena());
    nexthopinterface_ = p;
  }
  return nexthopinterface_;
}
inline ::service_layer::SLInterface* SLMplsPath::mutable_nexthopinterface() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.NexthopInterface)
  return _internal_mutable_nexthopinterface();
}
inline void SLMplsPath::set_allocated_nexthopinterface(::service_layer::SLInterface* nexthopinterface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopinterface_);
  }
  if (nexthopinterface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopinterface)->GetArena();
    if (message_arena != submessage_arena) {
      nexthopinterface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopinterface, submessage_arena);
    }
    
  } else {
    
  }
  nexthopinterface_ = nexthopinterface;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.NexthopInterface)
}

// uint32 LoadMetric = 3;
inline void SLMplsPath::clear_loadmetric() {
  loadmetric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsPath::_internal_loadmetric() const {
  return loadmetric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsPath::loadmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.LoadMetric)
  return _internal_loadmetric();
}
inline void SLMplsPath::_internal_set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  loadmetric_ = value;
}
inline void SLMplsPath::set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loadmetric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.LoadMetric)
}

// string VrfName = 4;
inline void SLMplsPath::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLMplsPath::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.VrfName)
  return _internal_vrfname();
}
inline void SLMplsPath::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.VrfName)
}
inline std::string* SLMplsPath::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLMplsPath::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLMplsPath::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLMplsPath::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLMplsPath.VrfName)
}
inline void SLMplsPath::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLMplsPath.VrfName)
}
inline void SLMplsPath::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLMplsPath.VrfName)
}
inline std::string* SLMplsPath::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLMplsPath::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsPath.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLMplsPath::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsPath.VrfName)
}
inline std::string* SLMplsPath::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLMplsPath.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLMplsPath::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsPath.VrfName)
}

// .service_layer.SlLabelAction Action = 5;
inline void SLMplsPath::clear_action() {
  action_ = 0;
}
inline ::service_layer::SlLabelAction SLMplsPath::_internal_action() const {
  return static_cast< ::service_layer::SlLabelAction >(action_);
}
inline ::service_layer::SlLabelAction SLMplsPath::action() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.Action)
  return _internal_action();
}
inline void SLMplsPath::_internal_set_action(::service_layer::SlLabelAction value) {
  
  action_ = value;
}
inline void SLMplsPath::set_action(::service_layer::SlLabelAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.Action)
}

// uint32 PathId = 6;
inline void SLMplsPath::clear_pathid() {
  pathid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsPath::_internal_pathid() const {
  return pathid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsPath::pathid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.PathId)
  return _internal_pathid();
}
inline void SLMplsPath::_internal_set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pathid_ = value;
}
inline void SLMplsPath::set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.PathId)
}

// repeated uint64 ProtectedPathBitmap = 7;
inline int SLMplsPath::_internal_protectedpathbitmap_size() const {
  return protectedpathbitmap_.size();
}
inline int SLMplsPath::protectedpathbitmap_size() const {
  return _internal_protectedpathbitmap_size();
}
inline void SLMplsPath::clear_protectedpathbitmap() {
  protectedpathbitmap_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsPath::_internal_protectedpathbitmap(int index) const {
  return protectedpathbitmap_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsPath::protectedpathbitmap(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.ProtectedPathBitmap)
  return _internal_protectedpathbitmap(index);
}
inline void SLMplsPath::set_protectedpathbitmap(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  protectedpathbitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.ProtectedPathBitmap)
}
inline void SLMplsPath::_internal_add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  protectedpathbitmap_.Add(value);
}
inline void SLMplsPath::add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_protectedpathbitmap(value);
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.ProtectedPathBitmap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SLMplsPath::_internal_protectedpathbitmap() const {
  return protectedpathbitmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SLMplsPath::protectedpathbitmap() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.ProtectedPathBitmap)
  return _internal_protectedpathbitmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SLMplsPath::_internal_mutable_protectedpathbitmap() {
  return &protectedpathbitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SLMplsPath::mutable_protectedpathbitmap() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.ProtectedPathBitmap)
  return _internal_mutable_protectedpathbitmap();
}

// repeated uint32 LabelStack = 8;
inline int SLMplsPath::_internal_labelstack_size() const {
  return labelstack_.size();
}
inline int SLMplsPath::labelstack_size() const {
  return _internal_labelstack_size();
}
inline void SLMplsPath::clear_labelstack() {
  labelstack_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsPath::_internal_labelstack(int index) const {
  return labelstack_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsPath::labelstack(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.LabelStack)
  return _internal_labelstack(index);
}
inline void SLMplsPath::set_labelstack(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labelstack_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsPath.LabelStack)
}
inline void SLMplsPath::_internal_add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labelstack_.Add(value);
}
inline void SLMplsPath::add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labelstack(value);
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.LabelStack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SLMplsPath::_internal_labelstack() const {
  return labelstack_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SLMplsPath::labelstack() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.LabelStack)
  return _internal_labelstack();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SLMplsPath::_internal_mutable_labelstack() {
  return &labelstack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SLMplsPath::mutable_labelstack() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.LabelStack)
  return _internal_mutable_labelstack();
}

// repeated .service_layer.SLIpAddress RemoteAddress = 9;
inline int SLMplsPath::_internal_remoteaddress_size() const {
  return remoteaddress_.size();
}
inline int SLMplsPath::remoteaddress_size() const {
  return _internal_remoteaddress_size();
}
inline ::service_layer::SLIpAddress* SLMplsPath::mutable_remoteaddress(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >*
SLMplsPath::mutable_remoteaddress() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsPath.RemoteAddress)
  return &remoteaddress_;
}
inline const ::service_layer::SLIpAddress& SLMplsPath::_internal_remoteaddress(int index) const {
  return remoteaddress_.Get(index);
}
inline const ::service_layer::SLIpAddress& SLMplsPath::remoteaddress(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsPath.RemoteAddress)
  return _internal_remoteaddress(index);
}
inline ::service_layer::SLIpAddress* SLMplsPath::_internal_add_remoteaddress() {
  return remoteaddress_.Add();
}
inline ::service_layer::SLIpAddress* SLMplsPath::add_remoteaddress() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsPath.RemoteAddress)
  return _internal_add_remoteaddress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >&
SLMplsPath::remoteaddress() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsPath.RemoteAddress)
  return remoteaddress_;
}

// -------------------------------------------------------------------

// SLMplsIlmKey

// uint32 LocalLabel = 1;
inline void SLMplsIlmKey::clear_locallabel() {
  locallabel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsIlmKey::_internal_locallabel() const {
  return locallabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsIlmKey::locallabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmKey.LocalLabel)
  return _internal_locallabel();
}
inline void SLMplsIlmKey::_internal_set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  locallabel_ = value;
}
inline void SLMplsIlmKey::set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_locallabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmKey.LocalLabel)
}

// .service_layer.SLMplsCos SlMplsCosVal = 2;
inline bool SLMplsIlmKey::_internal_has_slmplscosval() const {
  return this != internal_default_instance() && slmplscosval_ != nullptr;
}
inline bool SLMplsIlmKey::has_slmplscosval() const {
  return _internal_has_slmplscosval();
}
inline void SLMplsIlmKey::clear_slmplscosval() {
  if (GetArena() == nullptr && slmplscosval_ != nullptr) {
    delete slmplscosval_;
  }
  slmplscosval_ = nullptr;
}
inline const ::service_layer::SLMplsCos& SLMplsIlmKey::_internal_slmplscosval() const {
  const ::service_layer::SLMplsCos* p = slmplscosval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLMplsCos*>(
      &::service_layer::_SLMplsCos_default_instance_);
}
inline const ::service_layer::SLMplsCos& SLMplsIlmKey::slmplscosval() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmKey.SlMplsCosVal)
  return _internal_slmplscosval();
}
inline void SLMplsIlmKey::unsafe_arena_set_allocated_slmplscosval(
    ::service_layer::SLMplsCos* slmplscosval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slmplscosval_);
  }
  slmplscosval_ = slmplscosval;
  if (slmplscosval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmKey.SlMplsCosVal)
}
inline ::service_layer::SLMplsCos* SLMplsIlmKey::release_slmplscosval() {
  auto temp = unsafe_arena_release_slmplscosval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLMplsCos* SLMplsIlmKey::unsafe_arena_release_slmplscosval() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmKey.SlMplsCosVal)
  
  ::service_layer::SLMplsCos* temp = slmplscosval_;
  slmplscosval_ = nullptr;
  return temp;
}
inline ::service_layer::SLMplsCos* SLMplsIlmKey::_internal_mutable_slmplscosval() {
  
  if (slmplscosval_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLMplsCos>(GetArena());
    slmplscosval_ = p;
  }
  return slmplscosval_;
}
inline ::service_layer::SLMplsCos* SLMplsIlmKey::mutable_slmplscosval() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmKey.SlMplsCosVal)
  return _internal_mutable_slmplscosval();
}
inline void SLMplsIlmKey::set_allocated_slmplscosval(::service_layer::SLMplsCos* slmplscosval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete slmplscosval_;
  }
  if (slmplscosval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slmplscosval);
    if (message_arena != submessage_arena) {
      slmplscosval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slmplscosval, submessage_arena);
    }
    
  } else {
    
  }
  slmplscosval_ = slmplscosval;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmKey.SlMplsCosVal)
}

// -------------------------------------------------------------------

// SLMplsCos

// uint32 Exp = 1;
inline bool SLMplsCos::_internal_has_exp() const {
  return value_case() == kExp;
}
inline void SLMplsCos::set_has_exp() {
  _oneof_case_[0] = kExp;
}
inline void SLMplsCos::clear_exp() {
  if (_internal_has_exp()) {
    value_.exp_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsCos::_internal_exp() const {
  if (_internal_has_exp()) {
    return value_.exp_;
  }
  return 0u;
}
inline void SLMplsCos::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_exp()) {
    clear_value();
    set_has_exp();
  }
  value_.exp_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsCos::exp() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsCos.Exp)
  return _internal_exp();
}
inline void SLMplsCos::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsCos.Exp)
}

// bool DefaultElspPath = 2;
inline bool SLMplsCos::_internal_has_defaultelsppath() const {
  return value_case() == kDefaultElspPath;
}
inline void SLMplsCos::set_has_defaultelsppath() {
  _oneof_case_[0] = kDefaultElspPath;
}
inline void SLMplsCos::clear_defaultelsppath() {
  if (_internal_has_defaultelsppath()) {
    value_.defaultelsppath_ = false;
    clear_has_value();
  }
}
inline bool SLMplsCos::_internal_defaultelsppath() const {
  if (_internal_has_defaultelsppath()) {
    return value_.defaultelsppath_;
  }
  return false;
}
inline void SLMplsCos::_internal_set_defaultelsppath(bool value) {
  if (!_internal_has_defaultelsppath()) {
    clear_value();
    set_has_defaultelsppath();
  }
  value_.defaultelsppath_ = value;
}
inline bool SLMplsCos::defaultelsppath() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsCos.DefaultElspPath)
  return _internal_defaultelsppath();
}
inline void SLMplsCos::set_defaultelsppath(bool value) {
  _internal_set_defaultelsppath(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsCos.DefaultElspPath)
}

// uint32 ForwardingClass = 3;
inline bool SLMplsCos::_internal_has_forwardingclass() const {
  return value_case() == kForwardingClass;
}
inline void SLMplsCos::set_has_forwardingclass() {
  _oneof_case_[0] = kForwardingClass;
}
inline void SLMplsCos::clear_forwardingclass() {
  if (_internal_has_forwardingclass()) {
    value_.forwardingclass_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsCos::_internal_forwardingclass() const {
  if (_internal_has_forwardingclass()) {
    return value_.forwardingclass_;
  }
  return 0u;
}
inline void SLMplsCos::_internal_set_forwardingclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_forwardingclass()) {
    clear_value();
    set_has_forwardingclass();
  }
  value_.forwardingclass_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsCos::forwardingclass() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsCos.ForwardingClass)
  return _internal_forwardingclass();
}
inline void SLMplsCos::set_forwardingclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forwardingclass(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsCos.ForwardingClass)
}

inline bool SLMplsCos::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SLMplsCos::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SLMplsCos::ValueCase SLMplsCos::value_case() const {
  return SLMplsCos::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLMplsIlmEntry

// .service_layer.SLMplsIlmKey Key = 1;
inline bool SLMplsIlmEntry::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLMplsIlmEntry::has_key() const {
  return _internal_has_key();
}
inline void SLMplsIlmEntry::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLMplsIlmKey& SLMplsIlmEntry::_internal_key() const {
  const ::service_layer::SLMplsIlmKey* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLMplsIlmKey*>(
      &::service_layer::_SLMplsIlmKey_default_instance_);
}
inline const ::service_layer::SLMplsIlmKey& SLMplsIlmEntry::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmEntry.Key)
  return _internal_key();
}
inline void SLMplsIlmEntry::unsafe_arena_set_allocated_key(
    ::service_layer::SLMplsIlmKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmEntry.Key)
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmEntry::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmEntry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmEntry.Key)
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmEntry::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLMplsIlmKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmEntry.Key)
  return _internal_mutable_key();
}
inline void SLMplsIlmEntry::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmEntry.Key)
}

// repeated .service_layer.SLMplsPath Paths = 2;
inline int SLMplsIlmEntry::_internal_paths_size() const {
  return paths_.size();
}
inline int SLMplsIlmEntry::paths_size() const {
  return _internal_paths_size();
}
inline void SLMplsIlmEntry::clear_paths() {
  paths_.Clear();
}
inline ::service_layer::SLMplsPath* SLMplsIlmEntry::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmEntry.Paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsPath >*
SLMplsIlmEntry::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmEntry.Paths)
  return &paths_;
}
inline const ::service_layer::SLMplsPath& SLMplsIlmEntry::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::service_layer::SLMplsPath& SLMplsIlmEntry::paths(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmEntry.Paths)
  return _internal_paths(index);
}
inline ::service_layer::SLMplsPath* SLMplsIlmEntry::_internal_add_paths() {
  return paths_.Add();
}
inline ::service_layer::SLMplsPath* SLMplsIlmEntry::add_paths() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmEntry.Paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsPath >&
SLMplsIlmEntry::paths() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmEntry.Paths)
  return paths_;
}

// -------------------------------------------------------------------

// SLMplsIlmMsg

// .service_layer.SLObjectOp Oper = 1;
inline void SLMplsIlmMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLMplsIlmMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline ::service_layer::SLObjectOp SLMplsIlmMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.Oper)
  return _internal_oper();
}
inline void SLMplsIlmMsg::_internal_set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
}
inline void SLMplsIlmMsg::set_oper(::service_layer::SLObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsg.Oper)
}

// uint64 Correlator = 2;
inline void SLMplsIlmMsg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmMsg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.Correlator)
  return _internal_correlator();
}
inline void SLMplsIlmMsg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLMplsIlmMsg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsg.Correlator)
}

// repeated .service_layer.SLMplsIlmEntry MplsIlms = 3;
inline int SLMplsIlmMsg::_internal_mplsilms_size() const {
  return mplsilms_.size();
}
inline int SLMplsIlmMsg::mplsilms_size() const {
  return _internal_mplsilms_size();
}
inline void SLMplsIlmMsg::clear_mplsilms() {
  mplsilms_.Clear();
}
inline ::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::mutable_mplsilms(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
SLMplsIlmMsg::mutable_mplsilms() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmMsg.MplsIlms)
  return &mplsilms_;
}
inline const ::service_layer::SLMplsIlmEntry& SLMplsIlmMsg::_internal_mplsilms(int index) const {
  return mplsilms_.Get(index);
}
inline const ::service_layer::SLMplsIlmEntry& SLMplsIlmMsg::mplsilms(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsg.MplsIlms)
  return _internal_mplsilms(index);
}
inline ::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::_internal_add_mplsilms() {
  return mplsilms_.Add();
}
inline ::service_layer::SLMplsIlmEntry* SLMplsIlmMsg::add_mplsilms() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmMsg.MplsIlms)
  return _internal_add_mplsilms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
SLMplsIlmMsg::mplsilms() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmMsg.MplsIlms)
  return mplsilms_;
}

// -------------------------------------------------------------------

// SLMplsIlmRes

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLMplsIlmRes::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsIlmRes::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsIlmRes::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsIlmRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmRes.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsIlmRes::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmRes.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsIlmRes::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmRes::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmRes::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmRes::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmRes.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsIlmRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmRes.ErrStatus)
}

// .service_layer.SLMplsIlmKey Key = 2;
inline bool SLMplsIlmRes::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLMplsIlmRes::has_key() const {
  return _internal_has_key();
}
inline void SLMplsIlmRes::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLMplsIlmKey& SLMplsIlmRes::_internal_key() const {
  const ::service_layer::SLMplsIlmKey* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLMplsIlmKey*>(
      &::service_layer::_SLMplsIlmKey_default_instance_);
}
inline const ::service_layer::SLMplsIlmKey& SLMplsIlmRes::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmRes.Key)
  return _internal_key();
}
inline void SLMplsIlmRes::unsafe_arena_set_allocated_key(
    ::service_layer::SLMplsIlmKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmRes.Key)
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmRes::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmRes::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmRes.Key)
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmRes::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLMplsIlmKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmRes::mutable_key() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmRes.Key)
  return _internal_mutable_key();
}
inline void SLMplsIlmRes::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmRes.Key)
}

// -------------------------------------------------------------------

// SLMplsIlmMsgRsp

// uint64 Correlator = 1;
inline void SLMplsIlmMsgRsp::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmMsgRsp::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLMplsIlmMsgRsp::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLMplsIlmMsgRsp::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmMsgRsp.Correlator)
}

// .service_layer.SLErrorStatus StatusSummary = 2;
inline bool SLMplsIlmMsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLMplsIlmMsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLMplsIlmMsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsIlmMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLMplsIlmMsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmMsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::release_statussummary() {
  auto temp = unsafe_arena_release_statussummary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmMsgRsp::mutable_statussummary() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsgRsp.StatusSummary)
  return _internal_mutable_statussummary();
}
inline void SLMplsIlmMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary)->GetArena();
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmMsgRsp.StatusSummary)
}

// repeated .service_layer.SLMplsIlmRes Results = 3;
inline int SLMplsIlmMsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLMplsIlmMsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLMplsIlmMsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmMsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmRes >*
SLMplsIlmMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmMsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLMplsIlmRes& SLMplsIlmMsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLMplsIlmRes& SLMplsIlmMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmMsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLMplsIlmRes* SLMplsIlmMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmMsgRsp.Results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmRes >&
SLMplsIlmMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmMsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLMplsIlmGetMsg

// uint64 Correlator = 1;
inline void SLMplsIlmGetMsg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmGetMsg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmGetMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.Correlator)
  return _internal_correlator();
}
inline void SLMplsIlmGetMsg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLMplsIlmGetMsg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.Correlator)
}

// .service_layer.SLMplsIlmKey Key = 2;
inline bool SLMplsIlmGetMsg::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLMplsIlmGetMsg::has_key() const {
  return _internal_has_key();
}
inline void SLMplsIlmGetMsg::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::service_layer::SLMplsIlmKey& SLMplsIlmGetMsg::_internal_key() const {
  const ::service_layer::SLMplsIlmKey* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLMplsIlmKey*>(
      &::service_layer::_SLMplsIlmKey_default_instance_);
}
inline const ::service_layer::SLMplsIlmKey& SLMplsIlmGetMsg::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.Key)
  return _internal_key();
}
inline void SLMplsIlmGetMsg::unsafe_arena_set_allocated_key(
    ::service_layer::SLMplsIlmKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmGetMsg.Key)
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmGetMsg.Key)
  
  ::service_layer::SLMplsIlmKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLMplsIlmKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLMplsIlmKey* SLMplsIlmGetMsg::mutable_key() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsg.Key)
  return _internal_mutable_key();
}
inline void SLMplsIlmGetMsg::set_allocated_key(::service_layer::SLMplsIlmKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmGetMsg.Key)
}

// uint32 EntriesCount = 3;
inline void SLMplsIlmGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsIlmGetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMplsIlmGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLMplsIlmGetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLMplsIlmGetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.EntriesCount)
}

// bool GetNext = 4;
inline void SLMplsIlmGetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLMplsIlmGetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLMplsIlmGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsg.GetNext)
  return _internal_getnext();
}
inline void SLMplsIlmGetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLMplsIlmGetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLMplsIlmGetMsgRsp

// uint64 Correlator = 1;
inline void SLMplsIlmGetMsgRsp::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmGetMsgRsp::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLMplsIlmGetMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLMplsIlmGetMsgRsp::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLMplsIlmGetMsgRsp::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsgRsp.Correlator)
}

// bool Eof = 2;
inline void SLMplsIlmGetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLMplsIlmGetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLMplsIlmGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLMplsIlmGetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLMplsIlmGetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLMplsIlmGetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 3;
inline bool SLMplsIlmGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLMplsIlmGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLMplsIlmGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLMplsIlmGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLMplsIlmGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLMplsIlmGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLMplsIlmGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLMplsIlmGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLMplsIlmEntry Entries = 4;
inline int SLMplsIlmGetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLMplsIlmGetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLMplsIlmGetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >*
SLMplsIlmGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLMplsIlmEntry& SLMplsIlmGetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLMplsIlmEntry& SLMplsIlmGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLMplsIlmEntry* SLMplsIlmGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLMplsIlmEntry >&
SLMplsIlmGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLMplsIlmGetMsgRsp.Entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SlLabelAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SlLabelAction>() {
  return ::service_layer::SlLabelAction_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLMplsLabelBlockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLMplsLabelBlockType>() {
  return ::service_layer::SLMplsLabelBlockType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fmpls_2eproto
