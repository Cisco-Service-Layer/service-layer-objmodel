// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_policy.proto
// Original file comments:
// @file 
// @brief Client RPC proto file for Policy RPCs. 
// Declares calls for adding, replacing, deleting the policies
// and apply, unapply policies from interfaces.
// 
// ----------------------------------------------------------------
//  Copyright (c) 2024-2025 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_sl_5fpolicy_2eproto__INCLUDED
#define GRPC_sl_5fpolicy_2eproto__INCLUDED

#include "sl_policy.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLPolicy
// @ingroup Policy
// Used for:
// - Policy creation, replacement, and deletion
// - Rule addition, and deletion from Policy
// - Apply and Un-apply Policy from Interfaces
//
// Defines the RPC for operations on Policy, Interface and get requests.
// @{ 
class SLPolicy final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLPolicy";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //    
    // Policy-object operations
    //
    //
    // Policy and its rules
    // Example for policy p1 with 3 rules r1, r2 and r3
    // ------------------------------------------------
    // Policy p1  
    //  Rule r1    
    //  Priority 1
    //  Match dscp 1  
    //  Match PathGroup Silver
    //  Action PathGroup Bronze  
    //                              
    //  Rule r2 
    //  Priority 2
    //  Match dscp 2
    //  Match PathGroup Bronze
    //  Action PathGroup Silver
    //  
    //  Rule r3
    //  Priority 3
    //  Match PathGroup xxx
    //  Action PathGroup Gold
    // End-policy 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_ADD 
    // Add a new Policy object with rules (if specified).
    // ADD operation implements MERGE semantics if the Policy object
    // already exists.
    // If the incoming Policy object contains rules that are already
    // present (and idempotent) in the server's Policy object, they will
    // be ignored, and success will be returned for each such rule object.
    // Update/modification to existing rule objects are rejected and
    // error returned for that rule object.
    // Rule objects in the request that do not exist in the server's
    // Policy object will be appended to the existing Policy object.
    // Existing rule objects in the server's Policy object are not
    // affected.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_REPLACE
    // Replace an existing Policy Object with the incoming Policy Object.
    // As part of the replace,
    //  - Newly added Rule Objects will be created.
    //  - Rule Objects that did not change (idempotent) are not impacted.
    //  - Rule Objects that that no longer exist in the new Policy will
    //    be implicitly deleted.
    //
    // Example,
    // P{r1, r2, r3} + POLICY_REPLACE(P{r1, r3, r4}) -> P{r1, r3, r4}
    // i.e., for an existing Policy P{r1, r2, r3} on server side,
    // perform POLICY_REPLACE(P{r1, r3, r4}) where r1, r3 are
    // idempotent (i.e., matches, action, priority are exactly same)
    // with the server side Rule Object, the final Policy Object will
    // be: P{r1, r3, r4}
    // In terms of operations performed on the Policy Object,
    //   r2 will be deleted,
    //   r4 will be added,
    //   no changes to r1, r3 since they are unmodified. No traffic
    //   impact is expected to these rules.
    // Any errors encountered while performing the above operations
    // will be reported accordingly.
    // The order of Rule Objects in the request does not affect handling
    // i.e., POLICY_REPLACE(P{r1, r3, r4}) and POLICY_REPLACE(P{r4, r3, r1})
    // will have same behavior.
    //
    // Add a new Policy Object if it does not exist.
    //
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_DELETE 
    // Delete the policy object. The object's key is enough to delete the 
    // object. Other attributes if present are ignored. Delete of a non-
    // existent object is returned as success.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_RULE_ADD 
    // Add rules to an existing Policy object. If any of the rules exist,
    // return success if the new rule is the same as existing rule. Else
    // error is returned as rule modification is not supported.
    // Fails if the Policy object key does not exist in the system or if
    // no rule is provided.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_RULE_DELETE 
    // If the policy object does not exist, "Policy not found" error
    // is returned. If policy object exists, delete the list of rules
    // provided. Delete of a non-existent rule within a policy object
    // is returned as success. If the last rule within a policy object
    // is deleted, an empty policy will continue to exist. Fails if no
    // rule is provided.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_APPLY 
    // Apply the policy on an interface. Only the policy object key
    // and the interface where it needs to be applied will be verified
    // and used. Other attributes are ignored.  
    //
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_UNAPPLY 
    // Unapply the policy on an interface. Only the policy object key
    // and the interface where it needs to be removed from  will be 
    // verified and used, other attributes are ignored.
    // 
    //
    //
    // The device can be programmed by only one active instance of 
    // this RPC.
    //
    // On client restart or RPC disconnects, the client has the
    // to reconcile its new state with the state on the device
    // by replaying the difference.
    // 
    virtual ::grpc::Status SLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::service_layer::SLPolicyOpRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyOpRsp>> AsyncSLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyOpRsp>>(AsyncSLPolicyOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyOpRsp>> PrepareAsyncSLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyOpRsp>>(PrepareAsyncSLPolicyOpRaw(context, request, cq));
    }
    // Retrieve all Policies and its rules and the interfaces where the  
    // policy is applied from the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLPolicyGetMsgRsp>> SLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::service_layer::SLPolicyGetMsgRsp>>(SLPolicyGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLPolicyGetMsgRsp>> AsyncSLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLPolicyGetMsgRsp>>(AsyncSLPolicyGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLPolicyGetMsgRsp>> PrepareAsyncSLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::service_layer::SLPolicyGetMsgRsp>>(PrepareAsyncSLPolicyGetRaw(context, request, cq));
    }
    // Retrieve Global Policy capabilities 
    virtual ::grpc::Status SLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::service_layer::SLPolicyGlobalGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyGlobalGetMsgRsp>> AsyncSLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyGlobalGetMsgRsp>>(AsyncSLPolicyGlobalGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyGlobalGetMsgRsp>> PrepareAsyncSLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyGlobalGetMsgRsp>>(PrepareAsyncSLPolicyGlobalGetRaw(context, request, cq));
    }
    // @} 
    class async_interface {
     public:
      virtual ~async_interface() {}
      //    
      // Policy-object operations
      //
      //
      // Policy and its rules
      // Example for policy p1 with 3 rules r1, r2 and r3
      // ------------------------------------------------
      // Policy p1  
      //  Rule r1    
      //  Priority 1
      //  Match dscp 1  
      //  Match PathGroup Silver
      //  Action PathGroup Bronze  
      //                              
      //  Rule r2 
      //  Priority 2
      //  Match dscp 2
      //  Match PathGroup Bronze
      //  Action PathGroup Silver
      //  
      //  Rule r3
      //  Priority 3
      //  Match PathGroup xxx
      //  Action PathGroup Gold
      // End-policy 
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_ADD 
      // Add a new Policy object with rules (if specified).
      // ADD operation implements MERGE semantics if the Policy object
      // already exists.
      // If the incoming Policy object contains rules that are already
      // present (and idempotent) in the server's Policy object, they will
      // be ignored, and success will be returned for each such rule object.
      // Update/modification to existing rule objects are rejected and
      // error returned for that rule object.
      // Rule objects in the request that do not exist in the server's
      // Policy object will be appended to the existing Policy object.
      // Existing rule objects in the server's Policy object are not
      // affected.
      // 
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_REPLACE
      // Replace an existing Policy Object with the incoming Policy Object.
      // As part of the replace,
      //  - Newly added Rule Objects will be created.
      //  - Rule Objects that did not change (idempotent) are not impacted.
      //  - Rule Objects that that no longer exist in the new Policy will
      //    be implicitly deleted.
      //
      // Example,
      // P{r1, r2, r3} + POLICY_REPLACE(P{r1, r3, r4}) -> P{r1, r3, r4}
      // i.e., for an existing Policy P{r1, r2, r3} on server side,
      // perform POLICY_REPLACE(P{r1, r3, r4}) where r1, r3 are
      // idempotent (i.e., matches, action, priority are exactly same)
      // with the server side Rule Object, the final Policy Object will
      // be: P{r1, r3, r4}
      // In terms of operations performed on the Policy Object,
      //   r2 will be deleted,
      //   r4 will be added,
      //   no changes to r1, r3 since they are unmodified. No traffic
      //   impact is expected to these rules.
      // Any errors encountered while performing the above operations
      // will be reported accordingly.
      // The order of Rule Objects in the request does not affect handling
      // i.e., POLICY_REPLACE(P{r1, r3, r4}) and POLICY_REPLACE(P{r4, r3, r1})
      // will have same behavior.
      //
      // Add a new Policy Object if it does not exist.
      //
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_DELETE 
      // Delete the policy object. The object's key is enough to delete the 
      // object. Other attributes if present are ignored. Delete of a non-
      // existent object is returned as success.
      // 
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_RULE_ADD 
      // Add rules to an existing Policy object. If any of the rules exist,
      // return success if the new rule is the same as existing rule. Else
      // error is returned as rule modification is not supported.
      // Fails if the Policy object key does not exist in the system or if
      // no rule is provided.
      // 
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_RULE_DELETE 
      // If the policy object does not exist, "Policy not found" error
      // is returned. If policy object exists, delete the list of rules
      // provided. Delete of a non-existent rule within a policy object
      // is returned as success. If the last rule within a policy object
      // is deleted, an empty policy will continue to exist. Fails if no
      // rule is provided.
      // 
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_APPLY 
      // Apply the policy on an interface. Only the policy object key
      // and the interface where it needs to be applied will be verified
      // and used. Other attributes are ignored.  
      //
      //
      // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_UNAPPLY 
      // Unapply the policy on an interface. Only the policy object key
      // and the interface where it needs to be removed from  will be 
      // verified and used, other attributes are ignored.
      // 
      //
      //
      // The device can be programmed by only one active instance of 
      // this RPC.
      //
      // On client restart or RPC disconnects, the client has the
      // to reconcile its new state with the state on the device
      // by replaying the difference.
      // 
      virtual void SLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg* request, ::service_layer::SLPolicyOpRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg* request, ::service_layer::SLPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve all Policies and its rules and the interfaces where the  
      // policy is applied from the server
      virtual void SLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLPolicyGetMsgRsp>* reactor) = 0;
      // Retrieve Global Policy capabilities 
      virtual void SLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg* request, ::service_layer::SLPolicyGlobalGetMsgRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg* request, ::service_layer::SLPolicyGlobalGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @} 
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyOpRsp>* AsyncSLPolicyOpRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyOpRsp>* PrepareAsyncSLPolicyOpRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::service_layer::SLPolicyGetMsgRsp>* SLPolicyGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLPolicyGetMsgRsp>* AsyncSLPolicyGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::service_layer::SLPolicyGetMsgRsp>* PrepareAsyncSLPolicyGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyGlobalGetMsgRsp>* AsyncSLPolicyGlobalGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLPolicyGlobalGetMsgRsp>* PrepareAsyncSLPolicyGlobalGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::service_layer::SLPolicyOpRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyOpRsp>> AsyncSLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyOpRsp>>(AsyncSLPolicyOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyOpRsp>> PrepareAsyncSLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyOpRsp>>(PrepareAsyncSLPolicyOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLPolicyGetMsgRsp>> SLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::service_layer::SLPolicyGetMsgRsp>>(SLPolicyGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLPolicyGetMsgRsp>> AsyncSLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLPolicyGetMsgRsp>>(AsyncSLPolicyGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLPolicyGetMsgRsp>> PrepareAsyncSLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::service_layer::SLPolicyGetMsgRsp>>(PrepareAsyncSLPolicyGetRaw(context, request, cq));
    }
    ::grpc::Status SLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::service_layer::SLPolicyGlobalGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyGlobalGetMsgRsp>> AsyncSLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyGlobalGetMsgRsp>>(AsyncSLPolicyGlobalGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyGlobalGetMsgRsp>> PrepareAsyncSLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyGlobalGetMsgRsp>>(PrepareAsyncSLPolicyGlobalGetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg* request, ::service_layer::SLPolicyOpRsp* response, std::function<void(::grpc::Status)>) override;
      void SLPolicyOp(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg* request, ::service_layer::SLPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLPolicyGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg* request, ::grpc::ClientReadReactor< ::service_layer::SLPolicyGetMsgRsp>* reactor) override;
      void SLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg* request, ::service_layer::SLPolicyGlobalGetMsgRsp* response, std::function<void(::grpc::Status)>) override;
      void SLPolicyGlobalGet(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg* request, ::service_layer::SLPolicyGlobalGetMsgRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyOpRsp>* AsyncSLPolicyOpRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyOpRsp>* PrepareAsyncSLPolicyOpRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyOpMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::service_layer::SLPolicyGetMsgRsp>* SLPolicyGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLPolicyGetMsgRsp>* AsyncSLPolicyGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::service_layer::SLPolicyGetMsgRsp>* PrepareAsyncSLPolicyGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyGlobalGetMsgRsp>* AsyncSLPolicyGlobalGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLPolicyGlobalGetMsgRsp>* PrepareAsyncSLPolicyGlobalGetRaw(::grpc::ClientContext* context, const ::service_layer::SLPolicyGlobalGetMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLPolicyOp_;
    const ::grpc::internal::RpcMethod rpcmethod_SLPolicyGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SLPolicyGlobalGet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //    
    // Policy-object operations
    //
    //
    // Policy and its rules
    // Example for policy p1 with 3 rules r1, r2 and r3
    // ------------------------------------------------
    // Policy p1  
    //  Rule r1    
    //  Priority 1
    //  Match dscp 1  
    //  Match PathGroup Silver
    //  Action PathGroup Bronze  
    //                              
    //  Rule r2 
    //  Priority 2
    //  Match dscp 2
    //  Match PathGroup Bronze
    //  Action PathGroup Silver
    //  
    //  Rule r3
    //  Priority 3
    //  Match PathGroup xxx
    //  Action PathGroup Gold
    // End-policy 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_ADD 
    // Add a new Policy object with rules (if specified).
    // ADD operation implements MERGE semantics if the Policy object
    // already exists.
    // If the incoming Policy object contains rules that are already
    // present (and idempotent) in the server's Policy object, they will
    // be ignored, and success will be returned for each such rule object.
    // Update/modification to existing rule objects are rejected and
    // error returned for that rule object.
    // Rule objects in the request that do not exist in the server's
    // Policy object will be appended to the existing Policy object.
    // Existing rule objects in the server's Policy object are not
    // affected.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_REPLACE
    // Replace an existing Policy Object with the incoming Policy Object.
    // As part of the replace,
    //  - Newly added Rule Objects will be created.
    //  - Rule Objects that did not change (idempotent) are not impacted.
    //  - Rule Objects that that no longer exist in the new Policy will
    //    be implicitly deleted.
    //
    // Example,
    // P{r1, r2, r3} + POLICY_REPLACE(P{r1, r3, r4}) -> P{r1, r3, r4}
    // i.e., for an existing Policy P{r1, r2, r3} on server side,
    // perform POLICY_REPLACE(P{r1, r3, r4}) where r1, r3 are
    // idempotent (i.e., matches, action, priority are exactly same)
    // with the server side Rule Object, the final Policy Object will
    // be: P{r1, r3, r4}
    // In terms of operations performed on the Policy Object,
    //   r2 will be deleted,
    //   r4 will be added,
    //   no changes to r1, r3 since they are unmodified. No traffic
    //   impact is expected to these rules.
    // Any errors encountered while performing the above operations
    // will be reported accordingly.
    // The order of Rule Objects in the request does not affect handling
    // i.e., POLICY_REPLACE(P{r1, r3, r4}) and POLICY_REPLACE(P{r4, r3, r1})
    // will have same behavior.
    //
    // Add a new Policy Object if it does not exist.
    //
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_DELETE 
    // Delete the policy object. The object's key is enough to delete the 
    // object. Other attributes if present are ignored. Delete of a non-
    // existent object is returned as success.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_RULE_ADD 
    // Add rules to an existing Policy object. If any of the rules exist,
    // return success if the new rule is the same as existing rule. Else
    // error is returned as rule modification is not supported.
    // Fails if the Policy object key does not exist in the system or if
    // no rule is provided.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_RULE_DELETE 
    // If the policy object does not exist, "Policy not found" error
    // is returned. If policy object exists, delete the list of rules
    // provided. Delete of a non-existent rule within a policy object
    // is returned as success. If the last rule within a policy object
    // is deleted, an empty policy will continue to exist. Fails if no
    // rule is provided.
    // 
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_APPLY 
    // Apply the policy on an interface. Only the policy object key
    // and the interface where it needs to be applied will be verified
    // and used. Other attributes are ignored.  
    //
    //
    // SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_UNAPPLY 
    // Unapply the policy on an interface. Only the policy object key
    // and the interface where it needs to be removed from  will be 
    // verified and used, other attributes are ignored.
    // 
    //
    //
    // The device can be programmed by only one active instance of 
    // this RPC.
    //
    // On client restart or RPC disconnects, the client has the
    // to reconcile its new state with the state on the device
    // by replaying the difference.
    // 
    virtual ::grpc::Status SLPolicyOp(::grpc::ServerContext* context, const ::service_layer::SLPolicyOpMsg* request, ::service_layer::SLPolicyOpRsp* response);
    // Retrieve all Policies and its rules and the interfaces where the  
    // policy is applied from the server
    virtual ::grpc::Status SLPolicyGet(::grpc::ServerContext* context, const ::service_layer::SLPolicyGetMsg* request, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* writer);
    // Retrieve Global Policy capabilities 
    virtual ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* context, const ::service_layer::SLPolicyGlobalGetMsg* request, ::service_layer::SLPolicyGlobalGetMsgRsp* response);
    // @} 
  };
  template <class BaseClass>
  class WithAsyncMethod_SLPolicyOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLPolicyOp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLPolicyOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLPolicyOp(::grpc::ServerContext* context, ::service_layer::SLPolicyOpMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLPolicyOpRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLPolicyGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLPolicyGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLPolicyGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLPolicyGet(::grpc::ServerContext* context, ::service_layer::SLPolicyGetMsg* request, ::grpc::ServerAsyncWriter< ::service_layer::SLPolicyGetMsgRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLPolicyGlobalGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLPolicyGlobalGet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SLPolicyGlobalGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLPolicyGlobalGet(::grpc::ServerContext* context, ::service_layer::SLPolicyGlobalGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLPolicyGlobalGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLPolicyOp<WithAsyncMethod_SLPolicyGet<WithAsyncMethod_SLPolicyGlobalGet<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLPolicyOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLPolicyOp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLPolicyOpMsg, ::service_layer::SLPolicyOpRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLPolicyOpMsg* request, ::service_layer::SLPolicyOpRsp* response) { return this->SLPolicyOp(context, request, response); }));}
    void SetMessageAllocatorFor_SLPolicyOp(
        ::grpc::MessageAllocator< ::service_layer::SLPolicyOpMsg, ::service_layer::SLPolicyOpRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLPolicyOpMsg, ::service_layer::SLPolicyOpRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLPolicyOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLPolicyOp(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLPolicyGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLPolicyGet() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::service_layer::SLPolicyGetMsg, ::service_layer::SLPolicyGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLPolicyGetMsg* request) { return this->SLPolicyGet(context, request); }));
    }
    ~WithCallbackMethod_SLPolicyGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::service_layer::SLPolicyGetMsgRsp>* SLPolicyGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLPolicyGlobalGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLPolicyGlobalGet() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLPolicyGlobalGetMsg, ::service_layer::SLPolicyGlobalGetMsgRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLPolicyGlobalGetMsg* request, ::service_layer::SLPolicyGlobalGetMsgRsp* response) { return this->SLPolicyGlobalGet(context, request, response); }));}
    void SetMessageAllocatorFor_SLPolicyGlobalGet(
        ::grpc::MessageAllocator< ::service_layer::SLPolicyGlobalGetMsg, ::service_layer::SLPolicyGlobalGetMsgRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLPolicyGlobalGetMsg, ::service_layer::SLPolicyGlobalGetMsgRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLPolicyGlobalGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLPolicyGlobalGet(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SLPolicyOp<WithCallbackMethod_SLPolicyGet<WithCallbackMethod_SLPolicyGlobalGet<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLPolicyOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLPolicyOp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLPolicyOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLPolicyGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLPolicyGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLPolicyGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLPolicyGlobalGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLPolicyGlobalGet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SLPolicyGlobalGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLPolicyOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLPolicyOp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLPolicyOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLPolicyOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLPolicyGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLPolicyGet() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SLPolicyGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLPolicyGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLPolicyGlobalGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLPolicyGlobalGet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SLPolicyGlobalGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLPolicyGlobalGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLPolicyOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLPolicyOp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLPolicyOp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLPolicyOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLPolicyOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLPolicyGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLPolicyGet() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SLPolicyGet(context, request); }));
    }
    ~WithRawCallbackMethod_SLPolicyGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SLPolicyGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLPolicyGlobalGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLPolicyGlobalGet() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLPolicyGlobalGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLPolicyGlobalGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLPolicyGlobalGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLPolicyOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLPolicyOp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLPolicyOpMsg, ::service_layer::SLPolicyOpRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLPolicyOpMsg, ::service_layer::SLPolicyOpRsp>* streamer) {
                       return this->StreamedSLPolicyOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLPolicyOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLPolicyOp(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyOpMsg* /*request*/, ::service_layer::SLPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLPolicyOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLPolicyOpMsg,::service_layer::SLPolicyOpRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLPolicyGlobalGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLPolicyGlobalGet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLPolicyGlobalGetMsg, ::service_layer::SLPolicyGlobalGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLPolicyGlobalGetMsg, ::service_layer::SLPolicyGlobalGetMsgRsp>* streamer) {
                       return this->StreamedSLPolicyGlobalGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLPolicyGlobalGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLPolicyGlobalGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGlobalGetMsg* /*request*/, ::service_layer::SLPolicyGlobalGetMsgRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLPolicyGlobalGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLPolicyGlobalGetMsg,::service_layer::SLPolicyGlobalGetMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLPolicyOp<WithStreamedUnaryMethod_SLPolicyGlobalGet<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SLPolicyGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SLPolicyGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::service_layer::SLPolicyGetMsg, ::service_layer::SLPolicyGetMsgRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::service_layer::SLPolicyGetMsg, ::service_layer::SLPolicyGetMsgRsp>* streamer) {
                       return this->StreamedSLPolicyGet(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SLPolicyGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLPolicyGet(::grpc::ServerContext* /*context*/, const ::service_layer::SLPolicyGetMsg* /*request*/, ::grpc::ServerWriter< ::service_layer::SLPolicyGetMsgRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSLPolicyGet(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::service_layer::SLPolicyGetMsg,::service_layer::SLPolicyGetMsgRsp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SLPolicyGet<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLPolicyOp<WithSplitStreamingMethod_SLPolicyGet<WithStreamedUnaryMethod_SLPolicyGlobalGet<Service > > > StreamedService;
};
// @addtogroup SLPolicy
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5fpolicy_2eproto__INCLUDED
