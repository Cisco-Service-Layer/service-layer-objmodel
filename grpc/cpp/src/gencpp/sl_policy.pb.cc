// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_policy.proto

#include "sl_policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLPolicyOpMsg::SLPolicyOpMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policies_()
  , operationid_(uint64_t{0u})
  , oper_(0)
{}
struct SLPolicyOpMsgDefaultTypeInternal {
  constexpr SLPolicyOpMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyOpMsgDefaultTypeInternal() {}
  union {
    SLPolicyOpMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyOpMsgDefaultTypeInternal _SLPolicyOpMsg_default_instance_;
constexpr SLPolicyEntry::SLPolicyEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , _oneof_case_{}{}
struct SLPolicyEntryDefaultTypeInternal {
  constexpr SLPolicyEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyEntryDefaultTypeInternal() {}
  union {
    SLPolicyEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyEntryDefaultTypeInternal _SLPolicyEntry_default_instance_;
constexpr PolicyRuleList::PolicyRuleList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policyrules_(){}
struct PolicyRuleListDefaultTypeInternal {
  constexpr PolicyRuleListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyRuleListDefaultTypeInternal() {}
  union {
    PolicyRuleList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyRuleListDefaultTypeInternal _PolicyRuleList_default_instance_;
constexpr PolicyIntfList::PolicyIntfList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policyintfs_(){}
struct PolicyIntfListDefaultTypeInternal {
  constexpr PolicyIntfListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyIntfListDefaultTypeInternal() {}
  union {
    PolicyIntfList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyIntfListDefaultTypeInternal _PolicyIntfList_default_instance_;
constexpr SLPolicyKey::SLPolicyKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct SLPolicyKeyDefaultTypeInternal {
  constexpr SLPolicyKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyKeyDefaultTypeInternal() {}
  union {
    SLPolicyKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyKeyDefaultTypeInternal _SLPolicyKey_default_instance_;
constexpr SLPolicyRule::SLPolicyRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rulename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prioritystr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_(nullptr)
  , action_(nullptr){}
struct SLPolicyRuleDefaultTypeInternal {
  constexpr SLPolicyRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyRuleDefaultTypeInternal() {}
  union {
    SLPolicyRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyRuleDefaultTypeInternal _SLPolicyRule_default_instance_;
constexpr SLRuleMatch::SLRuleMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dscp_(nullptr)
  , pathgroup_(nullptr){}
struct SLRuleMatchDefaultTypeInternal {
  constexpr SLRuleMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRuleMatchDefaultTypeInternal() {}
  union {
    SLRuleMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRuleMatchDefaultTypeInternal _SLRuleMatch_default_instance_;
constexpr SLDscpMatch::SLDscpMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLDscpMatchDefaultTypeInternal {
  constexpr SLDscpMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLDscpMatchDefaultTypeInternal() {}
  union {
    SLDscpMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLDscpMatchDefaultTypeInternal _SLDscpMatch_default_instance_;
constexpr SLRuleAction::SLRuleAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathgroup_(nullptr)
  , enablestatscounter_(false){}
struct SLRuleActionDefaultTypeInternal {
  constexpr SLRuleActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRuleActionDefaultTypeInternal() {}
  union {
    SLRuleAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRuleActionDefaultTypeInternal _SLRuleAction_default_instance_;
constexpr SLPolicyIntf::SLPolicyIntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , intfdir_(0)
{}
struct SLPolicyIntfDefaultTypeInternal {
  constexpr SLPolicyIntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyIntfDefaultTypeInternal() {}
  union {
    SLPolicyIntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyIntfDefaultTypeInternal _SLPolicyIntf_default_instance_;
constexpr SLPolicyOpRsp::SLPolicyOpRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , operationid_(uint64_t{0u}){}
struct SLPolicyOpRspDefaultTypeInternal {
  constexpr SLPolicyOpRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyOpRspDefaultTypeInternal() {}
  union {
    SLPolicyOpRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyOpRspDefaultTypeInternal _SLPolicyOpRsp_default_instance_;
constexpr SLPolicyRes::SLPolicyRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , _oneof_case_{}{}
struct SLPolicyResDefaultTypeInternal {
  constexpr SLPolicyResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyResDefaultTypeInternal() {}
  union {
    SLPolicyRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyResDefaultTypeInternal _SLPolicyRes_default_instance_;
constexpr SLPolicyRuleStatusList::SLPolicyRuleStatusList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rulesstatus_(){}
struct SLPolicyRuleStatusListDefaultTypeInternal {
  constexpr SLPolicyRuleStatusListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyRuleStatusListDefaultTypeInternal() {}
  union {
    SLPolicyRuleStatusList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyRuleStatusListDefaultTypeInternal _SLPolicyRuleStatusList_default_instance_;
constexpr SLPolicyIntfStatusList::SLPolicyIntfStatusList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intfsstatus_(){}
struct SLPolicyIntfStatusListDefaultTypeInternal {
  constexpr SLPolicyIntfStatusListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyIntfStatusListDefaultTypeInternal() {}
  union {
    SLPolicyIntfStatusList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyIntfStatusListDefaultTypeInternal _SLPolicyIntfStatusList_default_instance_;
constexpr SLPolicyRuleStatus::SLPolicyRuleStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rulename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr){}
struct SLPolicyRuleStatusDefaultTypeInternal {
  constexpr SLPolicyRuleStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyRuleStatusDefaultTypeInternal() {}
  union {
    SLPolicyRuleStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyRuleStatusDefaultTypeInternal _SLPolicyRuleStatus_default_instance_;
constexpr SLPolicyIntfStatus::SLPolicyIntfStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intf_(nullptr)
  , status_(nullptr){}
struct SLPolicyIntfStatusDefaultTypeInternal {
  constexpr SLPolicyIntfStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyIntfStatusDefaultTypeInternal() {}
  union {
    SLPolicyIntfStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyIntfStatusDefaultTypeInternal _SLPolicyIntfStatus_default_instance_;
constexpr SLPolicyGetMsg::SLPolicyGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLPolicyGetMsgDefaultTypeInternal {
  constexpr SLPolicyGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyGetMsgDefaultTypeInternal() {}
  union {
    SLPolicyGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyGetMsgDefaultTypeInternal _SLPolicyGetMsg_default_instance_;
constexpr SLPolicyInfo::SLPolicyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policyrules_()
  , policyintfs_()
  , key_(nullptr){}
struct SLPolicyInfoDefaultTypeInternal {
  constexpr SLPolicyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyInfoDefaultTypeInternal() {}
  union {
    SLPolicyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyInfoDefaultTypeInternal _SLPolicyInfo_default_instance_;
constexpr SLPolicyGetMsgRsp::SLPolicyGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policyobjs_()
  , policycfgopstatus_(nullptr){}
struct SLPolicyGetMsgRspDefaultTypeInternal {
  constexpr SLPolicyGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyGetMsgRspDefaultTypeInternal() {}
  union {
    SLPolicyGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyGetMsgRspDefaultTypeInternal _SLPolicyGetMsgRsp_default_instance_;
constexpr SLPolicyGlobalGetMsg::SLPolicyGlobalGetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLPolicyGlobalGetMsgDefaultTypeInternal {
  constexpr SLPolicyGlobalGetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyGlobalGetMsgDefaultTypeInternal() {}
  union {
    SLPolicyGlobalGetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyGlobalGetMsgDefaultTypeInternal _SLPolicyGlobalGetMsg_default_instance_;
constexpr SLPolicyGlobalGetMsgRsp::SLPolicyGlobalGetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errstatus_(nullptr)
  , maxpolicies_(0u)
  , maxrules_(0u){}
struct SLPolicyGlobalGetMsgRspDefaultTypeInternal {
  constexpr SLPolicyGlobalGetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLPolicyGlobalGetMsgRspDefaultTypeInternal() {}
  union {
    SLPolicyGlobalGetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLPolicyGlobalGetMsgRspDefaultTypeInternal _SLPolicyGlobalGetMsgRsp_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fpolicy_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fpolicy_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fpolicy_2eproto = nullptr;

const uint32_t TableStruct_sl_5fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpMsg, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpMsg, policies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyEntry, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyEntry, SLPolicyObjectList_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::PolicyRuleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::PolicyRuleList, policyrules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::PolicyIntfList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::PolicyIntfList, policyintfs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyKey, policyname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyKey, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRule, rulename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRule, prioritystr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRule, match_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRule, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRuleMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRuleMatch, dscp_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRuleMatch, pathgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLDscpMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLDscpMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLDscpMatch, Dscp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRuleAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRuleAction, pathgroup_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRuleAction, enablestatscounter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntf, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntf, intfdir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpRsp, operationid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyOpRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRes, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRes, SLPolicyOpStatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRuleStatusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRuleStatusList, rulesstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntfStatusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntfStatusList, intfsstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRuleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRuleStatus, rulename_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyRuleStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntfStatus, intf_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyIntfStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyInfo, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyInfo, policyrules_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyInfo, policyintfs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGetMsgRsp, policycfgopstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGetMsgRsp, policyobjs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGlobalGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGlobalGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGlobalGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGlobalGetMsgRsp, maxpolicies_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLPolicyGlobalGetMsgRsp, maxrules_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLPolicyOpMsg)},
  { 9, -1, -1, sizeof(::service_layer::SLPolicyEntry)},
  { 19, -1, -1, sizeof(::service_layer::PolicyRuleList)},
  { 26, -1, -1, sizeof(::service_layer::PolicyIntfList)},
  { 33, -1, -1, sizeof(::service_layer::SLPolicyKey)},
  { 41, -1, -1, sizeof(::service_layer::SLPolicyRule)},
  { 51, -1, -1, sizeof(::service_layer::SLRuleMatch)},
  { 59, -1, -1, sizeof(::service_layer::SLDscpMatch)},
  { 67, -1, -1, sizeof(::service_layer::SLRuleAction)},
  { 75, -1, -1, sizeof(::service_layer::SLPolicyIntf)},
  { 83, -1, -1, sizeof(::service_layer::SLPolicyOpRsp)},
  { 91, -1, -1, sizeof(::service_layer::SLPolicyRes)},
  { 102, -1, -1, sizeof(::service_layer::SLPolicyRuleStatusList)},
  { 109, -1, -1, sizeof(::service_layer::SLPolicyIntfStatusList)},
  { 116, -1, -1, sizeof(::service_layer::SLPolicyRuleStatus)},
  { 124, -1, -1, sizeof(::service_layer::SLPolicyIntfStatus)},
  { 132, -1, -1, sizeof(::service_layer::SLPolicyGetMsg)},
  { 138, -1, -1, sizeof(::service_layer::SLPolicyInfo)},
  { 147, -1, -1, sizeof(::service_layer::SLPolicyGetMsgRsp)},
  { 155, -1, -1, sizeof(::service_layer::SLPolicyGlobalGetMsg)},
  { 161, -1, -1, sizeof(::service_layer::SLPolicyGlobalGetMsgRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyOpMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_PolicyRuleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_PolicyIntfList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRuleMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLDscpMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRuleAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyIntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyOpRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyRuleStatusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyIntfStatusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyRuleStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyIntfStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyGlobalGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLPolicyGlobalGetMsgRsp_default_instance_),
};

const char descriptor_table_protodef_sl_5fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017sl_policy.proto\022\rservice_layer\032\025sl_com"
  "mon_types.proto\"\203\001\n\rSLPolicyOpMsg\022-\n\004Ope"
  "r\030\001 \001(\0162\037.service_layer.SLPolicyObjectOp"
  "\022\023\n\013OperationID\030\002 \001(\004\022.\n\010Policies\030\003 \003(\0132"
  "\034.service_layer.SLPolicyEntry\"\256\001\n\rSLPoli"
  "cyEntry\022\'\n\003Key\030\001 \001(\0132\032.service_layer.SLP"
  "olicyKey\022.\n\005Rules\030\002 \001(\0132\035.service_layer."
  "PolicyRuleListH\000\022.\n\005Intfs\030\003 \001(\0132\035.servic"
  "e_layer.PolicyIntfListH\000B\024\n\022SLPolicyObje"
  "ctList\"B\n\016PolicyRuleList\0220\n\013PolicyRules\030"
  "\001 \003(\0132\033.service_layer.SLPolicyRule\"B\n\016Po"
  "licyIntfList\0220\n\013PolicyIntfs\030\001 \003(\0132\033.serv"
  "ice_layer.SLPolicyIntf\"L\n\013SLPolicyKey\022\022\n"
  "\nPolicyName\030\001 \001(\t\022)\n\004Type\030\002 \001(\0162\033.servic"
  "e_layer.SLPolicyType\"\215\001\n\014SLPolicyRule\022\020\n"
  "\010RuleName\030\001 \001(\t\022\023\n\013PriorityStr\030\002 \001(\t\022)\n\005"
  "Match\030\003 \001(\0132\032.service_layer.SLRuleMatch\022"
  "+\n\006Action\030\004 \001(\0132\033.service_layer.SLRuleAc"
  "tion\"l\n\013SLRuleMatch\022(\n\004Dscp\030\001 \001(\0132\032.serv"
  "ice_layer.SLDscpMatch\0223\n\tPathGroup\030\002 \001(\013"
  "2 .service_layer.SLPathGroupRefKey\"*\n\013SL"
  "DscpMatch\022\023\n\tDscpValue\030\001 \001(\rH\000B\006\n\004Dscp\"_"
  "\n\014SLRuleAction\0223\n\tPathGroup\030\001 \001(\0132 .serv"
  "ice_layer.SLPathGroupRefKey\022\032\n\022EnableSta"
  "tsCounter\030\002 \001(\010\"i\n\014SLPolicyIntf\022\'\n\003Key\030\001"
  " \001(\0132\032.service_layer.SLInterface\0220\n\007Intf"
  "Dir\030\002 \001(\0162\037.service_layer.SLApplyDirecti"
  "on\"Q\n\rSLPolicyOpRsp\022\023\n\013OperationID\030\001 \001(\004"
  "\022+\n\007Results\030\002 \003(\0132\032.service_layer.SLPoli"
  "cyRes\"\373\001\n\013SLPolicyRes\022\'\n\003Key\030\001 \001(\0132\032.ser"
  "vice_layer.SLPolicyKey\0224\n\014PolicyStatus\030\002"
  " \001(\0132\034.service_layer.SLErrorStatusH\000\022<\n\013"
  "RulesStatus\030\003 \001(\0132%.service_layer.SLPoli"
  "cyRuleStatusListH\000\022;\n\nIntfStatus\030\004 \001(\0132%"
  ".service_layer.SLPolicyIntfStatusListH\000B"
  "\022\n\020SLPolicyOpStatus\"P\n\026SLPolicyRuleStatu"
  "sList\0226\n\013RulesStatus\030\001 \003(\0132!.service_lay"
  "er.SLPolicyRuleStatus\"P\n\026SLPolicyIntfSta"
  "tusList\0226\n\013IntfsStatus\030\001 \003(\0132!.service_l"
  "ayer.SLPolicyIntfStatus\"T\n\022SLPolicyRuleS"
  "tatus\022\020\n\010RuleName\030\001 \001(\t\022,\n\006Status\030\002 \001(\0132"
  "\034.service_layer.SLErrorStatus\"l\n\022SLPolic"
  "yIntfStatus\022(\n\004Intf\030\001 \001(\0132\032.service_laye"
  "r.SLInterface\022,\n\006Status\030\002 \001(\0132\034.service_"
  "layer.SLErrorStatus\"\020\n\016SLPolicyGetMsg\"\233\001"
  "\n\014SLPolicyInfo\022\'\n\003Key\030\001 \001(\0132\032.service_la"
  "yer.SLPolicyKey\0220\n\013PolicyRules\030\002 \003(\0132\033.s"
  "ervice_layer.SLPolicyRule\0220\n\013PolicyIntfs"
  "\030\003 \003(\0132\033.service_layer.SLPolicyIntf\"}\n\021S"
  "LPolicyGetMsgRsp\0227\n\021PolicyCfgOpStatus\030\001 "
  "\001(\0132\034.service_layer.SLErrorStatus\022/\n\nPol"
  "icyObjs\030\002 \003(\0132\033.service_layer.SLPolicyIn"
  "fo\"\026\n\024SLPolicyGlobalGetMsg\"q\n\027SLPolicyGl"
  "obalGetMsgRsp\022/\n\tErrStatus\030\001 \001(\0132\034.servi"
  "ce_layer.SLErrorStatus\022\023\n\013MaxPolicies\030\002 "
  "\001(\r\022\020\n\010MaxRules\030\003 \001(\r*\316\001\n\020SLPolicyObject"
  "Op\022\034\n\030SL_OBJOP_POLICY_RESERVED\020\000\022\027\n\023SL_O"
  "BJOP_POLICY_ADD\020\001\022\032\n\026SL_OBJOP_POLICY_DEL"
  "ETE\020\002\022\025\n\021SL_OBJOP_RULE_ADD\020\003\022\030\n\024SL_OBJOP"
  "_RULE_DELETE\020\004\022\031\n\025SL_OBJOP_POLICY_APPLY\020"
  "\005\022\033\n\027SL_OBJOP_POLICY_UNAPPLY\020\006*=\n\014SLPoli"
  "cyType\022\030\n\024SL_PM_PTYPE_RESERVED\020\000\022\023\n\017SL_P"
  "M_PTYPE_PBR\020\001*N\n\020SLApplyDirection\022\032\n\026SL_"
  "APPLY_TYPE_RESERVED\020\000\022\036\n\032SL_APPLY_DIRECT"
  "ION_INGRESS\020\0012\210\002\n\010SLPolicy\022H\n\nSLPolicyOp"
  "\022\034.service_layer.SLPolicyOpMsg\032\034.service"
  "_layer.SLPolicyOpRsp\022P\n\013SLPolicyGet\022\035.se"
  "rvice_layer.SLPolicyGetMsg\032 .service_lay"
  "er.SLPolicyGetMsgRsp0\001\022`\n\021SLPolicyGlobal"
  "Get\022#.service_layer.SLPolicyGlobalGetMsg"
  "\032&.service_layer.SLPolicyGlobalGetMsgRsp"
  "BQZOgithub.com/Cisco-service-layer/servi"
  "ce-layer-objmodel/grpc/protos;service_la"
  "yerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fpolicy_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fpolicy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fpolicy_2eproto = {
  false, false, 2931, descriptor_table_protodef_sl_5fpolicy_2eproto, "sl_policy.proto", 
  &descriptor_table_sl_5fpolicy_2eproto_once, descriptor_table_sl_5fpolicy_2eproto_deps, 1, 21,
  schemas, file_default_instances, TableStruct_sl_5fpolicy_2eproto::offsets,
  file_level_metadata_sl_5fpolicy_2eproto, file_level_enum_descriptors_sl_5fpolicy_2eproto, file_level_service_descriptors_sl_5fpolicy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fpolicy_2eproto_getter() {
  return &descriptor_table_sl_5fpolicy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fpolicy_2eproto(&descriptor_table_sl_5fpolicy_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLPolicyObjectOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fpolicy_2eproto[0];
}
bool SLPolicyObjectOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLPolicyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fpolicy_2eproto[1];
}
bool SLPolicyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLApplyDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fpolicy_2eproto[2];
}
bool SLApplyDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLPolicyOpMsg::_Internal {
 public:
};

SLPolicyOpMsg::SLPolicyOpMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  policies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyOpMsg)
}
SLPolicyOpMsg::SLPolicyOpMsg(const SLPolicyOpMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyOpMsg)
}

inline void SLPolicyOpMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operationid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(oper_));
}

SLPolicyOpMsg::~SLPolicyOpMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyOpMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyOpMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPolicyOpMsg::ArenaDtor(void* object) {
  SLPolicyOpMsg* _this = reinterpret_cast< SLPolicyOpMsg* >(object);
  (void)_this;
}
void SLPolicyOpMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyOpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyOpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyOpMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyOpMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLPolicyObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLPolicyObjectOp>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 OperationID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLPolicyEntry Policies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyOpMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyOpMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLPolicyObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint64 OperationID = 2;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operationid(), target);
  }

  // repeated .service_layer.SLPolicyEntry Policies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_policies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyOpMsg)
  return target;
}

size_t SLPolicyOpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyOpMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyEntry Policies = 3;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 OperationID = 2;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  // .service_layer.SLPolicyObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyOpMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyOpMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyOpMsg::GetClassData() const { return &_class_data_; }

void SLPolicyOpMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyOpMsg *>(to)->MergeFrom(
      static_cast<const SLPolicyOpMsg &>(from));
}


void SLPolicyOpMsg::MergeFrom(const SLPolicyOpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyOpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyOpMsg::CopyFrom(const SLPolicyOpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyOpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyOpMsg::IsInitialized() const {
  return true;
}

void SLPolicyOpMsg::InternalSwap(SLPolicyOpMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  policies_.InternalSwap(&other->policies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPolicyOpMsg, oper_)
      + sizeof(SLPolicyOpMsg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLPolicyOpMsg, operationid_)>(
          reinterpret_cast<char*>(&operationid_),
          reinterpret_cast<char*>(&other->operationid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyOpMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[0]);
}

// ===================================================================

class SLPolicyEntry::_Internal {
 public:
  static const ::service_layer::SLPolicyKey& key(const SLPolicyEntry* msg);
  static const ::service_layer::PolicyRuleList& rules(const SLPolicyEntry* msg);
  static const ::service_layer::PolicyIntfList& intfs(const SLPolicyEntry* msg);
};

const ::service_layer::SLPolicyKey&
SLPolicyEntry::_Internal::key(const SLPolicyEntry* msg) {
  return *msg->key_;
}
const ::service_layer::PolicyRuleList&
SLPolicyEntry::_Internal::rules(const SLPolicyEntry* msg) {
  return *msg->SLPolicyObjectList_.rules_;
}
const ::service_layer::PolicyIntfList&
SLPolicyEntry::_Internal::intfs(const SLPolicyEntry* msg) {
  return *msg->SLPolicyObjectList_.intfs_;
}
void SLPolicyEntry::set_allocated_rules(::service_layer::PolicyRuleList* rules) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SLPolicyObjectList();
  if (rules) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::PolicyRuleList>::GetOwningArena(rules);
    if (message_arena != submessage_arena) {
      rules = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rules, submessage_arena);
    }
    set_has_rules();
    SLPolicyObjectList_.rules_ = rules;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPolicyEntry.Rules)
}
void SLPolicyEntry::set_allocated_intfs(::service_layer::PolicyIntfList* intfs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SLPolicyObjectList();
  if (intfs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::PolicyIntfList>::GetOwningArena(intfs);
    if (message_arena != submessage_arena) {
      intfs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intfs, submessage_arena);
    }
    set_has_intfs();
    SLPolicyObjectList_.intfs_ = intfs;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPolicyEntry.Intfs)
}
SLPolicyEntry::SLPolicyEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyEntry)
}
SLPolicyEntry::SLPolicyEntry(const SLPolicyEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  clear_has_SLPolicyObjectList();
  switch (from.SLPolicyObjectList_case()) {
    case kRules: {
      _internal_mutable_rules()->::service_layer::PolicyRuleList::MergeFrom(from._internal_rules());
      break;
    }
    case kIntfs: {
      _internal_mutable_intfs()->::service_layer::PolicyIntfList::MergeFrom(from._internal_intfs());
      break;
    }
    case SLPOLICYOBJECTLIST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyEntry)
}

inline void SLPolicyEntry::SharedCtor() {
key_ = nullptr;
clear_has_SLPolicyObjectList();
}

SLPolicyEntry::~SLPolicyEntry() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (has_SLPolicyObjectList()) {
    clear_SLPolicyObjectList();
  }
}

void SLPolicyEntry::ArenaDtor(void* object) {
  SLPolicyEntry* _this = reinterpret_cast< SLPolicyEntry* >(object);
  (void)_this;
}
void SLPolicyEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyEntry::clear_SLPolicyObjectList() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLPolicyEntry)
  switch (SLPolicyObjectList_case()) {
    case kRules: {
      if (GetArenaForAllocation() == nullptr) {
        delete SLPolicyObjectList_.rules_;
      }
      break;
    }
    case kIntfs: {
      if (GetArenaForAllocation() == nullptr) {
        delete SLPolicyObjectList_.intfs_;
      }
      break;
    }
    case SLPOLICYOBJECTLIST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SLPOLICYOBJECTLIST_NOT_SET;
}


void SLPolicyEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  clear_SLPolicyObjectList();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLPolicyKey Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.PolicyRuleList Rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rules(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.PolicyIntfList Intfs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intfs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLPolicyKey Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.PolicyRuleList Rules = 2;
  if (_internal_has_rules()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rules(this), target, stream);
  }

  // .service_layer.PolicyIntfList Intfs = 3;
  if (_internal_has_intfs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::intfs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyEntry)
  return target;
}

size_t SLPolicyEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLPolicyKey Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  switch (SLPolicyObjectList_case()) {
    // .service_layer.PolicyRuleList Rules = 2;
    case kRules: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SLPolicyObjectList_.rules_);
      break;
    }
    // .service_layer.PolicyIntfList Intfs = 3;
    case kIntfs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SLPolicyObjectList_.intfs_);
      break;
    }
    case SLPOLICYOBJECTLIST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyEntry::GetClassData() const { return &_class_data_; }

void SLPolicyEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyEntry *>(to)->MergeFrom(
      static_cast<const SLPolicyEntry &>(from));
}


void SLPolicyEntry::MergeFrom(const SLPolicyEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLPolicyKey::MergeFrom(from._internal_key());
  }
  switch (from.SLPolicyObjectList_case()) {
    case kRules: {
      _internal_mutable_rules()->::service_layer::PolicyRuleList::MergeFrom(from._internal_rules());
      break;
    }
    case kIntfs: {
      _internal_mutable_intfs()->::service_layer::PolicyIntfList::MergeFrom(from._internal_intfs());
      break;
    }
    case SLPOLICYOBJECTLIST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyEntry::CopyFrom(const SLPolicyEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyEntry::IsInitialized() const {
  return true;
}

void SLPolicyEntry::InternalSwap(SLPolicyEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_, other->key_);
  swap(SLPolicyObjectList_, other->SLPolicyObjectList_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[1]);
}

// ===================================================================

class PolicyRuleList::_Internal {
 public:
};

PolicyRuleList::PolicyRuleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  policyrules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.PolicyRuleList)
}
PolicyRuleList::PolicyRuleList(const PolicyRuleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policyrules_(from.policyrules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.PolicyRuleList)
}

inline void PolicyRuleList::SharedCtor() {
}

PolicyRuleList::~PolicyRuleList() {
  // @@protoc_insertion_point(destructor:service_layer.PolicyRuleList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyRuleList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolicyRuleList::ArenaDtor(void* object) {
  PolicyRuleList* _this = reinterpret_cast< PolicyRuleList* >(object);
  (void)_this;
}
void PolicyRuleList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyRuleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyRuleList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.PolicyRuleList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policyrules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyRuleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLPolicyRule PolicyRules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policyrules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyRuleList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.PolicyRuleList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyRule PolicyRules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policyrules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_policyrules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.PolicyRuleList)
  return target;
}

size_t PolicyRuleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.PolicyRuleList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyRule PolicyRules = 1;
  total_size += 1UL * this->_internal_policyrules_size();
  for (const auto& msg : this->policyrules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyRuleList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyRuleList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyRuleList::GetClassData() const { return &_class_data_; }

void PolicyRuleList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyRuleList *>(to)->MergeFrom(
      static_cast<const PolicyRuleList &>(from));
}


void PolicyRuleList::MergeFrom(const PolicyRuleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.PolicyRuleList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  policyrules_.MergeFrom(from.policyrules_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyRuleList::CopyFrom(const PolicyRuleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.PolicyRuleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyRuleList::IsInitialized() const {
  return true;
}

void PolicyRuleList::InternalSwap(PolicyRuleList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  policyrules_.InternalSwap(&other->policyrules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyRuleList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[2]);
}

// ===================================================================

class PolicyIntfList::_Internal {
 public:
};

PolicyIntfList::PolicyIntfList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  policyintfs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.PolicyIntfList)
}
PolicyIntfList::PolicyIntfList(const PolicyIntfList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policyintfs_(from.policyintfs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.PolicyIntfList)
}

inline void PolicyIntfList::SharedCtor() {
}

PolicyIntfList::~PolicyIntfList() {
  // @@protoc_insertion_point(destructor:service_layer.PolicyIntfList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyIntfList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolicyIntfList::ArenaDtor(void* object) {
  PolicyIntfList* _this = reinterpret_cast< PolicyIntfList* >(object);
  (void)_this;
}
void PolicyIntfList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyIntfList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyIntfList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.PolicyIntfList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policyintfs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyIntfList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLPolicyIntf PolicyIntfs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policyintfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyIntfList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.PolicyIntfList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyIntf PolicyIntfs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policyintfs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_policyintfs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.PolicyIntfList)
  return target;
}

size_t PolicyIntfList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.PolicyIntfList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyIntf PolicyIntfs = 1;
  total_size += 1UL * this->_internal_policyintfs_size();
  for (const auto& msg : this->policyintfs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyIntfList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyIntfList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyIntfList::GetClassData() const { return &_class_data_; }

void PolicyIntfList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyIntfList *>(to)->MergeFrom(
      static_cast<const PolicyIntfList &>(from));
}


void PolicyIntfList::MergeFrom(const PolicyIntfList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.PolicyIntfList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  policyintfs_.MergeFrom(from.policyintfs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyIntfList::CopyFrom(const PolicyIntfList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.PolicyIntfList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyIntfList::IsInitialized() const {
  return true;
}

void PolicyIntfList::InternalSwap(PolicyIntfList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  policyintfs_.InternalSwap(&other->policyintfs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyIntfList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[3]);
}

// ===================================================================

class SLPolicyKey::_Internal {
 public:
};

SLPolicyKey::SLPolicyKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyKey)
}
SLPolicyKey::SLPolicyKey(const SLPolicyKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policyname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policyname().empty()) {
    policyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policyname(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyKey)
}

inline void SLPolicyKey::SharedCtor() {
policyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policyname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

SLPolicyKey::~SLPolicyKey() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLPolicyKey::ArenaDtor(void* object) {
  SLPolicyKey* _this = reinterpret_cast< SLPolicyKey* >(object);
  (void)_this;
}
void SLPolicyKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyKey::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policyname_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PolicyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLPolicyKey.PolicyName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPolicyType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLPolicyType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PolicyName = 1;
  if (!this->_internal_policyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policyname().data(), static_cast<int>(this->_internal_policyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLPolicyKey.PolicyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policyname(), target);
  }

  // .service_layer.SLPolicyType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyKey)
  return target;
}

size_t SLPolicyKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PolicyName = 1;
  if (!this->_internal_policyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policyname());
  }

  // .service_layer.SLPolicyType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyKey::GetClassData() const { return &_class_data_; }

void SLPolicyKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyKey *>(to)->MergeFrom(
      static_cast<const SLPolicyKey &>(from));
}


void SLPolicyKey::MergeFrom(const SLPolicyKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policyname().empty()) {
    _internal_set_policyname(from._internal_policyname());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyKey::CopyFrom(const SLPolicyKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyKey::IsInitialized() const {
  return true;
}

void SLPolicyKey::InternalSwap(SLPolicyKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policyname_, lhs_arena,
      &other->policyname_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[4]);
}

// ===================================================================

class SLPolicyRule::_Internal {
 public:
  static const ::service_layer::SLRuleMatch& match(const SLPolicyRule* msg);
  static const ::service_layer::SLRuleAction& action(const SLPolicyRule* msg);
};

const ::service_layer::SLRuleMatch&
SLPolicyRule::_Internal::match(const SLPolicyRule* msg) {
  return *msg->match_;
}
const ::service_layer::SLRuleAction&
SLPolicyRule::_Internal::action(const SLPolicyRule* msg) {
  return *msg->action_;
}
SLPolicyRule::SLPolicyRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyRule)
}
SLPolicyRule::SLPolicyRule(const SLPolicyRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rulename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rulename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rulename().empty()) {
    rulename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rulename(), 
      GetArenaForAllocation());
  }
  prioritystr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prioritystr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prioritystr().empty()) {
    prioritystr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prioritystr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_match()) {
    match_ = new ::service_layer::SLRuleMatch(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::service_layer::SLRuleAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyRule)
}

inline void SLPolicyRule::SharedCtor() {
rulename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rulename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prioritystr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prioritystr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&match_)) + sizeof(action_));
}

SLPolicyRule::~SLPolicyRule() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyRule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rulename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prioritystr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete action_;
}

void SLPolicyRule::ArenaDtor(void* object) {
  SLPolicyRule* _this = reinterpret_cast< SLPolicyRule* >(object);
  (void)_this;
}
void SLPolicyRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyRule::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rulename_.ClearToEmpty();
  prioritystr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && match_ != nullptr) {
    delete match_;
  }
  match_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string RuleName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rulename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLPolicyRule.RuleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PriorityStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prioritystr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLPolicyRule.PriorityStr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRuleMatch Match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRuleAction Action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string RuleName = 1;
  if (!this->_internal_rulename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rulename().data(), static_cast<int>(this->_internal_rulename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLPolicyRule.RuleName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rulename(), target);
  }

  // string PriorityStr = 2;
  if (!this->_internal_prioritystr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prioritystr().data(), static_cast<int>(this->_internal_prioritystr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLPolicyRule.PriorityStr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prioritystr(), target);
  }

  // .service_layer.SLRuleMatch Match = 3;
  if (this->_internal_has_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::match(this), target, stream);
  }

  // .service_layer.SLRuleAction Action = 4;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyRule)
  return target;
}

size_t SLPolicyRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RuleName = 1;
  if (!this->_internal_rulename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rulename());
  }

  // string PriorityStr = 2;
  if (!this->_internal_prioritystr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prioritystr());
  }

  // .service_layer.SLRuleMatch Match = 3;
  if (this->_internal_has_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_);
  }

  // .service_layer.SLRuleAction Action = 4;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyRule::GetClassData() const { return &_class_data_; }

void SLPolicyRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyRule *>(to)->MergeFrom(
      static_cast<const SLPolicyRule &>(from));
}


void SLPolicyRule::MergeFrom(const SLPolicyRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rulename().empty()) {
    _internal_set_rulename(from._internal_rulename());
  }
  if (!from._internal_prioritystr().empty()) {
    _internal_set_prioritystr(from._internal_prioritystr());
  }
  if (from._internal_has_match()) {
    _internal_mutable_match()->::service_layer::SLRuleMatch::MergeFrom(from._internal_match());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::service_layer::SLRuleAction::MergeFrom(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyRule::CopyFrom(const SLPolicyRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyRule::IsInitialized() const {
  return true;
}

void SLPolicyRule::InternalSwap(SLPolicyRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rulename_, lhs_arena,
      &other->rulename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prioritystr_, lhs_arena,
      &other->prioritystr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPolicyRule, action_)
      + sizeof(SLPolicyRule::action_)
      - PROTOBUF_FIELD_OFFSET(SLPolicyRule, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[5]);
}

// ===================================================================

class SLRuleMatch::_Internal {
 public:
  static const ::service_layer::SLDscpMatch& dscp(const SLRuleMatch* msg);
  static const ::service_layer::SLPathGroupRefKey& pathgroup(const SLRuleMatch* msg);
};

const ::service_layer::SLDscpMatch&
SLRuleMatch::_Internal::dscp(const SLRuleMatch* msg) {
  return *msg->dscp_;
}
const ::service_layer::SLPathGroupRefKey&
SLRuleMatch::_Internal::pathgroup(const SLRuleMatch* msg) {
  return *msg->pathgroup_;
}
void SLRuleMatch::clear_pathgroup() {
  if (GetArenaForAllocation() == nullptr && pathgroup_ != nullptr) {
    delete pathgroup_;
  }
  pathgroup_ = nullptr;
}
SLRuleMatch::SLRuleMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRuleMatch)
}
SLRuleMatch::SLRuleMatch(const SLRuleMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dscp()) {
    dscp_ = new ::service_layer::SLDscpMatch(*from.dscp_);
  } else {
    dscp_ = nullptr;
  }
  if (from._internal_has_pathgroup()) {
    pathgroup_ = new ::service_layer::SLPathGroupRefKey(*from.pathgroup_);
  } else {
    pathgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRuleMatch)
}

inline void SLRuleMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dscp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pathgroup_) -
    reinterpret_cast<char*>(&dscp_)) + sizeof(pathgroup_));
}

SLRuleMatch::~SLRuleMatch() {
  // @@protoc_insertion_point(destructor:service_layer.SLRuleMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRuleMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dscp_;
  if (this != internal_default_instance()) delete pathgroup_;
}

void SLRuleMatch::ArenaDtor(void* object) {
  SLRuleMatch* _this = reinterpret_cast< SLRuleMatch* >(object);
  (void)_this;
}
void SLRuleMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRuleMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRuleMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRuleMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && dscp_ != nullptr) {
    delete dscp_;
  }
  dscp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pathgroup_ != nullptr) {
    delete pathgroup_;
  }
  pathgroup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRuleMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLDscpMatch Dscp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dscp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPathGroupRefKey PathGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRuleMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRuleMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLDscpMatch Dscp = 1;
  if (this->_internal_has_dscp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dscp(this), target, stream);
  }

  // .service_layer.SLPathGroupRefKey PathGroup = 2;
  if (this->_internal_has_pathgroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pathgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRuleMatch)
  return target;
}

size_t SLRuleMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRuleMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLDscpMatch Dscp = 1;
  if (this->_internal_has_dscp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dscp_);
  }

  // .service_layer.SLPathGroupRefKey PathGroup = 2;
  if (this->_internal_has_pathgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathgroup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRuleMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRuleMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRuleMatch::GetClassData() const { return &_class_data_; }

void SLRuleMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRuleMatch *>(to)->MergeFrom(
      static_cast<const SLRuleMatch &>(from));
}


void SLRuleMatch::MergeFrom(const SLRuleMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRuleMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dscp()) {
    _internal_mutable_dscp()->::service_layer::SLDscpMatch::MergeFrom(from._internal_dscp());
  }
  if (from._internal_has_pathgroup()) {
    _internal_mutable_pathgroup()->::service_layer::SLPathGroupRefKey::MergeFrom(from._internal_pathgroup());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRuleMatch::CopyFrom(const SLRuleMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRuleMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRuleMatch::IsInitialized() const {
  return true;
}

void SLRuleMatch::InternalSwap(SLRuleMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRuleMatch, pathgroup_)
      + sizeof(SLRuleMatch::pathgroup_)
      - PROTOBUF_FIELD_OFFSET(SLRuleMatch, dscp_)>(
          reinterpret_cast<char*>(&dscp_),
          reinterpret_cast<char*>(&other->dscp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRuleMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[6]);
}

// ===================================================================

class SLDscpMatch::_Internal {
 public:
};

SLDscpMatch::SLDscpMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLDscpMatch)
}
SLDscpMatch::SLDscpMatch(const SLDscpMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Dscp();
  switch (from.Dscp_case()) {
    case kDscpValue: {
      _internal_set_dscpvalue(from._internal_dscpvalue());
      break;
    }
    case DSCP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLDscpMatch)
}

inline void SLDscpMatch::SharedCtor() {
clear_has_Dscp();
}

SLDscpMatch::~SLDscpMatch() {
  // @@protoc_insertion_point(destructor:service_layer.SLDscpMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLDscpMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Dscp()) {
    clear_Dscp();
  }
}

void SLDscpMatch::ArenaDtor(void* object) {
  SLDscpMatch* _this = reinterpret_cast< SLDscpMatch* >(object);
  (void)_this;
}
void SLDscpMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLDscpMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLDscpMatch::clear_Dscp() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLDscpMatch)
  switch (Dscp_case()) {
    case kDscpValue: {
      // No need to clear
      break;
    }
    case DSCP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DSCP_NOT_SET;
}


void SLDscpMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLDscpMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Dscp();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLDscpMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 DscpValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_dscpvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLDscpMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLDscpMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 DscpValue = 1;
  if (_internal_has_dscpvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dscpvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLDscpMatch)
  return target;
}

size_t SLDscpMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLDscpMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Dscp_case()) {
    // uint32 DscpValue = 1;
    case kDscpValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dscpvalue());
      break;
    }
    case DSCP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLDscpMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLDscpMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLDscpMatch::GetClassData() const { return &_class_data_; }

void SLDscpMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLDscpMatch *>(to)->MergeFrom(
      static_cast<const SLDscpMatch &>(from));
}


void SLDscpMatch::MergeFrom(const SLDscpMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLDscpMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Dscp_case()) {
    case kDscpValue: {
      _internal_set_dscpvalue(from._internal_dscpvalue());
      break;
    }
    case DSCP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLDscpMatch::CopyFrom(const SLDscpMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLDscpMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLDscpMatch::IsInitialized() const {
  return true;
}

void SLDscpMatch::InternalSwap(SLDscpMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Dscp_, other->Dscp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLDscpMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[7]);
}

// ===================================================================

class SLRuleAction::_Internal {
 public:
  static const ::service_layer::SLPathGroupRefKey& pathgroup(const SLRuleAction* msg);
};

const ::service_layer::SLPathGroupRefKey&
SLRuleAction::_Internal::pathgroup(const SLRuleAction* msg) {
  return *msg->pathgroup_;
}
void SLRuleAction::clear_pathgroup() {
  if (GetArenaForAllocation() == nullptr && pathgroup_ != nullptr) {
    delete pathgroup_;
  }
  pathgroup_ = nullptr;
}
SLRuleAction::SLRuleAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRuleAction)
}
SLRuleAction::SLRuleAction(const SLRuleAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pathgroup()) {
    pathgroup_ = new ::service_layer::SLPathGroupRefKey(*from.pathgroup_);
  } else {
    pathgroup_ = nullptr;
  }
  enablestatscounter_ = from.enablestatscounter_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRuleAction)
}

inline void SLRuleAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pathgroup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enablestatscounter_) -
    reinterpret_cast<char*>(&pathgroup_)) + sizeof(enablestatscounter_));
}

SLRuleAction::~SLRuleAction() {
  // @@protoc_insertion_point(destructor:service_layer.SLRuleAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRuleAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pathgroup_;
}

void SLRuleAction::ArenaDtor(void* object) {
  SLRuleAction* _this = reinterpret_cast< SLRuleAction* >(object);
  (void)_this;
}
void SLRuleAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRuleAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRuleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRuleAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pathgroup_ != nullptr) {
    delete pathgroup_;
  }
  pathgroup_ = nullptr;
  enablestatscounter_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRuleAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLPathGroupRefKey PathGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EnableStatsCounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          enablestatscounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRuleAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRuleAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLPathGroupRefKey PathGroup = 1;
  if (this->_internal_has_pathgroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pathgroup(this), target, stream);
  }

  // bool EnableStatsCounter = 2;
  if (this->_internal_enablestatscounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enablestatscounter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRuleAction)
  return target;
}

size_t SLRuleAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRuleAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLPathGroupRefKey PathGroup = 1;
  if (this->_internal_has_pathgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathgroup_);
  }

  // bool EnableStatsCounter = 2;
  if (this->_internal_enablestatscounter() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRuleAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRuleAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRuleAction::GetClassData() const { return &_class_data_; }

void SLRuleAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRuleAction *>(to)->MergeFrom(
      static_cast<const SLRuleAction &>(from));
}


void SLRuleAction::MergeFrom(const SLRuleAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRuleAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pathgroup()) {
    _internal_mutable_pathgroup()->::service_layer::SLPathGroupRefKey::MergeFrom(from._internal_pathgroup());
  }
  if (from._internal_enablestatscounter() != 0) {
    _internal_set_enablestatscounter(from._internal_enablestatscounter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRuleAction::CopyFrom(const SLRuleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRuleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRuleAction::IsInitialized() const {
  return true;
}

void SLRuleAction::InternalSwap(SLRuleAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRuleAction, enablestatscounter_)
      + sizeof(SLRuleAction::enablestatscounter_)
      - PROTOBUF_FIELD_OFFSET(SLRuleAction, pathgroup_)>(
          reinterpret_cast<char*>(&pathgroup_),
          reinterpret_cast<char*>(&other->pathgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRuleAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[8]);
}

// ===================================================================

class SLPolicyIntf::_Internal {
 public:
  static const ::service_layer::SLInterface& key(const SLPolicyIntf* msg);
};

const ::service_layer::SLInterface&
SLPolicyIntf::_Internal::key(const SLPolicyIntf* msg) {
  return *msg->key_;
}
void SLPolicyIntf::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLPolicyIntf::SLPolicyIntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyIntf)
}
SLPolicyIntf::SLPolicyIntf(const SLPolicyIntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLInterface(*from.key_);
  } else {
    key_ = nullptr;
  }
  intfdir_ = from.intfdir_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyIntf)
}

inline void SLPolicyIntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&intfdir_) -
    reinterpret_cast<char*>(&key_)) + sizeof(intfdir_));
}

SLPolicyIntf::~SLPolicyIntf() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyIntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyIntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLPolicyIntf::ArenaDtor(void* object) {
  SLPolicyIntf* _this = reinterpret_cast< SLPolicyIntf* >(object);
  (void)_this;
}
void SLPolicyIntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyIntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyIntf::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyIntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  intfdir_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyIntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterface Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLApplyDirection IntfDir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_intfdir(static_cast<::service_layer::SLApplyDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyIntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyIntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterface Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLApplyDirection IntfDir = 2;
  if (this->_internal_intfdir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_intfdir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyIntf)
  return target;
}

size_t SLPolicyIntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyIntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLInterface Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLApplyDirection IntfDir = 2;
  if (this->_internal_intfdir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_intfdir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyIntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyIntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyIntf::GetClassData() const { return &_class_data_; }

void SLPolicyIntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyIntf *>(to)->MergeFrom(
      static_cast<const SLPolicyIntf &>(from));
}


void SLPolicyIntf::MergeFrom(const SLPolicyIntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyIntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLInterface::MergeFrom(from._internal_key());
  }
  if (from._internal_intfdir() != 0) {
    _internal_set_intfdir(from._internal_intfdir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyIntf::CopyFrom(const SLPolicyIntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyIntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyIntf::IsInitialized() const {
  return true;
}

void SLPolicyIntf::InternalSwap(SLPolicyIntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPolicyIntf, intfdir_)
      + sizeof(SLPolicyIntf::intfdir_)
      - PROTOBUF_FIELD_OFFSET(SLPolicyIntf, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyIntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[9]);
}

// ===================================================================

class SLPolicyOpRsp::_Internal {
 public:
};

SLPolicyOpRsp::SLPolicyOpRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyOpRsp)
}
SLPolicyOpRsp::SLPolicyOpRsp(const SLPolicyOpRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operationid_ = from.operationid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyOpRsp)
}

inline void SLPolicyOpRsp::SharedCtor() {
operationid_ = uint64_t{0u};
}

SLPolicyOpRsp::~SLPolicyOpRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyOpRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyOpRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPolicyOpRsp::ArenaDtor(void* object) {
  SLPolicyOpRsp* _this = reinterpret_cast< SLPolicyOpRsp* >(object);
  (void)_this;
}
void SLPolicyOpRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyOpRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyOpRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyOpRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  operationid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyOpRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 OperationID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLPolicyRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyOpRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyOpRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 OperationID = 1;
  if (this->_internal_operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_operationid(), target);
  }

  // repeated .service_layer.SLPolicyRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyOpRsp)
  return target;
}

size_t SLPolicyOpRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyOpRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 OperationID = 1;
  if (this->_internal_operationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operationid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyOpRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyOpRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyOpRsp::GetClassData() const { return &_class_data_; }

void SLPolicyOpRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyOpRsp *>(to)->MergeFrom(
      static_cast<const SLPolicyOpRsp &>(from));
}


void SLPolicyOpRsp::MergeFrom(const SLPolicyOpRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyOpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyOpRsp::CopyFrom(const SLPolicyOpRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyOpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyOpRsp::IsInitialized() const {
  return true;
}

void SLPolicyOpRsp::InternalSwap(SLPolicyOpRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(operationid_, other->operationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyOpRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[10]);
}

// ===================================================================

class SLPolicyRes::_Internal {
 public:
  static const ::service_layer::SLPolicyKey& key(const SLPolicyRes* msg);
  static const ::service_layer::SLErrorStatus& policystatus(const SLPolicyRes* msg);
  static const ::service_layer::SLPolicyRuleStatusList& rulesstatus(const SLPolicyRes* msg);
  static const ::service_layer::SLPolicyIntfStatusList& intfstatus(const SLPolicyRes* msg);
};

const ::service_layer::SLPolicyKey&
SLPolicyRes::_Internal::key(const SLPolicyRes* msg) {
  return *msg->key_;
}
const ::service_layer::SLErrorStatus&
SLPolicyRes::_Internal::policystatus(const SLPolicyRes* msg) {
  return *msg->SLPolicyOpStatus_.policystatus_;
}
const ::service_layer::SLPolicyRuleStatusList&
SLPolicyRes::_Internal::rulesstatus(const SLPolicyRes* msg) {
  return *msg->SLPolicyOpStatus_.rulesstatus_;
}
const ::service_layer::SLPolicyIntfStatusList&
SLPolicyRes::_Internal::intfstatus(const SLPolicyRes* msg) {
  return *msg->SLPolicyOpStatus_.intfstatus_;
}
void SLPolicyRes::set_allocated_policystatus(::service_layer::SLErrorStatus* policystatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SLPolicyOpStatus();
  if (policystatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policystatus));
    if (message_arena != submessage_arena) {
      policystatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policystatus, submessage_arena);
    }
    set_has_policystatus();
    SLPolicyOpStatus_.policystatus_ = policystatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPolicyRes.PolicyStatus)
}
void SLPolicyRes::clear_policystatus() {
  if (_internal_has_policystatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SLPolicyOpStatus_.policystatus_;
    }
    clear_has_SLPolicyOpStatus();
  }
}
void SLPolicyRes::set_allocated_rulesstatus(::service_layer::SLPolicyRuleStatusList* rulesstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SLPolicyOpStatus();
  if (rulesstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLPolicyRuleStatusList>::GetOwningArena(rulesstatus);
    if (message_arena != submessage_arena) {
      rulesstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rulesstatus, submessage_arena);
    }
    set_has_rulesstatus();
    SLPolicyOpStatus_.rulesstatus_ = rulesstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPolicyRes.RulesStatus)
}
void SLPolicyRes::set_allocated_intfstatus(::service_layer::SLPolicyIntfStatusList* intfstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SLPolicyOpStatus();
  if (intfstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLPolicyIntfStatusList>::GetOwningArena(intfstatus);
    if (message_arena != submessage_arena) {
      intfstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intfstatus, submessage_arena);
    }
    set_has_intfstatus();
    SLPolicyOpStatus_.intfstatus_ = intfstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLPolicyRes.IntfStatus)
}
SLPolicyRes::SLPolicyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyRes)
}
SLPolicyRes::SLPolicyRes(const SLPolicyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  clear_has_SLPolicyOpStatus();
  switch (from.SLPolicyOpStatus_case()) {
    case kPolicyStatus: {
      _internal_mutable_policystatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_policystatus());
      break;
    }
    case kRulesStatus: {
      _internal_mutable_rulesstatus()->::service_layer::SLPolicyRuleStatusList::MergeFrom(from._internal_rulesstatus());
      break;
    }
    case kIntfStatus: {
      _internal_mutable_intfstatus()->::service_layer::SLPolicyIntfStatusList::MergeFrom(from._internal_intfstatus());
      break;
    }
    case SLPOLICYOPSTATUS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyRes)
}

inline void SLPolicyRes::SharedCtor() {
key_ = nullptr;
clear_has_SLPolicyOpStatus();
}

SLPolicyRes::~SLPolicyRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (has_SLPolicyOpStatus()) {
    clear_SLPolicyOpStatus();
  }
}

void SLPolicyRes::ArenaDtor(void* object) {
  SLPolicyRes* _this = reinterpret_cast< SLPolicyRes* >(object);
  (void)_this;
}
void SLPolicyRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyRes::clear_SLPolicyOpStatus() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLPolicyRes)
  switch (SLPolicyOpStatus_case()) {
    case kPolicyStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete SLPolicyOpStatus_.policystatus_;
      }
      break;
    }
    case kRulesStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete SLPolicyOpStatus_.rulesstatus_;
      }
      break;
    }
    case kIntfStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete SLPolicyOpStatus_.intfstatus_;
      }
      break;
    }
    case SLPOLICYOPSTATUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SLPOLICYOPSTATUS_NOT_SET;
}


void SLPolicyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  clear_SLPolicyOpStatus();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLPolicyKey Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus PolicyStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policystatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPolicyRuleStatusList RulesStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rulesstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLPolicyIntfStatusList IntfStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_intfstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLPolicyKey Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .service_layer.SLErrorStatus PolicyStatus = 2;
  if (_internal_has_policystatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policystatus(this), target, stream);
  }

  // .service_layer.SLPolicyRuleStatusList RulesStatus = 3;
  if (_internal_has_rulesstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rulesstatus(this), target, stream);
  }

  // .service_layer.SLPolicyIntfStatusList IntfStatus = 4;
  if (_internal_has_intfstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::intfstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyRes)
  return target;
}

size_t SLPolicyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLPolicyKey Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  switch (SLPolicyOpStatus_case()) {
    // .service_layer.SLErrorStatus PolicyStatus = 2;
    case kPolicyStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SLPolicyOpStatus_.policystatus_);
      break;
    }
    // .service_layer.SLPolicyRuleStatusList RulesStatus = 3;
    case kRulesStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SLPolicyOpStatus_.rulesstatus_);
      break;
    }
    // .service_layer.SLPolicyIntfStatusList IntfStatus = 4;
    case kIntfStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SLPolicyOpStatus_.intfstatus_);
      break;
    }
    case SLPOLICYOPSTATUS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyRes::GetClassData() const { return &_class_data_; }

void SLPolicyRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyRes *>(to)->MergeFrom(
      static_cast<const SLPolicyRes &>(from));
}


void SLPolicyRes::MergeFrom(const SLPolicyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLPolicyKey::MergeFrom(from._internal_key());
  }
  switch (from.SLPolicyOpStatus_case()) {
    case kPolicyStatus: {
      _internal_mutable_policystatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_policystatus());
      break;
    }
    case kRulesStatus: {
      _internal_mutable_rulesstatus()->::service_layer::SLPolicyRuleStatusList::MergeFrom(from._internal_rulesstatus());
      break;
    }
    case kIntfStatus: {
      _internal_mutable_intfstatus()->::service_layer::SLPolicyIntfStatusList::MergeFrom(from._internal_intfstatus());
      break;
    }
    case SLPOLICYOPSTATUS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyRes::CopyFrom(const SLPolicyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyRes::IsInitialized() const {
  return true;
}

void SLPolicyRes::InternalSwap(SLPolicyRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_, other->key_);
  swap(SLPolicyOpStatus_, other->SLPolicyOpStatus_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[11]);
}

// ===================================================================

class SLPolicyRuleStatusList::_Internal {
 public:
};

SLPolicyRuleStatusList::SLPolicyRuleStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rulesstatus_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyRuleStatusList)
}
SLPolicyRuleStatusList::SLPolicyRuleStatusList(const SLPolicyRuleStatusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rulesstatus_(from.rulesstatus_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyRuleStatusList)
}

inline void SLPolicyRuleStatusList::SharedCtor() {
}

SLPolicyRuleStatusList::~SLPolicyRuleStatusList() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyRuleStatusList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyRuleStatusList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPolicyRuleStatusList::ArenaDtor(void* object) {
  SLPolicyRuleStatusList* _this = reinterpret_cast< SLPolicyRuleStatusList* >(object);
  (void)_this;
}
void SLPolicyRuleStatusList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyRuleStatusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyRuleStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyRuleStatusList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rulesstatus_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyRuleStatusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLPolicyRuleStatus RulesStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rulesstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyRuleStatusList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyRuleStatusList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyRuleStatus RulesStatus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rulesstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rulesstatus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyRuleStatusList)
  return target;
}

size_t SLPolicyRuleStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyRuleStatusList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyRuleStatus RulesStatus = 1;
  total_size += 1UL * this->_internal_rulesstatus_size();
  for (const auto& msg : this->rulesstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyRuleStatusList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyRuleStatusList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyRuleStatusList::GetClassData() const { return &_class_data_; }

void SLPolicyRuleStatusList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyRuleStatusList *>(to)->MergeFrom(
      static_cast<const SLPolicyRuleStatusList &>(from));
}


void SLPolicyRuleStatusList::MergeFrom(const SLPolicyRuleStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyRuleStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rulesstatus_.MergeFrom(from.rulesstatus_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyRuleStatusList::CopyFrom(const SLPolicyRuleStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyRuleStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyRuleStatusList::IsInitialized() const {
  return true;
}

void SLPolicyRuleStatusList::InternalSwap(SLPolicyRuleStatusList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rulesstatus_.InternalSwap(&other->rulesstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyRuleStatusList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[12]);
}

// ===================================================================

class SLPolicyIntfStatusList::_Internal {
 public:
};

SLPolicyIntfStatusList::SLPolicyIntfStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  intfsstatus_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyIntfStatusList)
}
SLPolicyIntfStatusList::SLPolicyIntfStatusList(const SLPolicyIntfStatusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intfsstatus_(from.intfsstatus_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyIntfStatusList)
}

inline void SLPolicyIntfStatusList::SharedCtor() {
}

SLPolicyIntfStatusList::~SLPolicyIntfStatusList() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyIntfStatusList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyIntfStatusList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPolicyIntfStatusList::ArenaDtor(void* object) {
  SLPolicyIntfStatusList* _this = reinterpret_cast< SLPolicyIntfStatusList* >(object);
  (void)_this;
}
void SLPolicyIntfStatusList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyIntfStatusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyIntfStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyIntfStatusList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intfsstatus_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyIntfStatusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLPolicyIntfStatus IntfsStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intfsstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyIntfStatusList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyIntfStatusList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyIntfStatus IntfsStatus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intfsstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_intfsstatus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyIntfStatusList)
  return target;
}

size_t SLPolicyIntfStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyIntfStatusList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyIntfStatus IntfsStatus = 1;
  total_size += 1UL * this->_internal_intfsstatus_size();
  for (const auto& msg : this->intfsstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyIntfStatusList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyIntfStatusList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyIntfStatusList::GetClassData() const { return &_class_data_; }

void SLPolicyIntfStatusList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyIntfStatusList *>(to)->MergeFrom(
      static_cast<const SLPolicyIntfStatusList &>(from));
}


void SLPolicyIntfStatusList::MergeFrom(const SLPolicyIntfStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyIntfStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  intfsstatus_.MergeFrom(from.intfsstatus_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyIntfStatusList::CopyFrom(const SLPolicyIntfStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyIntfStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyIntfStatusList::IsInitialized() const {
  return true;
}

void SLPolicyIntfStatusList::InternalSwap(SLPolicyIntfStatusList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  intfsstatus_.InternalSwap(&other->intfsstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyIntfStatusList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[13]);
}

// ===================================================================

class SLPolicyRuleStatus::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& status(const SLPolicyRuleStatus* msg);
};

const ::service_layer::SLErrorStatus&
SLPolicyRuleStatus::_Internal::status(const SLPolicyRuleStatus* msg) {
  return *msg->status_;
}
void SLPolicyRuleStatus::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SLPolicyRuleStatus::SLPolicyRuleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyRuleStatus)
}
SLPolicyRuleStatus::SLPolicyRuleStatus(const SLPolicyRuleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rulename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rulename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rulename().empty()) {
    rulename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rulename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::service_layer::SLErrorStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyRuleStatus)
}

inline void SLPolicyRuleStatus::SharedCtor() {
rulename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rulename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

SLPolicyRuleStatus::~SLPolicyRuleStatus() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyRuleStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyRuleStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rulename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void SLPolicyRuleStatus::ArenaDtor(void* object) {
  SLPolicyRuleStatus* _this = reinterpret_cast< SLPolicyRuleStatus* >(object);
  (void)_this;
}
void SLPolicyRuleStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyRuleStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyRuleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyRuleStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rulename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyRuleStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string RuleName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rulename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLPolicyRuleStatus.RuleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyRuleStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyRuleStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string RuleName = 1;
  if (!this->_internal_rulename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rulename().data(), static_cast<int>(this->_internal_rulename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLPolicyRuleStatus.RuleName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rulename(), target);
  }

  // .service_layer.SLErrorStatus Status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyRuleStatus)
  return target;
}

size_t SLPolicyRuleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyRuleStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RuleName = 1;
  if (!this->_internal_rulename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rulename());
  }

  // .service_layer.SLErrorStatus Status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyRuleStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyRuleStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyRuleStatus::GetClassData() const { return &_class_data_; }

void SLPolicyRuleStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyRuleStatus *>(to)->MergeFrom(
      static_cast<const SLPolicyRuleStatus &>(from));
}


void SLPolicyRuleStatus::MergeFrom(const SLPolicyRuleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyRuleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rulename().empty()) {
    _internal_set_rulename(from._internal_rulename());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::service_layer::SLErrorStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyRuleStatus::CopyFrom(const SLPolicyRuleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyRuleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyRuleStatus::IsInitialized() const {
  return true;
}

void SLPolicyRuleStatus::InternalSwap(SLPolicyRuleStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rulename_, lhs_arena,
      &other->rulename_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyRuleStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[14]);
}

// ===================================================================

class SLPolicyIntfStatus::_Internal {
 public:
  static const ::service_layer::SLInterface& intf(const SLPolicyIntfStatus* msg);
  static const ::service_layer::SLErrorStatus& status(const SLPolicyIntfStatus* msg);
};

const ::service_layer::SLInterface&
SLPolicyIntfStatus::_Internal::intf(const SLPolicyIntfStatus* msg) {
  return *msg->intf_;
}
const ::service_layer::SLErrorStatus&
SLPolicyIntfStatus::_Internal::status(const SLPolicyIntfStatus* msg) {
  return *msg->status_;
}
void SLPolicyIntfStatus::clear_intf() {
  if (GetArenaForAllocation() == nullptr && intf_ != nullptr) {
    delete intf_;
  }
  intf_ = nullptr;
}
void SLPolicyIntfStatus::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SLPolicyIntfStatus::SLPolicyIntfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyIntfStatus)
}
SLPolicyIntfStatus::SLPolicyIntfStatus(const SLPolicyIntfStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intf()) {
    intf_ = new ::service_layer::SLInterface(*from.intf_);
  } else {
    intf_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::service_layer::SLErrorStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyIntfStatus)
}

inline void SLPolicyIntfStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intf_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&intf_)) + sizeof(status_));
}

SLPolicyIntfStatus::~SLPolicyIntfStatus() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyIntfStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyIntfStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete intf_;
  if (this != internal_default_instance()) delete status_;
}

void SLPolicyIntfStatus::ArenaDtor(void* object) {
  SLPolicyIntfStatus* _this = reinterpret_cast< SLPolicyIntfStatus* >(object);
  (void)_this;
}
void SLPolicyIntfStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyIntfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyIntfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyIntfStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && intf_ != nullptr) {
    delete intf_;
  }
  intf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyIntfStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLInterface Intf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_intf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyIntfStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyIntfStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLInterface Intf = 1;
  if (this->_internal_has_intf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::intf(this), target, stream);
  }

  // .service_layer.SLErrorStatus Status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyIntfStatus)
  return target;
}

size_t SLPolicyIntfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyIntfStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLInterface Intf = 1;
  if (this->_internal_has_intf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intf_);
  }

  // .service_layer.SLErrorStatus Status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyIntfStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyIntfStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyIntfStatus::GetClassData() const { return &_class_data_; }

void SLPolicyIntfStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyIntfStatus *>(to)->MergeFrom(
      static_cast<const SLPolicyIntfStatus &>(from));
}


void SLPolicyIntfStatus::MergeFrom(const SLPolicyIntfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyIntfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_intf()) {
    _internal_mutable_intf()->::service_layer::SLInterface::MergeFrom(from._internal_intf());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::service_layer::SLErrorStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyIntfStatus::CopyFrom(const SLPolicyIntfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyIntfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyIntfStatus::IsInitialized() const {
  return true;
}

void SLPolicyIntfStatus::InternalSwap(SLPolicyIntfStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPolicyIntfStatus, status_)
      + sizeof(SLPolicyIntfStatus::status_)
      - PROTOBUF_FIELD_OFFSET(SLPolicyIntfStatus, intf_)>(
          reinterpret_cast<char*>(&intf_),
          reinterpret_cast<char*>(&other->intf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyIntfStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[15]);
}

// ===================================================================

class SLPolicyGetMsg::_Internal {
 public:
};

SLPolicyGetMsg::SLPolicyGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyGetMsg)
}
SLPolicyGetMsg::SLPolicyGetMsg(const SLPolicyGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyGetMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyGetMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[16]);
}

// ===================================================================

class SLPolicyInfo::_Internal {
 public:
  static const ::service_layer::SLPolicyKey& key(const SLPolicyInfo* msg);
};

const ::service_layer::SLPolicyKey&
SLPolicyInfo::_Internal::key(const SLPolicyInfo* msg) {
  return *msg->key_;
}
SLPolicyInfo::SLPolicyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  policyrules_(arena),
  policyintfs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyInfo)
}
SLPolicyInfo::SLPolicyInfo(const SLPolicyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policyrules_(from.policyrules_),
      policyintfs_(from.policyintfs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyInfo)
}

inline void SLPolicyInfo::SharedCtor() {
key_ = nullptr;
}

SLPolicyInfo::~SLPolicyInfo() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void SLPolicyInfo::ArenaDtor(void* object) {
  SLPolicyInfo* _this = reinterpret_cast< SLPolicyInfo* >(object);
  (void)_this;
}
void SLPolicyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policyrules_.Clear();
  policyintfs_.Clear();
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLPolicyKey Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLPolicyRule PolicyRules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policyrules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLPolicyIntf PolicyIntfs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policyintfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLPolicyKey Key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // repeated .service_layer.SLPolicyRule PolicyRules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policyrules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_policyrules(i), target, stream);
  }

  // repeated .service_layer.SLPolicyIntf PolicyIntfs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policyintfs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_policyintfs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyInfo)
  return target;
}

size_t SLPolicyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyRule PolicyRules = 2;
  total_size += 1UL * this->_internal_policyrules_size();
  for (const auto& msg : this->policyrules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .service_layer.SLPolicyIntf PolicyIntfs = 3;
  total_size += 1UL * this->_internal_policyintfs_size();
  for (const auto& msg : this->policyintfs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLPolicyKey Key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyInfo::GetClassData() const { return &_class_data_; }

void SLPolicyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyInfo *>(to)->MergeFrom(
      static_cast<const SLPolicyInfo &>(from));
}


void SLPolicyInfo::MergeFrom(const SLPolicyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  policyrules_.MergeFrom(from.policyrules_);
  policyintfs_.MergeFrom(from.policyintfs_);
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLPolicyKey::MergeFrom(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyInfo::CopyFrom(const SLPolicyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyInfo::IsInitialized() const {
  return true;
}

void SLPolicyInfo::InternalSwap(SLPolicyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  policyrules_.InternalSwap(&other->policyrules_);
  policyintfs_.InternalSwap(&other->policyintfs_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[17]);
}

// ===================================================================

class SLPolicyGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& policycfgopstatus(const SLPolicyGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLPolicyGetMsgRsp::_Internal::policycfgopstatus(const SLPolicyGetMsgRsp* msg) {
  return *msg->policycfgopstatus_;
}
void SLPolicyGetMsgRsp::clear_policycfgopstatus() {
  if (GetArenaForAllocation() == nullptr && policycfgopstatus_ != nullptr) {
    delete policycfgopstatus_;
  }
  policycfgopstatus_ = nullptr;
}
SLPolicyGetMsgRsp::SLPolicyGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  policyobjs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyGetMsgRsp)
}
SLPolicyGetMsgRsp::SLPolicyGetMsgRsp(const SLPolicyGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policyobjs_(from.policyobjs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policycfgopstatus()) {
    policycfgopstatus_ = new ::service_layer::SLErrorStatus(*from.policycfgopstatus_);
  } else {
    policycfgopstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyGetMsgRsp)
}

inline void SLPolicyGetMsgRsp::SharedCtor() {
policycfgopstatus_ = nullptr;
}

SLPolicyGetMsgRsp::~SLPolicyGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete policycfgopstatus_;
}

void SLPolicyGetMsgRsp::ArenaDtor(void* object) {
  SLPolicyGetMsgRsp* _this = reinterpret_cast< SLPolicyGetMsgRsp* >(object);
  (void)_this;
}
void SLPolicyGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policyobjs_.Clear();
  if (GetArenaForAllocation() == nullptr && policycfgopstatus_ != nullptr) {
    delete policycfgopstatus_;
  }
  policycfgopstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus PolicyCfgOpStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policycfgopstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLPolicyInfo PolicyObjs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policyobjs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus PolicyCfgOpStatus = 1;
  if (this->_internal_has_policycfgopstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policycfgopstatus(this), target, stream);
  }

  // repeated .service_layer.SLPolicyInfo PolicyObjs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policyobjs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_policyobjs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyGetMsgRsp)
  return target;
}

size_t SLPolicyGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLPolicyInfo PolicyObjs = 2;
  total_size += 1UL * this->_internal_policyobjs_size();
  for (const auto& msg : this->policyobjs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus PolicyCfgOpStatus = 1;
  if (this->_internal_has_policycfgopstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policycfgopstatus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLPolicyGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLPolicyGetMsgRsp &>(from));
}


void SLPolicyGetMsgRsp::MergeFrom(const SLPolicyGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  policyobjs_.MergeFrom(from.policyobjs_);
  if (from._internal_has_policycfgopstatus()) {
    _internal_mutable_policycfgopstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_policycfgopstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyGetMsgRsp::CopyFrom(const SLPolicyGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyGetMsgRsp::IsInitialized() const {
  return true;
}

void SLPolicyGetMsgRsp::InternalSwap(SLPolicyGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  policyobjs_.InternalSwap(&other->policyobjs_);
  swap(policycfgopstatus_, other->policycfgopstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[18]);
}

// ===================================================================

class SLPolicyGlobalGetMsg::_Internal {
 public:
};

SLPolicyGlobalGetMsg::SLPolicyGlobalGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyGlobalGetMsg)
}
SLPolicyGlobalGetMsg::SLPolicyGlobalGetMsg(const SLPolicyGlobalGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyGlobalGetMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyGlobalGetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyGlobalGetMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyGlobalGetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[19]);
}

// ===================================================================

class SLPolicyGlobalGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLPolicyGlobalGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLPolicyGlobalGetMsgRsp::_Internal::errstatus(const SLPolicyGlobalGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLPolicyGlobalGetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLPolicyGlobalGetMsgRsp::SLPolicyGlobalGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLPolicyGlobalGetMsgRsp)
}
SLPolicyGlobalGetMsgRsp::SLPolicyGlobalGetMsgRsp(const SLPolicyGlobalGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&maxpolicies_, &from.maxpolicies_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxrules_) -
    reinterpret_cast<char*>(&maxpolicies_)) + sizeof(maxrules_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLPolicyGlobalGetMsgRsp)
}

inline void SLPolicyGlobalGetMsgRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxrules_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(maxrules_));
}

SLPolicyGlobalGetMsgRsp::~SLPolicyGlobalGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLPolicyGlobalGetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLPolicyGlobalGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLPolicyGlobalGetMsgRsp::ArenaDtor(void* object) {
  SLPolicyGlobalGetMsgRsp* _this = reinterpret_cast< SLPolicyGlobalGetMsgRsp* >(object);
  (void)_this;
}
void SLPolicyGlobalGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPolicyGlobalGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLPolicyGlobalGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLPolicyGlobalGetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&maxpolicies_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrules_) -
      reinterpret_cast<char*>(&maxpolicies_)) + sizeof(maxrules_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPolicyGlobalGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxPolicies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maxpolicies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxRules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          maxrules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPolicyGlobalGetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLPolicyGlobalGetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxPolicies = 2;
  if (this->_internal_maxpolicies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxpolicies(), target);
  }

  // uint32 MaxRules = 3;
  if (this->_internal_maxrules() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxrules(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLPolicyGlobalGetMsgRsp)
  return target;
}

size_t SLPolicyGlobalGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLPolicyGlobalGetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxPolicies = 2;
  if (this->_internal_maxpolicies() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxpolicies());
  }

  // uint32 MaxRules = 3;
  if (this->_internal_maxrules() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxrules());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPolicyGlobalGetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPolicyGlobalGetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPolicyGlobalGetMsgRsp::GetClassData() const { return &_class_data_; }

void SLPolicyGlobalGetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPolicyGlobalGetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLPolicyGlobalGetMsgRsp &>(from));
}


void SLPolicyGlobalGetMsgRsp::MergeFrom(const SLPolicyGlobalGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLPolicyGlobalGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_maxpolicies() != 0) {
    _internal_set_maxpolicies(from._internal_maxpolicies());
  }
  if (from._internal_maxrules() != 0) {
    _internal_set_maxrules(from._internal_maxrules());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPolicyGlobalGetMsgRsp::CopyFrom(const SLPolicyGlobalGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLPolicyGlobalGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPolicyGlobalGetMsgRsp::IsInitialized() const {
  return true;
}

void SLPolicyGlobalGetMsgRsp::InternalSwap(SLPolicyGlobalGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPolicyGlobalGetMsgRsp, maxrules_)
      + sizeof(SLPolicyGlobalGetMsgRsp::maxrules_)
      - PROTOBUF_FIELD_OFFSET(SLPolicyGlobalGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPolicyGlobalGetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fpolicy_2eproto_getter, &descriptor_table_sl_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fpolicy_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyOpMsg* Arena::CreateMaybeMessage< ::service_layer::SLPolicyOpMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyOpMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyEntry* Arena::CreateMaybeMessage< ::service_layer::SLPolicyEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::PolicyRuleList* Arena::CreateMaybeMessage< ::service_layer::PolicyRuleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::PolicyRuleList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::PolicyIntfList* Arena::CreateMaybeMessage< ::service_layer::PolicyIntfList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::PolicyIntfList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyKey* Arena::CreateMaybeMessage< ::service_layer::SLPolicyKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyKey >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyRule* Arena::CreateMaybeMessage< ::service_layer::SLPolicyRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyRule >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRuleMatch* Arena::CreateMaybeMessage< ::service_layer::SLRuleMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRuleMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLDscpMatch* Arena::CreateMaybeMessage< ::service_layer::SLDscpMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLDscpMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRuleAction* Arena::CreateMaybeMessage< ::service_layer::SLRuleAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRuleAction >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyIntf* Arena::CreateMaybeMessage< ::service_layer::SLPolicyIntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyIntf >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyOpRsp* Arena::CreateMaybeMessage< ::service_layer::SLPolicyOpRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyOpRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyRes* Arena::CreateMaybeMessage< ::service_layer::SLPolicyRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyRuleStatusList* Arena::CreateMaybeMessage< ::service_layer::SLPolicyRuleStatusList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyRuleStatusList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyIntfStatusList* Arena::CreateMaybeMessage< ::service_layer::SLPolicyIntfStatusList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyIntfStatusList >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyRuleStatus* Arena::CreateMaybeMessage< ::service_layer::SLPolicyRuleStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyRuleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyIntfStatus* Arena::CreateMaybeMessage< ::service_layer::SLPolicyIntfStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyIntfStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLPolicyGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyInfo* Arena::CreateMaybeMessage< ::service_layer::SLPolicyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLPolicyGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyGlobalGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLPolicyGlobalGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyGlobalGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLPolicyGlobalGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLPolicyGlobalGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLPolicyGlobalGetMsgRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
