// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_protocols.proto

#include "sl_protocols.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
}  // namespace service_layer
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fprotocols_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fprotocols_2eproto = nullptr;
const uint32_t TableStruct_sl_5fprotocols_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_sl_5fprotocols_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022sl_protocols.proto\022\rservice_layer*\255\002\n\023"
  "SLBgplsTopoNlriType\022$\n SL_BGPLS_TOPO_NLR"
  "I_TYPE_RESERVED\020\000\022 \n\034SL_BGPLS_TOPO_NLRI_"
  "TYPE_NODE\020\001\022 \n\034SL_BGPLS_TOPO_NLRI_TYPE_L"
  "INK\020\002\022\'\n#SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PR"
  "EFIX\020\003\022\'\n#SL_BGPLS_TOPO_NLRI_TYPE_IPV6_P"
  "REFIX\020\004\0224\n0SL_BGPLS_TOPO_NLRI_TYPE_SR_PO"
  "LICY_CANDIDATE_PATH\020\005\022$\n SL_BGPLS_TOPO_N"
  "LRI_TYPE_SRV6_SID\020\006*\361\002\n\023SLBgplsTopoProto"
  "col\022#\n\037SL_BGPLS_TOPO_PROTOCOL_RESERVED\020\000"
  "\022\"\n\036SL_BGPLS_TOPO_PROTOCOL_ISIS_L1\020\001\022\"\n\036"
  "SL_BGPLS_TOPO_PROTOCOL_ISIS_L2\020\002\022!\n\035SL_B"
  "GPLS_TOPO_PROTOCOL_OSPFv2\020\003\022!\n\035SL_BGPLS_"
  "TOPO_PROTOCOL_DIRECT\020\004\022!\n\035SL_BGPLS_TOPO_"
  "PROTOCOL_STATIC\020\005\022!\n\035SL_BGPLS_TOPO_PROTO"
  "COL_OSPFv3\020\006\022\036\n\032SL_BGPLS_TOPO_PROTOCOL_B"
  "GP\020\007\022\"\n\036SL_BGPLS_TOPO_PROTOCOL_RSVP_TE\020\010"
  "\022\035\n\031SL_BGPLS_TOPO_PROTOCOL_SR\020\t*\316\002\n\030SLBg"
  "plsTopoOspfRouteType\022*\n&SL_BGPLS_TOPO_OS"
  "PF_ROUTE_TYPE_RESERVED\020\000\022,\n(SL_BGPLS_TOP"
  "O_OSPF_ROUTE_TYPE_INTRA_AREA\020\001\022,\n(SL_BGP"
  "LS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA\020\002\022*\n&"
  "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1\020\003"
  "\022*\n&SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN"
  "_2\020\004\022(\n$SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NS"
  "SA_1\020\005\022(\n$SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_"
  "NSSA_2\020\006*\263\003\n!SLBgplsTopoSrPolicyProtocol"
  "Origin\0224\n0SL_BGPLS_TOPO_SR_POLICY_PROTOC"
  "OL_ORIGIN_RESERVED\020\000\0220\n,SL_BGPLS_TOPO_SR"
  "_POLICY_PROTOCOL_ORIGIN_PCEP\020\001\0229\n5SL_BGP"
  "LS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR"
  "_POLICY\020\002\0222\n.SL_BGPLS_TOPO_SR_POLICY_PRO"
  "TOCOL_ORIGIN_CONFIG\020\003\0228\n4SL_BGPLS_TOPO_S"
  "R_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE\020\n\022"
  "A\n=SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIG"
  "IN_BGP_SR_POLICY_VIA_PCE\020\024\022:\n6SL_BGPLS_T"
  "OPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA"
  "_PCE\020\036BQZOgithub.com/Cisco-service-layer"
  "/service-layer-objmodel/grpc/protos;serv"
  "ice_layerb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fprotocols_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fprotocols_2eproto = {
  false, false, 1577, descriptor_table_protodef_sl_5fprotocols_2eproto, "sl_protocols.proto", 
  &descriptor_table_sl_5fprotocols_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_sl_5fprotocols_2eproto::offsets,
  nullptr, file_level_enum_descriptors_sl_5fprotocols_2eproto, file_level_service_descriptors_sl_5fprotocols_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fprotocols_2eproto_getter() {
  return &descriptor_table_sl_5fprotocols_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fprotocols_2eproto(&descriptor_table_sl_5fprotocols_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoNlriType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fprotocols_2eproto);
  return file_level_enum_descriptors_sl_5fprotocols_2eproto[0];
}
bool SLBgplsTopoNlriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fprotocols_2eproto);
  return file_level_enum_descriptors_sl_5fprotocols_2eproto[1];
}
bool SLBgplsTopoProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoOspfRouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fprotocols_2eproto);
  return file_level_enum_descriptors_sl_5fprotocols_2eproto[2];
}
bool SLBgplsTopoOspfRouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLBgplsTopoSrPolicyProtocolOrigin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fprotocols_2eproto);
  return file_level_enum_descriptors_sl_5fprotocols_2eproto[3];
}
bool SLBgplsTopoSrPolicyProtocolOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
