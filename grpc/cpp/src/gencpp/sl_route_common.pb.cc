// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_route_common.proto

#include "sl_route_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sl_5fcommon_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fcommon_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLInterface_sl_5fcommon_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5fcommon_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLIpAddress_sl_5fcommon_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5froute_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5froute_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sl_5froute_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto;
namespace service_layer {
class SLRouteGlobalsGetMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteGlobalsGetMsg> _instance;
} _SLRouteGlobalsGetMsg_default_instance_;
class SLRouteGlobalsGetMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteGlobalsGetMsgRsp> _instance;
} _SLRouteGlobalsGetMsgRsp_default_instance_;
class SLRouteGlobalStatsGetMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteGlobalStatsGetMsg> _instance;
} _SLRouteGlobalStatsGetMsg_default_instance_;
class SLRouteGlobalStatsGetMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteGlobalStatsGetMsgRsp> _instance;
} _SLRouteGlobalStatsGetMsgRsp_default_instance_;
class SLVrfRegDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfReg> _instance;
} _SLVrfReg_default_instance_;
class SLVrfRegMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfRegMsg> _instance;
} _SLVrfRegMsg_default_instance_;
class SLVrfRegMsgResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfRegMsgRes> _instance;
} _SLVrfRegMsgRes_default_instance_;
class SLVrfRegMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfRegMsgRsp> _instance;
} _SLVrfRegMsgRsp_default_instance_;
class SLVrfRegGetMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfRegGetMsg> _instance;
} _SLVrfRegGetMsg_default_instance_;
class SLVrfRegGetMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfRegGetMsgRsp> _instance;
} _SLVrfRegGetMsgRsp_default_instance_;
class SLVRFGetStatsMsgResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVRFGetStatsMsgRes> _instance;
} _SLVRFGetStatsMsgRes_default_instance_;
class SLVRFGetStatsMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVRFGetStatsMsgRsp> _instance;
} _SLVRFGetStatsMsgRsp_default_instance_;
class SLRouteGetNotifMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteGetNotifMsg> _instance;
} _SLRouteGetNotifMsg_default_instance_;
class SLRouteNotifStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteNotifStatus> _instance;
} _SLRouteNotifStatus_default_instance_;
class SLRouteNotifMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteNotifMarker> _instance;
} _SLRouteNotifMarker_default_instance_;
class SLVrfNotifDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLVrfNotif> _instance;
} _SLVrfNotif_default_instance_;
class SLRouteCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRouteCommon> _instance;
} _SLRouteCommon_default_instance_;
class SLRoutePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLRoutePath> _instance;
} _SLRoutePath_default_instance_;
}  // namespace service_layer
static void InitDefaultsscc_info_SLRouteCommon_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteCommon_default_instance_;
    new (ptr) ::service_layer::SLRouteCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteCommon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLRouteCommon_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLRouteCommon_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLRouteGetNotifMsg_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteGetNotifMsg_default_instance_;
    new (ptr) ::service_layer::SLRouteGetNotifMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteGetNotifMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLRouteGetNotifMsg_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLRouteGetNotifMsg_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLRouteGlobalStatsGetMsg_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteGlobalStatsGetMsg_default_instance_;
    new (ptr) ::service_layer::SLRouteGlobalStatsGetMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteGlobalStatsGetMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLRouteGlobalStatsGetMsg_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLRouteGlobalStatsGetMsg_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLRouteGlobalStatsGetMsgRsp_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteGlobalStatsGetMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLRouteGlobalStatsGetMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteGlobalStatsGetMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLRouteGlobalStatsGetMsgRsp_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLRouteGlobalStatsGetMsgRsp_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLRouteGlobalsGetMsg_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteGlobalsGetMsg_default_instance_;
    new (ptr) ::service_layer::SLRouteGlobalsGetMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteGlobalsGetMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLRouteGlobalsGetMsg_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLRouteGlobalsGetMsg_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLRouteGlobalsGetMsgRsp_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteGlobalsGetMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLRouteGlobalsGetMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteGlobalsGetMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLRouteGlobalsGetMsgRsp_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLRouteGlobalsGetMsgRsp_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLRouteNotifMarker_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteNotifMarker_default_instance_;
    new (ptr) ::service_layer::SLRouteNotifMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteNotifMarker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLRouteNotifMarker_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLRouteNotifMarker_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLRouteNotifStatus_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRouteNotifStatus_default_instance_;
    new (ptr) ::service_layer::SLRouteNotifStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRouteNotifStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLRouteNotifStatus_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLRouteNotifStatus_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLRoutePath_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLRoutePath_default_instance_;
    new (ptr) ::service_layer::SLRoutePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLRoutePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLRoutePath_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLRoutePath_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLIpAddress_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLInterface_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVRFGetStatsMsgRes_default_instance_;
    new (ptr) ::service_layer::SLVRFGetStatsMsgRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVRFGetStatsMsgRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLVRFGetStatsMsgRsp_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVRFGetStatsMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLVRFGetStatsMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVRFGetStatsMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLVRFGetStatsMsgRsp_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLVRFGetStatsMsgRsp_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SLVrfNotif_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfNotif_default_instance_;
    new (ptr) ::service_layer::SLVrfNotif();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfNotif::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLVrfNotif_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLVrfNotif_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLVrfReg_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfReg_default_instance_;
    new (ptr) ::service_layer::SLVrfReg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfReg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLVrfReg_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLVrfRegGetMsg_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfRegGetMsg_default_instance_;
    new (ptr) ::service_layer::SLVrfRegGetMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfRegGetMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLVrfRegGetMsg_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLVrfRegGetMsg_sl_5froute_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_SLVrfRegGetMsgRsp_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfRegGetMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLVrfRegGetMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfRegGetMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLVrfRegGetMsgRsp_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLVrfRegGetMsgRsp_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SLVrfRegMsg_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfRegMsg_default_instance_;
    new (ptr) ::service_layer::SLVrfRegMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfRegMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLVrfRegMsg_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLVrfRegMsg_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfRegMsgRes_default_instance_;
    new (ptr) ::service_layer::SLVrfRegMsgRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfRegMsgRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SLVrfRegMsgRsp_sl_5froute_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service_layer::_SLVrfRegMsgRsp_default_instance_;
    new (ptr) ::service_layer::SLVrfRegMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::service_layer::SLVrfRegMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SLVrfRegMsgRsp_sl_5froute_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SLVrfRegMsgRsp_sl_5froute_5fcommon_2eproto}, {
      &scc_info_SLErrorStatus_sl_5fcommon_5ftypes_2eproto.base,
      &scc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5froute_5fcommon_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5froute_5fcommon_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5froute_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sl_5froute_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalsGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalsGetMsgRsp, maxvrfregpervrfregmsg_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalsGetMsgRsp, maxrouteperroutemsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalStatsGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalStatsGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalStatsGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalStatsGetMsgRsp, vrfcount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGlobalStatsGetMsgRsp, routecount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfReg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfReg, admindistance_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfReg, vrfpurgeintervalseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsg, vrfregmsgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsgRes, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsgRes, vrfname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegMsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfRegGetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRes, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRes, routecount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVRFGetStatsMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGetNotifMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGetNotifMsg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGetNotifMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGetNotifMsg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGetNotifMsg, srcproto_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteGetNotifMsg, srcprototag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteNotifStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteNotifStatus, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteNotifStatus, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteNotifStatus, notifstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteNotifMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteNotifMarker, vrfname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfNotif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfNotif, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLVrfNotif, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, admindistance_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, locallabel_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, tag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, srcproto_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, srcprototag_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRouteCommon, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, nexthopaddress_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, nexthopinterface_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, loadmetric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, metric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, pathid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, protectedpathbitmap_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, labelstack_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, remoteaddress_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, encaptype_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutePath, vteproutermacaddress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service_layer::SLRouteGlobalsGetMsg)},
  { 5, -1, sizeof(::service_layer::SLRouteGlobalsGetMsgRsp)},
  { 13, -1, sizeof(::service_layer::SLRouteGlobalStatsGetMsg)},
  { 18, -1, sizeof(::service_layer::SLRouteGlobalStatsGetMsgRsp)},
  { 26, -1, sizeof(::service_layer::SLVrfReg)},
  { 34, -1, sizeof(::service_layer::SLVrfRegMsg)},
  { 41, -1, sizeof(::service_layer::SLVrfRegMsgRes)},
  { 48, -1, sizeof(::service_layer::SLVrfRegMsgRsp)},
  { 55, -1, sizeof(::service_layer::SLVrfRegGetMsg)},
  { 63, -1, sizeof(::service_layer::SLVrfRegGetMsgRsp)},
  { 71, -1, sizeof(::service_layer::SLVRFGetStatsMsgRes)},
  { 78, -1, sizeof(::service_layer::SLVRFGetStatsMsgRsp)},
  { 86, -1, sizeof(::service_layer::SLRouteGetNotifMsg)},
  { 96, -1, sizeof(::service_layer::SLRouteNotifStatus)},
  { 104, -1, sizeof(::service_layer::SLRouteNotifMarker)},
  { 110, -1, sizeof(::service_layer::SLVrfNotif)},
  { 117, -1, sizeof(::service_layer::SLRouteCommon)},
  { 128, -1, sizeof(::service_layer::SLRoutePath)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteGlobalsGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteGlobalsGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteGlobalStatsGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteGlobalStatsGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfRegMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfRegMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfRegMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfRegGetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfRegGetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVRFGetStatsMsgRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVRFGetStatsMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteGetNotifMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteNotifStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteNotifMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLVrfNotif_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRouteCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutePath_default_instance_),
};

const char descriptor_table_protodef_sl_5froute_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025sl_route_common.proto\022\rservice_layer\032\025"
  "sl_common_types.proto\"\026\n\024SLRouteGlobalsG"
  "etMsg\"\206\001\n\027SLRouteGlobalsGetMsgRsp\022/\n\tErr"
  "Status\030\001 \001(\0132\034.service_layer.SLErrorStat"
  "us\022\035\n\025MaxVrfregPerVrfregmsg\030\002 \001(\r\022\033\n\023Max"
  "RoutePerRoutemsg\030\003 \001(\r\"\032\n\030SLRouteGlobalS"
  "tatsGetMsg\"t\n\033SLRouteGlobalStatsGetMsgRs"
  "p\022/\n\tErrStatus\030\001 \001(\0132\034.service_layer.SLE"
  "rrorStatus\022\020\n\010VrfCount\030\002 \001(\r\022\022\n\nRouteCou"
  "nt\030\003 \001(\r\"S\n\010SLVrfReg\022\017\n\007VrfName\030\001 \001(\t\022\025\n"
  "\rAdminDistance\030\002 \001(\r\022\037\n\027VrfPurgeInterval"
  "Seconds\030\003 \001(\r\"`\n\013SLVrfRegMsg\022$\n\004Oper\030\001 \001"
  "(\0162\026.service_layer.SLRegOp\022+\n\nVrfRegMsgs"
  "\030\002 \003(\0132\027.service_layer.SLVrfReg\"R\n\016SLVrf"
  "RegMsgRes\022/\n\tErrStatus\030\001 \001(\0132\034.service_l"
  "ayer.SLErrorStatus\022\017\n\007VrfName\030\002 \001(\t\"u\n\016S"
  "LVrfRegMsgRsp\0223\n\rStatusSummary\030\001 \001(\0132\034.s"
  "ervice_layer.SLErrorStatus\022.\n\007Results\030\002 "
  "\003(\0132\035.service_layer.SLVrfRegMsgRes\"H\n\016SL"
  "VrfRegGetMsg\022\017\n\007VrfName\030\001 \001(\t\022\024\n\014Entries"
  "Count\030\002 \001(\r\022\017\n\007GetNext\030\003 \001(\010\"{\n\021SLVrfReg"
  "GetMsgRsp\022\013\n\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001("
  "\0132\034.service_layer.SLErrorStatus\022(\n\007Entri"
  "es\030\003 \003(\0132\027.service_layer.SLVrfReg\":\n\023SLV"
  "RFGetStatsMsgRes\022\017\n\007VrfName\030\001 \001(\t\022\022\n\nRou"
  "teCount\030\002 \001(\r\"\210\001\n\023SLVRFGetStatsMsgRsp\022\013\n"
  "\003Eof\030\001 \001(\010\022/\n\tErrStatus\030\002 \001(\0132\034.service_"
  "layer.SLErrorStatus\0223\n\007Entries\030\003 \003(\0132\".s"
  "ervice_layer.SLVRFGetStatsMsgRes\"\210\001\n\022SLR"
  "outeGetNotifMsg\022&\n\004Oper\030\001 \001(\0162\030.service_"
  "layer.SLNotifOp\022\022\n\nCorrelator\030\002 \001(\004\022\017\n\007V"
  "rfName\030\003 \001(\t\022\020\n\010SrcProto\030\004 \001(\t\022\023\n\013SrcPro"
  "toTag\030\005 \001(\t\"l\n\022SLRouteNotifStatus\022\022\n\nCor"
  "relator\030\001 \001(\004\022\017\n\007VrfName\030\002 \001(\t\0221\n\013NotifS"
  "tatus\030\003 \001(\0132\034.service_layer.SLErrorStatu"
  "s\"%\n\022SLRouteNotifMarker\022\017\n\007VrfName\030\001 \001(\t"
  "\"H\n\nSLVrfNotif\022\017\n\007VrfName\030\001 \001(\t\022)\n\006Statu"
  "s\030\002 \001(\0162\031.service_layer.SLObjectOp\"}\n\rSL"
  "RouteCommon\022\025\n\rAdminDistance\030\001 \001(\r\022\022\n\nLo"
  "calLabel\030\002 \001(\r\022\013\n\003Tag\030\003 \001(\r\022\020\n\010SrcProto\030"
  "\004 \001(\t\022\023\n\013SrcProtoTag\030\005 \001(\t\022\r\n\005Flags\030\006 \001("
  "\r\"\355\002\n\013SLRoutePath\0222\n\016NexthopAddress\030\001 \001("
  "\0132\032.service_layer.SLIpAddress\0224\n\020Nexthop"
  "Interface\030\002 \001(\0132\032.service_layer.SLInterf"
  "ace\022\022\n\nLoadMetric\030\003 \001(\r\022\017\n\007VrfName\030\004 \001(\t"
  "\022\016\n\006Metric\030\005 \001(\r\022\016\n\006PathId\030\006 \001(\r\022\033\n\023Prot"
  "ectedPathBitmap\030\007 \003(\004\022\022\n\nLabelStack\030\010 \003("
  "\r\0221\n\rRemoteAddress\030\t \003(\0132\032.service_layer"
  ".SLIpAddress\022-\n\tEncapType\030\n \001(\0162\032.servic"
  "e_layer.SLEncapType\022\034\n\024VtepRouterMacAddr"
  "ess\030\013 \001(\014*\312\001\n\013SLNotifType\022\032\n\026SL_EVENT_TY"
  "PE_RESERVED\020\000\022\027\n\023SL_EVENT_TYPE_ERROR\020\001\022\030"
  "\n\024SL_EVENT_TYPE_STATUS\020\002\022\027\n\023SL_EVENT_TYP"
  "E_ROUTE\020\003\022\036\n\032SL_EVENT_TYPE_START_MARKER\020"
  "\004\022\034\n\030SL_EVENT_TYPE_END_MARKER\020\005\022\025\n\021SL_EV"
  "ENT_TYPE_VRF\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5froute_5fcommon_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sl_5froute_5fcommon_2eproto_sccs[18] = {
  &scc_info_SLRouteCommon_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteGetNotifMsg_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteGlobalStatsGetMsg_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteGlobalStatsGetMsgRsp_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteGlobalsGetMsg_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteGlobalsGetMsgRsp_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteNotifMarker_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRouteNotifStatus_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLRoutePath_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVRFGetStatsMsgRsp_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfNotif_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfRegGetMsg_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfRegGetMsgRsp_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfRegMsg_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto.base,
  &scc_info_SLVrfRegMsgRsp_sl_5froute_5fcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5froute_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5froute_5fcommon_2eproto = {
  false, false, descriptor_table_protodef_sl_5froute_5fcommon_2eproto, "sl_route_common.proto", 2222,
  &descriptor_table_sl_5froute_5fcommon_2eproto_once, descriptor_table_sl_5froute_5fcommon_2eproto_sccs, descriptor_table_sl_5froute_5fcommon_2eproto_deps, 18, 1,
  schemas, file_default_instances, TableStruct_sl_5froute_5fcommon_2eproto::offsets,
  file_level_metadata_sl_5froute_5fcommon_2eproto, 18, file_level_enum_descriptors_sl_5froute_5fcommon_2eproto, file_level_service_descriptors_sl_5froute_5fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sl_5froute_5fcommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sl_5froute_5fcommon_2eproto)), true);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLNotifType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5froute_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5froute_5fcommon_2eproto[0];
}
bool SLNotifType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SLRouteGlobalsGetMsg::InitAsDefaultInstance() {
}
class SLRouteGlobalsGetMsg::_Internal {
 public:
};

SLRouteGlobalsGetMsg::SLRouteGlobalsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteGlobalsGetMsg)
}
SLRouteGlobalsGetMsg::SLRouteGlobalsGetMsg(const SLRouteGlobalsGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteGlobalsGetMsg)
}

void SLRouteGlobalsGetMsg::SharedCtor() {
}

SLRouteGlobalsGetMsg::~SLRouteGlobalsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteGlobalsGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteGlobalsGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLRouteGlobalsGetMsg::ArenaDtor(void* object) {
  SLRouteGlobalsGetMsg* _this = reinterpret_cast< SLRouteGlobalsGetMsg* >(object);
  (void)_this;
}
void SLRouteGlobalsGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteGlobalsGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteGlobalsGetMsg& SLRouteGlobalsGetMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteGlobalsGetMsg_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteGlobalsGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteGlobalsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteGlobalsGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteGlobalsGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteGlobalsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteGlobalsGetMsg)
  return target;
}

size_t SLRouteGlobalsGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteGlobalsGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteGlobalsGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteGlobalsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteGlobalsGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteGlobalsGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteGlobalsGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteGlobalsGetMsg)
    MergeFrom(*source);
  }
}

void SLRouteGlobalsGetMsg::MergeFrom(const SLRouteGlobalsGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteGlobalsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLRouteGlobalsGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteGlobalsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteGlobalsGetMsg::CopyFrom(const SLRouteGlobalsGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteGlobalsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteGlobalsGetMsg::IsInitialized() const {
  return true;
}

void SLRouteGlobalsGetMsg::InternalSwap(SLRouteGlobalsGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteGlobalsGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteGlobalsGetMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLRouteGlobalsGetMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLRouteGlobalsGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLRouteGlobalsGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLRouteGlobalsGetMsgRsp::_Internal::errstatus(const SLRouteGlobalsGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLRouteGlobalsGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLRouteGlobalsGetMsgRsp::SLRouteGlobalsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteGlobalsGetMsgRsp)
}
SLRouteGlobalsGetMsgRsp::SLRouteGlobalsGetMsgRsp(const SLRouteGlobalsGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&maxvrfregpervrfregmsg_, &from.maxvrfregpervrfregmsg_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxrouteperroutemsg_) -
    reinterpret_cast<char*>(&maxvrfregpervrfregmsg_)) + sizeof(maxrouteperroutemsg_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteGlobalsGetMsgRsp)
}

void SLRouteGlobalsGetMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRouteGlobalsGetMsgRsp_sl_5froute_5fcommon_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrouteperroutemsg_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(maxrouteperroutemsg_));
}

SLRouteGlobalsGetMsgRsp::~SLRouteGlobalsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteGlobalsGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteGlobalsGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLRouteGlobalsGetMsgRsp::ArenaDtor(void* object) {
  SLRouteGlobalsGetMsgRsp* _this = reinterpret_cast< SLRouteGlobalsGetMsgRsp* >(object);
  (void)_this;
}
void SLRouteGlobalsGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteGlobalsGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteGlobalsGetMsgRsp& SLRouteGlobalsGetMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteGlobalsGetMsgRsp_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteGlobalsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteGlobalsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&maxvrfregpervrfregmsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrouteperroutemsg_) -
      reinterpret_cast<char*>(&maxvrfregpervrfregmsg_)) + sizeof(maxrouteperroutemsg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteGlobalsGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxVrfregPerVrfregmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxvrfregpervrfregmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxRoutePerRoutemsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxrouteperroutemsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteGlobalsGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteGlobalsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 MaxVrfregPerVrfregmsg = 2;
  if (this->maxvrfregpervrfregmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxvrfregpervrfregmsg(), target);
  }

  // uint32 MaxRoutePerRoutemsg = 3;
  if (this->maxrouteperroutemsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxrouteperroutemsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteGlobalsGetMsgRsp)
  return target;
}

size_t SLRouteGlobalsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteGlobalsGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 MaxVrfregPerVrfregmsg = 2;
  if (this->maxvrfregpervrfregmsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxvrfregpervrfregmsg());
  }

  // uint32 MaxRoutePerRoutemsg = 3;
  if (this->maxrouteperroutemsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxrouteperroutemsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteGlobalsGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteGlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteGlobalsGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteGlobalsGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteGlobalsGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteGlobalsGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLRouteGlobalsGetMsgRsp::MergeFrom(const SLRouteGlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteGlobalsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.maxvrfregpervrfregmsg() != 0) {
    _internal_set_maxvrfregpervrfregmsg(from._internal_maxvrfregpervrfregmsg());
  }
  if (from.maxrouteperroutemsg() != 0) {
    _internal_set_maxrouteperroutemsg(from._internal_maxrouteperroutemsg());
  }
}

void SLRouteGlobalsGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteGlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteGlobalsGetMsgRsp::CopyFrom(const SLRouteGlobalsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteGlobalsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteGlobalsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLRouteGlobalsGetMsgRsp::InternalSwap(SLRouteGlobalsGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRouteGlobalsGetMsgRsp, maxrouteperroutemsg_)
      + sizeof(SLRouteGlobalsGetMsgRsp::maxrouteperroutemsg_)
      - PROTOBUF_FIELD_OFFSET(SLRouteGlobalsGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteGlobalsGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteGlobalStatsGetMsg::InitAsDefaultInstance() {
}
class SLRouteGlobalStatsGetMsg::_Internal {
 public:
};

SLRouteGlobalStatsGetMsg::SLRouteGlobalStatsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteGlobalStatsGetMsg)
}
SLRouteGlobalStatsGetMsg::SLRouteGlobalStatsGetMsg(const SLRouteGlobalStatsGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteGlobalStatsGetMsg)
}

void SLRouteGlobalStatsGetMsg::SharedCtor() {
}

SLRouteGlobalStatsGetMsg::~SLRouteGlobalStatsGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteGlobalStatsGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteGlobalStatsGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLRouteGlobalStatsGetMsg::ArenaDtor(void* object) {
  SLRouteGlobalStatsGetMsg* _this = reinterpret_cast< SLRouteGlobalStatsGetMsg* >(object);
  (void)_this;
}
void SLRouteGlobalStatsGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteGlobalStatsGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteGlobalStatsGetMsg& SLRouteGlobalStatsGetMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteGlobalStatsGetMsg_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteGlobalStatsGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteGlobalStatsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteGlobalStatsGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteGlobalStatsGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteGlobalStatsGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteGlobalStatsGetMsg)
  return target;
}

size_t SLRouteGlobalStatsGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteGlobalStatsGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteGlobalStatsGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteGlobalStatsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteGlobalStatsGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteGlobalStatsGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteGlobalStatsGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteGlobalStatsGetMsg)
    MergeFrom(*source);
  }
}

void SLRouteGlobalStatsGetMsg::MergeFrom(const SLRouteGlobalStatsGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteGlobalStatsGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SLRouteGlobalStatsGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteGlobalStatsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteGlobalStatsGetMsg::CopyFrom(const SLRouteGlobalStatsGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteGlobalStatsGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteGlobalStatsGetMsg::IsInitialized() const {
  return true;
}

void SLRouteGlobalStatsGetMsg::InternalSwap(SLRouteGlobalStatsGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteGlobalStatsGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteGlobalStatsGetMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLRouteGlobalStatsGetMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLRouteGlobalStatsGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLRouteGlobalStatsGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLRouteGlobalStatsGetMsgRsp::_Internal::errstatus(const SLRouteGlobalStatsGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLRouteGlobalStatsGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLRouteGlobalStatsGetMsgRsp::SLRouteGlobalStatsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteGlobalStatsGetMsgRsp)
}
SLRouteGlobalStatsGetMsgRsp::SLRouteGlobalStatsGetMsgRsp(const SLRouteGlobalStatsGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&vrfcount_, &from.vrfcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&routecount_) -
    reinterpret_cast<char*>(&vrfcount_)) + sizeof(routecount_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteGlobalStatsGetMsgRsp)
}

void SLRouteGlobalStatsGetMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRouteGlobalStatsGetMsgRsp_sl_5froute_5fcommon_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&routecount_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(routecount_));
}

SLRouteGlobalStatsGetMsgRsp::~SLRouteGlobalStatsGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteGlobalStatsGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteGlobalStatsGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLRouteGlobalStatsGetMsgRsp::ArenaDtor(void* object) {
  SLRouteGlobalStatsGetMsgRsp* _this = reinterpret_cast< SLRouteGlobalStatsGetMsgRsp* >(object);
  (void)_this;
}
void SLRouteGlobalStatsGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteGlobalStatsGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteGlobalStatsGetMsgRsp& SLRouteGlobalStatsGetMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteGlobalStatsGetMsgRsp_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteGlobalStatsGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&vrfcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&routecount_) -
      reinterpret_cast<char*>(&vrfcount_)) + sizeof(routecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteGlobalStatsGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VrfCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vrfcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RouteCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          routecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteGlobalStatsGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // uint32 VrfCount = 2;
  if (this->vrfcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vrfcount(), target);
  }

  // uint32 RouteCount = 3;
  if (this->routecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_routecount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteGlobalStatsGetMsgRsp)
  return target;
}

size_t SLRouteGlobalStatsGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 VrfCount = 2;
  if (this->vrfcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vrfcount());
  }

  // uint32 RouteCount = 3;
  if (this->routecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_routecount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteGlobalStatsGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteGlobalStatsGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteGlobalStatsGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteGlobalStatsGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteGlobalStatsGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLRouteGlobalStatsGetMsgRsp::MergeFrom(const SLRouteGlobalStatsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.vrfcount() != 0) {
    _internal_set_vrfcount(from._internal_vrfcount());
  }
  if (from.routecount() != 0) {
    _internal_set_routecount(from._internal_routecount());
  }
}

void SLRouteGlobalStatsGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteGlobalStatsGetMsgRsp::CopyFrom(const SLRouteGlobalStatsGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteGlobalStatsGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteGlobalStatsGetMsgRsp::IsInitialized() const {
  return true;
}

void SLRouteGlobalStatsGetMsgRsp::InternalSwap(SLRouteGlobalStatsGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRouteGlobalStatsGetMsgRsp, routecount_)
      + sizeof(SLRouteGlobalStatsGetMsgRsp::routecount_)
      - PROTOBUF_FIELD_OFFSET(SLRouteGlobalStatsGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteGlobalStatsGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfReg::InitAsDefaultInstance() {
}
class SLVrfReg::_Internal {
 public:
};

SLVrfReg::SLVrfReg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfReg)
}
SLVrfReg::SLVrfReg(const SLVrfReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  ::memcpy(&admindistance_, &from.admindistance_,
    static_cast<size_t>(reinterpret_cast<char*>(&vrfpurgeintervalseconds_) -
    reinterpret_cast<char*>(&admindistance_)) + sizeof(vrfpurgeintervalseconds_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfReg)
}

void SLVrfReg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&admindistance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vrfpurgeintervalseconds_) -
      reinterpret_cast<char*>(&admindistance_)) + sizeof(vrfpurgeintervalseconds_));
}

SLVrfReg::~SLVrfReg() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfReg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfReg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLVrfReg::ArenaDtor(void* object) {
  SLVrfReg* _this = reinterpret_cast< SLVrfReg* >(object);
  (void)_this;
}
void SLVrfReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfReg& SLVrfReg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfReg_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfReg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&admindistance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vrfpurgeintervalseconds_) -
      reinterpret_cast<char*>(&admindistance_)) + sizeof(vrfpurgeintervalseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLVrfReg.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AdminDistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VrfPurgeIntervalSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vrfpurgeintervalseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfReg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLVrfReg.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // uint32 AdminDistance = 2;
  if (this->admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_admindistance(), target);
  }

  // uint32 VrfPurgeIntervalSeconds = 3;
  if (this->vrfpurgeintervalseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vrfpurgeintervalseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfReg)
  return target;
}

size_t SLVrfReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfReg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // uint32 AdminDistance = 2;
  if (this->admindistance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admindistance());
  }

  // uint32 VrfPurgeIntervalSeconds = 3;
  if (this->vrfpurgeintervalseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vrfpurgeintervalseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfReg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfReg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfReg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfReg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfReg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfReg)
    MergeFrom(*source);
  }
}

void SLVrfReg::MergeFrom(const SLVrfReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfReg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  if (from.vrfpurgeintervalseconds() != 0) {
    _internal_set_vrfpurgeintervalseconds(from._internal_vrfpurgeintervalseconds());
  }
}

void SLVrfReg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfReg::CopyFrom(const SLVrfReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfReg::IsInitialized() const {
  return true;
}

void SLVrfReg::InternalSwap(SLVrfReg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLVrfReg, vrfpurgeintervalseconds_)
      + sizeof(SLVrfReg::vrfpurgeintervalseconds_)
      - PROTOBUF_FIELD_OFFSET(SLVrfReg, admindistance_)>(
          reinterpret_cast<char*>(&admindistance_),
          reinterpret_cast<char*>(&other->admindistance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfReg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfRegMsg::InitAsDefaultInstance() {
}
class SLVrfRegMsg::_Internal {
 public:
};

SLVrfRegMsg::SLVrfRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vrfregmsgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfRegMsg)
}
SLVrfRegMsg::SLVrfRegMsg(const SLVrfRegMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vrfregmsgs_(from.vrfregmsgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfRegMsg)
}

void SLVrfRegMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfRegMsg_sl_5froute_5fcommon_2eproto.base);
  oper_ = 0;
}

SLVrfRegMsg::~SLVrfRegMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfRegMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfRegMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLVrfRegMsg::ArenaDtor(void* object) {
  SLVrfRegMsg* _this = reinterpret_cast< SLVrfRegMsg* >(object);
  (void)_this;
}
void SLVrfRegMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfRegMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfRegMsg& SLVrfRegMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfRegMsg_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfRegMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfRegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfregmsgs_.Clear();
  oper_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfRegMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLRegOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLRegOp>(val));
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLVrfReg VrfRegMsgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrfregmsgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfRegMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfRegMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // repeated .service_layer.SLVrfReg VrfRegMsgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vrfregmsgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vrfregmsgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfRegMsg)
  return target;
}

size_t SLVrfRegMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfRegMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLVrfReg VrfRegMsgs = 2;
  total_size += 1UL * this->_internal_vrfregmsgs_size();
  for (const auto& msg : this->vrfregmsgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLRegOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfRegMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfRegMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfRegMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfRegMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfRegMsg)
    MergeFrom(*source);
  }
}

void SLVrfRegMsg::MergeFrom(const SLVrfRegMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfRegMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vrfregmsgs_.MergeFrom(from.vrfregmsgs_);
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLVrfRegMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfRegMsg::CopyFrom(const SLVrfRegMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfRegMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfRegMsg::IsInitialized() const {
  return true;
}

void SLVrfRegMsg::InternalSwap(SLVrfRegMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfregmsgs_.InternalSwap(&other->vrfregmsgs_);
  swap(oper_, other->oper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfRegMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfRegMsgRes::InitAsDefaultInstance() {
  ::service_layer::_SLVrfRegMsgRes_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLVrfRegMsgRes::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLVrfRegMsgRes* msg);
};

const ::service_layer::SLErrorStatus&
SLVrfRegMsgRes::_Internal::errstatus(const SLVrfRegMsgRes* msg) {
  return *msg->errstatus_;
}
void SLVrfRegMsgRes::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLVrfRegMsgRes::SLVrfRegMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfRegMsgRes)
}
SLVrfRegMsgRes::SLVrfRegMsgRes(const SLVrfRegMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfRegMsgRes)
}

void SLVrfRegMsgRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errstatus_ = nullptr;
}

SLVrfRegMsgRes::~SLVrfRegMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfRegMsgRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfRegMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLVrfRegMsgRes::ArenaDtor(void* object) {
  SLVrfRegMsgRes* _this = reinterpret_cast< SLVrfRegMsgRes* >(object);
  (void)_this;
}
void SLVrfRegMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfRegMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfRegMsgRes& SLVrfRegMsgRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfRegMsgRes_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfRegMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfRegMsgRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfRegMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLVrfRegMsgRes.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfRegMsgRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfRegMsgRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // string VrfName = 2;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLVrfRegMsgRes.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfRegMsgRes)
  return target;
}

size_t SLVrfRegMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfRegMsgRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfRegMsgRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfRegMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfRegMsgRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfRegMsgRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfRegMsgRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfRegMsgRes)
    MergeFrom(*source);
  }
}

void SLVrfRegMsgRes::MergeFrom(const SLVrfRegMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfRegMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
}

void SLVrfRegMsgRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfRegMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfRegMsgRes::CopyFrom(const SLVrfRegMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfRegMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfRegMsgRes::IsInitialized() const {
  return true;
}

void SLVrfRegMsgRes::InternalSwap(SLVrfRegMsgRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errstatus_, other->errstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfRegMsgRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfRegMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLVrfRegMsgRsp_default_instance_._instance.get_mutable()->statussummary_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLVrfRegMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLVrfRegMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLVrfRegMsgRsp::_Internal::statussummary(const SLVrfRegMsgRsp* msg) {
  return *msg->statussummary_;
}
void SLVrfRegMsgRsp::clear_statussummary() {
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLVrfRegMsgRsp::SLVrfRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfRegMsgRsp)
}
SLVrfRegMsgRsp::SLVrfRegMsgRsp(const SLVrfRegMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfRegMsgRsp)
}

void SLVrfRegMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfRegMsgRsp_sl_5froute_5fcommon_2eproto.base);
  statussummary_ = nullptr;
}

SLVrfRegMsgRsp::~SLVrfRegMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfRegMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfRegMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statussummary_;
}

void SLVrfRegMsgRsp::ArenaDtor(void* object) {
  SLVrfRegMsgRsp* _this = reinterpret_cast< SLVrfRegMsgRsp* >(object);
  (void)_this;
}
void SLVrfRegMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfRegMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfRegMsgRsp& SLVrfRegMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfRegMsgRsp_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfRegMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfRegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfRegMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus StatusSummary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLVrfRegMsgRes Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfRegMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfRegMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLVrfRegMsgRes Results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfRegMsgRsp)
  return target;
}

size_t SLVrfRegMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfRegMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLVrfRegMsgRes Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus StatusSummary = 1;
  if (this->has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfRegMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfRegMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfRegMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfRegMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfRegMsgRsp)
    MergeFrom(*source);
  }
}

void SLVrfRegMsgRsp::MergeFrom(const SLVrfRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfRegMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
}

void SLVrfRegMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfRegMsgRsp::CopyFrom(const SLVrfRegMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfRegMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfRegMsgRsp::IsInitialized() const {
  return true;
}

void SLVrfRegMsgRsp::InternalSwap(SLVrfRegMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(statussummary_, other->statussummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfRegMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfRegGetMsg::InitAsDefaultInstance() {
}
class SLVrfRegGetMsg::_Internal {
 public:
};

SLVrfRegGetMsg::SLVrfRegGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfRegGetMsg)
}
SLVrfRegGetMsg::SLVrfRegGetMsg(const SLVrfRegGetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  ::memcpy(&entriescount_, &from.entriescount_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfRegGetMsg)
}

void SLVrfRegGetMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfRegGetMsg_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&entriescount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
}

SLVrfRegGetMsg::~SLVrfRegGetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfRegGetMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfRegGetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLVrfRegGetMsg::ArenaDtor(void* object) {
  SLVrfRegGetMsg* _this = reinterpret_cast< SLVrfRegGetMsg* >(object);
  (void)_this;
}
void SLVrfRegGetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfRegGetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfRegGetMsg& SLVrfRegGetMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfRegGetMsg_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfRegGetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfRegGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&entriescount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&entriescount_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfRegGetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLVrfRegGetMsg.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EntriesCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GetNext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfRegGetMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfRegGetMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLVrfRegGetMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entriescount(), target);
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfRegGetMsg)
  return target;
}

size_t SLVrfRegGetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfRegGetMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // uint32 EntriesCount = 2;
  if (this->entriescount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entriescount());
  }

  // bool GetNext = 3;
  if (this->getnext() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfRegGetMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfRegGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfRegGetMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfRegGetMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfRegGetMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfRegGetMsg)
    MergeFrom(*source);
  }
}

void SLVrfRegGetMsg::MergeFrom(const SLVrfRegGetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfRegGetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from.getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
}

void SLVrfRegGetMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfRegGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfRegGetMsg::CopyFrom(const SLVrfRegGetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfRegGetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfRegGetMsg::IsInitialized() const {
  return true;
}

void SLVrfRegGetMsg::InternalSwap(SLVrfRegGetMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLVrfRegGetMsg, getnext_)
      + sizeof(SLVrfRegGetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLVrfRegGetMsg, entriescount_)>(
          reinterpret_cast<char*>(&entriescount_),
          reinterpret_cast<char*>(&other->entriescount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfRegGetMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfRegGetMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLVrfRegGetMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLVrfRegGetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLVrfRegGetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLVrfRegGetMsgRsp::_Internal::errstatus(const SLVrfRegGetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLVrfRegGetMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLVrfRegGetMsgRsp::SLVrfRegGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfRegGetMsgRsp)
}
SLVrfRegGetMsgRsp::SLVrfRegGetMsgRsp(const SLVrfRegGetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfRegGetMsgRsp)
}

void SLVrfRegGetMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfRegGetMsgRsp_sl_5froute_5fcommon_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLVrfRegGetMsgRsp::~SLVrfRegGetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfRegGetMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfRegGetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLVrfRegGetMsgRsp::ArenaDtor(void* object) {
  SLVrfRegGetMsgRsp* _this = reinterpret_cast< SLVrfRegGetMsgRsp* >(object);
  (void)_this;
}
void SLVrfRegGetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfRegGetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfRegGetMsgRsp& SLVrfRegGetMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfRegGetMsgRsp_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfRegGetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfRegGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfRegGetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Eof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLVrfReg Entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfRegGetMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfRegGetMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Eof = 1;
  if (this->eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLVrfReg Entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfRegGetMsgRsp)
  return target;
}

size_t SLVrfRegGetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfRegGetMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLVrfReg Entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfRegGetMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfRegGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfRegGetMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfRegGetMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfRegGetMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfRegGetMsgRsp)
    MergeFrom(*source);
  }
}

void SLVrfRegGetMsgRsp::MergeFrom(const SLVrfRegGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfRegGetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
}

void SLVrfRegGetMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfRegGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfRegGetMsgRsp::CopyFrom(const SLVrfRegGetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfRegGetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfRegGetMsgRsp::IsInitialized() const {
  return true;
}

void SLVrfRegGetMsgRsp::InternalSwap(SLVrfRegGetMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLVrfRegGetMsgRsp, eof_)
      + sizeof(SLVrfRegGetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLVrfRegGetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfRegGetMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVRFGetStatsMsgRes::InitAsDefaultInstance() {
}
class SLVRFGetStatsMsgRes::_Internal {
 public:
};

SLVRFGetStatsMsgRes::SLVRFGetStatsMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVRFGetStatsMsgRes)
}
SLVRFGetStatsMsgRes::SLVRFGetStatsMsgRes(const SLVRFGetStatsMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  routecount_ = from.routecount_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVRFGetStatsMsgRes)
}

void SLVRFGetStatsMsgRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routecount_ = 0u;
}

SLVRFGetStatsMsgRes::~SLVRFGetStatsMsgRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLVRFGetStatsMsgRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVRFGetStatsMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLVRFGetStatsMsgRes::ArenaDtor(void* object) {
  SLVRFGetStatsMsgRes* _this = reinterpret_cast< SLVRFGetStatsMsgRes* >(object);
  (void)_this;
}
void SLVRFGetStatsMsgRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVRFGetStatsMsgRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVRFGetStatsMsgRes& SLVRFGetStatsMsgRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVRFGetStatsMsgRes_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVRFGetStatsMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVRFGetStatsMsgRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  routecount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVRFGetStatsMsgRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLVRFGetStatsMsgRes.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RouteCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          routecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVRFGetStatsMsgRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVRFGetStatsMsgRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLVRFGetStatsMsgRes.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // uint32 RouteCount = 2;
  if (this->routecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_routecount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVRFGetStatsMsgRes)
  return target;
}

size_t SLVRFGetStatsMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVRFGetStatsMsgRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // uint32 RouteCount = 2;
  if (this->routecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_routecount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVRFGetStatsMsgRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVRFGetStatsMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVRFGetStatsMsgRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVRFGetStatsMsgRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVRFGetStatsMsgRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVRFGetStatsMsgRes)
    MergeFrom(*source);
  }
}

void SLVRFGetStatsMsgRes::MergeFrom(const SLVRFGetStatsMsgRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVRFGetStatsMsgRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.routecount() != 0) {
    _internal_set_routecount(from._internal_routecount());
  }
}

void SLVRFGetStatsMsgRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVRFGetStatsMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVRFGetStatsMsgRes::CopyFrom(const SLVRFGetStatsMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVRFGetStatsMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVRFGetStatsMsgRes::IsInitialized() const {
  return true;
}

void SLVRFGetStatsMsgRes::InternalSwap(SLVRFGetStatsMsgRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(routecount_, other->routecount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVRFGetStatsMsgRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVRFGetStatsMsgRsp::InitAsDefaultInstance() {
  ::service_layer::_SLVRFGetStatsMsgRsp_default_instance_._instance.get_mutable()->errstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLVRFGetStatsMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLVRFGetStatsMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLVRFGetStatsMsgRsp::_Internal::errstatus(const SLVRFGetStatsMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLVRFGetStatsMsgRsp::clear_errstatus() {
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLVRFGetStatsMsgRsp::SLVRFGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVRFGetStatsMsgRsp)
}
SLVRFGetStatsMsgRsp::SLVRFGetStatsMsgRsp(const SLVRFGetStatsMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVRFGetStatsMsgRsp)
}

void SLVRFGetStatsMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVRFGetStatsMsgRsp_sl_5froute_5fcommon_2eproto.base);
  ::memset(&errstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLVRFGetStatsMsgRsp::~SLVRFGetStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLVRFGetStatsMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVRFGetStatsMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete errstatus_;
}

void SLVRFGetStatsMsgRsp::ArenaDtor(void* object) {
  SLVRFGetStatsMsgRsp* _this = reinterpret_cast< SLVRFGetStatsMsgRsp* >(object);
  (void)_this;
}
void SLVRFGetStatsMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVRFGetStatsMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVRFGetStatsMsgRsp& SLVRFGetStatsMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVRFGetStatsMsgRsp_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVRFGetStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVRFGetStatsMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArena() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVRFGetStatsMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Eof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLVRFGetStatsMsgRes Entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVRFGetStatsMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVRFGetStatsMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Eof = 1;
  if (this->eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_eof(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLVRFGetStatsMsgRes Entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVRFGetStatsMsgRsp)
  return target;
}

size_t SLVRFGetStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVRFGetStatsMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLVRFGetStatsMsgRes Entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // bool Eof = 1;
  if (this->eof() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVRFGetStatsMsgRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVRFGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVRFGetStatsMsgRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVRFGetStatsMsgRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVRFGetStatsMsgRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVRFGetStatsMsgRsp)
    MergeFrom(*source);
  }
}

void SLVRFGetStatsMsgRsp::MergeFrom(const SLVRFGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVRFGetStatsMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from.eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
}

void SLVRFGetStatsMsgRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVRFGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVRFGetStatsMsgRsp::CopyFrom(const SLVRFGetStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVRFGetStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVRFGetStatsMsgRsp::IsInitialized() const {
  return true;
}

void SLVRFGetStatsMsgRsp::InternalSwap(SLVRFGetStatsMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLVRFGetStatsMsgRsp, eof_)
      + sizeof(SLVRFGetStatsMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLVRFGetStatsMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVRFGetStatsMsgRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteGetNotifMsg::InitAsDefaultInstance() {
}
class SLRouteGetNotifMsg::_Internal {
 public:
};

SLRouteGetNotifMsg::SLRouteGetNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteGetNotifMsg)
}
SLRouteGetNotifMsg::SLRouteGetNotifMsg(const SLRouteGetNotifMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcproto().empty()) {
    srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcproto(),
      GetArena());
  }
  srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcprototag().empty()) {
    srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcprototag(),
      GetArena());
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteGetNotifMsg)
}

void SLRouteGetNotifMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRouteGetNotifMsg_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
}

SLRouteGetNotifMsg::~SLRouteGetNotifMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteGetNotifMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteGetNotifMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcproto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcprototag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLRouteGetNotifMsg::ArenaDtor(void* object) {
  SLRouteGetNotifMsg* _this = reinterpret_cast< SLRouteGetNotifMsg* >(object);
  (void)_this;
}
void SLRouteGetNotifMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteGetNotifMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteGetNotifMsg& SLRouteGetNotifMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteGetNotifMsg_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteGetNotifMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteGetNotifMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcproto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcprototag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteGetNotifMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLNotifOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLNotifOp>(val));
        } else goto handle_unusual;
        continue;
      // uint64 Correlator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VrfName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteGetNotifMsg.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SrcProto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_srcproto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteGetNotifMsg.SrcProto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SrcProtoTag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_srcprototag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteGetNotifMsg.SrcProtoTag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteGetNotifMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteGetNotifMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_correlator(), target);
  }

  // string VrfName = 3;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteGetNotifMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vrfname(), target);
  }

  // string SrcProto = 4;
  if (this->srcproto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcproto().data(), static_cast<int>(this->_internal_srcproto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteGetNotifMsg.SrcProto");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_srcproto(), target);
  }

  // string SrcProtoTag = 5;
  if (this->srcprototag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcprototag().data(), static_cast<int>(this->_internal_srcprototag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteGetNotifMsg.SrcProtoTag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_srcprototag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteGetNotifMsg)
  return target;
}

size_t SLRouteGetNotifMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteGetNotifMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 3;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // string SrcProto = 4;
  if (this->srcproto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcproto());
  }

  // string SrcProtoTag = 5;
  if (this->srcprototag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcprototag());
  }

  // uint64 Correlator = 2;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  // .service_layer.SLNotifOp Oper = 1;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteGetNotifMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteGetNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteGetNotifMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteGetNotifMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteGetNotifMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteGetNotifMsg)
    MergeFrom(*source);
  }
}

void SLRouteGetNotifMsg::MergeFrom(const SLRouteGetNotifMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteGetNotifMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.srcproto().size() > 0) {
    _internal_set_srcproto(from._internal_srcproto());
  }
  if (from.srcprototag().size() > 0) {
    _internal_set_srcprototag(from._internal_srcprototag());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void SLRouteGetNotifMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteGetNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteGetNotifMsg::CopyFrom(const SLRouteGetNotifMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteGetNotifMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteGetNotifMsg::IsInitialized() const {
  return true;
}

void SLRouteGetNotifMsg::InternalSwap(SLRouteGetNotifMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcproto_.Swap(&other->srcproto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcprototag_.Swap(&other->srcprototag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRouteGetNotifMsg, oper_)
      + sizeof(SLRouteGetNotifMsg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLRouteGetNotifMsg, correlator_)>(
          reinterpret_cast<char*>(&correlator_),
          reinterpret_cast<char*>(&other->correlator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteGetNotifMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteNotifStatus::InitAsDefaultInstance() {
  ::service_layer::_SLRouteNotifStatus_default_instance_._instance.get_mutable()->notifstatus_ = const_cast< ::service_layer::SLErrorStatus*>(
      ::service_layer::SLErrorStatus::internal_default_instance());
}
class SLRouteNotifStatus::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& notifstatus(const SLRouteNotifStatus* msg);
};

const ::service_layer::SLErrorStatus&
SLRouteNotifStatus::_Internal::notifstatus(const SLRouteNotifStatus* msg) {
  return *msg->notifstatus_;
}
void SLRouteNotifStatus::clear_notifstatus() {
  if (GetArena() == nullptr && notifstatus_ != nullptr) {
    delete notifstatus_;
  }
  notifstatus_ = nullptr;
}
SLRouteNotifStatus::SLRouteNotifStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteNotifStatus)
}
SLRouteNotifStatus::SLRouteNotifStatus(const SLRouteNotifStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  if (from._internal_has_notifstatus()) {
    notifstatus_ = new ::service_layer::SLErrorStatus(*from.notifstatus_);
  } else {
    notifstatus_ = nullptr;
  }
  correlator_ = from.correlator_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteNotifStatus)
}

void SLRouteNotifStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRouteNotifStatus_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&notifstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correlator_) -
      reinterpret_cast<char*>(&notifstatus_)) + sizeof(correlator_));
}

SLRouteNotifStatus::~SLRouteNotifStatus() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteNotifStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteNotifStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete notifstatus_;
}

void SLRouteNotifStatus::ArenaDtor(void* object) {
  SLRouteNotifStatus* _this = reinterpret_cast< SLRouteNotifStatus* >(object);
  (void)_this;
}
void SLRouteNotifStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteNotifStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteNotifStatus& SLRouteNotifStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteNotifStatus_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteNotifStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteNotifStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && notifstatus_ != nullptr) {
    delete notifstatus_;
  }
  notifstatus_ = nullptr;
  correlator_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteNotifStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteNotifStatus.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus NotifStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteNotifStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteNotifStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // string VrfName = 2;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteNotifStatus.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // .service_layer.SLErrorStatus NotifStatus = 3;
  if (this->has_notifstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::notifstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteNotifStatus)
  return target;
}

size_t SLRouteNotifStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteNotifStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus NotifStatus = 3;
  if (this->has_notifstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notifstatus_);
  }

  // uint64 Correlator = 1;
  if (this->correlator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteNotifStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteNotifStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteNotifStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteNotifStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteNotifStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteNotifStatus)
    MergeFrom(*source);
  }
}

void SLRouteNotifStatus::MergeFrom(const SLRouteNotifStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteNotifStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.has_notifstatus()) {
    _internal_mutable_notifstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_notifstatus());
  }
  if (from.correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
}

void SLRouteNotifStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteNotifStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteNotifStatus::CopyFrom(const SLRouteNotifStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteNotifStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteNotifStatus::IsInitialized() const {
  return true;
}

void SLRouteNotifStatus::InternalSwap(SLRouteNotifStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRouteNotifStatus, correlator_)
      + sizeof(SLRouteNotifStatus::correlator_)
      - PROTOBUF_FIELD_OFFSET(SLRouteNotifStatus, notifstatus_)>(
          reinterpret_cast<char*>(&notifstatus_),
          reinterpret_cast<char*>(&other->notifstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteNotifStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteNotifMarker::InitAsDefaultInstance() {
}
class SLRouteNotifMarker::_Internal {
 public:
};

SLRouteNotifMarker::SLRouteNotifMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteNotifMarker)
}
SLRouteNotifMarker::SLRouteNotifMarker(const SLRouteNotifMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteNotifMarker)
}

void SLRouteNotifMarker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRouteNotifMarker_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLRouteNotifMarker::~SLRouteNotifMarker() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteNotifMarker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteNotifMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLRouteNotifMarker::ArenaDtor(void* object) {
  SLRouteNotifMarker* _this = reinterpret_cast< SLRouteNotifMarker* >(object);
  (void)_this;
}
void SLRouteNotifMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteNotifMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteNotifMarker& SLRouteNotifMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteNotifMarker_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteNotifMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteNotifMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteNotifMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteNotifMarker.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteNotifMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteNotifMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteNotifMarker.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteNotifMarker)
  return target;
}

size_t SLRouteNotifMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteNotifMarker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteNotifMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteNotifMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteNotifMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteNotifMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteNotifMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteNotifMarker)
    MergeFrom(*source);
  }
}

void SLRouteNotifMarker::MergeFrom(const SLRouteNotifMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteNotifMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
}

void SLRouteNotifMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteNotifMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteNotifMarker::CopyFrom(const SLRouteNotifMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteNotifMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteNotifMarker::IsInitialized() const {
  return true;
}

void SLRouteNotifMarker::InternalSwap(SLRouteNotifMarker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteNotifMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLVrfNotif::InitAsDefaultInstance() {
}
class SLVrfNotif::_Internal {
 public:
};

SLVrfNotif::SLVrfNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLVrfNotif)
}
SLVrfNotif::SLVrfNotif(const SLVrfNotif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLVrfNotif)
}

void SLVrfNotif::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLVrfNotif_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

SLVrfNotif::~SLVrfNotif() {
  // @@protoc_insertion_point(destructor:service_layer.SLVrfNotif)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLVrfNotif::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLVrfNotif::ArenaDtor(void* object) {
  SLVrfNotif* _this = reinterpret_cast< SLVrfNotif* >(object);
  (void)_this;
}
void SLVrfNotif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLVrfNotif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLVrfNotif& SLVrfNotif::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLVrfNotif_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLVrfNotif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLVrfNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLVrfNotif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLVrfNotif.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLObjectOp Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::service_layer::SLObjectOp>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLVrfNotif::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLVrfNotif)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLVrfNotif.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // .service_layer.SLObjectOp Status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLVrfNotif)
  return target;
}

size_t SLVrfNotif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLVrfNotif)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 1;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLObjectOp Status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLVrfNotif::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLVrfNotif)
  GOOGLE_DCHECK_NE(&from, this);
  const SLVrfNotif* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLVrfNotif>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLVrfNotif)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLVrfNotif)
    MergeFrom(*source);
  }
}

void SLVrfNotif::MergeFrom(const SLVrfNotif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLVrfNotif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SLVrfNotif::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLVrfNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLVrfNotif::CopyFrom(const SLVrfNotif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLVrfNotif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLVrfNotif::IsInitialized() const {
  return true;
}

void SLVrfNotif::InternalSwap(SLVrfNotif* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLVrfNotif::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRouteCommon::InitAsDefaultInstance() {
}
class SLRouteCommon::_Internal {
 public:
};

SLRouteCommon::SLRouteCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRouteCommon)
}
SLRouteCommon::SLRouteCommon(const SLRouteCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcproto().empty()) {
    srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcproto(),
      GetArena());
  }
  srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcprototag().empty()) {
    srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcprototag(),
      GetArena());
  }
  ::memcpy(&admindistance_, &from.admindistance_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&admindistance_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRouteCommon)
}

void SLRouteCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRouteCommon_sl_5froute_5fcommon_2eproto.base);
  srcproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcprototag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&admindistance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&admindistance_)) + sizeof(flags_));
}

SLRouteCommon::~SLRouteCommon() {
  // @@protoc_insertion_point(destructor:service_layer.SLRouteCommon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRouteCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcproto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcprototag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLRouteCommon::ArenaDtor(void* object) {
  SLRouteCommon* _this = reinterpret_cast< SLRouteCommon* >(object);
  (void)_this;
}
void SLRouteCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRouteCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRouteCommon& SLRouteCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRouteCommon_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRouteCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRouteCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcproto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcprototag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&admindistance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&admindistance_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRouteCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 AdminDistance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          admindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LocalLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locallabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SrcProto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_srcproto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteCommon.SrcProto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SrcProtoTag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_srcprototag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRouteCommon.SrcProtoTag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRouteCommon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRouteCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AdminDistance = 1;
  if (this->admindistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_admindistance(), target);
  }

  // uint32 LocalLabel = 2;
  if (this->locallabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locallabel(), target);
  }

  // uint32 Tag = 3;
  if (this->tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tag(), target);
  }

  // string SrcProto = 4;
  if (this->srcproto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcproto().data(), static_cast<int>(this->_internal_srcproto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteCommon.SrcProto");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_srcproto(), target);
  }

  // string SrcProtoTag = 5;
  if (this->srcprototag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcprototag().data(), static_cast<int>(this->_internal_srcprototag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRouteCommon.SrcProtoTag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_srcprototag(), target);
  }

  // uint32 Flags = 6;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRouteCommon)
  return target;
}

size_t SLRouteCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRouteCommon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcProto = 4;
  if (this->srcproto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcproto());
  }

  // string SrcProtoTag = 5;
  if (this->srcprototag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcprototag());
  }

  // uint32 AdminDistance = 1;
  if (this->admindistance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admindistance());
  }

  // uint32 LocalLabel = 2;
  if (this->locallabel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_locallabel());
  }

  // uint32 Tag = 3;
  if (this->tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tag());
  }

  // uint32 Flags = 6;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRouteCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRouteCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRouteCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRouteCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRouteCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRouteCommon)
    MergeFrom(*source);
  }
}

void SLRouteCommon::MergeFrom(const SLRouteCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRouteCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcproto().size() > 0) {
    _internal_set_srcproto(from._internal_srcproto());
  }
  if (from.srcprototag().size() > 0) {
    _internal_set_srcprototag(from._internal_srcprototag());
  }
  if (from.admindistance() != 0) {
    _internal_set_admindistance(from._internal_admindistance());
  }
  if (from.locallabel() != 0) {
    _internal_set_locallabel(from._internal_locallabel());
  }
  if (from.tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void SLRouteCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRouteCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRouteCommon::CopyFrom(const SLRouteCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRouteCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRouteCommon::IsInitialized() const {
  return true;
}

void SLRouteCommon::InternalSwap(SLRouteCommon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  srcproto_.Swap(&other->srcproto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcprototag_.Swap(&other->srcprototag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRouteCommon, flags_)
      + sizeof(SLRouteCommon::flags_)
      - PROTOBUF_FIELD_OFFSET(SLRouteCommon, admindistance_)>(
          reinterpret_cast<char*>(&admindistance_),
          reinterpret_cast<char*>(&other->admindistance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRouteCommon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLRoutePath::InitAsDefaultInstance() {
  ::service_layer::_SLRoutePath_default_instance_._instance.get_mutable()->nexthopaddress_ = const_cast< ::service_layer::SLIpAddress*>(
      ::service_layer::SLIpAddress::internal_default_instance());
  ::service_layer::_SLRoutePath_default_instance_._instance.get_mutable()->nexthopinterface_ = const_cast< ::service_layer::SLInterface*>(
      ::service_layer::SLInterface::internal_default_instance());
}
class SLRoutePath::_Internal {
 public:
  static const ::service_layer::SLIpAddress& nexthopaddress(const SLRoutePath* msg);
  static const ::service_layer::SLInterface& nexthopinterface(const SLRoutePath* msg);
};

const ::service_layer::SLIpAddress&
SLRoutePath::_Internal::nexthopaddress(const SLRoutePath* msg) {
  return *msg->nexthopaddress_;
}
const ::service_layer::SLInterface&
SLRoutePath::_Internal::nexthopinterface(const SLRoutePath* msg) {
  return *msg->nexthopinterface_;
}
void SLRoutePath::clear_nexthopaddress() {
  if (GetArena() == nullptr && nexthopaddress_ != nullptr) {
    delete nexthopaddress_;
  }
  nexthopaddress_ = nullptr;
}
void SLRoutePath::clear_nexthopinterface() {
  if (GetArena() == nullptr && nexthopinterface_ != nullptr) {
    delete nexthopinterface_;
  }
  nexthopinterface_ = nullptr;
}
void SLRoutePath::clear_remoteaddress() {
  remoteaddress_.Clear();
}
SLRoutePath::SLRoutePath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  protectedpathbitmap_(arena),
  labelstack_(arena),
  remoteaddress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutePath)
}
SLRoutePath::SLRoutePath(const SLRoutePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protectedpathbitmap_(from.protectedpathbitmap_),
      labelstack_(from.labelstack_),
      remoteaddress_(from.remoteaddress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vrfname(),
      GetArena());
  }
  vteproutermacaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vteproutermacaddress().empty()) {
    vteproutermacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vteproutermacaddress(),
      GetArena());
  }
  if (from._internal_has_nexthopaddress()) {
    nexthopaddress_ = new ::service_layer::SLIpAddress(*from.nexthopaddress_);
  } else {
    nexthopaddress_ = nullptr;
  }
  if (from._internal_has_nexthopinterface()) {
    nexthopinterface_ = new ::service_layer::SLInterface(*from.nexthopinterface_);
  } else {
    nexthopinterface_ = nullptr;
  }
  ::memcpy(&loadmetric_, &from.loadmetric_,
    static_cast<size_t>(reinterpret_cast<char*>(&encaptype_) -
    reinterpret_cast<char*>(&loadmetric_)) + sizeof(encaptype_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutePath)
}

void SLRoutePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLRoutePath_sl_5froute_5fcommon_2eproto.base);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vteproutermacaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nexthopaddress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encaptype_) -
      reinterpret_cast<char*>(&nexthopaddress_)) + sizeof(encaptype_));
}

SLRoutePath::~SLRoutePath() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutePath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLRoutePath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vteproutermacaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nexthopaddress_;
  if (this != internal_default_instance()) delete nexthopinterface_;
}

void SLRoutePath::ArenaDtor(void* object) {
  SLRoutePath* _this = reinterpret_cast< SLRoutePath* >(object);
  (void)_this;
}
void SLRoutePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLRoutePath& SLRoutePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLRoutePath_sl_5froute_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void SLRoutePath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protectedpathbitmap_.Clear();
  labelstack_.Clear();
  remoteaddress_.Clear();
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vteproutermacaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && nexthopaddress_ != nullptr) {
    delete nexthopaddress_;
  }
  nexthopaddress_ = nullptr;
  if (GetArena() == nullptr && nexthopinterface_ != nullptr) {
    delete nexthopinterface_;
  }
  nexthopinterface_ = nullptr;
  ::memset(&loadmetric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encaptype_) -
      reinterpret_cast<char*>(&loadmetric_)) + sizeof(encaptype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service_layer.SLIpAddress NexthopAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .service_layer.SLInterface NexthopInterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthopinterface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LoadMetric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          loadmetric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VrfName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRoutePath.VrfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PathId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pathid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 ProtectedPathBitmap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_protectedpathbitmap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 LabelStack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labelstack(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_labelstack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .service_layer.SLIpAddress RemoteAddress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remoteaddress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .service_layer.SLEncapType EncapType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encaptype(static_cast<::service_layer::SLEncapType>(val));
        } else goto handle_unusual;
        continue;
      // bytes VtepRouterMacAddress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_vteproutermacaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLRoutePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nexthopaddress(this), target, stream);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nexthopinterface(this), target, stream);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_loadmetric(), target);
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRoutePath.VrfName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vrfname(), target);
  }

  // uint32 Metric = 5;
  if (this->metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_metric(), target);
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pathid(), target);
  }

  // repeated uint64 ProtectedPathBitmap = 7;
  {
    int byte_size = _protectedpathbitmap_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_protectedpathbitmap(), byte_size, target);
    }
  }

  // repeated uint32 LabelStack = 8;
  {
    int byte_size = _labelstack_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_labelstack(), byte_size, target);
    }
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remoteaddress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_remoteaddress(i), target, stream);
  }

  // .service_layer.SLEncapType EncapType = 10;
  if (this->encaptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_encaptype(), target);
  }

  // bytes VtepRouterMacAddress = 11;
  if (this->vteproutermacaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_vteproutermacaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutePath)
  return target;
}

size_t SLRoutePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ProtectedPathBitmap = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->protectedpathbitmap_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _protectedpathbitmap_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 LabelStack = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labelstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labelstack_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  total_size += 1UL * this->_internal_remoteaddress_size();
  for (const auto& msg : this->remoteaddress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 4;
  if (this->vrfname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // bytes VtepRouterMacAddress = 11;
  if (this->vteproutermacaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vteproutermacaddress());
  }

  // .service_layer.SLIpAddress NexthopAddress = 1;
  if (this->has_nexthopaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopaddress_);
  }

  // .service_layer.SLInterface NexthopInterface = 2;
  if (this->has_nexthopinterface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthopinterface_);
  }

  // uint32 LoadMetric = 3;
  if (this->loadmetric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loadmetric());
  }

  // uint32 Metric = 5;
  if (this->metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_metric());
  }

  // uint32 PathId = 6;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pathid());
  }

  // .service_layer.SLEncapType EncapType = 10;
  if (this->encaptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encaptype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLRoutePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service_layer.SLRoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  const SLRoutePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLRoutePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service_layer.SLRoutePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service_layer.SLRoutePath)
    MergeFrom(*source);
  }
}

void SLRoutePath::MergeFrom(const SLRoutePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protectedpathbitmap_.MergeFrom(from.protectedpathbitmap_);
  labelstack_.MergeFrom(from.labelstack_);
  remoteaddress_.MergeFrom(from.remoteaddress_);
  if (from.vrfname().size() > 0) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from.vteproutermacaddress().size() > 0) {
    _internal_set_vteproutermacaddress(from._internal_vteproutermacaddress());
  }
  if (from.has_nexthopaddress()) {
    _internal_mutable_nexthopaddress()->::service_layer::SLIpAddress::MergeFrom(from._internal_nexthopaddress());
  }
  if (from.has_nexthopinterface()) {
    _internal_mutable_nexthopinterface()->::service_layer::SLInterface::MergeFrom(from._internal_nexthopinterface());
  }
  if (from.loadmetric() != 0) {
    _internal_set_loadmetric(from._internal_loadmetric());
  }
  if (from.metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  if (from.pathid() != 0) {
    _internal_set_pathid(from._internal_pathid());
  }
  if (from.encaptype() != 0) {
    _internal_set_encaptype(from._internal_encaptype());
  }
}

void SLRoutePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service_layer.SLRoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLRoutePath::CopyFrom(const SLRoutePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutePath::IsInitialized() const {
  return true;
}

void SLRoutePath::InternalSwap(SLRoutePath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protectedpathbitmap_.InternalSwap(&other->protectedpathbitmap_);
  labelstack_.InternalSwap(&other->labelstack_);
  remoteaddress_.InternalSwap(&other->remoteaddress_);
  vrfname_.Swap(&other->vrfname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vteproutermacaddress_.Swap(&other->vteproutermacaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutePath, encaptype_)
      + sizeof(SLRoutePath::encaptype_)
      - PROTOBUF_FIELD_OFFSET(SLRoutePath, nexthopaddress_)>(
          reinterpret_cast<char*>(&nexthopaddress_),
          reinterpret_cast<char*>(&other->nexthopaddress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutePath::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteGlobalsGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLRouteGlobalsGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteGlobalsGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteGlobalsGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLRouteGlobalsGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteGlobalsGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteGlobalStatsGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLRouteGlobalStatsGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteGlobalStatsGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteGlobalStatsGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLRouteGlobalStatsGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteGlobalStatsGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfReg* Arena::CreateMaybeMessage< ::service_layer::SLVrfReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfReg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfRegMsg* Arena::CreateMaybeMessage< ::service_layer::SLVrfRegMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfRegMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfRegMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLVrfRegMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfRegMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfRegMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLVrfRegMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfRegMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfRegGetMsg* Arena::CreateMaybeMessage< ::service_layer::SLVrfRegGetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfRegGetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfRegGetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLVrfRegGetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfRegGetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVRFGetStatsMsgRes* Arena::CreateMaybeMessage< ::service_layer::SLVRFGetStatsMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVRFGetStatsMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVRFGetStatsMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLVRFGetStatsMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVRFGetStatsMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteGetNotifMsg* Arena::CreateMaybeMessage< ::service_layer::SLRouteGetNotifMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteGetNotifMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteNotifStatus* Arena::CreateMaybeMessage< ::service_layer::SLRouteNotifStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteNotifStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteNotifMarker* Arena::CreateMaybeMessage< ::service_layer::SLRouteNotifMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteNotifMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLVrfNotif* Arena::CreateMaybeMessage< ::service_layer::SLVrfNotif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLVrfNotif >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRouteCommon* Arena::CreateMaybeMessage< ::service_layer::SLRouteCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRouteCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutePath* Arena::CreateMaybeMessage< ::service_layer::SLRoutePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutePath >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
