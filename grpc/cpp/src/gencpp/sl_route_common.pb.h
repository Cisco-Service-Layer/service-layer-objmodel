// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_route_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5froute_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5froute_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5froute_5fcommon_2eproto;
namespace service_layer {
class SLRouteCommon;
class SLRouteCommonDefaultTypeInternal;
extern SLRouteCommonDefaultTypeInternal _SLRouteCommon_default_instance_;
class SLRouteGetNotifMsg;
class SLRouteGetNotifMsgDefaultTypeInternal;
extern SLRouteGetNotifMsgDefaultTypeInternal _SLRouteGetNotifMsg_default_instance_;
class SLRouteGlobalStatsGetMsg;
class SLRouteGlobalStatsGetMsgDefaultTypeInternal;
extern SLRouteGlobalStatsGetMsgDefaultTypeInternal _SLRouteGlobalStatsGetMsg_default_instance_;
class SLRouteGlobalStatsGetMsgRsp;
class SLRouteGlobalStatsGetMsgRspDefaultTypeInternal;
extern SLRouteGlobalStatsGetMsgRspDefaultTypeInternal _SLRouteGlobalStatsGetMsgRsp_default_instance_;
class SLRouteGlobalsGetMsg;
class SLRouteGlobalsGetMsgDefaultTypeInternal;
extern SLRouteGlobalsGetMsgDefaultTypeInternal _SLRouteGlobalsGetMsg_default_instance_;
class SLRouteGlobalsGetMsgRsp;
class SLRouteGlobalsGetMsgRspDefaultTypeInternal;
extern SLRouteGlobalsGetMsgRspDefaultTypeInternal _SLRouteGlobalsGetMsgRsp_default_instance_;
class SLRouteNotifMarker;
class SLRouteNotifMarkerDefaultTypeInternal;
extern SLRouteNotifMarkerDefaultTypeInternal _SLRouteNotifMarker_default_instance_;
class SLRouteNotifStatus;
class SLRouteNotifStatusDefaultTypeInternal;
extern SLRouteNotifStatusDefaultTypeInternal _SLRouteNotifStatus_default_instance_;
class SLRoutePath;
class SLRoutePathDefaultTypeInternal;
extern SLRoutePathDefaultTypeInternal _SLRoutePath_default_instance_;
class SLVRFGetStatsMsgRes;
class SLVRFGetStatsMsgResDefaultTypeInternal;
extern SLVRFGetStatsMsgResDefaultTypeInternal _SLVRFGetStatsMsgRes_default_instance_;
class SLVRFGetStatsMsgRsp;
class SLVRFGetStatsMsgRspDefaultTypeInternal;
extern SLVRFGetStatsMsgRspDefaultTypeInternal _SLVRFGetStatsMsgRsp_default_instance_;
class SLVrfNotif;
class SLVrfNotifDefaultTypeInternal;
extern SLVrfNotifDefaultTypeInternal _SLVrfNotif_default_instance_;
class SLVrfReg;
class SLVrfRegDefaultTypeInternal;
extern SLVrfRegDefaultTypeInternal _SLVrfReg_default_instance_;
class SLVrfRegGetMsg;
class SLVrfRegGetMsgDefaultTypeInternal;
extern SLVrfRegGetMsgDefaultTypeInternal _SLVrfRegGetMsg_default_instance_;
class SLVrfRegGetMsgRsp;
class SLVrfRegGetMsgRspDefaultTypeInternal;
extern SLVrfRegGetMsgRspDefaultTypeInternal _SLVrfRegGetMsgRsp_default_instance_;
class SLVrfRegMsg;
class SLVrfRegMsgDefaultTypeInternal;
extern SLVrfRegMsgDefaultTypeInternal _SLVrfRegMsg_default_instance_;
class SLVrfRegMsgRes;
class SLVrfRegMsgResDefaultTypeInternal;
extern SLVrfRegMsgResDefaultTypeInternal _SLVrfRegMsgRes_default_instance_;
class SLVrfRegMsgRsp;
class SLVrfRegMsgRspDefaultTypeInternal;
extern SLVrfRegMsgRspDefaultTypeInternal _SLVrfRegMsgRsp_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLRouteCommon* Arena::CreateMaybeMessage<::service_layer::SLRouteCommon>(Arena*);
template<> ::service_layer::SLRouteGetNotifMsg* Arena::CreateMaybeMessage<::service_layer::SLRouteGetNotifMsg>(Arena*);
template<> ::service_layer::SLRouteGlobalStatsGetMsg* Arena::CreateMaybeMessage<::service_layer::SLRouteGlobalStatsGetMsg>(Arena*);
template<> ::service_layer::SLRouteGlobalStatsGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLRouteGlobalStatsGetMsgRsp>(Arena*);
template<> ::service_layer::SLRouteGlobalsGetMsg* Arena::CreateMaybeMessage<::service_layer::SLRouteGlobalsGetMsg>(Arena*);
template<> ::service_layer::SLRouteGlobalsGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLRouteGlobalsGetMsgRsp>(Arena*);
template<> ::service_layer::SLRouteNotifMarker* Arena::CreateMaybeMessage<::service_layer::SLRouteNotifMarker>(Arena*);
template<> ::service_layer::SLRouteNotifStatus* Arena::CreateMaybeMessage<::service_layer::SLRouteNotifStatus>(Arena*);
template<> ::service_layer::SLRoutePath* Arena::CreateMaybeMessage<::service_layer::SLRoutePath>(Arena*);
template<> ::service_layer::SLVRFGetStatsMsgRes* Arena::CreateMaybeMessage<::service_layer::SLVRFGetStatsMsgRes>(Arena*);
template<> ::service_layer::SLVRFGetStatsMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLVRFGetStatsMsgRsp>(Arena*);
template<> ::service_layer::SLVrfNotif* Arena::CreateMaybeMessage<::service_layer::SLVrfNotif>(Arena*);
template<> ::service_layer::SLVrfReg* Arena::CreateMaybeMessage<::service_layer::SLVrfReg>(Arena*);
template<> ::service_layer::SLVrfRegGetMsg* Arena::CreateMaybeMessage<::service_layer::SLVrfRegGetMsg>(Arena*);
template<> ::service_layer::SLVrfRegGetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLVrfRegGetMsgRsp>(Arena*);
template<> ::service_layer::SLVrfRegMsg* Arena::CreateMaybeMessage<::service_layer::SLVrfRegMsg>(Arena*);
template<> ::service_layer::SLVrfRegMsgRes* Arena::CreateMaybeMessage<::service_layer::SLVrfRegMsgRes>(Arena*);
template<> ::service_layer::SLVrfRegMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLVrfRegMsgRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLNotifType : int {
  SL_EVENT_TYPE_RESERVED = 0,
  SL_EVENT_TYPE_ERROR = 1,
  SL_EVENT_TYPE_STATUS = 2,
  SL_EVENT_TYPE_ROUTE = 3,
  SL_EVENT_TYPE_START_MARKER = 4,
  SL_EVENT_TYPE_END_MARKER = 5,
  SL_EVENT_TYPE_VRF = 6,
  SLNotifType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SLNotifType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SLNotifType_IsValid(int value);
constexpr SLNotifType SLNotifType_MIN = SL_EVENT_TYPE_RESERVED;
constexpr SLNotifType SLNotifType_MAX = SL_EVENT_TYPE_VRF;
constexpr int SLNotifType_ARRAYSIZE = SLNotifType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLNotifType_descriptor();
template<typename T>
inline const std::string& SLNotifType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLNotifType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLNotifType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLNotifType_descriptor(), enum_t_value);
}
inline bool SLNotifType_Parse(
    const std::string& name, SLNotifType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLNotifType>(
    SLNotifType_descriptor(), name, value);
}
// ===================================================================

class SLRouteGlobalsGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteGlobalsGetMsg) */ {
 public:
  inline SLRouteGlobalsGetMsg() : SLRouteGlobalsGetMsg(nullptr) {};
  virtual ~SLRouteGlobalsGetMsg();

  SLRouteGlobalsGetMsg(const SLRouteGlobalsGetMsg& from);
  SLRouteGlobalsGetMsg(SLRouteGlobalsGetMsg&& from) noexcept
    : SLRouteGlobalsGetMsg() {
    *this = ::std::move(from);
  }

  inline SLRouteGlobalsGetMsg& operator=(const SLRouteGlobalsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteGlobalsGetMsg& operator=(SLRouteGlobalsGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteGlobalsGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteGlobalsGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLRouteGlobalsGetMsg*>(
               &_SLRouteGlobalsGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLRouteGlobalsGetMsg& a, SLRouteGlobalsGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteGlobalsGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteGlobalsGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteGlobalsGetMsg* New() const final {
    return CreateMaybeMessage<SLRouteGlobalsGetMsg>(nullptr);
  }

  SLRouteGlobalsGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteGlobalsGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteGlobalsGetMsg& from);
  void MergeFrom(const SLRouteGlobalsGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteGlobalsGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteGlobalsGetMsg";
  }
  protected:
  explicit SLRouteGlobalsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteGlobalsGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteGlobalsGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteGlobalsGetMsgRsp) */ {
 public:
  inline SLRouteGlobalsGetMsgRsp() : SLRouteGlobalsGetMsgRsp(nullptr) {};
  virtual ~SLRouteGlobalsGetMsgRsp();

  SLRouteGlobalsGetMsgRsp(const SLRouteGlobalsGetMsgRsp& from);
  SLRouteGlobalsGetMsgRsp(SLRouteGlobalsGetMsgRsp&& from) noexcept
    : SLRouteGlobalsGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLRouteGlobalsGetMsgRsp& operator=(const SLRouteGlobalsGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteGlobalsGetMsgRsp& operator=(SLRouteGlobalsGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteGlobalsGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteGlobalsGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLRouteGlobalsGetMsgRsp*>(
               &_SLRouteGlobalsGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLRouteGlobalsGetMsgRsp& a, SLRouteGlobalsGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteGlobalsGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteGlobalsGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteGlobalsGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLRouteGlobalsGetMsgRsp>(nullptr);
  }

  SLRouteGlobalsGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteGlobalsGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteGlobalsGetMsgRsp& from);
  void MergeFrom(const SLRouteGlobalsGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteGlobalsGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteGlobalsGetMsgRsp";
  }
  protected:
  explicit SLRouteGlobalsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kMaxVrfregPerVrfregmsgFieldNumber = 2,
    kMaxRoutePerRoutemsgFieldNumber = 3,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 MaxVrfregPerVrfregmsg = 2;
  void clear_maxvrfregpervrfregmsg();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxvrfregpervrfregmsg() const;
  void set_maxvrfregpervrfregmsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxvrfregpervrfregmsg() const;
  void _internal_set_maxvrfregpervrfregmsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxRoutePerRoutemsg = 3;
  void clear_maxrouteperroutemsg();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrouteperroutemsg() const;
  void set_maxrouteperroutemsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxrouteperroutemsg() const;
  void _internal_set_maxrouteperroutemsg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteGlobalsGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxvrfregpervrfregmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrouteperroutemsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteGlobalStatsGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteGlobalStatsGetMsg) */ {
 public:
  inline SLRouteGlobalStatsGetMsg() : SLRouteGlobalStatsGetMsg(nullptr) {};
  virtual ~SLRouteGlobalStatsGetMsg();

  SLRouteGlobalStatsGetMsg(const SLRouteGlobalStatsGetMsg& from);
  SLRouteGlobalStatsGetMsg(SLRouteGlobalStatsGetMsg&& from) noexcept
    : SLRouteGlobalStatsGetMsg() {
    *this = ::std::move(from);
  }

  inline SLRouteGlobalStatsGetMsg& operator=(const SLRouteGlobalStatsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteGlobalStatsGetMsg& operator=(SLRouteGlobalStatsGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteGlobalStatsGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteGlobalStatsGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLRouteGlobalStatsGetMsg*>(
               &_SLRouteGlobalStatsGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLRouteGlobalStatsGetMsg& a, SLRouteGlobalStatsGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteGlobalStatsGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteGlobalStatsGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteGlobalStatsGetMsg* New() const final {
    return CreateMaybeMessage<SLRouteGlobalStatsGetMsg>(nullptr);
  }

  SLRouteGlobalStatsGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteGlobalStatsGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteGlobalStatsGetMsg& from);
  void MergeFrom(const SLRouteGlobalStatsGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteGlobalStatsGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteGlobalStatsGetMsg";
  }
  protected:
  explicit SLRouteGlobalStatsGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteGlobalStatsGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteGlobalStatsGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteGlobalStatsGetMsgRsp) */ {
 public:
  inline SLRouteGlobalStatsGetMsgRsp() : SLRouteGlobalStatsGetMsgRsp(nullptr) {};
  virtual ~SLRouteGlobalStatsGetMsgRsp();

  SLRouteGlobalStatsGetMsgRsp(const SLRouteGlobalStatsGetMsgRsp& from);
  SLRouteGlobalStatsGetMsgRsp(SLRouteGlobalStatsGetMsgRsp&& from) noexcept
    : SLRouteGlobalStatsGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLRouteGlobalStatsGetMsgRsp& operator=(const SLRouteGlobalStatsGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteGlobalStatsGetMsgRsp& operator=(SLRouteGlobalStatsGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteGlobalStatsGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteGlobalStatsGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLRouteGlobalStatsGetMsgRsp*>(
               &_SLRouteGlobalStatsGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLRouteGlobalStatsGetMsgRsp& a, SLRouteGlobalStatsGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteGlobalStatsGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteGlobalStatsGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteGlobalStatsGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLRouteGlobalStatsGetMsgRsp>(nullptr);
  }

  SLRouteGlobalStatsGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteGlobalStatsGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteGlobalStatsGetMsgRsp& from);
  void MergeFrom(const SLRouteGlobalStatsGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteGlobalStatsGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteGlobalStatsGetMsgRsp";
  }
  protected:
  explicit SLRouteGlobalStatsGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kVrfCountFieldNumber = 2,
    kRouteCountFieldNumber = 3,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 VrfCount = 2;
  void clear_vrfcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 vrfcount() const;
  void set_vrfcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vrfcount() const;
  void _internal_set_vrfcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 RouteCount = 3;
  void clear_routecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 routecount() const;
  void set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_routecount() const;
  void _internal_set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteGlobalStatsGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vrfcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfReg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfReg) */ {
 public:
  inline SLVrfReg() : SLVrfReg(nullptr) {};
  virtual ~SLVrfReg();

  SLVrfReg(const SLVrfReg& from);
  SLVrfReg(SLVrfReg&& from) noexcept
    : SLVrfReg() {
    *this = ::std::move(from);
  }

  inline SLVrfReg& operator=(const SLVrfReg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfReg& operator=(SLVrfReg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfReg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfReg* internal_default_instance() {
    return reinterpret_cast<const SLVrfReg*>(
               &_SLVrfReg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLVrfReg& a, SLVrfReg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfReg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfReg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfReg* New() const final {
    return CreateMaybeMessage<SLVrfReg>(nullptr);
  }

  SLVrfReg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfReg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfReg& from);
  void MergeFrom(const SLVrfReg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfReg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfReg";
  }
  protected:
  explicit SLVrfReg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
    kAdminDistanceFieldNumber = 2,
    kVrfPurgeIntervalSecondsFieldNumber = 3,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // uint32 AdminDistance = 2;
  void clear_admindistance();
  ::PROTOBUF_NAMESPACE_ID::uint32 admindistance() const;
  void set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admindistance() const;
  void _internal_set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 VrfPurgeIntervalSeconds = 3;
  void clear_vrfpurgeintervalseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 vrfpurgeintervalseconds() const;
  void set_vrfpurgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vrfpurgeintervalseconds() const;
  void _internal_set_vrfpurgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfReg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admindistance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vrfpurgeintervalseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfRegMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfRegMsg) */ {
 public:
  inline SLVrfRegMsg() : SLVrfRegMsg(nullptr) {};
  virtual ~SLVrfRegMsg();

  SLVrfRegMsg(const SLVrfRegMsg& from);
  SLVrfRegMsg(SLVrfRegMsg&& from) noexcept
    : SLVrfRegMsg() {
    *this = ::std::move(from);
  }

  inline SLVrfRegMsg& operator=(const SLVrfRegMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfRegMsg& operator=(SLVrfRegMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfRegMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfRegMsg* internal_default_instance() {
    return reinterpret_cast<const SLVrfRegMsg*>(
               &_SLVrfRegMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLVrfRegMsg& a, SLVrfRegMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfRegMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfRegMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfRegMsg* New() const final {
    return CreateMaybeMessage<SLVrfRegMsg>(nullptr);
  }

  SLVrfRegMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfRegMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfRegMsg& from);
  void MergeFrom(const SLVrfRegMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfRegMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfRegMsg";
  }
  protected:
  explicit SLVrfRegMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfRegMsgsFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLVrfReg VrfRegMsgs = 2;
  int vrfregmsgs_size() const;
  private:
  int _internal_vrfregmsgs_size() const;
  public:
  void clear_vrfregmsgs();
  ::service_layer::SLVrfReg* mutable_vrfregmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >*
      mutable_vrfregmsgs();
  private:
  const ::service_layer::SLVrfReg& _internal_vrfregmsgs(int index) const;
  ::service_layer::SLVrfReg* _internal_add_vrfregmsgs();
  public:
  const ::service_layer::SLVrfReg& vrfregmsgs(int index) const;
  ::service_layer::SLVrfReg* add_vrfregmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >&
      vrfregmsgs() const;

  // .service_layer.SLRegOp Oper = 1;
  void clear_oper();
  ::service_layer::SLRegOp oper() const;
  void set_oper(::service_layer::SLRegOp value);
  private:
  ::service_layer::SLRegOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLRegOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfRegMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg > vrfregmsgs_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfRegMsgRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfRegMsgRes) */ {
 public:
  inline SLVrfRegMsgRes() : SLVrfRegMsgRes(nullptr) {};
  virtual ~SLVrfRegMsgRes();

  SLVrfRegMsgRes(const SLVrfRegMsgRes& from);
  SLVrfRegMsgRes(SLVrfRegMsgRes&& from) noexcept
    : SLVrfRegMsgRes() {
    *this = ::std::move(from);
  }

  inline SLVrfRegMsgRes& operator=(const SLVrfRegMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfRegMsgRes& operator=(SLVrfRegMsgRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfRegMsgRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfRegMsgRes* internal_default_instance() {
    return reinterpret_cast<const SLVrfRegMsgRes*>(
               &_SLVrfRegMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLVrfRegMsgRes& a, SLVrfRegMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfRegMsgRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfRegMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfRegMsgRes* New() const final {
    return CreateMaybeMessage<SLVrfRegMsgRes>(nullptr);
  }

  SLVrfRegMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfRegMsgRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfRegMsgRes& from);
  void MergeFrom(const SLVrfRegMsgRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfRegMsgRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfRegMsgRes";
  }
  protected:
  explicit SLVrfRegMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kErrStatusFieldNumber = 1,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfRegMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* errstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfRegMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfRegMsgRsp) */ {
 public:
  inline SLVrfRegMsgRsp() : SLVrfRegMsgRsp(nullptr) {};
  virtual ~SLVrfRegMsgRsp();

  SLVrfRegMsgRsp(const SLVrfRegMsgRsp& from);
  SLVrfRegMsgRsp(SLVrfRegMsgRsp&& from) noexcept
    : SLVrfRegMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLVrfRegMsgRsp& operator=(const SLVrfRegMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfRegMsgRsp& operator=(SLVrfRegMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfRegMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfRegMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLVrfRegMsgRsp*>(
               &_SLVrfRegMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLVrfRegMsgRsp& a, SLVrfRegMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfRegMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfRegMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfRegMsgRsp* New() const final {
    return CreateMaybeMessage<SLVrfRegMsgRsp>(nullptr);
  }

  SLVrfRegMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfRegMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfRegMsgRsp& from);
  void MergeFrom(const SLVrfRegMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfRegMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfRegMsgRsp";
  }
  protected:
  explicit SLVrfRegMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusSummaryFieldNumber = 1,
  };
  // repeated .service_layer.SLVrfRegMsgRes Results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLVrfRegMsgRes* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfRegMsgRes >*
      mutable_results();
  private:
  const ::service_layer::SLVrfRegMsgRes& _internal_results(int index) const;
  ::service_layer::SLVrfRegMsgRes* _internal_add_results();
  public:
  const ::service_layer::SLVrfRegMsgRes& results(int index) const;
  ::service_layer::SLVrfRegMsgRes* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfRegMsgRes >&
      results() const;

  // .service_layer.SLErrorStatus StatusSummary = 1;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfRegMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfRegMsgRes > results_;
  ::service_layer::SLErrorStatus* statussummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfRegGetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfRegGetMsg) */ {
 public:
  inline SLVrfRegGetMsg() : SLVrfRegGetMsg(nullptr) {};
  virtual ~SLVrfRegGetMsg();

  SLVrfRegGetMsg(const SLVrfRegGetMsg& from);
  SLVrfRegGetMsg(SLVrfRegGetMsg&& from) noexcept
    : SLVrfRegGetMsg() {
    *this = ::std::move(from);
  }

  inline SLVrfRegGetMsg& operator=(const SLVrfRegGetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfRegGetMsg& operator=(SLVrfRegGetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfRegGetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfRegGetMsg* internal_default_instance() {
    return reinterpret_cast<const SLVrfRegGetMsg*>(
               &_SLVrfRegGetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLVrfRegGetMsg& a, SLVrfRegGetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfRegGetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfRegGetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfRegGetMsg* New() const final {
    return CreateMaybeMessage<SLVrfRegGetMsg>(nullptr);
  }

  SLVrfRegGetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfRegGetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfRegGetMsg& from);
  void MergeFrom(const SLVrfRegGetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfRegGetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfRegGetMsg";
  }
  protected:
  explicit SLVrfRegGetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
    kEntriesCountFieldNumber = 2,
    kGetNextFieldNumber = 3,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // uint32 EntriesCount = 2;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 3;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfRegGetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfRegGetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfRegGetMsgRsp) */ {
 public:
  inline SLVrfRegGetMsgRsp() : SLVrfRegGetMsgRsp(nullptr) {};
  virtual ~SLVrfRegGetMsgRsp();

  SLVrfRegGetMsgRsp(const SLVrfRegGetMsgRsp& from);
  SLVrfRegGetMsgRsp(SLVrfRegGetMsgRsp&& from) noexcept
    : SLVrfRegGetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLVrfRegGetMsgRsp& operator=(const SLVrfRegGetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfRegGetMsgRsp& operator=(SLVrfRegGetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfRegGetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfRegGetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLVrfRegGetMsgRsp*>(
               &_SLVrfRegGetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLVrfRegGetMsgRsp& a, SLVrfRegGetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfRegGetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfRegGetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfRegGetMsgRsp* New() const final {
    return CreateMaybeMessage<SLVrfRegGetMsgRsp>(nullptr);
  }

  SLVrfRegGetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfRegGetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfRegGetMsgRsp& from);
  void MergeFrom(const SLVrfRegGetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfRegGetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfRegGetMsgRsp";
  }
  protected:
  explicit SLVrfRegGetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrStatusFieldNumber = 2,
    kEofFieldNumber = 1,
  };
  // repeated .service_layer.SLVrfReg Entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLVrfReg* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >*
      mutable_entries();
  private:
  const ::service_layer::SLVrfReg& _internal_entries(int index) const;
  ::service_layer::SLVrfReg* _internal_add_entries();
  public:
  const ::service_layer::SLVrfReg& entries(int index) const;
  ::service_layer::SLVrfReg* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // bool Eof = 1;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfRegGetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVRFGetStatsMsgRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVRFGetStatsMsgRes) */ {
 public:
  inline SLVRFGetStatsMsgRes() : SLVRFGetStatsMsgRes(nullptr) {};
  virtual ~SLVRFGetStatsMsgRes();

  SLVRFGetStatsMsgRes(const SLVRFGetStatsMsgRes& from);
  SLVRFGetStatsMsgRes(SLVRFGetStatsMsgRes&& from) noexcept
    : SLVRFGetStatsMsgRes() {
    *this = ::std::move(from);
  }

  inline SLVRFGetStatsMsgRes& operator=(const SLVRFGetStatsMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVRFGetStatsMsgRes& operator=(SLVRFGetStatsMsgRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVRFGetStatsMsgRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVRFGetStatsMsgRes* internal_default_instance() {
    return reinterpret_cast<const SLVRFGetStatsMsgRes*>(
               &_SLVRFGetStatsMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLVRFGetStatsMsgRes& a, SLVRFGetStatsMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVRFGetStatsMsgRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVRFGetStatsMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVRFGetStatsMsgRes* New() const final {
    return CreateMaybeMessage<SLVRFGetStatsMsgRes>(nullptr);
  }

  SLVRFGetStatsMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVRFGetStatsMsgRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVRFGetStatsMsgRes& from);
  void MergeFrom(const SLVRFGetStatsMsgRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVRFGetStatsMsgRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVRFGetStatsMsgRes";
  }
  protected:
  explicit SLVRFGetStatsMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
    kRouteCountFieldNumber = 2,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // uint32 RouteCount = 2;
  void clear_routecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 routecount() const;
  void set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_routecount() const;
  void _internal_set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVRFGetStatsMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVRFGetStatsMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVRFGetStatsMsgRsp) */ {
 public:
  inline SLVRFGetStatsMsgRsp() : SLVRFGetStatsMsgRsp(nullptr) {};
  virtual ~SLVRFGetStatsMsgRsp();

  SLVRFGetStatsMsgRsp(const SLVRFGetStatsMsgRsp& from);
  SLVRFGetStatsMsgRsp(SLVRFGetStatsMsgRsp&& from) noexcept
    : SLVRFGetStatsMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLVRFGetStatsMsgRsp& operator=(const SLVRFGetStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVRFGetStatsMsgRsp& operator=(SLVRFGetStatsMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVRFGetStatsMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVRFGetStatsMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLVRFGetStatsMsgRsp*>(
               &_SLVRFGetStatsMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SLVRFGetStatsMsgRsp& a, SLVRFGetStatsMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVRFGetStatsMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVRFGetStatsMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVRFGetStatsMsgRsp* New() const final {
    return CreateMaybeMessage<SLVRFGetStatsMsgRsp>(nullptr);
  }

  SLVRFGetStatsMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVRFGetStatsMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVRFGetStatsMsgRsp& from);
  void MergeFrom(const SLVRFGetStatsMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVRFGetStatsMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVRFGetStatsMsgRsp";
  }
  protected:
  explicit SLVRFGetStatsMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrStatusFieldNumber = 2,
    kEofFieldNumber = 1,
  };
  // repeated .service_layer.SLVRFGetStatsMsgRes Entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLVRFGetStatsMsgRes* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVRFGetStatsMsgRes >*
      mutable_entries();
  private:
  const ::service_layer::SLVRFGetStatsMsgRes& _internal_entries(int index) const;
  ::service_layer::SLVRFGetStatsMsgRes* _internal_add_entries();
  public:
  const ::service_layer::SLVRFGetStatsMsgRes& entries(int index) const;
  ::service_layer::SLVRFGetStatsMsgRes* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVRFGetStatsMsgRes >&
      entries() const;

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // bool Eof = 1;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVRFGetStatsMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVRFGetStatsMsgRes > entries_;
  ::service_layer::SLErrorStatus* errstatus_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteGetNotifMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteGetNotifMsg) */ {
 public:
  inline SLRouteGetNotifMsg() : SLRouteGetNotifMsg(nullptr) {};
  virtual ~SLRouteGetNotifMsg();

  SLRouteGetNotifMsg(const SLRouteGetNotifMsg& from);
  SLRouteGetNotifMsg(SLRouteGetNotifMsg&& from) noexcept
    : SLRouteGetNotifMsg() {
    *this = ::std::move(from);
  }

  inline SLRouteGetNotifMsg& operator=(const SLRouteGetNotifMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteGetNotifMsg& operator=(SLRouteGetNotifMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteGetNotifMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteGetNotifMsg* internal_default_instance() {
    return reinterpret_cast<const SLRouteGetNotifMsg*>(
               &_SLRouteGetNotifMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SLRouteGetNotifMsg& a, SLRouteGetNotifMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteGetNotifMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteGetNotifMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteGetNotifMsg* New() const final {
    return CreateMaybeMessage<SLRouteGetNotifMsg>(nullptr);
  }

  SLRouteGetNotifMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteGetNotifMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteGetNotifMsg& from);
  void MergeFrom(const SLRouteGetNotifMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteGetNotifMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteGetNotifMsg";
  }
  protected:
  explicit SLRouteGetNotifMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 3,
    kSrcProtoFieldNumber = 4,
    kSrcProtoTagFieldNumber = 5,
    kCorrelatorFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // string VrfName = 3;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // string SrcProto = 4;
  void clear_srcproto();
  const std::string& srcproto() const;
  void set_srcproto(const std::string& value);
  void set_srcproto(std::string&& value);
  void set_srcproto(const char* value);
  void set_srcproto(const char* value, size_t size);
  std::string* mutable_srcproto();
  std::string* release_srcproto();
  void set_allocated_srcproto(std::string* srcproto);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcproto();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcproto(
      std::string* srcproto);
  private:
  const std::string& _internal_srcproto() const;
  void _internal_set_srcproto(const std::string& value);
  std::string* _internal_mutable_srcproto();
  public:

  // string SrcProtoTag = 5;
  void clear_srcprototag();
  const std::string& srcprototag() const;
  void set_srcprototag(const std::string& value);
  void set_srcprototag(std::string&& value);
  void set_srcprototag(const char* value);
  void set_srcprototag(const char* value, size_t size);
  std::string* mutable_srcprototag();
  std::string* release_srcprototag();
  void set_allocated_srcprototag(std::string* srcprototag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcprototag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcprototag(
      std::string* srcprototag);
  private:
  const std::string& _internal_srcprototag() const;
  void _internal_set_srcprototag(const std::string& value);
  std::string* _internal_mutable_srcprototag();
  public:

  // uint64 Correlator = 2;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .service_layer.SLNotifOp Oper = 1;
  void clear_oper();
  ::service_layer::SLNotifOp oper() const;
  void set_oper(::service_layer::SLNotifOp value);
  private:
  ::service_layer::SLNotifOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLNotifOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteGetNotifMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcproto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcprototag_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteNotifStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteNotifStatus) */ {
 public:
  inline SLRouteNotifStatus() : SLRouteNotifStatus(nullptr) {};
  virtual ~SLRouteNotifStatus();

  SLRouteNotifStatus(const SLRouteNotifStatus& from);
  SLRouteNotifStatus(SLRouteNotifStatus&& from) noexcept
    : SLRouteNotifStatus() {
    *this = ::std::move(from);
  }

  inline SLRouteNotifStatus& operator=(const SLRouteNotifStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteNotifStatus& operator=(SLRouteNotifStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteNotifStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteNotifStatus* internal_default_instance() {
    return reinterpret_cast<const SLRouteNotifStatus*>(
               &_SLRouteNotifStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SLRouteNotifStatus& a, SLRouteNotifStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteNotifStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteNotifStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteNotifStatus* New() const final {
    return CreateMaybeMessage<SLRouteNotifStatus>(nullptr);
  }

  SLRouteNotifStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteNotifStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteNotifStatus& from);
  void MergeFrom(const SLRouteNotifStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteNotifStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteNotifStatus";
  }
  protected:
  explicit SLRouteNotifStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kNotifStatusFieldNumber = 3,
    kCorrelatorFieldNumber = 1,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus NotifStatus = 3;
  bool has_notifstatus() const;
  private:
  bool _internal_has_notifstatus() const;
  public:
  void clear_notifstatus();
  const ::service_layer::SLErrorStatus& notifstatus() const;
  ::service_layer::SLErrorStatus* release_notifstatus();
  ::service_layer::SLErrorStatus* mutable_notifstatus();
  void set_allocated_notifstatus(::service_layer::SLErrorStatus* notifstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_notifstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_notifstatus();
  public:
  void unsafe_arena_set_allocated_notifstatus(
      ::service_layer::SLErrorStatus* notifstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_notifstatus();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteNotifStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* notifstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteNotifMarker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteNotifMarker) */ {
 public:
  inline SLRouteNotifMarker() : SLRouteNotifMarker(nullptr) {};
  virtual ~SLRouteNotifMarker();

  SLRouteNotifMarker(const SLRouteNotifMarker& from);
  SLRouteNotifMarker(SLRouteNotifMarker&& from) noexcept
    : SLRouteNotifMarker() {
    *this = ::std::move(from);
  }

  inline SLRouteNotifMarker& operator=(const SLRouteNotifMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteNotifMarker& operator=(SLRouteNotifMarker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteNotifMarker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteNotifMarker* internal_default_instance() {
    return reinterpret_cast<const SLRouteNotifMarker*>(
               &_SLRouteNotifMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SLRouteNotifMarker& a, SLRouteNotifMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteNotifMarker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteNotifMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteNotifMarker* New() const final {
    return CreateMaybeMessage<SLRouteNotifMarker>(nullptr);
  }

  SLRouteNotifMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteNotifMarker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteNotifMarker& from);
  void MergeFrom(const SLRouteNotifMarker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteNotifMarker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteNotifMarker";
  }
  protected:
  explicit SLRouteNotifMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteNotifMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLVrfNotif PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLVrfNotif) */ {
 public:
  inline SLVrfNotif() : SLVrfNotif(nullptr) {};
  virtual ~SLVrfNotif();

  SLVrfNotif(const SLVrfNotif& from);
  SLVrfNotif(SLVrfNotif&& from) noexcept
    : SLVrfNotif() {
    *this = ::std::move(from);
  }

  inline SLVrfNotif& operator=(const SLVrfNotif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLVrfNotif& operator=(SLVrfNotif&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLVrfNotif& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLVrfNotif* internal_default_instance() {
    return reinterpret_cast<const SLVrfNotif*>(
               &_SLVrfNotif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SLVrfNotif& a, SLVrfNotif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLVrfNotif* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLVrfNotif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLVrfNotif* New() const final {
    return CreateMaybeMessage<SLVrfNotif>(nullptr);
  }

  SLVrfNotif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLVrfNotif>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLVrfNotif& from);
  void MergeFrom(const SLVrfNotif& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLVrfNotif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLVrfNotif";
  }
  protected:
  explicit SLVrfNotif(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLObjectOp Status = 2;
  void clear_status();
  ::service_layer::SLObjectOp status() const;
  void set_status(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_status() const;
  void _internal_set_status(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLVrfNotif)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRouteCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRouteCommon) */ {
 public:
  inline SLRouteCommon() : SLRouteCommon(nullptr) {};
  virtual ~SLRouteCommon();

  SLRouteCommon(const SLRouteCommon& from);
  SLRouteCommon(SLRouteCommon&& from) noexcept
    : SLRouteCommon() {
    *this = ::std::move(from);
  }

  inline SLRouteCommon& operator=(const SLRouteCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRouteCommon& operator=(SLRouteCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRouteCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRouteCommon* internal_default_instance() {
    return reinterpret_cast<const SLRouteCommon*>(
               &_SLRouteCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SLRouteCommon& a, SLRouteCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRouteCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRouteCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRouteCommon* New() const final {
    return CreateMaybeMessage<SLRouteCommon>(nullptr);
  }

  SLRouteCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRouteCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRouteCommon& from);
  void MergeFrom(const SLRouteCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRouteCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRouteCommon";
  }
  protected:
  explicit SLRouteCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcProtoFieldNumber = 4,
    kSrcProtoTagFieldNumber = 5,
    kAdminDistanceFieldNumber = 1,
    kLocalLabelFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // string SrcProto = 4;
  void clear_srcproto();
  const std::string& srcproto() const;
  void set_srcproto(const std::string& value);
  void set_srcproto(std::string&& value);
  void set_srcproto(const char* value);
  void set_srcproto(const char* value, size_t size);
  std::string* mutable_srcproto();
  std::string* release_srcproto();
  void set_allocated_srcproto(std::string* srcproto);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcproto();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcproto(
      std::string* srcproto);
  private:
  const std::string& _internal_srcproto() const;
  void _internal_set_srcproto(const std::string& value);
  std::string* _internal_mutable_srcproto();
  public:

  // string SrcProtoTag = 5;
  void clear_srcprototag();
  const std::string& srcprototag() const;
  void set_srcprototag(const std::string& value);
  void set_srcprototag(std::string&& value);
  void set_srcprototag(const char* value);
  void set_srcprototag(const char* value, size_t size);
  std::string* mutable_srcprototag();
  std::string* release_srcprototag();
  void set_allocated_srcprototag(std::string* srcprototag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcprototag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcprototag(
      std::string* srcprototag);
  private:
  const std::string& _internal_srcprototag() const;
  void _internal_set_srcprototag(const std::string& value);
  std::string* _internal_mutable_srcprototag();
  public:

  // uint32 AdminDistance = 1;
  void clear_admindistance();
  ::PROTOBUF_NAMESPACE_ID::uint32 admindistance() const;
  void set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admindistance() const;
  void _internal_set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LocalLabel = 2;
  void clear_locallabel();
  ::PROTOBUF_NAMESPACE_ID::uint32 locallabel() const;
  void set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_locallabel() const;
  void _internal_set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Tag = 3;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRouteCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcproto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcprototag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admindistance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 locallabel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLRoutePath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutePath) */ {
 public:
  inline SLRoutePath() : SLRoutePath(nullptr) {};
  virtual ~SLRoutePath();

  SLRoutePath(const SLRoutePath& from);
  SLRoutePath(SLRoutePath&& from) noexcept
    : SLRoutePath() {
    *this = ::std::move(from);
  }

  inline SLRoutePath& operator=(const SLRoutePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutePath& operator=(SLRoutePath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutePath* internal_default_instance() {
    return reinterpret_cast<const SLRoutePath*>(
               &_SLRoutePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SLRoutePath& a, SLRoutePath& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutePath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutePath* New() const final {
    return CreateMaybeMessage<SLRoutePath>(nullptr);
  }

  SLRoutePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutePath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutePath& from);
  void MergeFrom(const SLRoutePath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutePath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutePath";
  }
  protected:
  explicit SLRoutePath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fcommon_2eproto);
    return ::descriptor_table_sl_5froute_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtectedPathBitmapFieldNumber = 7,
    kLabelStackFieldNumber = 8,
    kRemoteAddressFieldNumber = 9,
    kVrfNameFieldNumber = 4,
    kVtepRouterMacAddressFieldNumber = 11,
    kNexthopAddressFieldNumber = 1,
    kNexthopInterfaceFieldNumber = 2,
    kLoadMetricFieldNumber = 3,
    kMetricFieldNumber = 5,
    kPathIdFieldNumber = 6,
    kEncapTypeFieldNumber = 10,
  };
  // repeated uint64 ProtectedPathBitmap = 7;
  int protectedpathbitmap_size() const;
  private:
  int _internal_protectedpathbitmap_size() const;
  public:
  void clear_protectedpathbitmap();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_protectedpathbitmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_protectedpathbitmap() const;
  void _internal_add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_protectedpathbitmap();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 protectedpathbitmap(int index) const;
  void set_protectedpathbitmap(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      protectedpathbitmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_protectedpathbitmap();

  // repeated uint32 LabelStack = 8;
  int labelstack_size() const;
  private:
  int _internal_labelstack_size() const;
  public:
  void clear_labelstack();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelstack(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labelstack() const;
  void _internal_add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labelstack();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labelstack(int index) const;
  void set_labelstack(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labelstack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labelstack();

  // repeated .service_layer.SLIpAddress RemoteAddress = 9;
  int remoteaddress_size() const;
  private:
  int _internal_remoteaddress_size() const;
  public:
  void clear_remoteaddress();
  ::service_layer::SLIpAddress* mutable_remoteaddress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >*
      mutable_remoteaddress();
  private:
  const ::service_layer::SLIpAddress& _internal_remoteaddress(int index) const;
  ::service_layer::SLIpAddress* _internal_add_remoteaddress();
  public:
  const ::service_layer::SLIpAddress& remoteaddress(int index) const;
  ::service_layer::SLIpAddress* add_remoteaddress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >&
      remoteaddress() const;

  // string VrfName = 4;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // bytes VtepRouterMacAddress = 11;
  void clear_vteproutermacaddress();
  const std::string& vteproutermacaddress() const;
  void set_vteproutermacaddress(const std::string& value);
  void set_vteproutermacaddress(std::string&& value);
  void set_vteproutermacaddress(const char* value);
  void set_vteproutermacaddress(const void* value, size_t size);
  std::string* mutable_vteproutermacaddress();
  std::string* release_vteproutermacaddress();
  void set_allocated_vteproutermacaddress(std::string* vteproutermacaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vteproutermacaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vteproutermacaddress(
      std::string* vteproutermacaddress);
  private:
  const std::string& _internal_vteproutermacaddress() const;
  void _internal_set_vteproutermacaddress(const std::string& value);
  std::string* _internal_mutable_vteproutermacaddress();
  public:

  // .service_layer.SLIpAddress NexthopAddress = 1;
  bool has_nexthopaddress() const;
  private:
  bool _internal_has_nexthopaddress() const;
  public:
  void clear_nexthopaddress();
  const ::service_layer::SLIpAddress& nexthopaddress() const;
  ::service_layer::SLIpAddress* release_nexthopaddress();
  ::service_layer::SLIpAddress* mutable_nexthopaddress();
  void set_allocated_nexthopaddress(::service_layer::SLIpAddress* nexthopaddress);
  private:
  const ::service_layer::SLIpAddress& _internal_nexthopaddress() const;
  ::service_layer::SLIpAddress* _internal_mutable_nexthopaddress();
  public:
  void unsafe_arena_set_allocated_nexthopaddress(
      ::service_layer::SLIpAddress* nexthopaddress);
  ::service_layer::SLIpAddress* unsafe_arena_release_nexthopaddress();

  // .service_layer.SLInterface NexthopInterface = 2;
  bool has_nexthopinterface() const;
  private:
  bool _internal_has_nexthopinterface() const;
  public:
  void clear_nexthopinterface();
  const ::service_layer::SLInterface& nexthopinterface() const;
  ::service_layer::SLInterface* release_nexthopinterface();
  ::service_layer::SLInterface* mutable_nexthopinterface();
  void set_allocated_nexthopinterface(::service_layer::SLInterface* nexthopinterface);
  private:
  const ::service_layer::SLInterface& _internal_nexthopinterface() const;
  ::service_layer::SLInterface* _internal_mutable_nexthopinterface();
  public:
  void unsafe_arena_set_allocated_nexthopinterface(
      ::service_layer::SLInterface* nexthopinterface);
  ::service_layer::SLInterface* unsafe_arena_release_nexthopinterface();

  // uint32 LoadMetric = 3;
  void clear_loadmetric();
  ::PROTOBUF_NAMESPACE_ID::uint32 loadmetric() const;
  void set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loadmetric() const;
  void _internal_set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Metric = 5;
  void clear_metric();
  ::PROTOBUF_NAMESPACE_ID::uint32 metric() const;
  void set_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_metric() const;
  void _internal_set_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 PathId = 6;
  void clear_pathid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathid() const;
  void set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathid() const;
  void _internal_set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .service_layer.SLEncapType EncapType = 10;
  void clear_encaptype();
  ::service_layer::SLEncapType encaptype() const;
  void set_encaptype(::service_layer::SLEncapType value);
  private:
  ::service_layer::SLEncapType _internal_encaptype() const;
  void _internal_set_encaptype(::service_layer::SLEncapType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > protectedpathbitmap_;
  mutable std::atomic<int> _protectedpathbitmap_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labelstack_;
  mutable std::atomic<int> _labelstack_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress > remoteaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vteproutermacaddress_;
  ::service_layer::SLIpAddress* nexthopaddress_;
  ::service_layer::SLInterface* nexthopinterface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loadmetric_;
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathid_;
  int encaptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLRouteGlobalsGetMsg

// -------------------------------------------------------------------

// SLRouteGlobalsGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLRouteGlobalsGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLRouteGlobalsGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLRouteGlobalsGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRouteGlobalsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGlobalsGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLRouteGlobalsGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteGlobalsGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalsGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalsGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteGlobalsGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalsGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalsGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteGlobalsGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLRouteGlobalsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteGlobalsGetMsgRsp.ErrStatus)
}

// uint32 MaxVrfregPerVrfregmsg = 2;
inline void SLRouteGlobalsGetMsgRsp::clear_maxvrfregpervrfregmsg() {
  maxvrfregpervrfregmsg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalsGetMsgRsp::_internal_maxvrfregpervrfregmsg() const {
  return maxvrfregpervrfregmsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalsGetMsgRsp::maxvrfregpervrfregmsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGlobalsGetMsgRsp.MaxVrfregPerVrfregmsg)
  return _internal_maxvrfregpervrfregmsg();
}
inline void SLRouteGlobalsGetMsgRsp::_internal_set_maxvrfregpervrfregmsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxvrfregpervrfregmsg_ = value;
}
inline void SLRouteGlobalsGetMsgRsp::set_maxvrfregpervrfregmsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxvrfregpervrfregmsg(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGlobalsGetMsgRsp.MaxVrfregPerVrfregmsg)
}

// uint32 MaxRoutePerRoutemsg = 3;
inline void SLRouteGlobalsGetMsgRsp::clear_maxrouteperroutemsg() {
  maxrouteperroutemsg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalsGetMsgRsp::_internal_maxrouteperroutemsg() const {
  return maxrouteperroutemsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalsGetMsgRsp::maxrouteperroutemsg() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGlobalsGetMsgRsp.MaxRoutePerRoutemsg)
  return _internal_maxrouteperroutemsg();
}
inline void SLRouteGlobalsGetMsgRsp::_internal_set_maxrouteperroutemsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxrouteperroutemsg_ = value;
}
inline void SLRouteGlobalsGetMsgRsp::set_maxrouteperroutemsg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxrouteperroutemsg(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGlobalsGetMsgRsp.MaxRoutePerRoutemsg)
}

// -------------------------------------------------------------------

// SLRouteGlobalStatsGetMsg

// -------------------------------------------------------------------

// SLRouteGlobalStatsGetMsgRsp

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLRouteGlobalStatsGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLRouteGlobalStatsGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLRouteGlobalStatsGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRouteGlobalStatsGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGlobalStatsGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLRouteGlobalStatsGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteGlobalStatsGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalStatsGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalStatsGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteGlobalStatsGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalStatsGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRouteGlobalStatsGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteGlobalStatsGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLRouteGlobalStatsGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteGlobalStatsGetMsgRsp.ErrStatus)
}

// uint32 VrfCount = 2;
inline void SLRouteGlobalStatsGetMsgRsp::clear_vrfcount() {
  vrfcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalStatsGetMsgRsp::_internal_vrfcount() const {
  return vrfcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalStatsGetMsgRsp::vrfcount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGlobalStatsGetMsgRsp.VrfCount)
  return _internal_vrfcount();
}
inline void SLRouteGlobalStatsGetMsgRsp::_internal_set_vrfcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vrfcount_ = value;
}
inline void SLRouteGlobalStatsGetMsgRsp::set_vrfcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vrfcount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGlobalStatsGetMsgRsp.VrfCount)
}

// uint32 RouteCount = 3;
inline void SLRouteGlobalStatsGetMsgRsp::clear_routecount() {
  routecount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalStatsGetMsgRsp::_internal_routecount() const {
  return routecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteGlobalStatsGetMsgRsp::routecount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGlobalStatsGetMsgRsp.RouteCount)
  return _internal_routecount();
}
inline void SLRouteGlobalStatsGetMsgRsp::_internal_set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  routecount_ = value;
}
inline void SLRouteGlobalStatsGetMsgRsp::set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_routecount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGlobalStatsGetMsgRsp.RouteCount)
}

// -------------------------------------------------------------------

// SLVrfReg

// string VrfName = 1;
inline void SLVrfReg::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLVrfReg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfReg.VrfName)
  return _internal_vrfname();
}
inline void SLVrfReg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfReg.VrfName)
}
inline std::string* SLVrfReg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfReg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLVrfReg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLVrfReg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLVrfReg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLVrfReg.VrfName)
}
inline void SLVrfReg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLVrfReg.VrfName)
}
inline void SLVrfReg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLVrfReg.VrfName)
}
inline std::string* SLVrfReg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLVrfReg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfReg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLVrfReg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfReg.VrfName)
}
inline std::string* SLVrfReg::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLVrfReg.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLVrfReg::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfReg.VrfName)
}

// uint32 AdminDistance = 2;
inline void SLVrfReg::clear_admindistance() {
  admindistance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVrfReg::_internal_admindistance() const {
  return admindistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVrfReg::admindistance() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfReg.AdminDistance)
  return _internal_admindistance();
}
inline void SLVrfReg::_internal_set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admindistance_ = value;
}
inline void SLVrfReg::set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admindistance(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfReg.AdminDistance)
}

// uint32 VrfPurgeIntervalSeconds = 3;
inline void SLVrfReg::clear_vrfpurgeintervalseconds() {
  vrfpurgeintervalseconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVrfReg::_internal_vrfpurgeintervalseconds() const {
  return vrfpurgeintervalseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVrfReg::vrfpurgeintervalseconds() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfReg.VrfPurgeIntervalSeconds)
  return _internal_vrfpurgeintervalseconds();
}
inline void SLVrfReg::_internal_set_vrfpurgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vrfpurgeintervalseconds_ = value;
}
inline void SLVrfReg::set_vrfpurgeintervalseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vrfpurgeintervalseconds(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfReg.VrfPurgeIntervalSeconds)
}

// -------------------------------------------------------------------

// SLVrfRegMsg

// .service_layer.SLRegOp Oper = 1;
inline void SLVrfRegMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLRegOp SLVrfRegMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLRegOp >(oper_);
}
inline ::service_layer::SLRegOp SLVrfRegMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegMsg.Oper)
  return _internal_oper();
}
inline void SLVrfRegMsg::_internal_set_oper(::service_layer::SLRegOp value) {
  
  oper_ = value;
}
inline void SLVrfRegMsg::set_oper(::service_layer::SLRegOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRegMsg.Oper)
}

// repeated .service_layer.SLVrfReg VrfRegMsgs = 2;
inline int SLVrfRegMsg::_internal_vrfregmsgs_size() const {
  return vrfregmsgs_.size();
}
inline int SLVrfRegMsg::vrfregmsgs_size() const {
  return _internal_vrfregmsgs_size();
}
inline void SLVrfRegMsg::clear_vrfregmsgs() {
  vrfregmsgs_.Clear();
}
inline ::service_layer::SLVrfReg* SLVrfRegMsg::mutable_vrfregmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegMsg.VrfRegMsgs)
  return vrfregmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >*
SLVrfRegMsg::mutable_vrfregmsgs() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLVrfRegMsg.VrfRegMsgs)
  return &vrfregmsgs_;
}
inline const ::service_layer::SLVrfReg& SLVrfRegMsg::_internal_vrfregmsgs(int index) const {
  return vrfregmsgs_.Get(index);
}
inline const ::service_layer::SLVrfReg& SLVrfRegMsg::vrfregmsgs(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegMsg.VrfRegMsgs)
  return _internal_vrfregmsgs(index);
}
inline ::service_layer::SLVrfReg* SLVrfRegMsg::_internal_add_vrfregmsgs() {
  return vrfregmsgs_.Add();
}
inline ::service_layer::SLVrfReg* SLVrfRegMsg::add_vrfregmsgs() {
  // @@protoc_insertion_point(field_add:service_layer.SLVrfRegMsg.VrfRegMsgs)
  return _internal_add_vrfregmsgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >&
SLVrfRegMsg::vrfregmsgs() const {
  // @@protoc_insertion_point(field_list:service_layer.SLVrfRegMsg.VrfRegMsgs)
  return vrfregmsgs_;
}

// -------------------------------------------------------------------

// SLVrfRegMsgRes

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLVrfRegMsgRes::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLVrfRegMsgRes::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLVrfRegMsgRes::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLVrfRegMsgRes::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegMsgRes.ErrStatus)
  return _internal_errstatus();
}
inline void SLVrfRegMsgRes::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfRegMsgRes.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRes::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRes::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfRegMsgRes.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRes::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRes::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegMsgRes.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLVrfRegMsgRes::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfRegMsgRes.ErrStatus)
}

// string VrfName = 2;
inline void SLVrfRegMsgRes::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLVrfRegMsgRes::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegMsgRes.VrfName)
  return _internal_vrfname();
}
inline void SLVrfRegMsgRes::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRegMsgRes.VrfName)
}
inline std::string* SLVrfRegMsgRes::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegMsgRes.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLVrfRegMsgRes::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLVrfRegMsgRes::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLVrfRegMsgRes::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLVrfRegMsgRes.VrfName)
}
inline void SLVrfRegMsgRes::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLVrfRegMsgRes.VrfName)
}
inline void SLVrfRegMsgRes::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLVrfRegMsgRes.VrfName)
}
inline std::string* SLVrfRegMsgRes::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLVrfRegMsgRes::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfRegMsgRes.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLVrfRegMsgRes::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfRegMsgRes.VrfName)
}
inline std::string* SLVrfRegMsgRes::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLVrfRegMsgRes.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLVrfRegMsgRes::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfRegMsgRes.VrfName)
}

// -------------------------------------------------------------------

// SLVrfRegMsgRsp

// .service_layer.SLErrorStatus StatusSummary = 1;
inline bool SLVrfRegMsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLVrfRegMsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLVrfRegMsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLVrfRegMsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegMsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLVrfRegMsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfRegMsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRsp::release_statussummary() {
  auto temp = unsafe_arena_release_statussummary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfRegMsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLVrfRegMsgRsp::mutable_statussummary() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegMsgRsp.StatusSummary)
  return _internal_mutable_statussummary();
}
inline void SLVrfRegMsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary)->GetArena();
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfRegMsgRsp.StatusSummary)
}

// repeated .service_layer.SLVrfRegMsgRes Results = 2;
inline int SLVrfRegMsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLVrfRegMsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLVrfRegMsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLVrfRegMsgRes* SLVrfRegMsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegMsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfRegMsgRes >*
SLVrfRegMsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLVrfRegMsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLVrfRegMsgRes& SLVrfRegMsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLVrfRegMsgRes& SLVrfRegMsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegMsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLVrfRegMsgRes* SLVrfRegMsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLVrfRegMsgRes* SLVrfRegMsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLVrfRegMsgRsp.Results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfRegMsgRes >&
SLVrfRegMsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLVrfRegMsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLVrfRegGetMsg

// string VrfName = 1;
inline void SLVrfRegGetMsg::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLVrfRegGetMsg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegGetMsg.VrfName)
  return _internal_vrfname();
}
inline void SLVrfRegGetMsg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRegGetMsg.VrfName)
}
inline std::string* SLVrfRegGetMsg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegGetMsg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLVrfRegGetMsg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLVrfRegGetMsg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLVrfRegGetMsg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLVrfRegGetMsg.VrfName)
}
inline void SLVrfRegGetMsg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLVrfRegGetMsg.VrfName)
}
inline void SLVrfRegGetMsg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLVrfRegGetMsg.VrfName)
}
inline std::string* SLVrfRegGetMsg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLVrfRegGetMsg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfRegGetMsg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLVrfRegGetMsg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfRegGetMsg.VrfName)
}
inline std::string* SLVrfRegGetMsg::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLVrfRegGetMsg.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLVrfRegGetMsg::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfRegGetMsg.VrfName)
}

// uint32 EntriesCount = 2;
inline void SLVrfRegGetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVrfRegGetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVrfRegGetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegGetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLVrfRegGetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLVrfRegGetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRegGetMsg.EntriesCount)
}

// bool GetNext = 3;
inline void SLVrfRegGetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLVrfRegGetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLVrfRegGetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegGetMsg.GetNext)
  return _internal_getnext();
}
inline void SLVrfRegGetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLVrfRegGetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRegGetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLVrfRegGetMsgRsp

// bool Eof = 1;
inline void SLVrfRegGetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLVrfRegGetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLVrfRegGetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegGetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLVrfRegGetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLVrfRegGetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfRegGetMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLVrfRegGetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLVrfRegGetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLVrfRegGetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLVrfRegGetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegGetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLVrfRegGetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfRegGetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLVrfRegGetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVrfRegGetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfRegGetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVrfRegGetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLVrfRegGetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegGetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLVrfRegGetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfRegGetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLVrfReg Entries = 3;
inline int SLVrfRegGetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLVrfRegGetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLVrfRegGetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLVrfReg* SLVrfRegGetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfRegGetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >*
SLVrfRegGetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLVrfRegGetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLVrfReg& SLVrfRegGetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLVrfReg& SLVrfRegGetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfRegGetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLVrfReg* SLVrfRegGetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLVrfReg* SLVrfRegGetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLVrfRegGetMsgRsp.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVrfReg >&
SLVrfRegGetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLVrfRegGetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLVRFGetStatsMsgRes

// string VrfName = 1;
inline void SLVRFGetStatsMsgRes::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLVRFGetStatsMsgRes::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVRFGetStatsMsgRes.VrfName)
  return _internal_vrfname();
}
inline void SLVRFGetStatsMsgRes::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVRFGetStatsMsgRes.VrfName)
}
inline std::string* SLVRFGetStatsMsgRes::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVRFGetStatsMsgRes.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLVRFGetStatsMsgRes::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLVRFGetStatsMsgRes::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLVRFGetStatsMsgRes::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLVRFGetStatsMsgRes.VrfName)
}
inline void SLVRFGetStatsMsgRes::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLVRFGetStatsMsgRes.VrfName)
}
inline void SLVRFGetStatsMsgRes::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLVRFGetStatsMsgRes.VrfName)
}
inline std::string* SLVRFGetStatsMsgRes::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLVRFGetStatsMsgRes::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLVRFGetStatsMsgRes.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLVRFGetStatsMsgRes::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVRFGetStatsMsgRes.VrfName)
}
inline std::string* SLVRFGetStatsMsgRes::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLVRFGetStatsMsgRes.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLVRFGetStatsMsgRes::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVRFGetStatsMsgRes.VrfName)
}

// uint32 RouteCount = 2;
inline void SLVRFGetStatsMsgRes::clear_routecount() {
  routecount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVRFGetStatsMsgRes::_internal_routecount() const {
  return routecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLVRFGetStatsMsgRes::routecount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVRFGetStatsMsgRes.RouteCount)
  return _internal_routecount();
}
inline void SLVRFGetStatsMsgRes::_internal_set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  routecount_ = value;
}
inline void SLVRFGetStatsMsgRes::set_routecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_routecount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVRFGetStatsMsgRes.RouteCount)
}

// -------------------------------------------------------------------

// SLVRFGetStatsMsgRsp

// bool Eof = 1;
inline void SLVRFGetStatsMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLVRFGetStatsMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLVRFGetStatsMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVRFGetStatsMsgRsp.Eof)
  return _internal_eof();
}
inline void SLVRFGetStatsMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLVRFGetStatsMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVRFGetStatsMsgRsp.Eof)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLVRFGetStatsMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLVRFGetStatsMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLVRFGetStatsMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLVRFGetStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVRFGetStatsMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLVRFGetStatsMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVRFGetStatsMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLVRFGetStatsMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVRFGetStatsMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLVRFGetStatsMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLVRFGetStatsMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLVRFGetStatsMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVRFGetStatsMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLVRFGetStatsMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVRFGetStatsMsgRsp.ErrStatus)
}

// repeated .service_layer.SLVRFGetStatsMsgRes Entries = 3;
inline int SLVRFGetStatsMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLVRFGetStatsMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLVRFGetStatsMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLVRFGetStatsMsgRes* SLVRFGetStatsMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVRFGetStatsMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVRFGetStatsMsgRes >*
SLVRFGetStatsMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLVRFGetStatsMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLVRFGetStatsMsgRes& SLVRFGetStatsMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLVRFGetStatsMsgRes& SLVRFGetStatsMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLVRFGetStatsMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLVRFGetStatsMsgRes* SLVRFGetStatsMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLVRFGetStatsMsgRes* SLVRFGetStatsMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLVRFGetStatsMsgRsp.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLVRFGetStatsMsgRes >&
SLVRFGetStatsMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLVRFGetStatsMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLRouteGetNotifMsg

// .service_layer.SLNotifOp Oper = 1;
inline void SLRouteGetNotifMsg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLNotifOp SLRouteGetNotifMsg::_internal_oper() const {
  return static_cast< ::service_layer::SLNotifOp >(oper_);
}
inline ::service_layer::SLNotifOp SLRouteGetNotifMsg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGetNotifMsg.Oper)
  return _internal_oper();
}
inline void SLRouteGetNotifMsg::_internal_set_oper(::service_layer::SLNotifOp value) {
  
  oper_ = value;
}
inline void SLRouteGetNotifMsg::set_oper(::service_layer::SLNotifOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGetNotifMsg.Oper)
}

// uint64 Correlator = 2;
inline void SLRouteGetNotifMsg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRouteGetNotifMsg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRouteGetNotifMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGetNotifMsg.Correlator)
  return _internal_correlator();
}
inline void SLRouteGetNotifMsg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRouteGetNotifMsg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGetNotifMsg.Correlator)
}

// string VrfName = 3;
inline void SLRouteGetNotifMsg::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteGetNotifMsg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGetNotifMsg.VrfName)
  return _internal_vrfname();
}
inline void SLRouteGetNotifMsg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGetNotifMsg.VrfName)
}
inline std::string* SLRouteGetNotifMsg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteGetNotifMsg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRouteGetNotifMsg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRouteGetNotifMsg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteGetNotifMsg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteGetNotifMsg.VrfName)
}
inline void SLRouteGetNotifMsg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteGetNotifMsg.VrfName)
}
inline void SLRouteGetNotifMsg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteGetNotifMsg.VrfName)
}
inline std::string* SLRouteGetNotifMsg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteGetNotifMsg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteGetNotifMsg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteGetNotifMsg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteGetNotifMsg.VrfName)
}
inline std::string* SLRouteGetNotifMsg::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteGetNotifMsg.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteGetNotifMsg::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteGetNotifMsg.VrfName)
}

// string SrcProto = 4;
inline void SLRouteGetNotifMsg::clear_srcproto() {
  srcproto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteGetNotifMsg::srcproto() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGetNotifMsg.SrcProto)
  return _internal_srcproto();
}
inline void SLRouteGetNotifMsg::set_srcproto(const std::string& value) {
  _internal_set_srcproto(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGetNotifMsg.SrcProto)
}
inline std::string* SLRouteGetNotifMsg::mutable_srcproto() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteGetNotifMsg.SrcProto)
  return _internal_mutable_srcproto();
}
inline const std::string& SLRouteGetNotifMsg::_internal_srcproto() const {
  return srcproto_.Get();
}
inline void SLRouteGetNotifMsg::_internal_set_srcproto(const std::string& value) {
  
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteGetNotifMsg::set_srcproto(std::string&& value) {
  
  srcproto_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteGetNotifMsg.SrcProto)
}
inline void SLRouteGetNotifMsg::set_srcproto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteGetNotifMsg.SrcProto)
}
inline void SLRouteGetNotifMsg::set_srcproto(const char* value,
    size_t size) {
  
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteGetNotifMsg.SrcProto)
}
inline std::string* SLRouteGetNotifMsg::_internal_mutable_srcproto() {
  
  return srcproto_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteGetNotifMsg::release_srcproto() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteGetNotifMsg.SrcProto)
  return srcproto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteGetNotifMsg::set_allocated_srcproto(std::string* srcproto) {
  if (srcproto != nullptr) {
    
  } else {
    
  }
  srcproto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcproto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteGetNotifMsg.SrcProto)
}
inline std::string* SLRouteGetNotifMsg::unsafe_arena_release_srcproto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteGetNotifMsg.SrcProto)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcproto_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteGetNotifMsg::unsafe_arena_set_allocated_srcproto(
    std::string* srcproto) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcproto != nullptr) {
    
  } else {
    
  }
  srcproto_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcproto, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteGetNotifMsg.SrcProto)
}

// string SrcProtoTag = 5;
inline void SLRouteGetNotifMsg::clear_srcprototag() {
  srcprototag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteGetNotifMsg::srcprototag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
  return _internal_srcprototag();
}
inline void SLRouteGetNotifMsg::set_srcprototag(const std::string& value) {
  _internal_set_srcprototag(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
}
inline std::string* SLRouteGetNotifMsg::mutable_srcprototag() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
  return _internal_mutable_srcprototag();
}
inline const std::string& SLRouteGetNotifMsg::_internal_srcprototag() const {
  return srcprototag_.Get();
}
inline void SLRouteGetNotifMsg::_internal_set_srcprototag(const std::string& value) {
  
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteGetNotifMsg::set_srcprototag(std::string&& value) {
  
  srcprototag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
}
inline void SLRouteGetNotifMsg::set_srcprototag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
}
inline void SLRouteGetNotifMsg::set_srcprototag(const char* value,
    size_t size) {
  
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
}
inline std::string* SLRouteGetNotifMsg::_internal_mutable_srcprototag() {
  
  return srcprototag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteGetNotifMsg::release_srcprototag() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
  return srcprototag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteGetNotifMsg::set_allocated_srcprototag(std::string* srcprototag) {
  if (srcprototag != nullptr) {
    
  } else {
    
  }
  srcprototag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcprototag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
}
inline std::string* SLRouteGetNotifMsg::unsafe_arena_release_srcprototag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcprototag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteGetNotifMsg::unsafe_arena_set_allocated_srcprototag(
    std::string* srcprototag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcprototag != nullptr) {
    
  } else {
    
  }
  srcprototag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcprototag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteGetNotifMsg.SrcProtoTag)
}

// -------------------------------------------------------------------

// SLRouteNotifStatus

// uint64 Correlator = 1;
inline void SLRouteNotifStatus::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRouteNotifStatus::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRouteNotifStatus::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteNotifStatus.Correlator)
  return _internal_correlator();
}
inline void SLRouteNotifStatus::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRouteNotifStatus::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteNotifStatus.Correlator)
}

// string VrfName = 2;
inline void SLRouteNotifStatus::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteNotifStatus::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteNotifStatus.VrfName)
  return _internal_vrfname();
}
inline void SLRouteNotifStatus::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteNotifStatus.VrfName)
}
inline std::string* SLRouteNotifStatus::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteNotifStatus.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRouteNotifStatus::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRouteNotifStatus::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteNotifStatus::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteNotifStatus.VrfName)
}
inline void SLRouteNotifStatus::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteNotifStatus.VrfName)
}
inline void SLRouteNotifStatus::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteNotifStatus.VrfName)
}
inline std::string* SLRouteNotifStatus::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteNotifStatus::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteNotifStatus.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteNotifStatus::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteNotifStatus.VrfName)
}
inline std::string* SLRouteNotifStatus::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteNotifStatus.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteNotifStatus::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteNotifStatus.VrfName)
}

// .service_layer.SLErrorStatus NotifStatus = 3;
inline bool SLRouteNotifStatus::_internal_has_notifstatus() const {
  return this != internal_default_instance() && notifstatus_ != nullptr;
}
inline bool SLRouteNotifStatus::has_notifstatus() const {
  return _internal_has_notifstatus();
}
inline const ::service_layer::SLErrorStatus& SLRouteNotifStatus::_internal_notifstatus() const {
  const ::service_layer::SLErrorStatus* p = notifstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRouteNotifStatus::notifstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteNotifStatus.NotifStatus)
  return _internal_notifstatus();
}
inline void SLRouteNotifStatus::unsafe_arena_set_allocated_notifstatus(
    ::service_layer::SLErrorStatus* notifstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notifstatus_);
  }
  notifstatus_ = notifstatus;
  if (notifstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteNotifStatus.NotifStatus)
}
inline ::service_layer::SLErrorStatus* SLRouteNotifStatus::release_notifstatus() {
  auto temp = unsafe_arena_release_notifstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRouteNotifStatus::unsafe_arena_release_notifstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteNotifStatus.NotifStatus)
  
  ::service_layer::SLErrorStatus* temp = notifstatus_;
  notifstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRouteNotifStatus::_internal_mutable_notifstatus() {
  
  if (notifstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    notifstatus_ = p;
  }
  return notifstatus_;
}
inline ::service_layer::SLErrorStatus* SLRouteNotifStatus::mutable_notifstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteNotifStatus.NotifStatus)
  return _internal_mutable_notifstatus();
}
inline void SLRouteNotifStatus::set_allocated_notifstatus(::service_layer::SLErrorStatus* notifstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(notifstatus_);
  }
  if (notifstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notifstatus)->GetArena();
    if (message_arena != submessage_arena) {
      notifstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notifstatus, submessage_arena);
    }
    
  } else {
    
  }
  notifstatus_ = notifstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteNotifStatus.NotifStatus)
}

// -------------------------------------------------------------------

// SLRouteNotifMarker

// string VrfName = 1;
inline void SLRouteNotifMarker::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteNotifMarker::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteNotifMarker.VrfName)
  return _internal_vrfname();
}
inline void SLRouteNotifMarker::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteNotifMarker.VrfName)
}
inline std::string* SLRouteNotifMarker::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteNotifMarker.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRouteNotifMarker::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRouteNotifMarker::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteNotifMarker::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteNotifMarker.VrfName)
}
inline void SLRouteNotifMarker::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteNotifMarker.VrfName)
}
inline void SLRouteNotifMarker::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteNotifMarker.VrfName)
}
inline std::string* SLRouteNotifMarker::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteNotifMarker::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteNotifMarker.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteNotifMarker::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteNotifMarker.VrfName)
}
inline std::string* SLRouteNotifMarker::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteNotifMarker.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteNotifMarker::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteNotifMarker.VrfName)
}

// -------------------------------------------------------------------

// SLVrfNotif

// string VrfName = 1;
inline void SLVrfNotif::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLVrfNotif::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfNotif.VrfName)
  return _internal_vrfname();
}
inline void SLVrfNotif::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfNotif.VrfName)
}
inline std::string* SLVrfNotif::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLVrfNotif.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLVrfNotif::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLVrfNotif::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLVrfNotif::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLVrfNotif.VrfName)
}
inline void SLVrfNotif::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLVrfNotif.VrfName)
}
inline void SLVrfNotif::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLVrfNotif.VrfName)
}
inline std::string* SLVrfNotif::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLVrfNotif::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLVrfNotif.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLVrfNotif::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLVrfNotif.VrfName)
}
inline std::string* SLVrfNotif::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLVrfNotif.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLVrfNotif::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLVrfNotif.VrfName)
}

// .service_layer.SLObjectOp Status = 2;
inline void SLVrfNotif::clear_status() {
  status_ = 0;
}
inline ::service_layer::SLObjectOp SLVrfNotif::_internal_status() const {
  return static_cast< ::service_layer::SLObjectOp >(status_);
}
inline ::service_layer::SLObjectOp SLVrfNotif::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLVrfNotif.Status)
  return _internal_status();
}
inline void SLVrfNotif::_internal_set_status(::service_layer::SLObjectOp value) {
  
  status_ = value;
}
inline void SLVrfNotif::set_status(::service_layer::SLObjectOp value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:service_layer.SLVrfNotif.Status)
}

// -------------------------------------------------------------------

// SLRouteCommon

// uint32 AdminDistance = 1;
inline void SLRouteCommon::clear_admindistance() {
  admindistance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteCommon::_internal_admindistance() const {
  return admindistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteCommon::admindistance() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteCommon.AdminDistance)
  return _internal_admindistance();
}
inline void SLRouteCommon::_internal_set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admindistance_ = value;
}
inline void SLRouteCommon::set_admindistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admindistance(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteCommon.AdminDistance)
}

// uint32 LocalLabel = 2;
inline void SLRouteCommon::clear_locallabel() {
  locallabel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteCommon::_internal_locallabel() const {
  return locallabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteCommon::locallabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteCommon.LocalLabel)
  return _internal_locallabel();
}
inline void SLRouteCommon::_internal_set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  locallabel_ = value;
}
inline void SLRouteCommon::set_locallabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_locallabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteCommon.LocalLabel)
}

// uint32 Tag = 3;
inline void SLRouteCommon::clear_tag() {
  tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteCommon::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRouteCommon::tag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteCommon.Tag)
  return _internal_tag();
}
inline void SLRouteCommon::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_ = value;
}
inline void SLRouteCommon::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteCommon.Tag)
}

// string SrcProto = 4;
inline void SLRouteCommon::clear_srcproto() {
  srcproto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteCommon::srcproto() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteCommon.SrcProto)
  return _internal_srcproto();
}
inline void SLRouteCommon::set_srcproto(const std::string& value) {
  _internal_set_srcproto(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteCommon.SrcProto)
}
inline std::string* SLRouteCommon::mutable_srcproto() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteCommon.SrcProto)
  return _internal_mutable_srcproto();
}
inline const std::string& SLRouteCommon::_internal_srcproto() const {
  return srcproto_.Get();
}
inline void SLRouteCommon::_internal_set_srcproto(const std::string& value) {
  
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteCommon::set_srcproto(std::string&& value) {
  
  srcproto_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteCommon.SrcProto)
}
inline void SLRouteCommon::set_srcproto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteCommon.SrcProto)
}
inline void SLRouteCommon::set_srcproto(const char* value,
    size_t size) {
  
  srcproto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteCommon.SrcProto)
}
inline std::string* SLRouteCommon::_internal_mutable_srcproto() {
  
  return srcproto_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteCommon::release_srcproto() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteCommon.SrcProto)
  return srcproto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteCommon::set_allocated_srcproto(std::string* srcproto) {
  if (srcproto != nullptr) {
    
  } else {
    
  }
  srcproto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcproto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteCommon.SrcProto)
}
inline std::string* SLRouteCommon::unsafe_arena_release_srcproto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteCommon.SrcProto)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcproto_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteCommon::unsafe_arena_set_allocated_srcproto(
    std::string* srcproto) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcproto != nullptr) {
    
  } else {
    
  }
  srcproto_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcproto, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteCommon.SrcProto)
}

// string SrcProtoTag = 5;
inline void SLRouteCommon::clear_srcprototag() {
  srcprototag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRouteCommon::srcprototag() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRouteCommon.SrcProtoTag)
  return _internal_srcprototag();
}
inline void SLRouteCommon::set_srcprototag(const std::string& value) {
  _internal_set_srcprototag(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRouteCommon.SrcProtoTag)
}
inline std::string* SLRouteCommon::mutable_srcprototag() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRouteCommon.SrcProtoTag)
  return _internal_mutable_srcprototag();
}
inline const std::string& SLRouteCommon::_internal_srcprototag() const {
  return srcprototag_.Get();
}
inline void SLRouteCommon::_internal_set_srcprototag(const std::string& value) {
  
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRouteCommon::set_srcprototag(std::string&& value) {
  
  srcprototag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRouteCommon.SrcProtoTag)
}
inline void SLRouteCommon::set_srcprototag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRouteCommon.SrcProtoTag)
}
inline void SLRouteCommon::set_srcprototag(const char* value,
    size_t size) {
  
  srcprototag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRouteCommon.SrcProtoTag)
}
inline std::string* SLRouteCommon::_internal_mutable_srcprototag() {
  
  return srcprototag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRouteCommon::release_srcprototag() {
  // @@protoc_insertion_point(field_release:service_layer.SLRouteCommon.SrcProtoTag)
  return srcprototag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRouteCommon::set_allocated_srcprototag(std::string* srcprototag) {
  if (srcprototag != nullptr) {
    
  } else {
    
  }
  srcprototag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcprototag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRouteCommon.SrcProtoTag)
}
inline std::string* SLRouteCommon::unsafe_arena_release_srcprototag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRouteCommon.SrcProtoTag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcprototag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRouteCommon::unsafe_arena_set_allocated_srcprototag(
    std::string* srcprototag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcprototag != nullptr) {
    
  } else {
    
  }
  srcprototag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcprototag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRouteCommon.SrcProtoTag)
}

// -------------------------------------------------------------------

// SLRoutePath

// .service_layer.SLIpAddress NexthopAddress = 1;
inline bool SLRoutePath::_internal_has_nexthopaddress() const {
  return this != internal_default_instance() && nexthopaddress_ != nullptr;
}
inline bool SLRoutePath::has_nexthopaddress() const {
  return _internal_has_nexthopaddress();
}
inline const ::service_layer::SLIpAddress& SLRoutePath::_internal_nexthopaddress() const {
  const ::service_layer::SLIpAddress* p = nexthopaddress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLIpAddress*>(
      &::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLRoutePath::nexthopaddress() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.NexthopAddress)
  return _internal_nexthopaddress();
}
inline void SLRoutePath::unsafe_arena_set_allocated_nexthopaddress(
    ::service_layer::SLIpAddress* nexthopaddress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopaddress_);
  }
  nexthopaddress_ = nexthopaddress;
  if (nexthopaddress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutePath.NexthopAddress)
}
inline ::service_layer::SLIpAddress* SLRoutePath::release_nexthopaddress() {
  auto temp = unsafe_arena_release_nexthopaddress();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLIpAddress* SLRoutePath::unsafe_arena_release_nexthopaddress() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutePath.NexthopAddress)
  
  ::service_layer::SLIpAddress* temp = nexthopaddress_;
  nexthopaddress_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLRoutePath::_internal_mutable_nexthopaddress() {
  
  if (nexthopaddress_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArena());
    nexthopaddress_ = p;
  }
  return nexthopaddress_;
}
inline ::service_layer::SLIpAddress* SLRoutePath::mutable_nexthopaddress() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutePath.NexthopAddress)
  return _internal_mutable_nexthopaddress();
}
inline void SLRoutePath::set_allocated_nexthopaddress(::service_layer::SLIpAddress* nexthopaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopaddress_);
  }
  if (nexthopaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopaddress)->GetArena();
    if (message_arena != submessage_arena) {
      nexthopaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopaddress, submessage_arena);
    }
    
  } else {
    
  }
  nexthopaddress_ = nexthopaddress;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutePath.NexthopAddress)
}

// .service_layer.SLInterface NexthopInterface = 2;
inline bool SLRoutePath::_internal_has_nexthopinterface() const {
  return this != internal_default_instance() && nexthopinterface_ != nullptr;
}
inline bool SLRoutePath::has_nexthopinterface() const {
  return _internal_has_nexthopinterface();
}
inline const ::service_layer::SLInterface& SLRoutePath::_internal_nexthopinterface() const {
  const ::service_layer::SLInterface* p = nexthopinterface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLInterface*>(
      &::service_layer::_SLInterface_default_instance_);
}
inline const ::service_layer::SLInterface& SLRoutePath::nexthopinterface() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.NexthopInterface)
  return _internal_nexthopinterface();
}
inline void SLRoutePath::unsafe_arena_set_allocated_nexthopinterface(
    ::service_layer::SLInterface* nexthopinterface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopinterface_);
  }
  nexthopinterface_ = nexthopinterface;
  if (nexthopinterface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutePath.NexthopInterface)
}
inline ::service_layer::SLInterface* SLRoutePath::release_nexthopinterface() {
  auto temp = unsafe_arena_release_nexthopinterface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLInterface* SLRoutePath::unsafe_arena_release_nexthopinterface() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutePath.NexthopInterface)
  
  ::service_layer::SLInterface* temp = nexthopinterface_;
  nexthopinterface_ = nullptr;
  return temp;
}
inline ::service_layer::SLInterface* SLRoutePath::_internal_mutable_nexthopinterface() {
  
  if (nexthopinterface_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLInterface>(GetArena());
    nexthopinterface_ = p;
  }
  return nexthopinterface_;
}
inline ::service_layer::SLInterface* SLRoutePath::mutable_nexthopinterface() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutePath.NexthopInterface)
  return _internal_mutable_nexthopinterface();
}
inline void SLRoutePath::set_allocated_nexthopinterface(::service_layer::SLInterface* nexthopinterface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopinterface_);
  }
  if (nexthopinterface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopinterface)->GetArena();
    if (message_arena != submessage_arena) {
      nexthopinterface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopinterface, submessage_arena);
    }
    
  } else {
    
  }
  nexthopinterface_ = nexthopinterface;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutePath.NexthopInterface)
}

// uint32 LoadMetric = 3;
inline void SLRoutePath::clear_loadmetric() {
  loadmetric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::_internal_loadmetric() const {
  return loadmetric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::loadmetric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.LoadMetric)
  return _internal_loadmetric();
}
inline void SLRoutePath::_internal_set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  loadmetric_ = value;
}
inline void SLRoutePath::set_loadmetric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loadmetric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.LoadMetric)
}

// string VrfName = 4;
inline void SLRoutePath::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutePath::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.VrfName)
  return _internal_vrfname();
}
inline void SLRoutePath::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.VrfName)
}
inline std::string* SLRoutePath::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutePath.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutePath::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutePath::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutePath::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutePath.VrfName)
}
inline void SLRoutePath::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutePath.VrfName)
}
inline void SLRoutePath::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutePath.VrfName)
}
inline std::string* SLRoutePath::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutePath::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutePath.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutePath::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutePath.VrfName)
}
inline std::string* SLRoutePath::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutePath.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutePath::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutePath.VrfName)
}

// uint32 Metric = 5;
inline void SLRoutePath::clear_metric() {
  metric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::_internal_metric() const {
  return metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.Metric)
  return _internal_metric();
}
inline void SLRoutePath::_internal_set_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  metric_ = value;
}
inline void SLRoutePath::set_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.Metric)
}

// uint32 PathId = 6;
inline void SLRoutePath::clear_pathid() {
  pathid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::_internal_pathid() const {
  return pathid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::pathid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.PathId)
  return _internal_pathid();
}
inline void SLRoutePath::_internal_set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pathid_ = value;
}
inline void SLRoutePath::set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.PathId)
}

// repeated uint64 ProtectedPathBitmap = 7;
inline int SLRoutePath::_internal_protectedpathbitmap_size() const {
  return protectedpathbitmap_.size();
}
inline int SLRoutePath::protectedpathbitmap_size() const {
  return _internal_protectedpathbitmap_size();
}
inline void SLRoutePath::clear_protectedpathbitmap() {
  protectedpathbitmap_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutePath::_internal_protectedpathbitmap(int index) const {
  return protectedpathbitmap_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutePath::protectedpathbitmap(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.ProtectedPathBitmap)
  return _internal_protectedpathbitmap(index);
}
inline void SLRoutePath::set_protectedpathbitmap(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  protectedpathbitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.ProtectedPathBitmap)
}
inline void SLRoutePath::_internal_add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  protectedpathbitmap_.Add(value);
}
inline void SLRoutePath::add_protectedpathbitmap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_protectedpathbitmap(value);
  // @@protoc_insertion_point(field_add:service_layer.SLRoutePath.ProtectedPathBitmap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SLRoutePath::_internal_protectedpathbitmap() const {
  return protectedpathbitmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SLRoutePath::protectedpathbitmap() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutePath.ProtectedPathBitmap)
  return _internal_protectedpathbitmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SLRoutePath::_internal_mutable_protectedpathbitmap() {
  return &protectedpathbitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SLRoutePath::mutable_protectedpathbitmap() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutePath.ProtectedPathBitmap)
  return _internal_mutable_protectedpathbitmap();
}

// repeated uint32 LabelStack = 8;
inline int SLRoutePath::_internal_labelstack_size() const {
  return labelstack_.size();
}
inline int SLRoutePath::labelstack_size() const {
  return _internal_labelstack_size();
}
inline void SLRoutePath::clear_labelstack() {
  labelstack_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::_internal_labelstack(int index) const {
  return labelstack_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutePath::labelstack(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.LabelStack)
  return _internal_labelstack(index);
}
inline void SLRoutePath::set_labelstack(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labelstack_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.LabelStack)
}
inline void SLRoutePath::_internal_add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labelstack_.Add(value);
}
inline void SLRoutePath::add_labelstack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labelstack(value);
  // @@protoc_insertion_point(field_add:service_layer.SLRoutePath.LabelStack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SLRoutePath::_internal_labelstack() const {
  return labelstack_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SLRoutePath::labelstack() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutePath.LabelStack)
  return _internal_labelstack();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SLRoutePath::_internal_mutable_labelstack() {
  return &labelstack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SLRoutePath::mutable_labelstack() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutePath.LabelStack)
  return _internal_mutable_labelstack();
}

// repeated .service_layer.SLIpAddress RemoteAddress = 9;
inline int SLRoutePath::_internal_remoteaddress_size() const {
  return remoteaddress_.size();
}
inline int SLRoutePath::remoteaddress_size() const {
  return _internal_remoteaddress_size();
}
inline ::service_layer::SLIpAddress* SLRoutePath::mutable_remoteaddress(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutePath.RemoteAddress)
  return remoteaddress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >*
SLRoutePath::mutable_remoteaddress() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutePath.RemoteAddress)
  return &remoteaddress_;
}
inline const ::service_layer::SLIpAddress& SLRoutePath::_internal_remoteaddress(int index) const {
  return remoteaddress_.Get(index);
}
inline const ::service_layer::SLIpAddress& SLRoutePath::remoteaddress(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.RemoteAddress)
  return _internal_remoteaddress(index);
}
inline ::service_layer::SLIpAddress* SLRoutePath::_internal_add_remoteaddress() {
  return remoteaddress_.Add();
}
inline ::service_layer::SLIpAddress* SLRoutePath::add_remoteaddress() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutePath.RemoteAddress)
  return _internal_add_remoteaddress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >&
SLRoutePath::remoteaddress() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutePath.RemoteAddress)
  return remoteaddress_;
}

// .service_layer.SLEncapType EncapType = 10;
inline void SLRoutePath::clear_encaptype() {
  encaptype_ = 0;
}
inline ::service_layer::SLEncapType SLRoutePath::_internal_encaptype() const {
  return static_cast< ::service_layer::SLEncapType >(encaptype_);
}
inline ::service_layer::SLEncapType SLRoutePath::encaptype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.EncapType)
  return _internal_encaptype();
}
inline void SLRoutePath::_internal_set_encaptype(::service_layer::SLEncapType value) {
  
  encaptype_ = value;
}
inline void SLRoutePath::set_encaptype(::service_layer::SLEncapType value) {
  _internal_set_encaptype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.EncapType)
}

// bytes VtepRouterMacAddress = 11;
inline void SLRoutePath::clear_vteproutermacaddress() {
  vteproutermacaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutePath::vteproutermacaddress() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutePath.VtepRouterMacAddress)
  return _internal_vteproutermacaddress();
}
inline void SLRoutePath::set_vteproutermacaddress(const std::string& value) {
  _internal_set_vteproutermacaddress(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutePath.VtepRouterMacAddress)
}
inline std::string* SLRoutePath::mutable_vteproutermacaddress() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutePath.VtepRouterMacAddress)
  return _internal_mutable_vteproutermacaddress();
}
inline const std::string& SLRoutePath::_internal_vteproutermacaddress() const {
  return vteproutermacaddress_.Get();
}
inline void SLRoutePath::_internal_set_vteproutermacaddress(const std::string& value) {
  
  vteproutermacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutePath::set_vteproutermacaddress(std::string&& value) {
  
  vteproutermacaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutePath.VtepRouterMacAddress)
}
inline void SLRoutePath::set_vteproutermacaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vteproutermacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutePath.VtepRouterMacAddress)
}
inline void SLRoutePath::set_vteproutermacaddress(const void* value,
    size_t size) {
  
  vteproutermacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutePath.VtepRouterMacAddress)
}
inline std::string* SLRoutePath::_internal_mutable_vteproutermacaddress() {
  
  return vteproutermacaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutePath::release_vteproutermacaddress() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutePath.VtepRouterMacAddress)
  return vteproutermacaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutePath::set_allocated_vteproutermacaddress(std::string* vteproutermacaddress) {
  if (vteproutermacaddress != nullptr) {
    
  } else {
    
  }
  vteproutermacaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vteproutermacaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutePath.VtepRouterMacAddress)
}
inline std::string* SLRoutePath::unsafe_arena_release_vteproutermacaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutePath.VtepRouterMacAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vteproutermacaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutePath::unsafe_arena_set_allocated_vteproutermacaddress(
    std::string* vteproutermacaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vteproutermacaddress != nullptr) {
    
  } else {
    
  }
  vteproutermacaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vteproutermacaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutePath.VtepRouterMacAddress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLNotifType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLNotifType>() {
  return ::service_layer::SLNotifType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fcommon_2eproto
