// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_route_ipv4.proto
// Original file comments:
// @file
// @brief Server RPC proto file for IPv4.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_sl_5froute_5fipv4_2eproto__INCLUDED
#define GRPC_sl_5froute_5fipv4_2eproto__INCLUDED

#include "sl_route_ipv4.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace service_layer {

// @defgroup SLRouteIPv4Oper
// @ingroup Route
// Defines RPC calls for IPv4 route changes and VRF registration.
// This service declares both the Vrf Registration, as well as adding, deleting
// and getting IPv4 routes.
// @{
class SLRoutev4Oper final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLRoutev4Oper";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Global Route operations
    //
    //
    // Used to retrieve Global Route information
    virtual ::grpc::Status SLRoutev4GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::service_layer::SLRouteGlobalsGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalsGetMsgRsp>> AsyncSLRoutev4GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalsGetMsgRsp>>(AsyncSLRoutev4GlobalsGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalsGetMsgRsp>> PrepareAsyncSLRoutev4GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalsGetMsgRsp>>(PrepareAsyncSLRoutev4GlobalsGetRaw(context, request, cq));
    }
    // Used to retrieve Global Route Stats
    virtual ::grpc::Status SLRoutev4GlobalStatsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::service_layer::SLRouteGlobalStatsGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalStatsGetMsgRsp>> AsyncSLRoutev4GlobalStatsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalStatsGetMsgRsp>>(AsyncSLRoutev4GlobalStatsGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalStatsGetMsgRsp>> PrepareAsyncSLRoutev4GlobalStatsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalStatsGetMsgRsp>>(PrepareAsyncSLRoutev4GlobalStatsGetRaw(context, request, cq));
    }
    //
    // VRF registration operations
    //
    //
    // SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF registration: Sends a list of VRF registration messages
    //     and expects a list of registration responses.
    //     A client Must Register a VRF BEFORE routes can be added/modified in
    //    the associated VRF.
    //
    // SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF Un-registeration: Sends a list of VRF un-registration messages
    //     and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in this VRF. All previously installed routes would be lost.
    //
    // SLVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their Routes.
    virtual ::grpc::Status SLRoutev4VrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::service_layer::SLVrfRegMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegMsgRsp>> AsyncSLRoutev4VrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegMsgRsp>>(AsyncSLRoutev4VrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegMsgRsp>> PrepareAsyncSLRoutev4VrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegMsgRsp>>(PrepareAsyncSLRoutev4VrfRegOpRaw(context, request, cq));
    }
    // VRF get. Used to retrieve VRF attributes from the server.
    virtual ::grpc::Status SLRoutev4VrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::service_layer::SLVrfRegGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegGetMsgRsp>> AsyncSLRoutev4VrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegGetMsgRsp>>(AsyncSLRoutev4VrfRegGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegGetMsgRsp>> PrepareAsyncSLRoutev4VrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegGetMsgRsp>>(PrepareAsyncSLRoutev4VrfRegGetRaw(context, request, cq));
    }
    // Used to retrieve VRF Stats from the server.
    virtual ::grpc::Status SLRoutev4VrfGetStats(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::service_layer::SLVRFGetStatsMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVRFGetStatsMsgRsp>> AsyncSLRoutev4VrfGetStats(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVRFGetStatsMsgRsp>>(AsyncSLRoutev4VrfGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVRFGetStatsMsgRsp>> PrepareAsyncSLRoutev4VrfGetStats(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVRFGetStatsMsgRsp>>(PrepareAsyncSLRoutev4VrfGetStatsRaw(context, request, cq));
    }
    //
    // Route operations
    //
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    //     Route add. Fails if the route already exists.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    //     Route update. Creates or updates the route.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    //     Route delete. The route path is not necessary to delete the route.
    virtual ::grpc::Status SLRoutev4Op(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::service_layer::SLRoutev4MsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4MsgRsp>> AsyncSLRoutev4Op(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4MsgRsp>>(AsyncSLRoutev4OpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4MsgRsp>> PrepareAsyncSLRoutev4Op(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4MsgRsp>>(PrepareAsyncSLRoutev4OpRaw(context, request, cq));
    }
    // Retrieves route attributes.
    virtual ::grpc::Status SLRoutev4Get(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::service_layer::SLRoutev4GetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4GetMsgRsp>> AsyncSLRoutev4Get(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4GetMsgRsp>>(AsyncSLRoutev4GetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4GetMsgRsp>> PrepareAsyncSLRoutev4Get(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4GetMsgRsp>>(PrepareAsyncSLRoutev4GetRaw(context, request, cq));
    }
    //
    // Stream Route operations
    //
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    //     Route add. Fails if the route already exists.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    //     Route update. Creates or updates the route.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    //     Route delete. The route path is not necessary to delete the route.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>> SLRoutev4OpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>>(SLRoutev4OpStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>> AsyncSLRoutev4OpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>>(AsyncSLRoutev4OpStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>> PrepareAsyncSLRoutev4OpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>>(PrepareAsyncSLRoutev4OpStreamRaw(context, cq));
    }
    // Retrieves route attributes.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>> SLRoutev4GetStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>>(SLRoutev4GetStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>> AsyncSLRoutev4GetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>>(AsyncSLRoutev4GetStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>> PrepareAsyncSLRoutev4GetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>>(PrepareAsyncSLRoutev4GetStreamRaw(context, cq));
    }
    //
    // Route Redistribution Operations
    //
    //
    // This call is used to get a stream of route notifications.
    // It can be used to get "push" notifications for route
    // adds/updates/deletes.
    // The caller must maintain the GRPC channel as long as there is
    // interest in route notifications.
    //
    // The call takes a stream of per-VRF notification requests.
    // The success/failure of the notification request is relayed in the
    // SLRouteNotifStatus followed by a Start marker, any routes if present,
    // and an End Marker.
    //
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>> SLRoutev4GetNotifStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>>(SLRoutev4GetNotifStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>> AsyncSLRoutev4GetNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>>(AsyncSLRoutev4GetNotifStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>> PrepareAsyncSLRoutev4GetNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>>(PrepareAsyncSLRoutev4GetNotifStreamRaw(context, cq));
    }
    //
    // @}
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalsGetMsgRsp>* AsyncSLRoutev4GlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalsGetMsgRsp>* PrepareAsyncSLRoutev4GlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalStatsGetMsgRsp>* AsyncSLRoutev4GlobalStatsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRouteGlobalStatsGetMsgRsp>* PrepareAsyncSLRoutev4GlobalStatsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegMsgRsp>* AsyncSLRoutev4VrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegMsgRsp>* PrepareAsyncSLRoutev4VrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegGetMsgRsp>* AsyncSLRoutev4VrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVrfRegGetMsgRsp>* PrepareAsyncSLRoutev4VrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVRFGetStatsMsgRsp>* AsyncSLRoutev4VrfGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLVRFGetStatsMsgRsp>* PrepareAsyncSLRoutev4VrfGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4MsgRsp>* AsyncSLRoutev4OpRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4MsgRsp>* PrepareAsyncSLRoutev4OpRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4GetMsgRsp>* AsyncSLRoutev4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLRoutev4GetMsgRsp>* PrepareAsyncSLRoutev4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>* SLRoutev4OpStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>* AsyncSLRoutev4OpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>* PrepareAsyncSLRoutev4OpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>* SLRoutev4GetStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>* AsyncSLRoutev4GetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>* PrepareAsyncSLRoutev4GetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>* SLRoutev4GetNotifStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>* AsyncSLRoutev4GetNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>* PrepareAsyncSLRoutev4GetNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SLRoutev4GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::service_layer::SLRouteGlobalsGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalsGetMsgRsp>> AsyncSLRoutev4GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalsGetMsgRsp>>(AsyncSLRoutev4GlobalsGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalsGetMsgRsp>> PrepareAsyncSLRoutev4GlobalsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalsGetMsgRsp>>(PrepareAsyncSLRoutev4GlobalsGetRaw(context, request, cq));
    }
    ::grpc::Status SLRoutev4GlobalStatsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::service_layer::SLRouteGlobalStatsGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalStatsGetMsgRsp>> AsyncSLRoutev4GlobalStatsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalStatsGetMsgRsp>>(AsyncSLRoutev4GlobalStatsGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalStatsGetMsgRsp>> PrepareAsyncSLRoutev4GlobalStatsGet(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalStatsGetMsgRsp>>(PrepareAsyncSLRoutev4GlobalStatsGetRaw(context, request, cq));
    }
    ::grpc::Status SLRoutev4VrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::service_layer::SLVrfRegMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegMsgRsp>> AsyncSLRoutev4VrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegMsgRsp>>(AsyncSLRoutev4VrfRegOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegMsgRsp>> PrepareAsyncSLRoutev4VrfRegOp(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegMsgRsp>>(PrepareAsyncSLRoutev4VrfRegOpRaw(context, request, cq));
    }
    ::grpc::Status SLRoutev4VrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::service_layer::SLVrfRegGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegGetMsgRsp>> AsyncSLRoutev4VrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegGetMsgRsp>>(AsyncSLRoutev4VrfRegGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegGetMsgRsp>> PrepareAsyncSLRoutev4VrfRegGet(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegGetMsgRsp>>(PrepareAsyncSLRoutev4VrfRegGetRaw(context, request, cq));
    }
    ::grpc::Status SLRoutev4VrfGetStats(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::service_layer::SLVRFGetStatsMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVRFGetStatsMsgRsp>> AsyncSLRoutev4VrfGetStats(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVRFGetStatsMsgRsp>>(AsyncSLRoutev4VrfGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVRFGetStatsMsgRsp>> PrepareAsyncSLRoutev4VrfGetStats(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLVRFGetStatsMsgRsp>>(PrepareAsyncSLRoutev4VrfGetStatsRaw(context, request, cq));
    }
    ::grpc::Status SLRoutev4Op(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::service_layer::SLRoutev4MsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4MsgRsp>> AsyncSLRoutev4Op(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4MsgRsp>>(AsyncSLRoutev4OpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4MsgRsp>> PrepareAsyncSLRoutev4Op(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4MsgRsp>>(PrepareAsyncSLRoutev4OpRaw(context, request, cq));
    }
    ::grpc::Status SLRoutev4Get(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::service_layer::SLRoutev4GetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4GetMsgRsp>> AsyncSLRoutev4Get(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4GetMsgRsp>>(AsyncSLRoutev4GetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4GetMsgRsp>> PrepareAsyncSLRoutev4Get(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4GetMsgRsp>>(PrepareAsyncSLRoutev4GetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>> SLRoutev4OpStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>>(SLRoutev4OpStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>> AsyncSLRoutev4OpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>>(AsyncSLRoutev4OpStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>> PrepareAsyncSLRoutev4OpStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>>(PrepareAsyncSLRoutev4OpStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>> SLRoutev4GetStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>>(SLRoutev4GetStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>> AsyncSLRoutev4GetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>>(AsyncSLRoutev4GetStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>> PrepareAsyncSLRoutev4GetStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>>(PrepareAsyncSLRoutev4GetStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>> SLRoutev4GetNotifStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>>(SLRoutev4GetNotifStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>> AsyncSLRoutev4GetNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>>(AsyncSLRoutev4GetNotifStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>> PrepareAsyncSLRoutev4GetNotifStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>>(PrepareAsyncSLRoutev4GetNotifStreamRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalsGetMsgRsp>* AsyncSLRoutev4GlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalsGetMsgRsp>* PrepareAsyncSLRoutev4GlobalsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalStatsGetMsgRsp>* AsyncSLRoutev4GlobalStatsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRouteGlobalStatsGetMsgRsp>* PrepareAsyncSLRoutev4GlobalStatsGetRaw(::grpc::ClientContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegMsgRsp>* AsyncSLRoutev4VrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegMsgRsp>* PrepareAsyncSLRoutev4VrfRegOpRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegGetMsgRsp>* AsyncSLRoutev4VrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLVrfRegGetMsgRsp>* PrepareAsyncSLRoutev4VrfRegGetRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLVRFGetStatsMsgRsp>* AsyncSLRoutev4VrfGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLVRFGetStatsMsgRsp>* PrepareAsyncSLRoutev4VrfGetStatsRaw(::grpc::ClientContext* context, const ::service_layer::SLVrfRegGetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4MsgRsp>* AsyncSLRoutev4OpRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4MsgRsp>* PrepareAsyncSLRoutev4OpRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4GetMsgRsp>* AsyncSLRoutev4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLRoutev4GetMsgRsp>* PrepareAsyncSLRoutev4GetRaw(::grpc::ClientContext* context, const ::service_layer::SLRoutev4GetMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>* SLRoutev4OpStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>* AsyncSLRoutev4OpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>* PrepareAsyncSLRoutev4OpStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>* SLRoutev4GetStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>* AsyncSLRoutev4GetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>* PrepareAsyncSLRoutev4GetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>* SLRoutev4GetNotifStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>* AsyncSLRoutev4GetNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLRouteGetNotifMsg, ::service_layer::SLRoutev4Notif>* PrepareAsyncSLRoutev4GetNotifStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4GlobalsGet_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4GlobalStatsGet_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4VrfRegOp_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4VrfRegGet_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4VrfGetStats_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4Op_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4Get_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4OpStream_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4GetStream_;
    const ::grpc::RpcMethod rpcmethod_SLRoutev4GetNotifStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Global Route operations
    //
    //
    // Used to retrieve Global Route information
    virtual ::grpc::Status SLRoutev4GlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalsGetMsg* request, ::service_layer::SLRouteGlobalsGetMsgRsp* response);
    // Used to retrieve Global Route Stats
    virtual ::grpc::Status SLRoutev4GlobalStatsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg* request, ::service_layer::SLRouteGlobalStatsGetMsgRsp* response);
    //
    // VRF registration operations
    //
    //
    // SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF registration: Sends a list of VRF registration messages
    //     and expects a list of registration responses.
    //     A client Must Register a VRF BEFORE routes can be added/modified in
    //    the associated VRF.
    //
    // SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF Un-registeration: Sends a list of VRF un-registration messages
    //     and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in this VRF. All previously installed routes would be lost.
    //
    // SLVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their Routes.
    virtual ::grpc::Status SLRoutev4VrfRegOp(::grpc::ServerContext* context, const ::service_layer::SLVrfRegMsg* request, ::service_layer::SLVrfRegMsgRsp* response);
    // VRF get. Used to retrieve VRF attributes from the server.
    virtual ::grpc::Status SLRoutev4VrfRegGet(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVrfRegGetMsgRsp* response);
    // Used to retrieve VRF Stats from the server.
    virtual ::grpc::Status SLRoutev4VrfGetStats(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVRFGetStatsMsgRsp* response);
    //
    // Route operations
    //
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    //     Route add. Fails if the route already exists.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    //     Route update. Creates or updates the route.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    //     Route delete. The route path is not necessary to delete the route.
    virtual ::grpc::Status SLRoutev4Op(::grpc::ServerContext* context, const ::service_layer::SLRoutev4Msg* request, ::service_layer::SLRoutev4MsgRsp* response);
    // Retrieves route attributes.
    virtual ::grpc::Status SLRoutev4Get(::grpc::ServerContext* context, const ::service_layer::SLRoutev4GetMsg* request, ::service_layer::SLRoutev4GetMsgRsp* response);
    //
    // Stream Route operations
    //
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    //     Route add. Fails if the route already exists.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    //     Route update. Creates or updates the route.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    //     Route delete. The route path is not necessary to delete the route.
    virtual ::grpc::Status SLRoutev4OpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4MsgRsp, ::service_layer::SLRoutev4Msg>* stream);
    // Retrieves route attributes.
    virtual ::grpc::Status SLRoutev4GetStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4GetMsgRsp, ::service_layer::SLRoutev4GetMsg>* stream);
    //
    // Route Redistribution Operations
    //
    //
    // This call is used to get a stream of route notifications.
    // It can be used to get "push" notifications for route
    // adds/updates/deletes.
    // The caller must maintain the GRPC channel as long as there is
    // interest in route notifications.
    //
    // The call takes a stream of per-VRF notification requests.
    // The success/failure of the notification request is relayed in the
    // SLRouteNotifStatus followed by a Start marker, any routes if present,
    // and an End Marker.
    //
    virtual ::grpc::Status SLRoutev4GetNotifStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4Notif, ::service_layer::SLRouteGetNotifMsg>* stream);
    //
    // @}
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4GlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4GlobalsGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLRoutev4GlobalsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalsGetMsg* request, ::service_layer::SLRouteGlobalsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4GlobalsGet(::grpc::ServerContext* context, ::service_layer::SLRouteGlobalsGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLRouteGlobalsGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4GlobalStatsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4GlobalStatsGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLRoutev4GlobalStatsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GlobalStatsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg* request, ::service_layer::SLRouteGlobalStatsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4GlobalStatsGet(::grpc::ServerContext* context, ::service_layer::SLRouteGlobalStatsGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLRouteGlobalStatsGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4VrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4VrfRegOp() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SLRoutev4VrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4VrfRegOp(::grpc::ServerContext* context, const ::service_layer::SLVrfRegMsg* request, ::service_layer::SLVrfRegMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4VrfRegOp(::grpc::ServerContext* context, ::service_layer::SLVrfRegMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLVrfRegMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4VrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4VrfRegGet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SLRoutev4VrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4VrfRegGet(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVrfRegGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4VrfRegGet(::grpc::ServerContext* context, ::service_layer::SLVrfRegGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLVrfRegGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4VrfGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4VrfGetStats() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SLRoutev4VrfGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4VrfGetStats(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVRFGetStatsMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4VrfGetStats(::grpc::ServerContext* context, ::service_layer::SLVrfRegGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLVRFGetStatsMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4Op : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4Op() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SLRoutev4Op() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4Op(::grpc::ServerContext* context, const ::service_layer::SLRoutev4Msg* request, ::service_layer::SLRoutev4MsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4Op(::grpc::ServerContext* context, ::service_layer::SLRoutev4Msg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLRoutev4MsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4Get() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SLRoutev4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4Get(::grpc::ServerContext* context, const ::service_layer::SLRoutev4GetMsg* request, ::service_layer::SLRoutev4GetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4Get(::grpc::ServerContext* context, ::service_layer::SLRoutev4GetMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLRoutev4GetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4OpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4OpStream() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SLRoutev4OpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4OpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4MsgRsp, ::service_layer::SLRoutev4Msg>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4OpStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLRoutev4MsgRsp, ::service_layer::SLRoutev4Msg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4GetStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SLRoutev4GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GetStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4GetMsgRsp, ::service_layer::SLRoutev4GetMsg>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4GetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLRoutev4GetMsgRsp, ::service_layer::SLRoutev4GetMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLRoutev4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SLRoutev4GetNotifStream() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SLRoutev4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GetNotifStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4Notif, ::service_layer::SLRouteGetNotifMsg>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLRoutev4GetNotifStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLRoutev4Notif, ::service_layer::SLRouteGetNotifMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(9, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLRoutev4GlobalsGet<WithAsyncMethod_SLRoutev4GlobalStatsGet<WithAsyncMethod_SLRoutev4VrfRegOp<WithAsyncMethod_SLRoutev4VrfRegGet<WithAsyncMethod_SLRoutev4VrfGetStats<WithAsyncMethod_SLRoutev4Op<WithAsyncMethod_SLRoutev4Get<WithAsyncMethod_SLRoutev4OpStream<WithAsyncMethod_SLRoutev4GetStream<WithAsyncMethod_SLRoutev4GetNotifStream<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4GlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4GlobalsGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLRoutev4GlobalsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalsGetMsg* request, ::service_layer::SLRouteGlobalsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4GlobalStatsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4GlobalStatsGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLRoutev4GlobalStatsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GlobalStatsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg* request, ::service_layer::SLRouteGlobalStatsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4VrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4VrfRegOp() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SLRoutev4VrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4VrfRegOp(::grpc::ServerContext* context, const ::service_layer::SLVrfRegMsg* request, ::service_layer::SLVrfRegMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4VrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4VrfRegGet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SLRoutev4VrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4VrfRegGet(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVrfRegGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4VrfGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4VrfGetStats() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SLRoutev4VrfGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4VrfGetStats(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVRFGetStatsMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4Op : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4Op() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SLRoutev4Op() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4Op(::grpc::ServerContext* context, const ::service_layer::SLRoutev4Msg* request, ::service_layer::SLRoutev4MsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4Get() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SLRoutev4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4Get(::grpc::ServerContext* context, const ::service_layer::SLRoutev4GetMsg* request, ::service_layer::SLRoutev4GetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4OpStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4OpStream() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SLRoutev4OpStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4OpStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4MsgRsp, ::service_layer::SLRoutev4Msg>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4GetStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SLRoutev4GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GetStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4GetMsgRsp, ::service_layer::SLRoutev4GetMsg>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLRoutev4GetNotifStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SLRoutev4GetNotifStream() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SLRoutev4GetNotifStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLRoutev4GetNotifStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLRoutev4Notif, ::service_layer::SLRouteGetNotifMsg>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4GlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4GlobalsGet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLRouteGlobalsGetMsg, ::service_layer::SLRouteGlobalsGetMsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4GlobalsGet<BaseClass>::StreamedSLRoutev4GlobalsGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4GlobalsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4GlobalsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalsGetMsg* request, ::service_layer::SLRouteGlobalsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4GlobalsGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLRouteGlobalsGetMsg,::service_layer::SLRouteGlobalsGetMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4GlobalStatsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4GlobalStatsGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLRouteGlobalStatsGetMsg, ::service_layer::SLRouteGlobalStatsGetMsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4GlobalStatsGet<BaseClass>::StreamedSLRoutev4GlobalStatsGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4GlobalStatsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4GlobalStatsGet(::grpc::ServerContext* context, const ::service_layer::SLRouteGlobalStatsGetMsg* request, ::service_layer::SLRouteGlobalStatsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4GlobalStatsGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLRouteGlobalStatsGetMsg,::service_layer::SLRouteGlobalStatsGetMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4VrfRegOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4VrfRegOp() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLVrfRegMsg, ::service_layer::SLVrfRegMsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4VrfRegOp<BaseClass>::StreamedSLRoutev4VrfRegOp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4VrfRegOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4VrfRegOp(::grpc::ServerContext* context, const ::service_layer::SLVrfRegMsg* request, ::service_layer::SLVrfRegMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4VrfRegOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLVrfRegMsg,::service_layer::SLVrfRegMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4VrfRegGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4VrfRegGet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLVrfRegGetMsg, ::service_layer::SLVrfRegGetMsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4VrfRegGet<BaseClass>::StreamedSLRoutev4VrfRegGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4VrfRegGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4VrfRegGet(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVrfRegGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4VrfRegGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLVrfRegGetMsg,::service_layer::SLVrfRegGetMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4VrfGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4VrfGetStats() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLVrfRegGetMsg, ::service_layer::SLVRFGetStatsMsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4VrfGetStats<BaseClass>::StreamedSLRoutev4VrfGetStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4VrfGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4VrfGetStats(::grpc::ServerContext* context, const ::service_layer::SLVrfRegGetMsg* request, ::service_layer::SLVRFGetStatsMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4VrfGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLVrfRegGetMsg,::service_layer::SLVRFGetStatsMsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4Op : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4Op() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLRoutev4Msg, ::service_layer::SLRoutev4MsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4Op<BaseClass>::StreamedSLRoutev4Op, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4Op() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4Op(::grpc::ServerContext* context, const ::service_layer::SLRoutev4Msg* request, ::service_layer::SLRoutev4MsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4Op(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLRoutev4Msg,::service_layer::SLRoutev4MsgRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLRoutev4Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SLRoutev4Get() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::service_layer::SLRoutev4GetMsg, ::service_layer::SLRoutev4GetMsgRsp>(std::bind(&WithStreamedUnaryMethod_SLRoutev4Get<BaseClass>::StreamedSLRoutev4Get, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SLRoutev4Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLRoutev4Get(::grpc::ServerContext* context, const ::service_layer::SLRoutev4GetMsg* request, ::service_layer::SLRoutev4GetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLRoutev4Get(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLRoutev4GetMsg,::service_layer::SLRoutev4GetMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLRoutev4GlobalsGet<WithStreamedUnaryMethod_SLRoutev4GlobalStatsGet<WithStreamedUnaryMethod_SLRoutev4VrfRegOp<WithStreamedUnaryMethod_SLRoutev4VrfRegGet<WithStreamedUnaryMethod_SLRoutev4VrfGetStats<WithStreamedUnaryMethod_SLRoutev4Op<WithStreamedUnaryMethod_SLRoutev4Get<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLRoutev4GlobalsGet<WithStreamedUnaryMethod_SLRoutev4GlobalStatsGet<WithStreamedUnaryMethod_SLRoutev4VrfRegOp<WithStreamedUnaryMethod_SLRoutev4VrfRegGet<WithStreamedUnaryMethod_SLRoutev4VrfGetStats<WithStreamedUnaryMethod_SLRoutev4Op<WithStreamedUnaryMethod_SLRoutev4Get<Service > > > > > > > StreamedService;
};
// @addtogroup SLRouteIPv4Oper
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5froute_5fipv4_2eproto__INCLUDED
