// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_route_ipv4.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fipv4_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fipv4_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_route_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5froute_5fipv4_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5froute_5fipv4_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5froute_5fipv4_2eproto;
namespace service_layer {
class SLRoutev4;
class SLRoutev4DefaultTypeInternal;
extern SLRoutev4DefaultTypeInternal _SLRoutev4_default_instance_;
class SLRoutev4GetMsg;
class SLRoutev4GetMsgDefaultTypeInternal;
extern SLRoutev4GetMsgDefaultTypeInternal _SLRoutev4GetMsg_default_instance_;
class SLRoutev4GetMsgRsp;
class SLRoutev4GetMsgRspDefaultTypeInternal;
extern SLRoutev4GetMsgRspDefaultTypeInternal _SLRoutev4GetMsgRsp_default_instance_;
class SLRoutev4Msg;
class SLRoutev4MsgDefaultTypeInternal;
extern SLRoutev4MsgDefaultTypeInternal _SLRoutev4Msg_default_instance_;
class SLRoutev4MsgRsp;
class SLRoutev4MsgRspDefaultTypeInternal;
extern SLRoutev4MsgRspDefaultTypeInternal _SLRoutev4MsgRsp_default_instance_;
class SLRoutev4Notif;
class SLRoutev4NotifDefaultTypeInternal;
extern SLRoutev4NotifDefaultTypeInternal _SLRoutev4Notif_default_instance_;
class SLRoutev4NotifRoute;
class SLRoutev4NotifRouteDefaultTypeInternal;
extern SLRoutev4NotifRouteDefaultTypeInternal _SLRoutev4NotifRoute_default_instance_;
class SLRoutev4Res;
class SLRoutev4ResDefaultTypeInternal;
extern SLRoutev4ResDefaultTypeInternal _SLRoutev4Res_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLRoutev4* Arena::CreateMaybeMessage<::service_layer::SLRoutev4>(Arena*);
template<> ::service_layer::SLRoutev4GetMsg* Arena::CreateMaybeMessage<::service_layer::SLRoutev4GetMsg>(Arena*);
template<> ::service_layer::SLRoutev4GetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLRoutev4GetMsgRsp>(Arena*);
template<> ::service_layer::SLRoutev4Msg* Arena::CreateMaybeMessage<::service_layer::SLRoutev4Msg>(Arena*);
template<> ::service_layer::SLRoutev4MsgRsp* Arena::CreateMaybeMessage<::service_layer::SLRoutev4MsgRsp>(Arena*);
template<> ::service_layer::SLRoutev4Notif* Arena::CreateMaybeMessage<::service_layer::SLRoutev4Notif>(Arena*);
template<> ::service_layer::SLRoutev4NotifRoute* Arena::CreateMaybeMessage<::service_layer::SLRoutev4NotifRoute>(Arena*);
template<> ::service_layer::SLRoutev4Res* Arena::CreateMaybeMessage<::service_layer::SLRoutev4Res>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

// ===================================================================

class SLRoutev4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4) */ {
 public:
  inline SLRoutev4() : SLRoutev4(nullptr) {};
  virtual ~SLRoutev4();

  SLRoutev4(const SLRoutev4& from);
  SLRoutev4(SLRoutev4&& from) noexcept
    : SLRoutev4() {
    *this = ::std::move(from);
  }

  inline SLRoutev4& operator=(const SLRoutev4& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4& operator=(SLRoutev4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4*>(
               &_SLRoutev4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLRoutev4& a, SLRoutev4& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4* New() const final {
    return CreateMaybeMessage<SLRoutev4>(nullptr);
  }

  SLRoutev4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4& from);
  void MergeFrom(const SLRoutev4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4";
  }
  protected:
  explicit SLRoutev4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathListFieldNumber = 4,
    kRouteCommonFieldNumber = 3,
    kPrefixFieldNumber = 1,
    kPrefixLenFieldNumber = 2,
  };
  // repeated .service_layer.SLRoutePath PathList = 4;
  int pathlist_size() const;
  private:
  int _internal_pathlist_size() const;
  public:
  void clear_pathlist();
  ::service_layer::SLRoutePath* mutable_pathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >*
      mutable_pathlist();
  private:
  const ::service_layer::SLRoutePath& _internal_pathlist(int index) const;
  ::service_layer::SLRoutePath* _internal_add_pathlist();
  public:
  const ::service_layer::SLRoutePath& pathlist(int index) const;
  ::service_layer::SLRoutePath* add_pathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >&
      pathlist() const;

  // .service_layer.SLRouteCommon RouteCommon = 3;
  bool has_routecommon() const;
  private:
  bool _internal_has_routecommon() const;
  public:
  void clear_routecommon();
  const ::service_layer::SLRouteCommon& routecommon() const;
  ::service_layer::SLRouteCommon* release_routecommon();
  ::service_layer::SLRouteCommon* mutable_routecommon();
  void set_allocated_routecommon(::service_layer::SLRouteCommon* routecommon);
  private:
  const ::service_layer::SLRouteCommon& _internal_routecommon() const;
  ::service_layer::SLRouteCommon* _internal_mutable_routecommon();
  public:
  void unsafe_arena_set_allocated_routecommon(
      ::service_layer::SLRouteCommon* routecommon);
  ::service_layer::SLRouteCommon* unsafe_arena_release_routecommon();

  // uint32 Prefix = 1;
  void clear_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix() const;
  void set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix() const;
  void _internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 PrefixLen = 2;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath > pathlist_;
  ::service_layer::SLRouteCommon* routecommon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4Msg) */ {
 public:
  inline SLRoutev4Msg() : SLRoutev4Msg(nullptr) {};
  virtual ~SLRoutev4Msg();

  SLRoutev4Msg(const SLRoutev4Msg& from);
  SLRoutev4Msg(SLRoutev4Msg&& from) noexcept
    : SLRoutev4Msg() {
    *this = ::std::move(from);
  }

  inline SLRoutev4Msg& operator=(const SLRoutev4Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4Msg& operator=(SLRoutev4Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4Msg* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4Msg*>(
               &_SLRoutev4Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLRoutev4Msg& a, SLRoutev4Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4Msg* New() const final {
    return CreateMaybeMessage<SLRoutev4Msg>(nullptr);
  }

  SLRoutev4Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4Msg& from);
  void MergeFrom(const SLRoutev4Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4Msg";
  }
  protected:
  explicit SLRoutev4Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 4,
    kVrfNameFieldNumber = 3,
    kCorrelatorFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLRoutev4 Routes = 4;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::service_layer::SLRoutev4* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >*
      mutable_routes();
  private:
  const ::service_layer::SLRoutev4& _internal_routes(int index) const;
  ::service_layer::SLRoutev4* _internal_add_routes();
  public:
  const ::service_layer::SLRoutev4& routes(int index) const;
  ::service_layer::SLRoutev4* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >&
      routes() const;

  // string VrfName = 3;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // uint64 Correlator = 2;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 > routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4Res PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4Res) */ {
 public:
  inline SLRoutev4Res() : SLRoutev4Res(nullptr) {};
  virtual ~SLRoutev4Res();

  SLRoutev4Res(const SLRoutev4Res& from);
  SLRoutev4Res(SLRoutev4Res&& from) noexcept
    : SLRoutev4Res() {
    *this = ::std::move(from);
  }

  inline SLRoutev4Res& operator=(const SLRoutev4Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4Res& operator=(SLRoutev4Res&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4Res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4Res* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4Res*>(
               &_SLRoutev4Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLRoutev4Res& a, SLRoutev4Res& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4Res* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4Res* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4Res* New() const final {
    return CreateMaybeMessage<SLRoutev4Res>(nullptr);
  }

  SLRoutev4Res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4Res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4Res& from);
  void MergeFrom(const SLRoutev4Res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4Res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4Res";
  }
  protected:
  explicit SLRoutev4Res(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrStatusFieldNumber = 1,
    kPrefixFieldNumber = 2,
    kPrefixLenFieldNumber = 3,
  };
  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 Prefix = 2;
  void clear_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix() const;
  void set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix() const;
  void _internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 PrefixLen = 3;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4Res)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4MsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4MsgRsp) */ {
 public:
  inline SLRoutev4MsgRsp() : SLRoutev4MsgRsp(nullptr) {};
  virtual ~SLRoutev4MsgRsp();

  SLRoutev4MsgRsp(const SLRoutev4MsgRsp& from);
  SLRoutev4MsgRsp(SLRoutev4MsgRsp&& from) noexcept
    : SLRoutev4MsgRsp() {
    *this = ::std::move(from);
  }

  inline SLRoutev4MsgRsp& operator=(const SLRoutev4MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4MsgRsp& operator=(SLRoutev4MsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4MsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4MsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4MsgRsp*>(
               &_SLRoutev4MsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLRoutev4MsgRsp& a, SLRoutev4MsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4MsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4MsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4MsgRsp* New() const final {
    return CreateMaybeMessage<SLRoutev4MsgRsp>(nullptr);
  }

  SLRoutev4MsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4MsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4MsgRsp& from);
  void MergeFrom(const SLRoutev4MsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4MsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4MsgRsp";
  }
  protected:
  explicit SLRoutev4MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 4,
    kVrfNameFieldNumber = 2,
    kStatusSummaryFieldNumber = 3,
    kCorrelatorFieldNumber = 1,
  };
  // repeated .service_layer.SLRoutev4Res Results = 4;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLRoutev4Res* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4Res >*
      mutable_results();
  private:
  const ::service_layer::SLRoutev4Res& _internal_results(int index) const;
  ::service_layer::SLRoutev4Res* _internal_add_results();
  public:
  const ::service_layer::SLRoutev4Res& results(int index) const;
  ::service_layer::SLRoutev4Res* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4Res >&
      results() const;

  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus StatusSummary = 3;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4MsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4Res > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* statussummary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4GetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4GetMsg) */ {
 public:
  inline SLRoutev4GetMsg() : SLRoutev4GetMsg(nullptr) {};
  virtual ~SLRoutev4GetMsg();

  SLRoutev4GetMsg(const SLRoutev4GetMsg& from);
  SLRoutev4GetMsg(SLRoutev4GetMsg&& from) noexcept
    : SLRoutev4GetMsg() {
    *this = ::std::move(from);
  }

  inline SLRoutev4GetMsg& operator=(const SLRoutev4GetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4GetMsg& operator=(SLRoutev4GetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4GetMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4GetMsg* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4GetMsg*>(
               &_SLRoutev4GetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLRoutev4GetMsg& a, SLRoutev4GetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4GetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4GetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4GetMsg* New() const final {
    return CreateMaybeMessage<SLRoutev4GetMsg>(nullptr);
  }

  SLRoutev4GetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4GetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4GetMsg& from);
  void MergeFrom(const SLRoutev4GetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4GetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4GetMsg";
  }
  protected:
  explicit SLRoutev4GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kCorrelatorFieldNumber = 1,
    kPrefixFieldNumber = 3,
    kPrefixLenFieldNumber = 4,
    kEntriesCountFieldNumber = 5,
    kGetNextFieldNumber = 6,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 Prefix = 3;
  void clear_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix() const;
  void set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix() const;
  void _internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 PrefixLen = 4;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 EntriesCount = 5;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 6;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4GetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4GetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4GetMsgRsp) */ {
 public:
  inline SLRoutev4GetMsgRsp() : SLRoutev4GetMsgRsp(nullptr) {};
  virtual ~SLRoutev4GetMsgRsp();

  SLRoutev4GetMsgRsp(const SLRoutev4GetMsgRsp& from);
  SLRoutev4GetMsgRsp(SLRoutev4GetMsgRsp&& from) noexcept
    : SLRoutev4GetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLRoutev4GetMsgRsp& operator=(const SLRoutev4GetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4GetMsgRsp& operator=(SLRoutev4GetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4GetMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4GetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4GetMsgRsp*>(
               &_SLRoutev4GetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLRoutev4GetMsgRsp& a, SLRoutev4GetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4GetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4GetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4GetMsgRsp* New() const final {
    return CreateMaybeMessage<SLRoutev4GetMsgRsp>(nullptr);
  }

  SLRoutev4GetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4GetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4GetMsgRsp& from);
  void MergeFrom(const SLRoutev4GetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4GetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4GetMsgRsp";
  }
  protected:
  explicit SLRoutev4GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kVrfNameFieldNumber = 3,
    kErrStatusFieldNumber = 4,
    kCorrelatorFieldNumber = 1,
    kEofFieldNumber = 2,
  };
  // repeated .service_layer.SLRoutev4 Entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLRoutev4* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >*
      mutable_entries();
  private:
  const ::service_layer::SLRoutev4& _internal_entries(int index) const;
  ::service_layer::SLRoutev4* _internal_add_entries();
  public:
  const ::service_layer::SLRoutev4& entries(int index) const;
  ::service_layer::SLRoutev4* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >&
      entries() const;

  // string VrfName = 3;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus ErrStatus = 4;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool Eof = 2;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4GetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4NotifRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4NotifRoute) */ {
 public:
  inline SLRoutev4NotifRoute() : SLRoutev4NotifRoute(nullptr) {};
  virtual ~SLRoutev4NotifRoute();

  SLRoutev4NotifRoute(const SLRoutev4NotifRoute& from);
  SLRoutev4NotifRoute(SLRoutev4NotifRoute&& from) noexcept
    : SLRoutev4NotifRoute() {
    *this = ::std::move(from);
  }

  inline SLRoutev4NotifRoute& operator=(const SLRoutev4NotifRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4NotifRoute& operator=(SLRoutev4NotifRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4NotifRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4NotifRoute* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4NotifRoute*>(
               &_SLRoutev4NotifRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLRoutev4NotifRoute& a, SLRoutev4NotifRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4NotifRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4NotifRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4NotifRoute* New() const final {
    return CreateMaybeMessage<SLRoutev4NotifRoute>(nullptr);
  }

  SLRoutev4NotifRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4NotifRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4NotifRoute& from);
  void MergeFrom(const SLRoutev4NotifRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4NotifRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4NotifRoute";
  }
  protected:
  explicit SLRoutev4NotifRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kVrfNameFieldNumber = 1,
  };
  // repeated .service_layer.SLRoutev4 Entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLRoutev4* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >*
      mutable_entries();
  private:
  const ::service_layer::SLRoutev4& _internal_entries(int index) const;
  ::service_layer::SLRoutev4* _internal_add_entries();
  public:
  const ::service_layer::SLRoutev4& entries(int index) const;
  ::service_layer::SLRoutev4* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >&
      entries() const;

  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vrfname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vrfname(
      std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4NotifRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev4Notif PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev4Notif) */ {
 public:
  inline SLRoutev4Notif() : SLRoutev4Notif(nullptr) {};
  virtual ~SLRoutev4Notif();

  SLRoutev4Notif(const SLRoutev4Notif& from);
  SLRoutev4Notif(SLRoutev4Notif&& from) noexcept
    : SLRoutev4Notif() {
    *this = ::std::move(from);
  }

  inline SLRoutev4Notif& operator=(const SLRoutev4Notif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev4Notif& operator=(SLRoutev4Notif&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev4Notif& default_instance();

  enum EventCase {
    kErrStatus = 2,
    kNotifStatus = 3,
    kRoute = 4,
    kMarker = 5,
    kVrf = 6,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLRoutev4Notif* internal_default_instance() {
    return reinterpret_cast<const SLRoutev4Notif*>(
               &_SLRoutev4Notif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLRoutev4Notif& a, SLRoutev4Notif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev4Notif* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev4Notif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev4Notif* New() const final {
    return CreateMaybeMessage<SLRoutev4Notif>(nullptr);
  }

  SLRoutev4Notif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev4Notif>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev4Notif& from);
  void MergeFrom(const SLRoutev4Notif& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev4Notif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev4Notif";
  }
  protected:
  explicit SLRoutev4Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sl_5froute_5fipv4_2eproto);
    return ::descriptor_table_sl_5froute_5fipv4_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kErrStatusFieldNumber = 2,
    kNotifStatusFieldNumber = 3,
    kRouteFieldNumber = 4,
    kMarkerFieldNumber = 5,
    kVrfFieldNumber = 6,
  };
  // .service_layer.SLNotifType EventType = 1;
  void clear_eventtype();
  ::service_layer::SLNotifType eventtype() const;
  void set_eventtype(::service_layer::SLNotifType value);
  private:
  ::service_layer::SLNotifType _internal_eventtype() const;
  void _internal_set_eventtype(::service_layer::SLNotifType value);
  public:

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLRouteNotifStatus NotifStatus = 3;
  bool has_notifstatus() const;
  private:
  bool _internal_has_notifstatus() const;
  public:
  void clear_notifstatus();
  const ::service_layer::SLRouteNotifStatus& notifstatus() const;
  ::service_layer::SLRouteNotifStatus* release_notifstatus();
  ::service_layer::SLRouteNotifStatus* mutable_notifstatus();
  void set_allocated_notifstatus(::service_layer::SLRouteNotifStatus* notifstatus);
  private:
  const ::service_layer::SLRouteNotifStatus& _internal_notifstatus() const;
  ::service_layer::SLRouteNotifStatus* _internal_mutable_notifstatus();
  public:
  void unsafe_arena_set_allocated_notifstatus(
      ::service_layer::SLRouteNotifStatus* notifstatus);
  ::service_layer::SLRouteNotifStatus* unsafe_arena_release_notifstatus();

  // .service_layer.SLRoutev4NotifRoute Route = 4;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::service_layer::SLRoutev4NotifRoute& route() const;
  ::service_layer::SLRoutev4NotifRoute* release_route();
  ::service_layer::SLRoutev4NotifRoute* mutable_route();
  void set_allocated_route(::service_layer::SLRoutev4NotifRoute* route);
  private:
  const ::service_layer::SLRoutev4NotifRoute& _internal_route() const;
  ::service_layer::SLRoutev4NotifRoute* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::service_layer::SLRoutev4NotifRoute* route);
  ::service_layer::SLRoutev4NotifRoute* unsafe_arena_release_route();

  // .service_layer.SLRouteNotifMarker Marker = 5;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  const ::service_layer::SLRouteNotifMarker& marker() const;
  ::service_layer::SLRouteNotifMarker* release_marker();
  ::service_layer::SLRouteNotifMarker* mutable_marker();
  void set_allocated_marker(::service_layer::SLRouteNotifMarker* marker);
  private:
  const ::service_layer::SLRouteNotifMarker& _internal_marker() const;
  ::service_layer::SLRouteNotifMarker* _internal_mutable_marker();
  public:
  void unsafe_arena_set_allocated_marker(
      ::service_layer::SLRouteNotifMarker* marker);
  ::service_layer::SLRouteNotifMarker* unsafe_arena_release_marker();

  // .service_layer.SLVrfNotif Vrf = 6;
  bool has_vrf() const;
  private:
  bool _internal_has_vrf() const;
  public:
  void clear_vrf();
  const ::service_layer::SLVrfNotif& vrf() const;
  ::service_layer::SLVrfNotif* release_vrf();
  ::service_layer::SLVrfNotif* mutable_vrf();
  void set_allocated_vrf(::service_layer::SLVrfNotif* vrf);
  private:
  const ::service_layer::SLVrfNotif& _internal_vrf() const;
  ::service_layer::SLVrfNotif* _internal_mutable_vrf();
  public:
  void unsafe_arena_set_allocated_vrf(
      ::service_layer::SLVrfNotif* vrf);
  ::service_layer::SLVrfNotif* unsafe_arena_release_vrf();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev4Notif)
 private:
  class _Internal;
  void set_has_errstatus();
  void set_has_notifstatus();
  void set_has_route();
  void set_has_marker();
  void set_has_vrf();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int eventtype_;
  union EventUnion {
    EventUnion() {}
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLRouteNotifStatus* notifstatus_;
    ::service_layer::SLRoutev4NotifRoute* route_;
    ::service_layer::SLRouteNotifMarker* marker_;
    ::service_layer::SLVrfNotif* vrf_;
  } Event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sl_5froute_5fipv4_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLRoutev4

// uint32 Prefix = 1;
inline void SLRoutev4::clear_prefix() {
  prefix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4::_internal_prefix() const {
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4.Prefix)
  return _internal_prefix();
}
inline void SLRoutev4::_internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_ = value;
}
inline void SLRoutev4::set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4.Prefix)
}

// uint32 PrefixLen = 2;
inline void SLRoutev4::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4::prefixlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4.PrefixLen)
  return _internal_prefixlen();
}
inline void SLRoutev4::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void SLRoutev4::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4.PrefixLen)
}

// .service_layer.SLRouteCommon RouteCommon = 3;
inline bool SLRoutev4::_internal_has_routecommon() const {
  return this != internal_default_instance() && routecommon_ != nullptr;
}
inline bool SLRoutev4::has_routecommon() const {
  return _internal_has_routecommon();
}
inline const ::service_layer::SLRouteCommon& SLRoutev4::_internal_routecommon() const {
  const ::service_layer::SLRouteCommon* p = routecommon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLRouteCommon*>(
      &::service_layer::_SLRouteCommon_default_instance_);
}
inline const ::service_layer::SLRouteCommon& SLRoutev4::routecommon() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4.RouteCommon)
  return _internal_routecommon();
}
inline void SLRoutev4::unsafe_arena_set_allocated_routecommon(
    ::service_layer::SLRouteCommon* routecommon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routecommon_);
  }
  routecommon_ = routecommon;
  if (routecommon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4.RouteCommon)
}
inline ::service_layer::SLRouteCommon* SLRoutev4::release_routecommon() {
  auto temp = unsafe_arena_release_routecommon();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLRouteCommon* SLRoutev4::unsafe_arena_release_routecommon() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4.RouteCommon)
  
  ::service_layer::SLRouteCommon* temp = routecommon_;
  routecommon_ = nullptr;
  return temp;
}
inline ::service_layer::SLRouteCommon* SLRoutev4::_internal_mutable_routecommon() {
  
  if (routecommon_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLRouteCommon>(GetArena());
    routecommon_ = p;
  }
  return routecommon_;
}
inline ::service_layer::SLRouteCommon* SLRoutev4::mutable_routecommon() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4.RouteCommon)
  return _internal_mutable_routecommon();
}
inline void SLRoutev4::set_allocated_routecommon(::service_layer::SLRouteCommon* routecommon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routecommon_);
  }
  if (routecommon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routecommon)->GetArena();
    if (message_arena != submessage_arena) {
      routecommon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routecommon, submessage_arena);
    }
    
  } else {
    
  }
  routecommon_ = routecommon;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4.RouteCommon)
}

// repeated .service_layer.SLRoutePath PathList = 4;
inline int SLRoutev4::_internal_pathlist_size() const {
  return pathlist_.size();
}
inline int SLRoutev4::pathlist_size() const {
  return _internal_pathlist_size();
}
inline ::service_layer::SLRoutePath* SLRoutev4::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4.PathList)
  return pathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >*
SLRoutev4::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev4.PathList)
  return &pathlist_;
}
inline const ::service_layer::SLRoutePath& SLRoutev4::_internal_pathlist(int index) const {
  return pathlist_.Get(index);
}
inline const ::service_layer::SLRoutePath& SLRoutev4::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4.PathList)
  return _internal_pathlist(index);
}
inline ::service_layer::SLRoutePath* SLRoutev4::_internal_add_pathlist() {
  return pathlist_.Add();
}
inline ::service_layer::SLRoutePath* SLRoutev4::add_pathlist() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev4.PathList)
  return _internal_add_pathlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >&
SLRoutev4::pathlist() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev4.PathList)
  return pathlist_;
}

// -------------------------------------------------------------------

// SLRoutev4Msg

// .service_layer.SLObjectOp Oper = 1;
inline void SLRoutev4Msg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLRoutev4Msg::_internal_oper() const {
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline ::service_layer::SLObjectOp SLRoutev4Msg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Msg.Oper)
  return _internal_oper();
}
inline void SLRoutev4Msg::_internal_set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
}
inline void SLRoutev4Msg::set_oper(::service_layer::SLObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4Msg.Oper)
}

// uint64 Correlator = 2;
inline void SLRoutev4Msg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4Msg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4Msg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Msg.Correlator)
  return _internal_correlator();
}
inline void SLRoutev4Msg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev4Msg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4Msg.Correlator)
}

// string VrfName = 3;
inline void SLRoutev4Msg::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutev4Msg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Msg.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev4Msg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4Msg.VrfName)
}
inline std::string* SLRoutev4Msg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Msg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev4Msg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev4Msg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutev4Msg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev4Msg.VrfName)
}
inline void SLRoutev4Msg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev4Msg.VrfName)
}
inline void SLRoutev4Msg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev4Msg.VrfName)
}
inline std::string* SLRoutev4Msg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutev4Msg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Msg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev4Msg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4Msg.VrfName)
}
inline std::string* SLRoutev4Msg::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4Msg.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutev4Msg::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Msg.VrfName)
}

// repeated .service_layer.SLRoutev4 Routes = 4;
inline int SLRoutev4Msg::_internal_routes_size() const {
  return routes_.size();
}
inline int SLRoutev4Msg::routes_size() const {
  return _internal_routes_size();
}
inline void SLRoutev4Msg::clear_routes() {
  routes_.Clear();
}
inline ::service_layer::SLRoutev4* SLRoutev4Msg::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Msg.Routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >*
SLRoutev4Msg::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev4Msg.Routes)
  return &routes_;
}
inline const ::service_layer::SLRoutev4& SLRoutev4Msg::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::service_layer::SLRoutev4& SLRoutev4Msg::routes(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Msg.Routes)
  return _internal_routes(index);
}
inline ::service_layer::SLRoutev4* SLRoutev4Msg::_internal_add_routes() {
  return routes_.Add();
}
inline ::service_layer::SLRoutev4* SLRoutev4Msg::add_routes() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev4Msg.Routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >&
SLRoutev4Msg::routes() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev4Msg.Routes)
  return routes_;
}

// -------------------------------------------------------------------

// SLRoutev4Res

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLRoutev4Res::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLRoutev4Res::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLRoutev4Res::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev4Res::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Res.ErrStatus)
  return _internal_errstatus();
}
inline void SLRoutev4Res::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Res.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRoutev4Res::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev4Res::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Res.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev4Res::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRoutev4Res::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Res.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLRoutev4Res::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4Res.ErrStatus)
}

// uint32 Prefix = 2;
inline void SLRoutev4Res::clear_prefix() {
  prefix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4Res::_internal_prefix() const {
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4Res::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Res.Prefix)
  return _internal_prefix();
}
inline void SLRoutev4Res::_internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_ = value;
}
inline void SLRoutev4Res::set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4Res.Prefix)
}

// uint32 PrefixLen = 3;
inline void SLRoutev4Res::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4Res::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4Res::prefixlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Res.PrefixLen)
  return _internal_prefixlen();
}
inline void SLRoutev4Res::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void SLRoutev4Res::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4Res.PrefixLen)
}

// -------------------------------------------------------------------

// SLRoutev4MsgRsp

// uint64 Correlator = 1;
inline void SLRoutev4MsgRsp::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4MsgRsp::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4MsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4MsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLRoutev4MsgRsp::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev4MsgRsp::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4MsgRsp.Correlator)
}

// string VrfName = 2;
inline void SLRoutev4MsgRsp::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutev4MsgRsp::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4MsgRsp.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev4MsgRsp::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4MsgRsp.VrfName)
}
inline std::string* SLRoutev4MsgRsp::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4MsgRsp.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev4MsgRsp::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev4MsgRsp::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutev4MsgRsp::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev4MsgRsp.VrfName)
}
inline void SLRoutev4MsgRsp::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev4MsgRsp.VrfName)
}
inline void SLRoutev4MsgRsp::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev4MsgRsp.VrfName)
}
inline std::string* SLRoutev4MsgRsp::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutev4MsgRsp::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4MsgRsp.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev4MsgRsp::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4MsgRsp.VrfName)
}
inline std::string* SLRoutev4MsgRsp::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4MsgRsp.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutev4MsgRsp::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4MsgRsp.VrfName)
}

// .service_layer.SLErrorStatus StatusSummary = 3;
inline bool SLRoutev4MsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLRoutev4MsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLRoutev4MsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev4MsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4MsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLRoutev4MsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4MsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLRoutev4MsgRsp::release_statussummary() {
  auto temp = unsafe_arena_release_statussummary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev4MsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4MsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev4MsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLRoutev4MsgRsp::mutable_statussummary() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4MsgRsp.StatusSummary)
  return _internal_mutable_statussummary();
}
inline void SLRoutev4MsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary)->GetArena();
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4MsgRsp.StatusSummary)
}

// repeated .service_layer.SLRoutev4Res Results = 4;
inline int SLRoutev4MsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLRoutev4MsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLRoutev4MsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLRoutev4Res* SLRoutev4MsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4MsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4Res >*
SLRoutev4MsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev4MsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLRoutev4Res& SLRoutev4MsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLRoutev4Res& SLRoutev4MsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4MsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLRoutev4Res* SLRoutev4MsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLRoutev4Res* SLRoutev4MsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev4MsgRsp.Results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4Res >&
SLRoutev4MsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev4MsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLRoutev4GetMsg

// uint64 Correlator = 1;
inline void SLRoutev4GetMsg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4GetMsg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4GetMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsg.Correlator)
  return _internal_correlator();
}
inline void SLRoutev4GetMsg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev4GetMsg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsg.Correlator)
}

// string VrfName = 2;
inline void SLRoutev4GetMsg::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutev4GetMsg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsg.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev4GetMsg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsg.VrfName)
}
inline std::string* SLRoutev4GetMsg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4GetMsg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev4GetMsg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev4GetMsg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutev4GetMsg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev4GetMsg.VrfName)
}
inline void SLRoutev4GetMsg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev4GetMsg.VrfName)
}
inline void SLRoutev4GetMsg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev4GetMsg.VrfName)
}
inline std::string* SLRoutev4GetMsg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutev4GetMsg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4GetMsg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev4GetMsg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4GetMsg.VrfName)
}
inline std::string* SLRoutev4GetMsg::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4GetMsg.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutev4GetMsg::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4GetMsg.VrfName)
}

// uint32 Prefix = 3;
inline void SLRoutev4GetMsg::clear_prefix() {
  prefix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4GetMsg::_internal_prefix() const {
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4GetMsg::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsg.Prefix)
  return _internal_prefix();
}
inline void SLRoutev4GetMsg::_internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_ = value;
}
inline void SLRoutev4GetMsg::set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsg.Prefix)
}

// uint32 PrefixLen = 4;
inline void SLRoutev4GetMsg::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4GetMsg::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4GetMsg::prefixlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsg.PrefixLen)
  return _internal_prefixlen();
}
inline void SLRoutev4GetMsg::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void SLRoutev4GetMsg::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsg.PrefixLen)
}

// uint32 EntriesCount = 5;
inline void SLRoutev4GetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4GetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev4GetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLRoutev4GetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLRoutev4GetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsg.EntriesCount)
}

// bool GetNext = 6;
inline void SLRoutev4GetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLRoutev4GetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLRoutev4GetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsg.GetNext)
  return _internal_getnext();
}
inline void SLRoutev4GetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLRoutev4GetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLRoutev4GetMsgRsp

// uint64 Correlator = 1;
inline void SLRoutev4GetMsgRsp::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4GetMsgRsp::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev4GetMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLRoutev4GetMsgRsp::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev4GetMsgRsp::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsgRsp.Correlator)
}

// bool Eof = 2;
inline void SLRoutev4GetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLRoutev4GetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLRoutev4GetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLRoutev4GetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLRoutev4GetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsgRsp.Eof)
}

// string VrfName = 3;
inline void SLRoutev4GetMsgRsp::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutev4GetMsgRsp::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsgRsp.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev4GetMsgRsp::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4GetMsgRsp.VrfName)
}
inline std::string* SLRoutev4GetMsgRsp::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4GetMsgRsp.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev4GetMsgRsp::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev4GetMsgRsp::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutev4GetMsgRsp::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev4GetMsgRsp.VrfName)
}
inline void SLRoutev4GetMsgRsp::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev4GetMsgRsp.VrfName)
}
inline void SLRoutev4GetMsgRsp::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev4GetMsgRsp.VrfName)
}
inline std::string* SLRoutev4GetMsgRsp::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutev4GetMsgRsp::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4GetMsgRsp.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev4GetMsgRsp::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4GetMsgRsp.VrfName)
}
inline std::string* SLRoutev4GetMsgRsp::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4GetMsgRsp.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutev4GetMsgRsp::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4GetMsgRsp.VrfName)
}

// .service_layer.SLErrorStatus ErrStatus = 4;
inline bool SLRoutev4GetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLRoutev4GetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLRoutev4GetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service_layer::SLErrorStatus*>(
      &::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev4GetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLRoutev4GetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4GetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRoutev4GetMsgRsp::release_errstatus() {
  auto temp = unsafe_arena_release_errstatus();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev4GetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4GetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev4GetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRoutev4GetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4GetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLRoutev4GetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4GetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLRoutev4 Entries = 5;
inline int SLRoutev4GetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLRoutev4GetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLRoutev4GetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLRoutev4* SLRoutev4GetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4GetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >*
SLRoutev4GetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev4GetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLRoutev4& SLRoutev4GetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLRoutev4& SLRoutev4GetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4GetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLRoutev4* SLRoutev4GetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLRoutev4* SLRoutev4GetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev4GetMsgRsp.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >&
SLRoutev4GetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev4GetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLRoutev4NotifRoute

// string VrfName = 1;
inline void SLRoutev4NotifRoute::clear_vrfname() {
  vrfname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SLRoutev4NotifRoute::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4NotifRoute.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev4NotifRoute::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4NotifRoute.VrfName)
}
inline std::string* SLRoutev4NotifRoute::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4NotifRoute.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev4NotifRoute::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev4NotifRoute::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SLRoutev4NotifRoute::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev4NotifRoute.VrfName)
}
inline void SLRoutev4NotifRoute::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev4NotifRoute.VrfName)
}
inline void SLRoutev4NotifRoute::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev4NotifRoute.VrfName)
}
inline std::string* SLRoutev4NotifRoute::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SLRoutev4NotifRoute::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4NotifRoute.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev4NotifRoute::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev4NotifRoute.VrfName)
}
inline std::string* SLRoutev4NotifRoute::unsafe_arena_release_vrfname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4NotifRoute.VrfName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vrfname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SLRoutev4NotifRoute::unsafe_arena_set_allocated_vrfname(
    std::string* vrfname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vrfname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4NotifRoute.VrfName)
}

// repeated .service_layer.SLRoutev4 Entries = 2;
inline int SLRoutev4NotifRoute::_internal_entries_size() const {
  return entries_.size();
}
inline int SLRoutev4NotifRoute::entries_size() const {
  return _internal_entries_size();
}
inline void SLRoutev4NotifRoute::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLRoutev4* SLRoutev4NotifRoute::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4NotifRoute.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >*
SLRoutev4NotifRoute::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev4NotifRoute.Entries)
  return &entries_;
}
inline const ::service_layer::SLRoutev4& SLRoutev4NotifRoute::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLRoutev4& SLRoutev4NotifRoute::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4NotifRoute.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLRoutev4* SLRoutev4NotifRoute::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLRoutev4* SLRoutev4NotifRoute::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev4NotifRoute.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev4 >&
SLRoutev4NotifRoute::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev4NotifRoute.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLRoutev4Notif

// .service_layer.SLNotifType EventType = 1;
inline void SLRoutev4Notif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLNotifType SLRoutev4Notif::_internal_eventtype() const {
  return static_cast< ::service_layer::SLNotifType >(eventtype_);
}
inline ::service_layer::SLNotifType SLRoutev4Notif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Notif.EventType)
  return _internal_eventtype();
}
inline void SLRoutev4Notif::_internal_set_eventtype(::service_layer::SLNotifType value) {
  
  eventtype_ = value;
}
inline void SLRoutev4Notif::set_eventtype(::service_layer::SLNotifType value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev4Notif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLRoutev4Notif::_internal_has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline bool SLRoutev4Notif::has_errstatus() const {
  return _internal_has_errstatus();
}
inline void SLRoutev4Notif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline ::service_layer::SLErrorStatus* SLRoutev4Notif::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
      ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLErrorStatus& SLRoutev4Notif::_internal_errstatus() const {
  return _internal_has_errstatus()
      ? *Event_.errstatus_
      : *reinterpret_cast< ::service_layer::SLErrorStatus*>(&::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev4Notif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Notif.ErrStatus)
  return _internal_errstatus();
}
inline ::service_layer::SLErrorStatus* SLRoutev4Notif::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev4Notif::unsafe_arena_set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Notif.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRoutev4Notif::_internal_mutable_errstatus() {
  if (!_internal_has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = CreateMaybeMessage< ::service_layer::SLErrorStatus >(GetArena());
  }
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRoutev4Notif::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Notif.ErrStatus)
  return _internal_mutable_errstatus();
}

// .service_layer.SLRouteNotifStatus NotifStatus = 3;
inline bool SLRoutev4Notif::_internal_has_notifstatus() const {
  return Event_case() == kNotifStatus;
}
inline bool SLRoutev4Notif::has_notifstatus() const {
  return _internal_has_notifstatus();
}
inline void SLRoutev4Notif::set_has_notifstatus() {
  _oneof_case_[0] = kNotifStatus;
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev4Notif::release_notifstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Notif.NotifStatus)
  if (_internal_has_notifstatus()) {
    clear_has_Event();
      ::service_layer::SLRouteNotifStatus* temp = Event_.notifstatus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.notifstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLRouteNotifStatus& SLRoutev4Notif::_internal_notifstatus() const {
  return _internal_has_notifstatus()
      ? *Event_.notifstatus_
      : *reinterpret_cast< ::service_layer::SLRouteNotifStatus*>(&::service_layer::_SLRouteNotifStatus_default_instance_);
}
inline const ::service_layer::SLRouteNotifStatus& SLRoutev4Notif::notifstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Notif.NotifStatus)
  return _internal_notifstatus();
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev4Notif::unsafe_arena_release_notifstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4Notif.NotifStatus)
  if (_internal_has_notifstatus()) {
    clear_has_Event();
    ::service_layer::SLRouteNotifStatus* temp = Event_.notifstatus_;
    Event_.notifstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev4Notif::unsafe_arena_set_allocated_notifstatus(::service_layer::SLRouteNotifStatus* notifstatus) {
  clear_Event();
  if (notifstatus) {
    set_has_notifstatus();
    Event_.notifstatus_ = notifstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Notif.NotifStatus)
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev4Notif::_internal_mutable_notifstatus() {
  if (!_internal_has_notifstatus()) {
    clear_Event();
    set_has_notifstatus();
    Event_.notifstatus_ = CreateMaybeMessage< ::service_layer::SLRouteNotifStatus >(GetArena());
  }
  return Event_.notifstatus_;
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev4Notif::mutable_notifstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Notif.NotifStatus)
  return _internal_mutable_notifstatus();
}

// .service_layer.SLRoutev4NotifRoute Route = 4;
inline bool SLRoutev4Notif::_internal_has_route() const {
  return Event_case() == kRoute;
}
inline bool SLRoutev4Notif::has_route() const {
  return _internal_has_route();
}
inline void SLRoutev4Notif::set_has_route() {
  _oneof_case_[0] = kRoute;
}
inline void SLRoutev4Notif::clear_route() {
  if (_internal_has_route()) {
    if (GetArena() == nullptr) {
      delete Event_.route_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLRoutev4NotifRoute* SLRoutev4Notif::release_route() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Notif.Route)
  if (_internal_has_route()) {
    clear_has_Event();
      ::service_layer::SLRoutev4NotifRoute* temp = Event_.route_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.route_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLRoutev4NotifRoute& SLRoutev4Notif::_internal_route() const {
  return _internal_has_route()
      ? *Event_.route_
      : *reinterpret_cast< ::service_layer::SLRoutev4NotifRoute*>(&::service_layer::_SLRoutev4NotifRoute_default_instance_);
}
inline const ::service_layer::SLRoutev4NotifRoute& SLRoutev4Notif::route() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Notif.Route)
  return _internal_route();
}
inline ::service_layer::SLRoutev4NotifRoute* SLRoutev4Notif::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4Notif.Route)
  if (_internal_has_route()) {
    clear_has_Event();
    ::service_layer::SLRoutev4NotifRoute* temp = Event_.route_;
    Event_.route_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev4Notif::unsafe_arena_set_allocated_route(::service_layer::SLRoutev4NotifRoute* route) {
  clear_Event();
  if (route) {
    set_has_route();
    Event_.route_ = route;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Notif.Route)
}
inline ::service_layer::SLRoutev4NotifRoute* SLRoutev4Notif::_internal_mutable_route() {
  if (!_internal_has_route()) {
    clear_Event();
    set_has_route();
    Event_.route_ = CreateMaybeMessage< ::service_layer::SLRoutev4NotifRoute >(GetArena());
  }
  return Event_.route_;
}
inline ::service_layer::SLRoutev4NotifRoute* SLRoutev4Notif::mutable_route() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Notif.Route)
  return _internal_mutable_route();
}

// .service_layer.SLRouteNotifMarker Marker = 5;
inline bool SLRoutev4Notif::_internal_has_marker() const {
  return Event_case() == kMarker;
}
inline bool SLRoutev4Notif::has_marker() const {
  return _internal_has_marker();
}
inline void SLRoutev4Notif::set_has_marker() {
  _oneof_case_[0] = kMarker;
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev4Notif::release_marker() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Notif.Marker)
  if (_internal_has_marker()) {
    clear_has_Event();
      ::service_layer::SLRouteNotifMarker* temp = Event_.marker_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.marker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLRouteNotifMarker& SLRoutev4Notif::_internal_marker() const {
  return _internal_has_marker()
      ? *Event_.marker_
      : *reinterpret_cast< ::service_layer::SLRouteNotifMarker*>(&::service_layer::_SLRouteNotifMarker_default_instance_);
}
inline const ::service_layer::SLRouteNotifMarker& SLRoutev4Notif::marker() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Notif.Marker)
  return _internal_marker();
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev4Notif::unsafe_arena_release_marker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4Notif.Marker)
  if (_internal_has_marker()) {
    clear_has_Event();
    ::service_layer::SLRouteNotifMarker* temp = Event_.marker_;
    Event_.marker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev4Notif::unsafe_arena_set_allocated_marker(::service_layer::SLRouteNotifMarker* marker) {
  clear_Event();
  if (marker) {
    set_has_marker();
    Event_.marker_ = marker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Notif.Marker)
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev4Notif::_internal_mutable_marker() {
  if (!_internal_has_marker()) {
    clear_Event();
    set_has_marker();
    Event_.marker_ = CreateMaybeMessage< ::service_layer::SLRouteNotifMarker >(GetArena());
  }
  return Event_.marker_;
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev4Notif::mutable_marker() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Notif.Marker)
  return _internal_mutable_marker();
}

// .service_layer.SLVrfNotif Vrf = 6;
inline bool SLRoutev4Notif::_internal_has_vrf() const {
  return Event_case() == kVrf;
}
inline bool SLRoutev4Notif::has_vrf() const {
  return _internal_has_vrf();
}
inline void SLRoutev4Notif::set_has_vrf() {
  _oneof_case_[0] = kVrf;
}
inline ::service_layer::SLVrfNotif* SLRoutev4Notif::release_vrf() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev4Notif.Vrf)
  if (_internal_has_vrf()) {
    clear_has_Event();
      ::service_layer::SLVrfNotif* temp = Event_.vrf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.vrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLVrfNotif& SLRoutev4Notif::_internal_vrf() const {
  return _internal_has_vrf()
      ? *Event_.vrf_
      : *reinterpret_cast< ::service_layer::SLVrfNotif*>(&::service_layer::_SLVrfNotif_default_instance_);
}
inline const ::service_layer::SLVrfNotif& SLRoutev4Notif::vrf() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev4Notif.Vrf)
  return _internal_vrf();
}
inline ::service_layer::SLVrfNotif* SLRoutev4Notif::unsafe_arena_release_vrf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev4Notif.Vrf)
  if (_internal_has_vrf()) {
    clear_has_Event();
    ::service_layer::SLVrfNotif* temp = Event_.vrf_;
    Event_.vrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev4Notif::unsafe_arena_set_allocated_vrf(::service_layer::SLVrfNotif* vrf) {
  clear_Event();
  if (vrf) {
    set_has_vrf();
    Event_.vrf_ = vrf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev4Notif.Vrf)
}
inline ::service_layer::SLVrfNotif* SLRoutev4Notif::_internal_mutable_vrf() {
  if (!_internal_has_vrf()) {
    clear_Event();
    set_has_vrf();
    Event_.vrf_ = CreateMaybeMessage< ::service_layer::SLVrfNotif >(GetArena());
  }
  return Event_.vrf_;
}
inline ::service_layer::SLVrfNotif* SLRoutev4Notif::mutable_vrf() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev4Notif.Vrf)
  return _internal_mutable_vrf();
}

inline bool SLRoutev4Notif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLRoutev4Notif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLRoutev4Notif::EventCase SLRoutev4Notif::Event_case() const {
  return SLRoutev4Notif::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fipv4_2eproto
