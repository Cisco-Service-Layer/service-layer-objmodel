// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_route_ipv6.proto

#include "sl_route_ipv6.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLRoutev6::SLRoutev6(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathlist_()
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routecommon_(nullptr)
  , prefixlen_(0u){}
struct SLRoutev6DefaultTypeInternal {
  constexpr SLRoutev6DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6DefaultTypeInternal() {}
  union {
    SLRoutev6 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6DefaultTypeInternal _SLRoutev6_default_instance_;
constexpr SLRoutev6Msg::SLRoutev6Msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlator_(uint64_t{0u})
  , oper_(0)
{}
struct SLRoutev6MsgDefaultTypeInternal {
  constexpr SLRoutev6MsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6MsgDefaultTypeInternal() {}
  union {
    SLRoutev6Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6MsgDefaultTypeInternal _SLRoutev6Msg_default_instance_;
constexpr SLRoutev6Res::SLRoutev6Res(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr)
  , prefixlen_(0u){}
struct SLRoutev6ResDefaultTypeInternal {
  constexpr SLRoutev6ResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6ResDefaultTypeInternal() {}
  union {
    SLRoutev6Res _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6ResDefaultTypeInternal _SLRoutev6Res_default_instance_;
constexpr SLRoutev6MsgRsp::SLRoutev6MsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statussummary_(nullptr)
  , correlator_(uint64_t{0u}){}
struct SLRoutev6MsgRspDefaultTypeInternal {
  constexpr SLRoutev6MsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6MsgRspDefaultTypeInternal() {}
  union {
    SLRoutev6MsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6MsgRspDefaultTypeInternal _SLRoutev6MsgRsp_default_instance_;
constexpr SLRoutev6GetMsg::SLRoutev6GetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlator_(uint64_t{0u})
  , prefixlen_(0u)
  , entriescount_(0u)
  , getnext_(false){}
struct SLRoutev6GetMsgDefaultTypeInternal {
  constexpr SLRoutev6GetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6GetMsgDefaultTypeInternal() {}
  union {
    SLRoutev6GetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6GetMsgDefaultTypeInternal _SLRoutev6GetMsg_default_instance_;
constexpr SLRoutev6GetMsgRsp::SLRoutev6GetMsgRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errstatus_(nullptr)
  , correlator_(uint64_t{0u})
  , eof_(false){}
struct SLRoutev6GetMsgRspDefaultTypeInternal {
  constexpr SLRoutev6GetMsgRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6GetMsgRspDefaultTypeInternal() {}
  union {
    SLRoutev6GetMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6GetMsgRspDefaultTypeInternal _SLRoutev6GetMsgRsp_default_instance_;
constexpr SLRoutev6NotifRoute::SLRoutev6NotifRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , vrfname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLRoutev6NotifRouteDefaultTypeInternal {
  constexpr SLRoutev6NotifRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6NotifRouteDefaultTypeInternal() {}
  union {
    SLRoutev6NotifRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6NotifRouteDefaultTypeInternal _SLRoutev6NotifRoute_default_instance_;
constexpr SLRoutev6Notif::SLRoutev6Notif(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventtype_(0)

  , _oneof_case_{}{}
struct SLRoutev6NotifDefaultTypeInternal {
  constexpr SLRoutev6NotifDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLRoutev6NotifDefaultTypeInternal() {}
  union {
    SLRoutev6Notif _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLRoutev6NotifDefaultTypeInternal _SLRoutev6Notif_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5froute_5fipv6_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sl_5froute_5fipv6_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5froute_5fipv6_2eproto = nullptr;

const uint32_t TableStruct_sl_5froute_5fipv6_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6, prefix_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6, prefixlen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6, routecommon_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6, pathlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Msg, oper_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Msg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Msg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Msg, routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Res, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Res, prefix_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Res, prefixlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6MsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6MsgRsp, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6MsgRsp, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6MsgRsp, statussummary_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6MsgRsp, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, prefix_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, prefixlen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, entriescount_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsg, getnext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsgRsp, correlator_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsgRsp, eof_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsgRsp, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsgRsp, errstatus_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6GetMsgRsp, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6NotifRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6NotifRoute, vrfname_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6NotifRoute, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Notif, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Notif, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Notif, eventtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLRoutev6Notif, Event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLRoutev6)},
  { 10, -1, -1, sizeof(::service_layer::SLRoutev6Msg)},
  { 20, -1, -1, sizeof(::service_layer::SLRoutev6Res)},
  { 29, -1, -1, sizeof(::service_layer::SLRoutev6MsgRsp)},
  { 39, -1, -1, sizeof(::service_layer::SLRoutev6GetMsg)},
  { 51, -1, -1, sizeof(::service_layer::SLRoutev6GetMsgRsp)},
  { 62, -1, -1, sizeof(::service_layer::SLRoutev6NotifRoute)},
  { 70, -1, -1, sizeof(::service_layer::SLRoutev6Notif)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6Msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6Res_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6MsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6GetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6GetMsgRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6NotifRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLRoutev6Notif_default_instance_),
};

const char descriptor_table_protodef_sl_5froute_5fipv6_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023sl_route_ipv6.proto\022\rservice_layer\032\025sl"
  "_common_types.proto\032\025sl_route_common.pro"
  "to\"\217\001\n\tSLRoutev6\022\016\n\006Prefix\030\001 \001(\014\022\021\n\tPref"
  "ixLen\030\002 \001(\r\0221\n\013RouteCommon\030\003 \001(\0132\034.servi"
  "ce_layer.SLRouteCommon\022,\n\010PathList\030\004 \003(\013"
  "2\032.service_layer.SLRoutePath\"\206\001\n\014SLRoute"
  "v6Msg\022\'\n\004Oper\030\001 \001(\0162\031.service_layer.SLOb"
  "jectOp\022\022\n\nCorrelator\030\002 \001(\004\022\017\n\007VrfName\030\003 "
  "\001(\t\022(\n\006Routes\030\004 \003(\0132\030.service_layer.SLRo"
  "utev6\"b\n\014SLRoutev6Res\022/\n\tErrStatus\030\001 \001(\013"
  "2\034.service_layer.SLErrorStatus\022\016\n\006Prefix"
  "\030\002 \001(\014\022\021\n\tPrefixLen\030\003 \001(\r\"\231\001\n\017SLRoutev6M"
  "sgRsp\022\022\n\nCorrelator\030\001 \001(\004\022\017\n\007VrfName\030\002 \001"
  "(\t\0223\n\rStatusSummary\030\003 \001(\0132\034.service_laye"
  "r.SLErrorStatus\022,\n\007Results\030\004 \003(\0132\033.servi"
  "ce_layer.SLRoutev6Res\"\200\001\n\017SLRoutev6GetMs"
  "g\022\022\n\nCorrelator\030\001 \001(\004\022\017\n\007VrfName\030\002 \001(\t\022\016"
  "\n\006Prefix\030\003 \001(\014\022\021\n\tPrefixLen\030\004 \001(\r\022\024\n\014Ent"
  "riesCount\030\005 \001(\r\022\017\n\007GetNext\030\006 \001(\010\"\242\001\n\022SLR"
  "outev6GetMsgRsp\022\022\n\nCorrelator\030\001 \001(\004\022\013\n\003E"
  "of\030\002 \001(\010\022\017\n\007VrfName\030\003 \001(\t\022/\n\tErrStatus\030\004"
  " \001(\0132\034.service_layer.SLErrorStatus\022)\n\007En"
  "tries\030\005 \003(\0132\030.service_layer.SLRoutev6\"Q\n"
  "\023SLRoutev6NotifRoute\022\017\n\007VrfName\030\001 \001(\t\022)\n"
  "\007Entries\030\002 \003(\0132\030.service_layer.SLRoutev6"
  "\"\311\002\n\016SLRoutev6Notif\022-\n\tEventType\030\001 \001(\0162\032"
  ".service_layer.SLNotifType\0221\n\tErrStatus\030"
  "\002 \001(\0132\034.service_layer.SLErrorStatusH\000\0228\n"
  "\013NotifStatus\030\003 \001(\0132!.service_layer.SLRou"
  "teNotifStatusH\000\0223\n\005Route\030\004 \001(\0132\".service"
  "_layer.SLRoutev6NotifRouteH\000\0223\n\006Marker\030\005"
  " \001(\0132!.service_layer.SLRouteNotifMarkerH"
  "\000\022(\n\003Vrf\030\006 \001(\0132\031.service_layer.SLVrfNoti"
  "fH\000B\007\n\005Event2\230\007\n\rSLRoutev6Oper\022b\n\023SLRout"
  "ev6GlobalsGet\022#.service_layer.SLRouteGlo"
  "balsGetMsg\032&.service_layer.SLRouteGlobal"
  "sGetMsgRsp\022n\n\027SLRoutev6GlobalStatsGet\022\'."
  "service_layer.SLRouteGlobalStatsGetMsg\032*"
  ".service_layer.SLRouteGlobalStatsGetMsgR"
  "sp\022N\n\021SLRoutev6VrfRegOp\022\032.service_layer."
  "SLVrfRegMsg\032\035.service_layer.SLVrfRegMsgR"
  "sp\022U\n\022SLRoutev6VrfRegGet\022\035.service_layer"
  ".SLVrfRegGetMsg\032 .service_layer.SLVrfReg"
  "GetMsgRsp\022Y\n\024SLRoutev6VrfGetStats\022\035.serv"
  "ice_layer.SLVrfRegGetMsg\032\".service_layer"
  ".SLVRFGetStatsMsgRsp\022J\n\013SLRoutev6Op\022\033.se"
  "rvice_layer.SLRoutev6Msg\032\036.service_layer"
  ".SLRoutev6MsgRsp\022Q\n\014SLRoutev6Get\022\036.servi"
  "ce_layer.SLRoutev6GetMsg\032!.service_layer"
  ".SLRoutev6GetMsgRsp\022T\n\021SLRoutev6OpStream"
  "\022\033.service_layer.SLRoutev6Msg\032\036.service_"
  "layer.SLRoutev6MsgRsp(\0010\001\022[\n\022SLRoutev6Ge"
  "tStream\022\036.service_layer.SLRoutev6GetMsg\032"
  "!.service_layer.SLRoutev6GetMsgRsp(\0010\001\022_"
  "\n\027SLRoutev6GetNotifStream\022!.service_laye"
  "r.SLRouteGetNotifMsg\032\035.service_layer.SLR"
  "outev6Notif(\0010\001BQZOgithub.com/Cisco-serv"
  "ice-layer/service-layer-objmodel/grpc/pr"
  "otos;service_layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5froute_5fipv6_2eproto_deps[2] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
  &::descriptor_table_sl_5froute_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5froute_5fipv6_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5froute_5fipv6_2eproto = {
  false, false, 2346, descriptor_table_protodef_sl_5froute_5fipv6_2eproto, "sl_route_ipv6.proto", 
  &descriptor_table_sl_5froute_5fipv6_2eproto_once, descriptor_table_sl_5froute_5fipv6_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_sl_5froute_5fipv6_2eproto::offsets,
  file_level_metadata_sl_5froute_5fipv6_2eproto, file_level_enum_descriptors_sl_5froute_5fipv6_2eproto, file_level_service_descriptors_sl_5froute_5fipv6_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5froute_5fipv6_2eproto_getter() {
  return &descriptor_table_sl_5froute_5fipv6_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5froute_5fipv6_2eproto(&descriptor_table_sl_5froute_5fipv6_2eproto);
namespace service_layer {

// ===================================================================

class SLRoutev6::_Internal {
 public:
  static const ::service_layer::SLRouteCommon& routecommon(const SLRoutev6* msg);
};

const ::service_layer::SLRouteCommon&
SLRoutev6::_Internal::routecommon(const SLRoutev6* msg) {
  return *msg->routecommon_;
}
void SLRoutev6::clear_routecommon() {
  if (GetArenaForAllocation() == nullptr && routecommon_ != nullptr) {
    delete routecommon_;
  }
  routecommon_ = nullptr;
}
void SLRoutev6::clear_pathlist() {
  pathlist_.Clear();
}
SLRoutev6::SLRoutev6(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pathlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6)
}
SLRoutev6::SLRoutev6(const SLRoutev6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pathlist_(from.pathlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_routecommon()) {
    routecommon_ = new ::service_layer::SLRouteCommon(*from.routecommon_);
  } else {
    routecommon_ = nullptr;
  }
  prefixlen_ = from.prefixlen_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6)
}

inline void SLRoutev6::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routecommon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixlen_) -
    reinterpret_cast<char*>(&routecommon_)) + sizeof(prefixlen_));
}

SLRoutev6::~SLRoutev6() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete routecommon_;
}

void SLRoutev6::ArenaDtor(void* object) {
  SLRoutev6* _this = reinterpret_cast< SLRoutev6* >(object);
  (void)_this;
}
void SLRoutev6::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathlist_.Clear();
  prefix_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && routecommon_ != nullptr) {
    delete routecommon_;
  }
  routecommon_ = nullptr;
  prefixlen_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PrefixLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          prefixlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRouteCommon RouteCommon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routecommon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutePath PathList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Prefix = 1;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // uint32 PrefixLen = 2;
  if (this->_internal_prefixlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefixlen(), target);
  }

  // .service_layer.SLRouteCommon RouteCommon = 3;
  if (this->_internal_has_routecommon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::routecommon(this), target, stream);
  }

  // repeated .service_layer.SLRoutePath PathList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pathlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pathlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6)
  return target;
}

size_t SLRoutev6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutePath PathList = 4;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes Prefix = 1;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // .service_layer.SLRouteCommon RouteCommon = 3;
  if (this->_internal_has_routecommon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routecommon_);
  }

  // uint32 PrefixLen = 2;
  if (this->_internal_prefixlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prefixlen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6::GetClassData() const { return &_class_data_; }

void SLRoutev6::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6 *>(to)->MergeFrom(
      static_cast<const SLRoutev6 &>(from));
}


void SLRoutev6::MergeFrom(const SLRoutev6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pathlist_.MergeFrom(from.pathlist_);
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_has_routecommon()) {
    _internal_mutable_routecommon()->::service_layer::SLRouteCommon::MergeFrom(from._internal_routecommon());
  }
  if (from._internal_prefixlen() != 0) {
    _internal_set_prefixlen(from._internal_prefixlen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6::CopyFrom(const SLRoutev6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6::IsInitialized() const {
  return true;
}

void SLRoutev6::InternalSwap(SLRoutev6* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pathlist_.InternalSwap(&other->pathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutev6, prefixlen_)
      + sizeof(SLRoutev6::prefixlen_)
      - PROTOBUF_FIELD_OFFSET(SLRoutev6, routecommon_)>(
          reinterpret_cast<char*>(&routecommon_),
          reinterpret_cast<char*>(&other->routecommon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[0]);
}

// ===================================================================

class SLRoutev6Msg::_Internal {
 public:
};

SLRoutev6Msg::SLRoutev6Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6Msg)
}
SLRoutev6Msg::SLRoutev6Msg(const SLRoutev6Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6Msg)
}

inline void SLRoutev6Msg::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
}

SLRoutev6Msg::~SLRoutev6Msg() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6Msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLRoutev6Msg::ArenaDtor(void* object) {
  SLRoutev6Msg* _this = reinterpret_cast< SLRoutev6Msg* >(object);
  (void)_this;
}
void SLRoutev6Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6Msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  vrfname_.ClearToEmpty();
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLObjectOp Oper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper(static_cast<::service_layer::SLObjectOp>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 Correlator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRoutev6Msg.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutev6 Routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6Msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6Msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper(), target);
  }

  // uint64 Correlator = 2;
  if (this->_internal_correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_correlator(), target);
  }

  // string VrfName = 3;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRoutev6Msg.VrfName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLRoutev6 Routes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6Msg)
  return target;
}

size_t SLRoutev6Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6Msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutev6 Routes = 4;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 3;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // uint64 Correlator = 2;
  if (this->_internal_correlator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_correlator());
  }

  // .service_layer.SLObjectOp Oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6Msg::GetClassData() const { return &_class_data_; }

void SLRoutev6Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6Msg *>(to)->MergeFrom(
      static_cast<const SLRoutev6Msg &>(from));
}


void SLRoutev6Msg::MergeFrom(const SLRoutev6Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6Msg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from._internal_oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6Msg::CopyFrom(const SLRoutev6Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6Msg::IsInitialized() const {
  return true;
}

void SLRoutev6Msg::InternalSwap(SLRoutev6Msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutev6Msg, oper_)
      + sizeof(SLRoutev6Msg::oper_)
      - PROTOBUF_FIELD_OFFSET(SLRoutev6Msg, correlator_)>(
          reinterpret_cast<char*>(&correlator_),
          reinterpret_cast<char*>(&other->correlator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6Msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[1]);
}

// ===================================================================

class SLRoutev6Res::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLRoutev6Res* msg);
};

const ::service_layer::SLErrorStatus&
SLRoutev6Res::_Internal::errstatus(const SLRoutev6Res* msg) {
  return *msg->errstatus_;
}
void SLRoutev6Res::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLRoutev6Res::SLRoutev6Res(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6Res)
}
SLRoutev6Res::SLRoutev6Res(const SLRoutev6Res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  prefixlen_ = from.prefixlen_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6Res)
}

inline void SLRoutev6Res::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixlen_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(prefixlen_));
}

SLRoutev6Res::~SLRoutev6Res() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6Res)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6Res::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLRoutev6Res::ArenaDtor(void* object) {
  SLRoutev6Res* _this = reinterpret_cast< SLRoutev6Res* >(object);
  (void)_this;
}
void SLRoutev6Res::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6Res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6Res::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6Res)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  prefixlen_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6Res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus ErrStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PrefixLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prefixlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6Res::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6Res)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::errstatus(this), target, stream);
  }

  // bytes Prefix = 2;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // uint32 PrefixLen = 3;
  if (this->_internal_prefixlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefixlen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6Res)
  return target;
}

size_t SLRoutev6Res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6Res)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Prefix = 2;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // .service_layer.SLErrorStatus ErrStatus = 1;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint32 PrefixLen = 3;
  if (this->_internal_prefixlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prefixlen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6Res::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6Res::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6Res::GetClassData() const { return &_class_data_; }

void SLRoutev6Res::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6Res *>(to)->MergeFrom(
      static_cast<const SLRoutev6Res &>(from));
}


void SLRoutev6Res::MergeFrom(const SLRoutev6Res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6Res)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_prefixlen() != 0) {
    _internal_set_prefixlen(from._internal_prefixlen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6Res::CopyFrom(const SLRoutev6Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6Res::IsInitialized() const {
  return true;
}

void SLRoutev6Res::InternalSwap(SLRoutev6Res* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutev6Res, prefixlen_)
      + sizeof(SLRoutev6Res::prefixlen_)
      - PROTOBUF_FIELD_OFFSET(SLRoutev6Res, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6Res::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[2]);
}

// ===================================================================

class SLRoutev6MsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& statussummary(const SLRoutev6MsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLRoutev6MsgRsp::_Internal::statussummary(const SLRoutev6MsgRsp* msg) {
  return *msg->statussummary_;
}
void SLRoutev6MsgRsp::clear_statussummary() {
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
}
SLRoutev6MsgRsp::SLRoutev6MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6MsgRsp)
}
SLRoutev6MsgRsp::SLRoutev6MsgRsp(const SLRoutev6MsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_statussummary()) {
    statussummary_ = new ::service_layer::SLErrorStatus(*from.statussummary_);
  } else {
    statussummary_ = nullptr;
  }
  correlator_ = from.correlator_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6MsgRsp)
}

inline void SLRoutev6MsgRsp::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statussummary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correlator_) -
    reinterpret_cast<char*>(&statussummary_)) + sizeof(correlator_));
}

SLRoutev6MsgRsp::~SLRoutev6MsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6MsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6MsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete statussummary_;
}

void SLRoutev6MsgRsp::ArenaDtor(void* object) {
  SLRoutev6MsgRsp* _this = reinterpret_cast< SLRoutev6MsgRsp* >(object);
  (void)_this;
}
void SLRoutev6MsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6MsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6MsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6MsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  vrfname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && statussummary_ != nullptr) {
    delete statussummary_;
  }
  statussummary_ = nullptr;
  correlator_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6MsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRoutev6MsgRsp.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus StatusSummary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_statussummary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutev6Res Results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6MsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6MsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRoutev6MsgRsp.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // .service_layer.SLErrorStatus StatusSummary = 3;
  if (this->_internal_has_statussummary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::statussummary(this), target, stream);
  }

  // repeated .service_layer.SLRoutev6Res Results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6MsgRsp)
  return target;
}

size_t SLRoutev6MsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6MsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutev6Res Results = 4;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus StatusSummary = 3;
  if (this->_internal_has_statussummary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statussummary_);
  }

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_correlator());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6MsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6MsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6MsgRsp::GetClassData() const { return &_class_data_; }

void SLRoutev6MsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6MsgRsp *>(to)->MergeFrom(
      static_cast<const SLRoutev6MsgRsp &>(from));
}


void SLRoutev6MsgRsp::MergeFrom(const SLRoutev6MsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6MsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_has_statussummary()) {
    _internal_mutable_statussummary()->::service_layer::SLErrorStatus::MergeFrom(from._internal_statussummary());
  }
  if (from._internal_correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6MsgRsp::CopyFrom(const SLRoutev6MsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6MsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6MsgRsp::IsInitialized() const {
  return true;
}

void SLRoutev6MsgRsp::InternalSwap(SLRoutev6MsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutev6MsgRsp, correlator_)
      + sizeof(SLRoutev6MsgRsp::correlator_)
      - PROTOBUF_FIELD_OFFSET(SLRoutev6MsgRsp, statussummary_)>(
          reinterpret_cast<char*>(&statussummary_),
          reinterpret_cast<char*>(&other->statussummary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6MsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[3]);
}

// ===================================================================

class SLRoutev6GetMsg::_Internal {
 public:
};

SLRoutev6GetMsg::SLRoutev6GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6GetMsg)
}
SLRoutev6GetMsg::SLRoutev6GetMsg(const SLRoutev6GetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(getnext_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6GetMsg)
}

inline void SLRoutev6GetMsg::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getnext_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(getnext_));
}

SLRoutev6GetMsg::~SLRoutev6GetMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6GetMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6GetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLRoutev6GetMsg::ArenaDtor(void* object) {
  SLRoutev6GetMsg* _this = reinterpret_cast< SLRoutev6GetMsg* >(object);
  (void)_this;
}
void SLRoutev6GetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6GetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6GetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6GetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfname_.ClearToEmpty();
  prefix_.ClearToEmpty();
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getnext_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(getnext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6GetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRoutev6GetMsg.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PrefixLen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prefixlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EntriesCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          entriescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetNext = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          getnext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6GetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6GetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRoutev6GetMsg.VrfName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrfname(), target);
  }

  // bytes Prefix = 3;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // uint32 PrefixLen = 4;
  if (this->_internal_prefixlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prefixlen(), target);
  }

  // uint32 EntriesCount = 5;
  if (this->_internal_entriescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_entriescount(), target);
  }

  // bool GetNext = 6;
  if (this->_internal_getnext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_getnext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6GetMsg)
  return target;
}

size_t SLRoutev6GetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6GetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VrfName = 2;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // bytes Prefix = 3;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_correlator());
  }

  // uint32 PrefixLen = 4;
  if (this->_internal_prefixlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prefixlen());
  }

  // uint32 EntriesCount = 5;
  if (this->_internal_entriescount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_entriescount());
  }

  // bool GetNext = 6;
  if (this->_internal_getnext() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6GetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6GetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6GetMsg::GetClassData() const { return &_class_data_; }

void SLRoutev6GetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6GetMsg *>(to)->MergeFrom(
      static_cast<const SLRoutev6GetMsg &>(from));
}


void SLRoutev6GetMsg::MergeFrom(const SLRoutev6GetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6GetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from._internal_prefixlen() != 0) {
    _internal_set_prefixlen(from._internal_prefixlen());
  }
  if (from._internal_entriescount() != 0) {
    _internal_set_entriescount(from._internal_entriescount());
  }
  if (from._internal_getnext() != 0) {
    _internal_set_getnext(from._internal_getnext());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6GetMsg::CopyFrom(const SLRoutev6GetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6GetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6GetMsg::IsInitialized() const {
  return true;
}

void SLRoutev6GetMsg::InternalSwap(SLRoutev6GetMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutev6GetMsg, getnext_)
      + sizeof(SLRoutev6GetMsg::getnext_)
      - PROTOBUF_FIELD_OFFSET(SLRoutev6GetMsg, correlator_)>(
          reinterpret_cast<char*>(&correlator_),
          reinterpret_cast<char*>(&other->correlator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6GetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[4]);
}

// ===================================================================

class SLRoutev6GetMsgRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLRoutev6GetMsgRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLRoutev6GetMsgRsp::_Internal::errstatus(const SLRoutev6GetMsgRsp* msg) {
  return *msg->errstatus_;
}
void SLRoutev6GetMsgRsp::clear_errstatus() {
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
}
SLRoutev6GetMsgRsp::SLRoutev6GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6GetMsgRsp)
}
SLRoutev6GetMsgRsp::SLRoutev6GetMsgRsp(const SLRoutev6GetMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_errstatus()) {
    errstatus_ = new ::service_layer::SLErrorStatus(*from.errstatus_);
  } else {
    errstatus_ = nullptr;
  }
  ::memcpy(&correlator_, &from.correlator_,
    static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&correlator_)) + sizeof(eof_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6GetMsgRsp)
}

inline void SLRoutev6GetMsgRsp::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&errstatus_)) + sizeof(eof_));
}

SLRoutev6GetMsgRsp::~SLRoutev6GetMsgRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6GetMsgRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6GetMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errstatus_;
}

void SLRoutev6GetMsgRsp::ArenaDtor(void* object) {
  SLRoutev6GetMsgRsp* _this = reinterpret_cast< SLRoutev6GetMsgRsp* >(object);
  (void)_this;
}
void SLRoutev6GetMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6GetMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6GetMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6GetMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  vrfname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && errstatus_ != nullptr) {
    delete errstatus_;
  }
  errstatus_ = nullptr;
  ::memset(&correlator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&correlator_)) + sizeof(eof_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6GetMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Correlator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Eof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VrfName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRoutev6GetMsgRsp.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutev6 Entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6GetMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6GetMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlator(), target);
  }

  // bool Eof = 2;
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_eof(), target);
  }

  // string VrfName = 3;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRoutev6GetMsgRsp.VrfName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vrfname(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 4;
  if (this->_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::errstatus(this), target, stream);
  }

  // repeated .service_layer.SLRoutev6 Entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6GetMsgRsp)
  return target;
}

size_t SLRoutev6GetMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6GetMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutev6 Entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 3;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  // .service_layer.SLErrorStatus ErrStatus = 4;
  if (this->_internal_has_errstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errstatus_);
  }

  // uint64 Correlator = 1;
  if (this->_internal_correlator() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_correlator());
  }

  // bool Eof = 2;
  if (this->_internal_eof() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6GetMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6GetMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6GetMsgRsp::GetClassData() const { return &_class_data_; }

void SLRoutev6GetMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6GetMsgRsp *>(to)->MergeFrom(
      static_cast<const SLRoutev6GetMsgRsp &>(from));
}


void SLRoutev6GetMsgRsp::MergeFrom(const SLRoutev6GetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6GetMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  if (from._internal_has_errstatus()) {
    _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
  }
  if (from._internal_correlator() != 0) {
    _internal_set_correlator(from._internal_correlator());
  }
  if (from._internal_eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6GetMsgRsp::CopyFrom(const SLRoutev6GetMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6GetMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6GetMsgRsp::IsInitialized() const {
  return true;
}

void SLRoutev6GetMsgRsp::InternalSwap(SLRoutev6GetMsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLRoutev6GetMsgRsp, eof_)
      + sizeof(SLRoutev6GetMsgRsp::eof_)
      - PROTOBUF_FIELD_OFFSET(SLRoutev6GetMsgRsp, errstatus_)>(
          reinterpret_cast<char*>(&errstatus_),
          reinterpret_cast<char*>(&other->errstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6GetMsgRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[5]);
}

// ===================================================================

class SLRoutev6NotifRoute::_Internal {
 public:
};

SLRoutev6NotifRoute::SLRoutev6NotifRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6NotifRoute)
}
SLRoutev6NotifRoute::SLRoutev6NotifRoute(const SLRoutev6NotifRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrfname().empty()) {
    vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrfname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6NotifRoute)
}

inline void SLRoutev6NotifRoute::SharedCtor() {
vrfname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrfname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLRoutev6NotifRoute::~SLRoutev6NotifRoute() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6NotifRoute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6NotifRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrfname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLRoutev6NotifRoute::ArenaDtor(void* object) {
  SLRoutev6NotifRoute* _this = reinterpret_cast< SLRoutev6NotifRoute* >(object);
  (void)_this;
}
void SLRoutev6NotifRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6NotifRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6NotifRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6NotifRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  vrfname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6NotifRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string VrfName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrfname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLRoutev6NotifRoute.VrfName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLRoutev6 Entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6NotifRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6NotifRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrfname().data(), static_cast<int>(this->_internal_vrfname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLRoutev6NotifRoute.VrfName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrfname(), target);
  }

  // repeated .service_layer.SLRoutev6 Entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6NotifRoute)
  return target;
}

size_t SLRoutev6NotifRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6NotifRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLRoutev6 Entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string VrfName = 1;
  if (!this->_internal_vrfname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrfname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6NotifRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6NotifRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6NotifRoute::GetClassData() const { return &_class_data_; }

void SLRoutev6NotifRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6NotifRoute *>(to)->MergeFrom(
      static_cast<const SLRoutev6NotifRoute &>(from));
}


void SLRoutev6NotifRoute::MergeFrom(const SLRoutev6NotifRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6NotifRoute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (!from._internal_vrfname().empty()) {
    _internal_set_vrfname(from._internal_vrfname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6NotifRoute::CopyFrom(const SLRoutev6NotifRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6NotifRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6NotifRoute::IsInitialized() const {
  return true;
}

void SLRoutev6NotifRoute::InternalSwap(SLRoutev6NotifRoute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrfname_, lhs_arena,
      &other->vrfname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6NotifRoute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[6]);
}

// ===================================================================

class SLRoutev6Notif::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& errstatus(const SLRoutev6Notif* msg);
  static const ::service_layer::SLRouteNotifStatus& notifstatus(const SLRoutev6Notif* msg);
  static const ::service_layer::SLRoutev6NotifRoute& route(const SLRoutev6Notif* msg);
  static const ::service_layer::SLRouteNotifMarker& marker(const SLRoutev6Notif* msg);
  static const ::service_layer::SLVrfNotif& vrf(const SLRoutev6Notif* msg);
};

const ::service_layer::SLErrorStatus&
SLRoutev6Notif::_Internal::errstatus(const SLRoutev6Notif* msg) {
  return *msg->Event_.errstatus_;
}
const ::service_layer::SLRouteNotifStatus&
SLRoutev6Notif::_Internal::notifstatus(const SLRoutev6Notif* msg) {
  return *msg->Event_.notifstatus_;
}
const ::service_layer::SLRoutev6NotifRoute&
SLRoutev6Notif::_Internal::route(const SLRoutev6Notif* msg) {
  return *msg->Event_.route_;
}
const ::service_layer::SLRouteNotifMarker&
SLRoutev6Notif::_Internal::marker(const SLRoutev6Notif* msg) {
  return *msg->Event_.marker_;
}
const ::service_layer::SLVrfNotif&
SLRoutev6Notif::_Internal::vrf(const SLRoutev6Notif* msg) {
  return *msg->Event_.vrf_;
}
void SLRoutev6Notif::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus));
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Notif.ErrStatus)
}
void SLRoutev6Notif::clear_errstatus() {
  if (_internal_has_errstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.errstatus_;
    }
    clear_has_Event();
  }
}
void SLRoutev6Notif::set_allocated_notifstatus(::service_layer::SLRouteNotifStatus* notifstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (notifstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notifstatus));
    if (message_arena != submessage_arena) {
      notifstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notifstatus, submessage_arena);
    }
    set_has_notifstatus();
    Event_.notifstatus_ = notifstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Notif.NotifStatus)
}
void SLRoutev6Notif::clear_notifstatus() {
  if (_internal_has_notifstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.notifstatus_;
    }
    clear_has_Event();
  }
}
void SLRoutev6Notif::set_allocated_route(::service_layer::SLRoutev6NotifRoute* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLRoutev6NotifRoute>::GetOwningArena(route);
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    set_has_route();
    Event_.route_ = route;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Notif.Route)
}
void SLRoutev6Notif::set_allocated_marker(::service_layer::SLRouteNotifMarker* marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marker));
    if (message_arena != submessage_arena) {
      marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    set_has_marker();
    Event_.marker_ = marker;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Notif.Marker)
}
void SLRoutev6Notif::clear_marker() {
  if (_internal_has_marker()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.marker_;
    }
    clear_has_Event();
  }
}
void SLRoutev6Notif::set_allocated_vrf(::service_layer::SLVrfNotif* vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Event();
  if (vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrf));
    if (message_arena != submessage_arena) {
      vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrf, submessage_arena);
    }
    set_has_vrf();
    Event_.vrf_ = vrf;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Notif.Vrf)
}
void SLRoutev6Notif::clear_vrf() {
  if (_internal_has_vrf()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Event_.vrf_;
    }
    clear_has_Event();
  }
}
SLRoutev6Notif::SLRoutev6Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLRoutev6Notif)
}
SLRoutev6Notif::SLRoutev6Notif(const SLRoutev6Notif& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventtype_ = from.eventtype_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kNotifStatus: {
      _internal_mutable_notifstatus()->::service_layer::SLRouteNotifStatus::MergeFrom(from._internal_notifstatus());
      break;
    }
    case kRoute: {
      _internal_mutable_route()->::service_layer::SLRoutev6NotifRoute::MergeFrom(from._internal_route());
      break;
    }
    case kMarker: {
      _internal_mutable_marker()->::service_layer::SLRouteNotifMarker::MergeFrom(from._internal_marker());
      break;
    }
    case kVrf: {
      _internal_mutable_vrf()->::service_layer::SLVrfNotif::MergeFrom(from._internal_vrf());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLRoutev6Notif)
}

inline void SLRoutev6Notif::SharedCtor() {
eventtype_ = 0;
clear_has_Event();
}

SLRoutev6Notif::~SLRoutev6Notif() {
  // @@protoc_insertion_point(destructor:service_layer.SLRoutev6Notif)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLRoutev6Notif::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Event()) {
    clear_Event();
  }
}

void SLRoutev6Notif::ArenaDtor(void* object) {
  SLRoutev6Notif* _this = reinterpret_cast< SLRoutev6Notif* >(object);
  (void)_this;
}
void SLRoutev6Notif::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLRoutev6Notif::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLRoutev6Notif::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLRoutev6Notif)
  switch (Event_case()) {
    case kErrStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.errstatus_;
      }
      break;
    }
    case kNotifStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.notifstatus_;
      }
      break;
    }
    case kRoute: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.route_;
      }
      break;
    }
    case kMarker: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.marker_;
      }
      break;
    }
    case kVrf: {
      if (GetArenaForAllocation() == nullptr) {
        delete Event_.vrf_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SLRoutev6Notif::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLRoutev6Notif)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventtype_ = 0;
  clear_Event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLRoutev6Notif::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLNotifType EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::service_layer::SLNotifType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLErrorStatus ErrStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRouteNotifStatus NotifStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRoutev6NotifRoute Route = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLRouteNotifMarker Marker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLVrfNotif Vrf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLRoutev6Notif::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLRoutev6Notif)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLNotifType EventType = 1;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventtype(), target);
  }

  // .service_layer.SLErrorStatus ErrStatus = 2;
  if (_internal_has_errstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::errstatus(this), target, stream);
  }

  // .service_layer.SLRouteNotifStatus NotifStatus = 3;
  if (_internal_has_notifstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::notifstatus(this), target, stream);
  }

  // .service_layer.SLRoutev6NotifRoute Route = 4;
  if (_internal_has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route(this), target, stream);
  }

  // .service_layer.SLRouteNotifMarker Marker = 5;
  if (_internal_has_marker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::marker(this), target, stream);
  }

  // .service_layer.SLVrfNotif Vrf = 6;
  if (_internal_has_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLRoutev6Notif)
  return target;
}

size_t SLRoutev6Notif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLRoutev6Notif)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLNotifType EventType = 1;
  if (this->_internal_eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  switch (Event_case()) {
    // .service_layer.SLErrorStatus ErrStatus = 2;
    case kErrStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.errstatus_);
      break;
    }
    // .service_layer.SLRouteNotifStatus NotifStatus = 3;
    case kNotifStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.notifstatus_);
      break;
    }
    // .service_layer.SLRoutev6NotifRoute Route = 4;
    case kRoute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.route_);
      break;
    }
    // .service_layer.SLRouteNotifMarker Marker = 5;
    case kMarker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.marker_);
      break;
    }
    // .service_layer.SLVrfNotif Vrf = 6;
    case kVrf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Event_.vrf_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLRoutev6Notif::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLRoutev6Notif::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLRoutev6Notif::GetClassData() const { return &_class_data_; }

void SLRoutev6Notif::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLRoutev6Notif *>(to)->MergeFrom(
      static_cast<const SLRoutev6Notif &>(from));
}


void SLRoutev6Notif::MergeFrom(const SLRoutev6Notif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLRoutev6Notif)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  switch (from.Event_case()) {
    case kErrStatus: {
      _internal_mutable_errstatus()->::service_layer::SLErrorStatus::MergeFrom(from._internal_errstatus());
      break;
    }
    case kNotifStatus: {
      _internal_mutable_notifstatus()->::service_layer::SLRouteNotifStatus::MergeFrom(from._internal_notifstatus());
      break;
    }
    case kRoute: {
      _internal_mutable_route()->::service_layer::SLRoutev6NotifRoute::MergeFrom(from._internal_route());
      break;
    }
    case kMarker: {
      _internal_mutable_marker()->::service_layer::SLRouteNotifMarker::MergeFrom(from._internal_marker());
      break;
    }
    case kVrf: {
      _internal_mutable_vrf()->::service_layer::SLVrfNotif::MergeFrom(from._internal_vrf());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLRoutev6Notif::CopyFrom(const SLRoutev6Notif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLRoutev6Notif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLRoutev6Notif::IsInitialized() const {
  return true;
}

void SLRoutev6Notif::InternalSwap(SLRoutev6Notif* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(eventtype_, other->eventtype_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLRoutev6Notif::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5froute_5fipv6_2eproto_getter, &descriptor_table_sl_5froute_5fipv6_2eproto_once,
      file_level_metadata_sl_5froute_5fipv6_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6 >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6Msg* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6Res* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6Res >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6Res >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6MsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6MsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6MsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6GetMsg* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6GetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6GetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6GetMsgRsp* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6GetMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6GetMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6NotifRoute* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6NotifRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6NotifRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLRoutev6Notif* Arena::CreateMaybeMessage< ::service_layer::SLRoutev6Notif >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLRoutev6Notif >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
