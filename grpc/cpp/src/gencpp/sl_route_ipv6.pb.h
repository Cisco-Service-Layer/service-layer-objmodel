// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_route_ipv6.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fipv6_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fipv6_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_route_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5froute_5fipv6_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5froute_5fipv6_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5froute_5fipv6_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(int index);
namespace service_layer {
class SLRoutev6;
struct SLRoutev6DefaultTypeInternal;
extern SLRoutev6DefaultTypeInternal _SLRoutev6_default_instance_;
class SLRoutev6GetMsg;
struct SLRoutev6GetMsgDefaultTypeInternal;
extern SLRoutev6GetMsgDefaultTypeInternal _SLRoutev6GetMsg_default_instance_;
class SLRoutev6GetMsgRsp;
struct SLRoutev6GetMsgRspDefaultTypeInternal;
extern SLRoutev6GetMsgRspDefaultTypeInternal _SLRoutev6GetMsgRsp_default_instance_;
class SLRoutev6Msg;
struct SLRoutev6MsgDefaultTypeInternal;
extern SLRoutev6MsgDefaultTypeInternal _SLRoutev6Msg_default_instance_;
class SLRoutev6MsgRsp;
struct SLRoutev6MsgRspDefaultTypeInternal;
extern SLRoutev6MsgRspDefaultTypeInternal _SLRoutev6MsgRsp_default_instance_;
class SLRoutev6Notif;
struct SLRoutev6NotifDefaultTypeInternal;
extern SLRoutev6NotifDefaultTypeInternal _SLRoutev6Notif_default_instance_;
class SLRoutev6NotifRoute;
struct SLRoutev6NotifRouteDefaultTypeInternal;
extern SLRoutev6NotifRouteDefaultTypeInternal _SLRoutev6NotifRoute_default_instance_;
class SLRoutev6Res;
struct SLRoutev6ResDefaultTypeInternal;
extern SLRoutev6ResDefaultTypeInternal _SLRoutev6Res_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLRoutev6* Arena::CreateMaybeMessage<::service_layer::SLRoutev6>(Arena*);
template<> ::service_layer::SLRoutev6GetMsg* Arena::CreateMaybeMessage<::service_layer::SLRoutev6GetMsg>(Arena*);
template<> ::service_layer::SLRoutev6GetMsgRsp* Arena::CreateMaybeMessage<::service_layer::SLRoutev6GetMsgRsp>(Arena*);
template<> ::service_layer::SLRoutev6Msg* Arena::CreateMaybeMessage<::service_layer::SLRoutev6Msg>(Arena*);
template<> ::service_layer::SLRoutev6MsgRsp* Arena::CreateMaybeMessage<::service_layer::SLRoutev6MsgRsp>(Arena*);
template<> ::service_layer::SLRoutev6Notif* Arena::CreateMaybeMessage<::service_layer::SLRoutev6Notif>(Arena*);
template<> ::service_layer::SLRoutev6NotifRoute* Arena::CreateMaybeMessage<::service_layer::SLRoutev6NotifRoute>(Arena*);
template<> ::service_layer::SLRoutev6Res* Arena::CreateMaybeMessage<::service_layer::SLRoutev6Res>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

// ===================================================================

class SLRoutev6 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6) */ {
 public:
  inline SLRoutev6() : SLRoutev6(nullptr) {}
  virtual ~SLRoutev6();
  explicit constexpr SLRoutev6(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6(const SLRoutev6& from);
  SLRoutev6(SLRoutev6&& from) noexcept
    : SLRoutev6() {
    *this = ::std::move(from);
  }

  inline SLRoutev6& operator=(const SLRoutev6& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6& operator=(SLRoutev6&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6*>(
               &_SLRoutev6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLRoutev6& a, SLRoutev6& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6* New() const final {
    return CreateMaybeMessage<SLRoutev6>(nullptr);
  }

  SLRoutev6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6& from);
  void MergeFrom(const SLRoutev6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6";
  }
  protected:
  explicit SLRoutev6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathListFieldNumber = 4,
    kPrefixFieldNumber = 1,
    kRouteCommonFieldNumber = 3,
    kPrefixLenFieldNumber = 2,
  };
  // repeated .service_layer.SLRoutePath PathList = 4;
  int pathlist_size() const;
  private:
  int _internal_pathlist_size() const;
  public:
  void clear_pathlist();
  ::service_layer::SLRoutePath* mutable_pathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >*
      mutable_pathlist();
  private:
  const ::service_layer::SLRoutePath& _internal_pathlist(int index) const;
  ::service_layer::SLRoutePath* _internal_add_pathlist();
  public:
  const ::service_layer::SLRoutePath& pathlist(int index) const;
  ::service_layer::SLRoutePath* add_pathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >&
      pathlist() const;

  // bytes Prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .service_layer.SLRouteCommon RouteCommon = 3;
  bool has_routecommon() const;
  private:
  bool _internal_has_routecommon() const;
  public:
  void clear_routecommon();
  const ::service_layer::SLRouteCommon& routecommon() const;
  ::service_layer::SLRouteCommon* release_routecommon();
  ::service_layer::SLRouteCommon* mutable_routecommon();
  void set_allocated_routecommon(::service_layer::SLRouteCommon* routecommon);
  private:
  const ::service_layer::SLRouteCommon& _internal_routecommon() const;
  ::service_layer::SLRouteCommon* _internal_mutable_routecommon();
  public:
  void unsafe_arena_set_allocated_routecommon(
      ::service_layer::SLRouteCommon* routecommon);
  ::service_layer::SLRouteCommon* unsafe_arena_release_routecommon();

  // uint32 PrefixLen = 2;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath > pathlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::service_layer::SLRouteCommon* routecommon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6Msg) */ {
 public:
  inline SLRoutev6Msg() : SLRoutev6Msg(nullptr) {}
  virtual ~SLRoutev6Msg();
  explicit constexpr SLRoutev6Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6Msg(const SLRoutev6Msg& from);
  SLRoutev6Msg(SLRoutev6Msg&& from) noexcept
    : SLRoutev6Msg() {
    *this = ::std::move(from);
  }

  inline SLRoutev6Msg& operator=(const SLRoutev6Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6Msg& operator=(SLRoutev6Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6Msg* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6Msg*>(
               &_SLRoutev6Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLRoutev6Msg& a, SLRoutev6Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6Msg* New() const final {
    return CreateMaybeMessage<SLRoutev6Msg>(nullptr);
  }

  SLRoutev6Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6Msg& from);
  void MergeFrom(const SLRoutev6Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6Msg";
  }
  protected:
  explicit SLRoutev6Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 4,
    kVrfNameFieldNumber = 3,
    kCorrelatorFieldNumber = 2,
    kOperFieldNumber = 1,
  };
  // repeated .service_layer.SLRoutev6 Routes = 4;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::service_layer::SLRoutev6* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >*
      mutable_routes();
  private:
  const ::service_layer::SLRoutev6& _internal_routes(int index) const;
  ::service_layer::SLRoutev6* _internal_add_routes();
  public:
  const ::service_layer::SLRoutev6& routes(int index) const;
  ::service_layer::SLRoutev6* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >&
      routes() const;

  // string VrfName = 3;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // uint64 Correlator = 2;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .service_layer.SLObjectOp Oper = 1;
  void clear_oper();
  ::service_layer::SLObjectOp oper() const;
  void set_oper(::service_layer::SLObjectOp value);
  private:
  ::service_layer::SLObjectOp _internal_oper() const;
  void _internal_set_oper(::service_layer::SLObjectOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 > routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  int oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6Res PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6Res) */ {
 public:
  inline SLRoutev6Res() : SLRoutev6Res(nullptr) {}
  virtual ~SLRoutev6Res();
  explicit constexpr SLRoutev6Res(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6Res(const SLRoutev6Res& from);
  SLRoutev6Res(SLRoutev6Res&& from) noexcept
    : SLRoutev6Res() {
    *this = ::std::move(from);
  }

  inline SLRoutev6Res& operator=(const SLRoutev6Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6Res& operator=(SLRoutev6Res&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6Res& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6Res* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6Res*>(
               &_SLRoutev6Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLRoutev6Res& a, SLRoutev6Res& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6Res* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6Res* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6Res* New() const final {
    return CreateMaybeMessage<SLRoutev6Res>(nullptr);
  }

  SLRoutev6Res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6Res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6Res& from);
  void MergeFrom(const SLRoutev6Res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6Res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6Res";
  }
  protected:
  explicit SLRoutev6Res(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kErrStatusFieldNumber = 1,
    kPrefixLenFieldNumber = 3,
  };
  // bytes Prefix = 2;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .service_layer.SLErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint32 PrefixLen = 3;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6Res)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6MsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6MsgRsp) */ {
 public:
  inline SLRoutev6MsgRsp() : SLRoutev6MsgRsp(nullptr) {}
  virtual ~SLRoutev6MsgRsp();
  explicit constexpr SLRoutev6MsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6MsgRsp(const SLRoutev6MsgRsp& from);
  SLRoutev6MsgRsp(SLRoutev6MsgRsp&& from) noexcept
    : SLRoutev6MsgRsp() {
    *this = ::std::move(from);
  }

  inline SLRoutev6MsgRsp& operator=(const SLRoutev6MsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6MsgRsp& operator=(SLRoutev6MsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6MsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6MsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6MsgRsp*>(
               &_SLRoutev6MsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLRoutev6MsgRsp& a, SLRoutev6MsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6MsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6MsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6MsgRsp* New() const final {
    return CreateMaybeMessage<SLRoutev6MsgRsp>(nullptr);
  }

  SLRoutev6MsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6MsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6MsgRsp& from);
  void MergeFrom(const SLRoutev6MsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6MsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6MsgRsp";
  }
  protected:
  explicit SLRoutev6MsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 4,
    kVrfNameFieldNumber = 2,
    kStatusSummaryFieldNumber = 3,
    kCorrelatorFieldNumber = 1,
  };
  // repeated .service_layer.SLRoutev6Res Results = 4;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::service_layer::SLRoutev6Res* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6Res >*
      mutable_results();
  private:
  const ::service_layer::SLRoutev6Res& _internal_results(int index) const;
  ::service_layer::SLRoutev6Res* _internal_add_results();
  public:
  const ::service_layer::SLRoutev6Res& results(int index) const;
  ::service_layer::SLRoutev6Res* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6Res >&
      results() const;

  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus StatusSummary = 3;
  bool has_statussummary() const;
  private:
  bool _internal_has_statussummary() const;
  public:
  void clear_statussummary();
  const ::service_layer::SLErrorStatus& statussummary() const;
  ::service_layer::SLErrorStatus* release_statussummary();
  ::service_layer::SLErrorStatus* mutable_statussummary();
  void set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary);
  private:
  const ::service_layer::SLErrorStatus& _internal_statussummary() const;
  ::service_layer::SLErrorStatus* _internal_mutable_statussummary();
  public:
  void unsafe_arena_set_allocated_statussummary(
      ::service_layer::SLErrorStatus* statussummary);
  ::service_layer::SLErrorStatus* unsafe_arena_release_statussummary();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6MsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6Res > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* statussummary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6GetMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6GetMsg) */ {
 public:
  inline SLRoutev6GetMsg() : SLRoutev6GetMsg(nullptr) {}
  virtual ~SLRoutev6GetMsg();
  explicit constexpr SLRoutev6GetMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6GetMsg(const SLRoutev6GetMsg& from);
  SLRoutev6GetMsg(SLRoutev6GetMsg&& from) noexcept
    : SLRoutev6GetMsg() {
    *this = ::std::move(from);
  }

  inline SLRoutev6GetMsg& operator=(const SLRoutev6GetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6GetMsg& operator=(SLRoutev6GetMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6GetMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6GetMsg* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6GetMsg*>(
               &_SLRoutev6GetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLRoutev6GetMsg& a, SLRoutev6GetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6GetMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6GetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6GetMsg* New() const final {
    return CreateMaybeMessage<SLRoutev6GetMsg>(nullptr);
  }

  SLRoutev6GetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6GetMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6GetMsg& from);
  void MergeFrom(const SLRoutev6GetMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6GetMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6GetMsg";
  }
  protected:
  explicit SLRoutev6GetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNameFieldNumber = 2,
    kPrefixFieldNumber = 3,
    kCorrelatorFieldNumber = 1,
    kPrefixLenFieldNumber = 4,
    kEntriesCountFieldNumber = 5,
    kGetNextFieldNumber = 6,
  };
  // string VrfName = 2;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // bytes Prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 PrefixLen = 4;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 EntriesCount = 5;
  void clear_entriescount();
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount() const;
  void set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entriescount() const;
  void _internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool GetNext = 6;
  void clear_getnext();
  bool getnext() const;
  void set_getnext(bool value);
  private:
  bool _internal_getnext() const;
  void _internal_set_getnext(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6GetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entriescount_;
  bool getnext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6GetMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6GetMsgRsp) */ {
 public:
  inline SLRoutev6GetMsgRsp() : SLRoutev6GetMsgRsp(nullptr) {}
  virtual ~SLRoutev6GetMsgRsp();
  explicit constexpr SLRoutev6GetMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6GetMsgRsp(const SLRoutev6GetMsgRsp& from);
  SLRoutev6GetMsgRsp(SLRoutev6GetMsgRsp&& from) noexcept
    : SLRoutev6GetMsgRsp() {
    *this = ::std::move(from);
  }

  inline SLRoutev6GetMsgRsp& operator=(const SLRoutev6GetMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6GetMsgRsp& operator=(SLRoutev6GetMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6GetMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6GetMsgRsp* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6GetMsgRsp*>(
               &_SLRoutev6GetMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLRoutev6GetMsgRsp& a, SLRoutev6GetMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6GetMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6GetMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6GetMsgRsp* New() const final {
    return CreateMaybeMessage<SLRoutev6GetMsgRsp>(nullptr);
  }

  SLRoutev6GetMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6GetMsgRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6GetMsgRsp& from);
  void MergeFrom(const SLRoutev6GetMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6GetMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6GetMsgRsp";
  }
  protected:
  explicit SLRoutev6GetMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kVrfNameFieldNumber = 3,
    kErrStatusFieldNumber = 4,
    kCorrelatorFieldNumber = 1,
    kEofFieldNumber = 2,
  };
  // repeated .service_layer.SLRoutev6 Entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLRoutev6* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >*
      mutable_entries();
  private:
  const ::service_layer::SLRoutev6& _internal_entries(int index) const;
  ::service_layer::SLRoutev6* _internal_add_entries();
  public:
  const ::service_layer::SLRoutev6& entries(int index) const;
  ::service_layer::SLRoutev6* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >&
      entries() const;

  // string VrfName = 3;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // .service_layer.SLErrorStatus ErrStatus = 4;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // uint64 Correlator = 1;
  void clear_correlator();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator() const;
  void set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlator() const;
  void _internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool Eof = 2;
  void clear_eof();
  bool eof() const;
  void set_eof(bool value);
  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6GetMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  ::service_layer::SLErrorStatus* errstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlator_;
  bool eof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6NotifRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6NotifRoute) */ {
 public:
  inline SLRoutev6NotifRoute() : SLRoutev6NotifRoute(nullptr) {}
  virtual ~SLRoutev6NotifRoute();
  explicit constexpr SLRoutev6NotifRoute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6NotifRoute(const SLRoutev6NotifRoute& from);
  SLRoutev6NotifRoute(SLRoutev6NotifRoute&& from) noexcept
    : SLRoutev6NotifRoute() {
    *this = ::std::move(from);
  }

  inline SLRoutev6NotifRoute& operator=(const SLRoutev6NotifRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6NotifRoute& operator=(SLRoutev6NotifRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6NotifRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLRoutev6NotifRoute* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6NotifRoute*>(
               &_SLRoutev6NotifRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLRoutev6NotifRoute& a, SLRoutev6NotifRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6NotifRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6NotifRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6NotifRoute* New() const final {
    return CreateMaybeMessage<SLRoutev6NotifRoute>(nullptr);
  }

  SLRoutev6NotifRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6NotifRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6NotifRoute& from);
  void MergeFrom(const SLRoutev6NotifRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6NotifRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6NotifRoute";
  }
  protected:
  explicit SLRoutev6NotifRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kVrfNameFieldNumber = 1,
  };
  // repeated .service_layer.SLRoutev6 Entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::service_layer::SLRoutev6* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >*
      mutable_entries();
  private:
  const ::service_layer::SLRoutev6& _internal_entries(int index) const;
  ::service_layer::SLRoutev6* _internal_add_entries();
  public:
  const ::service_layer::SLRoutev6& entries(int index) const;
  ::service_layer::SLRoutev6* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >&
      entries() const;

  // string VrfName = 1;
  void clear_vrfname();
  const std::string& vrfname() const;
  void set_vrfname(const std::string& value);
  void set_vrfname(std::string&& value);
  void set_vrfname(const char* value);
  void set_vrfname(const char* value, size_t size);
  std::string* mutable_vrfname();
  std::string* release_vrfname();
  void set_allocated_vrfname(std::string* vrfname);
  private:
  const std::string& _internal_vrfname() const;
  void _internal_set_vrfname(const std::string& value);
  std::string* _internal_mutable_vrfname();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6NotifRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrfname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// -------------------------------------------------------------------

class SLRoutev6Notif PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLRoutev6Notif) */ {
 public:
  inline SLRoutev6Notif() : SLRoutev6Notif(nullptr) {}
  virtual ~SLRoutev6Notif();
  explicit constexpr SLRoutev6Notif(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLRoutev6Notif(const SLRoutev6Notif& from);
  SLRoutev6Notif(SLRoutev6Notif&& from) noexcept
    : SLRoutev6Notif() {
    *this = ::std::move(from);
  }

  inline SLRoutev6Notif& operator=(const SLRoutev6Notif& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLRoutev6Notif& operator=(SLRoutev6Notif&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLRoutev6Notif& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kErrStatus = 2,
    kNotifStatus = 3,
    kRoute = 4,
    kMarker = 5,
    kVrf = 6,
    EVENT_NOT_SET = 0,
  };

  static inline const SLRoutev6Notif* internal_default_instance() {
    return reinterpret_cast<const SLRoutev6Notif*>(
               &_SLRoutev6Notif_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLRoutev6Notif& a, SLRoutev6Notif& b) {
    a.Swap(&b);
  }
  inline void Swap(SLRoutev6Notif* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLRoutev6Notif* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLRoutev6Notif* New() const final {
    return CreateMaybeMessage<SLRoutev6Notif>(nullptr);
  }

  SLRoutev6Notif* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLRoutev6Notif>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLRoutev6Notif& from);
  void MergeFrom(const SLRoutev6Notif& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLRoutev6Notif* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLRoutev6Notif";
  }
  protected:
  explicit SLRoutev6Notif(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sl_5froute_5fipv6_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kErrStatusFieldNumber = 2,
    kNotifStatusFieldNumber = 3,
    kRouteFieldNumber = 4,
    kMarkerFieldNumber = 5,
    kVrfFieldNumber = 6,
  };
  // .service_layer.SLNotifType EventType = 1;
  void clear_eventtype();
  ::service_layer::SLNotifType eventtype() const;
  void set_eventtype(::service_layer::SLNotifType value);
  private:
  ::service_layer::SLNotifType _internal_eventtype() const;
  void _internal_set_eventtype(::service_layer::SLNotifType value);
  public:

  // .service_layer.SLErrorStatus ErrStatus = 2;
  bool has_errstatus() const;
  private:
  bool _internal_has_errstatus() const;
  public:
  void clear_errstatus();
  const ::service_layer::SLErrorStatus& errstatus() const;
  ::service_layer::SLErrorStatus* release_errstatus();
  ::service_layer::SLErrorStatus* mutable_errstatus();
  void set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus);
  private:
  const ::service_layer::SLErrorStatus& _internal_errstatus() const;
  ::service_layer::SLErrorStatus* _internal_mutable_errstatus();
  public:
  void unsafe_arena_set_allocated_errstatus(
      ::service_layer::SLErrorStatus* errstatus);
  ::service_layer::SLErrorStatus* unsafe_arena_release_errstatus();

  // .service_layer.SLRouteNotifStatus NotifStatus = 3;
  bool has_notifstatus() const;
  private:
  bool _internal_has_notifstatus() const;
  public:
  void clear_notifstatus();
  const ::service_layer::SLRouteNotifStatus& notifstatus() const;
  ::service_layer::SLRouteNotifStatus* release_notifstatus();
  ::service_layer::SLRouteNotifStatus* mutable_notifstatus();
  void set_allocated_notifstatus(::service_layer::SLRouteNotifStatus* notifstatus);
  private:
  const ::service_layer::SLRouteNotifStatus& _internal_notifstatus() const;
  ::service_layer::SLRouteNotifStatus* _internal_mutable_notifstatus();
  public:
  void unsafe_arena_set_allocated_notifstatus(
      ::service_layer::SLRouteNotifStatus* notifstatus);
  ::service_layer::SLRouteNotifStatus* unsafe_arena_release_notifstatus();

  // .service_layer.SLRoutev6NotifRoute Route = 4;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::service_layer::SLRoutev6NotifRoute& route() const;
  ::service_layer::SLRoutev6NotifRoute* release_route();
  ::service_layer::SLRoutev6NotifRoute* mutable_route();
  void set_allocated_route(::service_layer::SLRoutev6NotifRoute* route);
  private:
  const ::service_layer::SLRoutev6NotifRoute& _internal_route() const;
  ::service_layer::SLRoutev6NotifRoute* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::service_layer::SLRoutev6NotifRoute* route);
  ::service_layer::SLRoutev6NotifRoute* unsafe_arena_release_route();

  // .service_layer.SLRouteNotifMarker Marker = 5;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  const ::service_layer::SLRouteNotifMarker& marker() const;
  ::service_layer::SLRouteNotifMarker* release_marker();
  ::service_layer::SLRouteNotifMarker* mutable_marker();
  void set_allocated_marker(::service_layer::SLRouteNotifMarker* marker);
  private:
  const ::service_layer::SLRouteNotifMarker& _internal_marker() const;
  ::service_layer::SLRouteNotifMarker* _internal_mutable_marker();
  public:
  void unsafe_arena_set_allocated_marker(
      ::service_layer::SLRouteNotifMarker* marker);
  ::service_layer::SLRouteNotifMarker* unsafe_arena_release_marker();

  // .service_layer.SLVrfNotif Vrf = 6;
  bool has_vrf() const;
  private:
  bool _internal_has_vrf() const;
  public:
  void clear_vrf();
  const ::service_layer::SLVrfNotif& vrf() const;
  ::service_layer::SLVrfNotif* release_vrf();
  ::service_layer::SLVrfNotif* mutable_vrf();
  void set_allocated_vrf(::service_layer::SLVrfNotif* vrf);
  private:
  const ::service_layer::SLVrfNotif& _internal_vrf() const;
  ::service_layer::SLVrfNotif* _internal_mutable_vrf();
  public:
  void unsafe_arena_set_allocated_vrf(
      ::service_layer::SLVrfNotif* vrf);
  ::service_layer::SLVrfNotif* unsafe_arena_release_vrf();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLRoutev6Notif)
 private:
  class _Internal;
  void set_has_errstatus();
  void set_has_notifstatus();
  void set_has_route();
  void set_has_marker();
  void set_has_vrf();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int eventtype_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLErrorStatus* errstatus_;
    ::service_layer::SLRouteNotifStatus* notifstatus_;
    ::service_layer::SLRoutev6NotifRoute* route_;
    ::service_layer::SLRouteNotifMarker* marker_;
    ::service_layer::SLVrfNotif* vrf_;
  } Event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sl_5froute_5fipv6_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLRoutev6

// bytes Prefix = 1;
inline void SLRoutev6::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& SLRoutev6::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6.Prefix)
  return _internal_prefix();
}
inline void SLRoutev6::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6.Prefix)
}
inline std::string* SLRoutev6::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6.Prefix)
  return _internal_mutable_prefix();
}
inline const std::string& SLRoutev6::_internal_prefix() const {
  return prefix_.Get();
}
inline void SLRoutev6::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6::set_prefix(std::string&& value) {
  
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6.Prefix)
}
inline void SLRoutev6::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6.Prefix)
}
inline void SLRoutev6::set_prefix(const void* value,
    size_t size) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6.Prefix)
}
inline std::string* SLRoutev6::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6::release_prefix() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6.Prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6.Prefix)
}

// uint32 PrefixLen = 2;
inline void SLRoutev6::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6::prefixlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6.PrefixLen)
  return _internal_prefixlen();
}
inline void SLRoutev6::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void SLRoutev6::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6.PrefixLen)
}

// .service_layer.SLRouteCommon RouteCommon = 3;
inline bool SLRoutev6::_internal_has_routecommon() const {
  return this != internal_default_instance() && routecommon_ != nullptr;
}
inline bool SLRoutev6::has_routecommon() const {
  return _internal_has_routecommon();
}
inline const ::service_layer::SLRouteCommon& SLRoutev6::_internal_routecommon() const {
  const ::service_layer::SLRouteCommon* p = routecommon_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLRouteCommon&>(
      ::service_layer::_SLRouteCommon_default_instance_);
}
inline const ::service_layer::SLRouteCommon& SLRoutev6::routecommon() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6.RouteCommon)
  return _internal_routecommon();
}
inline void SLRoutev6::unsafe_arena_set_allocated_routecommon(
    ::service_layer::SLRouteCommon* routecommon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routecommon_);
  }
  routecommon_ = routecommon;
  if (routecommon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6.RouteCommon)
}
inline ::service_layer::SLRouteCommon* SLRoutev6::release_routecommon() {
  
  ::service_layer::SLRouteCommon* temp = routecommon_;
  routecommon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLRouteCommon* SLRoutev6::unsafe_arena_release_routecommon() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6.RouteCommon)
  
  ::service_layer::SLRouteCommon* temp = routecommon_;
  routecommon_ = nullptr;
  return temp;
}
inline ::service_layer::SLRouteCommon* SLRoutev6::_internal_mutable_routecommon() {
  
  if (routecommon_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLRouteCommon>(GetArena());
    routecommon_ = p;
  }
  return routecommon_;
}
inline ::service_layer::SLRouteCommon* SLRoutev6::mutable_routecommon() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6.RouteCommon)
  return _internal_mutable_routecommon();
}
inline void SLRoutev6::set_allocated_routecommon(::service_layer::SLRouteCommon* routecommon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routecommon_);
  }
  if (routecommon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routecommon)->GetArena();
    if (message_arena != submessage_arena) {
      routecommon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routecommon, submessage_arena);
    }
    
  } else {
    
  }
  routecommon_ = routecommon;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6.RouteCommon)
}

// repeated .service_layer.SLRoutePath PathList = 4;
inline int SLRoutev6::_internal_pathlist_size() const {
  return pathlist_.size();
}
inline int SLRoutev6::pathlist_size() const {
  return _internal_pathlist_size();
}
inline ::service_layer::SLRoutePath* SLRoutev6::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6.PathList)
  return pathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >*
SLRoutev6::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev6.PathList)
  return &pathlist_;
}
inline const ::service_layer::SLRoutePath& SLRoutev6::_internal_pathlist(int index) const {
  return pathlist_.Get(index);
}
inline const ::service_layer::SLRoutePath& SLRoutev6::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6.PathList)
  return _internal_pathlist(index);
}
inline ::service_layer::SLRoutePath* SLRoutev6::_internal_add_pathlist() {
  return pathlist_.Add();
}
inline ::service_layer::SLRoutePath* SLRoutev6::add_pathlist() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev6.PathList)
  return _internal_add_pathlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutePath >&
SLRoutev6::pathlist() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev6.PathList)
  return pathlist_;
}

// -------------------------------------------------------------------

// SLRoutev6Msg

// .service_layer.SLObjectOp Oper = 1;
inline void SLRoutev6Msg::clear_oper() {
  oper_ = 0;
}
inline ::service_layer::SLObjectOp SLRoutev6Msg::_internal_oper() const {
  return static_cast< ::service_layer::SLObjectOp >(oper_);
}
inline ::service_layer::SLObjectOp SLRoutev6Msg::oper() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Msg.Oper)
  return _internal_oper();
}
inline void SLRoutev6Msg::_internal_set_oper(::service_layer::SLObjectOp value) {
  
  oper_ = value;
}
inline void SLRoutev6Msg::set_oper(::service_layer::SLObjectOp value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6Msg.Oper)
}

// uint64 Correlator = 2;
inline void SLRoutev6Msg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6Msg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6Msg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Msg.Correlator)
  return _internal_correlator();
}
inline void SLRoutev6Msg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev6Msg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6Msg.Correlator)
}

// string VrfName = 3;
inline void SLRoutev6Msg::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLRoutev6Msg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Msg.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev6Msg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6Msg.VrfName)
}
inline std::string* SLRoutev6Msg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Msg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev6Msg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev6Msg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6Msg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6Msg.VrfName)
}
inline void SLRoutev6Msg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6Msg.VrfName)
}
inline void SLRoutev6Msg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6Msg.VrfName)
}
inline std::string* SLRoutev6Msg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6Msg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Msg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6Msg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Msg.VrfName)
}

// repeated .service_layer.SLRoutev6 Routes = 4;
inline int SLRoutev6Msg::_internal_routes_size() const {
  return routes_.size();
}
inline int SLRoutev6Msg::routes_size() const {
  return _internal_routes_size();
}
inline void SLRoutev6Msg::clear_routes() {
  routes_.Clear();
}
inline ::service_layer::SLRoutev6* SLRoutev6Msg::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Msg.Routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >*
SLRoutev6Msg::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev6Msg.Routes)
  return &routes_;
}
inline const ::service_layer::SLRoutev6& SLRoutev6Msg::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::service_layer::SLRoutev6& SLRoutev6Msg::routes(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Msg.Routes)
  return _internal_routes(index);
}
inline ::service_layer::SLRoutev6* SLRoutev6Msg::_internal_add_routes() {
  return routes_.Add();
}
inline ::service_layer::SLRoutev6* SLRoutev6Msg::add_routes() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev6Msg.Routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >&
SLRoutev6Msg::routes() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev6Msg.Routes)
  return routes_;
}

// -------------------------------------------------------------------

// SLRoutev6Res

// .service_layer.SLErrorStatus ErrStatus = 1;
inline bool SLRoutev6Res::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLRoutev6Res::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLRoutev6Res::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev6Res::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Res.ErrStatus)
  return _internal_errstatus();
}
inline void SLRoutev6Res::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6Res.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRoutev6Res::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev6Res::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Res.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev6Res::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRoutev6Res::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Res.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLRoutev6Res::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Res.ErrStatus)
}

// bytes Prefix = 2;
inline void SLRoutev6Res::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& SLRoutev6Res::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Res.Prefix)
  return _internal_prefix();
}
inline void SLRoutev6Res::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6Res.Prefix)
}
inline std::string* SLRoutev6Res::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Res.Prefix)
  return _internal_mutable_prefix();
}
inline const std::string& SLRoutev6Res::_internal_prefix() const {
  return prefix_.Get();
}
inline void SLRoutev6Res::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6Res::set_prefix(std::string&& value) {
  
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6Res.Prefix)
}
inline void SLRoutev6Res::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6Res.Prefix)
}
inline void SLRoutev6Res::set_prefix(const void* value,
    size_t size) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6Res.Prefix)
}
inline std::string* SLRoutev6Res::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6Res::release_prefix() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Res.Prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6Res::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6Res.Prefix)
}

// uint32 PrefixLen = 3;
inline void SLRoutev6Res::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6Res::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6Res::prefixlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Res.PrefixLen)
  return _internal_prefixlen();
}
inline void SLRoutev6Res::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void SLRoutev6Res::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6Res.PrefixLen)
}

// -------------------------------------------------------------------

// SLRoutev6MsgRsp

// uint64 Correlator = 1;
inline void SLRoutev6MsgRsp::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6MsgRsp::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6MsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6MsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLRoutev6MsgRsp::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev6MsgRsp::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6MsgRsp.Correlator)
}

// string VrfName = 2;
inline void SLRoutev6MsgRsp::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLRoutev6MsgRsp::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6MsgRsp.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev6MsgRsp::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6MsgRsp.VrfName)
}
inline std::string* SLRoutev6MsgRsp::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6MsgRsp.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev6MsgRsp::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev6MsgRsp::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6MsgRsp::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6MsgRsp.VrfName)
}
inline void SLRoutev6MsgRsp::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6MsgRsp.VrfName)
}
inline void SLRoutev6MsgRsp::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6MsgRsp.VrfName)
}
inline std::string* SLRoutev6MsgRsp::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6MsgRsp::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6MsgRsp.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6MsgRsp::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6MsgRsp.VrfName)
}

// .service_layer.SLErrorStatus StatusSummary = 3;
inline bool SLRoutev6MsgRsp::_internal_has_statussummary() const {
  return this != internal_default_instance() && statussummary_ != nullptr;
}
inline bool SLRoutev6MsgRsp::has_statussummary() const {
  return _internal_has_statussummary();
}
inline const ::service_layer::SLErrorStatus& SLRoutev6MsgRsp::_internal_statussummary() const {
  const ::service_layer::SLErrorStatus* p = statussummary_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev6MsgRsp::statussummary() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6MsgRsp.StatusSummary)
  return _internal_statussummary();
}
inline void SLRoutev6MsgRsp::unsafe_arena_set_allocated_statussummary(
    ::service_layer::SLErrorStatus* statussummary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  statussummary_ = statussummary;
  if (statussummary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6MsgRsp.StatusSummary)
}
inline ::service_layer::SLErrorStatus* SLRoutev6MsgRsp::release_statussummary() {
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev6MsgRsp::unsafe_arena_release_statussummary() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6MsgRsp.StatusSummary)
  
  ::service_layer::SLErrorStatus* temp = statussummary_;
  statussummary_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev6MsgRsp::_internal_mutable_statussummary() {
  
  if (statussummary_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    statussummary_ = p;
  }
  return statussummary_;
}
inline ::service_layer::SLErrorStatus* SLRoutev6MsgRsp::mutable_statussummary() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6MsgRsp.StatusSummary)
  return _internal_mutable_statussummary();
}
inline void SLRoutev6MsgRsp::set_allocated_statussummary(::service_layer::SLErrorStatus* statussummary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary_);
  }
  if (statussummary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statussummary)->GetArena();
    if (message_arena != submessage_arena) {
      statussummary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statussummary, submessage_arena);
    }
    
  } else {
    
  }
  statussummary_ = statussummary;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6MsgRsp.StatusSummary)
}

// repeated .service_layer.SLRoutev6Res Results = 4;
inline int SLRoutev6MsgRsp::_internal_results_size() const {
  return results_.size();
}
inline int SLRoutev6MsgRsp::results_size() const {
  return _internal_results_size();
}
inline void SLRoutev6MsgRsp::clear_results() {
  results_.Clear();
}
inline ::service_layer::SLRoutev6Res* SLRoutev6MsgRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6MsgRsp.Results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6Res >*
SLRoutev6MsgRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev6MsgRsp.Results)
  return &results_;
}
inline const ::service_layer::SLRoutev6Res& SLRoutev6MsgRsp::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::service_layer::SLRoutev6Res& SLRoutev6MsgRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6MsgRsp.Results)
  return _internal_results(index);
}
inline ::service_layer::SLRoutev6Res* SLRoutev6MsgRsp::_internal_add_results() {
  return results_.Add();
}
inline ::service_layer::SLRoutev6Res* SLRoutev6MsgRsp::add_results() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev6MsgRsp.Results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6Res >&
SLRoutev6MsgRsp::results() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev6MsgRsp.Results)
  return results_;
}

// -------------------------------------------------------------------

// SLRoutev6GetMsg

// uint64 Correlator = 1;
inline void SLRoutev6GetMsg::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6GetMsg::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6GetMsg::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsg.Correlator)
  return _internal_correlator();
}
inline void SLRoutev6GetMsg::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev6GetMsg::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsg.Correlator)
}

// string VrfName = 2;
inline void SLRoutev6GetMsg::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLRoutev6GetMsg::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsg.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev6GetMsg::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsg.VrfName)
}
inline std::string* SLRoutev6GetMsg::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6GetMsg.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev6GetMsg::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev6GetMsg::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6GetMsg::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6GetMsg.VrfName)
}
inline void SLRoutev6GetMsg::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6GetMsg.VrfName)
}
inline void SLRoutev6GetMsg::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6GetMsg.VrfName)
}
inline std::string* SLRoutev6GetMsg::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6GetMsg::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6GetMsg.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6GetMsg::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6GetMsg.VrfName)
}

// bytes Prefix = 3;
inline void SLRoutev6GetMsg::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& SLRoutev6GetMsg::prefix() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsg.Prefix)
  return _internal_prefix();
}
inline void SLRoutev6GetMsg::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsg.Prefix)
}
inline std::string* SLRoutev6GetMsg::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6GetMsg.Prefix)
  return _internal_mutable_prefix();
}
inline const std::string& SLRoutev6GetMsg::_internal_prefix() const {
  return prefix_.Get();
}
inline void SLRoutev6GetMsg::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6GetMsg::set_prefix(std::string&& value) {
  
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6GetMsg.Prefix)
}
inline void SLRoutev6GetMsg::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6GetMsg.Prefix)
}
inline void SLRoutev6GetMsg::set_prefix(const void* value,
    size_t size) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6GetMsg.Prefix)
}
inline std::string* SLRoutev6GetMsg::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6GetMsg::release_prefix() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6GetMsg.Prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6GetMsg::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6GetMsg.Prefix)
}

// uint32 PrefixLen = 4;
inline void SLRoutev6GetMsg::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6GetMsg::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6GetMsg::prefixlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsg.PrefixLen)
  return _internal_prefixlen();
}
inline void SLRoutev6GetMsg::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void SLRoutev6GetMsg::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsg.PrefixLen)
}

// uint32 EntriesCount = 5;
inline void SLRoutev6GetMsg::clear_entriescount() {
  entriescount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6GetMsg::_internal_entriescount() const {
  return entriescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLRoutev6GetMsg::entriescount() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsg.EntriesCount)
  return _internal_entriescount();
}
inline void SLRoutev6GetMsg::_internal_set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entriescount_ = value;
}
inline void SLRoutev6GetMsg::set_entriescount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entriescount(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsg.EntriesCount)
}

// bool GetNext = 6;
inline void SLRoutev6GetMsg::clear_getnext() {
  getnext_ = false;
}
inline bool SLRoutev6GetMsg::_internal_getnext() const {
  return getnext_;
}
inline bool SLRoutev6GetMsg::getnext() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsg.GetNext)
  return _internal_getnext();
}
inline void SLRoutev6GetMsg::_internal_set_getnext(bool value) {
  
  getnext_ = value;
}
inline void SLRoutev6GetMsg::set_getnext(bool value) {
  _internal_set_getnext(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsg.GetNext)
}

// -------------------------------------------------------------------

// SLRoutev6GetMsgRsp

// uint64 Correlator = 1;
inline void SLRoutev6GetMsgRsp::clear_correlator() {
  correlator_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6GetMsgRsp::_internal_correlator() const {
  return correlator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SLRoutev6GetMsgRsp::correlator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsgRsp.Correlator)
  return _internal_correlator();
}
inline void SLRoutev6GetMsgRsp::_internal_set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlator_ = value;
}
inline void SLRoutev6GetMsgRsp::set_correlator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsgRsp.Correlator)
}

// bool Eof = 2;
inline void SLRoutev6GetMsgRsp::clear_eof() {
  eof_ = false;
}
inline bool SLRoutev6GetMsgRsp::_internal_eof() const {
  return eof_;
}
inline bool SLRoutev6GetMsgRsp::eof() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsgRsp.Eof)
  return _internal_eof();
}
inline void SLRoutev6GetMsgRsp::_internal_set_eof(bool value) {
  
  eof_ = value;
}
inline void SLRoutev6GetMsgRsp::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsgRsp.Eof)
}

// string VrfName = 3;
inline void SLRoutev6GetMsgRsp::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLRoutev6GetMsgRsp::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsgRsp.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev6GetMsgRsp::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6GetMsgRsp.VrfName)
}
inline std::string* SLRoutev6GetMsgRsp::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6GetMsgRsp.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev6GetMsgRsp::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev6GetMsgRsp::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6GetMsgRsp::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6GetMsgRsp.VrfName)
}
inline void SLRoutev6GetMsgRsp::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6GetMsgRsp.VrfName)
}
inline void SLRoutev6GetMsgRsp::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6GetMsgRsp.VrfName)
}
inline std::string* SLRoutev6GetMsgRsp::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6GetMsgRsp::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6GetMsgRsp.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6GetMsgRsp::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6GetMsgRsp.VrfName)
}

// .service_layer.SLErrorStatus ErrStatus = 4;
inline bool SLRoutev6GetMsgRsp::_internal_has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != nullptr;
}
inline bool SLRoutev6GetMsgRsp::has_errstatus() const {
  return _internal_has_errstatus();
}
inline const ::service_layer::SLErrorStatus& SLRoutev6GetMsgRsp::_internal_errstatus() const {
  const ::service_layer::SLErrorStatus* p = errstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev6GetMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsgRsp.ErrStatus)
  return _internal_errstatus();
}
inline void SLRoutev6GetMsgRsp::unsafe_arena_set_allocated_errstatus(
    ::service_layer::SLErrorStatus* errstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6GetMsgRsp.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRoutev6GetMsgRsp::release_errstatus() {
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev6GetMsgRsp::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6GetMsgRsp.ErrStatus)
  
  ::service_layer::SLErrorStatus* temp = errstatus_;
  errstatus_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLRoutev6GetMsgRsp::_internal_mutable_errstatus() {
  
  if (errstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArena());
    errstatus_ = p;
  }
  return errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRoutev6GetMsgRsp::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6GetMsgRsp.ErrStatus)
  return _internal_mutable_errstatus();
}
inline void SLRoutev6GetMsgRsp::set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus_);
  }
  if (errstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errstatus)->GetArena();
    if (message_arena != submessage_arena) {
      errstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errstatus, submessage_arena);
    }
    
  } else {
    
  }
  errstatus_ = errstatus;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6GetMsgRsp.ErrStatus)
}

// repeated .service_layer.SLRoutev6 Entries = 5;
inline int SLRoutev6GetMsgRsp::_internal_entries_size() const {
  return entries_.size();
}
inline int SLRoutev6GetMsgRsp::entries_size() const {
  return _internal_entries_size();
}
inline void SLRoutev6GetMsgRsp::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLRoutev6* SLRoutev6GetMsgRsp::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6GetMsgRsp.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >*
SLRoutev6GetMsgRsp::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev6GetMsgRsp.Entries)
  return &entries_;
}
inline const ::service_layer::SLRoutev6& SLRoutev6GetMsgRsp::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLRoutev6& SLRoutev6GetMsgRsp::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6GetMsgRsp.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLRoutev6* SLRoutev6GetMsgRsp::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLRoutev6* SLRoutev6GetMsgRsp::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev6GetMsgRsp.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >&
SLRoutev6GetMsgRsp::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev6GetMsgRsp.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLRoutev6NotifRoute

// string VrfName = 1;
inline void SLRoutev6NotifRoute::clear_vrfname() {
  vrfname_.ClearToEmpty();
}
inline const std::string& SLRoutev6NotifRoute::vrfname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6NotifRoute.VrfName)
  return _internal_vrfname();
}
inline void SLRoutev6NotifRoute::set_vrfname(const std::string& value) {
  _internal_set_vrfname(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6NotifRoute.VrfName)
}
inline std::string* SLRoutev6NotifRoute::mutable_vrfname() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6NotifRoute.VrfName)
  return _internal_mutable_vrfname();
}
inline const std::string& SLRoutev6NotifRoute::_internal_vrfname() const {
  return vrfname_.Get();
}
inline void SLRoutev6NotifRoute::_internal_set_vrfname(const std::string& value) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SLRoutev6NotifRoute::set_vrfname(std::string&& value) {
  
  vrfname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service_layer.SLRoutev6NotifRoute.VrfName)
}
inline void SLRoutev6NotifRoute::set_vrfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service_layer.SLRoutev6NotifRoute.VrfName)
}
inline void SLRoutev6NotifRoute::set_vrfname(const char* value,
    size_t size) {
  
  vrfname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service_layer.SLRoutev6NotifRoute.VrfName)
}
inline std::string* SLRoutev6NotifRoute::_internal_mutable_vrfname() {
  
  return vrfname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SLRoutev6NotifRoute::release_vrfname() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6NotifRoute.VrfName)
  return vrfname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SLRoutev6NotifRoute::set_allocated_vrfname(std::string* vrfname) {
  if (vrfname != nullptr) {
    
  } else {
    
  }
  vrfname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrfname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLRoutev6NotifRoute.VrfName)
}

// repeated .service_layer.SLRoutev6 Entries = 2;
inline int SLRoutev6NotifRoute::_internal_entries_size() const {
  return entries_.size();
}
inline int SLRoutev6NotifRoute::entries_size() const {
  return _internal_entries_size();
}
inline void SLRoutev6NotifRoute::clear_entries() {
  entries_.Clear();
}
inline ::service_layer::SLRoutev6* SLRoutev6NotifRoute::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6NotifRoute.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >*
SLRoutev6NotifRoute::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLRoutev6NotifRoute.Entries)
  return &entries_;
}
inline const ::service_layer::SLRoutev6& SLRoutev6NotifRoute::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::service_layer::SLRoutev6& SLRoutev6NotifRoute::entries(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6NotifRoute.Entries)
  return _internal_entries(index);
}
inline ::service_layer::SLRoutev6* SLRoutev6NotifRoute::_internal_add_entries() {
  return entries_.Add();
}
inline ::service_layer::SLRoutev6* SLRoutev6NotifRoute::add_entries() {
  // @@protoc_insertion_point(field_add:service_layer.SLRoutev6NotifRoute.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLRoutev6 >&
SLRoutev6NotifRoute::entries() const {
  // @@protoc_insertion_point(field_list:service_layer.SLRoutev6NotifRoute.Entries)
  return entries_;
}

// -------------------------------------------------------------------

// SLRoutev6Notif

// .service_layer.SLNotifType EventType = 1;
inline void SLRoutev6Notif::clear_eventtype() {
  eventtype_ = 0;
}
inline ::service_layer::SLNotifType SLRoutev6Notif::_internal_eventtype() const {
  return static_cast< ::service_layer::SLNotifType >(eventtype_);
}
inline ::service_layer::SLNotifType SLRoutev6Notif::eventtype() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Notif.EventType)
  return _internal_eventtype();
}
inline void SLRoutev6Notif::_internal_set_eventtype(::service_layer::SLNotifType value) {
  
  eventtype_ = value;
}
inline void SLRoutev6Notif::set_eventtype(::service_layer::SLNotifType value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:service_layer.SLRoutev6Notif.EventType)
}

// .service_layer.SLErrorStatus ErrStatus = 2;
inline bool SLRoutev6Notif::_internal_has_errstatus() const {
  return Event_case() == kErrStatus;
}
inline bool SLRoutev6Notif::has_errstatus() const {
  return _internal_has_errstatus();
}
inline void SLRoutev6Notif::set_has_errstatus() {
  _oneof_case_[0] = kErrStatus;
}
inline ::service_layer::SLErrorStatus* SLRoutev6Notif::release_errstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
      ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLErrorStatus& SLRoutev6Notif::_internal_errstatus() const {
  return _internal_has_errstatus()
      ? *Event_.errstatus_
      : reinterpret_cast< ::service_layer::SLErrorStatus&>(::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLRoutev6Notif::errstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Notif.ErrStatus)
  return _internal_errstatus();
}
inline ::service_layer::SLErrorStatus* SLRoutev6Notif::unsafe_arena_release_errstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev6Notif.ErrStatus)
  if (_internal_has_errstatus()) {
    clear_has_Event();
    ::service_layer::SLErrorStatus* temp = Event_.errstatus_;
    Event_.errstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev6Notif::unsafe_arena_set_allocated_errstatus(::service_layer::SLErrorStatus* errstatus) {
  clear_Event();
  if (errstatus) {
    set_has_errstatus();
    Event_.errstatus_ = errstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6Notif.ErrStatus)
}
inline ::service_layer::SLErrorStatus* SLRoutev6Notif::_internal_mutable_errstatus() {
  if (!_internal_has_errstatus()) {
    clear_Event();
    set_has_errstatus();
    Event_.errstatus_ = CreateMaybeMessage< ::service_layer::SLErrorStatus >(GetArena());
  }
  return Event_.errstatus_;
}
inline ::service_layer::SLErrorStatus* SLRoutev6Notif::mutable_errstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Notif.ErrStatus)
  return _internal_mutable_errstatus();
}

// .service_layer.SLRouteNotifStatus NotifStatus = 3;
inline bool SLRoutev6Notif::_internal_has_notifstatus() const {
  return Event_case() == kNotifStatus;
}
inline bool SLRoutev6Notif::has_notifstatus() const {
  return _internal_has_notifstatus();
}
inline void SLRoutev6Notif::set_has_notifstatus() {
  _oneof_case_[0] = kNotifStatus;
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev6Notif::release_notifstatus() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Notif.NotifStatus)
  if (_internal_has_notifstatus()) {
    clear_has_Event();
      ::service_layer::SLRouteNotifStatus* temp = Event_.notifstatus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.notifstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLRouteNotifStatus& SLRoutev6Notif::_internal_notifstatus() const {
  return _internal_has_notifstatus()
      ? *Event_.notifstatus_
      : reinterpret_cast< ::service_layer::SLRouteNotifStatus&>(::service_layer::_SLRouteNotifStatus_default_instance_);
}
inline const ::service_layer::SLRouteNotifStatus& SLRoutev6Notif::notifstatus() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Notif.NotifStatus)
  return _internal_notifstatus();
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev6Notif::unsafe_arena_release_notifstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev6Notif.NotifStatus)
  if (_internal_has_notifstatus()) {
    clear_has_Event();
    ::service_layer::SLRouteNotifStatus* temp = Event_.notifstatus_;
    Event_.notifstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev6Notif::unsafe_arena_set_allocated_notifstatus(::service_layer::SLRouteNotifStatus* notifstatus) {
  clear_Event();
  if (notifstatus) {
    set_has_notifstatus();
    Event_.notifstatus_ = notifstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6Notif.NotifStatus)
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev6Notif::_internal_mutable_notifstatus() {
  if (!_internal_has_notifstatus()) {
    clear_Event();
    set_has_notifstatus();
    Event_.notifstatus_ = CreateMaybeMessage< ::service_layer::SLRouteNotifStatus >(GetArena());
  }
  return Event_.notifstatus_;
}
inline ::service_layer::SLRouteNotifStatus* SLRoutev6Notif::mutable_notifstatus() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Notif.NotifStatus)
  return _internal_mutable_notifstatus();
}

// .service_layer.SLRoutev6NotifRoute Route = 4;
inline bool SLRoutev6Notif::_internal_has_route() const {
  return Event_case() == kRoute;
}
inline bool SLRoutev6Notif::has_route() const {
  return _internal_has_route();
}
inline void SLRoutev6Notif::set_has_route() {
  _oneof_case_[0] = kRoute;
}
inline void SLRoutev6Notif::clear_route() {
  if (_internal_has_route()) {
    if (GetArena() == nullptr) {
      delete Event_.route_;
    }
    clear_has_Event();
  }
}
inline ::service_layer::SLRoutev6NotifRoute* SLRoutev6Notif::release_route() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Notif.Route)
  if (_internal_has_route()) {
    clear_has_Event();
      ::service_layer::SLRoutev6NotifRoute* temp = Event_.route_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.route_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLRoutev6NotifRoute& SLRoutev6Notif::_internal_route() const {
  return _internal_has_route()
      ? *Event_.route_
      : reinterpret_cast< ::service_layer::SLRoutev6NotifRoute&>(::service_layer::_SLRoutev6NotifRoute_default_instance_);
}
inline const ::service_layer::SLRoutev6NotifRoute& SLRoutev6Notif::route() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Notif.Route)
  return _internal_route();
}
inline ::service_layer::SLRoutev6NotifRoute* SLRoutev6Notif::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev6Notif.Route)
  if (_internal_has_route()) {
    clear_has_Event();
    ::service_layer::SLRoutev6NotifRoute* temp = Event_.route_;
    Event_.route_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev6Notif::unsafe_arena_set_allocated_route(::service_layer::SLRoutev6NotifRoute* route) {
  clear_Event();
  if (route) {
    set_has_route();
    Event_.route_ = route;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6Notif.Route)
}
inline ::service_layer::SLRoutev6NotifRoute* SLRoutev6Notif::_internal_mutable_route() {
  if (!_internal_has_route()) {
    clear_Event();
    set_has_route();
    Event_.route_ = CreateMaybeMessage< ::service_layer::SLRoutev6NotifRoute >(GetArena());
  }
  return Event_.route_;
}
inline ::service_layer::SLRoutev6NotifRoute* SLRoutev6Notif::mutable_route() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Notif.Route)
  return _internal_mutable_route();
}

// .service_layer.SLRouteNotifMarker Marker = 5;
inline bool SLRoutev6Notif::_internal_has_marker() const {
  return Event_case() == kMarker;
}
inline bool SLRoutev6Notif::has_marker() const {
  return _internal_has_marker();
}
inline void SLRoutev6Notif::set_has_marker() {
  _oneof_case_[0] = kMarker;
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev6Notif::release_marker() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Notif.Marker)
  if (_internal_has_marker()) {
    clear_has_Event();
      ::service_layer::SLRouteNotifMarker* temp = Event_.marker_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.marker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLRouteNotifMarker& SLRoutev6Notif::_internal_marker() const {
  return _internal_has_marker()
      ? *Event_.marker_
      : reinterpret_cast< ::service_layer::SLRouteNotifMarker&>(::service_layer::_SLRouteNotifMarker_default_instance_);
}
inline const ::service_layer::SLRouteNotifMarker& SLRoutev6Notif::marker() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Notif.Marker)
  return _internal_marker();
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev6Notif::unsafe_arena_release_marker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev6Notif.Marker)
  if (_internal_has_marker()) {
    clear_has_Event();
    ::service_layer::SLRouteNotifMarker* temp = Event_.marker_;
    Event_.marker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev6Notif::unsafe_arena_set_allocated_marker(::service_layer::SLRouteNotifMarker* marker) {
  clear_Event();
  if (marker) {
    set_has_marker();
    Event_.marker_ = marker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6Notif.Marker)
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev6Notif::_internal_mutable_marker() {
  if (!_internal_has_marker()) {
    clear_Event();
    set_has_marker();
    Event_.marker_ = CreateMaybeMessage< ::service_layer::SLRouteNotifMarker >(GetArena());
  }
  return Event_.marker_;
}
inline ::service_layer::SLRouteNotifMarker* SLRoutev6Notif::mutable_marker() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Notif.Marker)
  return _internal_mutable_marker();
}

// .service_layer.SLVrfNotif Vrf = 6;
inline bool SLRoutev6Notif::_internal_has_vrf() const {
  return Event_case() == kVrf;
}
inline bool SLRoutev6Notif::has_vrf() const {
  return _internal_has_vrf();
}
inline void SLRoutev6Notif::set_has_vrf() {
  _oneof_case_[0] = kVrf;
}
inline ::service_layer::SLVrfNotif* SLRoutev6Notif::release_vrf() {
  // @@protoc_insertion_point(field_release:service_layer.SLRoutev6Notif.Vrf)
  if (_internal_has_vrf()) {
    clear_has_Event();
      ::service_layer::SLVrfNotif* temp = Event_.vrf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Event_.vrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLVrfNotif& SLRoutev6Notif::_internal_vrf() const {
  return _internal_has_vrf()
      ? *Event_.vrf_
      : reinterpret_cast< ::service_layer::SLVrfNotif&>(::service_layer::_SLVrfNotif_default_instance_);
}
inline const ::service_layer::SLVrfNotif& SLRoutev6Notif::vrf() const {
  // @@protoc_insertion_point(field_get:service_layer.SLRoutev6Notif.Vrf)
  return _internal_vrf();
}
inline ::service_layer::SLVrfNotif* SLRoutev6Notif::unsafe_arena_release_vrf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLRoutev6Notif.Vrf)
  if (_internal_has_vrf()) {
    clear_has_Event();
    ::service_layer::SLVrfNotif* temp = Event_.vrf_;
    Event_.vrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLRoutev6Notif::unsafe_arena_set_allocated_vrf(::service_layer::SLVrfNotif* vrf) {
  clear_Event();
  if (vrf) {
    set_has_vrf();
    Event_.vrf_ = vrf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLRoutev6Notif.Vrf)
}
inline ::service_layer::SLVrfNotif* SLRoutev6Notif::_internal_mutable_vrf() {
  if (!_internal_has_vrf()) {
    clear_Event();
    set_has_vrf();
    Event_.vrf_ = CreateMaybeMessage< ::service_layer::SLVrfNotif >(GetArena());
  }
  return Event_.vrf_;
}
inline ::service_layer::SLVrfNotif* SLRoutev6Notif::mutable_vrf() {
  // @@protoc_insertion_point(field_mutable:service_layer.SLRoutev6Notif.Vrf)
  return _internal_mutable_vrf();
}

inline bool SLRoutev6Notif::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void SLRoutev6Notif::clear_has_Event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SLRoutev6Notif::EventCase SLRoutev6Notif::Event_case() const {
  return SLRoutev6Notif::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5froute_5fipv6_2eproto
